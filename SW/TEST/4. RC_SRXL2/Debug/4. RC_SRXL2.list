
4. RC_SRXL2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800cc70  0800cc70  0000dc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0ec  0800d0ec  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d0ec  0800d0ec  0000e0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0f4  0800d0f4  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0f4  0800d0f4  0000e0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0f8  0800d0f8  0000e0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d0fc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001e18  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020dc  200020dc  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d8d  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e3  00000000  00000000  00026081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0002a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2e  00000000  00000000  0002b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282d2  00000000  00000000  0002c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019366  00000000  00000000  000549a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da60c  00000000  00000000  0006dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014831a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062cc  00000000  00000000  00148360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014e62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc58 	.word	0x0800cc58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800cc58 	.word	0x0800cc58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:

#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <BuzzerPlayNote+0x54>)
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fac7 	bl	8000504 <__aeabi_ui2d>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <BuzzerPlayNote+0x58>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4c08      	ldr	r4, [pc, #32]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8000fa2:	bf00      	nop
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	0501bd00 	.word	0x0501bd00
 8000fb4:	0800cd08 	.word	0x0800cd08

08000fb8 <BuzzerPlayInit>:

void BuzzerPlayInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f001 fbb4 	bl	800274c <HAL_Delay>
	TIM4->PSC = 1500;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f001 fbad 	bl	800274c <HAL_Delay>
	TIM4->PSC = 1000;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f001 fba6 	bl	800274c <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <BuzzerPlayInit+0x58>)
 8001006:	f7ff ff96 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000800 	.word	0x40000800

08001014 <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001020:	f7ff ff78 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001026:	2204      	movs	r2, #4
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

	for (int i=0; i<8; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00a      	b.n	8001046 <BuzzerPlayOneCycle+0x32>
		BuzzerPlayNote(i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <BuzzerPlayNote>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f001 fb86 	bl	800274c <HAL_Delay>
	for (int i=0; i<8; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b07      	cmp	r3, #7
 800104a:	ddf1      	ble.n	8001030 <BuzzerPlayOneCycle+0x1c>
	}
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001052:	f7ff ff70 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001056:	bf00      	nop
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40000800 	.word	0x40000800

08001064 <RB_init>:
  * @param  ptRB		
  					size 		
  * @retval unsigned int 0 성공
  */
unsigned char RB_init(RingFifo_t * ptRB, unsigned short size)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]

	if(size & (size-1))
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	3b01      	subs	r3, #1
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <RB_init+0x24>
	{
		assert(0);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <RB_init+0x64>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <RB_init+0x68>)
 8001080:	2119      	movs	r1, #25
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <RB_init+0x6c>)
 8001084:	f009 f966 	bl	800a354 <__assert_func>
		return 1;
	}

	ptRB->size = size;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	801a      	strh	r2, [r3, #0]
	ptRB->wrIdx= 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	805a      	strh	r2, [r3, #2]
	ptRB->rdIdx= 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	809a      	strh	r2, [r3, #4]
	ptRB->data = malloc(size);
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	4618      	mov	r0, r3
 800109e:	f009 f977 	bl	800a390 <malloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	609a      	str	r2, [r3, #8]

	assert(ptRB->data);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <RB_init+0x5a>
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <RB_init+0x70>)
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <RB_init+0x68>)
 80010b6:	2122      	movs	r1, #34	@ 0x22
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <RB_init+0x6c>)
 80010ba:	f009 f94b 	bl	800a354 <__assert_func>

	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800cc70 	.word	0x0800cc70
 80010cc:	0800cd48 	.word	0x0800cd48
 80010d0:	0800cc74 	.word	0x0800cc74
 80010d4:	0800cc98 	.word	0x0800cc98

080010d8 <RB_write>:
		ptRB->rdIdx= 0;
		memset(ptRB->data, 0, ptRB->size);
}

void RB_write(RingFifo_t * ptRB, unsigned char data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  if(RB_isfull(ptRB))
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f852 	bl	800118e <RB_isfull>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d116      	bne.n	800111e <RB_write+0x46>
    return;
    
	ptRB->data[ptRB->wrIdx] = data;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	8852      	ldrh	r2, [r2, #2]
 80010f8:	4413      	add	r3, r2
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	701a      	strb	r2, [r3, #0]
	ptRB->wrIdx = (ptRB->size-1) & (ptRB->wrIdx+1);	
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21b      	sxth	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	805a      	strh	r2, [r3, #2]
 800111c:	e000      	b.n	8001120 <RB_write+0x48>
    return;
 800111e:	bf00      	nop
}
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <RB_read>:

unsigned char RB_read(RingFifo_t * ptRB)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]

	unsigned char val = ptRB->data[ptRB->rdIdx];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	8892      	ldrh	r2, [r2, #4]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]
	ptRB->rdIdx = (ptRB->size-1) & (ptRB->rdIdx+1);	
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21b      	sxth	r3, r3
 8001150:	4013      	ands	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	809a      	strh	r2, [r3, #4]

	return val;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <RB_isempty>:

unsigned char RB_isempty(RingFifo_t * ptRB)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	return (ptRB->rdIdx == ptRB->wrIdx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889a      	ldrh	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	885b      	ldrh	r3, [r3, #2]
 8001178:	429a      	cmp	r2, r3
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <RB_isfull>:

unsigned char RB_isfull(RingFifo_t * ptRB)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return ((ptRB->size-1) & ptRB->rdIdx) == ((ptRB->size-1) & (ptRB->wrIdx+1));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	889b      	ldrh	r3, [r3, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	3301      	adds	r3, #1
 80011a2:	405a      	eors	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	2b80      	cmp	r3, #128	@ 0x80
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SRXL2_Initialization>:
 *      Email : leecurrent04@inha.edu
 */

#include <FC_RC/SRXL2.h>

int SRXL2_Initialization(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	while(RB_init(&SRXL2_RingFifo, SRXL2_RING_BUFFER_SIZE));
 8001244:	bf00      	nop
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <SRXL2_Initialization+0x1c>)
 800124a:	f7ff ff0b 	bl	8001064 <RB_init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f8      	bne.n	8001246 <SRXL2_Initialization+0x6>

	return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002e0 	.word	0x200002e0

08001260 <SRXL2_Connect>:

// ReadByte and Hand Shake
int SRXL2_Connect(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
		}
	}
	*/
	while(1)
	{
		SRXL2_GetData();
 8001264:	f000 f890 	bl	8001388 <SRXL2_GetData>
		if(packet.PacketType == SRXL_HANDSHAKE_ID)
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <SRXL2_Connect+0x3c>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	2b21      	cmp	r3, #33	@ 0x21
 800126e:	d1f9      	bne.n	8001264 <SRXL2_Connect+0x4>
		{
			if((handshakeRx.SrcID>>4) == 0x1&&(handshakeRx.DestID>>4) == 0x3)
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <SRXL2_Connect+0x40>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d1f3      	bne.n	8001264 <SRXL2_Connect+0x4>
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <SRXL2_Connect+0x40>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d1ed      	bne.n	8001264 <SRXL2_Connect+0x4>
			{
				if(0==SRXL2_doBind()){
 8001288:	f000 f8ce 	bl	8001428 <SRXL2_doBind>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <SRXL2_Connect+0x34>
		SRXL2_GetData();
 8001292:	e7e7      	b.n	8001264 <SRXL2_Connect+0x4>
					break;
 8001294:	bf00      	nop
				}
			}
		}
	}
	return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000340 	.word	0x20000340
 80012a0:	2000034c 	.word	0x2000034c

080012a4 <SRXL2_readByte>:

int SRXL2_readByte(void){
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0

	if((SRXL2_flag&0b01) != 1)
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <SRXL2_readByte+0xd4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <SRXL2_readByte+0x18>
	{
		return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e058      	b.n	800136e <SRXL2_readByte+0xca>
	}
	if(RB_isempty(&SRXL2_RingFifo))
 80012bc:	482f      	ldr	r0, [pc, #188]	@ (800137c <SRXL2_readByte+0xd8>)
 80012be:	f7ff ff53 	bl	8001168 <RB_isempty>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <SRXL2_readByte+0x2a>
	{
		return -2;
 80012c8:	f06f 0301 	mvn.w	r3, #1
 80012cc:	e04f      	b.n	800136e <SRXL2_readByte+0xca>
	}

	SRXL2_flag &= 0b10;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SRXL2_readByte+0xd4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <SRXL2_readByte+0xd4>)
 80012da:	701a      	strb	r2, [r3, #0]
	//LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);

	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 80012dc:	2300      	movs	r3, #0
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	e03f      	b.n	8001362 <SRXL2_readByte+0xbe>

		// Ring Buffer에서 array로 가져옴
		SRXL2_data[cnt] = RB_read(&SRXL2_RingFifo);
 80012e2:	79fc      	ldrb	r4, [r7, #7]
 80012e4:	4825      	ldr	r0, [pc, #148]	@ (800137c <SRXL2_readByte+0xd8>)
 80012e6:	f7ff ff1e 	bl	8001126 <RB_read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <SRXL2_readByte+0xdc>)
 80012f0:	551a      	strb	r2, [r3, r4]

		// PACKET이 시작함.
		if(SRXL2_data[cnt]==0xA6){
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SRXL2_readByte+0xdc>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	2ba6      	cmp	r3, #166	@ 0xa6
 80012fa:	d104      	bne.n	8001306 <SRXL2_readByte+0x62>
			cnt = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	71fb      	strb	r3, [r7, #7]
			SRXL2_data[0]=0xA6;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <SRXL2_readByte+0xdc>)
 8001302:	22a6      	movs	r2, #166	@ 0xa6
 8001304:	701a      	strb	r2, [r3, #0]
		}
		if(cnt>SRXL2_INDEX_LENGTH && SRXL2_data[SRXL2_INDEX_LENGTH] == cnt){
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d927      	bls.n	800135c <SRXL2_readByte+0xb8>
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <SRXL2_readByte+0xdc>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	429a      	cmp	r2, r3
 8001314:	d122      	bne.n	800135c <SRXL2_readByte+0xb8>
			packet.SRXL2_ID = SPEKTRUM_SRXL_ID;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <SRXL2_readByte+0xe0>)
 8001318:	22a6      	movs	r2, #166	@ 0xa6
 800131a:	701a      	strb	r2, [r3, #0]
			packet.PacketType = SRXL2_data[SRXL2_INDEX_PACKET_TYPE];
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <SRXL2_readByte+0xdc>)
 800131e:	785a      	ldrb	r2, [r3, #1]
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <SRXL2_readByte+0xe0>)
 8001322:	705a      	strb	r2, [r3, #1]
			packet.Length = SRXL2_data[SRXL2_INDEX_LENGTH];
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <SRXL2_readByte+0xdc>)
 8001326:	789a      	ldrb	r2, [r3, #2]
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <SRXL2_readByte+0xe0>)
 800132a:	709a      	strb	r2, [r3, #2]
			packet.Data = SRXL2_data;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <SRXL2_readByte+0xe0>)
 800132e:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <SRXL2_readByte+0xdc>)
 8001330:	605a      	str	r2, [r3, #4]
			packet.crc = ((uint16_t)SRXL2_data[packet.Length -2] << 8 | SRXL2_data[packet.Length -1]);
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <SRXL2_readByte+0xe0>)
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	3b02      	subs	r3, #2
 8001338:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <SRXL2_readByte+0xdc>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	b21b      	sxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <SRXL2_readByte+0xe0>)
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	3b01      	subs	r3, #1
 8001348:	490d      	ldr	r1, [pc, #52]	@ (8001380 <SRXL2_readByte+0xdc>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <SRXL2_readByte+0xe0>)
 8001356:	811a      	strh	r2, [r3, #8]

			// DEBUG
			// CDC_Transmit_FS(SRXL2_data, packet.Length);
			return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e008      	b.n	800136e <SRXL2_readByte+0xca>
	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3301      	adds	r3, #1
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dabb      	bge.n	80012e2 <SRXL2_readByte+0x3e>
		}
	}
	return -3;
 800136a:	f06f 0302 	mvn.w	r3, #2
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200002ec 	.word	0x200002ec
 800137c:	200002e0 	.word	0x200002e0
 8001380:	200002f0 	.word	0x200002f0
 8001384:	20000340 	.word	0x20000340

08001388 <SRXL2_GetData>:

int SRXL2_GetData(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	while(SRXL2_readByte())
 800138c:	e00b      	b.n	80013a6 <SRXL2_GetData+0x1e>
	{
		if(calculate_crc(SRXL2_data, packet.Length) == packet.crc){
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <SRXL2_GetData+0x94>)
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	4619      	mov	r1, r3
 8001394:	4822      	ldr	r0, [pc, #136]	@ (8001420 <SRXL2_GetData+0x98>)
 8001396:	f000 f8a9 	bl	80014ec <calculate_crc>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <SRXL2_GetData+0x94>)
 80013a0:	891b      	ldrh	r3, [r3, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d005      	beq.n	80013b2 <SRXL2_GetData+0x2a>
	while(SRXL2_readByte())
 80013a6:	f7ff ff7d 	bl	80012a4 <SRXL2_readByte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <SRXL2_GetData+0x6>
 80013b0:	e000      	b.n	80013b4 <SRXL2_GetData+0x2c>
			break;
 80013b2:	bf00      	nop
		}
	}

	switch(packet.PacketType){
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <SRXL2_GetData+0x94>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b21      	cmp	r3, #33	@ 0x21
 80013ba:	d12b      	bne.n	8001414 <SRXL2_GetData+0x8c>
	case SRXL_HANDSHAKE_ID :
		handshakeRx.SrcID = packet.Data[3];
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <SRXL2_GetData+0x94>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	78da      	ldrb	r2, [r3, #3]
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <SRXL2_GetData+0x9c>)
 80013c4:	701a      	strb	r2, [r3, #0]
		handshakeRx.DestID = packet.Data[4];
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <SRXL2_GetData+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	791a      	ldrb	r2, [r3, #4]
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <SRXL2_GetData+0x9c>)
 80013ce:	705a      	strb	r2, [r3, #1]
		handshakeRx.Priority = packet.Data[5];
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SRXL2_GetData+0x94>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	795a      	ldrb	r2, [r3, #5]
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <SRXL2_GetData+0x9c>)
 80013d8:	709a      	strb	r2, [r3, #2]
		handshakeRx.BaudRate = packet.Data[6];
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <SRXL2_GetData+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	799a      	ldrb	r2, [r3, #6]
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <SRXL2_GetData+0x9c>)
 80013e2:	70da      	strb	r2, [r3, #3]
		handshakeRx.Info = packet.Data[7];
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <SRXL2_GetData+0x94>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	79da      	ldrb	r2, [r3, #7]
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <SRXL2_GetData+0x9c>)
 80013ec:	711a      	strb	r2, [r3, #4]
		handshakeRx.UID = packet.Data[8]<<32
				| packet.Data[9]<<16
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <SRXL2_GetData+0x94>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	3309      	adds	r3, #9
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	041a      	lsls	r2, r3, #16
				| packet.Data[10]<<8
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <SRXL2_GetData+0x94>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	330a      	adds	r3, #10
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	4313      	orrs	r3, r2
				| packet.Data[11];
 8001404:	4a05      	ldr	r2, [pc, #20]	@ (800141c <SRXL2_GetData+0x94>)
 8001406:	6852      	ldr	r2, [r2, #4]
 8001408:	320b      	adds	r2, #11
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4313      	orrs	r3, r2
 800140e:	461a      	mov	r2, r3
		handshakeRx.UID = packet.Data[8]<<32
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <SRXL2_GetData+0x9c>)
 8001412:	609a      	str	r2, [r3, #8]
	}
}
 8001414:	bf00      	nop
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000340 	.word	0x20000340
 8001420:	200002f0 	.word	0x200002f0
 8001424:	2000034c 	.word	0x2000034c

08001428 <SRXL2_doBind>:
/*
 * 0 :
 * -1 : error
 */
int SRXL2_doBind(void)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
    uint8_t bind_packet[21] =
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <SRXL2_doBind+0x4c>)
 8001430:	463c      	mov	r4, r7
 8001432:	461d      	mov	r5, r3
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0003 	ldmia.w	r5, {r0, r1}
 800143c:	6020      	str	r0, [r4, #0]
 800143e:	3404      	adds	r4, #4
 8001440:	7021      	strb	r1, [r4, #0]
        0x12, 0x34, 0x56, 0x78,  // UID (32-bit)
        0x00, 0x00   // CRC 자리 (계산 후 입력)
    };

    // CRC 계산
    uint16_t crc = calculate_crc(bind_packet, 19);
 8001442:	463b      	mov	r3, r7
 8001444:	2113      	movs	r1, #19
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f850 	bl	80014ec <calculate_crc>
 800144c:	4603      	mov	r3, r0
 800144e:	82fb      	strh	r3, [r7, #22]
    bind_packet[19] = (uint8_t)(crc >> 8);
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	74fb      	strb	r3, [r7, #19]
    bind_packet[20] = (uint8_t)(crc & 0xFF);
 800145a:	8afb      	ldrh	r3, [r7, #22]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	753b      	strb	r3, [r7, #20]

	return SRXL2_Transmit(bind_packet, sizeof(bind_packet));
 8001460:	463b      	mov	r3, r7
 8001462:	2115      	movs	r1, #21
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f807 	bl	8001478 <SRXL2_Transmit>
 800146a:	4603      	mov	r3, r0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	0800cca4 	.word	0x0800cca4

08001478 <SRXL2_Transmit>:

int SRXL2_Transmit(uint8_t *data, uint8_t len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
	if(SRXL2_flag!=0) return -1;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <SRXL2_Transmit+0x68>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <SRXL2_Transmit+0x1a>
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e021      	b.n	80014d6 <SRXL2_Transmit+0x5e>

	LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001492:	2102      	movs	r1, #2
 8001494:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <SRXL2_Transmit+0x6c>)
 8001496:	f7ff feb6 	bl	8001206 <LL_GPIO_SetOutputPin>
	for(int i=0; i<len; i++){
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e011      	b.n	80014c4 <SRXL2_Transmit+0x4c>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 80014a0:	bf00      	nop
 80014a2:	4811      	ldr	r0, [pc, #68]	@ (80014e8 <SRXL2_Transmit+0x70>)
 80014a4:	f7ff fe8d 	bl	80011c2 <LL_USART_IsActiveFlag_TXE>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f9      	beq.n	80014a2 <SRXL2_Transmit+0x2a>
		LL_USART_TransmitData8(USART1, data[i]);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <SRXL2_Transmit+0x70>)
 80014ba:	f7ff fe95 	bl	80011e8 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbe9      	blt.n	80014a0 <SRXL2_Transmit+0x28>

		// while(!LL_USART_IsActiveFlag_TC(USART1));
	}
	LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80014cc:	2102      	movs	r1, #2
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <SRXL2_Transmit+0x6c>)
 80014d0:	f7ff fea7 	bl	8001222 <LL_GPIO_ResetOutputPin>
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002ec 	.word	0x200002ec
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40011000 	.word	0x40011000

080014ec <calculate_crc>:

uint16_t calculate_crc(uint8_t *data, uint8_t length)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0x0000;
 80014f8:	2300      	movs	r3, #0
 80014fa:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length-2; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	737b      	strb	r3, [r7, #13]
 8001500:	e029      	b.n	8001556 <calculate_crc+0x6a>
        crc ^= ((uint16_t)data[i] << 8);
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b21b      	sxth	r3, r3
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001514:	4053      	eors	r3, r2
 8001516:	b21b      	sxth	r3, r3
 8001518:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800151a:	2300      	movs	r3, #0
 800151c:	733b      	strb	r3, [r7, #12]
 800151e:	e014      	b.n	800154a <calculate_crc+0x5e>
            if (crc & 0x8000)
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da0a      	bge.n	800153e <calculate_crc+0x52>
                crc = (crc << 1) ^ 0x1021;
 8001528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	b21b      	sxth	r3, r3
 8001530:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b21b      	sxth	r3, r3
 800153a:	81fb      	strh	r3, [r7, #14]
 800153c:	e002      	b.n	8001544 <calculate_crc+0x58>
            else
                crc = (crc << 1);
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001544:	7b3b      	ldrb	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	733b      	strb	r3, [r7, #12]
 800154a:	7b3b      	ldrb	r3, [r7, #12]
 800154c:	2b07      	cmp	r3, #7
 800154e:	d9e7      	bls.n	8001520 <calculate_crc+0x34>
    for (uint8_t i = 0; i < length-2; i++) {
 8001550:	7b7b      	ldrb	r3, [r7, #13]
 8001552:	3301      	adds	r3, #1
 8001554:	737b      	strb	r3, [r7, #13]
 8001556:	7b7a      	ldrb	r2, [r7, #13]
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	3b02      	subs	r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	dbd0      	blt.n	8001502 <calculate_crc+0x16>
        }
    }
    return crc;
 8001560:	89fb      	ldrh	r3, [r7, #14]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 0210 	bic.w	r2, r3, #16
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_TIM_EnableCounter>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_TIM_DisableARRPreload>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d01c      	beq.n	8001732 <LL_TIM_OC_DisableFast+0x4a>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d017      	beq.n	800172e <LL_TIM_OC_DisableFast+0x46>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d012      	beq.n	800172a <LL_TIM_OC_DisableFast+0x42>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b40      	cmp	r3, #64	@ 0x40
 8001708:	d00d      	beq.n	8001726 <LL_TIM_OC_DisableFast+0x3e>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001710:	d007      	beq.n	8001722 <LL_TIM_OC_DisableFast+0x3a>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001718:	d101      	bne.n	800171e <LL_TIM_OC_DisableFast+0x36>
 800171a:	2305      	movs	r3, #5
 800171c:	e00a      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 800171e:	2306      	movs	r3, #6
 8001720:	e008      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_TIM_OC_DisableFast+0x4c>
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3318      	adds	r3, #24
 800173a:	4619      	mov	r1, r3
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <LL_TIM_OC_DisableFast+0x84>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	440b      	add	r3, r1
 8001744:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <LL_TIM_OC_DisableFast+0x88>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	4619      	mov	r1, r3
 8001752:	2304      	movs	r3, #4
 8001754:	408b      	lsls	r3, r1
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	601a      	str	r2, [r3, #0]

}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	0800cd50 	.word	0x0800cd50
 8001770:	0800cd58 	.word	0x0800cd58

08001774 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d01c      	beq.n	80017be <LL_TIM_OC_EnablePreload+0x4a>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d017      	beq.n	80017ba <LL_TIM_OC_EnablePreload+0x46>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d012      	beq.n	80017b6 <LL_TIM_OC_EnablePreload+0x42>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b40      	cmp	r3, #64	@ 0x40
 8001794:	d00d      	beq.n	80017b2 <LL_TIM_OC_EnablePreload+0x3e>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800179c:	d007      	beq.n	80017ae <LL_TIM_OC_EnablePreload+0x3a>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a4:	d101      	bne.n	80017aa <LL_TIM_OC_EnablePreload+0x36>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e00a      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e008      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_TIM_OC_EnablePreload+0x4c>
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3318      	adds	r3, #24
 80017c6:	4619      	mov	r1, r3
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LL_TIM_OC_EnablePreload+0x80>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	440b      	add	r3, r1
 80017d0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4907      	ldr	r1, [pc, #28]	@ (80017f8 <LL_TIM_OC_EnablePreload+0x84>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	4619      	mov	r1, r3
 80017de:	2308      	movs	r3, #8
 80017e0:	408b      	lsls	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	0800cd50 	.word	0x0800cd50
 80017f8:	0800cd58 	.word	0x0800cd58

080017fc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_USART_Enable>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_USART_ConfigAsyncMode>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	615a      	str	r2, [r3, #20]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_USART_ConfigHalfDuplexMode>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f043 0208 	orr.w	r2, r3, #8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	615a      	str	r2, [r3, #20]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_USART_EnableIT_RXNE>:
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	330c      	adds	r3, #12
 800191c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	e853 3f00 	ldrex	r3, [r3]
 8001924:	60bb      	str	r3, [r7, #8]
   return(result);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	330c      	adds	r3, #12
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	61ba      	str	r2, [r7, #24]
 8001936:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	e841 2300 	strex	r3, r2, [r1]
 8001940:	613b      	str	r3, [r7, #16]
   return(result);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e7      	bne.n	8001918 <LL_USART_EnableIT_RXNE+0x8>
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_GPIO_ResetOutputPin>:
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800197e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800198a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40023800 	.word	0x40023800

080019a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40023800 	.word	0x40023800

080019d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019e0:	4907      	ldr	r1, [pc, #28]	@ (8001a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40023800 	.word	0x40023800

08001a04 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8001a10:	bf00      	nop
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f008 f83f 	bl	8009a9c <CDC_Transmit_FS>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d0f6      	beq.n	8001a12 <_write+0xe>
	return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
#endif
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fe18 	bl	8002668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f83c 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f000 fb72 	bl	8002124 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a40:	f000 fa60 	bl	8001f04 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001a44:	f000 f8f2 	bl	8001c2c <MX_TIM4_Init>
  MX_TIM14_Init();
 8001a48:	f000 f964 	bl	8001d14 <MX_TIM14_Init>
  MX_SPI1_Init();
 8001a4c:	f000 f89c 	bl	8001b88 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a50:	f000 fab6 	bl	8001fc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a54:	f000 fb14 	bl	8002080 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001a58:	f000 f9b2 	bl	8001dc0 <MX_UART4_Init>
  MX_UART5_Init();
 8001a5c:	f000 f9da 	bl	8001e14 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8001a60:	f007 ff5e 	bl	8009920 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8001a64:	480e      	ldr	r0, [pc, #56]	@ (8001aa0 <main+0x70>)
 8001a66:	f7ff fe1f 	bl	80016a8 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 8001a6a:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <main+0x74>)
 8001a6c:	f7ff fe1c 	bl	80016a8 <LL_TIM_EnableCounter>

  SRXL2_Initialization();
 8001a70:	f7ff fbe6 	bl	8001240 <SRXL2_Initialization>
  BuzzerPlayInit();
 8001a74:	f7ff faa0 	bl	8000fb8 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <main+0x78>)
 8001a7a:	f7ff ff49 	bl	8001910 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <main+0x7c>)
 8001a80:	f7ff ff46 	bl	8001910 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8001a84:	480a      	ldr	r0, [pc, #40]	@ (8001ab0 <main+0x80>)
 8001a86:	f7ff ff43 	bl	8001910 <LL_USART_EnableIT_RXNE>

  // ICM42688_Initialization();
  SRXL2_Connect();
 8001a8a:	f7ff fbe9 	bl	8001260 <SRXL2_Connect>
  BuzzerPlayOneCycle();
 8001a8e:	f7ff fac1 	bl	8001014 <BuzzerPlayOneCycle>
	  // ICM42688_Get6AxisRawData();

	  // printf("%d %d %d\n\r", ICM42688.gyro_x_raw, ICM42688.gyro_y_raw, ICM42688.gyro_z_raw);
	  // printf("%d %d %d\n\r", ICM42688.acc_x_raw, ICM42688.acc_y_raw, ICM42688.acc_z_raw);

	  SRXL2_GetData();
 8001a92:	f7ff fc79 	bl	8001388 <SRXL2_GetData>
	  // SRXL2_doHandshake();

	  HAL_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 fe58 	bl	800274c <HAL_Delay>
	  SRXL2_GetData();
 8001a9c:	bf00      	nop
 8001a9e:	e7f8      	b.n	8001a92 <main+0x62>
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40002000 	.word	0x40002000
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	40004800 	.word	0x40004800

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	@ 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2230      	movs	r2, #48	@ 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f009 fa87 	bl	800afd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae8:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b24:	2308      	movs	r3, #8
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b28:	23a8      	movs	r3, #168	@ 0xa8
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b30:	2307      	movs	r3, #7
 8001b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fb2b 	bl	8004194 <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b44:	f000 fb36 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2105      	movs	r1, #5
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fd8c 	bl	8004684 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b72:	f000 fb1f 	bl	80021b4 <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	@ 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b090      	sub	sp, #64	@ 0x40
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b8e:	f107 0318 	add.w	r3, r7, #24
 8001b92:	2228      	movs	r2, #40	@ 0x28
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f009 fa1d 	bl	800afd6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001bac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bb0:	f7ff ff10 	bl	80019d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fedd 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001bba:	23e0      	movs	r3, #224	@ 0xe0
 8001bbc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <MX_SPI1_Init+0x9c>)
 8001bd8:	f003 fb81 	bl	80052de <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001be0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001be4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001bea:	2302      	movs	r3, #2
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001bf8:	2318      	movs	r3, #24
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001c04:	230a      	movs	r3, #10
 8001c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <MX_SPI1_Init+0xa0>)
 8001c10:	f003 fd3f 	bl	8005692 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001c14:	2100      	movs	r1, #0
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_SPI1_Init+0xa0>)
 8001c18:	f7ff fd33 	bl	8001682 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3740      	adds	r7, #64	@ 0x40
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40013000 	.word	0x40013000

08001c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b094      	sub	sp, #80	@ 0x50
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	2220      	movs	r2, #32
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 f9c3 	bl	800afd6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001c60:	2004      	movs	r0, #4
 8001c62:	f7ff fe9f 	bl	80019a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8001c66:	2304      	movs	r3, #4
 8001c68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xdc>)
 8001c70:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001c76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4823      	ldr	r0, [pc, #140]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001c7e:	f003 fdcd 	bl	800581c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001c82:	4822      	ldr	r0, [pc, #136]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001c84:	f7ff fd20 	bl	80016c8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4820      	ldr	r0, [pc, #128]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001c8c:	f7ff fdb6 	bl	80017fc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8001c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c94:	481d      	ldr	r0, [pc, #116]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001c96:	f7ff fd6d 	bl	8001774 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c9a:	2360      	movs	r3, #96	@ 0x60
 8001c9c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb8:	4814      	ldr	r0, [pc, #80]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001cba:	f003 fe49 	bl	8005950 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8001cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc2:	4812      	ldr	r0, [pc, #72]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001cc4:	f7ff fd10 	bl	80016e8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4810      	ldr	r0, [pc, #64]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001ccc:	f7ff fdab 	bl	8001826 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001cd0:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <MX_TIM4_Init+0xe0>)
 8001cd2:	f7ff fdbb 	bl	800184c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001cd6:	2008      	movs	r0, #8
 8001cd8:	f7ff fe4c 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001cdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ce0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001cfc:	f003 faef 	bl	80052de <LL_GPIO_Init>

}
 8001d00:	bf00      	nop
 8001d02:	3750      	adds	r7, #80	@ 0x50
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	fff0fadc 	.word	0xfff0fadc
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40020c00 	.word	0x40020c00

08001d14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f009 f950 	bl	800afd6 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8001d36:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d3a:	f7ff fe33 	bl	80019a4 <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d3e:	f7ff fc17 	bl	8001570 <__NVIC_GetPriorityGrouping>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fc67 	bl	800161c <NVIC_EncodePriority>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	202d      	movs	r0, #45	@ 0x2d
 8001d54:	f7ff fc38 	bl	80015c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001d58:	202d      	movs	r0, #45	@ 0x2d
 8001d5a:	f7ff fc17 	bl	800158c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 15;
 8001d5e:	230f      	movs	r3, #15
 8001d60:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 8000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_TIM14_Init+0xa4>)
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <MX_TIM14_Init+0xa8>)
 8001d76:	f003 fd51 	bl	800581c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 8001d7a:	4810      	ldr	r0, [pc, #64]	@ (8001dbc <MX_TIM14_Init+0xa8>)
 8001d7c:	f7ff fca4 	bl	80016c8 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	461a      	mov	r2, r3
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <MX_TIM14_Init+0xa8>)
 8001d9c:	f003 fdd8 	bl	8005950 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 8001da0:	2101      	movs	r1, #1
 8001da2:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <MX_TIM14_Init+0xa8>)
 8001da4:	f7ff fca0 	bl	80016e8 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 8001da8:	4804      	ldr	r0, [pc, #16]	@ (8001dbc <MX_TIM14_Init+0xa8>)
 8001daa:	f7ff fd5f 	bl	800186c <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM14_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	@ 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	fff01f40 	.word	0xfff01f40
 8001dbc:	40002000 	.word	0x40002000

08001dc0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_UART4_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_UART4_Init+0x4c>)
 8001df8:	f002 fe62 	bl	8004ac0 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e02:	f000 f9d7 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000358 	.word	0x20000358
 8001e10:	40004c00 	.word	0x40004c00

08001e14 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	@ 0x38
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001e3e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001e42:	f7ff fdaf 	bl	80019a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001e46:	2004      	movs	r0, #4
 8001e48:	f7ff fd94 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001e4c:	2008      	movs	r0, #8
 8001e4e:	f7ff fd91 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 8001e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4821      	ldr	r0, [pc, #132]	@ (8001ef8 <MX_UART5_Init+0xe4>)
 8001e72:	f003 fa34 	bl	80052de <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 8001e76:	2304      	movs	r3, #4
 8001e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	481a      	ldr	r0, [pc, #104]	@ (8001efc <MX_UART5_Init+0xe8>)
 8001e94:	f003 fa23 	bl	80052de <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e98:	f7ff fb6a 	bl	8001570 <__NVIC_GetPriorityGrouping>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fbba 	bl	800161c <NVIC_EncodePriority>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2035      	movs	r0, #53	@ 0x35
 8001eae:	f7ff fb8b 	bl	80015c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8001eb2:	2035      	movs	r0, #53	@ 0x35
 8001eb4:	f7ff fb6a 	bl	800158c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001eb8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001ebc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_UART5_Init+0xec>)
 8001ede:	f004 f985 	bl	80061ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8001ee2:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <MX_UART5_Init+0xec>)
 8001ee4:	f7ff fce2 	bl	80018ac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8001ee8:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_UART5_Init+0xec>)
 8001eea:	f7ff fccf 	bl	800188c <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3738      	adds	r7, #56	@ 0x38
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40005000 	.word	0x40005000

08001f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001f2e:	2010      	movs	r0, #16
 8001f30:	f7ff fd50 	bl	80019d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fd1d 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8001f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001f50:	2307      	movs	r3, #7
 8001f52:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <MX_USART1_UART_Init+0xb4>)
 8001f5a:	f003 f9c0 	bl	80052de <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f5e:	f7ff fb07 	bl	8001570 <__NVIC_GetPriorityGrouping>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fb57 	bl	800161c <NVIC_EncodePriority>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	2025      	movs	r0, #37	@ 0x25
 8001f74:	f7ff fb28 	bl	80015c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001f78:	2025      	movs	r0, #37	@ 0x25
 8001f7a:	f7ff fb07 	bl	800158c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f7e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001f82:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f90:	230c      	movs	r3, #12
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f94:	2300      	movs	r3, #0
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <MX_USART1_UART_Init+0xb8>)
 8001fa0:	f004 f924 	bl	80061ec <LL_USART_Init>
  LL_USART_Enable(USART1);
 8001fa4:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_USART1_UART_Init+0xb8>)
 8001fa6:	f7ff fc71 	bl	800188c <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8001faa:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <MX_USART1_UART_Init+0xb8>)
 8001fac:	f7ff fc94 	bl	80018d8 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	3738      	adds	r7, #56	@ 0x38
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40011000 	.word	0x40011000

08001fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	@ 0x38
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001fea:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001fee:	f7ff fcd9 	bl	80019a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001ff2:	2008      	movs	r0, #8
 8001ff4:	f7ff fcbe 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8001ff8:	2378      	movs	r3, #120	@ 0x78
 8001ffa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800200c:	2307      	movs	r3, #7
 800200e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4818      	ldr	r0, [pc, #96]	@ (8002078 <MX_USART2_UART_Init+0xb8>)
 8002016:	f003 f962 	bl	80052de <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800201a:	f7ff faa9 	bl	8001570 <__NVIC_GetPriorityGrouping>
 800201e:	4603      	mov	r3, r0
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff faf9 	bl	800161c <NVIC_EncodePriority>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	2026      	movs	r0, #38	@ 0x26
 8002030:	f7ff faca 	bl	80015c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002034:	2026      	movs	r0, #38	@ 0x26
 8002036:	f7ff faa9 	bl	800158c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 800203a:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800203e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800204c:	230c      	movs	r3, #12
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_USART2_UART_Init+0xbc>)
 8002060:	f004 f8c4 	bl	80061ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_USART2_UART_Init+0xbc>)
 8002066:	f7ff fc21 	bl	80018ac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_USART2_UART_Init+0xbc>)
 800206c:	f7ff fc0e 	bl	800188c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3738      	adds	r7, #56	@ 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	@ 0x38
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80020aa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80020ae:	f7ff fc79 	bl	80019a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80020b2:	2008      	movs	r0, #8
 80020b4:	f7ff fc5e 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80020b8:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80020bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020be:	2302      	movs	r3, #2
 80020c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020ce:	2307      	movs	r3, #7
 80020d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4811      	ldr	r0, [pc, #68]	@ (800211c <MX_USART3_UART_Init+0x9c>)
 80020d8:	f003 f901 	bl	80052de <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80020dc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80020e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020ee:	230c      	movs	r3, #12
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020f6:	2300      	movs	r3, #0
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	4807      	ldr	r0, [pc, #28]	@ (8002120 <MX_USART3_UART_Init+0xa0>)
 8002102:	f004 f873 	bl	80061ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002106:	4806      	ldr	r0, [pc, #24]	@ (8002120 <MX_USART3_UART_Init+0xa0>)
 8002108:	f7ff fbd0 	bl	80018ac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800210c:	4804      	ldr	r0, [pc, #16]	@ (8002120 <MX_USART3_UART_Init+0xa0>)
 800210e:	f7ff fbbd 	bl	800188c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	3738      	adds	r7, #56	@ 0x38
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40004800 	.word	0x40004800

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800213a:	2010      	movs	r0, #16
 800213c:	f7ff fc1a 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002140:	2080      	movs	r0, #128	@ 0x80
 8002142:	f7ff fc17 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002146:	2004      	movs	r0, #4
 8002148:	f7ff fc14 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff fc11 	bl	8001974 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002152:	2008      	movs	r0, #8
 8002154:	f7ff fc0e 	bl	8001974 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin);
 8002158:	2127      	movs	r1, #39	@ 0x27
 800215a:	4814      	ldr	r0, [pc, #80]	@ (80021ac <MX_GPIO_Init+0x88>)
 800215c:	f7ff fbfb 	bl	8001956 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002160:	2102      	movs	r1, #2
 8002162:	4813      	ldr	r0, [pc, #76]	@ (80021b0 <MX_GPIO_Init+0x8c>)
 8002164:	f7ff fbf7 	bl	8001956 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin;
 8002168:	2327      	movs	r3, #39	@ 0x27
 800216a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800216c:	2301      	movs	r3, #1
 800216e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	463b      	mov	r3, r7
 800217e:	4619      	mov	r1, r3
 8002180:	480a      	ldr	r0, [pc, #40]	@ (80021ac <MX_GPIO_Init+0x88>)
 8002182:	f003 f8ac 	bl	80052de <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8002186:	2302      	movs	r3, #2
 8002188:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800218a:	2301      	movs	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 800219a:	463b      	mov	r3, r7
 800219c:	4619      	mov	r1, r3
 800219e:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_GPIO_Init+0x8c>)
 80021a0:	f003 f89d 	bl	80052de <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40020800 	.word	0x40020800

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_MspInit+0x4c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a0f      	ldr	r2, [pc, #60]	@ (800220c <HAL_MspInit+0x4c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_MspInit+0x4c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_MspInit+0x4c>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_UART_MspInit+0x84>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12c      	bne.n	800228c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <HAL_UART_MspInit+0x88>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_UART_MspInit+0x88>)
 800223c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_UART_MspInit+0x88>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_UART_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_UART_MspInit+0x88>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_UART_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800227c:	2308      	movs	r3, #8
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <HAL_UART_MspInit+0x8c>)
 8002288:	f000 fb96 	bl	80029b8 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	@ 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40004c00 	.word	0x40004c00
 8002298:	40023800 	.word	0x40023800
 800229c:	40020800 	.word	0x40020800

080022a0 <LL_TIM_SetCounter>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_TIM_ClearFlag_UPDATE>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f06f 0201 	mvn.w	r2, #1
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_USART_IsActiveFlag_RXNE>:
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b20      	cmp	r3, #32
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_USART_ClearFlag_RXNE>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f06f 0220 	mvn.w	r2, #32
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_USART_ReceiveData8>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b2db      	uxtb	r3, r3
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	bf00      	nop
 8002368:	e7fd      	b.n	8002366 <HardFault_Handler+0x4>

0800236a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236e:	bf00      	nop
 8002370:	e7fd      	b.n	800236e <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	bf00      	nop
 8002378:	e7fd      	b.n	8002376 <BusFault_Handler+0x4>

0800237a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237e:	bf00      	nop
 8002380:	e7fd      	b.n	800237e <UsageFault_Handler+0x4>

08002382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b0:	f000 f9ac 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80023be:	480f      	ldr	r0, [pc, #60]	@ (80023fc <USART1_IRQHandler+0x44>)
 80023c0:	f7ff ff9d 	bl	80022fe <LL_USART_IsActiveFlag_RXNE>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d013      	beq.n	80023f2 <USART1_IRQHandler+0x3a>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 80023ca:	480c      	ldr	r0, [pc, #48]	@ (80023fc <USART1_IRQHandler+0x44>)
 80023cc:	f7ff ffaa 	bl	8002324 <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <USART1_IRQHandler+0x44>)
 80023d2:	f7ff ffb5 	bl	8002340 <LL_USART_ReceiveData8>
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
		SRXL2_flag = 0b11;
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <USART1_IRQHandler+0x48>)
 80023dc:	2203      	movs	r2, #3
 80023de:	701a      	strb	r2, [r3, #0]
		LL_TIM_SetCounter(TIM14, 0);
 80023e0:	2100      	movs	r1, #0
 80023e2:	4808      	ldr	r0, [pc, #32]	@ (8002404 <USART1_IRQHandler+0x4c>)
 80023e4:	f7ff ff5c 	bl	80022a0 <LL_TIM_SetCounter>

		RB_write(&SRXL2_RingFifo, uart1_rx_data);
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4806      	ldr	r0, [pc, #24]	@ (8002408 <USART1_IRQHandler+0x50>)
 80023ee:	f7fe fe73 	bl	80010d8 <RB_write>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40011000 	.word	0x40011000
 8002400:	200002ec 	.word	0x200002ec
 8002404:	40002000 	.word	0x40002000
 8002408:	200002e0 	.word	0x200002e0

0800240c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8002410:	480a      	ldr	r0, [pc, #40]	@ (800243c <USART2_IRQHandler+0x30>)
 8002412:	f7ff ff74 	bl	80022fe <LL_USART_IsActiveFlag_RXNE>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00c      	beq.n	8002436 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 800241c:	4807      	ldr	r0, [pc, #28]	@ (800243c <USART2_IRQHandler+0x30>)
 800241e:	f7ff ff81 	bl	8002324 <LL_USART_ClearFlag_RXNE>
		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <USART2_IRQHandler+0x30>)
 8002424:	f7ff ff8c 	bl	8002340 <LL_USART_ReceiveData8>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <USART2_IRQHandler+0x34>)
 800242e:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8002430:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <USART2_IRQHandler+0x38>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40004400 	.word	0x40004400
 8002440:	200003a1 	.word	0x200003a1
 8002444:	200003a0 	.word	0x200003a0

08002448 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>)
 800244e:	f7ff ff43 	bl	80022d8 <LL_TIM_IsActiveFlag_UPDATE>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <TIM8_TRG_COM_TIM14_IRQHandler+0x24>
	{
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8002458:	4805      	ldr	r0, [pc, #20]	@ (8002470 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>)
 800245a:	f7ff ff2f 	bl	80022bc <LL_TIM_ClearFlag_UPDATE>
		SRXL2_flag &= 0b01;
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b02      	ldr	r3, [pc, #8]	@ (8002474 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 800246a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40002000 	.word	0x40002000
 8002474:	200002ec 	.word	0x200002ec

08002478 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <OTG_FS_IRQHandler+0x10>)
 800248e:	f000 fd73 	bl	8002f78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000188c 	.word	0x2000188c

0800249c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_kill>:

int _kill(int pid, int sig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024b6:	f008 fdf1 	bl	800b09c <__errno>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2216      	movs	r2, #22
 80024be:	601a      	str	r2, [r3, #0]
  return -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_exit>:

void _exit (int status)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ffe7 	bl	80024ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80024de:	bf00      	nop
 80024e0:	e7fd      	b.n	80024de <_exit+0x12>

080024e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e00a      	b.n	800250a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f4:	f3af 8000 	nop.w
 80024f8:	4601      	mov	r1, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	60ba      	str	r2, [r7, #8]
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbf0      	blt.n	80024f4 <_read+0x12>
  }

  return len;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_close>:
  }
  return len;
}

int _close(int file)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002544:	605a      	str	r2, [r3, #4]
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_isatty>:

int _isatty(int file)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f008 fd72 	bl	800b09c <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	220c      	movs	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20020000 	.word	0x20020000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	200003a4 	.word	0x200003a4
 80025ec:	200020e0 	.word	0x200020e0

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <SystemInit+0x20>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <SystemInit+0x20>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800264c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002618:	f7ff ffea 	bl	80025f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800261c:	480c      	ldr	r0, [pc, #48]	@ (8002650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261e:	490d      	ldr	r1, [pc, #52]	@ (8002654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002634:	4c0a      	ldr	r4, [pc, #40]	@ (8002660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002642:	f008 fd31 	bl	800b0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002646:	f7ff f9f3 	bl	8001a30 <main>
  bx  lr    
 800264a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800264c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002654:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002658:	0800d0fc 	.word	0x0800d0fc
  ldr r2, =_sbss
 800265c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002660:	200020dc 	.word	0x200020dc

08002664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002664:	e7fe      	b.n	8002664 <ADC_IRQHandler>
	...

08002668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800266c:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <HAL_Init+0x40>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <HAL_Init+0x40>)
 800267e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_Init+0x40>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f94f 	bl	8002934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f808 	bl	80026ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fd90 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_InitTick+0x54>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_InitTick+0x58>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f967 	bl	800299e <HAL_SYSTICK_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00e      	b.n	80026f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d80a      	bhi.n	80026f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f000 f92f 	bl	800294a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <HAL_InitTick+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000000 	.word	0x20000000
 8002704:	20000008 	.word	0x20000008
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	200003a8 	.word	0x200003a8

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200003a8 	.word	0x200003a8

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffde 	bl	8002734 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008

08002794 <__NVIC_SetPriorityGrouping>:
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c6:	4a04      	ldr	r2, [pc, #16]	@ (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60d3      	str	r3, [r2, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_GetPriorityGrouping>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e0:	4b04      	ldr	r3, [pc, #16]	@ (80027f4 <__NVIC_GetPriorityGrouping+0x18>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	f003 0307 	and.w	r3, r3, #7
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_EnableIRQ>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	db0b      	blt.n	8002822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4907      	ldr	r1, [pc, #28]	@ (8002830 <__NVIC_EnableIRQ+0x38>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2001      	movs	r0, #1
 800281a:	fa00 f202 	lsl.w	r2, r0, r2
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	@ (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	@ 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	@ 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002900:	d301      	bcc.n	8002906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <SysTick_Config+0x40>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290e:	210f      	movs	r1, #15
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f7ff ff8e 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <SysTick_Config+0x40>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <SysTick_Config+0x40>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff29 	bl	8002794 <__NVIC_SetPriorityGrouping>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff3e 	bl	80027dc <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff8e 	bl	8002888 <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff31 	bl	80027f8 <__NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ffa2 	bl	80028f0 <SysTick_Config>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e16b      	b.n	8002cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 815a 	bne.w	8002ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b4 	beq.w	8002ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b60      	ldr	r3, [pc, #384]	@ (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc8 <HAL_GPIO_Init+0x310>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_GPIO_Init+0x314>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02b      	beq.n	8002bde <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a51      	ldr	r2, [pc, #324]	@ (8002cd0 <HAL_GPIO_Init+0x318>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d025      	beq.n	8002bda <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a50      	ldr	r2, [pc, #320]	@ (8002cd4 <HAL_GPIO_Init+0x31c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4f      	ldr	r2, [pc, #316]	@ (8002cd8 <HAL_GPIO_Init+0x320>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_GPIO_Init+0x324>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x216>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce0 <HAL_GPIO_Init+0x328>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x212>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce4 <HAL_GPIO_Init+0x32c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x20e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce8 <HAL_GPIO_Init+0x330>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x20a>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e00e      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf0:	4935      	ldr	r1, [pc, #212]	@ (8002cc8 <HAL_GPIO_Init+0x310>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c22:	4a32      	ldr	r2, [pc, #200]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c28:	4b30      	ldr	r3, [pc, #192]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c4c:	4a27      	ldr	r2, [pc, #156]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c52:	4b26      	ldr	r3, [pc, #152]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c76:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca0:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <HAL_GPIO_Init+0x334>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae90 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3724      	adds	r7, #36	@ 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40021400 	.word	0x40021400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021c00 	.word	0x40021c00
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e101      	b.n	8002f06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f007 f805 	bl	8009d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fbec 	bl	800651a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7c1a      	ldrb	r2, [r3, #16]
 8002d4a:	f88d 2000 	strb.w	r2, [sp]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d52:	f003 facb 	bl	80062ec <USB_CoreInit>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0ce      	b.n	8002f06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fbe4 	bl	800653c <USB_SetCurrentMode>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0bf      	b.n	8002f06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e04a      	b.n	8002e22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3315      	adds	r3, #21
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3314      	adds	r3, #20
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	b298      	uxth	r0, r3
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	332e      	adds	r3, #46	@ 0x2e
 8002dc8:	4602      	mov	r2, r0
 8002dca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3318      	adds	r3, #24
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	331c      	adds	r3, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3320      	adds	r3, #32
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3324      	adds	r3, #36	@ 0x24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	791b      	ldrb	r3, [r3, #4]
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3af      	bcc.n	8002d8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e044      	b.n	8002ebc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3b5      	bcc.n	8002e32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7c1a      	ldrb	r2, [r3, #16]
 8002ece:	f88d 2000 	strb.w	r2, [sp]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	f003 fb7d 	bl	80065d4 <USB_DevInit>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00c      	b.n	8002f06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fbc7 	bl	8007692 <USB_DevDisconnect>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_Start+0x1c>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e022      	b.n	8002f70 <HAL_PCD_Start+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 face 	bl	80064f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fb75 	bl	8007650 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b08d      	sub	sp, #52	@ 0x34
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fc33 	bl	80077fa <USB_GetMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 848c 	bne.w	80038b4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 fb97 	bl	80076d4 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8482 	beq.w	80038b2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fb84 	bl	80076d4 <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f002 0202 	and.w	r2, r2, #2
 8002fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fb72 	bl	80076d4 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d161      	bne.n	80030be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0210 	bic.w	r2, r2, #16
 8003008:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003034:	d124      	bne.n	8003080 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d035      	beq.n	80030ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800304c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6a38      	ldr	r0, [r7, #32]
 8003056:	f004 f9a9 	bl	80073ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003066:	441a      	add	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003078:	441a      	add	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	e016      	b.n	80030ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003086:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800308a:	d110      	bne.n	80030ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003092:	2208      	movs	r2, #8
 8003094:	4619      	mov	r1, r3
 8003096:	6a38      	ldr	r0, [r7, #32]
 8003098:	f004 f988 	bl	80073ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a8:	441a      	add	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0210 	orr.w	r2, r2, #16
 80030bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 fb06 	bl	80076d4 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030d2:	f040 80a7 	bne.w	8003224 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 fb0b 	bl	80076fa <USB_ReadDevAllOutEpInterrupt>
 80030e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80030e6:	e099      	b.n	800321c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 808e 	beq.w	8003210 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fb2f 	bl	8007762 <USB_ReadDevOutEPInterrupt>
 8003104:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	2301      	movs	r3, #1
 8003120:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003122:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fea3 	bl	8003e70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2308      	movs	r3, #8
 8003144:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 ff79 	bl	8004040 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	2310      	movs	r3, #16
 8003168:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d030      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b80      	cmp	r3, #128	@ 0x80
 800317e:	d109      	bne.n	8003194 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003192:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 feba 	bl	8009f38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	2302      	movs	r3, #2
 80031d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	2320      	movs	r3, #32
 80031f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800320e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	3301      	adds	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f af62 	bne.w	80030e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f004 fa53 	bl	80076d4 <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003238:	f040 80db 	bne.w	80033f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f004 fa74 	bl	800772e <USB_ReadDevAllInEpInterrupt>
 8003246:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800324c:	e0cd      	b.n	80033ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80c2 	beq.w	80033de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fa9a 	bl	800779e <USB_ReadDevInEPInterrupt>
 800326a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d057      	beq.n	8003326 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2201      	movs	r2, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	69f9      	ldr	r1, [r7, #28]
 8003292:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003296:	4013      	ands	r3, r2
 8003298:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a6:	461a      	mov	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	799b      	ldrb	r3, [r3, #6]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d132      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3320      	adds	r3, #32
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	331c      	adds	r3, #28
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4419      	add	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4403      	add	r3, r0
 80032e8:	3320      	adds	r3, #32
 80032ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d113      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3324      	adds	r3, #36	@ 0x24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003312:	461a      	mov	r2, r3
 8003314:	2101      	movs	r1, #1
 8003316:	f004 faa1 	bl	800785c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f006 fd84 	bl	8009e2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333c:	461a      	mov	r2, r3
 800333e:	2308      	movs	r3, #8
 8003340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003358:	461a      	mov	r2, r3
 800335a:	2310      	movs	r3, #16
 800335c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003374:	461a      	mov	r2, r3
 8003376:	2340      	movs	r3, #64	@ 0x40
 8003378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003386:	6a38      	ldr	r0, [r7, #32]
 8003388:	f003 fa88 	bl	800689c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800338c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3310      	adds	r3, #16
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	78db      	ldrb	r3, [r3, #3]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f006 fdd1 	bl	8009f5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c6:	461a      	mov	r2, r3
 80033c8:	2302      	movs	r3, #2
 80033ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fcbd 	bl	8003d58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	3301      	adds	r3, #1
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f47f af2e 	bne.w	800324e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 f96c 	bl	80076d4 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003406:	d122      	bne.n	800344e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fea3 	bl	800417c <HAL_PCDEx_LPM_Callback>
 8003436:	e002      	b.n	800343e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f006 fd6f 	bl	8009f1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f004 f93e 	bl	80076d4 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003462:	d112      	bne.n	800348a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 fd2b 	bl	8009ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003488:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f004 f920 	bl	80076d4 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349e:	f040 80b7 	bne.w	8003610 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2110      	movs	r1, #16
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 f9ed 	bl	800689c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c6:	e046      	b.n	8003556 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d4:	461a      	mov	r2, r3
 80034d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80034da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800350e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003520:	0151      	lsls	r1, r2, #5
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	440a      	add	r2, r1
 8003526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800352a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800352e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800354a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800354e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	3301      	adds	r3, #1
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	791b      	ldrb	r3, [r3, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	4293      	cmp	r3, r2
 8003560:	d3b2      	bcc.n	80034c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003570:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003574:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7bdb      	ldrb	r3, [r3, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800358e:	f043 030b 	orr.w	r3, r3, #11
 8003592:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035a4:	f043 030b 	orr.w	r3, r3, #11
 80035a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035aa:	e015      	b.n	80035d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80035c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035d2:	f043 030b 	orr.w	r3, r3, #11
 80035d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80035ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f004 f92e 	bl	800785c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f004 f85d 	bl	80076d4 <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003624:	d123      	bne.n	800366e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f004 f8f3 	bl	8007816 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 f9aa 	bl	800698e <USB_GetDevSpeed>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681c      	ldr	r4, [r3, #0]
 8003646:	f001 fa07 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 800364a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003650:	461a      	mov	r2, r3
 8003652:	4620      	mov	r0, r4
 8003654:	f002 feae 	bl	80063b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f006 fc10 	bl	8009e7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 f82e 	bl	80076d4 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d10a      	bne.n	8003698 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f006 fbed 	bl	8009e62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f002 0208 	and.w	r2, r2, #8
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f004 f819 	bl	80076d4 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b80      	cmp	r3, #128	@ 0x80
 80036aa:	d123      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	e014      	b.n	80036e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb0a 	bl	8003cf6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	3301      	adds	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	791b      	ldrb	r3, [r3, #4]
 80036ec:	461a      	mov	r2, r3
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d3e4      	bcc.n	80036be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 ffeb 	bl	80076d4 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003708:	d13c      	bne.n	8003784 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
 800370e:	e02b      	b.n	8003768 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3318      	adds	r3, #24
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d115      	bne.n	8003762 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003736:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	da12      	bge.n	8003762 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3317      	adds	r3, #23
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 faca 	bl	8003cf6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	3301      	adds	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	791b      	ldrb	r3, [r3, #4]
 800376c:	461a      	mov	r2, r3
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	4293      	cmp	r3, r2
 8003772:	d3cd      	bcc.n	8003710 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f003 ffa3 	bl	80076d4 <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003798:	d156      	bne.n	8003848 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800379a:	2301      	movs	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
 800379e:	e045      	b.n	800382c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d12e      	bne.n	8003826 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	da2b      	bge.n	8003826 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80037da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037de:	429a      	cmp	r2, r3
 80037e0:	d121      	bne.n	8003826 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003822:	6053      	str	r3, [r2, #4]
            break;
 8003824:	e008      	b.n	8003838 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	791b      	ldrb	r3, [r3, #4]
 8003830:	461a      	mov	r2, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	4293      	cmp	r3, r2
 8003836:	d3b3      	bcc.n	80037a0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f003 ff41 	bl	80076d4 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385c:	d10a      	bne.n	8003874 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f006 fb8e 	bl	8009f80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 ff2b 	bl	80076d4 <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d115      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f006 fb7e 	bl	8009f9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	e000      	b.n	80038b4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80038b2:	bf00      	nop
    }
  }
}
 80038b4:	3734      	adds	r7, #52	@ 0x34
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}

080038ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_PCD_SetAddress+0x1a>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e012      	b.n	80038fa <HAL_PCD_SetAddress+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fe8a 	bl	8007604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	461a      	mov	r2, r3
 8003910:	4603      	mov	r3, r0
 8003912:	70fb      	strb	r3, [r7, #3]
 8003914:	460b      	mov	r3, r1
 8003916:	803b      	strh	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	da0f      	bge.n	8003948 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3310      	adds	r3, #16
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]
 8003946:	e00f      	b.n	8003968 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	3304      	adds	r3, #4
 8003960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003974:	883b      	ldrh	r3, [r7, #0]
 8003976:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	78ba      	ldrb	r2, [r7, #2]
 8003982:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003996:	78bb      	ldrb	r3, [r7, #2]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d102      	bne.n	80039a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_PCD_EP_Open+0xae>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e00e      	b.n	80039ce <HAL_PCD_EP_Open+0xcc>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 f80a 	bl	80069d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80039cc:	7afb      	ldrb	r3, [r7, #11]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	da0f      	bge.n	8003a0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	3310      	adds	r3, #16
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	705a      	strb	r2, [r3, #1]
 8003a08:	e00f      	b.n	8003a2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_PCD_EP_Close+0x6e>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e00e      	b.n	8003a62 <HAL_PCD_EP_Close+0x8c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 f848 	bl	8006ae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	460b      	mov	r3, r1
 8003a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	f003 020f 	and.w	r2, r3, #15
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	799b      	ldrb	r3, [r3, #6]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6979      	ldr	r1, [r7, #20]
 8003ad2:	f003 f8e5 	bl	8006ca0 <USB_EPStartXfer>

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	3310      	adds	r3, #16
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
 8003b36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	799b      	ldrb	r3, [r3, #6]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	799b      	ldrb	r3, [r3, #6]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	f003 f893 	bl	8006ca0 <USB_EPStartXfer>

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	7912      	ldrb	r2, [r2, #4]
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e04f      	b.n	8003c42 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da0f      	bge.n	8003bca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	3310      	adds	r3, #16
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
 8003bc8:	e00d      	b.n	8003be6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_PCD_EP_SetStall+0x82>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e01d      	b.n	8003c42 <HAL_PCD_EP_SetStall+0xbe>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 fc21 	bl	800745c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7999      	ldrb	r1, [r3, #6]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c32:	461a      	mov	r2, r3
 8003c34:	f003 fe12 	bl	800785c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	7912      	ldrb	r2, [r2, #4]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e042      	b.n	8003cee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da0f      	bge.n	8003c90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3310      	adds	r3, #16
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	3304      	adds	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
 8003c8e:	e00f      	b.n	8003cb0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_PCD_EP_ClrStall+0x86>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e00e      	b.n	8003cee <HAL_PCD_EP_ClrStall+0xa4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fc2a 	bl	8007538 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da0c      	bge.n	8003d24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3310      	adds	r3, #16
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e00c      	b.n	8003d3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 fa49 	bl	80071dc <USB_EPStopXfer>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3310      	adds	r3, #16
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d901      	bls.n	8003d90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e06b      	b.n	8003e68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d902      	bls.n	8003dac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3303      	adds	r3, #3
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db4:	e02a      	b.n	8003e0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68d9      	ldr	r1, [r3, #12]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	4603      	mov	r3, r0
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f003 fa9e 	bl	8007330 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	441a      	add	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d809      	bhi.n	8003e36 <PCD_WriteEmptyTxFifo+0xde>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d203      	bcs.n	8003e36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1bf      	bne.n	8003db6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d811      	bhi.n	8003e66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2201      	movs	r2, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	6939      	ldr	r1, [r7, #16]
 8003e5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e62:	4013      	ands	r3, r2
 8003e64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	333c      	adds	r3, #60	@ 0x3c
 8003e88:	3304      	adds	r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	799b      	ldrb	r3, [r3, #6]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d17b      	bne.n	8003f9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4a61      	ldr	r2, [pc, #388]	@ (8004038 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	f240 80b9 	bls.w	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80b3 	beq.w	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed8:	6093      	str	r3, [r2, #8]
 8003eda:	e0a7      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	6093      	str	r3, [r2, #8]
 8003ef8:	e098      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 8093 	bne.w	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4a4b      	ldr	r2, [pc, #300]	@ (8004038 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d90f      	bls.n	8003f2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f24:	461a      	mov	r2, r3
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	e07e      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	0159      	lsls	r1, r3, #5
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	440b      	add	r3, r1
 8003f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d114      	bne.n	8003f90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	f003 fc6e 	bl	800785c <USB_EP0_OutStart>
 8003f80:	e006      	b.n	8003f90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f005 ff2e 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
 8003f9c:	e046      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	@ (800403c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d124      	bne.n	8003ff0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	e032      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2320      	movs	r3, #32
 8003fe0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f005 ff05 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
 8003fee:	e01d      	b.n	800402c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d114      	bne.n	8004020 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004018:	461a      	mov	r2, r3
 800401a:	2100      	movs	r1, #0
 800401c:	f003 fc1e 	bl	800785c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f005 fee6 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	4f54300a 	.word	0x4f54300a
 800403c:	4f54310a 	.word	0x4f54310a

08004040 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	333c      	adds	r3, #60	@ 0x3c
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d90e      	bls.n	8004094 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004092:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f005 fe9d 	bl	8009dd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d90c      	bls.n	80040bc <PCD_EP_OutSetupPacket_int+0x7c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	799b      	ldrb	r3, [r3, #6]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d108      	bne.n	80040bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040b4:	461a      	mov	r2, r3
 80040b6:	2101      	movs	r1, #1
 80040b8:	f003 fbd0 	bl	800785c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	4f54300a 	.word	0x4f54300a

080040cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
 80040d8:	4613      	mov	r3, r2
 80040da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040ea:	883b      	ldrh	r3, [r7, #0]
 80040ec:	0419      	lsls	r1, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040f8:	e028      	b.n	800414c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4413      	add	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
 800410c:	e00d      	b.n	800412a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	3340      	adds	r3, #64	@ 0x40
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	3301      	adds	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	3b01      	subs	r3, #1
 8004130:	429a      	cmp	r2, r3
 8004132:	d3ec      	bcc.n	800410e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004134:	883b      	ldrh	r3, [r7, #0]
 8004136:	0418      	lsls	r0, r3, #16
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	3b01      	subs	r3, #1
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4302      	orrs	r2, r0
 8004144:	3340      	adds	r3, #64	@ 0x40
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e267      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d075      	beq.n	800429e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041b2:	4b88      	ldr	r3, [pc, #544]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b85      	ldr	r3, [pc, #532]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d112      	bne.n	80041f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4b82      	ldr	r3, [pc, #520]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4b7e      	ldr	r3, [pc, #504]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05b      	beq.n	800429c <HAL_RCC_OscConfig+0x108>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d157      	bne.n	800429c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e242      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f8:	d106      	bne.n	8004208 <HAL_RCC_OscConfig+0x74>
 80041fa:	4b76      	ldr	r3, [pc, #472]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a75      	ldr	r2, [pc, #468]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e01d      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x98>
 8004212:	4b70      	ldr	r3, [pc, #448]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6f      	ldr	r2, [pc, #444]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b6d      	ldr	r3, [pc, #436]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6c      	ldr	r2, [pc, #432]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 800422c:	4b69      	ldr	r3, [pc, #420]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a68      	ldr	r2, [pc, #416]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b66      	ldr	r3, [pc, #408]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a65      	ldr	r2, [pc, #404]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fe fa72 	bl	8002734 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe fa6e 	bl	8002734 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	@ 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e207      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0xc0>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fe fa5e 	bl	8002734 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fe fa5a 	bl	8002734 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	@ 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1f3      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	4b51      	ldr	r3, [pc, #324]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0xe8>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d063      	beq.n	8004372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042aa:	4b4a      	ldr	r3, [pc, #296]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b6:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d11c      	bne.n	80042fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b44      	ldr	r3, [pc, #272]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d116      	bne.n	80042fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	4b41      	ldr	r3, [pc, #260]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x152>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e1c7      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4937      	ldr	r1, [pc, #220]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	e03a      	b.n	8004372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d020      	beq.n	8004346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004304:	4b34      	ldr	r3, [pc, #208]	@ (80043d8 <HAL_RCC_OscConfig+0x244>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fa13 	bl	8002734 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fe fa0f 	bl	8002734 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1a8      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	4b2b      	ldr	r3, [pc, #172]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004330:	4b28      	ldr	r3, [pc, #160]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4925      	ldr	r1, [pc, #148]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]
 8004344:	e015      	b.n	8004372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004346:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <HAL_RCC_OscConfig+0x244>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fe f9f2 	bl	8002734 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fe f9ee 	bl	8002734 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e187      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d036      	beq.n	80043ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004386:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <HAL_RCC_OscConfig+0x248>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe f9d2 	bl	8002734 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004394:	f7fe f9ce 	bl	8002734 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e167      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_OscConfig+0x240>)
 80043a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x200>
 80043b2:	e01b      	b.n	80043ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RCC_OscConfig+0x248>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fe f9bb 	bl	8002734 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	e00e      	b.n	80043e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fe f9b7 	bl	8002734 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d907      	bls.n	80043e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e150      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	42470000 	.word	0x42470000
 80043dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b88      	ldr	r3, [pc, #544]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ea      	bne.n	80043c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8097 	beq.w	8004528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b81      	ldr	r3, [pc, #516]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b7d      	ldr	r3, [pc, #500]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	4a7c      	ldr	r2, [pc, #496]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	@ 0x40
 800441a:	4b7a      	ldr	r3, [pc, #488]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b77      	ldr	r3, [pc, #476]	@ (8004608 <HAL_RCC_OscConfig+0x474>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d118      	bne.n	8004468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004436:	4b74      	ldr	r3, [pc, #464]	@ (8004608 <HAL_RCC_OscConfig+0x474>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a73      	ldr	r2, [pc, #460]	@ (8004608 <HAL_RCC_OscConfig+0x474>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fe f977 	bl	8002734 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fe f973 	bl	8002734 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e10c      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0x474>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x2ea>
 8004470:	4b64      	ldr	r3, [pc, #400]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a63      	ldr	r2, [pc, #396]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
 800447c:	e01c      	b.n	80044b8 <HAL_RCC_OscConfig+0x324>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b05      	cmp	r3, #5
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x30c>
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	4a5e      	ldr	r2, [pc, #376]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	@ 0x70
 8004492:	4b5c      	ldr	r3, [pc, #368]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a5b      	ldr	r2, [pc, #364]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
 800449e:	e00b      	b.n	80044b8 <HAL_RCC_OscConfig+0x324>
 80044a0:	4b58      	ldr	r3, [pc, #352]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a4:	4a57      	ldr	r2, [pc, #348]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ac:	4b55      	ldr	r3, [pc, #340]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	4a54      	ldr	r2, [pc, #336]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80044b2:	f023 0304 	bic.w	r3, r3, #4
 80044b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fe f938 	bl	8002734 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fe f934 	bl	8002734 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0cb      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	4b49      	ldr	r3, [pc, #292]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ee      	beq.n	80044c8 <HAL_RCC_OscConfig+0x334>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ec:	f7fe f922 	bl	8002734 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fe f91e 	bl	8002734 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0b5      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450a:	4b3e      	ldr	r3, [pc, #248]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ee      	bne.n	80044f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d105      	bne.n	8004528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451c:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	4a38      	ldr	r2, [pc, #224]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004526:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a1 	beq.w	8004674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004532:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b08      	cmp	r3, #8
 800453c:	d05c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d141      	bne.n	80045ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b31      	ldr	r3, [pc, #196]	@ (800460c <HAL_RCC_OscConfig+0x478>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe f8f2 	bl	8002734 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fe f8ee 	bl	8002734 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e087      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b27      	ldr	r3, [pc, #156]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	019b      	lsls	r3, r3, #6
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	3b01      	subs	r3, #1
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	491b      	ldr	r1, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x478>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe f8c7 	bl	8002734 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe f8c3 	bl	8002734 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e05c      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x416>
 80045c8:	e054      	b.n	8004674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RCC_OscConfig+0x478>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe f8b0 	bl	8002734 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fe f8ac 	bl	8002734 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e045      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <HAL_RCC_OscConfig+0x470>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x444>
 80045f6:	e03d      	b.n	8004674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e038      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000
 800460c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x4ec>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d028      	beq.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d121      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d11a      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	4293      	cmp	r3, r2
 800464a:	d111      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0cc      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004698:	4b68      	ldr	r3, [pc, #416]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d90c      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b65      	ldr	r3, [pc, #404]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a58      	ldr	r2, [pc, #352]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a52      	ldr	r2, [pc, #328]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d044      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d119      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d003      	beq.n	8004742 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473e:	2b03      	cmp	r3, #3
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004742:	4b3f      	ldr	r3, [pc, #252]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e06f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004752:	4b3b      	ldr	r3, [pc, #236]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e067      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004762:	4b37      	ldr	r3, [pc, #220]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4934      	ldr	r1, [pc, #208]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004774:	f7fd ffde 	bl	8002734 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	e00a      	b.n	8004792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477c:	f7fd ffda 	bl	8002734 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e04f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 020c 	and.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1eb      	bne.n	800477c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4b25      	ldr	r3, [pc, #148]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d20c      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b22      	ldr	r3, [pc, #136]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	@ (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4602      	mov	r2, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	490a      	ldr	r1, [pc, #40]	@ (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	5ccb      	ldrb	r3, [r1, r3]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd ff3e 	bl	80026ac <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023c00 	.word	0x40023c00
 8004840:	40023800 	.word	0x40023800
 8004844:	0800cd60 	.word	0x0800cd60
 8004848:	20000000 	.word	0x20000000
 800484c:	20000004 	.word	0x20000004

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b094      	sub	sp, #80	@ 0x50
 8004856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004868:	4b79      	ldr	r3, [pc, #484]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b08      	cmp	r3, #8
 8004872:	d00d      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x40>
 8004874:	2b08      	cmp	r3, #8
 8004876:	f200 80e1 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x34>
 800487e:	2b04      	cmp	r3, #4
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x3a>
 8004882:	e0db      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b73      	ldr	r3, [pc, #460]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004886:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004888:	e0db      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488a:	4b72      	ldr	r3, [pc, #456]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 800488c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800488e:	e0d8      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004890:	4b6f      	ldr	r3, [pc, #444]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004898:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800489a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2200      	movs	r2, #0
 80048ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	0159      	lsls	r1, r3, #5
 80048d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d4:	0150      	lsls	r0, r2, #5
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4621      	mov	r1, r4
 80048dc:	1a51      	subs	r1, r2, r1
 80048de:	6139      	str	r1, [r7, #16]
 80048e0:	4629      	mov	r1, r5
 80048e2:	eb63 0301 	sbc.w	r3, r3, r1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f4:	4659      	mov	r1, fp
 80048f6:	018b      	lsls	r3, r1, #6
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048fe:	4651      	mov	r1, sl
 8004900:	018a      	lsls	r2, r1, #6
 8004902:	4651      	mov	r1, sl
 8004904:	ebb2 0801 	subs.w	r8, r2, r1
 8004908:	4659      	mov	r1, fp
 800490a:	eb63 0901 	sbc.w	r9, r3, r1
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004922:	4690      	mov	r8, r2
 8004924:	4699      	mov	r9, r3
 8004926:	4623      	mov	r3, r4
 8004928:	eb18 0303 	adds.w	r3, r8, r3
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	462b      	mov	r3, r5
 8004930:	eb49 0303 	adc.w	r3, r9, r3
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004942:	4629      	mov	r1, r5
 8004944:	028b      	lsls	r3, r1, #10
 8004946:	4621      	mov	r1, r4
 8004948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800494c:	4621      	mov	r1, r4
 800494e:	028a      	lsls	r2, r1, #10
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004956:	2200      	movs	r2, #0
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004960:	f7fc f942 	bl	8000be8 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496c:	e058      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496e:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	2200      	movs	r2, #0
 8004976:	4618      	mov	r0, r3
 8004978:	4611      	mov	r1, r2
 800497a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
 8004984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0159      	lsls	r1, r3, #5
 8004996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499a:	0150      	lsls	r0, r2, #5
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4641      	mov	r1, r8
 80049a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c0:	ebb2 040a 	subs.w	r4, r2, sl
 80049c4:	eb63 050b 	sbc.w	r5, r3, fp
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	00eb      	lsls	r3, r5, #3
 80049d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	4614      	mov	r4, r2
 80049da:	461d      	mov	r5, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb45 0303 	adc.w	r3, r5, r3
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049f6:	4629      	mov	r1, r5
 80049f8:	028b      	lsls	r3, r1, #10
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a00:	4621      	mov	r1, r4
 8004a02:	028a      	lsls	r2, r1, #10
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	61fa      	str	r2, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	f7fc f8e8 	bl	8000be8 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3750      	adds	r7, #80	@ 0x50
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	00f42400 	.word	0x00f42400

08004a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000000 	.word	0x20000000

08004a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a74:	f7ff fff0 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0a9b      	lsrs	r3, r3, #10
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4903      	ldr	r1, [pc, #12]	@ (8004a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800cd70 	.word	0x0800cd70

08004a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a9c:	f7ff ffdc 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0b5b      	lsrs	r3, r3, #13
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	@ (8004abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0800cd70 	.word	0x0800cd70

08004ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e042      	b.n	8004b58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd fb92 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	@ 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f82b 	bl	8004b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b0c0      	sub	sp, #256	@ 0x100
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	ea40 0301 	orr.w	r3, r0, r1
 8004b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb8:	f021 010c 	bic.w	r1, r1, #12
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	6999      	ldr	r1, [r3, #24]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	ea40 0301 	orr.w	r3, r0, r1
 8004be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0xa0>
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8004e30 <UART_SetConfig+0x2d0>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7ff ff4a 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8004c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c08:	e003      	b.n	8004c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7ff ff31 	bl	8004a70 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	f040 810c 	bne.w	8004e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c42:	4621      	mov	r1, r4
 8004c44:	eb12 0801 	adds.w	r8, r2, r1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb43 0901 	adc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c70:	462b      	mov	r3, r5
 8004c72:	eb49 0303 	adc.w	r3, r9, r3
 8004c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c8e:	460b      	mov	r3, r1
 8004c90:	18db      	adds	r3, r3, r3
 8004c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c94:	4613      	mov	r3, r2
 8004c96:	eb42 0303 	adc.w	r3, r2, r3
 8004c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ca4:	f7fb ffa0 	bl	8000be8 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4b61      	ldr	r3, [pc, #388]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	011c      	lsls	r4, r3, #4
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd8:	4641      	mov	r1, r8
 8004cda:	eb12 0a01 	adds.w	sl, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf8:	4692      	mov	sl, r2
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb4b 0303 	adc.w	r3, fp, r3
 8004d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d24:	460b      	mov	r3, r1
 8004d26:	18db      	adds	r3, r3, r3
 8004d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d3a:	f7fb ff55 	bl	8000be8 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2264      	movs	r2, #100	@ 0x64
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	1acb      	subs	r3, r1, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d68:	441c      	add	r4, r3
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d84:	415b      	adcs	r3, r3
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004de0:	460b      	mov	r3, r1
 8004de2:	18db      	adds	r3, r3, r3
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004df6:	f7fb fef7 	bl	8000be8 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	@ 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3332      	adds	r3, #50	@ 0x32
 8004e12:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 0207 	and.w	r2, r3, #7
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4422      	add	r2, r4
 8004e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e28:	e106      	b.n	8005038 <UART_SetConfig+0x4d8>
 8004e2a:	bf00      	nop
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	6239      	str	r1, [r7, #32]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1854      	adds	r4, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0501 	adc.w	r5, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e72:	00e2      	lsls	r2, r4, #3
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	18e3      	adds	r3, r4, r3
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e80:	464b      	mov	r3, r9
 8004e82:	eb45 0303 	adc.w	r3, r5, r3
 8004e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	008b      	lsls	r3, r1, #2
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	008a      	lsls	r2, r1, #2
 8004eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb8:	f7fb fe96 	bl	8000be8 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4b60      	ldr	r3, [pc, #384]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	011c      	lsls	r4, r3, #4
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	61b9      	str	r1, [r7, #24]
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eec:	4641      	mov	r1, r8
 8004eee:	1851      	adds	r1, r2, r1
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	414b      	adcs	r3, r1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f04:	4659      	mov	r1, fp
 8004f06:	00cb      	lsls	r3, r1, #3
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0e:	4651      	mov	r1, sl
 8004f10:	00ca      	lsls	r2, r1, #3
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f20:	464b      	mov	r3, r9
 8004f22:	460a      	mov	r2, r1
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f44:	4649      	mov	r1, r9
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4e:	4641      	mov	r1, r8
 8004f50:	008a      	lsls	r2, r1, #2
 8004f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f56:	f7fb fe47 	bl	8000be8 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f62:	fba3 2301 	umull	r2, r3, r3, r1
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2264      	movs	r2, #100	@ 0x64
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	1acb      	subs	r3, r1, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	@ 0x32
 8004f74:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f80:	441c      	add	r4, r3
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f86:	2200      	movs	r2, #0
 8004f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	415b      	adcs	r3, r3
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	1851      	adds	r1, r2, r1
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	414b      	adcs	r3, r1
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb8:	4659      	mov	r1, fp
 8004fba:	00cb      	lsls	r3, r1, #3
 8004fbc:	4651      	mov	r1, sl
 8004fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	00ca      	lsls	r2, r1, #3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4642      	mov	r2, r8
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005006:	f7fb fdef 	bl	8000be8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	@ 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	@ 0x32
 8005022:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4422      	add	r2, r4
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800503e:	46bd      	mov	sp, r7
 8005040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005044:	51eb851f 	.word	0x51eb851f

08005048 <LL_GPIO_SetPinMode>:
{
 8005048:	b480      	push	{r7}
 800504a:	b08b      	sub	sp, #44	@ 0x2c
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	613b      	str	r3, [r7, #16]
  return result;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800506e:	2320      	movs	r3, #32
 8005070:	e003      	b.n	800507a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2103      	movs	r1, #3
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	401a      	ands	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	61fb      	str	r3, [r7, #28]
  return result;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800509c:	2320      	movs	r3, #32
 800509e:	e003      	b.n	80050a8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]
}
 80050b6:	bf00      	nop
 80050b8:	372c      	adds	r7, #44	@ 0x2c
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_GPIO_SetPinOutputType>:
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_GPIO_SetPinSpeed>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	b08b      	sub	sp, #44	@ 0x2c
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	613b      	str	r3, [r7, #16]
  return result;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005118:	2320      	movs	r3, #32
 800511a:	e003      	b.n	8005124 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2103      	movs	r1, #3
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	61fb      	str	r3, [r7, #28]
  return result;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005146:	2320      	movs	r3, #32
 8005148:	e003      	b.n	8005152 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	431a      	orrs	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	372c      	adds	r7, #44	@ 0x2c
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_GPIO_SetPinPull>:
{
 800516c:	b480      	push	{r7}
 800516e:	b08b      	sub	sp, #44	@ 0x2c
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	613b      	str	r3, [r7, #16]
  return result;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005192:	2320      	movs	r3, #32
 8005194:	e003      	b.n	800519e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	2103      	movs	r1, #3
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	fa93 f3a3 	rbit	r3, r3
 80051b4:	61fb      	str	r3, [r7, #28]
  return result;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80051c0:	2320      	movs	r3, #32
 80051c2:	e003      	b.n	80051cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60da      	str	r2, [r3, #12]
}
 80051da:	bf00      	nop
 80051dc:	372c      	adds	r7, #44	@ 0x2c
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_GPIO_SetAFPin_0_7>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	b08b      	sub	sp, #44	@ 0x2c
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	613b      	str	r3, [r7, #16]
  return result;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800520c:	2320      	movs	r3, #32
 800520e:	e003      	b.n	8005218 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	fab3 f383 	clz	r3, r3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	210f      	movs	r1, #15
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	401a      	ands	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
  return result;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800523a:	2320      	movs	r3, #32
 800523c:	e003      	b.n	8005246 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	431a      	orrs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	372c      	adds	r7, #44	@ 0x2c
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_GPIO_SetAFPin_8_15>:
{
 8005260:	b480      	push	{r7}
 8005262:	b08b      	sub	sp, #44	@ 0x2c
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	fa93 f3a3 	rbit	r3, r3
 800527c:	613b      	str	r3, [r7, #16]
  return result;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005288:	2320      	movs	r3, #32
 800528a:	e003      	b.n	8005294 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	fab3 f383 	clz	r3, r3
 8005292:	b2db      	uxtb	r3, r3
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	210f      	movs	r1, #15
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	61fb      	str	r3, [r7, #28]
  return result;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80052b8:	2320      	movs	r3, #32
 80052ba:	e003      	b.n	80052c4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	431a      	orrs	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80052d2:	bf00      	nop
 80052d4:	372c      	adds	r7, #44	@ 0x2c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b08a      	sub	sp, #40	@ 0x28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	617b      	str	r3, [r7, #20]
  return result;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <LL_GPIO_Init+0x2e>
    return 32U;
 8005308:	2320      	movs	r3, #32
 800530a:	e003      	b.n	8005314 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005316:	e057      	b.n	80053c8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2101      	movs	r1, #1
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	4013      	ands	r3, r2
 8005326:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d049      	beq.n	80053c2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d003      	beq.n	800533e <LL_GPIO_Init+0x60>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d10d      	bne.n	800535a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	461a      	mov	r2, r3
 8005344:	6a39      	ldr	r1, [r7, #32]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fed3 	bl	80050f2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	461a      	mov	r2, r3
 8005352:	6a39      	ldr	r1, [r7, #32]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff feb4 	bl	80050c2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	461a      	mov	r2, r3
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ff02 	bl	800516c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d121      	bne.n	80053b4 <LL_GPIO_Init+0xd6>
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	60bb      	str	r3, [r7, #8]
  return result;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <LL_GPIO_Init+0xac>
    return 32U;
 8005386:	2320      	movs	r3, #32
 8005388:	e003      	b.n	8005392 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005392:	2b07      	cmp	r3, #7
 8005394:	d807      	bhi.n	80053a6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	461a      	mov	r2, r3
 800539c:	6a39      	ldr	r1, [r7, #32]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff21 	bl	80051e6 <LL_GPIO_SetAFPin_0_7>
 80053a4:	e006      	b.n	80053b4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ff56 	bl	8005260 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6a39      	ldr	r1, [r7, #32]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fe43 	bl	8005048 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	3301      	adds	r3, #1
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1a0      	bne.n	8005318 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	@ 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053e4:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <LL_RCC_GetSysClkSource+0x18>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030c 	and.w	r3, r3, #12
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800

080053fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005400:	4b04      	ldr	r3, [pc, #16]	@ (8005414 <LL_RCC_GetAHBPrescaler+0x18>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800541c:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <LL_RCC_GetAPB1Prescaler+0x18>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005424:	4618      	mov	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <LL_RCC_GetAPB2Prescaler+0x18>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800

08005450 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005454:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <LL_RCC_PLL_GetMainSource+0x18>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800

0800546c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005470:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <LL_RCC_PLL_GetN+0x18>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	099b      	lsrs	r3, r3, #6
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800547a:	4618      	mov	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40023800 	.word	0x40023800

08005488 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800548c:	4b04      	ldr	r3, [pc, #16]	@ (80054a0 <LL_RCC_PLL_GetP+0x18>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800

080054a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80054a8:	4b04      	ldr	r3, [pc, #16]	@ (80054bc <LL_RCC_PLL_GetDivider+0x18>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800

080054c0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80054c8:	f000 f820 	bl	800550c <RCC_GetSystemClockFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f83e 	bl	8005558 <RCC_GetHCLKClockFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f84c 	bl	8005584 <RCC_GetPCLK1ClockFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f858 	bl	80055ac <RCC_GetPCLK2ClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005516:	f7ff ff63 	bl	80053e0 <LL_RCC_GetSysClkSource>
 800551a:	4603      	mov	r3, r0
 800551c:	2b08      	cmp	r3, #8
 800551e:	d00c      	beq.n	800553a <RCC_GetSystemClockFreq+0x2e>
 8005520:	2b08      	cmp	r3, #8
 8005522:	d80f      	bhi.n	8005544 <RCC_GetSystemClockFreq+0x38>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <RCC_GetSystemClockFreq+0x22>
 8005528:	2b04      	cmp	r3, #4
 800552a:	d003      	beq.n	8005534 <RCC_GetSystemClockFreq+0x28>
 800552c:	e00a      	b.n	8005544 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800552e:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <RCC_GetSystemClockFreq+0x48>)
 8005530:	607b      	str	r3, [r7, #4]
      break;
 8005532:	e00a      	b.n	800554a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005534:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <RCC_GetSystemClockFreq+0x48>)
 8005536:	607b      	str	r3, [r7, #4]
      break;
 8005538:	e007      	b.n	800554a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800553a:	2008      	movs	r0, #8
 800553c:	f000 f84a 	bl	80055d4 <RCC_PLL_GetFreqDomain_SYS>
 8005540:	6078      	str	r0, [r7, #4]
      break;
 8005542:	e002      	b.n	800554a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005544:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <RCC_GetSystemClockFreq+0x48>)
 8005546:	607b      	str	r3, [r7, #4]
      break;
 8005548:	bf00      	nop
  }

  return frequency;
 800554a:	687b      	ldr	r3, [r7, #4]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	00f42400 	.word	0x00f42400

08005558 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005560:	f7ff ff4c 	bl	80053fc <LL_RCC_GetAHBPrescaler>
 8005564:	4603      	mov	r3, r0
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	4a04      	ldr	r2, [pc, #16]	@ (8005580 <RCC_GetHCLKClockFreq+0x28>)
 800556e:	5cd3      	ldrb	r3, [r2, r3]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	40d3      	lsrs	r3, r2
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	0800cd60 	.word	0x0800cd60

08005584 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800558c:	f7ff ff44 	bl	8005418 <LL_RCC_GetAPB1Prescaler>
 8005590:	4603      	mov	r3, r0
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	4a04      	ldr	r2, [pc, #16]	@ (80055a8 <RCC_GetPCLK1ClockFreq+0x24>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	461a      	mov	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	40d3      	lsrs	r3, r2
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	0800cd70 	.word	0x0800cd70

080055ac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80055b4:	f7ff ff3e 	bl	8005434 <LL_RCC_GetAPB2Prescaler>
 80055b8:	4603      	mov	r3, r0
 80055ba:	0b5b      	lsrs	r3, r3, #13
 80055bc:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <RCC_GetPCLK2ClockFreq+0x24>)
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	461a      	mov	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	40d3      	lsrs	r3, r2
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	0800cd70 	.word	0x0800cd70

080055d4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80055e8:	f7ff ff32 	bl	8005450 <LL_RCC_PLL_GetMainSource>
 80055ec:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055fa:	d003      	beq.n	8005604 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80055fc:	e005      	b.n	800560a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80055fe:	4b12      	ldr	r3, [pc, #72]	@ (8005648 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005600:	617b      	str	r3, [r7, #20]
      break;
 8005602:	e005      	b.n	8005610 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005604:	4b10      	ldr	r3, [pc, #64]	@ (8005648 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005606:	617b      	str	r3, [r7, #20]
      break;
 8005608:	e002      	b.n	8005610 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800560a:	4b0f      	ldr	r3, [pc, #60]	@ (8005648 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800560c:	617b      	str	r3, [r7, #20]
      break;
 800560e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d113      	bne.n	800563e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005616:	f7ff ff45 	bl	80054a4 <LL_RCC_PLL_GetDivider>
 800561a:	4602      	mov	r2, r0
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	fbb3 f4f2 	udiv	r4, r3, r2
 8005622:	f7ff ff23 	bl	800546c <LL_RCC_PLL_GetN>
 8005626:	4603      	mov	r3, r0
 8005628:	fb03 f404 	mul.w	r4, r3, r4
 800562c:	f7ff ff2c 	bl	8005488 <LL_RCC_PLL_GetP>
 8005630:	4603      	mov	r3, r0
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	3301      	adds	r3, #1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fbb4 f3f3 	udiv	r3, r4, r3
 800563c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800563e:	693b      	ldr	r3, [r7, #16]
}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}
 8005648:	00f42400 	.word	0x00f42400

0800564c <LL_SPI_IsEnabled>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d101      	bne.n	8005664 <LL_SPI_IsEnabled+0x18>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <LL_SPI_IsEnabled+0x1a>
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffd3 	bl	800564c <LL_SPI_IsEnabled>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d139      	bne.n	8005720 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056b4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	6811      	ldr	r1, [r2, #0]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	6852      	ldr	r2, [r2, #4]
 80056c0:	4311      	orrs	r1, r2
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6892      	ldr	r2, [r2, #8]
 80056c6:	4311      	orrs	r1, r2
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	68d2      	ldr	r2, [r2, #12]
 80056cc:	4311      	orrs	r1, r2
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	6912      	ldr	r2, [r2, #16]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	6952      	ldr	r2, [r2, #20]
 80056d8:	4311      	orrs	r1, r2
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	6992      	ldr	r2, [r2, #24]
 80056de:	4311      	orrs	r1, r2
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	69d2      	ldr	r2, [r2, #28]
 80056e4:	4311      	orrs	r1, r2
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	6a12      	ldr	r2, [r2, #32]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f023 0204 	bic.w	r2, r3, #4
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	d105      	bne.n	800571c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ffab 	bl	8005672 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	61da      	str	r2, [r3, #28]
  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <LL_TIM_SetPrescaler>:
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <LL_TIM_SetAutoReload>:
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_TIM_SetRepetitionCounter>:
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_TIM_OC_SetCompareCH1>:
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <LL_TIM_OC_SetCompareCH2>:
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_TIM_OC_SetCompareCH3>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_TIM_OC_SetCompareCH4>:
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f043 0201 	orr.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	615a      	str	r2, [r3, #20]
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3d      	ldr	r2, [pc, #244]	@ (8005924 <LL_TIM_Init+0x108>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <LL_TIM_Init+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583a:	d00f      	beq.n	800585c <LL_TIM_Init+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3a      	ldr	r2, [pc, #232]	@ (8005928 <LL_TIM_Init+0x10c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <LL_TIM_Init+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a39      	ldr	r2, [pc, #228]	@ (800592c <LL_TIM_Init+0x110>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <LL_TIM_Init+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a38      	ldr	r2, [pc, #224]	@ (8005930 <LL_TIM_Init+0x114>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <LL_TIM_Init+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a37      	ldr	r2, [pc, #220]	@ (8005934 <LL_TIM_Init+0x118>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d106      	bne.n	800586a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2d      	ldr	r2, [pc, #180]	@ (8005924 <LL_TIM_Init+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <LL_TIM_Init+0xae>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005878:	d027      	beq.n	80058ca <LL_TIM_Init+0xae>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <LL_TIM_Init+0x10c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d023      	beq.n	80058ca <LL_TIM_Init+0xae>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	@ (800592c <LL_TIM_Init+0x110>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01f      	beq.n	80058ca <LL_TIM_Init+0xae>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <LL_TIM_Init+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <LL_TIM_Init+0xae>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a27      	ldr	r2, [pc, #156]	@ (8005934 <LL_TIM_Init+0x118>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d017      	beq.n	80058ca <LL_TIM_Init+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a26      	ldr	r2, [pc, #152]	@ (8005938 <LL_TIM_Init+0x11c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <LL_TIM_Init+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	@ (800593c <LL_TIM_Init+0x120>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <LL_TIM_Init+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <LL_TIM_Init+0x124>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <LL_TIM_Init+0xae>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a23      	ldr	r2, [pc, #140]	@ (8005944 <LL_TIM_Init+0x128>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <LL_TIM_Init+0xae>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <LL_TIM_Init+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <LL_TIM_Init+0xae>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a21      	ldr	r2, [pc, #132]	@ (800594c <LL_TIM_Init+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d106      	bne.n	80058d8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff34 	bl	8005752 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff20 	bl	8005736 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005924 <LL_TIM_Init+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <LL_TIM_Init+0xea>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <LL_TIM_Init+0x118>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d105      	bne.n	8005912 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff2e 	bl	800576e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff ff71 	bl	80057fa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	40001800 	.word	0x40001800
 8005948:	40001c00 	.word	0x40001c00
 800594c:	40002000 	.word	0x40002000

08005950 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005966:	d027      	beq.n	80059b8 <LL_TIM_OC_Init+0x68>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596e:	d82a      	bhi.n	80059c6 <LL_TIM_OC_Init+0x76>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005976:	d018      	beq.n	80059aa <LL_TIM_OC_Init+0x5a>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597e:	d822      	bhi.n	80059c6 <LL_TIM_OC_Init+0x76>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d003      	beq.n	800598e <LL_TIM_OC_Init+0x3e>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d007      	beq.n	800599c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800598c:	e01b      	b.n	80059c6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f81f 	bl	80059d4 <OC1Config>
 8005996:	4603      	mov	r3, r0
 8005998:	75fb      	strb	r3, [r7, #23]
      break;
 800599a:	e015      	b.n	80059c8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f884 	bl	8005aac <OC2Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	e00e      	b.n	80059c8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8ed 	bl	8005b8c <OC3Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]
      break;
 80059b6:	e007      	b.n	80059c8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f956 	bl	8005c6c <OC4Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75fb      	strb	r3, [r7, #23]
      break;
 80059c4:	e000      	b.n	80059c8 <LL_TIM_OC_Init+0x78>
      break;
 80059c6:	bf00      	nop
  }

  return result;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0202 	bic.w	r2, r3, #2
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0201 	bic.w	r2, r3, #1
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa4 <OC1Config+0xd0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <OC1Config+0x6a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa8 <OC1Config+0xd4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d11e      	bne.n	8005a7c <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0208 	bic.w	r2, r3, #8
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f023 0204 	bic.w	r2, r3, #4
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fe7b 	bl	800578a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40010400 	.word	0x40010400

08005aac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0210 	bic.w	r2, r3, #16
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0220 	bic.w	r2, r3, #32
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b84 <OC2Config+0xd8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <OC2Config+0x70>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1c      	ldr	r2, [pc, #112]	@ (8005b88 <OC2Config+0xdc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d11f      	bne.n	8005b5c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	019b      	lsls	r3, r3, #6
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	019b      	lsls	r3, r3, #6
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fe19 	bl	80057a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <OC3Config+0xd8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <OC3Config+0x6e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <OC3Config+0xdc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d11f      	bne.n	8005c3a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	015b      	lsls	r3, r3, #5
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fdb8 	bl	80057c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40010400 	.word	0x40010400

08005c6c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	031b      	lsls	r3, r3, #12
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	031b      	lsls	r3, r3, #12
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a11      	ldr	r2, [pc, #68]	@ (8005d14 <OC4Config+0xa8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <OC4Config+0x70>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a10      	ldr	r2, [pc, #64]	@ (8005d18 <OC4Config+0xac>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d107      	bne.n	8005cec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	019b      	lsls	r3, r3, #6
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fd6d 	bl	80057de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <LL_USART_IsEnabled>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_USART_SetStopBitsLength>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_USART_SetHWFlowCtrl>:
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	615a      	str	r2, [r3, #20]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LL_USART_SetBaudRate>:
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0c0      	sub	sp, #256	@ 0x100
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d9c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005da0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005da4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db0:	f040 810c 	bne.w	8005fcc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005db4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	6639      	str	r1, [r7, #96]	@ 0x60
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	eb12 0801 	adds.w	r8, r2, r1
 8005ddc:	4629      	mov	r1, r5
 8005dde:	eb43 0901 	adc.w	r9, r3, r1
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df6:	4690      	mov	r8, r2
 8005df8:	4699      	mov	r9, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	eb18 0303 	adds.w	r3, r8, r3
 8005e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e04:	462b      	mov	r3, r5
 8005e06:	eb49 0303 	adc.w	r3, r9, r3
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e12:	2200      	movs	r2, #0
 8005e14:	469a      	mov	sl, r3
 8005e16:	4693      	mov	fp, r2
 8005e18:	eb1a 030a 	adds.w	r3, sl, sl
 8005e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e1e:	eb4b 030b 	adc.w	r3, fp, fp
 8005e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e2c:	f7fa fedc 	bl	8000be8 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4b64      	ldr	r3, [pc, #400]	@ (8005fc8 <LL_USART_SetBaudRate+0x238>)
 8005e36:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	b29c      	uxth	r4, r3
 8005e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e4c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	1891      	adds	r1, r2, r2
 8005e5a:	6539      	str	r1, [r7, #80]	@ 0x50
 8005e5c:	415b      	adcs	r3, r3
 8005e5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e64:	4641      	mov	r1, r8
 8005e66:	1851      	adds	r1, r2, r1
 8005e68:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	414b      	adcs	r3, r1
 8005e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	00cb      	lsls	r3, r1, #3
 8005e80:	4651      	mov	r1, sl
 8005e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e86:	4651      	mov	r1, sl
 8005e88:	00ca      	lsls	r2, r1, #3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4642      	mov	r2, r8
 8005e92:	189b      	adds	r3, r3, r2
 8005e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e98:	464b      	mov	r3, r9
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eae:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005eb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	18db      	adds	r3, r3, r3
 8005eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	eb42 0303 	adc.w	r3, r2, r3
 8005ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ec8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005ecc:	f7fa fe8c 	bl	8000be8 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <LL_USART_SetBaudRate+0x238>)
 8005ed8:	fba3 2301 	umull	r2, r3, r3, r1
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	2264      	movs	r2, #100	@ 0x64
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	1acb      	subs	r3, r1, r3
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005eec:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <LL_USART_SetBaudRate+0x238>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4423      	add	r3, r4
 8005f02:	b29c      	uxth	r4, r3
 8005f04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f0e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f12:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f26:	4641      	mov	r1, r8
 8005f28:	1851      	adds	r1, r2, r1
 8005f2a:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	414b      	adcs	r3, r1
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f3e:	4659      	mov	r1, fp
 8005f40:	00cb      	lsls	r3, r1, #3
 8005f42:	4651      	mov	r1, sl
 8005f44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f48:	4651      	mov	r1, sl
 8005f4a:	00ca      	lsls	r2, r1, #3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	4642      	mov	r2, r8
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	eb42 0303 	adc.w	r3, r2, r3
 8005f62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f70:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005f74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	18db      	adds	r3, r3, r3
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f7e:	4613      	mov	r3, r2
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005f8e:	f7fa fe2b 	bl	8000be8 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <LL_USART_SetBaudRate+0x238>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	@ 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	3332      	adds	r3, #50	@ 0x32
 8005faa:	4a07      	ldr	r2, [pc, #28]	@ (8005fc8 <LL_USART_SetBaudRate+0x238>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4423      	add	r3, r4
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc4:	609a      	str	r2, [r3, #8]
}
 8005fc6:	e108      	b.n	80061da <LL_USART_SetBaudRate+0x44a>
 8005fc8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005fcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fd6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fda:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005fde:	4642      	mov	r2, r8
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	1891      	adds	r1, r2, r2
 8005fe4:	6239      	str	r1, [r7, #32]
 8005fe6:	415b      	adcs	r3, r3
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fee:	4641      	mov	r1, r8
 8005ff0:	1854      	adds	r4, r2, r1
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	eb43 0501 	adc.w	r5, r3, r1
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	00eb      	lsls	r3, r5, #3
 8006002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006006:	00e2      	lsls	r2, r4, #3
 8006008:	4614      	mov	r4, r2
 800600a:	461d      	mov	r5, r3
 800600c:	4643      	mov	r3, r8
 800600e:	18e3      	adds	r3, r4, r3
 8006010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006014:	464b      	mov	r3, r9
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800601e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006028:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006038:	4629      	mov	r1, r5
 800603a:	008b      	lsls	r3, r1, #2
 800603c:	4621      	mov	r1, r4
 800603e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006042:	4621      	mov	r1, r4
 8006044:	008a      	lsls	r2, r1, #2
 8006046:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800604a:	f7fa fdcd 	bl	8000be8 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4b65      	ldr	r3, [pc, #404]	@ (80061e8 <LL_USART_SetBaudRate+0x458>)
 8006054:	fba3 2302 	umull	r2, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	b29b      	uxth	r3, r3
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	b29c      	uxth	r4, r3
 8006060:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800606e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006072:	4642      	mov	r2, r8
 8006074:	464b      	mov	r3, r9
 8006076:	1891      	adds	r1, r2, r2
 8006078:	61b9      	str	r1, [r7, #24]
 800607a:	415b      	adcs	r3, r3
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006082:	4641      	mov	r1, r8
 8006084:	1851      	adds	r1, r2, r1
 8006086:	6139      	str	r1, [r7, #16]
 8006088:	4649      	mov	r1, r9
 800608a:	414b      	adcs	r3, r1
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800609a:	4659      	mov	r1, fp
 800609c:	00cb      	lsls	r3, r1, #3
 800609e:	4651      	mov	r1, sl
 80060a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a4:	4651      	mov	r1, sl
 80060a6:	00ca      	lsls	r2, r1, #3
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	4642      	mov	r2, r8
 80060b0:	189b      	adds	r3, r3, r2
 80060b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b6:	464b      	mov	r3, r9
 80060b8:	460a      	mov	r2, r1
 80060ba:	eb42 0303 	adc.w	r3, r2, r3
 80060be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80060dc:	4649      	mov	r1, r9
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e6:	4641      	mov	r1, r8
 80060e8:	008a      	lsls	r2, r1, #2
 80060ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80060ee:	f7fa fd7b 	bl	8000be8 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	4b3b      	ldr	r3, [pc, #236]	@ (80061e8 <LL_USART_SetBaudRate+0x458>)
 80060fa:	fba3 2301 	umull	r2, r3, r3, r1
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2264      	movs	r2, #100	@ 0x64
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	1acb      	subs	r3, r1, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	@ 0x32
 800610c:	4a36      	ldr	r2, [pc, #216]	@ (80061e8 <LL_USART_SetBaudRate+0x458>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	b29b      	uxth	r3, r3
 8006116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800611a:	b29b      	uxth	r3, r3
 800611c:	4423      	add	r3, r4
 800611e:	b29c      	uxth	r4, r3
 8006120:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006124:	2200      	movs	r2, #0
 8006126:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006128:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800612a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800612e:	4642      	mov	r2, r8
 8006130:	464b      	mov	r3, r9
 8006132:	1891      	adds	r1, r2, r2
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	415b      	adcs	r3, r3
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800613e:	4641      	mov	r1, r8
 8006140:	1851      	adds	r1, r2, r1
 8006142:	6039      	str	r1, [r7, #0]
 8006144:	4649      	mov	r1, r9
 8006146:	414b      	adcs	r3, r1
 8006148:	607b      	str	r3, [r7, #4]
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006156:	4659      	mov	r1, fp
 8006158:	00cb      	lsls	r3, r1, #3
 800615a:	4651      	mov	r1, sl
 800615c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006160:	4651      	mov	r1, sl
 8006162:	00ca      	lsls	r2, r1, #3
 8006164:	4610      	mov	r0, r2
 8006166:	4619      	mov	r1, r3
 8006168:	4603      	mov	r3, r0
 800616a:	4642      	mov	r2, r8
 800616c:	189b      	adds	r3, r3, r2
 800616e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006170:	464b      	mov	r3, r9
 8006172:	460a      	mov	r2, r1
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	677b      	str	r3, [r7, #116]	@ 0x74
 800617a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800617e:	2200      	movs	r2, #0
 8006180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006190:	4649      	mov	r1, r9
 8006192:	008b      	lsls	r3, r1, #2
 8006194:	4641      	mov	r1, r8
 8006196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800619a:	4641      	mov	r1, r8
 800619c:	008a      	lsls	r2, r1, #2
 800619e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80061a2:	f7fa fd21 	bl	8000be8 <__aeabi_uldivmod>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <LL_USART_SetBaudRate+0x458>)
 80061ac:	fba3 1302 	umull	r1, r3, r3, r2
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	2164      	movs	r1, #100	@ 0x64
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	3332      	adds	r3, #50	@ 0x32
 80061be:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <LL_USART_SetBaudRate+0x458>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4423      	add	r3, r4
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d8:	609a      	str	r2, [r3, #8]
}
 80061da:	bf00      	nop
 80061dc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e6:	bf00      	nop
 80061e8:	51eb851f 	.word	0x51eb851f

080061ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fd8c 	bl	8005d1c <LL_USART_IsEnabled>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d15e      	bne.n	80062c8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006212:	f023 030c 	bic.w	r3, r3, #12
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	6851      	ldr	r1, [r2, #4]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	68d2      	ldr	r2, [r2, #12]
 800621e:	4311      	orrs	r1, r2
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	6912      	ldr	r2, [r2, #16]
 8006224:	4311      	orrs	r1, r2
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	6992      	ldr	r2, [r2, #24]
 800622a:	430a      	orrs	r2, r1
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fd83 	bl	8005d44 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fd90 	bl	8005d6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff f936 	bl	80054c0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1f      	ldr	r2, [pc, #124]	@ (80062d4 <LL_USART_Init+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d102      	bne.n	8006262 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e021      	b.n	80062a6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <LL_USART_Init+0xec>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d102      	bne.n	8006270 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	e01a      	b.n	80062a6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1a      	ldr	r2, [pc, #104]	@ (80062dc <LL_USART_Init+0xf0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d102      	bne.n	800627e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e013      	b.n	80062a6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a17      	ldr	r2, [pc, #92]	@ (80062e0 <LL_USART_Init+0xf4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d102      	bne.n	800628c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e00c      	b.n	80062a6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <LL_USART_Init+0xf8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d102      	bne.n	800629a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	e005      	b.n	80062a6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <LL_USART_Init+0xfc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80062b4:	2300      	movs	r3, #0
 80062b6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fd64 	bl	8005d90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40011000 	.word	0x40011000
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40011400 	.word	0x40011400
 80062e4:	40004c00 	.word	0x40004c00
 80062e8:	40005000 	.word	0x40005000

080062ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062ec:	b084      	sub	sp, #16
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	f107 001c 	add.w	r0, r7, #28
 80062fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006302:	2b01      	cmp	r3, #1
 8006304:	d123      	bne.n	800634e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800631a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800632e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006332:	2b01      	cmp	r3, #1
 8006334:	d105      	bne.n	8006342 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fae8 	bl	8007918 <USB_CoreReset>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
 800634c:	e01b      	b.n	8006386 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fadc 	bl	8007918 <USB_CoreReset>
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006364:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
 8006378:	e005      	b.n	8006386 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006386:	7fbb      	ldrb	r3, [r7, #30]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d10b      	bne.n	80063a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f043 0206 	orr.w	r2, r3, #6
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f043 0220 	orr.w	r2, r3, #32
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b0:	b004      	add	sp, #16
 80063b2:	4770      	bx	lr

080063b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d165      	bne.n	8006494 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a41      	ldr	r2, [pc, #260]	@ (80064d0 <USB_SetTurnaroundTime+0x11c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d906      	bls.n	80063de <USB_SetTurnaroundTime+0x2a>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a40      	ldr	r2, [pc, #256]	@ (80064d4 <USB_SetTurnaroundTime+0x120>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d202      	bcs.n	80063de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063d8:	230f      	movs	r3, #15
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e062      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4a3c      	ldr	r2, [pc, #240]	@ (80064d4 <USB_SetTurnaroundTime+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d306      	bcc.n	80063f4 <USB_SetTurnaroundTime+0x40>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4a3b      	ldr	r2, [pc, #236]	@ (80064d8 <USB_SetTurnaroundTime+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d202      	bcs.n	80063f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063ee:	230e      	movs	r3, #14
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e057      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4a38      	ldr	r2, [pc, #224]	@ (80064d8 <USB_SetTurnaroundTime+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d306      	bcc.n	800640a <USB_SetTurnaroundTime+0x56>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4a37      	ldr	r2, [pc, #220]	@ (80064dc <USB_SetTurnaroundTime+0x128>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d202      	bcs.n	800640a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006404:	230d      	movs	r3, #13
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e04c      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4a33      	ldr	r2, [pc, #204]	@ (80064dc <USB_SetTurnaroundTime+0x128>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d306      	bcc.n	8006420 <USB_SetTurnaroundTime+0x6c>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a32      	ldr	r2, [pc, #200]	@ (80064e0 <USB_SetTurnaroundTime+0x12c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d802      	bhi.n	8006420 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800641a:	230c      	movs	r3, #12
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e041      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4a2f      	ldr	r2, [pc, #188]	@ (80064e0 <USB_SetTurnaroundTime+0x12c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d906      	bls.n	8006436 <USB_SetTurnaroundTime+0x82>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4a2e      	ldr	r2, [pc, #184]	@ (80064e4 <USB_SetTurnaroundTime+0x130>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d802      	bhi.n	8006436 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006430:	230b      	movs	r3, #11
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e036      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4a2a      	ldr	r2, [pc, #168]	@ (80064e4 <USB_SetTurnaroundTime+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d906      	bls.n	800644c <USB_SetTurnaroundTime+0x98>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4a29      	ldr	r2, [pc, #164]	@ (80064e8 <USB_SetTurnaroundTime+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d802      	bhi.n	800644c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006446:	230a      	movs	r3, #10
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e02b      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a26      	ldr	r2, [pc, #152]	@ (80064e8 <USB_SetTurnaroundTime+0x134>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d906      	bls.n	8006462 <USB_SetTurnaroundTime+0xae>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a25      	ldr	r2, [pc, #148]	@ (80064ec <USB_SetTurnaroundTime+0x138>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d202      	bcs.n	8006462 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800645c:	2309      	movs	r3, #9
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e020      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <USB_SetTurnaroundTime+0x138>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d306      	bcc.n	8006478 <USB_SetTurnaroundTime+0xc4>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a20      	ldr	r2, [pc, #128]	@ (80064f0 <USB_SetTurnaroundTime+0x13c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d802      	bhi.n	8006478 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006472:	2308      	movs	r3, #8
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e015      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <USB_SetTurnaroundTime+0x13c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d906      	bls.n	800648e <USB_SetTurnaroundTime+0xda>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <USB_SetTurnaroundTime+0x140>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d202      	bcs.n	800648e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006488:	2307      	movs	r3, #7
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e00a      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800648e:	2306      	movs	r3, #6
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e007      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800649a:	2309      	movs	r3, #9
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	e001      	b.n	80064a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064a0:	2309      	movs	r3, #9
 80064a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	029b      	lsls	r3, r3, #10
 80064b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	00d8acbf 	.word	0x00d8acbf
 80064d4:	00e4e1c0 	.word	0x00e4e1c0
 80064d8:	00f42400 	.word	0x00f42400
 80064dc:	01067380 	.word	0x01067380
 80064e0:	011a499f 	.word	0x011a499f
 80064e4:	01312cff 	.word	0x01312cff
 80064e8:	014ca43f 	.word	0x014ca43f
 80064ec:	016e3600 	.word	0x016e3600
 80064f0:	01a6ab1f 	.word	0x01a6ab1f
 80064f4:	01e84800 	.word	0x01e84800

080064f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f043 0201 	orr.w	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d115      	bne.n	800658a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800656a:	200a      	movs	r0, #10
 800656c:	f7fc f8ee 	bl	800274c <HAL_Delay>
      ms += 10U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	330a      	adds	r3, #10
 8006574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 f93f 	bl	80077fa <USB_GetMode>
 800657c:	4603      	mov	r3, r0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d01e      	beq.n	80065c0 <USB_SetCurrentMode+0x84>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2bc7      	cmp	r3, #199	@ 0xc7
 8006586:	d9f0      	bls.n	800656a <USB_SetCurrentMode+0x2e>
 8006588:	e01a      	b.n	80065c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d115      	bne.n	80065bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800659c:	200a      	movs	r0, #10
 800659e:	f7fc f8d5 	bl	800274c <HAL_Delay>
      ms += 10U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	330a      	adds	r3, #10
 80065a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f926 	bl	80077fa <USB_GetMode>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <USB_SetCurrentMode+0x84>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80065b8:	d9f0      	bls.n	800659c <USB_SetCurrentMode+0x60>
 80065ba:	e001      	b.n	80065c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e005      	b.n	80065cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80065c4:	d101      	bne.n	80065ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d4:	b084      	sub	sp, #16
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e009      	b.n	8006608 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3340      	adds	r3, #64	@ 0x40
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	3301      	adds	r3, #1
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b0e      	cmp	r3, #14
 800660c:	d9f2      	bls.n	80065f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800660e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11c      	bne.n	8006650 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	639a      	str	r2, [r3, #56]	@ 0x38
 800664e:	e00b      	b.n	8006668 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006674:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10d      	bne.n	8006698 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f968 	bl	800695c <USB_SetDevSpeed>
 800668c:	e008      	b.n	80066a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800668e:	2101      	movs	r1, #1
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f963 	bl	800695c <USB_SetDevSpeed>
 8006696:	e003      	b.n	80066a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006698:	2103      	movs	r1, #3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f95e 	bl	800695c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066a0:	2110      	movs	r1, #16
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8fa 	bl	800689c <USB_FlushTxFifo>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f924 	bl	8006900 <USB_FlushRxFifo>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d4:	461a      	mov	r2, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	461a      	mov	r2, r3
 80066e2:	2300      	movs	r3, #0
 80066e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	e043      	b.n	8006774 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006702:	d118      	bne.n	8006736 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e013      	b.n	8006748 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	e008      	b.n	8006748 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006742:	461a      	mov	r2, r3
 8006744:	2300      	movs	r3, #0
 8006746:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006754:	461a      	mov	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006766:	461a      	mov	r2, r3
 8006768:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800676c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	3301      	adds	r3, #1
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006778:	461a      	mov	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4293      	cmp	r3, r2
 800677e:	d3b5      	bcc.n	80066ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e043      	b.n	800680e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800679c:	d118      	bne.n	80067d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e013      	b.n	80067e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e008      	b.n	80067e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ee:	461a      	mov	r2, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006800:	461a      	mov	r2, r3
 8006802:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3301      	adds	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006812:	461a      	mov	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4293      	cmp	r3, r2
 8006818:	d3b5      	bcc.n	8006786 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800682c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800683a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800683c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f043 0210 	orr.w	r2, r3, #16
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <USB_DevInit+0x2c4>)
 8006856:	4313      	orrs	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800685c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f043 0208 	orr.w	r2, r3, #8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006874:	2b01      	cmp	r3, #1
 8006876:	d107      	bne.n	8006888 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006880:	f043 0304 	orr.w	r3, r3, #4
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006894:	b004      	add	sp, #16
 8006896:	4770      	bx	lr
 8006898:	803c3800 	.word	0x803c3800

0800689c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068b6:	d901      	bls.n	80068bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e01b      	b.n	80068f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	daf2      	bge.n	80068aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	019b      	lsls	r3, r3, #6
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068e0:	d901      	bls.n	80068e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e006      	b.n	80068f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d0f0      	beq.n	80068d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006918:	d901      	bls.n	800691e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e018      	b.n	8006950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	daf2      	bge.n	800690c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2210      	movs	r2, #16
 800692e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800693c:	d901      	bls.n	8006942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e006      	b.n	8006950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b10      	cmp	r3, #16
 800694c:	d0f0      	beq.n	8006930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800698e:	b480      	push	{r7}
 8006990:	b087      	sub	sp, #28
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0306 	and.w	r3, r3, #6
 80069a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
 80069b2:	e00a      	b.n	80069ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d002      	beq.n	80069c0 <USB_GetDevSpeed+0x32>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b06      	cmp	r3, #6
 80069be:	d102      	bne.n	80069c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069c0:	2302      	movs	r3, #2
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	e001      	b.n	80069ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069c6:	230f      	movs	r3, #15
 80069c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d13a      	bne.n	8006a6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	2101      	movs	r1, #1
 8006a06:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	68f9      	ldr	r1, [r7, #12]
 8006a0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d155      	bne.n	8006ad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	791b      	ldrb	r3, [r3, #4]
 8006a46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	059b      	lsls	r3, r3, #22
 8006a4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a50:	4313      	orrs	r3, r2
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	e036      	b.n	8006ad8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d11a      	bne.n	8006ad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d161      	bne.n	8006bc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1a:	d11f      	bne.n	8006b5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	2101      	movs	r1, #1
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	0159      	lsls	r1, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	440b      	add	r3, r1
 8006bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4b35      	ldr	r3, [pc, #212]	@ (8006c98 <USB_DeactivateEndpoint+0x1b0>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]
 8006bc6:	e060      	b.n	8006c8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bde:	d11f      	bne.n	8006c20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	2101      	movs	r1, #1
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c40:	4013      	ands	r3, r2
 8006c42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	2101      	movs	r1, #1
 8006c56:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5a:	041b      	lsls	r3, r3, #16
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c64:	4013      	ands	r3, r2
 8006c66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	0159      	lsls	r1, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c82:	4619      	mov	r1, r3
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <USB_DeactivateEndpoint+0x1b4>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	ec337800 	.word	0xec337800
 8006c9c:	eff37800 	.word	0xeff37800

08006ca0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	@ 0x28
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 817f 	bne.w	8006fc0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d132      	bne.n	8006d30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ce8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d28:	0cdb      	lsrs	r3, r3, #19
 8006d2a:	04db      	lsls	r3, r3, #19
 8006d2c:	6113      	str	r3, [r2, #16]
 8006d2e:	e097      	b.n	8006e60 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4a:	0cdb      	lsrs	r3, r3, #19
 8006d4c:	04db      	lsls	r3, r3, #19
 8006d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11a      	bne.n	8006db0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d903      	bls.n	8006d8e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dac:	6113      	str	r3, [r2, #16]
 8006dae:	e044      	b.n	8006e3a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4413      	add	r3, r2
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	8afb      	ldrh	r3, [r7, #22]
 8006dd6:	04d9      	lsls	r1, r3, #19
 8006dd8:	4ba4      	ldr	r3, [pc, #656]	@ (800706c <USB_EPStartXfer+0x3cc>)
 8006dda:	400b      	ands	r3, r1
 8006ddc:	69b9      	ldr	r1, [r7, #24]
 8006dde:	0148      	lsls	r0, r1, #5
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	4401      	add	r1, r0
 8006de4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006de8:	4313      	orrs	r3, r2
 8006dea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	791b      	ldrb	r3, [r3, #4]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d122      	bne.n	8006e3a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e12:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	8afb      	ldrh	r3, [r7, #22]
 8006e24:	075b      	lsls	r3, r3, #29
 8006e26:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e2a:	69b9      	ldr	r1, [r7, #24]
 8006e2c:	0148      	lsls	r0, r1, #5
 8006e2e:	69f9      	ldr	r1, [r7, #28]
 8006e30:	4401      	add	r1, r0
 8006e32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e36:	4313      	orrs	r3, r2
 8006e38:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	0148      	lsls	r0, r1, #5
 8006e54:	69f9      	ldr	r1, [r7, #28]
 8006e56:	4401      	add	r1, r0
 8006e58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d14b      	bne.n	8006efe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d128      	bne.n	8006edc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d110      	bne.n	8006ebc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e00f      	b.n	8006edc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eda:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e166      	b.n	80071cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f1c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	791b      	ldrb	r3, [r3, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d015      	beq.n	8006f52 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 814e 	beq.w	80071cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	2101      	movs	r1, #1
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	69f9      	ldr	r1, [r7, #28]
 8006f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f50:	e13c      	b.n	80071cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d110      	bne.n	8006f84 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e00f      	b.n	8006fa4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fa2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	68d9      	ldr	r1, [r3, #12]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	b298      	uxth	r0, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f9b9 	bl	8007330 <USB_WritePacket>
 8006fbe:	e105      	b.n	80071cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fda:	0cdb      	lsrs	r3, r3, #19
 8006fdc:	04db      	lsls	r3, r3, #19
 8006fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ffa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ffe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007002:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d132      	bne.n	8007070 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	0148      	lsls	r0, r1, #5
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	4401      	add	r1, r0
 8007040:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007044:	4313      	orrs	r3, r2
 8007046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007062:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007066:	6113      	str	r3, [r2, #16]
 8007068:	e062      	b.n	8007130 <USB_EPStartXfer+0x490>
 800706a:	bf00      	nop
 800706c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d123      	bne.n	80070c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708e:	69b9      	ldr	r1, [r7, #24]
 8007090:	0148      	lsls	r0, r1, #5
 8007092:	69f9      	ldr	r1, [r7, #28]
 8007094:	4401      	add	r1, r0
 8007096:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800709a:	4313      	orrs	r3, r2
 800709c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070bc:	6113      	str	r3, [r2, #16]
 80070be:	e037      	b.n	8007130 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	1e5a      	subs	r2, r3, #1
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	8afa      	ldrh	r2, [r7, #22]
 80070dc:	fb03 f202 	mul.w	r2, r3, r2
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	8afb      	ldrh	r3, [r7, #22]
 80070f4:	04d9      	lsls	r1, r3, #19
 80070f6:	4b38      	ldr	r3, [pc, #224]	@ (80071d8 <USB_EPStartXfer+0x538>)
 80070f8:	400b      	ands	r3, r1
 80070fa:	69b9      	ldr	r1, [r7, #24]
 80070fc:	0148      	lsls	r0, r1, #5
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	4401      	add	r1, r0
 8007102:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007106:	4313      	orrs	r3, r2
 8007108:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	0148      	lsls	r0, r1, #5
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	4401      	add	r1, r0
 8007128:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800712c:	4313      	orrs	r3, r2
 800712e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10d      	bne.n	8007152 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	460a      	mov	r2, r1
 8007150:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	791b      	ldrb	r3, [r3, #4]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d128      	bne.n	80071ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d110      	bne.n	800718c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007184:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	e00f      	b.n	80071ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	1ff80000 	.word	0x1ff80000

080071dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d14a      	bne.n	8007290 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800720e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007212:	f040 8086 	bne.w	8007322 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007234:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007238:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800725c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f242 7210 	movw	r2, #10000	@ 0x2710
 800726a:	4293      	cmp	r3, r2
 800726c:	d902      	bls.n	8007274 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	e056      	b.n	8007322 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728c:	d0e7      	beq.n	800725e <USB_EPStopXfer+0x82>
 800728e:	e048      	b.n	8007322 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a8:	d13b      	bne.n	8007322 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072fe:	4293      	cmp	r3, r2
 8007300:	d902      	bls.n	8007308 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
          break;
 8007306:	e00c      	b.n	8007322 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800731c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007320:	d0e7      	beq.n	80072f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
}
 8007324:	4618      	mov	r0, r3
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	@ 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	460b      	mov	r3, r1
 8007340:	71fb      	strb	r3, [r7, #7]
 8007342:	4613      	mov	r3, r2
 8007344:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800734e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d123      	bne.n	800739e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007356:	88bb      	ldrh	r3, [r7, #4]
 8007358:	3303      	adds	r3, #3
 800735a:	089b      	lsrs	r3, r3, #2
 800735c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e018      	b.n	8007396 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	031a      	lsls	r2, r3, #12
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	4413      	add	r3, r2
 800736c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007370:	461a      	mov	r2, r3
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3301      	adds	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	3301      	adds	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d3e2      	bcc.n	8007364 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3724      	adds	r7, #36	@ 0x24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b08b      	sub	sp, #44	@ 0x2c
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073d2:	2300      	movs	r3, #0
 80073d4:	623b      	str	r3, [r7, #32]
 80073d6:	e014      	b.n	8007402 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	3301      	adds	r3, #1
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	3301      	adds	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	3301      	adds	r3, #1
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	3301      	adds	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	3301      	adds	r3, #1
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	429a      	cmp	r2, r3
 8007408:	d3e6      	bcc.n	80073d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800740a:	8bfb      	ldrh	r3, [r7, #30]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01e      	beq.n	800744e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800741a:	461a      	mov	r2, r3
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
 8007430:	b2da      	uxtb	r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	701a      	strb	r2, [r3, #0]
      i++;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	3301      	adds	r3, #1
 800743a:	623b      	str	r3, [r7, #32]
      pDest++;
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	3301      	adds	r3, #1
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007442:	8bfb      	ldrh	r3, [r7, #30]
 8007444:	3b01      	subs	r3, #1
 8007446:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007448:	8bfb      	ldrh	r3, [r7, #30]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1ea      	bne.n	8007424 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007450:	4618      	mov	r0, r3
 8007452:	372c      	adds	r7, #44	@ 0x2c
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d12c      	bne.n	80074d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	db12      	blt.n	80074b0 <USB_EPSetStall+0x54>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00f      	beq.n	80074b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e02b      	b.n	800752a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	db12      	blt.n	800750a <USB_EPSetStall+0xae>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00f      	beq.n	800750a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	0151      	lsls	r1, r2, #5
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	440a      	add	r2, r1
 8007500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007504:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007508:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007528:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d128      	bne.n	80075a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007572:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d003      	beq.n	8007584 <USB_EPClearStall+0x4c>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	791b      	ldrb	r3, [r3, #4]
 8007580:	2b02      	cmp	r3, #2
 8007582:	d138      	bne.n	80075f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800759e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e027      	b.n	80075f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d003      	beq.n	80075d6 <USB_EPClearStall+0x9e>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d10f      	bne.n	80075f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007622:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007626:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007638:	68f9      	ldr	r1, [r7, #12]
 800763a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800767e:	f023 0302 	bic.w	r3, r3, #2
 8007682:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076ac:	f023 0303 	bic.w	r3, r3, #3
 80076b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4013      	ands	r3, r2
 800771c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	0c1b      	lsrs	r3, r3, #16
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	b29b      	uxth	r3, r3
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4013      	ands	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007790:	68bb      	ldr	r3, [r7, #8]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800779e:	b480      	push	{r7}
 80077a0:	b087      	sub	sp, #28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	01db      	lsls	r3, r3, #7
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4013      	ands	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077ec:	68bb      	ldr	r3, [r7, #8]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0301 	and.w	r3, r3, #1
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007830:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007834:	f023 0307 	bic.w	r3, r3, #7
 8007838:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	460b      	mov	r3, r1
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	333c      	adds	r3, #60	@ 0x3c
 8007872:	3304      	adds	r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	4a26      	ldr	r2, [pc, #152]	@ (8007914 <USB_EP0_OutStart+0xb8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d90a      	bls.n	8007896 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800788c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007890:	d101      	bne.n	8007896 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e037      	b.n	8007906 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789c:	461a      	mov	r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c4:	f043 0318 	orr.w	r3, r3, #24
 80078c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d10f      	bne.n	8007904 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	4f54300a 	.word	0x4f54300a

08007918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007930:	d901      	bls.n	8007936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e01b      	b.n	800796e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	daf2      	bge.n	8007924 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800795a:	d901      	bls.n	8007960 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e006      	b.n	800796e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d0f0      	beq.n	800794e <USB_CoreReset+0x36>

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007988:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800798c:	f002 fc9e 	bl	800a2cc <USBD_static_malloc>
 8007990:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32b0      	adds	r2, #176	@ 0xb0
 80079a2:	2100      	movs	r1, #0
 80079a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079a8:	2302      	movs	r3, #2
 80079aa:	e0d4      	b.n	8007b56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079ac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80079b0:	2100      	movs	r1, #0
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f003 fb0f 	bl	800afd6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32b0      	adds	r2, #176	@ 0xb0
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32b0      	adds	r2, #176	@ 0xb0
 80079d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7c1b      	ldrb	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d138      	bne.n	8007a56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b60 <USBD_CDC_Init+0x1e4>)
 80079e6:	7819      	ldrb	r1, [r3, #0]
 80079e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079ec:	2202      	movs	r2, #2
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 fb49 	bl	800a086 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b60 <USBD_CDC_Init+0x1e4>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 020f 	and.w	r2, r3, #15
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	3324      	adds	r3, #36	@ 0x24
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a0e:	4b55      	ldr	r3, [pc, #340]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007a10:	7819      	ldrb	r1, [r3, #0]
 8007a12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a16:	2202      	movs	r2, #2
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f002 fb34 	bl	800a086 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a1e:	4b51      	ldr	r3, [pc, #324]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a36:	2201      	movs	r2, #1
 8007a38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b68 <USBD_CDC_Init+0x1ec>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 020f 	and.w	r2, r3, #15
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	3326      	adds	r3, #38	@ 0x26
 8007a50:	2210      	movs	r2, #16
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e035      	b.n	8007ac2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a56:	4b42      	ldr	r3, [pc, #264]	@ (8007b60 <USBD_CDC_Init+0x1e4>)
 8007a58:	7819      	ldrb	r1, [r3, #0]
 8007a5a:	2340      	movs	r3, #64	@ 0x40
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f002 fb11 	bl	800a086 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a64:	4b3e      	ldr	r3, [pc, #248]	@ (8007b60 <USBD_CDC_Init+0x1e4>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 020f 	and.w	r2, r3, #15
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	3324      	adds	r3, #36	@ 0x24
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a7e:	4b39      	ldr	r3, [pc, #228]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007a80:	7819      	ldrb	r1, [r3, #0]
 8007a82:	2340      	movs	r3, #64	@ 0x40
 8007a84:	2202      	movs	r2, #2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 fafd 	bl	800a086 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a8c:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8007b68 <USBD_CDC_Init+0x1ec>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	3326      	adds	r3, #38	@ 0x26
 8007abe:	2210      	movs	r2, #16
 8007ac0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ac2:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <USBD_CDC_Init+0x1ec>)
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	2203      	movs	r2, #3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 fadb 	bl	800a086 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ad0:	4b25      	ldr	r3, [pc, #148]	@ (8007b68 <USBD_CDC_Init+0x1ec>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3324      	adds	r3, #36	@ 0x24
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	33b0      	adds	r3, #176	@ 0xb0
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b20:	2302      	movs	r3, #2
 8007b22:	e018      	b.n	8007b56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7c1b      	ldrb	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007b2e:	7819      	ldrb	r1, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f002 fb92 	bl	800a264 <USBD_LL_PrepareReceive>
 8007b40:	e008      	b.n	8007b54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b42:	4b08      	ldr	r3, [pc, #32]	@ (8007b64 <USBD_CDC_Init+0x1e8>)
 8007b44:	7819      	ldrb	r1, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b4c:	2340      	movs	r3, #64	@ 0x40
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 fb88 	bl	800a264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000093 	.word	0x20000093
 8007b64:	20000094 	.word	0x20000094
 8007b68:	20000095 	.word	0x20000095

08007b6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b78:	4b3a      	ldr	r3, [pc, #232]	@ (8007c64 <USBD_CDC_DeInit+0xf8>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f002 faa7 	bl	800a0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b84:	4b37      	ldr	r3, [pc, #220]	@ (8007c64 <USBD_CDC_DeInit+0xf8>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 020f 	and.w	r2, r3, #15
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	3324      	adds	r3, #36	@ 0x24
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b9e:	4b32      	ldr	r3, [pc, #200]	@ (8007c68 <USBD_CDC_DeInit+0xfc>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f002 fa94 	bl	800a0d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007baa:	4b2f      	ldr	r3, [pc, #188]	@ (8007c68 <USBD_CDC_DeInit+0xfc>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bc6:	4b29      	ldr	r3, [pc, #164]	@ (8007c6c <USBD_CDC_DeInit+0x100>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 fa80 	bl	800a0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bd2:	4b26      	ldr	r3, [pc, #152]	@ (8007c6c <USBD_CDC_DeInit+0x100>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	3324      	adds	r3, #36	@ 0x24
 8007be8:	2200      	movs	r2, #0
 8007bea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007bec:	4b1f      	ldr	r3, [pc, #124]	@ (8007c6c <USBD_CDC_DeInit+0x100>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3326      	adds	r3, #38	@ 0x26
 8007c02:	2200      	movs	r2, #0
 8007c04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32b0      	adds	r2, #176	@ 0xb0
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01f      	beq.n	8007c58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	33b0      	adds	r3, #176	@ 0xb0
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	@ 0xb0
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f002 fb54 	bl	800a2e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	@ 0xb0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000093 	.word	0x20000093
 8007c68:	20000094 	.word	0x20000094
 8007c6c:	20000095 	.word	0x20000095

08007c70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	32b0      	adds	r2, #176	@ 0xb0
 8007c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e0bf      	b.n	8007e20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d050      	beq.n	8007d4e <USBD_CDC_Setup+0xde>
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	f040 80af 	bne.w	8007e10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d03a      	beq.n	8007d30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b25b      	sxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da1b      	bge.n	8007cfc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	33b0      	adds	r3, #176	@ 0xb0
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	88d2      	ldrh	r2, [r2, #6]
 8007ce0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	2b07      	cmp	r3, #7
 8007ce8:	bf28      	it	cs
 8007cea:	2307      	movcs	r3, #7
 8007cec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	89fa      	ldrh	r2, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fd93 	bl	8009820 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cfa:	e090      	b.n	8007e1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	785a      	ldrb	r2, [r3, #1]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	88db      	ldrh	r3, [r3, #6]
 8007d0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d0c:	d803      	bhi.n	8007d16 <USBD_CDC_Setup+0xa6>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	88db      	ldrh	r3, [r3, #6]
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	e000      	b.n	8007d18 <USBD_CDC_Setup+0xa8>
 8007d16:	2240      	movs	r2, #64	@ 0x40
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d1e:	6939      	ldr	r1, [r7, #16]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d26:	461a      	mov	r2, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fda5 	bl	8009878 <USBD_CtlPrepareRx>
      break;
 8007d2e:	e076      	b.n	8007e1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	33b0      	adds	r3, #176	@ 0xb0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	7850      	ldrb	r0, [r2, #1]
 8007d46:	2200      	movs	r2, #0
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4798      	blx	r3
      break;
 8007d4c:	e067      	b.n	8007e1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b0b      	cmp	r3, #11
 8007d54:	d851      	bhi.n	8007dfa <USBD_CDC_Setup+0x18a>
 8007d56:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <USBD_CDC_Setup+0xec>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d8d 	.word	0x08007d8d
 8007d60:	08007e09 	.word	0x08007e09
 8007d64:	08007dfb 	.word	0x08007dfb
 8007d68:	08007dfb 	.word	0x08007dfb
 8007d6c:	08007dfb 	.word	0x08007dfb
 8007d70:	08007dfb 	.word	0x08007dfb
 8007d74:	08007dfb 	.word	0x08007dfb
 8007d78:	08007dfb 	.word	0x08007dfb
 8007d7c:	08007dfb 	.word	0x08007dfb
 8007d80:	08007dfb 	.word	0x08007dfb
 8007d84:	08007db7 	.word	0x08007db7
 8007d88:	08007de1 	.word	0x08007de1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d107      	bne.n	8007da8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d98:	f107 030a 	add.w	r3, r7, #10
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fd3d 	bl	8009820 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da6:	e032      	b.n	8007e0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fcbb 	bl	8009726 <USBD_CtlError>
            ret = USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	75fb      	strb	r3, [r7, #23]
          break;
 8007db4:	e02b      	b.n	8007e0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d107      	bne.n	8007dd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dc2:	f107 030d 	add.w	r3, r7, #13
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fd28 	bl	8009820 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dd0:	e01d      	b.n	8007e0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fca6 	bl	8009726 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dde:	e016      	b.n	8007e0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d00f      	beq.n	8007e0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fc99 	bl	8009726 <USBD_CtlError>
            ret = USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007df8:	e008      	b.n	8007e0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fc92 	bl	8009726 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e02:	2303      	movs	r3, #3
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	e002      	b.n	8007e0e <USBD_CDC_Setup+0x19e>
          break;
 8007e08:	bf00      	nop
 8007e0a:	e008      	b.n	8007e1e <USBD_CDC_Setup+0x1ae>
          break;
 8007e0c:	bf00      	nop
      }
      break;
 8007e0e:	e006      	b.n	8007e1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fc87 	bl	8009726 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32b0      	adds	r2, #176	@ 0xb0
 8007e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e065      	b.n	8007f1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	32b0      	adds	r2, #176	@ 0xb0
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	f003 020f 	and.w	r2, r3, #15
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	440b      	add	r3, r1
 8007e74:	3318      	adds	r3, #24
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d02f      	beq.n	8007edc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	f003 020f 	and.w	r2, r3, #15
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	3318      	adds	r3, #24
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	f003 010f 	and.w	r1, r3, #15
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	440b      	add	r3, r1
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4403      	add	r3, r0
 8007ea4:	331c      	adds	r3, #28
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d112      	bne.n	8007edc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	f003 020f 	and.w	r2, r3, #15
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3318      	adds	r3, #24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ece:	78f9      	ldrb	r1, [r7, #3]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f002 f9a4 	bl	800a222 <USBD_LL_Transmit>
 8007eda:	e01f      	b.n	8007f1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	33b0      	adds	r3, #176	@ 0xb0
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d010      	beq.n	8007f1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	33b0      	adds	r3, #176	@ 0xb0
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	32b0      	adds	r2, #176	@ 0xb0
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	32b0      	adds	r2, #176	@ 0xb0
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e01a      	b.n	8007f8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f002 f9a2 	bl	800a2a6 <USBD_LL_GetRxDataSize>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	33b0      	adds	r3, #176	@ 0xb0
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32b0      	adds	r2, #176	@ 0xb0
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e024      	b.n	8008002 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	33b0      	adds	r3, #176	@ 0xb0
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d019      	beq.n	8008000 <USBD_CDC_EP0_RxReady+0x6a>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fd2:	2bff      	cmp	r3, #255	@ 0xff
 8007fd4:	d014      	beq.n	8008000 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	33b0      	adds	r3, #176	@ 0xb0
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ff6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	22ff      	movs	r2, #255	@ 0xff
 8007ffc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008014:	2182      	movs	r1, #130	@ 0x82
 8008016:	4818      	ldr	r0, [pc, #96]	@ (8008078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008018:	f000 fd4f 	bl	8008aba <USBD_GetEpDesc>
 800801c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800801e:	2101      	movs	r1, #1
 8008020:	4815      	ldr	r0, [pc, #84]	@ (8008078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008022:	f000 fd4a 	bl	8008aba <USBD_GetEpDesc>
 8008026:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008028:	2181      	movs	r1, #129	@ 0x81
 800802a:	4813      	ldr	r0, [pc, #76]	@ (8008078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800802c:	f000 fd45 	bl	8008aba <USBD_GetEpDesc>
 8008030:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2210      	movs	r2, #16
 800803c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d006      	beq.n	8008052 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2200      	movs	r2, #0
 8008048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800804c:	711a      	strb	r2, [r3, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008060:	711a      	strb	r2, [r3, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2243      	movs	r2, #67	@ 0x43
 800806a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800806c:	4b02      	ldr	r3, [pc, #8]	@ (8008078 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000050 	.word	0x20000050

0800807c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008084:	2182      	movs	r1, #130	@ 0x82
 8008086:	4818      	ldr	r0, [pc, #96]	@ (80080e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008088:	f000 fd17 	bl	8008aba <USBD_GetEpDesc>
 800808c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800808e:	2101      	movs	r1, #1
 8008090:	4815      	ldr	r0, [pc, #84]	@ (80080e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008092:	f000 fd12 	bl	8008aba <USBD_GetEpDesc>
 8008096:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008098:	2181      	movs	r1, #129	@ 0x81
 800809a:	4813      	ldr	r0, [pc, #76]	@ (80080e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800809c:	f000 fd0d 	bl	8008aba <USBD_GetEpDesc>
 80080a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2210      	movs	r2, #16
 80080ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d006      	beq.n	80080c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2200      	movs	r2, #0
 80080b8:	711a      	strb	r2, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f042 0202 	orr.w	r2, r2, #2
 80080c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	711a      	strb	r2, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f042 0202 	orr.w	r2, r2, #2
 80080d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2243      	movs	r2, #67	@ 0x43
 80080da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	@ (80080e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000050 	.word	0x20000050

080080ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080f4:	2182      	movs	r1, #130	@ 0x82
 80080f6:	4818      	ldr	r0, [pc, #96]	@ (8008158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080f8:	f000 fcdf 	bl	8008aba <USBD_GetEpDesc>
 80080fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080fe:	2101      	movs	r1, #1
 8008100:	4815      	ldr	r0, [pc, #84]	@ (8008158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008102:	f000 fcda 	bl	8008aba <USBD_GetEpDesc>
 8008106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008108:	2181      	movs	r1, #129	@ 0x81
 800810a:	4813      	ldr	r0, [pc, #76]	@ (8008158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800810c:	f000 fcd5 	bl	8008aba <USBD_GetEpDesc>
 8008110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2210      	movs	r2, #16
 800811c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d006      	beq.n	8008132 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2200      	movs	r2, #0
 8008128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800812c:	711a      	strb	r2, [r3, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008140:	711a      	strb	r2, [r3, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2243      	movs	r2, #67	@ 0x43
 800814a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000050 	.word	0x20000050

0800815c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	220a      	movs	r2, #10
 8008168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	@ (8008178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	2000000c 	.word	0x2000000c

0800817c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	e009      	b.n	80081a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	33b0      	adds	r3, #176	@ 0xb0
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	32b0      	adds	r2, #176	@ 0xb0
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e008      	b.n	80081e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	371c      	adds	r7, #28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	32b0      	adds	r2, #176	@ 0xb0
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	e004      	b.n	8008222 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
	...

08008230 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	@ 0xb0
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008252:	2303      	movs	r3, #3
 8008254:	e025      	b.n	80082a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11f      	bne.n	80082a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2201      	movs	r2, #1
 8008264:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008268:	4b10      	ldr	r3, [pc, #64]	@ (80082ac <USBD_CDC_TransmitPacket+0x7c>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 020f 	and.w	r2, r3, #15
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4403      	add	r3, r0
 8008282:	3318      	adds	r3, #24
 8008284:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008286:	4b09      	ldr	r3, [pc, #36]	@ (80082ac <USBD_CDC_TransmitPacket+0x7c>)
 8008288:	7819      	ldrb	r1, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 ffc3 	bl	800a222 <USBD_LL_Transmit>

    ret = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000093 	.word	0x20000093

080082b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	32b0      	adds	r2, #176	@ 0xb0
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	32b0      	adds	r2, #176	@ 0xb0
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082da:	2303      	movs	r3, #3
 80082dc:	e018      	b.n	8008310 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7c1b      	ldrb	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <USBD_CDC_ReceivePacket+0x68>)
 80082e8:	7819      	ldrb	r1, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 ffb5 	bl	800a264 <USBD_LL_PrepareReceive>
 80082fa:	e008      	b.n	800830e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082fc:	4b06      	ldr	r3, [pc, #24]	@ (8008318 <USBD_CDC_ReceivePacket+0x68>)
 80082fe:	7819      	ldrb	r1, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008306:	2340      	movs	r3, #64	@ 0x40
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 ffab 	bl	800a264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000094 	.word	0x20000094

0800831c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008330:	2303      	movs	r3, #3
 8008332:	e01f      	b.n	8008374 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	79fa      	ldrb	r2, [r7, #7]
 8008366:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f001 fe25 	bl	8009fb8 <USBD_LL_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008390:	2303      	movs	r3, #3
 8008392:	e025      	b.n	80083e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32ae      	adds	r2, #174	@ 0xae
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00f      	beq.n	80083d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	32ae      	adds	r2, #174	@ 0xae
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	f107 020e 	add.w	r2, r7, #14
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	4602      	mov	r2, r0
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 fe2d 	bl	800a050 <USBD_LL_Start>
 80083f6:	4603      	mov	r3, r0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800842c:	2b00      	cmp	r3, #0
 800842e:	d009      	beq.n	8008444 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	4611      	mov	r1, r2
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f90c 	bl	80096b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80084a8:	461a      	mov	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084b6:	f003 031f 	and.w	r3, r3, #31
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d01a      	beq.n	80084f4 <USBD_LL_SetupStage+0x72>
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d822      	bhi.n	8008508 <USBD_LL_SetupStage+0x86>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <USBD_LL_SetupStage+0x4a>
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00a      	beq.n	80084e0 <USBD_LL_SetupStage+0x5e>
 80084ca:	e01d      	b.n	8008508 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fb63 	bl	8008ba0 <USBD_StdDevReq>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
      break;
 80084de:	e020      	b.n	8008522 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fbcb 	bl	8008c84 <USBD_StdItfReq>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
      break;
 80084f2:	e016      	b.n	8008522 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc2d 	bl	8008d5c <USBD_StdEPReq>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
      break;
 8008506:	e00c      	b.n	8008522 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800850e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008512:	b2db      	uxtb	r3, r3
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fdfa 	bl	800a110 <USBD_LL_StallEP>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
      break;
 8008520:	bf00      	nop
  }

  return ret;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	460b      	mov	r3, r1
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d16e      	bne.n	8008622 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800854a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008552:	2b03      	cmp	r3, #3
 8008554:	f040 8098 	bne.w	8008688 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	429a      	cmp	r2, r3
 8008562:	d913      	bls.n	800858c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	1ad2      	subs	r2, r2, r3
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4293      	cmp	r3, r2
 800857c:	bf28      	it	cs
 800857e:	4613      	movcs	r3, r2
 8008580:	461a      	mov	r2, r3
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f001 f994 	bl	80098b2 <USBD_CtlContinueRx>
 800858a:	e07d      	b.n	8008688 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	2b02      	cmp	r3, #2
 8008598:	d014      	beq.n	80085c4 <USBD_LL_DataOutStage+0x98>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d81d      	bhi.n	80085da <USBD_LL_DataOutStage+0xae>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USBD_LL_DataOutStage+0x7c>
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d003      	beq.n	80085ae <USBD_LL_DataOutStage+0x82>
 80085a6:	e018      	b.n	80085da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	75bb      	strb	r3, [r7, #22]
            break;
 80085ac:	e018      	b.n	80085e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	4619      	mov	r1, r3
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fa64 	bl	8008a86 <USBD_CoreFindIF>
 80085be:	4603      	mov	r3, r0
 80085c0:	75bb      	strb	r3, [r7, #22]
            break;
 80085c2:	e00d      	b.n	80085e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fa66 	bl	8008aa0 <USBD_CoreFindEP>
 80085d4:	4603      	mov	r3, r0
 80085d6:	75bb      	strb	r3, [r7, #22]
            break;
 80085d8:	e002      	b.n	80085e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]
            break;
 80085de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085e0:	7dbb      	ldrb	r3, [r7, #22]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d119      	bne.n	800861a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d113      	bne.n	800861a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085f2:	7dba      	ldrb	r2, [r7, #22]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	32ae      	adds	r2, #174	@ 0xae
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008602:	7dba      	ldrb	r2, [r7, #22]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800860a:	7dba      	ldrb	r2, [r7, #22]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	32ae      	adds	r2, #174	@ 0xae
 8008610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f001 f95a 	bl	80098d4 <USBD_CtlSendStatus>
 8008620:	e032      	b.n	8008688 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008628:	b2db      	uxtb	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fa37 	bl	8008aa0 <USBD_CoreFindEP>
 8008632:	4603      	mov	r3, r0
 8008634:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008636:	7dbb      	ldrb	r3, [r7, #22]
 8008638:	2bff      	cmp	r3, #255	@ 0xff
 800863a:	d025      	beq.n	8008688 <USBD_LL_DataOutStage+0x15c>
 800863c:	7dbb      	ldrb	r3, [r7, #22]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d122      	bne.n	8008688 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d117      	bne.n	800867e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800864e:	7dba      	ldrb	r2, [r7, #22]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	32ae      	adds	r2, #174	@ 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800865e:	7dba      	ldrb	r2, [r7, #22]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008666:	7dba      	ldrb	r2, [r7, #22]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	32ae      	adds	r2, #174	@ 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	7afa      	ldrb	r2, [r7, #11]
 8008674:	4611      	mov	r1, r2
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	e000      	b.n	800868a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	460b      	mov	r3, r1
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d16f      	bne.n	8008786 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3314      	adds	r3, #20
 80086aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d15a      	bne.n	800876c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d914      	bls.n	80086ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f001 f8bc 	bl	8009856 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086de:	2300      	movs	r3, #0
 80086e0:	2200      	movs	r2, #0
 80086e2:	2100      	movs	r1, #0
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f001 fdbd 	bl	800a264 <USBD_LL_PrepareReceive>
 80086ea:	e03f      	b.n	800876c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d11c      	bne.n	8008732 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d316      	bcc.n	8008732 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800870e:	429a      	cmp	r2, r3
 8008710:	d20f      	bcs.n	8008732 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008712:	2200      	movs	r2, #0
 8008714:	2100      	movs	r1, #0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f001 f89d 	bl	8009856 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008724:	2300      	movs	r3, #0
 8008726:	2200      	movs	r2, #0
 8008728:	2100      	movs	r1, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f001 fd9a 	bl	800a264 <USBD_LL_PrepareReceive>
 8008730:	e01c      	b.n	800876c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b03      	cmp	r3, #3
 800873c:	d10f      	bne.n	800875e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800875e:	2180      	movs	r1, #128	@ 0x80
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 fcd5 	bl	800a110 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f001 f8c7 	bl	80098fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d03a      	beq.n	80087ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff fe42 	bl	8008400 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008784:	e032      	b.n	80087ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800878c:	b2db      	uxtb	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f985 	bl	8008aa0 <USBD_CoreFindEP>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2bff      	cmp	r3, #255	@ 0xff
 800879e:	d025      	beq.n	80087ec <USBD_LL_DataInStage+0x15a>
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d122      	bne.n	80087ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d11c      	bne.n	80087ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80087b2:	7dfa      	ldrb	r2, [r7, #23]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	32ae      	adds	r2, #174	@ 0xae
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d014      	beq.n	80087ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087c2:	7dfa      	ldrb	r2, [r7, #23]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087ca:	7dfa      	ldrb	r2, [r7, #23]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	32ae      	adds	r2, #174	@ 0xae
 80087d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	7afa      	ldrb	r2, [r7, #11]
 80087d8:	4611      	mov	r1, r2
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
 80087de:	4603      	mov	r3, r0
 80087e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087e2:	7dbb      	ldrb	r3, [r7, #22]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087e8:	7dbb      	ldrb	r3, [r7, #22]
 80087ea:	e000      	b.n	80087ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d014      	beq.n	800885c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6852      	ldr	r2, [r2, #4]
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	4611      	mov	r1, r2
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008858:	2303      	movs	r3, #3
 800885a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800885c:	2340      	movs	r3, #64	@ 0x40
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fc0f 	bl	800a086 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2240      	movs	r2, #64	@ 0x40
 8008874:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008878:	2340      	movs	r3, #64	@ 0x40
 800887a:	2200      	movs	r2, #0
 800887c:	2180      	movs	r1, #128	@ 0x80
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fc01 	bl	800a086 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2240      	movs	r2, #64	@ 0x40
 800888e:	621a      	str	r2, [r3, #32]

  return ret;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d006      	beq.n	80088dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2204      	movs	r2, #4
 80088e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b04      	cmp	r3, #4
 8008904:	d106      	bne.n	8008914 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d110      	bne.n	8008958 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32ae      	adds	r2, #174	@ 0xae
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e01c      	b.n	80089be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b03      	cmp	r3, #3
 800898e:	d115      	bne.n	80089bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	@ 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	32ae      	adds	r2, #174	@ 0xae
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	4611      	mov	r1, r2
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	32ae      	adds	r2, #174	@ 0xae
 80089dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e01c      	b.n	8008a22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d115      	bne.n	8008a20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	@ 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32ae      	adds	r2, #174	@ 0xae
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00e      	beq.n	8008a7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6852      	ldr	r2, [r2, #4]
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008aac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	7812      	ldrb	r2, [r2, #0]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d91f      	bls.n	8008b20 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008ae6:	e013      	b.n	8008b10 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ae8:	f107 030a 	add.w	r3, r7, #10
 8008aec:	4619      	mov	r1, r3
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f000 f81b 	bl	8008b2a <USBD_GetNextDesc>
 8008af4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	d108      	bne.n	8008b10 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	789b      	ldrb	r3, [r3, #2]
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d008      	beq.n	8008b1e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	897b      	ldrh	r3, [r7, #10]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d8e5      	bhi.n	8008ae8 <USBD_GetEpDesc+0x2e>
 8008b1c:	e000      	b.n	8008b20 <USBD_GetEpDesc+0x66>
          break;
 8008b1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b20:	693b      	ldr	r3, [r7, #16]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	7812      	ldrb	r2, [r2, #0]
 8008b40:	4413      	add	r3, r2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b087      	sub	sp, #28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3301      	adds	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	b21a      	sxth	r2, r3
 8008b88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	b21b      	sxth	r3, r3
 8008b90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b92:	89fb      	ldrh	r3, [r7, #14]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bb6:	2b40      	cmp	r3, #64	@ 0x40
 8008bb8:	d005      	beq.n	8008bc6 <USBD_StdDevReq+0x26>
 8008bba:	2b40      	cmp	r3, #64	@ 0x40
 8008bbc:	d857      	bhi.n	8008c6e <USBD_StdDevReq+0xce>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00f      	beq.n	8008be2 <USBD_StdDevReq+0x42>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d153      	bne.n	8008c6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	32ae      	adds	r2, #174	@ 0xae
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]
      break;
 8008be0:	e04a      	b.n	8008c78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d83b      	bhi.n	8008c62 <USBD_StdDevReq+0xc2>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USBD_StdDevReq+0x50>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c45 	.word	0x08008c45
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c63 	.word	0x08008c63
 8008bfc:	08008c4f 	.word	0x08008c4f
 8008c00:	08008c63 	.word	0x08008c63
 8008c04:	08008c23 	.word	0x08008c23
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c63 	.word	0x08008c63
 8008c10:	08008c3b 	.word	0x08008c3b
 8008c14:	08008c2d 	.word	0x08008c2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa3c 	bl	8009098 <USBD_GetDescriptor>
          break;
 8008c20:	e024      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fba1 	bl	800936c <USBD_SetAddress>
          break;
 8008c2a:	e01f      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fbe0 	bl	80093f4 <USBD_SetConfig>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
          break;
 8008c38:	e018      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc83 	bl	8009548 <USBD_GetConfig>
          break;
 8008c42:	e013      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fcb4 	bl	80095b4 <USBD_GetStatus>
          break;
 8008c4c:	e00e      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fce3 	bl	800961c <USBD_SetFeature>
          break;
 8008c56:	e009      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fd07 	bl	800966e <USBD_ClrFeature>
          break;
 8008c60:	e004      	b.n	8008c6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fd5e 	bl	8009726 <USBD_CtlError>
          break;
 8008c6a:	bf00      	nop
      }
      break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fd58 	bl	8009726 <USBD_CtlError>
      break;
 8008c76:	bf00      	nop
  }

  return ret;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d005      	beq.n	8008caa <USBD_StdItfReq+0x26>
 8008c9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ca0:	d852      	bhi.n	8008d48 <USBD_StdItfReq+0xc4>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <USBD_StdItfReq+0x26>
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d14e      	bne.n	8008d48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d840      	bhi.n	8008d3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	889b      	ldrh	r3, [r3, #4]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d836      	bhi.n	8008d30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	889b      	ldrh	r3, [r3, #4]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fedb 	bl	8008a86 <USBD_CoreFindIF>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2bff      	cmp	r3, #255	@ 0xff
 8008cd8:	d01d      	beq.n	8008d16 <USBD_StdItfReq+0x92>
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11a      	bne.n	8008d16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ce0:	7bba      	ldrb	r2, [r7, #14]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	32ae      	adds	r2, #174	@ 0xae
 8008ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00f      	beq.n	8008d10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cf0:	7bba      	ldrb	r2, [r7, #14]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cf8:	7bba      	ldrb	r2, [r7, #14]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32ae      	adds	r2, #174	@ 0xae
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d0e:	e004      	b.n	8008d1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d14:	e001      	b.n	8008d1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d16:	2303      	movs	r3, #3
 8008d18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	88db      	ldrh	r3, [r3, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d110      	bne.n	8008d44 <USBD_StdItfReq+0xc0>
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10d      	bne.n	8008d44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fdd3 	bl	80098d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d2e:	e009      	b.n	8008d44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fcf7 	bl	8009726 <USBD_CtlError>
          break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fcf2 	bl	8009726 <USBD_CtlError>
          break;
 8008d42:	e000      	b.n	8008d46 <USBD_StdItfReq+0xc2>
          break;
 8008d44:	bf00      	nop
      }
      break;
 8008d46:	e004      	b.n	8008d52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fceb 	bl	8009726 <USBD_CtlError>
      break;
 8008d50:	bf00      	nop
  }

  return ret;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d78:	2b40      	cmp	r3, #64	@ 0x40
 8008d7a:	d007      	beq.n	8008d8c <USBD_StdEPReq+0x30>
 8008d7c:	2b40      	cmp	r3, #64	@ 0x40
 8008d7e:	f200 817f 	bhi.w	8009080 <USBD_StdEPReq+0x324>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d02a      	beq.n	8008ddc <USBD_StdEPReq+0x80>
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	f040 817a 	bne.w	8009080 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff fe85 	bl	8008aa0 <USBD_CoreFindEP>
 8008d96:	4603      	mov	r3, r0
 8008d98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d9a:	7b7b      	ldrb	r3, [r7, #13]
 8008d9c:	2bff      	cmp	r3, #255	@ 0xff
 8008d9e:	f000 8174 	beq.w	800908a <USBD_StdEPReq+0x32e>
 8008da2:	7b7b      	ldrb	r3, [r7, #13]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8170 	bne.w	800908a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008daa:	7b7a      	ldrb	r2, [r7, #13]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008db2:	7b7a      	ldrb	r2, [r7, #13]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	32ae      	adds	r2, #174	@ 0xae
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8163 	beq.w	800908a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008dc4:	7b7a      	ldrb	r2, [r7, #13]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32ae      	adds	r2, #174	@ 0xae
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dda:	e156      	b.n	800908a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d008      	beq.n	8008df6 <USBD_StdEPReq+0x9a>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	f300 8145 	bgt.w	8009074 <USBD_StdEPReq+0x318>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 809b 	beq.w	8008f26 <USBD_StdEPReq+0x1ca>
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d03c      	beq.n	8008e6e <USBD_StdEPReq+0x112>
 8008df4:	e13e      	b.n	8009074 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d002      	beq.n	8008e08 <USBD_StdEPReq+0xac>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d016      	beq.n	8008e34 <USBD_StdEPReq+0xd8>
 8008e06:	e02c      	b.n	8008e62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00d      	beq.n	8008e2a <USBD_StdEPReq+0xce>
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b80      	cmp	r3, #128	@ 0x80
 8008e12:	d00a      	beq.n	8008e2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f979 	bl	800a110 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1e:	2180      	movs	r1, #128	@ 0x80
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f975 	bl	800a110 <USBD_LL_StallEP>
 8008e26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e28:	e020      	b.n	8008e6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fc7a 	bl	8009726 <USBD_CtlError>
              break;
 8008e32:	e01b      	b.n	8008e6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10e      	bne.n	8008e5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <USBD_StdEPReq+0xfe>
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b80      	cmp	r3, #128	@ 0x80
 8008e46:	d008      	beq.n	8008e5a <USBD_StdEPReq+0xfe>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	88db      	ldrh	r3, [r3, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f95b 	bl	800a110 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fd3a 	bl	80098d4 <USBD_CtlSendStatus>

              break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc5e 	bl	8009726 <USBD_CtlError>
              break;
 8008e6a:	bf00      	nop
          }
          break;
 8008e6c:	e107      	b.n	800907e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d002      	beq.n	8008e80 <USBD_StdEPReq+0x124>
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d016      	beq.n	8008eac <USBD_StdEPReq+0x150>
 8008e7e:	e04b      	b.n	8008f18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <USBD_StdEPReq+0x146>
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b80      	cmp	r3, #128	@ 0x80
 8008e8a:	d00a      	beq.n	8008ea2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f93d 	bl	800a110 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e96:	2180      	movs	r1, #128	@ 0x80
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f939 	bl	800a110 <USBD_LL_StallEP>
 8008e9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea0:	e040      	b.n	8008f24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc3e 	bl	8009726 <USBD_CtlError>
              break;
 8008eaa:	e03b      	b.n	8008f24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	885b      	ldrh	r3, [r3, #2]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d136      	bne.n	8008f22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 f943 	bl	800a14e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd03 	bl	80098d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff fde4 	bl	8008aa0 <USBD_CoreFindEP>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008edc:	7b7b      	ldrb	r3, [r7, #13]
 8008ede:	2bff      	cmp	r3, #255	@ 0xff
 8008ee0:	d01f      	beq.n	8008f22 <USBD_StdEPReq+0x1c6>
 8008ee2:	7b7b      	ldrb	r3, [r7, #13]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11c      	bne.n	8008f22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ee8:	7b7a      	ldrb	r2, [r7, #13]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ef0:	7b7a      	ldrb	r2, [r7, #13]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32ae      	adds	r2, #174	@ 0xae
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d010      	beq.n	8008f22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f00:	7b7a      	ldrb	r2, [r7, #13]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	@ 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f16:	e004      	b.n	8008f22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc03 	bl	8009726 <USBD_CtlError>
              break;
 8008f20:	e000      	b.n	8008f24 <USBD_StdEPReq+0x1c8>
              break;
 8008f22:	bf00      	nop
          }
          break;
 8008f24:	e0ab      	b.n	800907e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d002      	beq.n	8008f38 <USBD_StdEPReq+0x1dc>
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d032      	beq.n	8008f9c <USBD_StdEPReq+0x240>
 8008f36:	e097      	b.n	8009068 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <USBD_StdEPReq+0x1f2>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b80      	cmp	r3, #128	@ 0x80
 8008f42:	d004      	beq.n	8008f4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fbed 	bl	8009726 <USBD_CtlError>
                break;
 8008f4c:	e091      	b.n	8009072 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da0b      	bge.n	8008f6e <USBD_StdEPReq+0x212>
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	3310      	adds	r3, #16
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	e00b      	b.n	8008f86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	3304      	adds	r3, #4
 8008f86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2202      	movs	r2, #2
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc43 	bl	8009820 <USBD_CtlSendData>
              break;
 8008f9a:	e06a      	b.n	8009072 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da11      	bge.n	8008fc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	f003 020f 	and.w	r2, r3, #15
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	3324      	adds	r3, #36	@ 0x24
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d117      	bne.n	8008fee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fbb0 	bl	8009726 <USBD_CtlError>
                  break;
 8008fc6:	e054      	b.n	8009072 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 020f 	and.w	r2, r3, #15
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fb9d 	bl	8009726 <USBD_CtlError>
                  break;
 8008fec:	e041      	b.n	8009072 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	da0b      	bge.n	800900e <USBD_StdEPReq+0x2b2>
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	3310      	adds	r3, #16
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	4413      	add	r3, r2
 800900a:	3304      	adds	r3, #4
 800900c:	e00b      	b.n	8009026 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	4413      	add	r3, r2
 8009024:	3304      	adds	r3, #4
 8009026:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <USBD_StdEPReq+0x2d8>
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b80      	cmp	r3, #128	@ 0x80
 8009032:	d103      	bne.n	800903c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e00e      	b.n	800905a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f8a3 	bl	800a18c <USBD_LL_IsStallEP>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e002      	b.n	800905a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2202      	movs	r2, #2
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fbdd 	bl	8009820 <USBD_CtlSendData>
              break;
 8009066:	e004      	b.n	8009072 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb5b 	bl	8009726 <USBD_CtlError>
              break;
 8009070:	bf00      	nop
          }
          break;
 8009072:	e004      	b.n	800907e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fb55 	bl	8009726 <USBD_CtlError>
          break;
 800907c:	bf00      	nop
      }
      break;
 800907e:	e005      	b.n	800908c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb4f 	bl	8009726 <USBD_CtlError>
      break;
 8009088:	e000      	b.n	800908c <USBD_StdEPReq+0x330>
      break;
 800908a:	bf00      	nop
  }

  return ret;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	2b06      	cmp	r3, #6
 80090ba:	f200 8128 	bhi.w	800930e <USBD_GetDescriptor+0x276>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <USBD_GetDescriptor+0x2c>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090f9 	.word	0x080090f9
 80090cc:	08009139 	.word	0x08009139
 80090d0:	0800930f 	.word	0x0800930f
 80090d4:	0800930f 	.word	0x0800930f
 80090d8:	080092af 	.word	0x080092af
 80090dc:	080092db 	.word	0x080092db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	7c12      	ldrb	r2, [r2, #16]
 80090ec:	f107 0108 	add.w	r1, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
      break;
 80090f6:	e112      	b.n	800931e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7c1b      	ldrb	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10d      	bne.n	800911c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	f107 0208 	add.w	r2, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	2202      	movs	r2, #2
 8009118:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800911a:	e100      	b.n	800931e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	f107 0208 	add.w	r2, r7, #8
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
 800912c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	2202      	movs	r2, #2
 8009134:	701a      	strb	r2, [r3, #0]
      break;
 8009136:	e0f2      	b.n	800931e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	885b      	ldrh	r3, [r3, #2]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b05      	cmp	r3, #5
 8009140:	f200 80ac 	bhi.w	800929c <USBD_GetDescriptor+0x204>
 8009144:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <USBD_GetDescriptor+0xb4>)
 8009146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914a:	bf00      	nop
 800914c:	08009165 	.word	0x08009165
 8009150:	08009199 	.word	0x08009199
 8009154:	080091cd 	.word	0x080091cd
 8009158:	08009201 	.word	0x08009201
 800915c:	08009235 	.word	0x08009235
 8009160:	08009269 	.word	0x08009269
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	7c12      	ldrb	r2, [r2, #16]
 800917c:	f107 0108 	add.w	r1, r7, #8
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009186:	e091      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 facb 	bl	8009726 <USBD_CtlError>
            err++;
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	3301      	adds	r3, #1
 8009194:	72fb      	strb	r3, [r7, #11]
          break;
 8009196:	e089      	b.n	80092ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	7c12      	ldrb	r2, [r2, #16]
 80091b0:	f107 0108 	add.w	r1, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ba:	e077      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fab1 	bl	8009726 <USBD_CtlError>
            err++;
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	3301      	adds	r3, #1
 80091c8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ca:	e06f      	b.n	80092ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 0108 	add.w	r1, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ee:	e05d      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa97 	bl	8009726 <USBD_CtlError>
            err++;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	3301      	adds	r3, #1
 80091fc:	72fb      	strb	r3, [r7, #11]
          break;
 80091fe:	e055      	b.n	80092ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7c12      	ldrb	r2, [r2, #16]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009222:	e043      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa7d 	bl	8009726 <USBD_CtlError>
            err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
          break;
 8009232:	e03b      	b.n	80092ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009256:	e029      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa63 	bl	8009726 <USBD_CtlError>
            err++;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	3301      	adds	r3, #1
 8009264:	72fb      	strb	r3, [r7, #11]
          break;
 8009266:	e021      	b.n	80092ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928a:	e00f      	b.n	80092ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa49 	bl	8009726 <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e007      	b.n	80092ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa41 	bl	8009726 <USBD_CtlError>
          err++;
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	3301      	adds	r3, #1
 80092a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80092aa:	bf00      	nop
      }
      break;
 80092ac:	e037      	b.n	800931e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7c1b      	ldrb	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092be:	f107 0208 	add.w	r2, r7, #8
 80092c2:	4610      	mov	r0, r2
 80092c4:	4798      	blx	r3
 80092c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c8:	e029      	b.n	800931e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fa2a 	bl	8009726 <USBD_CtlError>
        err++;
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	3301      	adds	r3, #1
 80092d6:	72fb      	strb	r3, [r7, #11]
      break;
 80092d8:	e021      	b.n	800931e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	7c1b      	ldrb	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10d      	bne.n	80092fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ea:	f107 0208 	add.w	r2, r7, #8
 80092ee:	4610      	mov	r0, r2
 80092f0:	4798      	blx	r3
 80092f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	2207      	movs	r2, #7
 80092fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092fc:	e00f      	b.n	800931e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa10 	bl	8009726 <USBD_CtlError>
        err++;
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	3301      	adds	r3, #1
 800930a:	72fb      	strb	r3, [r7, #11]
      break;
 800930c:	e007      	b.n	800931e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa08 	bl	8009726 <USBD_CtlError>
      err++;
 8009316:	7afb      	ldrb	r3, [r7, #11]
 8009318:	3301      	adds	r3, #1
 800931a:	72fb      	strb	r3, [r7, #11]
      break;
 800931c:	bf00      	nop
  }

  if (err != 0U)
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d11e      	bne.n	8009362 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	88db      	ldrh	r3, [r3, #6]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d016      	beq.n	800935a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800932c:	893b      	ldrh	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00e      	beq.n	8009350 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88da      	ldrh	r2, [r3, #6]
 8009336:	893b      	ldrh	r3, [r7, #8]
 8009338:	4293      	cmp	r3, r2
 800933a:	bf28      	it	cs
 800933c:	4613      	movcs	r3, r2
 800933e:	b29b      	uxth	r3, r3
 8009340:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	461a      	mov	r2, r3
 8009346:	68f9      	ldr	r1, [r7, #12]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa69 	bl	8009820 <USBD_CtlSendData>
 800934e:	e009      	b.n	8009364 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9e7 	bl	8009726 <USBD_CtlError>
 8009358:	e004      	b.n	8009364 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 faba 	bl	80098d4 <USBD_CtlSendStatus>
 8009360:	e000      	b.n	8009364 <USBD_GetDescriptor+0x2cc>
    return;
 8009362:	bf00      	nop
  }
}
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop

0800936c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	889b      	ldrh	r3, [r3, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d131      	bne.n	80093e2 <USBD_SetAddress+0x76>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	88db      	ldrh	r3, [r3, #6]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d12d      	bne.n	80093e2 <USBD_SetAddress+0x76>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	885b      	ldrh	r3, [r3, #2]
 800938a:	2b7f      	cmp	r3, #127	@ 0x7f
 800938c:	d829      	bhi.n	80093e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	885b      	ldrh	r3, [r3, #2]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009398:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d104      	bne.n	80093b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f9bc 	bl	8009726 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ae:	e01d      	b.n	80093ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7bfa      	ldrb	r2, [r7, #15]
 80093b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 ff11 	bl	800a1e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa86 	bl	80098d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	e009      	b.n	80093ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e0:	e004      	b.n	80093ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f99e 	bl	8009726 <USBD_CtlError>
  }
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	b2da      	uxtb	r2, r3
 8009408:	4b4e      	ldr	r3, [pc, #312]	@ (8009544 <USBD_SetConfig+0x150>)
 800940a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800940c:	4b4d      	ldr	r3, [pc, #308]	@ (8009544 <USBD_SetConfig+0x150>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d905      	bls.n	8009420 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f985 	bl	8009726 <USBD_CtlError>
    return USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	e08c      	b.n	800953a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d002      	beq.n	8009432 <USBD_SetConfig+0x3e>
 800942c:	2b03      	cmp	r3, #3
 800942e:	d029      	beq.n	8009484 <USBD_SetConfig+0x90>
 8009430:	e075      	b.n	800951e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009432:	4b44      	ldr	r3, [pc, #272]	@ (8009544 <USBD_SetConfig+0x150>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d020      	beq.n	800947c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800943a:	4b42      	ldr	r3, [pc, #264]	@ (8009544 <USBD_SetConfig+0x150>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009444:	4b3f      	ldr	r3, [pc, #252]	@ (8009544 <USBD_SetConfig+0x150>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fe ffe3 	bl	8008416 <USBD_SetClassConfig>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f962 	bl	8009726 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800946a:	e065      	b.n	8009538 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa31 	bl	80098d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2203      	movs	r2, #3
 8009476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800947a:	e05d      	b.n	8009538 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa29 	bl	80098d4 <USBD_CtlSendStatus>
      break;
 8009482:	e059      	b.n	8009538 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009484:	4b2f      	ldr	r3, [pc, #188]	@ (8009544 <USBD_SetConfig+0x150>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d112      	bne.n	80094b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009494:	4b2b      	ldr	r3, [pc, #172]	@ (8009544 <USBD_SetConfig+0x150>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800949e:	4b29      	ldr	r3, [pc, #164]	@ (8009544 <USBD_SetConfig+0x150>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fe ffd2 	bl	800844e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa12 	bl	80098d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094b0:	e042      	b.n	8009538 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094b2:	4b24      	ldr	r3, [pc, #144]	@ (8009544 <USBD_SetConfig+0x150>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d02a      	beq.n	8009516 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7fe ffc0 	bl	800844e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009544 <USBD_SetConfig+0x150>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009544 <USBD_SetConfig+0x150>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fe ff99 	bl	8008416 <USBD_SetClassConfig>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00f      	beq.n	800950e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f918 	bl	8009726 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7fe ffa5 	bl	800844e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800950c:	e014      	b.n	8009538 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f9e0 	bl	80098d4 <USBD_CtlSendStatus>
      break;
 8009514:	e010      	b.n	8009538 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f9dc 	bl	80098d4 <USBD_CtlSendStatus>
      break;
 800951c:	e00c      	b.n	8009538 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f900 	bl	8009726 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009526:	4b07      	ldr	r3, [pc, #28]	@ (8009544 <USBD_SetConfig+0x150>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fe ff8e 	bl	800844e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	73fb      	strb	r3, [r7, #15]
      break;
 8009536:	bf00      	nop
  }

  return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	200003ac 	.word	0x200003ac

08009548 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	88db      	ldrh	r3, [r3, #6]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d004      	beq.n	8009564 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f8e2 	bl	8009726 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009562:	e023      	b.n	80095ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b02      	cmp	r3, #2
 800956e:	dc02      	bgt.n	8009576 <USBD_GetConfig+0x2e>
 8009570:	2b00      	cmp	r3, #0
 8009572:	dc03      	bgt.n	800957c <USBD_GetConfig+0x34>
 8009574:	e015      	b.n	80095a2 <USBD_GetConfig+0x5a>
 8009576:	2b03      	cmp	r3, #3
 8009578:	d00b      	beq.n	8009592 <USBD_GetConfig+0x4a>
 800957a:	e012      	b.n	80095a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3308      	adds	r3, #8
 8009586:	2201      	movs	r2, #1
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f948 	bl	8009820 <USBD_CtlSendData>
        break;
 8009590:	e00c      	b.n	80095ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3304      	adds	r3, #4
 8009596:	2201      	movs	r2, #1
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f940 	bl	8009820 <USBD_CtlSendData>
        break;
 80095a0:	e004      	b.n	80095ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f8be 	bl	8009726 <USBD_CtlError>
        break;
 80095aa:	bf00      	nop
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d81e      	bhi.n	800960a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	88db      	ldrh	r3, [r3, #6]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d004      	beq.n	80095de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f8a5 	bl	8009726 <USBD_CtlError>
        break;
 80095dc:	e01a      	b.n	8009614 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f043 0202 	orr.w	r2, r3, #2
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	330c      	adds	r3, #12
 80095fe:	2202      	movs	r2, #2
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f90c 	bl	8009820 <USBD_CtlSendData>
      break;
 8009608:	e004      	b.n	8009614 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f88a 	bl	8009726 <USBD_CtlError>
      break;
 8009612:	bf00      	nop
  }
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d107      	bne.n	800963e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f94c 	bl	80098d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800963c:	e013      	b.n	8009666 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d10b      	bne.n	800965e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	889b      	ldrh	r3, [r3, #4]
 800964a:	0a1b      	lsrs	r3, r3, #8
 800964c:	b29b      	uxth	r3, r3
 800964e:	b2da      	uxtb	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f93c 	bl	80098d4 <USBD_CtlSendStatus>
}
 800965c:	e003      	b.n	8009666 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f860 	bl	8009726 <USBD_CtlError>
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967e:	b2db      	uxtb	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	2b02      	cmp	r3, #2
 8009684:	d80b      	bhi.n	800969e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	885b      	ldrh	r3, [r3, #2]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d10c      	bne.n	80096a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f91c 	bl	80098d4 <USBD_CtlSendStatus>
      }
      break;
 800969c:	e004      	b.n	80096a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f840 	bl	8009726 <USBD_CtlError>
      break;
 80096a6:	e000      	b.n	80096aa <USBD_ClrFeature+0x3c>
      break;
 80096a8:	bf00      	nop
  }
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	781a      	ldrb	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fa40 	bl	8008b62 <SWAPBYTE>
 80096e2:	4603      	mov	r3, r0
 80096e4:	461a      	mov	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff fa33 	bl	8008b62 <SWAPBYTE>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fa26 	bl	8008b62 <SWAPBYTE>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	80da      	strh	r2, [r3, #6]
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009730:	2180      	movs	r1, #128	@ 0x80
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fcec 	bl	800a110 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fce8 	bl	800a110 <USBD_LL_StallEP>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d042      	beq.n	80097e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009762:	6938      	ldr	r0, [r7, #16]
 8009764:	f000 f842 	bl	80097ec <USBD_GetLen>
 8009768:	4603      	mov	r3, r0
 800976a:	3301      	adds	r3, #1
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009772:	d808      	bhi.n	8009786 <USBD_GetString+0x3e>
 8009774:	6938      	ldr	r0, [r7, #16]
 8009776:	f000 f839 	bl	80097ec <USBD_GetLen>
 800977a:	4603      	mov	r3, r0
 800977c:	3301      	adds	r3, #1
 800977e:	b29b      	uxth	r3, r3
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	e001      	b.n	800978a <USBD_GetString+0x42>
 8009786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	4413      	add	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7812      	ldrb	r2, [r2, #0]
 8009798:	701a      	strb	r2, [r3, #0]
  idx++;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	3301      	adds	r3, #1
 800979e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	2203      	movs	r2, #3
 80097a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	3301      	adds	r3, #1
 80097ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097b0:	e013      	b.n	80097da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	4413      	add	r3, r2
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	613b      	str	r3, [r7, #16]
    idx++;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	3301      	adds	r3, #1
 80097c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	4413      	add	r3, r2
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	3301      	adds	r3, #1
 80097d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e7      	bne.n	80097b2 <USBD_GetString+0x6a>
 80097e2:	e000      	b.n	80097e6 <USBD_GetString+0x9e>
    return;
 80097e4:	bf00      	nop
  }
}
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097fc:	e005      	b.n	800980a <USBD_GetLen+0x1e>
  {
    len++;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	3301      	adds	r3, #1
 8009802:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3301      	adds	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1f5      	bne.n	80097fe <USBD_GetLen+0x12>
  }

  return len;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2202      	movs	r2, #2
 8009830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	2100      	movs	r1, #0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fceb 	bl	800a222 <USBD_LL_Transmit>

  return USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	2100      	movs	r1, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fcda 	bl	800a222 <USBD_LL_Transmit>

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2203      	movs	r2, #3
 8009888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fcde 	bl	800a264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	2100      	movs	r1, #0
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fccd 	bl	800a264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2204      	movs	r2, #4
 80098e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098e4:	2300      	movs	r3, #0
 80098e6:	2200      	movs	r2, #0
 80098e8:	2100      	movs	r1, #0
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fc99 	bl	800a222 <USBD_LL_Transmit>

  return USBD_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2205      	movs	r2, #5
 8009906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800990a:	2300      	movs	r3, #0
 800990c:	2200      	movs	r2, #0
 800990e:	2100      	movs	r1, #0
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fca7 	bl	800a264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009924:	2200      	movs	r2, #0
 8009926:	4912      	ldr	r1, [pc, #72]	@ (8009970 <MX_USB_DEVICE_Init+0x50>)
 8009928:	4812      	ldr	r0, [pc, #72]	@ (8009974 <MX_USB_DEVICE_Init+0x54>)
 800992a:	f7fe fcf7 	bl	800831c <USBD_Init>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009934:	f7f8 fc3e 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009938:	490f      	ldr	r1, [pc, #60]	@ (8009978 <MX_USB_DEVICE_Init+0x58>)
 800993a:	480e      	ldr	r0, [pc, #56]	@ (8009974 <MX_USB_DEVICE_Init+0x54>)
 800993c:	f7fe fd1e 	bl	800837c <USBD_RegisterClass>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009946:	f7f8 fc35 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800994a:	490c      	ldr	r1, [pc, #48]	@ (800997c <MX_USB_DEVICE_Init+0x5c>)
 800994c:	4809      	ldr	r0, [pc, #36]	@ (8009974 <MX_USB_DEVICE_Init+0x54>)
 800994e:	f7fe fc15 	bl	800817c <USBD_CDC_RegisterInterface>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009958:	f7f8 fc2c 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800995c:	4805      	ldr	r0, [pc, #20]	@ (8009974 <MX_USB_DEVICE_Init+0x54>)
 800995e:	f7fe fd43 	bl	80083e8 <USBD_Start>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009968:	f7f8 fc24 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800996c:	bf00      	nop
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200000ac 	.word	0x200000ac
 8009974:	200003b0 	.word	0x200003b0
 8009978:	20000018 	.word	0x20000018
 800997c:	20000098 	.word	0x20000098

08009980 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009984:	2200      	movs	r2, #0
 8009986:	4905      	ldr	r1, [pc, #20]	@ (800999c <CDC_Init_FS+0x1c>)
 8009988:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <CDC_Init_FS+0x20>)
 800998a:	f7fe fc11 	bl	80081b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800998e:	4905      	ldr	r1, [pc, #20]	@ (80099a4 <CDC_Init_FS+0x24>)
 8009990:	4803      	ldr	r0, [pc, #12]	@ (80099a0 <CDC_Init_FS+0x20>)
 8009992:	f7fe fc2f 	bl	80081f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009996:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009998:	4618      	mov	r0, r3
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000e8c 	.word	0x20000e8c
 80099a0:	200003b0 	.word	0x200003b0
 80099a4:	2000068c 	.word	0x2000068c

080099a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	6039      	str	r1, [r7, #0]
 80099c2:	71fb      	strb	r3, [r7, #7]
 80099c4:	4613      	mov	r3, r2
 80099c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b23      	cmp	r3, #35	@ 0x23
 80099cc:	d84a      	bhi.n	8009a64 <CDC_Control_FS+0xac>
 80099ce:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <CDC_Control_FS+0x1c>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	08009a65 	.word	0x08009a65
 80099d8:	08009a65 	.word	0x08009a65
 80099dc:	08009a65 	.word	0x08009a65
 80099e0:	08009a65 	.word	0x08009a65
 80099e4:	08009a65 	.word	0x08009a65
 80099e8:	08009a65 	.word	0x08009a65
 80099ec:	08009a65 	.word	0x08009a65
 80099f0:	08009a65 	.word	0x08009a65
 80099f4:	08009a65 	.word	0x08009a65
 80099f8:	08009a65 	.word	0x08009a65
 80099fc:	08009a65 	.word	0x08009a65
 8009a00:	08009a65 	.word	0x08009a65
 8009a04:	08009a65 	.word	0x08009a65
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a65 	.word	0x08009a65
 8009a10:	08009a65 	.word	0x08009a65
 8009a14:	08009a65 	.word	0x08009a65
 8009a18:	08009a65 	.word	0x08009a65
 8009a1c:	08009a65 	.word	0x08009a65
 8009a20:	08009a65 	.word	0x08009a65
 8009a24:	08009a65 	.word	0x08009a65
 8009a28:	08009a65 	.word	0x08009a65
 8009a2c:	08009a65 	.word	0x08009a65
 8009a30:	08009a65 	.word	0x08009a65
 8009a34:	08009a65 	.word	0x08009a65
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	08009a65 	.word	0x08009a65
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a65 	.word	0x08009a65
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	08009a65 	.word	0x08009a65
 8009a50:	08009a65 	.word	0x08009a65
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009a65 	.word	0x08009a65
 8009a5c:	08009a65 	.word	0x08009a65
 8009a60:	08009a65 	.word	0x08009a65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a64:	bf00      	nop
  }

  return (USBD_OK);
 8009a66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4805      	ldr	r0, [pc, #20]	@ (8009a98 <CDC_Receive_FS+0x24>)
 8009a82:	f7fe fbb7 	bl	80081f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a86:	4804      	ldr	r0, [pc, #16]	@ (8009a98 <CDC_Receive_FS+0x24>)
 8009a88:	f7fe fc12 	bl	80082b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200003b0 	.word	0x200003b0

08009a9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009aac:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <CDC_Transmit_FS+0x48>)
 8009aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ab2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e00b      	b.n	8009ada <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ac2:	887b      	ldrh	r3, [r7, #2]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4806      	ldr	r0, [pc, #24]	@ (8009ae4 <CDC_Transmit_FS+0x48>)
 8009aca:	f7fe fb71 	bl	80081b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ace:	4805      	ldr	r0, [pc, #20]	@ (8009ae4 <CDC_Transmit_FS+0x48>)
 8009ad0:	f7fe fbae 	bl	8008230 <USBD_CDC_TransmitPacket>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200003b0 	.word	0x200003b0

08009ae8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2212      	movs	r2, #18
 8009b1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b1e:	4b03      	ldr	r3, [pc, #12]	@ (8009b2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	200000c8 	.word	0x200000c8

08009b30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b42:	4b03      	ldr	r3, [pc, #12]	@ (8009b50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	200000dc 	.word	0x200000dc

08009b54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6039      	str	r1, [r7, #0]
 8009b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4907      	ldr	r1, [pc, #28]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b6a:	4808      	ldr	r0, [pc, #32]	@ (8009b8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b6c:	f7ff fdec 	bl	8009748 <USBD_GetString>
 8009b70:	e004      	b.n	8009b7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4904      	ldr	r1, [pc, #16]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b76:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b78:	f7ff fde6 	bl	8009748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	2000168c 	.word	0x2000168c
 8009b8c:	0800ccbc 	.word	0x0800ccbc

08009b90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	4904      	ldr	r1, [pc, #16]	@ (8009bb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ba0:	4804      	ldr	r0, [pc, #16]	@ (8009bb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ba2:	f7ff fdd1 	bl	8009748 <USBD_GetString>
  return USBD_StrDesc;
 8009ba6:	4b02      	ldr	r3, [pc, #8]	@ (8009bb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	2000168c 	.word	0x2000168c
 8009bb4:	0800ccd4 	.word	0x0800ccd4

08009bb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	221a      	movs	r2, #26
 8009bc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bca:	f000 f843 	bl	8009c54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bce:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	200000e0 	.word	0x200000e0

08009bdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d105      	bne.n	8009bfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4907      	ldr	r1, [pc, #28]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bf2:	4808      	ldr	r0, [pc, #32]	@ (8009c14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bf4:	f7ff fda8 	bl	8009748 <USBD_GetString>
 8009bf8:	e004      	b.n	8009c04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4904      	ldr	r1, [pc, #16]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bfe:	4805      	ldr	r0, [pc, #20]	@ (8009c14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c00:	f7ff fda2 	bl	8009748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c04:	4b02      	ldr	r3, [pc, #8]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	2000168c 	.word	0x2000168c
 8009c14:	0800cce8 	.word	0x0800cce8

08009c18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	6039      	str	r1, [r7, #0]
 8009c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	4907      	ldr	r1, [pc, #28]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c2e:	4808      	ldr	r0, [pc, #32]	@ (8009c50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c30:	f7ff fd8a 	bl	8009748 <USBD_GetString>
 8009c34:	e004      	b.n	8009c40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	4904      	ldr	r1, [pc, #16]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c3a:	4805      	ldr	r0, [pc, #20]	@ (8009c50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c3c:	f7ff fd84 	bl	8009748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c40:	4b02      	ldr	r3, [pc, #8]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	2000168c 	.word	0x2000168c
 8009c50:	0800ccf4 	.word	0x0800ccf4

08009c54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c98 <Get_SerialNum+0x44>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c60:	4b0e      	ldr	r3, [pc, #56]	@ (8009c9c <Get_SerialNum+0x48>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca0 <Get_SerialNum+0x4c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	4909      	ldr	r1, [pc, #36]	@ (8009ca4 <Get_SerialNum+0x50>)
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f814 	bl	8009cac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c84:	2204      	movs	r2, #4
 8009c86:	4908      	ldr	r1, [pc, #32]	@ (8009ca8 <Get_SerialNum+0x54>)
 8009c88:	68b8      	ldr	r0, [r7, #8]
 8009c8a:	f000 f80f 	bl	8009cac <IntToUnicode>
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	1fff7a10 	.word	0x1fff7a10
 8009c9c:	1fff7a14 	.word	0x1fff7a14
 8009ca0:	1fff7a18 	.word	0x1fff7a18
 8009ca4:	200000e2 	.word	0x200000e2
 8009ca8:	200000f2 	.word	0x200000f2

08009cac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
 8009cc2:	e027      	b.n	8009d14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0f1b      	lsrs	r3, r3, #28
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d80b      	bhi.n	8009ce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0f1b      	lsrs	r3, r3, #28
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	440b      	add	r3, r1
 8009cdc:	3230      	adds	r2, #48	@ 0x30
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e00a      	b.n	8009cfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	0f1b      	lsrs	r3, r3, #28
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4619      	mov	r1, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3237      	adds	r2, #55	@ 0x37
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	3301      	adds	r3, #1
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4413      	add	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	3301      	adds	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	7dfa      	ldrb	r2, [r7, #23]
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3d3      	bcc.n	8009cc4 <IntToUnicode+0x18>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08a      	sub	sp, #40	@ 0x28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d34:	f107 0314 	add.w	r3, r7, #20
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	609a      	str	r2, [r3, #8]
 8009d40:	60da      	str	r2, [r3, #12]
 8009d42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d4c:	d13a      	bne.n	8009dc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d4e:	2300      	movs	r3, #0
 8009d50:	613b      	str	r3, [r7, #16]
 8009d52:	4b1e      	ldr	r3, [pc, #120]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d56:	4a1d      	ldr	r2, [pc, #116]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d58:	f043 0301 	orr.w	r3, r3, #1
 8009d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d70:	2302      	movs	r3, #2
 8009d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d7c:	230a      	movs	r3, #10
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d80:	f107 0314 	add.w	r3, r7, #20
 8009d84:	4619      	mov	r1, r3
 8009d86:	4812      	ldr	r0, [pc, #72]	@ (8009dd0 <HAL_PCD_MspInit+0xa4>)
 8009d88:	f7f8 fe16 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d90:	4a0e      	ldr	r2, [pc, #56]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d96:	6353      	str	r3, [r2, #52]	@ 0x34
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009da0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009da6:	6453      	str	r3, [r2, #68]	@ 0x44
 8009da8:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <HAL_PCD_MspInit+0xa0>)
 8009daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	2043      	movs	r0, #67	@ 0x43
 8009dba:	f7f8 fdc6 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dbe:	2043      	movs	r0, #67	@ 0x43
 8009dc0:	f7f8 fddf 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	3728      	adds	r7, #40	@ 0x28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	40023800 	.word	0x40023800
 8009dd0:	40020000 	.word	0x40020000

08009dd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fe fb49 	bl	8008482 <USBD_LL_SetupStage>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	4619      	mov	r1, r3
 8009e22:	f7fe fb83 	bl	800852c <USBD_LL_DataOutStage>
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3320      	adds	r3, #32
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	4619      	mov	r1, r3
 8009e56:	f7fe fc1c 	bl	8008692 <USBD_LL_DataInStage>
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fd56 	bl	8008922 <USBD_LL_SOF>
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e86:	2301      	movs	r3, #1
 8009e88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	79db      	ldrb	r3, [r3, #7]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d102      	bne.n	8009e98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e008      	b.n	8009eaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	79db      	ldrb	r3, [r3, #7]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d102      	bne.n	8009ea6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
 8009ea4:	e001      	b.n	8009eaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ea6:	f7f8 f985 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fcf0 	bl	800889a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fc98 	bl	80087f6 <USBD_LL_Reset>
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fceb 	bl	80088ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7adb      	ldrb	r3, [r3, #11]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f04:	4b04      	ldr	r3, [pc, #16]	@ (8009f18 <HAL_PCD_SuspendCallback+0x48>)
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	4a03      	ldr	r2, [pc, #12]	@ (8009f18 <HAL_PCD_SuspendCallback+0x48>)
 8009f0a:	f043 0306 	orr.w	r3, r3, #6
 8009f0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	e000ed00 	.word	0xe000ed00

08009f1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fce1 	bl	80088f2 <USBD_LL_Resume>
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fd39 	bl	80089c6 <USBD_LL_IsoOUTIncomplete>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fcf5 	bl	8008962 <USBD_LL_IsoINIncomplete>
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fd4b 	bl	8008a2a <USBD_LL_DevConnected>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fd48 	bl	8008a40 <USBD_LL_DevDisconnected>
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d13c      	bne.n	800a042 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fc8:	4a20      	ldr	r2, [pc, #128]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fd4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009fde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009fe6:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fe8:	2202      	movs	r2, #2
 8009fea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fec:	4b17      	ldr	r3, [pc, #92]	@ (800a04c <USBD_LL_Init+0x94>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ff2:	4b16      	ldr	r3, [pc, #88]	@ (800a04c <USBD_LL_Init+0x94>)
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ff8:	4b14      	ldr	r3, [pc, #80]	@ (800a04c <USBD_LL_Init+0x94>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ffe:	4b13      	ldr	r3, [pc, #76]	@ (800a04c <USBD_LL_Init+0x94>)
 800a000:	2200      	movs	r2, #0
 800a002:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a004:	4b11      	ldr	r3, [pc, #68]	@ (800a04c <USBD_LL_Init+0x94>)
 800a006:	2200      	movs	r2, #0
 800a008:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a00a:	4b10      	ldr	r3, [pc, #64]	@ (800a04c <USBD_LL_Init+0x94>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a010:	4b0e      	ldr	r3, [pc, #56]	@ (800a04c <USBD_LL_Init+0x94>)
 800a012:	2200      	movs	r2, #0
 800a014:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a016:	480d      	ldr	r0, [pc, #52]	@ (800a04c <USBD_LL_Init+0x94>)
 800a018:	f7f8 fe6a 	bl	8002cf0 <HAL_PCD_Init>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a022:	f7f8 f8c7 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a026:	2180      	movs	r1, #128	@ 0x80
 800a028:	4808      	ldr	r0, [pc, #32]	@ (800a04c <USBD_LL_Init+0x94>)
 800a02a:	f7fa f896 	bl	800415a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a02e:	2240      	movs	r2, #64	@ 0x40
 800a030:	2100      	movs	r1, #0
 800a032:	4806      	ldr	r0, [pc, #24]	@ (800a04c <USBD_LL_Init+0x94>)
 800a034:	f7fa f84a 	bl	80040cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a038:	2280      	movs	r2, #128	@ 0x80
 800a03a:	2101      	movs	r1, #1
 800a03c:	4803      	ldr	r0, [pc, #12]	@ (800a04c <USBD_LL_Init+0x94>)
 800a03e:	f7fa f845 	bl	80040cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	2000188c 	.word	0x2000188c

0800a050 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a066:	4618      	mov	r0, r3
 800a068:	f7f8 ff51 	bl	8002f0e <HAL_PCD_Start>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 f942 	bl	800a2fc <USBD_Get_USB_Status>
 800a078:	4603      	mov	r3, r0
 800a07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	4608      	mov	r0, r1
 800a090:	4611      	mov	r1, r2
 800a092:	461a      	mov	r2, r3
 800a094:	4603      	mov	r3, r0
 800a096:	70fb      	strb	r3, [r7, #3]
 800a098:	460b      	mov	r3, r1
 800a09a:	70bb      	strb	r3, [r7, #2]
 800a09c:	4613      	mov	r3, r2
 800a09e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0ae:	78bb      	ldrb	r3, [r7, #2]
 800a0b0:	883a      	ldrh	r2, [r7, #0]
 800a0b2:	78f9      	ldrb	r1, [r7, #3]
 800a0b4:	f7f9 fc25 	bl	8003902 <HAL_PCD_EP_Open>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f91c 	bl	800a2fc <USBD_Get_USB_Status>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7f9 fc70 	bl	80039d6 <HAL_PCD_EP_Close>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f8fd 	bl	800a2fc <USBD_Get_USB_Status>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a106:	7bbb      	ldrb	r3, [r7, #14]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f9 fd28 	bl	8003b84 <HAL_PCD_EP_SetStall>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f8de 	bl	800a2fc <USBD_Get_USB_Status>
 800a140:	4603      	mov	r3, r0
 800a142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a144:	7bbb      	ldrb	r3, [r7, #14]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a168:	78fa      	ldrb	r2, [r7, #3]
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f9 fd6c 	bl	8003c4a <HAL_PCD_EP_ClrStall>
 800a172:	4603      	mov	r3, r0
 800a174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f8bf 	bl	800a2fc <USBD_Get_USB_Status>
 800a17e:	4603      	mov	r3, r0
 800a180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a182:	7bbb      	ldrb	r3, [r7, #14]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a19e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da0b      	bge.n	800a1c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1ae:	68f9      	ldr	r1, [r7, #12]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	3316      	adds	r3, #22
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	e00b      	b.n	800a1d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a1d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1fe:	78fa      	ldrb	r2, [r7, #3]
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7f9 fb59 	bl	80038ba <HAL_PCD_SetAddress>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f874 	bl	800a2fc <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a218:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b086      	sub	sp, #24
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
 800a22e:	460b      	mov	r3, r1
 800a230:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a240:	7af9      	ldrb	r1, [r7, #11]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	f7f9 fc63 	bl	8003b10 <HAL_PCD_EP_Transmit>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f853 	bl	800a2fc <USBD_Get_USB_Status>
 800a256:	4603      	mov	r3, r0
 800a258:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a25a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	603b      	str	r3, [r7, #0]
 800a270:	460b      	mov	r3, r1
 800a272:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a282:	7af9      	ldrb	r1, [r7, #11]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	f7f9 fbef 	bl	8003a6a <HAL_PCD_EP_Receive>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f832 	bl	800a2fc <USBD_Get_USB_Status>
 800a298:	4603      	mov	r3, r0
 800a29a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a29c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7f9 fc0f 	bl	8003ae0 <HAL_PCD_EP_GetRxCount>
 800a2c2:	4603      	mov	r3, r0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	@ (800a2e4 <USBD_static_malloc+0x18>)
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20001d70 	.word	0x20001d70

0800a2e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]

}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d817      	bhi.n	800a340 <USBD_Get_USB_Status+0x44>
 800a310:	a201      	add	r2, pc, #4	@ (adr r2, 800a318 <USBD_Get_USB_Status+0x1c>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a329 	.word	0x0800a329
 800a31c:	0800a32f 	.word	0x0800a32f
 800a320:	0800a335 	.word	0x0800a335
 800a324:	0800a33b 	.word	0x0800a33b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
    break;
 800a32c:	e00b      	b.n	800a346 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a32e:	2303      	movs	r3, #3
 800a330:	73fb      	strb	r3, [r7, #15]
    break;
 800a332:	e008      	b.n	800a346 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a334:	2301      	movs	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
    break;
 800a338:	e005      	b.n	800a346 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	73fb      	strb	r3, [r7, #15]
    break;
 800a33e:	e002      	b.n	800a346 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a340:	2303      	movs	r3, #3
 800a342:	73fb      	strb	r3, [r7, #15]
    break;
 800a344:	bf00      	nop
  }
  return usb_status;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <__assert_func>:
 800a354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a356:	4614      	mov	r4, r2
 800a358:	461a      	mov	r2, r3
 800a35a:	4b09      	ldr	r3, [pc, #36]	@ (800a380 <__assert_func+0x2c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4605      	mov	r5, r0
 800a360:	68d8      	ldr	r0, [r3, #12]
 800a362:	b14c      	cbz	r4, 800a378 <__assert_func+0x24>
 800a364:	4b07      	ldr	r3, [pc, #28]	@ (800a384 <__assert_func+0x30>)
 800a366:	9100      	str	r1, [sp, #0]
 800a368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a36c:	4906      	ldr	r1, [pc, #24]	@ (800a388 <__assert_func+0x34>)
 800a36e:	462b      	mov	r3, r5
 800a370:	f000 fdbe 	bl	800aef0 <fiprintf>
 800a374:	f000 febf 	bl	800b0f6 <abort>
 800a378:	4b04      	ldr	r3, [pc, #16]	@ (800a38c <__assert_func+0x38>)
 800a37a:	461c      	mov	r4, r3
 800a37c:	e7f3      	b.n	800a366 <__assert_func+0x12>
 800a37e:	bf00      	nop
 800a380:	20000108 	.word	0x20000108
 800a384:	0800cd78 	.word	0x0800cd78
 800a388:	0800cd85 	.word	0x0800cd85
 800a38c:	0800cdb3 	.word	0x0800cdb3

0800a390 <malloc>:
 800a390:	4b02      	ldr	r3, [pc, #8]	@ (800a39c <malloc+0xc>)
 800a392:	4601      	mov	r1, r0
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	f000 b825 	b.w	800a3e4 <_malloc_r>
 800a39a:	bf00      	nop
 800a39c:	20000108 	.word	0x20000108

0800a3a0 <sbrk_aligned>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a3e0 <sbrk_aligned+0x40>)
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6831      	ldr	r1, [r6, #0]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	b911      	cbnz	r1, 800a3b2 <sbrk_aligned+0x12>
 800a3ac:	f000 fe54 	bl	800b058 <_sbrk_r>
 800a3b0:	6030      	str	r0, [r6, #0]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 fe4f 	bl	800b058 <_sbrk_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d103      	bne.n	800a3c6 <sbrk_aligned+0x26>
 800a3be:	f04f 34ff 	mov.w	r4, #4294967295
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	bd70      	pop	{r4, r5, r6, pc}
 800a3c6:	1cc4      	adds	r4, r0, #3
 800a3c8:	f024 0403 	bic.w	r4, r4, #3
 800a3cc:	42a0      	cmp	r0, r4
 800a3ce:	d0f8      	beq.n	800a3c2 <sbrk_aligned+0x22>
 800a3d0:	1a21      	subs	r1, r4, r0
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f000 fe40 	bl	800b058 <_sbrk_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d1f2      	bne.n	800a3c2 <sbrk_aligned+0x22>
 800a3dc:	e7ef      	b.n	800a3be <sbrk_aligned+0x1e>
 800a3de:	bf00      	nop
 800a3e0:	20001f90 	.word	0x20001f90

0800a3e4 <_malloc_r>:
 800a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	1ccd      	adds	r5, r1, #3
 800a3ea:	f025 0503 	bic.w	r5, r5, #3
 800a3ee:	3508      	adds	r5, #8
 800a3f0:	2d0c      	cmp	r5, #12
 800a3f2:	bf38      	it	cc
 800a3f4:	250c      	movcc	r5, #12
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	db01      	blt.n	800a400 <_malloc_r+0x1c>
 800a3fc:	42a9      	cmp	r1, r5
 800a3fe:	d904      	bls.n	800a40a <_malloc_r+0x26>
 800a400:	230c      	movs	r3, #12
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	2000      	movs	r0, #0
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4e0 <_malloc_r+0xfc>
 800a40e:	f000 f869 	bl	800a4e4 <__malloc_lock>
 800a412:	f8d8 3000 	ldr.w	r3, [r8]
 800a416:	461c      	mov	r4, r3
 800a418:	bb44      	cbnz	r4, 800a46c <_malloc_r+0x88>
 800a41a:	4629      	mov	r1, r5
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff ffbf 	bl	800a3a0 <sbrk_aligned>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	4604      	mov	r4, r0
 800a426:	d158      	bne.n	800a4da <_malloc_r+0xf6>
 800a428:	f8d8 4000 	ldr.w	r4, [r8]
 800a42c:	4627      	mov	r7, r4
 800a42e:	2f00      	cmp	r7, #0
 800a430:	d143      	bne.n	800a4ba <_malloc_r+0xd6>
 800a432:	2c00      	cmp	r4, #0
 800a434:	d04b      	beq.n	800a4ce <_malloc_r+0xea>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	4639      	mov	r1, r7
 800a43a:	4630      	mov	r0, r6
 800a43c:	eb04 0903 	add.w	r9, r4, r3
 800a440:	f000 fe0a 	bl	800b058 <_sbrk_r>
 800a444:	4581      	cmp	r9, r0
 800a446:	d142      	bne.n	800a4ce <_malloc_r+0xea>
 800a448:	6821      	ldr	r1, [r4, #0]
 800a44a:	1a6d      	subs	r5, r5, r1
 800a44c:	4629      	mov	r1, r5
 800a44e:	4630      	mov	r0, r6
 800a450:	f7ff ffa6 	bl	800a3a0 <sbrk_aligned>
 800a454:	3001      	adds	r0, #1
 800a456:	d03a      	beq.n	800a4ce <_malloc_r+0xea>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	442b      	add	r3, r5
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	f8d8 3000 	ldr.w	r3, [r8]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	bb62      	cbnz	r2, 800a4c0 <_malloc_r+0xdc>
 800a466:	f8c8 7000 	str.w	r7, [r8]
 800a46a:	e00f      	b.n	800a48c <_malloc_r+0xa8>
 800a46c:	6822      	ldr	r2, [r4, #0]
 800a46e:	1b52      	subs	r2, r2, r5
 800a470:	d420      	bmi.n	800a4b4 <_malloc_r+0xd0>
 800a472:	2a0b      	cmp	r2, #11
 800a474:	d917      	bls.n	800a4a6 <_malloc_r+0xc2>
 800a476:	1961      	adds	r1, r4, r5
 800a478:	42a3      	cmp	r3, r4
 800a47a:	6025      	str	r5, [r4, #0]
 800a47c:	bf18      	it	ne
 800a47e:	6059      	strne	r1, [r3, #4]
 800a480:	6863      	ldr	r3, [r4, #4]
 800a482:	bf08      	it	eq
 800a484:	f8c8 1000 	streq.w	r1, [r8]
 800a488:	5162      	str	r2, [r4, r5]
 800a48a:	604b      	str	r3, [r1, #4]
 800a48c:	4630      	mov	r0, r6
 800a48e:	f000 f82f 	bl	800a4f0 <__malloc_unlock>
 800a492:	f104 000b 	add.w	r0, r4, #11
 800a496:	1d23      	adds	r3, r4, #4
 800a498:	f020 0007 	bic.w	r0, r0, #7
 800a49c:	1ac2      	subs	r2, r0, r3
 800a49e:	bf1c      	itt	ne
 800a4a0:	1a1b      	subne	r3, r3, r0
 800a4a2:	50a3      	strne	r3, [r4, r2]
 800a4a4:	e7af      	b.n	800a406 <_malloc_r+0x22>
 800a4a6:	6862      	ldr	r2, [r4, #4]
 800a4a8:	42a3      	cmp	r3, r4
 800a4aa:	bf0c      	ite	eq
 800a4ac:	f8c8 2000 	streq.w	r2, [r8]
 800a4b0:	605a      	strne	r2, [r3, #4]
 800a4b2:	e7eb      	b.n	800a48c <_malloc_r+0xa8>
 800a4b4:	4623      	mov	r3, r4
 800a4b6:	6864      	ldr	r4, [r4, #4]
 800a4b8:	e7ae      	b.n	800a418 <_malloc_r+0x34>
 800a4ba:	463c      	mov	r4, r7
 800a4bc:	687f      	ldr	r7, [r7, #4]
 800a4be:	e7b6      	b.n	800a42e <_malloc_r+0x4a>
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	d1fb      	bne.n	800a4c0 <_malloc_r+0xdc>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	6053      	str	r3, [r2, #4]
 800a4cc:	e7de      	b.n	800a48c <_malloc_r+0xa8>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 f80c 	bl	800a4f0 <__malloc_unlock>
 800a4d8:	e794      	b.n	800a404 <_malloc_r+0x20>
 800a4da:	6005      	str	r5, [r0, #0]
 800a4dc:	e7d6      	b.n	800a48c <_malloc_r+0xa8>
 800a4de:	bf00      	nop
 800a4e0:	20001f94 	.word	0x20001f94

0800a4e4 <__malloc_lock>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	@ (800a4ec <__malloc_lock+0x8>)
 800a4e6:	f000 be04 	b.w	800b0f2 <__retarget_lock_acquire_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	200020d8 	.word	0x200020d8

0800a4f0 <__malloc_unlock>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	@ (800a4f8 <__malloc_unlock+0x8>)
 800a4f2:	f000 bdff 	b.w	800b0f4 <__retarget_lock_release_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	200020d8 	.word	0x200020d8

0800a4fc <__cvt>:
 800a4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	ec57 6b10 	vmov	r6, r7, d0
 800a504:	2f00      	cmp	r7, #0
 800a506:	460c      	mov	r4, r1
 800a508:	4619      	mov	r1, r3
 800a50a:	463b      	mov	r3, r7
 800a50c:	bfbb      	ittet	lt
 800a50e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a512:	461f      	movlt	r7, r3
 800a514:	2300      	movge	r3, #0
 800a516:	232d      	movlt	r3, #45	@ 0x2d
 800a518:	700b      	strb	r3, [r1, #0]
 800a51a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a51c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a520:	4691      	mov	r9, r2
 800a522:	f023 0820 	bic.w	r8, r3, #32
 800a526:	bfbc      	itt	lt
 800a528:	4632      	movlt	r2, r6
 800a52a:	4616      	movlt	r6, r2
 800a52c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a530:	d005      	beq.n	800a53e <__cvt+0x42>
 800a532:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a536:	d100      	bne.n	800a53a <__cvt+0x3e>
 800a538:	3401      	adds	r4, #1
 800a53a:	2102      	movs	r1, #2
 800a53c:	e000      	b.n	800a540 <__cvt+0x44>
 800a53e:	2103      	movs	r1, #3
 800a540:	ab03      	add	r3, sp, #12
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	ab02      	add	r3, sp, #8
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	ec47 6b10 	vmov	d0, r6, r7
 800a54c:	4653      	mov	r3, sl
 800a54e:	4622      	mov	r2, r4
 800a550:	f000 fe62 	bl	800b218 <_dtoa_r>
 800a554:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a558:	4605      	mov	r5, r0
 800a55a:	d119      	bne.n	800a590 <__cvt+0x94>
 800a55c:	f019 0f01 	tst.w	r9, #1
 800a560:	d00e      	beq.n	800a580 <__cvt+0x84>
 800a562:	eb00 0904 	add.w	r9, r0, r4
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f6 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 800a572:	b108      	cbz	r0, 800a578 <__cvt+0x7c>
 800a574:	f8cd 900c 	str.w	r9, [sp, #12]
 800a578:	2230      	movs	r2, #48	@ 0x30
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	454b      	cmp	r3, r9
 800a57e:	d31e      	bcc.n	800a5be <__cvt+0xc2>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a584:	1b5b      	subs	r3, r3, r5
 800a586:	4628      	mov	r0, r5
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	b004      	add	sp, #16
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a594:	eb00 0904 	add.w	r9, r0, r4
 800a598:	d1e5      	bne.n	800a566 <__cvt+0x6a>
 800a59a:	7803      	ldrb	r3, [r0, #0]
 800a59c:	2b30      	cmp	r3, #48	@ 0x30
 800a59e:	d10a      	bne.n	800a5b6 <__cvt+0xba>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f7f6 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ac:	b918      	cbnz	r0, 800a5b6 <__cvt+0xba>
 800a5ae:	f1c4 0401 	rsb	r4, r4, #1
 800a5b2:	f8ca 4000 	str.w	r4, [sl]
 800a5b6:	f8da 3000 	ldr.w	r3, [sl]
 800a5ba:	4499      	add	r9, r3
 800a5bc:	e7d3      	b.n	800a566 <__cvt+0x6a>
 800a5be:	1c59      	adds	r1, r3, #1
 800a5c0:	9103      	str	r1, [sp, #12]
 800a5c2:	701a      	strb	r2, [r3, #0]
 800a5c4:	e7d9      	b.n	800a57a <__cvt+0x7e>

0800a5c6 <__exponent>:
 800a5c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	bfba      	itte	lt
 800a5cc:	4249      	neglt	r1, r1
 800a5ce:	232d      	movlt	r3, #45	@ 0x2d
 800a5d0:	232b      	movge	r3, #43	@ 0x2b
 800a5d2:	2909      	cmp	r1, #9
 800a5d4:	7002      	strb	r2, [r0, #0]
 800a5d6:	7043      	strb	r3, [r0, #1]
 800a5d8:	dd29      	ble.n	800a62e <__exponent+0x68>
 800a5da:	f10d 0307 	add.w	r3, sp, #7
 800a5de:	461d      	mov	r5, r3
 800a5e0:	270a      	movs	r7, #10
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5e8:	fb07 1416 	mls	r4, r7, r6, r1
 800a5ec:	3430      	adds	r4, #48	@ 0x30
 800a5ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	2c63      	cmp	r4, #99	@ 0x63
 800a5f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	dcf1      	bgt.n	800a5e2 <__exponent+0x1c>
 800a5fe:	3130      	adds	r1, #48	@ 0x30
 800a600:	1e94      	subs	r4, r2, #2
 800a602:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a606:	1c41      	adds	r1, r0, #1
 800a608:	4623      	mov	r3, r4
 800a60a:	42ab      	cmp	r3, r5
 800a60c:	d30a      	bcc.n	800a624 <__exponent+0x5e>
 800a60e:	f10d 0309 	add.w	r3, sp, #9
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	42ac      	cmp	r4, r5
 800a616:	bf88      	it	hi
 800a618:	2300      	movhi	r3, #0
 800a61a:	3302      	adds	r3, #2
 800a61c:	4403      	add	r3, r0
 800a61e:	1a18      	subs	r0, r3, r0
 800a620:	b003      	add	sp, #12
 800a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a624:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a628:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a62c:	e7ed      	b.n	800a60a <__exponent+0x44>
 800a62e:	2330      	movs	r3, #48	@ 0x30
 800a630:	3130      	adds	r1, #48	@ 0x30
 800a632:	7083      	strb	r3, [r0, #2]
 800a634:	70c1      	strb	r1, [r0, #3]
 800a636:	1d03      	adds	r3, r0, #4
 800a638:	e7f1      	b.n	800a61e <__exponent+0x58>
	...

0800a63c <_printf_float>:
 800a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	b08d      	sub	sp, #52	@ 0x34
 800a642:	460c      	mov	r4, r1
 800a644:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a648:	4616      	mov	r6, r2
 800a64a:	461f      	mov	r7, r3
 800a64c:	4605      	mov	r5, r0
 800a64e:	f000 fccb 	bl	800afe8 <_localeconv_r>
 800a652:	6803      	ldr	r3, [r0, #0]
 800a654:	9304      	str	r3, [sp, #16]
 800a656:	4618      	mov	r0, r3
 800a658:	f7f5 fe0a 	bl	8000270 <strlen>
 800a65c:	2300      	movs	r3, #0
 800a65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a660:	f8d8 3000 	ldr.w	r3, [r8]
 800a664:	9005      	str	r0, [sp, #20]
 800a666:	3307      	adds	r3, #7
 800a668:	f023 0307 	bic.w	r3, r3, #7
 800a66c:	f103 0208 	add.w	r2, r3, #8
 800a670:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a674:	f8d4 b000 	ldr.w	fp, [r4]
 800a678:	f8c8 2000 	str.w	r2, [r8]
 800a67c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a680:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a684:	9307      	str	r3, [sp, #28]
 800a686:	f8cd 8018 	str.w	r8, [sp, #24]
 800a68a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a692:	4b9c      	ldr	r3, [pc, #624]	@ (800a904 <_printf_float+0x2c8>)
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	f7f6 fa48 	bl	8000b2c <__aeabi_dcmpun>
 800a69c:	bb70      	cbnz	r0, 800a6fc <_printf_float+0xc0>
 800a69e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a2:	4b98      	ldr	r3, [pc, #608]	@ (800a904 <_printf_float+0x2c8>)
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	f7f6 fa22 	bl	8000af0 <__aeabi_dcmple>
 800a6ac:	bb30      	cbnz	r0, 800a6fc <_printf_float+0xc0>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f6 fa11 	bl	8000adc <__aeabi_dcmplt>
 800a6ba:	b110      	cbz	r0, 800a6c2 <_printf_float+0x86>
 800a6bc:	232d      	movs	r3, #45	@ 0x2d
 800a6be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6c2:	4a91      	ldr	r2, [pc, #580]	@ (800a908 <_printf_float+0x2cc>)
 800a6c4:	4b91      	ldr	r3, [pc, #580]	@ (800a90c <_printf_float+0x2d0>)
 800a6c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6ca:	bf8c      	ite	hi
 800a6cc:	4690      	movhi	r8, r2
 800a6ce:	4698      	movls	r8, r3
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	f02b 0304 	bic.w	r3, fp, #4
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	9700      	str	r7, [sp, #0]
 800a6e0:	4633      	mov	r3, r6
 800a6e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f9d2 	bl	800aa90 <_printf_common>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f040 808d 	bne.w	800a80c <_printf_float+0x1d0>
 800a6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f6:	b00d      	add	sp, #52	@ 0x34
 800a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f6 fa12 	bl	8000b2c <__aeabi_dcmpun>
 800a708:	b140      	cbz	r0, 800a71c <_printf_float+0xe0>
 800a70a:	464b      	mov	r3, r9
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfbc      	itt	lt
 800a710:	232d      	movlt	r3, #45	@ 0x2d
 800a712:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a716:	4a7e      	ldr	r2, [pc, #504]	@ (800a910 <_printf_float+0x2d4>)
 800a718:	4b7e      	ldr	r3, [pc, #504]	@ (800a914 <_printf_float+0x2d8>)
 800a71a:	e7d4      	b.n	800a6c6 <_printf_float+0x8a>
 800a71c:	6863      	ldr	r3, [r4, #4]
 800a71e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a722:	9206      	str	r2, [sp, #24]
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	d13b      	bne.n	800a7a0 <_printf_float+0x164>
 800a728:	2306      	movs	r3, #6
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a730:	2300      	movs	r3, #0
 800a732:	6022      	str	r2, [r4, #0]
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	ab0a      	add	r3, sp, #40	@ 0x28
 800a738:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a73c:	ab09      	add	r3, sp, #36	@ 0x24
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	6861      	ldr	r1, [r4, #4]
 800a742:	ec49 8b10 	vmov	d0, r8, r9
 800a746:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a74a:	4628      	mov	r0, r5
 800a74c:	f7ff fed6 	bl	800a4fc <__cvt>
 800a750:	9b06      	ldr	r3, [sp, #24]
 800a752:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a754:	2b47      	cmp	r3, #71	@ 0x47
 800a756:	4680      	mov	r8, r0
 800a758:	d129      	bne.n	800a7ae <_printf_float+0x172>
 800a75a:	1cc8      	adds	r0, r1, #3
 800a75c:	db02      	blt.n	800a764 <_printf_float+0x128>
 800a75e:	6863      	ldr	r3, [r4, #4]
 800a760:	4299      	cmp	r1, r3
 800a762:	dd41      	ble.n	800a7e8 <_printf_float+0x1ac>
 800a764:	f1aa 0a02 	sub.w	sl, sl, #2
 800a768:	fa5f fa8a 	uxtb.w	sl, sl
 800a76c:	3901      	subs	r1, #1
 800a76e:	4652      	mov	r2, sl
 800a770:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a774:	9109      	str	r1, [sp, #36]	@ 0x24
 800a776:	f7ff ff26 	bl	800a5c6 <__exponent>
 800a77a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a77c:	1813      	adds	r3, r2, r0
 800a77e:	2a01      	cmp	r2, #1
 800a780:	4681      	mov	r9, r0
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	dc02      	bgt.n	800a78c <_printf_float+0x150>
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	07d2      	lsls	r2, r2, #31
 800a78a:	d501      	bpl.n	800a790 <_printf_float+0x154>
 800a78c:	3301      	adds	r3, #1
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0a2      	beq.n	800a6de <_printf_float+0xa2>
 800a798:	232d      	movs	r3, #45	@ 0x2d
 800a79a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a79e:	e79e      	b.n	800a6de <_printf_float+0xa2>
 800a7a0:	9a06      	ldr	r2, [sp, #24]
 800a7a2:	2a47      	cmp	r2, #71	@ 0x47
 800a7a4:	d1c2      	bne.n	800a72c <_printf_float+0xf0>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1c0      	bne.n	800a72c <_printf_float+0xf0>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e7bd      	b.n	800a72a <_printf_float+0xee>
 800a7ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7b2:	d9db      	bls.n	800a76c <_printf_float+0x130>
 800a7b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7b8:	d118      	bne.n	800a7ec <_printf_float+0x1b0>
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	dd0b      	ble.n	800a7d8 <_printf_float+0x19c>
 800a7c0:	6121      	str	r1, [r4, #16]
 800a7c2:	b913      	cbnz	r3, 800a7ca <_printf_float+0x18e>
 800a7c4:	6822      	ldr	r2, [r4, #0]
 800a7c6:	07d0      	lsls	r0, r2, #31
 800a7c8:	d502      	bpl.n	800a7d0 <_printf_float+0x194>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	440b      	add	r3, r1
 800a7ce:	6123      	str	r3, [r4, #16]
 800a7d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7d2:	f04f 0900 	mov.w	r9, #0
 800a7d6:	e7db      	b.n	800a790 <_printf_float+0x154>
 800a7d8:	b913      	cbnz	r3, 800a7e0 <_printf_float+0x1a4>
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	07d2      	lsls	r2, r2, #31
 800a7de:	d501      	bpl.n	800a7e4 <_printf_float+0x1a8>
 800a7e0:	3302      	adds	r3, #2
 800a7e2:	e7f4      	b.n	800a7ce <_printf_float+0x192>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e7f2      	b.n	800a7ce <_printf_float+0x192>
 800a7e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	db05      	blt.n	800a7fe <_printf_float+0x1c2>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	6121      	str	r1, [r4, #16]
 800a7f6:	07d8      	lsls	r0, r3, #31
 800a7f8:	d5ea      	bpl.n	800a7d0 <_printf_float+0x194>
 800a7fa:	1c4b      	adds	r3, r1, #1
 800a7fc:	e7e7      	b.n	800a7ce <_printf_float+0x192>
 800a7fe:	2900      	cmp	r1, #0
 800a800:	bfd4      	ite	le
 800a802:	f1c1 0202 	rsble	r2, r1, #2
 800a806:	2201      	movgt	r2, #1
 800a808:	4413      	add	r3, r2
 800a80a:	e7e0      	b.n	800a7ce <_printf_float+0x192>
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	055a      	lsls	r2, r3, #21
 800a810:	d407      	bmi.n	800a822 <_printf_float+0x1e6>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	4642      	mov	r2, r8
 800a816:	4631      	mov	r1, r6
 800a818:	4628      	mov	r0, r5
 800a81a:	47b8      	blx	r7
 800a81c:	3001      	adds	r0, #1
 800a81e:	d12b      	bne.n	800a878 <_printf_float+0x23c>
 800a820:	e767      	b.n	800a6f2 <_printf_float+0xb6>
 800a822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a826:	f240 80dd 	bls.w	800a9e4 <_printf_float+0x3a8>
 800a82a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a82e:	2200      	movs	r2, #0
 800a830:	2300      	movs	r3, #0
 800a832:	f7f6 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 800a836:	2800      	cmp	r0, #0
 800a838:	d033      	beq.n	800a8a2 <_printf_float+0x266>
 800a83a:	4a37      	ldr	r2, [pc, #220]	@ (800a918 <_printf_float+0x2dc>)
 800a83c:	2301      	movs	r3, #1
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	47b8      	blx	r7
 800a844:	3001      	adds	r0, #1
 800a846:	f43f af54 	beq.w	800a6f2 <_printf_float+0xb6>
 800a84a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a84e:	4543      	cmp	r3, r8
 800a850:	db02      	blt.n	800a858 <_printf_float+0x21c>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	07d8      	lsls	r0, r3, #31
 800a856:	d50f      	bpl.n	800a878 <_printf_float+0x23c>
 800a858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85c:	4631      	mov	r1, r6
 800a85e:	4628      	mov	r0, r5
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	f43f af45 	beq.w	800a6f2 <_printf_float+0xb6>
 800a868:	f04f 0900 	mov.w	r9, #0
 800a86c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a870:	f104 0a1a 	add.w	sl, r4, #26
 800a874:	45c8      	cmp	r8, r9
 800a876:	dc09      	bgt.n	800a88c <_printf_float+0x250>
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	079b      	lsls	r3, r3, #30
 800a87c:	f100 8103 	bmi.w	800aa86 <_printf_float+0x44a>
 800a880:	68e0      	ldr	r0, [r4, #12]
 800a882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a884:	4298      	cmp	r0, r3
 800a886:	bfb8      	it	lt
 800a888:	4618      	movlt	r0, r3
 800a88a:	e734      	b.n	800a6f6 <_printf_float+0xba>
 800a88c:	2301      	movs	r3, #1
 800a88e:	4652      	mov	r2, sl
 800a890:	4631      	mov	r1, r6
 800a892:	4628      	mov	r0, r5
 800a894:	47b8      	blx	r7
 800a896:	3001      	adds	r0, #1
 800a898:	f43f af2b 	beq.w	800a6f2 <_printf_float+0xb6>
 800a89c:	f109 0901 	add.w	r9, r9, #1
 800a8a0:	e7e8      	b.n	800a874 <_printf_float+0x238>
 800a8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dc39      	bgt.n	800a91c <_printf_float+0x2e0>
 800a8a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a918 <_printf_float+0x2dc>)
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	47b8      	blx	r7
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	f43f af1d 	beq.w	800a6f2 <_printf_float+0xb6>
 800a8b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8bc:	ea59 0303 	orrs.w	r3, r9, r3
 800a8c0:	d102      	bne.n	800a8c8 <_printf_float+0x28c>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	07d9      	lsls	r1, r3, #31
 800a8c6:	d5d7      	bpl.n	800a878 <_printf_float+0x23c>
 800a8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af0d 	beq.w	800a6f2 <_printf_float+0xb6>
 800a8d8:	f04f 0a00 	mov.w	sl, #0
 800a8dc:	f104 0b1a 	add.w	fp, r4, #26
 800a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e2:	425b      	negs	r3, r3
 800a8e4:	4553      	cmp	r3, sl
 800a8e6:	dc01      	bgt.n	800a8ec <_printf_float+0x2b0>
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	e793      	b.n	800a814 <_printf_float+0x1d8>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	465a      	mov	r2, fp
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b8      	blx	r7
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f43f aefb 	beq.w	800a6f2 <_printf_float+0xb6>
 800a8fc:	f10a 0a01 	add.w	sl, sl, #1
 800a900:	e7ee      	b.n	800a8e0 <_printf_float+0x2a4>
 800a902:	bf00      	nop
 800a904:	7fefffff 	.word	0x7fefffff
 800a908:	0800cdb8 	.word	0x0800cdb8
 800a90c:	0800cdb4 	.word	0x0800cdb4
 800a910:	0800cdc0 	.word	0x0800cdc0
 800a914:	0800cdbc 	.word	0x0800cdbc
 800a918:	0800cdc4 	.word	0x0800cdc4
 800a91c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a91e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a922:	4553      	cmp	r3, sl
 800a924:	bfa8      	it	ge
 800a926:	4653      	movge	r3, sl
 800a928:	2b00      	cmp	r3, #0
 800a92a:	4699      	mov	r9, r3
 800a92c:	dc36      	bgt.n	800a99c <_printf_float+0x360>
 800a92e:	f04f 0b00 	mov.w	fp, #0
 800a932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a936:	f104 021a 	add.w	r2, r4, #26
 800a93a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a93c:	9306      	str	r3, [sp, #24]
 800a93e:	eba3 0309 	sub.w	r3, r3, r9
 800a942:	455b      	cmp	r3, fp
 800a944:	dc31      	bgt.n	800a9aa <_printf_float+0x36e>
 800a946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a948:	459a      	cmp	sl, r3
 800a94a:	dc3a      	bgt.n	800a9c2 <_printf_float+0x386>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	07da      	lsls	r2, r3, #31
 800a950:	d437      	bmi.n	800a9c2 <_printf_float+0x386>
 800a952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a954:	ebaa 0903 	sub.w	r9, sl, r3
 800a958:	9b06      	ldr	r3, [sp, #24]
 800a95a:	ebaa 0303 	sub.w	r3, sl, r3
 800a95e:	4599      	cmp	r9, r3
 800a960:	bfa8      	it	ge
 800a962:	4699      	movge	r9, r3
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	dc33      	bgt.n	800a9d2 <_printf_float+0x396>
 800a96a:	f04f 0800 	mov.w	r8, #0
 800a96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a972:	f104 0b1a 	add.w	fp, r4, #26
 800a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a978:	ebaa 0303 	sub.w	r3, sl, r3
 800a97c:	eba3 0309 	sub.w	r3, r3, r9
 800a980:	4543      	cmp	r3, r8
 800a982:	f77f af79 	ble.w	800a878 <_printf_float+0x23c>
 800a986:	2301      	movs	r3, #1
 800a988:	465a      	mov	r2, fp
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	47b8      	blx	r7
 800a990:	3001      	adds	r0, #1
 800a992:	f43f aeae 	beq.w	800a6f2 <_printf_float+0xb6>
 800a996:	f108 0801 	add.w	r8, r8, #1
 800a99a:	e7ec      	b.n	800a976 <_printf_float+0x33a>
 800a99c:	4642      	mov	r2, r8
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d1c2      	bne.n	800a92e <_printf_float+0x2f2>
 800a9a8:	e6a3      	b.n	800a6f2 <_printf_float+0xb6>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	9206      	str	r2, [sp, #24]
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	f43f ae9c 	beq.w	800a6f2 <_printf_float+0xb6>
 800a9ba:	9a06      	ldr	r2, [sp, #24]
 800a9bc:	f10b 0b01 	add.w	fp, fp, #1
 800a9c0:	e7bb      	b.n	800a93a <_printf_float+0x2fe>
 800a9c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d1c0      	bne.n	800a952 <_printf_float+0x316>
 800a9d0:	e68f      	b.n	800a6f2 <_printf_float+0xb6>
 800a9d2:	9a06      	ldr	r2, [sp, #24]
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4442      	add	r2, r8
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d1c3      	bne.n	800a96a <_printf_float+0x32e>
 800a9e2:	e686      	b.n	800a6f2 <_printf_float+0xb6>
 800a9e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9e8:	f1ba 0f01 	cmp.w	sl, #1
 800a9ec:	dc01      	bgt.n	800a9f2 <_printf_float+0x3b6>
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d536      	bpl.n	800aa60 <_printf_float+0x424>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b8      	blx	r7
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	f43f ae78 	beq.w	800a6f2 <_printf_float+0xb6>
 800aa02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f43f ae70 	beq.w	800a6f2 <_printf_float+0xb6>
 800aa12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa16:	2200      	movs	r2, #0
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa1e:	f7f6 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa22:	b9c0      	cbnz	r0, 800aa56 <_printf_float+0x41a>
 800aa24:	4653      	mov	r3, sl
 800aa26:	f108 0201 	add.w	r2, r8, #1
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b8      	blx	r7
 800aa30:	3001      	adds	r0, #1
 800aa32:	d10c      	bne.n	800aa4e <_printf_float+0x412>
 800aa34:	e65d      	b.n	800a6f2 <_printf_float+0xb6>
 800aa36:	2301      	movs	r3, #1
 800aa38:	465a      	mov	r2, fp
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b8      	blx	r7
 800aa40:	3001      	adds	r0, #1
 800aa42:	f43f ae56 	beq.w	800a6f2 <_printf_float+0xb6>
 800aa46:	f108 0801 	add.w	r8, r8, #1
 800aa4a:	45d0      	cmp	r8, sl
 800aa4c:	dbf3      	blt.n	800aa36 <_printf_float+0x3fa>
 800aa4e:	464b      	mov	r3, r9
 800aa50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa54:	e6df      	b.n	800a816 <_printf_float+0x1da>
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	f104 0b1a 	add.w	fp, r4, #26
 800aa5e:	e7f4      	b.n	800aa4a <_printf_float+0x40e>
 800aa60:	2301      	movs	r3, #1
 800aa62:	4642      	mov	r2, r8
 800aa64:	e7e1      	b.n	800aa2a <_printf_float+0x3ee>
 800aa66:	2301      	movs	r3, #1
 800aa68:	464a      	mov	r2, r9
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f ae3e 	beq.w	800a6f2 <_printf_float+0xb6>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	68e3      	ldr	r3, [r4, #12]
 800aa7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa7e:	1a5b      	subs	r3, r3, r1
 800aa80:	4543      	cmp	r3, r8
 800aa82:	dcf0      	bgt.n	800aa66 <_printf_float+0x42a>
 800aa84:	e6fc      	b.n	800a880 <_printf_float+0x244>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f104 0919 	add.w	r9, r4, #25
 800aa8e:	e7f4      	b.n	800aa7a <_printf_float+0x43e>

0800aa90 <_printf_common>:
 800aa90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	4616      	mov	r6, r2
 800aa96:	4698      	mov	r8, r3
 800aa98:	688a      	ldr	r2, [r1, #8]
 800aa9a:	690b      	ldr	r3, [r1, #16]
 800aa9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	bfb8      	it	lt
 800aaa4:	4613      	movlt	r3, r2
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aaac:	4607      	mov	r7, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	b10a      	cbz	r2, 800aab6 <_printf_common+0x26>
 800aab2:	3301      	adds	r3, #1
 800aab4:	6033      	str	r3, [r6, #0]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	0699      	lsls	r1, r3, #26
 800aaba:	bf42      	ittt	mi
 800aabc:	6833      	ldrmi	r3, [r6, #0]
 800aabe:	3302      	addmi	r3, #2
 800aac0:	6033      	strmi	r3, [r6, #0]
 800aac2:	6825      	ldr	r5, [r4, #0]
 800aac4:	f015 0506 	ands.w	r5, r5, #6
 800aac8:	d106      	bne.n	800aad8 <_printf_common+0x48>
 800aaca:	f104 0a19 	add.w	sl, r4, #25
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	6832      	ldr	r2, [r6, #0]
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	42ab      	cmp	r3, r5
 800aad6:	dc26      	bgt.n	800ab26 <_printf_common+0x96>
 800aad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aadc:	6822      	ldr	r2, [r4, #0]
 800aade:	3b00      	subs	r3, #0
 800aae0:	bf18      	it	ne
 800aae2:	2301      	movne	r3, #1
 800aae4:	0692      	lsls	r2, r2, #26
 800aae6:	d42b      	bmi.n	800ab40 <_printf_common+0xb0>
 800aae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aaec:	4641      	mov	r1, r8
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c8      	blx	r9
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d01e      	beq.n	800ab34 <_printf_common+0xa4>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	6922      	ldr	r2, [r4, #16]
 800aafa:	f003 0306 	and.w	r3, r3, #6
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	bf02      	ittt	eq
 800ab02:	68e5      	ldreq	r5, [r4, #12]
 800ab04:	6833      	ldreq	r3, [r6, #0]
 800ab06:	1aed      	subeq	r5, r5, r3
 800ab08:	68a3      	ldr	r3, [r4, #8]
 800ab0a:	bf0c      	ite	eq
 800ab0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab10:	2500      	movne	r5, #0
 800ab12:	4293      	cmp	r3, r2
 800ab14:	bfc4      	itt	gt
 800ab16:	1a9b      	subgt	r3, r3, r2
 800ab18:	18ed      	addgt	r5, r5, r3
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	341a      	adds	r4, #26
 800ab1e:	42b5      	cmp	r5, r6
 800ab20:	d11a      	bne.n	800ab58 <_printf_common+0xc8>
 800ab22:	2000      	movs	r0, #0
 800ab24:	e008      	b.n	800ab38 <_printf_common+0xa8>
 800ab26:	2301      	movs	r3, #1
 800ab28:	4652      	mov	r2, sl
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	47c8      	blx	r9
 800ab30:	3001      	adds	r0, #1
 800ab32:	d103      	bne.n	800ab3c <_printf_common+0xac>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	e7c6      	b.n	800aace <_printf_common+0x3e>
 800ab40:	18e1      	adds	r1, r4, r3
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	2030      	movs	r0, #48	@ 0x30
 800ab46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab4a:	4422      	add	r2, r4
 800ab4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab54:	3302      	adds	r3, #2
 800ab56:	e7c7      	b.n	800aae8 <_printf_common+0x58>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4641      	mov	r1, r8
 800ab5e:	4638      	mov	r0, r7
 800ab60:	47c8      	blx	r9
 800ab62:	3001      	adds	r0, #1
 800ab64:	d0e6      	beq.n	800ab34 <_printf_common+0xa4>
 800ab66:	3601      	adds	r6, #1
 800ab68:	e7d9      	b.n	800ab1e <_printf_common+0x8e>
	...

0800ab6c <_printf_i>:
 800ab6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	7e0f      	ldrb	r7, [r1, #24]
 800ab72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab74:	2f78      	cmp	r7, #120	@ 0x78
 800ab76:	4691      	mov	r9, r2
 800ab78:	4680      	mov	r8, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab82:	d807      	bhi.n	800ab94 <_printf_i+0x28>
 800ab84:	2f62      	cmp	r7, #98	@ 0x62
 800ab86:	d80a      	bhi.n	800ab9e <_printf_i+0x32>
 800ab88:	2f00      	cmp	r7, #0
 800ab8a:	f000 80d1 	beq.w	800ad30 <_printf_i+0x1c4>
 800ab8e:	2f58      	cmp	r7, #88	@ 0x58
 800ab90:	f000 80b8 	beq.w	800ad04 <_printf_i+0x198>
 800ab94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab9c:	e03a      	b.n	800ac14 <_printf_i+0xa8>
 800ab9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aba2:	2b15      	cmp	r3, #21
 800aba4:	d8f6      	bhi.n	800ab94 <_printf_i+0x28>
 800aba6:	a101      	add	r1, pc, #4	@ (adr r1, 800abac <_printf_i+0x40>)
 800aba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abac:	0800ac05 	.word	0x0800ac05
 800abb0:	0800ac19 	.word	0x0800ac19
 800abb4:	0800ab95 	.word	0x0800ab95
 800abb8:	0800ab95 	.word	0x0800ab95
 800abbc:	0800ab95 	.word	0x0800ab95
 800abc0:	0800ab95 	.word	0x0800ab95
 800abc4:	0800ac19 	.word	0x0800ac19
 800abc8:	0800ab95 	.word	0x0800ab95
 800abcc:	0800ab95 	.word	0x0800ab95
 800abd0:	0800ab95 	.word	0x0800ab95
 800abd4:	0800ab95 	.word	0x0800ab95
 800abd8:	0800ad17 	.word	0x0800ad17
 800abdc:	0800ac43 	.word	0x0800ac43
 800abe0:	0800acd1 	.word	0x0800acd1
 800abe4:	0800ab95 	.word	0x0800ab95
 800abe8:	0800ab95 	.word	0x0800ab95
 800abec:	0800ad39 	.word	0x0800ad39
 800abf0:	0800ab95 	.word	0x0800ab95
 800abf4:	0800ac43 	.word	0x0800ac43
 800abf8:	0800ab95 	.word	0x0800ab95
 800abfc:	0800ab95 	.word	0x0800ab95
 800ac00:	0800acd9 	.word	0x0800acd9
 800ac04:	6833      	ldr	r3, [r6, #0]
 800ac06:	1d1a      	adds	r2, r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6032      	str	r2, [r6, #0]
 800ac0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac14:	2301      	movs	r3, #1
 800ac16:	e09c      	b.n	800ad52 <_printf_i+0x1e6>
 800ac18:	6833      	ldr	r3, [r6, #0]
 800ac1a:	6820      	ldr	r0, [r4, #0]
 800ac1c:	1d19      	adds	r1, r3, #4
 800ac1e:	6031      	str	r1, [r6, #0]
 800ac20:	0606      	lsls	r6, r0, #24
 800ac22:	d501      	bpl.n	800ac28 <_printf_i+0xbc>
 800ac24:	681d      	ldr	r5, [r3, #0]
 800ac26:	e003      	b.n	800ac30 <_printf_i+0xc4>
 800ac28:	0645      	lsls	r5, r0, #25
 800ac2a:	d5fb      	bpl.n	800ac24 <_printf_i+0xb8>
 800ac2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac30:	2d00      	cmp	r5, #0
 800ac32:	da03      	bge.n	800ac3c <_printf_i+0xd0>
 800ac34:	232d      	movs	r3, #45	@ 0x2d
 800ac36:	426d      	negs	r5, r5
 800ac38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac3c:	4858      	ldr	r0, [pc, #352]	@ (800ada0 <_printf_i+0x234>)
 800ac3e:	230a      	movs	r3, #10
 800ac40:	e011      	b.n	800ac66 <_printf_i+0xfa>
 800ac42:	6821      	ldr	r1, [r4, #0]
 800ac44:	6833      	ldr	r3, [r6, #0]
 800ac46:	0608      	lsls	r0, r1, #24
 800ac48:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac4c:	d402      	bmi.n	800ac54 <_printf_i+0xe8>
 800ac4e:	0649      	lsls	r1, r1, #25
 800ac50:	bf48      	it	mi
 800ac52:	b2ad      	uxthmi	r5, r5
 800ac54:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac56:	4852      	ldr	r0, [pc, #328]	@ (800ada0 <_printf_i+0x234>)
 800ac58:	6033      	str	r3, [r6, #0]
 800ac5a:	bf14      	ite	ne
 800ac5c:	230a      	movne	r3, #10
 800ac5e:	2308      	moveq	r3, #8
 800ac60:	2100      	movs	r1, #0
 800ac62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac66:	6866      	ldr	r6, [r4, #4]
 800ac68:	60a6      	str	r6, [r4, #8]
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	db05      	blt.n	800ac7a <_printf_i+0x10e>
 800ac6e:	6821      	ldr	r1, [r4, #0]
 800ac70:	432e      	orrs	r6, r5
 800ac72:	f021 0104 	bic.w	r1, r1, #4
 800ac76:	6021      	str	r1, [r4, #0]
 800ac78:	d04b      	beq.n	800ad12 <_printf_i+0x1a6>
 800ac7a:	4616      	mov	r6, r2
 800ac7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac80:	fb03 5711 	mls	r7, r3, r1, r5
 800ac84:	5dc7      	ldrb	r7, [r0, r7]
 800ac86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac8a:	462f      	mov	r7, r5
 800ac8c:	42bb      	cmp	r3, r7
 800ac8e:	460d      	mov	r5, r1
 800ac90:	d9f4      	bls.n	800ac7c <_printf_i+0x110>
 800ac92:	2b08      	cmp	r3, #8
 800ac94:	d10b      	bne.n	800acae <_printf_i+0x142>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	07df      	lsls	r7, r3, #31
 800ac9a:	d508      	bpl.n	800acae <_printf_i+0x142>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	6861      	ldr	r1, [r4, #4]
 800aca0:	4299      	cmp	r1, r3
 800aca2:	bfde      	ittt	le
 800aca4:	2330      	movle	r3, #48	@ 0x30
 800aca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acae:	1b92      	subs	r2, r2, r6
 800acb0:	6122      	str	r2, [r4, #16]
 800acb2:	f8cd a000 	str.w	sl, [sp]
 800acb6:	464b      	mov	r3, r9
 800acb8:	aa03      	add	r2, sp, #12
 800acba:	4621      	mov	r1, r4
 800acbc:	4640      	mov	r0, r8
 800acbe:	f7ff fee7 	bl	800aa90 <_printf_common>
 800acc2:	3001      	adds	r0, #1
 800acc4:	d14a      	bne.n	800ad5c <_printf_i+0x1f0>
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	b004      	add	sp, #16
 800accc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	f043 0320 	orr.w	r3, r3, #32
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	4832      	ldr	r0, [pc, #200]	@ (800ada4 <_printf_i+0x238>)
 800acda:	2778      	movs	r7, #120	@ 0x78
 800acdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	6831      	ldr	r1, [r6, #0]
 800ace4:	061f      	lsls	r7, r3, #24
 800ace6:	f851 5b04 	ldr.w	r5, [r1], #4
 800acea:	d402      	bmi.n	800acf2 <_printf_i+0x186>
 800acec:	065f      	lsls	r7, r3, #25
 800acee:	bf48      	it	mi
 800acf0:	b2ad      	uxthmi	r5, r5
 800acf2:	6031      	str	r1, [r6, #0]
 800acf4:	07d9      	lsls	r1, r3, #31
 800acf6:	bf44      	itt	mi
 800acf8:	f043 0320 	orrmi.w	r3, r3, #32
 800acfc:	6023      	strmi	r3, [r4, #0]
 800acfe:	b11d      	cbz	r5, 800ad08 <_printf_i+0x19c>
 800ad00:	2310      	movs	r3, #16
 800ad02:	e7ad      	b.n	800ac60 <_printf_i+0xf4>
 800ad04:	4826      	ldr	r0, [pc, #152]	@ (800ada0 <_printf_i+0x234>)
 800ad06:	e7e9      	b.n	800acdc <_printf_i+0x170>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	f023 0320 	bic.w	r3, r3, #32
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	e7f6      	b.n	800ad00 <_printf_i+0x194>
 800ad12:	4616      	mov	r6, r2
 800ad14:	e7bd      	b.n	800ac92 <_printf_i+0x126>
 800ad16:	6833      	ldr	r3, [r6, #0]
 800ad18:	6825      	ldr	r5, [r4, #0]
 800ad1a:	6961      	ldr	r1, [r4, #20]
 800ad1c:	1d18      	adds	r0, r3, #4
 800ad1e:	6030      	str	r0, [r6, #0]
 800ad20:	062e      	lsls	r6, r5, #24
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	d501      	bpl.n	800ad2a <_printf_i+0x1be>
 800ad26:	6019      	str	r1, [r3, #0]
 800ad28:	e002      	b.n	800ad30 <_printf_i+0x1c4>
 800ad2a:	0668      	lsls	r0, r5, #25
 800ad2c:	d5fb      	bpl.n	800ad26 <_printf_i+0x1ba>
 800ad2e:	8019      	strh	r1, [r3, #0]
 800ad30:	2300      	movs	r3, #0
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	4616      	mov	r6, r2
 800ad36:	e7bc      	b.n	800acb2 <_printf_i+0x146>
 800ad38:	6833      	ldr	r3, [r6, #0]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	6032      	str	r2, [r6, #0]
 800ad3e:	681e      	ldr	r6, [r3, #0]
 800ad40:	6862      	ldr	r2, [r4, #4]
 800ad42:	2100      	movs	r1, #0
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7f5 fa43 	bl	80001d0 <memchr>
 800ad4a:	b108      	cbz	r0, 800ad50 <_printf_i+0x1e4>
 800ad4c:	1b80      	subs	r0, r0, r6
 800ad4e:	6060      	str	r0, [r4, #4]
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	2300      	movs	r3, #0
 800ad56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad5a:	e7aa      	b.n	800acb2 <_printf_i+0x146>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	4632      	mov	r2, r6
 800ad60:	4649      	mov	r1, r9
 800ad62:	4640      	mov	r0, r8
 800ad64:	47d0      	blx	sl
 800ad66:	3001      	adds	r0, #1
 800ad68:	d0ad      	beq.n	800acc6 <_printf_i+0x15a>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	079b      	lsls	r3, r3, #30
 800ad6e:	d413      	bmi.n	800ad98 <_printf_i+0x22c>
 800ad70:	68e0      	ldr	r0, [r4, #12]
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	4298      	cmp	r0, r3
 800ad76:	bfb8      	it	lt
 800ad78:	4618      	movlt	r0, r3
 800ad7a:	e7a6      	b.n	800acca <_printf_i+0x15e>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4632      	mov	r2, r6
 800ad80:	4649      	mov	r1, r9
 800ad82:	4640      	mov	r0, r8
 800ad84:	47d0      	blx	sl
 800ad86:	3001      	adds	r0, #1
 800ad88:	d09d      	beq.n	800acc6 <_printf_i+0x15a>
 800ad8a:	3501      	adds	r5, #1
 800ad8c:	68e3      	ldr	r3, [r4, #12]
 800ad8e:	9903      	ldr	r1, [sp, #12]
 800ad90:	1a5b      	subs	r3, r3, r1
 800ad92:	42ab      	cmp	r3, r5
 800ad94:	dcf2      	bgt.n	800ad7c <_printf_i+0x210>
 800ad96:	e7eb      	b.n	800ad70 <_printf_i+0x204>
 800ad98:	2500      	movs	r5, #0
 800ad9a:	f104 0619 	add.w	r6, r4, #25
 800ad9e:	e7f5      	b.n	800ad8c <_printf_i+0x220>
 800ada0:	0800cdc6 	.word	0x0800cdc6
 800ada4:	0800cdd7 	.word	0x0800cdd7

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	@ 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	@ 0x5c
 800adc6:	f000 f906 	bl	800afd6 <memset>
 800adca:	4b0d      	ldr	r3, [pc, #52]	@ (800ae00 <std+0x58>)
 800adcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800adce:	4b0d      	ldr	r3, [pc, #52]	@ (800ae04 <std+0x5c>)
 800add0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <std+0x60>)
 800add4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800add6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae0c <std+0x64>)
 800add8:	6323      	str	r3, [r4, #48]	@ 0x30
 800adda:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <std+0x68>)
 800addc:	6224      	str	r4, [r4, #32]
 800adde:	429c      	cmp	r4, r3
 800ade0:	d006      	beq.n	800adf0 <std+0x48>
 800ade2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ade6:	4294      	cmp	r4, r2
 800ade8:	d002      	beq.n	800adf0 <std+0x48>
 800adea:	33d0      	adds	r3, #208	@ 0xd0
 800adec:	429c      	cmp	r4, r3
 800adee:	d105      	bne.n	800adfc <std+0x54>
 800adf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf8:	f000 b97a 	b.w	800b0f0 <__retarget_lock_init_recursive>
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	bf00      	nop
 800ae00:	0800af51 	.word	0x0800af51
 800ae04:	0800af73 	.word	0x0800af73
 800ae08:	0800afab 	.word	0x0800afab
 800ae0c:	0800afcf 	.word	0x0800afcf
 800ae10:	20001f98 	.word	0x20001f98

0800ae14 <stdio_exit_handler>:
 800ae14:	4a02      	ldr	r2, [pc, #8]	@ (800ae20 <stdio_exit_handler+0xc>)
 800ae16:	4903      	ldr	r1, [pc, #12]	@ (800ae24 <stdio_exit_handler+0x10>)
 800ae18:	4803      	ldr	r0, [pc, #12]	@ (800ae28 <stdio_exit_handler+0x14>)
 800ae1a:	f000 b87b 	b.w	800af14 <_fwalk_sglue>
 800ae1e:	bf00      	nop
 800ae20:	200000fc 	.word	0x200000fc
 800ae24:	0800c8cd 	.word	0x0800c8cd
 800ae28:	2000010c 	.word	0x2000010c

0800ae2c <cleanup_stdio>:
 800ae2c:	6841      	ldr	r1, [r0, #4]
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <cleanup_stdio+0x34>)
 800ae30:	4299      	cmp	r1, r3
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	d001      	beq.n	800ae3c <cleanup_stdio+0x10>
 800ae38:	f001 fd48 	bl	800c8cc <_fflush_r>
 800ae3c:	68a1      	ldr	r1, [r4, #8]
 800ae3e:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <cleanup_stdio+0x38>)
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d002      	beq.n	800ae4a <cleanup_stdio+0x1e>
 800ae44:	4620      	mov	r0, r4
 800ae46:	f001 fd41 	bl	800c8cc <_fflush_r>
 800ae4a:	68e1      	ldr	r1, [r4, #12]
 800ae4c:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <cleanup_stdio+0x3c>)
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	d004      	beq.n	800ae5c <cleanup_stdio+0x30>
 800ae52:	4620      	mov	r0, r4
 800ae54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae58:	f001 bd38 	b.w	800c8cc <_fflush_r>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	bf00      	nop
 800ae60:	20001f98 	.word	0x20001f98
 800ae64:	20002000 	.word	0x20002000
 800ae68:	20002068 	.word	0x20002068

0800ae6c <global_stdio_init.part.0>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae9c <global_stdio_init.part.0+0x30>)
 800ae70:	4c0b      	ldr	r4, [pc, #44]	@ (800aea0 <global_stdio_init.part.0+0x34>)
 800ae72:	4a0c      	ldr	r2, [pc, #48]	@ (800aea4 <global_stdio_init.part.0+0x38>)
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	4620      	mov	r0, r4
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2104      	movs	r1, #4
 800ae7c:	f7ff ff94 	bl	800ada8 <std>
 800ae80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae84:	2201      	movs	r2, #1
 800ae86:	2109      	movs	r1, #9
 800ae88:	f7ff ff8e 	bl	800ada8 <std>
 800ae8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae90:	2202      	movs	r2, #2
 800ae92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae96:	2112      	movs	r1, #18
 800ae98:	f7ff bf86 	b.w	800ada8 <std>
 800ae9c:	200020d0 	.word	0x200020d0
 800aea0:	20001f98 	.word	0x20001f98
 800aea4:	0800ae15 	.word	0x0800ae15

0800aea8 <__sfp_lock_acquire>:
 800aea8:	4801      	ldr	r0, [pc, #4]	@ (800aeb0 <__sfp_lock_acquire+0x8>)
 800aeaa:	f000 b922 	b.w	800b0f2 <__retarget_lock_acquire_recursive>
 800aeae:	bf00      	nop
 800aeb0:	200020d9 	.word	0x200020d9

0800aeb4 <__sfp_lock_release>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	@ (800aebc <__sfp_lock_release+0x8>)
 800aeb6:	f000 b91d 	b.w	800b0f4 <__retarget_lock_release_recursive>
 800aeba:	bf00      	nop
 800aebc:	200020d9 	.word	0x200020d9

0800aec0 <__sinit>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
 800aec4:	f7ff fff0 	bl	800aea8 <__sfp_lock_acquire>
 800aec8:	6a23      	ldr	r3, [r4, #32]
 800aeca:	b11b      	cbz	r3, 800aed4 <__sinit+0x14>
 800aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed0:	f7ff bff0 	b.w	800aeb4 <__sfp_lock_release>
 800aed4:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <__sinit+0x28>)
 800aed6:	6223      	str	r3, [r4, #32]
 800aed8:	4b04      	ldr	r3, [pc, #16]	@ (800aeec <__sinit+0x2c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f5      	bne.n	800aecc <__sinit+0xc>
 800aee0:	f7ff ffc4 	bl	800ae6c <global_stdio_init.part.0>
 800aee4:	e7f2      	b.n	800aecc <__sinit+0xc>
 800aee6:	bf00      	nop
 800aee8:	0800ae2d 	.word	0x0800ae2d
 800aeec:	200020d0 	.word	0x200020d0

0800aef0 <fiprintf>:
 800aef0:	b40e      	push	{r1, r2, r3}
 800aef2:	b503      	push	{r0, r1, lr}
 800aef4:	4601      	mov	r1, r0
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	4805      	ldr	r0, [pc, #20]	@ (800af10 <fiprintf+0x20>)
 800aefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefe:	6800      	ldr	r0, [r0, #0]
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f001 fb47 	bl	800c594 <_vfiprintf_r>
 800af06:	b002      	add	sp, #8
 800af08:	f85d eb04 	ldr.w	lr, [sp], #4
 800af0c:	b003      	add	sp, #12
 800af0e:	4770      	bx	lr
 800af10:	20000108 	.word	0x20000108

0800af14 <_fwalk_sglue>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4607      	mov	r7, r0
 800af1a:	4688      	mov	r8, r1
 800af1c:	4614      	mov	r4, r2
 800af1e:	2600      	movs	r6, #0
 800af20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af24:	f1b9 0901 	subs.w	r9, r9, #1
 800af28:	d505      	bpl.n	800af36 <_fwalk_sglue+0x22>
 800af2a:	6824      	ldr	r4, [r4, #0]
 800af2c:	2c00      	cmp	r4, #0
 800af2e:	d1f7      	bne.n	800af20 <_fwalk_sglue+0xc>
 800af30:	4630      	mov	r0, r6
 800af32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af36:	89ab      	ldrh	r3, [r5, #12]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d907      	bls.n	800af4c <_fwalk_sglue+0x38>
 800af3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af40:	3301      	adds	r3, #1
 800af42:	d003      	beq.n	800af4c <_fwalk_sglue+0x38>
 800af44:	4629      	mov	r1, r5
 800af46:	4638      	mov	r0, r7
 800af48:	47c0      	blx	r8
 800af4a:	4306      	orrs	r6, r0
 800af4c:	3568      	adds	r5, #104	@ 0x68
 800af4e:	e7e9      	b.n	800af24 <_fwalk_sglue+0x10>

0800af50 <__sread>:
 800af50:	b510      	push	{r4, lr}
 800af52:	460c      	mov	r4, r1
 800af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af58:	f000 f86c 	bl	800b034 <_read_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	bfab      	itete	ge
 800af60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af62:	89a3      	ldrhlt	r3, [r4, #12]
 800af64:	181b      	addge	r3, r3, r0
 800af66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af6a:	bfac      	ite	ge
 800af6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af6e:	81a3      	strhlt	r3, [r4, #12]
 800af70:	bd10      	pop	{r4, pc}

0800af72 <__swrite>:
 800af72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af76:	461f      	mov	r7, r3
 800af78:	898b      	ldrh	r3, [r1, #12]
 800af7a:	05db      	lsls	r3, r3, #23
 800af7c:	4605      	mov	r5, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	4616      	mov	r6, r2
 800af82:	d505      	bpl.n	800af90 <__swrite+0x1e>
 800af84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af88:	2302      	movs	r3, #2
 800af8a:	2200      	movs	r2, #0
 800af8c:	f000 f840 	bl	800b010 <_lseek_r>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	4632      	mov	r2, r6
 800af9e:	463b      	mov	r3, r7
 800afa0:	4628      	mov	r0, r5
 800afa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa6:	f000 b867 	b.w	800b078 <_write_r>

0800afaa <__sseek>:
 800afaa:	b510      	push	{r4, lr}
 800afac:	460c      	mov	r4, r1
 800afae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb2:	f000 f82d 	bl	800b010 <_lseek_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	bf15      	itete	ne
 800afbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afc6:	81a3      	strheq	r3, [r4, #12]
 800afc8:	bf18      	it	ne
 800afca:	81a3      	strhne	r3, [r4, #12]
 800afcc:	bd10      	pop	{r4, pc}

0800afce <__sclose>:
 800afce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd2:	f000 b80d 	b.w	800aff0 <_close_r>

0800afd6 <memset>:
 800afd6:	4402      	add	r2, r0
 800afd8:	4603      	mov	r3, r0
 800afda:	4293      	cmp	r3, r2
 800afdc:	d100      	bne.n	800afe0 <memset+0xa>
 800afde:	4770      	bx	lr
 800afe0:	f803 1b01 	strb.w	r1, [r3], #1
 800afe4:	e7f9      	b.n	800afda <memset+0x4>
	...

0800afe8 <_localeconv_r>:
 800afe8:	4800      	ldr	r0, [pc, #0]	@ (800afec <_localeconv_r+0x4>)
 800afea:	4770      	bx	lr
 800afec:	20000248 	.word	0x20000248

0800aff0 <_close_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d06      	ldr	r5, [pc, #24]	@ (800b00c <_close_r+0x1c>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f7f7 fa8e 	bl	800251c <_close>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_close_r+0x1a>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_close_r+0x1a>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	200020d4 	.word	0x200020d4

0800b010 <_lseek_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	@ (800b030 <_lseek_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f7f7 faa3 	bl	800256a <_lseek>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_lseek_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_lseek_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200020d4 	.word	0x200020d4

0800b034 <_read_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	@ (800b054 <_read_r+0x20>)
 800b038:	4604      	mov	r4, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	602a      	str	r2, [r5, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f7 fa4d 	bl	80024e2 <_read>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_read_r+0x1e>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_read_r+0x1e>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200020d4 	.word	0x200020d4

0800b058 <_sbrk_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	@ (800b074 <_sbrk_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f7 fa8e 	bl	8002584 <_sbrk>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_sbrk_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_sbrk_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	200020d4 	.word	0x200020d4

0800b078 <_write_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d07      	ldr	r5, [pc, #28]	@ (800b098 <_write_r+0x20>)
 800b07c:	4604      	mov	r4, r0
 800b07e:	4608      	mov	r0, r1
 800b080:	4611      	mov	r1, r2
 800b082:	2200      	movs	r2, #0
 800b084:	602a      	str	r2, [r5, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f7f6 fcbc 	bl	8001a04 <_write>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_write_r+0x1e>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_write_r+0x1e>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	200020d4 	.word	0x200020d4

0800b09c <__errno>:
 800b09c:	4b01      	ldr	r3, [pc, #4]	@ (800b0a4 <__errno+0x8>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20000108 	.word	0x20000108

0800b0a8 <__libc_init_array>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e0 <__libc_init_array+0x38>)
 800b0ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b0e4 <__libc_init_array+0x3c>)
 800b0ae:	1b64      	subs	r4, r4, r5
 800b0b0:	10a4      	asrs	r4, r4, #2
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	42a6      	cmp	r6, r4
 800b0b6:	d109      	bne.n	800b0cc <__libc_init_array+0x24>
 800b0b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b0e8 <__libc_init_array+0x40>)
 800b0ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b0ec <__libc_init_array+0x44>)
 800b0bc:	f001 fdcc 	bl	800cc58 <_init>
 800b0c0:	1b64      	subs	r4, r4, r5
 800b0c2:	10a4      	asrs	r4, r4, #2
 800b0c4:	2600      	movs	r6, #0
 800b0c6:	42a6      	cmp	r6, r4
 800b0c8:	d105      	bne.n	800b0d6 <__libc_init_array+0x2e>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d0:	4798      	blx	r3
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	e7ee      	b.n	800b0b4 <__libc_init_array+0xc>
 800b0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0da:	4798      	blx	r3
 800b0dc:	3601      	adds	r6, #1
 800b0de:	e7f2      	b.n	800b0c6 <__libc_init_array+0x1e>
 800b0e0:	0800d0f4 	.word	0x0800d0f4
 800b0e4:	0800d0f4 	.word	0x0800d0f4
 800b0e8:	0800d0f4 	.word	0x0800d0f4
 800b0ec:	0800d0f8 	.word	0x0800d0f8

0800b0f0 <__retarget_lock_init_recursive>:
 800b0f0:	4770      	bx	lr

0800b0f2 <__retarget_lock_acquire_recursive>:
 800b0f2:	4770      	bx	lr

0800b0f4 <__retarget_lock_release_recursive>:
 800b0f4:	4770      	bx	lr

0800b0f6 <abort>:
 800b0f6:	b508      	push	{r3, lr}
 800b0f8:	2006      	movs	r0, #6
 800b0fa:	f001 fccb 	bl	800ca94 <raise>
 800b0fe:	2001      	movs	r0, #1
 800b100:	f7f7 f9e4 	bl	80024cc <_exit>

0800b104 <quorem>:
 800b104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	6903      	ldr	r3, [r0, #16]
 800b10a:	690c      	ldr	r4, [r1, #16]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	4607      	mov	r7, r0
 800b110:	db7e      	blt.n	800b210 <quorem+0x10c>
 800b112:	3c01      	subs	r4, #1
 800b114:	f101 0814 	add.w	r8, r1, #20
 800b118:	00a3      	lsls	r3, r4, #2
 800b11a:	f100 0514 	add.w	r5, r0, #20
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b12a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b12e:	3301      	adds	r3, #1
 800b130:	429a      	cmp	r2, r3
 800b132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b136:	fbb2 f6f3 	udiv	r6, r2, r3
 800b13a:	d32e      	bcc.n	800b19a <quorem+0x96>
 800b13c:	f04f 0a00 	mov.w	sl, #0
 800b140:	46c4      	mov	ip, r8
 800b142:	46ae      	mov	lr, r5
 800b144:	46d3      	mov	fp, sl
 800b146:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b14a:	b298      	uxth	r0, r3
 800b14c:	fb06 a000 	mla	r0, r6, r0, sl
 800b150:	0c02      	lsrs	r2, r0, #16
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	fb06 2303 	mla	r3, r6, r3, r2
 800b158:	f8de 2000 	ldr.w	r2, [lr]
 800b15c:	b280      	uxth	r0, r0
 800b15e:	b292      	uxth	r2, r2
 800b160:	1a12      	subs	r2, r2, r0
 800b162:	445a      	add	r2, fp
 800b164:	f8de 0000 	ldr.w	r0, [lr]
 800b168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b172:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b176:	b292      	uxth	r2, r2
 800b178:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b17c:	45e1      	cmp	r9, ip
 800b17e:	f84e 2b04 	str.w	r2, [lr], #4
 800b182:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b186:	d2de      	bcs.n	800b146 <quorem+0x42>
 800b188:	9b00      	ldr	r3, [sp, #0]
 800b18a:	58eb      	ldr	r3, [r5, r3]
 800b18c:	b92b      	cbnz	r3, 800b19a <quorem+0x96>
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	3b04      	subs	r3, #4
 800b192:	429d      	cmp	r5, r3
 800b194:	461a      	mov	r2, r3
 800b196:	d32f      	bcc.n	800b1f8 <quorem+0xf4>
 800b198:	613c      	str	r4, [r7, #16]
 800b19a:	4638      	mov	r0, r7
 800b19c:	f001 f8c8 	bl	800c330 <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	db25      	blt.n	800b1f0 <quorem+0xec>
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1ac:	f8d1 c000 	ldr.w	ip, [r1]
 800b1b0:	fa1f fe82 	uxth.w	lr, r2
 800b1b4:	fa1f f38c 	uxth.w	r3, ip
 800b1b8:	eba3 030e 	sub.w	r3, r3, lr
 800b1bc:	4403      	add	r3, r0
 800b1be:	0c12      	lsrs	r2, r2, #16
 800b1c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ce:	45c1      	cmp	r9, r8
 800b1d0:	f841 3b04 	str.w	r3, [r1], #4
 800b1d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1d8:	d2e6      	bcs.n	800b1a8 <quorem+0xa4>
 800b1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e2:	b922      	cbnz	r2, 800b1ee <quorem+0xea>
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	d30b      	bcc.n	800b204 <quorem+0x100>
 800b1ec:	613c      	str	r4, [r7, #16]
 800b1ee:	3601      	adds	r6, #1
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	b003      	add	sp, #12
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	6812      	ldr	r2, [r2, #0]
 800b1fa:	3b04      	subs	r3, #4
 800b1fc:	2a00      	cmp	r2, #0
 800b1fe:	d1cb      	bne.n	800b198 <quorem+0x94>
 800b200:	3c01      	subs	r4, #1
 800b202:	e7c6      	b.n	800b192 <quorem+0x8e>
 800b204:	6812      	ldr	r2, [r2, #0]
 800b206:	3b04      	subs	r3, #4
 800b208:	2a00      	cmp	r2, #0
 800b20a:	d1ef      	bne.n	800b1ec <quorem+0xe8>
 800b20c:	3c01      	subs	r4, #1
 800b20e:	e7ea      	b.n	800b1e6 <quorem+0xe2>
 800b210:	2000      	movs	r0, #0
 800b212:	e7ee      	b.n	800b1f2 <quorem+0xee>
 800b214:	0000      	movs	r0, r0
	...

0800b218 <_dtoa_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	69c7      	ldr	r7, [r0, #28]
 800b21e:	b097      	sub	sp, #92	@ 0x5c
 800b220:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b224:	ec55 4b10 	vmov	r4, r5, d0
 800b228:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b22a:	9107      	str	r1, [sp, #28]
 800b22c:	4681      	mov	r9, r0
 800b22e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b230:	9311      	str	r3, [sp, #68]	@ 0x44
 800b232:	b97f      	cbnz	r7, 800b254 <_dtoa_r+0x3c>
 800b234:	2010      	movs	r0, #16
 800b236:	f7ff f8ab 	bl	800a390 <malloc>
 800b23a:	4602      	mov	r2, r0
 800b23c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b240:	b920      	cbnz	r0, 800b24c <_dtoa_r+0x34>
 800b242:	4ba9      	ldr	r3, [pc, #676]	@ (800b4e8 <_dtoa_r+0x2d0>)
 800b244:	21ef      	movs	r1, #239	@ 0xef
 800b246:	48a9      	ldr	r0, [pc, #676]	@ (800b4ec <_dtoa_r+0x2d4>)
 800b248:	f7ff f884 	bl	800a354 <__assert_func>
 800b24c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b250:	6007      	str	r7, [r0, #0]
 800b252:	60c7      	str	r7, [r0, #12]
 800b254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	b159      	cbz	r1, 800b274 <_dtoa_r+0x5c>
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	604a      	str	r2, [r1, #4]
 800b260:	2301      	movs	r3, #1
 800b262:	4093      	lsls	r3, r2
 800b264:	608b      	str	r3, [r1, #8]
 800b266:	4648      	mov	r0, r9
 800b268:	f000 fe30 	bl	800becc <_Bfree>
 800b26c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	1e2b      	subs	r3, r5, #0
 800b276:	bfb9      	ittee	lt
 800b278:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b27c:	9305      	strlt	r3, [sp, #20]
 800b27e:	2300      	movge	r3, #0
 800b280:	6033      	strge	r3, [r6, #0]
 800b282:	9f05      	ldr	r7, [sp, #20]
 800b284:	4b9a      	ldr	r3, [pc, #616]	@ (800b4f0 <_dtoa_r+0x2d8>)
 800b286:	bfbc      	itt	lt
 800b288:	2201      	movlt	r2, #1
 800b28a:	6032      	strlt	r2, [r6, #0]
 800b28c:	43bb      	bics	r3, r7
 800b28e:	d112      	bne.n	800b2b6 <_dtoa_r+0x9e>
 800b290:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b292:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b29c:	4323      	orrs	r3, r4
 800b29e:	f000 855a 	beq.w	800bd56 <_dtoa_r+0xb3e>
 800b2a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b504 <_dtoa_r+0x2ec>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 855c 	beq.w	800bd66 <_dtoa_r+0xb4e>
 800b2ae:	f10a 0303 	add.w	r3, sl, #3
 800b2b2:	f000 bd56 	b.w	800bd62 <_dtoa_r+0xb4a>
 800b2b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	ec51 0b17 	vmov	r0, r1, d7
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b2c6:	f7f5 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	b158      	cbz	r0, 800b2e6 <_dtoa_r+0xce>
 800b2ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2d6:	b113      	cbz	r3, 800b2de <_dtoa_r+0xc6>
 800b2d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2da:	4b86      	ldr	r3, [pc, #536]	@ (800b4f4 <_dtoa_r+0x2dc>)
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b508 <_dtoa_r+0x2f0>
 800b2e2:	f000 bd40 	b.w	800bd66 <_dtoa_r+0xb4e>
 800b2e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b2ea:	aa14      	add	r2, sp, #80	@ 0x50
 800b2ec:	a915      	add	r1, sp, #84	@ 0x54
 800b2ee:	4648      	mov	r0, r9
 800b2f0:	f001 f8ce 	bl	800c490 <__d2b>
 800b2f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2f8:	9002      	str	r0, [sp, #8]
 800b2fa:	2e00      	cmp	r6, #0
 800b2fc:	d078      	beq.n	800b3f0 <_dtoa_r+0x1d8>
 800b2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b300:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b30c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b310:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b314:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b318:	4619      	mov	r1, r3
 800b31a:	2200      	movs	r2, #0
 800b31c:	4b76      	ldr	r3, [pc, #472]	@ (800b4f8 <_dtoa_r+0x2e0>)
 800b31e:	f7f4 ffb3 	bl	8000288 <__aeabi_dsub>
 800b322:	a36b      	add	r3, pc, #428	@ (adr r3, 800b4d0 <_dtoa_r+0x2b8>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b4d8 <_dtoa_r+0x2c0>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f7f4 ffab 	bl	800028c <__adddf3>
 800b336:	4604      	mov	r4, r0
 800b338:	4630      	mov	r0, r6
 800b33a:	460d      	mov	r5, r1
 800b33c:	f7f5 f8f2 	bl	8000524 <__aeabi_i2d>
 800b340:	a367      	add	r3, pc, #412	@ (adr r3, 800b4e0 <_dtoa_r+0x2c8>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f7f5 f957 	bl	80005f8 <__aeabi_dmul>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f4 ff9b 	bl	800028c <__adddf3>
 800b356:	4604      	mov	r4, r0
 800b358:	460d      	mov	r5, r1
 800b35a:	f7f5 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800b35e:	2200      	movs	r2, #0
 800b360:	4607      	mov	r7, r0
 800b362:	2300      	movs	r3, #0
 800b364:	4620      	mov	r0, r4
 800b366:	4629      	mov	r1, r5
 800b368:	f7f5 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800b36c:	b140      	cbz	r0, 800b380 <_dtoa_r+0x168>
 800b36e:	4638      	mov	r0, r7
 800b370:	f7f5 f8d8 	bl	8000524 <__aeabi_i2d>
 800b374:	4622      	mov	r2, r4
 800b376:	462b      	mov	r3, r5
 800b378:	f7f5 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b37c:	b900      	cbnz	r0, 800b380 <_dtoa_r+0x168>
 800b37e:	3f01      	subs	r7, #1
 800b380:	2f16      	cmp	r7, #22
 800b382:	d852      	bhi.n	800b42a <_dtoa_r+0x212>
 800b384:	4b5d      	ldr	r3, [pc, #372]	@ (800b4fc <_dtoa_r+0x2e4>)
 800b386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b392:	f7f5 fba3 	bl	8000adc <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	d049      	beq.n	800b42e <_dtoa_r+0x216>
 800b39a:	3f01      	subs	r7, #1
 800b39c:	2300      	movs	r3, #0
 800b39e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3a2:	1b9b      	subs	r3, r3, r6
 800b3a4:	1e5a      	subs	r2, r3, #1
 800b3a6:	bf45      	ittet	mi
 800b3a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b3ac:	9300      	strmi	r3, [sp, #0]
 800b3ae:	2300      	movpl	r3, #0
 800b3b0:	2300      	movmi	r3, #0
 800b3b2:	9206      	str	r2, [sp, #24]
 800b3b4:	bf54      	ite	pl
 800b3b6:	9300      	strpl	r3, [sp, #0]
 800b3b8:	9306      	strmi	r3, [sp, #24]
 800b3ba:	2f00      	cmp	r7, #0
 800b3bc:	db39      	blt.n	800b432 <_dtoa_r+0x21a>
 800b3be:	9b06      	ldr	r3, [sp, #24]
 800b3c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b3c2:	443b      	add	r3, r7
 800b3c4:	9306      	str	r3, [sp, #24]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9308      	str	r3, [sp, #32]
 800b3ca:	9b07      	ldr	r3, [sp, #28]
 800b3cc:	2b09      	cmp	r3, #9
 800b3ce:	d863      	bhi.n	800b498 <_dtoa_r+0x280>
 800b3d0:	2b05      	cmp	r3, #5
 800b3d2:	bfc4      	itt	gt
 800b3d4:	3b04      	subgt	r3, #4
 800b3d6:	9307      	strgt	r3, [sp, #28]
 800b3d8:	9b07      	ldr	r3, [sp, #28]
 800b3da:	f1a3 0302 	sub.w	r3, r3, #2
 800b3de:	bfcc      	ite	gt
 800b3e0:	2400      	movgt	r4, #0
 800b3e2:	2401      	movle	r4, #1
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d863      	bhi.n	800b4b0 <_dtoa_r+0x298>
 800b3e8:	e8df f003 	tbb	[pc, r3]
 800b3ec:	2b375452 	.word	0x2b375452
 800b3f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b3f4:	441e      	add	r6, r3
 800b3f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	bfc1      	itttt	gt
 800b3fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b402:	409f      	lslgt	r7, r3
 800b404:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b408:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b40c:	bfd6      	itet	le
 800b40e:	f1c3 0320 	rsble	r3, r3, #32
 800b412:	ea47 0003 	orrgt.w	r0, r7, r3
 800b416:	fa04 f003 	lslle.w	r0, r4, r3
 800b41a:	f7f5 f873 	bl	8000504 <__aeabi_ui2d>
 800b41e:	2201      	movs	r2, #1
 800b420:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b424:	3e01      	subs	r6, #1
 800b426:	9212      	str	r2, [sp, #72]	@ 0x48
 800b428:	e776      	b.n	800b318 <_dtoa_r+0x100>
 800b42a:	2301      	movs	r3, #1
 800b42c:	e7b7      	b.n	800b39e <_dtoa_r+0x186>
 800b42e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b430:	e7b6      	b.n	800b3a0 <_dtoa_r+0x188>
 800b432:	9b00      	ldr	r3, [sp, #0]
 800b434:	1bdb      	subs	r3, r3, r7
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	427b      	negs	r3, r7
 800b43a:	9308      	str	r3, [sp, #32]
 800b43c:	2300      	movs	r3, #0
 800b43e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b440:	e7c3      	b.n	800b3ca <_dtoa_r+0x1b2>
 800b442:	2301      	movs	r3, #1
 800b444:	9309      	str	r3, [sp, #36]	@ 0x24
 800b446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b448:	eb07 0b03 	add.w	fp, r7, r3
 800b44c:	f10b 0301 	add.w	r3, fp, #1
 800b450:	2b01      	cmp	r3, #1
 800b452:	9303      	str	r3, [sp, #12]
 800b454:	bfb8      	it	lt
 800b456:	2301      	movlt	r3, #1
 800b458:	e006      	b.n	800b468 <_dtoa_r+0x250>
 800b45a:	2301      	movs	r3, #1
 800b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b460:	2b00      	cmp	r3, #0
 800b462:	dd28      	ble.n	800b4b6 <_dtoa_r+0x29e>
 800b464:	469b      	mov	fp, r3
 800b466:	9303      	str	r3, [sp, #12]
 800b468:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b46c:	2100      	movs	r1, #0
 800b46e:	2204      	movs	r2, #4
 800b470:	f102 0514 	add.w	r5, r2, #20
 800b474:	429d      	cmp	r5, r3
 800b476:	d926      	bls.n	800b4c6 <_dtoa_r+0x2ae>
 800b478:	6041      	str	r1, [r0, #4]
 800b47a:	4648      	mov	r0, r9
 800b47c:	f000 fce6 	bl	800be4c <_Balloc>
 800b480:	4682      	mov	sl, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d142      	bne.n	800b50c <_dtoa_r+0x2f4>
 800b486:	4b1e      	ldr	r3, [pc, #120]	@ (800b500 <_dtoa_r+0x2e8>)
 800b488:	4602      	mov	r2, r0
 800b48a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b48e:	e6da      	b.n	800b246 <_dtoa_r+0x2e>
 800b490:	2300      	movs	r3, #0
 800b492:	e7e3      	b.n	800b45c <_dtoa_r+0x244>
 800b494:	2300      	movs	r3, #0
 800b496:	e7d5      	b.n	800b444 <_dtoa_r+0x22c>
 800b498:	2401      	movs	r4, #1
 800b49a:	2300      	movs	r3, #0
 800b49c:	9307      	str	r3, [sp, #28]
 800b49e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b4a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b4aa:	2312      	movs	r3, #18
 800b4ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b4ae:	e7db      	b.n	800b468 <_dtoa_r+0x250>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b4:	e7f4      	b.n	800b4a0 <_dtoa_r+0x288>
 800b4b6:	f04f 0b01 	mov.w	fp, #1
 800b4ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b4be:	465b      	mov	r3, fp
 800b4c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b4c4:	e7d0      	b.n	800b468 <_dtoa_r+0x250>
 800b4c6:	3101      	adds	r1, #1
 800b4c8:	0052      	lsls	r2, r2, #1
 800b4ca:	e7d1      	b.n	800b470 <_dtoa_r+0x258>
 800b4cc:	f3af 8000 	nop.w
 800b4d0:	636f4361 	.word	0x636f4361
 800b4d4:	3fd287a7 	.word	0x3fd287a7
 800b4d8:	8b60c8b3 	.word	0x8b60c8b3
 800b4dc:	3fc68a28 	.word	0x3fc68a28
 800b4e0:	509f79fb 	.word	0x509f79fb
 800b4e4:	3fd34413 	.word	0x3fd34413
 800b4e8:	0800cdf5 	.word	0x0800cdf5
 800b4ec:	0800ce0c 	.word	0x0800ce0c
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	0800cdc5 	.word	0x0800cdc5
 800b4f8:	3ff80000 	.word	0x3ff80000
 800b4fc:	0800cf20 	.word	0x0800cf20
 800b500:	0800ce64 	.word	0x0800ce64
 800b504:	0800cdf1 	.word	0x0800cdf1
 800b508:	0800cdc4 	.word	0x0800cdc4
 800b50c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b510:	6018      	str	r0, [r3, #0]
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	2b0e      	cmp	r3, #14
 800b516:	f200 80a1 	bhi.w	800b65c <_dtoa_r+0x444>
 800b51a:	2c00      	cmp	r4, #0
 800b51c:	f000 809e 	beq.w	800b65c <_dtoa_r+0x444>
 800b520:	2f00      	cmp	r7, #0
 800b522:	dd33      	ble.n	800b58c <_dtoa_r+0x374>
 800b524:	4b9c      	ldr	r3, [pc, #624]	@ (800b798 <_dtoa_r+0x580>)
 800b526:	f007 020f 	and.w	r2, r7, #15
 800b52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b52e:	ed93 7b00 	vldr	d7, [r3]
 800b532:	05f8      	lsls	r0, r7, #23
 800b534:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b538:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b53c:	d516      	bpl.n	800b56c <_dtoa_r+0x354>
 800b53e:	4b97      	ldr	r3, [pc, #604]	@ (800b79c <_dtoa_r+0x584>)
 800b540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b548:	f7f5 f980 	bl	800084c <__aeabi_ddiv>
 800b54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b550:	f004 040f 	and.w	r4, r4, #15
 800b554:	2603      	movs	r6, #3
 800b556:	4d91      	ldr	r5, [pc, #580]	@ (800b79c <_dtoa_r+0x584>)
 800b558:	b954      	cbnz	r4, 800b570 <_dtoa_r+0x358>
 800b55a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b562:	f7f5 f973 	bl	800084c <__aeabi_ddiv>
 800b566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b56a:	e028      	b.n	800b5be <_dtoa_r+0x3a6>
 800b56c:	2602      	movs	r6, #2
 800b56e:	e7f2      	b.n	800b556 <_dtoa_r+0x33e>
 800b570:	07e1      	lsls	r1, r4, #31
 800b572:	d508      	bpl.n	800b586 <_dtoa_r+0x36e>
 800b574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b578:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b584:	3601      	adds	r6, #1
 800b586:	1064      	asrs	r4, r4, #1
 800b588:	3508      	adds	r5, #8
 800b58a:	e7e5      	b.n	800b558 <_dtoa_r+0x340>
 800b58c:	f000 80af 	beq.w	800b6ee <_dtoa_r+0x4d6>
 800b590:	427c      	negs	r4, r7
 800b592:	4b81      	ldr	r3, [pc, #516]	@ (800b798 <_dtoa_r+0x580>)
 800b594:	4d81      	ldr	r5, [pc, #516]	@ (800b79c <_dtoa_r+0x584>)
 800b596:	f004 020f 	and.w	r2, r4, #15
 800b59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5a6:	f7f5 f827 	bl	80005f8 <__aeabi_dmul>
 800b5aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5ae:	1124      	asrs	r4, r4, #4
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	2602      	movs	r6, #2
 800b5b4:	2c00      	cmp	r4, #0
 800b5b6:	f040 808f 	bne.w	800b6d8 <_dtoa_r+0x4c0>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1d3      	bne.n	800b566 <_dtoa_r+0x34e>
 800b5be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8094 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5ca:	4b75      	ldr	r3, [pc, #468]	@ (800b7a0 <_dtoa_r+0x588>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f5 fa83 	bl	8000adc <__aeabi_dcmplt>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f000 808b 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 8087 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5e4:	f1bb 0f00 	cmp.w	fp, #0
 800b5e8:	dd34      	ble.n	800b654 <_dtoa_r+0x43c>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b7a4 <_dtoa_r+0x58c>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f5 f801 	bl	80005f8 <__aeabi_dmul>
 800b5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b5fe:	3601      	adds	r6, #1
 800b600:	465c      	mov	r4, fp
 800b602:	4630      	mov	r0, r6
 800b604:	f7f4 ff8e 	bl	8000524 <__aeabi_i2d>
 800b608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	4b65      	ldr	r3, [pc, #404]	@ (800b7a8 <_dtoa_r+0x590>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f4 fe3a 	bl	800028c <__adddf3>
 800b618:	4605      	mov	r5, r0
 800b61a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b61e:	2c00      	cmp	r4, #0
 800b620:	d16a      	bne.n	800b6f8 <_dtoa_r+0x4e0>
 800b622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b626:	4b61      	ldr	r3, [pc, #388]	@ (800b7ac <_dtoa_r+0x594>)
 800b628:	2200      	movs	r2, #0
 800b62a:	f7f4 fe2d 	bl	8000288 <__aeabi_dsub>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b636:	462a      	mov	r2, r5
 800b638:	4633      	mov	r3, r6
 800b63a:	f7f5 fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	f040 8298 	bne.w	800bb74 <_dtoa_r+0x95c>
 800b644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b648:	462a      	mov	r2, r5
 800b64a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b64e:	f7f5 fa45 	bl	8000adc <__aeabi_dcmplt>
 800b652:	bb38      	cbnz	r0, 800b6a4 <_dtoa_r+0x48c>
 800b654:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b658:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b65c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f2c0 8157 	blt.w	800b912 <_dtoa_r+0x6fa>
 800b664:	2f0e      	cmp	r7, #14
 800b666:	f300 8154 	bgt.w	800b912 <_dtoa_r+0x6fa>
 800b66a:	4b4b      	ldr	r3, [pc, #300]	@ (800b798 <_dtoa_r+0x580>)
 800b66c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b670:	ed93 7b00 	vldr	d7, [r3]
 800b674:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b676:	2b00      	cmp	r3, #0
 800b678:	ed8d 7b00 	vstr	d7, [sp]
 800b67c:	f280 80e5 	bge.w	800b84a <_dtoa_r+0x632>
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f300 80e1 	bgt.w	800b84a <_dtoa_r+0x632>
 800b688:	d10c      	bne.n	800b6a4 <_dtoa_r+0x48c>
 800b68a:	4b48      	ldr	r3, [pc, #288]	@ (800b7ac <_dtoa_r+0x594>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	ec51 0b17 	vmov	r0, r1, d7
 800b692:	f7f4 ffb1 	bl	80005f8 <__aeabi_dmul>
 800b696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69a:	f7f5 fa33 	bl	8000b04 <__aeabi_dcmpge>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f000 8266 	beq.w	800bb70 <_dtoa_r+0x958>
 800b6a4:	2400      	movs	r4, #0
 800b6a6:	4625      	mov	r5, r4
 800b6a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6aa:	4656      	mov	r6, sl
 800b6ac:	ea6f 0803 	mvn.w	r8, r3
 800b6b0:	2700      	movs	r7, #0
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4648      	mov	r0, r9
 800b6b6:	f000 fc09 	bl	800becc <_Bfree>
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	f000 80bd 	beq.w	800b83a <_dtoa_r+0x622>
 800b6c0:	b12f      	cbz	r7, 800b6ce <_dtoa_r+0x4b6>
 800b6c2:	42af      	cmp	r7, r5
 800b6c4:	d003      	beq.n	800b6ce <_dtoa_r+0x4b6>
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4648      	mov	r0, r9
 800b6ca:	f000 fbff 	bl	800becc <_Bfree>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4648      	mov	r0, r9
 800b6d2:	f000 fbfb 	bl	800becc <_Bfree>
 800b6d6:	e0b0      	b.n	800b83a <_dtoa_r+0x622>
 800b6d8:	07e2      	lsls	r2, r4, #31
 800b6da:	d505      	bpl.n	800b6e8 <_dtoa_r+0x4d0>
 800b6dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6e0:	f7f4 ff8a 	bl	80005f8 <__aeabi_dmul>
 800b6e4:	3601      	adds	r6, #1
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	1064      	asrs	r4, r4, #1
 800b6ea:	3508      	adds	r5, #8
 800b6ec:	e762      	b.n	800b5b4 <_dtoa_r+0x39c>
 800b6ee:	2602      	movs	r6, #2
 800b6f0:	e765      	b.n	800b5be <_dtoa_r+0x3a6>
 800b6f2:	9c03      	ldr	r4, [sp, #12]
 800b6f4:	46b8      	mov	r8, r7
 800b6f6:	e784      	b.n	800b602 <_dtoa_r+0x3ea>
 800b6f8:	4b27      	ldr	r3, [pc, #156]	@ (800b798 <_dtoa_r+0x580>)
 800b6fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b700:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b704:	4454      	add	r4, sl
 800b706:	2900      	cmp	r1, #0
 800b708:	d054      	beq.n	800b7b4 <_dtoa_r+0x59c>
 800b70a:	4929      	ldr	r1, [pc, #164]	@ (800b7b0 <_dtoa_r+0x598>)
 800b70c:	2000      	movs	r0, #0
 800b70e:	f7f5 f89d 	bl	800084c <__aeabi_ddiv>
 800b712:	4633      	mov	r3, r6
 800b714:	462a      	mov	r2, r5
 800b716:	f7f4 fdb7 	bl	8000288 <__aeabi_dsub>
 800b71a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b71e:	4656      	mov	r6, sl
 800b720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b724:	f7f5 fa18 	bl	8000b58 <__aeabi_d2iz>
 800b728:	4605      	mov	r5, r0
 800b72a:	f7f4 fefb 	bl	8000524 <__aeabi_i2d>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b736:	f7f4 fda7 	bl	8000288 <__aeabi_dsub>
 800b73a:	3530      	adds	r5, #48	@ 0x30
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b744:	f806 5b01 	strb.w	r5, [r6], #1
 800b748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b74c:	f7f5 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800b750:	2800      	cmp	r0, #0
 800b752:	d172      	bne.n	800b83a <_dtoa_r+0x622>
 800b754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b758:	4911      	ldr	r1, [pc, #68]	@ (800b7a0 <_dtoa_r+0x588>)
 800b75a:	2000      	movs	r0, #0
 800b75c:	f7f4 fd94 	bl	8000288 <__aeabi_dsub>
 800b760:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b764:	f7f5 f9ba 	bl	8000adc <__aeabi_dcmplt>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f040 80b4 	bne.w	800b8d6 <_dtoa_r+0x6be>
 800b76e:	42a6      	cmp	r6, r4
 800b770:	f43f af70 	beq.w	800b654 <_dtoa_r+0x43c>
 800b774:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b778:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a4 <_dtoa_r+0x58c>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	f7f4 ff3c 	bl	80005f8 <__aeabi_dmul>
 800b780:	4b08      	ldr	r3, [pc, #32]	@ (800b7a4 <_dtoa_r+0x58c>)
 800b782:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b786:	2200      	movs	r2, #0
 800b788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b794:	e7c4      	b.n	800b720 <_dtoa_r+0x508>
 800b796:	bf00      	nop
 800b798:	0800cf20 	.word	0x0800cf20
 800b79c:	0800cef8 	.word	0x0800cef8
 800b7a0:	3ff00000 	.word	0x3ff00000
 800b7a4:	40240000 	.word	0x40240000
 800b7a8:	401c0000 	.word	0x401c0000
 800b7ac:	40140000 	.word	0x40140000
 800b7b0:	3fe00000 	.word	0x3fe00000
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b7c2:	4656      	mov	r6, sl
 800b7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7c8:	f7f5 f9c6 	bl	8000b58 <__aeabi_d2iz>
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	f7f4 fea9 	bl	8000524 <__aeabi_i2d>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7da:	f7f4 fd55 	bl	8000288 <__aeabi_dsub>
 800b7de:	3530      	adds	r5, #48	@ 0x30
 800b7e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	42a6      	cmp	r6, r4
 800b7ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7ee:	f04f 0200 	mov.w	r2, #0
 800b7f2:	d124      	bne.n	800b83e <_dtoa_r+0x626>
 800b7f4:	4baf      	ldr	r3, [pc, #700]	@ (800bab4 <_dtoa_r+0x89c>)
 800b7f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7fa:	f7f4 fd47 	bl	800028c <__adddf3>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b806:	f7f5 f987 	bl	8000b18 <__aeabi_dcmpgt>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d163      	bne.n	800b8d6 <_dtoa_r+0x6be>
 800b80e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b812:	49a8      	ldr	r1, [pc, #672]	@ (800bab4 <_dtoa_r+0x89c>)
 800b814:	2000      	movs	r0, #0
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b822:	f7f5 f95b 	bl	8000adc <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	f43f af14 	beq.w	800b654 <_dtoa_r+0x43c>
 800b82c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b82e:	1e73      	subs	r3, r6, #1
 800b830:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b832:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b836:	2b30      	cmp	r3, #48	@ 0x30
 800b838:	d0f8      	beq.n	800b82c <_dtoa_r+0x614>
 800b83a:	4647      	mov	r7, r8
 800b83c:	e03b      	b.n	800b8b6 <_dtoa_r+0x69e>
 800b83e:	4b9e      	ldr	r3, [pc, #632]	@ (800bab8 <_dtoa_r+0x8a0>)
 800b840:	f7f4 feda 	bl	80005f8 <__aeabi_dmul>
 800b844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b848:	e7bc      	b.n	800b7c4 <_dtoa_r+0x5ac>
 800b84a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b84e:	4656      	mov	r6, sl
 800b850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b854:	4620      	mov	r0, r4
 800b856:	4629      	mov	r1, r5
 800b858:	f7f4 fff8 	bl	800084c <__aeabi_ddiv>
 800b85c:	f7f5 f97c 	bl	8000b58 <__aeabi_d2iz>
 800b860:	4680      	mov	r8, r0
 800b862:	f7f4 fe5f 	bl	8000524 <__aeabi_i2d>
 800b866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b86a:	f7f4 fec5 	bl	80005f8 <__aeabi_dmul>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4620      	mov	r0, r4
 800b874:	4629      	mov	r1, r5
 800b876:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b87a:	f7f4 fd05 	bl	8000288 <__aeabi_dsub>
 800b87e:	f806 4b01 	strb.w	r4, [r6], #1
 800b882:	9d03      	ldr	r5, [sp, #12]
 800b884:	eba6 040a 	sub.w	r4, r6, sl
 800b888:	42a5      	cmp	r5, r4
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	d133      	bne.n	800b8f8 <_dtoa_r+0x6e0>
 800b890:	f7f4 fcfc 	bl	800028c <__adddf3>
 800b894:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	f7f5 f93c 	bl	8000b18 <__aeabi_dcmpgt>
 800b8a0:	b9c0      	cbnz	r0, 800b8d4 <_dtoa_r+0x6bc>
 800b8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7f5 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ae:	b110      	cbz	r0, 800b8b6 <_dtoa_r+0x69e>
 800b8b0:	f018 0f01 	tst.w	r8, #1
 800b8b4:	d10e      	bne.n	800b8d4 <_dtoa_r+0x6bc>
 800b8b6:	9902      	ldr	r1, [sp, #8]
 800b8b8:	4648      	mov	r0, r9
 800b8ba:	f000 fb07 	bl	800becc <_Bfree>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	7033      	strb	r3, [r6, #0]
 800b8c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8c4:	3701      	adds	r7, #1
 800b8c6:	601f      	str	r7, [r3, #0]
 800b8c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 824b 	beq.w	800bd66 <_dtoa_r+0xb4e>
 800b8d0:	601e      	str	r6, [r3, #0]
 800b8d2:	e248      	b.n	800bd66 <_dtoa_r+0xb4e>
 800b8d4:	46b8      	mov	r8, r7
 800b8d6:	4633      	mov	r3, r6
 800b8d8:	461e      	mov	r6, r3
 800b8da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8de:	2a39      	cmp	r2, #57	@ 0x39
 800b8e0:	d106      	bne.n	800b8f0 <_dtoa_r+0x6d8>
 800b8e2:	459a      	cmp	sl, r3
 800b8e4:	d1f8      	bne.n	800b8d8 <_dtoa_r+0x6c0>
 800b8e6:	2230      	movs	r2, #48	@ 0x30
 800b8e8:	f108 0801 	add.w	r8, r8, #1
 800b8ec:	f88a 2000 	strb.w	r2, [sl]
 800b8f0:	781a      	ldrb	r2, [r3, #0]
 800b8f2:	3201      	adds	r2, #1
 800b8f4:	701a      	strb	r2, [r3, #0]
 800b8f6:	e7a0      	b.n	800b83a <_dtoa_r+0x622>
 800b8f8:	4b6f      	ldr	r3, [pc, #444]	@ (800bab8 <_dtoa_r+0x8a0>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f7f4 fe7c 	bl	80005f8 <__aeabi_dmul>
 800b900:	2200      	movs	r2, #0
 800b902:	2300      	movs	r3, #0
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	f7f5 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d09f      	beq.n	800b850 <_dtoa_r+0x638>
 800b910:	e7d1      	b.n	800b8b6 <_dtoa_r+0x69e>
 800b912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b914:	2a00      	cmp	r2, #0
 800b916:	f000 80ea 	beq.w	800baee <_dtoa_r+0x8d6>
 800b91a:	9a07      	ldr	r2, [sp, #28]
 800b91c:	2a01      	cmp	r2, #1
 800b91e:	f300 80cd 	bgt.w	800babc <_dtoa_r+0x8a4>
 800b922:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b924:	2a00      	cmp	r2, #0
 800b926:	f000 80c1 	beq.w	800baac <_dtoa_r+0x894>
 800b92a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b92e:	9c08      	ldr	r4, [sp, #32]
 800b930:	9e00      	ldr	r6, [sp, #0]
 800b932:	9a00      	ldr	r2, [sp, #0]
 800b934:	441a      	add	r2, r3
 800b936:	9200      	str	r2, [sp, #0]
 800b938:	9a06      	ldr	r2, [sp, #24]
 800b93a:	2101      	movs	r1, #1
 800b93c:	441a      	add	r2, r3
 800b93e:	4648      	mov	r0, r9
 800b940:	9206      	str	r2, [sp, #24]
 800b942:	f000 fb77 	bl	800c034 <__i2b>
 800b946:	4605      	mov	r5, r0
 800b948:	b166      	cbz	r6, 800b964 <_dtoa_r+0x74c>
 800b94a:	9b06      	ldr	r3, [sp, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd09      	ble.n	800b964 <_dtoa_r+0x74c>
 800b950:	42b3      	cmp	r3, r6
 800b952:	9a00      	ldr	r2, [sp, #0]
 800b954:	bfa8      	it	ge
 800b956:	4633      	movge	r3, r6
 800b958:	1ad2      	subs	r2, r2, r3
 800b95a:	9200      	str	r2, [sp, #0]
 800b95c:	9a06      	ldr	r2, [sp, #24]
 800b95e:	1af6      	subs	r6, r6, r3
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	9306      	str	r3, [sp, #24]
 800b964:	9b08      	ldr	r3, [sp, #32]
 800b966:	b30b      	cbz	r3, 800b9ac <_dtoa_r+0x794>
 800b968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80c6 	beq.w	800bafc <_dtoa_r+0x8e4>
 800b970:	2c00      	cmp	r4, #0
 800b972:	f000 80c0 	beq.w	800baf6 <_dtoa_r+0x8de>
 800b976:	4629      	mov	r1, r5
 800b978:	4622      	mov	r2, r4
 800b97a:	4648      	mov	r0, r9
 800b97c:	f000 fc12 	bl	800c1a4 <__pow5mult>
 800b980:	9a02      	ldr	r2, [sp, #8]
 800b982:	4601      	mov	r1, r0
 800b984:	4605      	mov	r5, r0
 800b986:	4648      	mov	r0, r9
 800b988:	f000 fb6a 	bl	800c060 <__multiply>
 800b98c:	9902      	ldr	r1, [sp, #8]
 800b98e:	4680      	mov	r8, r0
 800b990:	4648      	mov	r0, r9
 800b992:	f000 fa9b 	bl	800becc <_Bfree>
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	1b1b      	subs	r3, r3, r4
 800b99a:	9308      	str	r3, [sp, #32]
 800b99c:	f000 80b1 	beq.w	800bb02 <_dtoa_r+0x8ea>
 800b9a0:	9a08      	ldr	r2, [sp, #32]
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	f000 fbfd 	bl	800c1a4 <__pow5mult>
 800b9aa:	9002      	str	r0, [sp, #8]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	4648      	mov	r0, r9
 800b9b0:	f000 fb40 	bl	800c034 <__i2b>
 800b9b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 81d8 	beq.w	800bd6e <_dtoa_r+0xb56>
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	f000 fbee 	bl	800c1a4 <__pow5mult>
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	f300 809f 	bgt.w	800bb10 <_dtoa_r+0x8f8>
 800b9d2:	9b04      	ldr	r3, [sp, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f040 8097 	bne.w	800bb08 <_dtoa_r+0x8f0>
 800b9da:	9b05      	ldr	r3, [sp, #20]
 800b9dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 8093 	bne.w	800bb0c <_dtoa_r+0x8f4>
 800b9e6:	9b05      	ldr	r3, [sp, #20]
 800b9e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9ec:	0d1b      	lsrs	r3, r3, #20
 800b9ee:	051b      	lsls	r3, r3, #20
 800b9f0:	b133      	cbz	r3, 800ba00 <_dtoa_r+0x7e8>
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	9b06      	ldr	r3, [sp, #24]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	9306      	str	r3, [sp, #24]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	9308      	str	r3, [sp, #32]
 800ba02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 81b8 	beq.w	800bd7a <_dtoa_r+0xb62>
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba10:	6918      	ldr	r0, [r3, #16]
 800ba12:	f000 fac3 	bl	800bf9c <__hi0bits>
 800ba16:	f1c0 0020 	rsb	r0, r0, #32
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	4418      	add	r0, r3
 800ba1e:	f010 001f 	ands.w	r0, r0, #31
 800ba22:	f000 8082 	beq.w	800bb2a <_dtoa_r+0x912>
 800ba26:	f1c0 0320 	rsb	r3, r0, #32
 800ba2a:	2b04      	cmp	r3, #4
 800ba2c:	dd73      	ble.n	800bb16 <_dtoa_r+0x8fe>
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	f1c0 001c 	rsb	r0, r0, #28
 800ba34:	4403      	add	r3, r0
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	9b06      	ldr	r3, [sp, #24]
 800ba3a:	4403      	add	r3, r0
 800ba3c:	4406      	add	r6, r0
 800ba3e:	9306      	str	r3, [sp, #24]
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dd05      	ble.n	800ba52 <_dtoa_r+0x83a>
 800ba46:	9902      	ldr	r1, [sp, #8]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4648      	mov	r0, r9
 800ba4c:	f000 fc04 	bl	800c258 <__lshift>
 800ba50:	9002      	str	r0, [sp, #8]
 800ba52:	9b06      	ldr	r3, [sp, #24]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd05      	ble.n	800ba64 <_dtoa_r+0x84c>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 fbfb 	bl	800c258 <__lshift>
 800ba62:	4604      	mov	r4, r0
 800ba64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d061      	beq.n	800bb2e <_dtoa_r+0x916>
 800ba6a:	9802      	ldr	r0, [sp, #8]
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	f000 fc5f 	bl	800c330 <__mcmp>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	da5b      	bge.n	800bb2e <_dtoa_r+0x916>
 800ba76:	2300      	movs	r3, #0
 800ba78:	9902      	ldr	r1, [sp, #8]
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f000 fa47 	bl	800bf10 <__multadd>
 800ba82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba84:	9002      	str	r0, [sp, #8]
 800ba86:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 8177 	beq.w	800bd7e <_dtoa_r+0xb66>
 800ba90:	4629      	mov	r1, r5
 800ba92:	2300      	movs	r3, #0
 800ba94:	220a      	movs	r2, #10
 800ba96:	4648      	mov	r0, r9
 800ba98:	f000 fa3a 	bl	800bf10 <__multadd>
 800ba9c:	f1bb 0f00 	cmp.w	fp, #0
 800baa0:	4605      	mov	r5, r0
 800baa2:	dc6f      	bgt.n	800bb84 <_dtoa_r+0x96c>
 800baa4:	9b07      	ldr	r3, [sp, #28]
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	dc49      	bgt.n	800bb3e <_dtoa_r+0x926>
 800baaa:	e06b      	b.n	800bb84 <_dtoa_r+0x96c>
 800baac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800baae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bab2:	e73c      	b.n	800b92e <_dtoa_r+0x716>
 800bab4:	3fe00000 	.word	0x3fe00000
 800bab8:	40240000 	.word	0x40240000
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	1e5c      	subs	r4, r3, #1
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	42a3      	cmp	r3, r4
 800bac4:	db09      	blt.n	800bada <_dtoa_r+0x8c2>
 800bac6:	1b1c      	subs	r4, r3, r4
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f6bf af30 	bge.w	800b930 <_dtoa_r+0x718>
 800bad0:	9b00      	ldr	r3, [sp, #0]
 800bad2:	9a03      	ldr	r2, [sp, #12]
 800bad4:	1a9e      	subs	r6, r3, r2
 800bad6:	2300      	movs	r3, #0
 800bad8:	e72b      	b.n	800b932 <_dtoa_r+0x71a>
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bade:	9408      	str	r4, [sp, #32]
 800bae0:	1ae3      	subs	r3, r4, r3
 800bae2:	441a      	add	r2, r3
 800bae4:	9e00      	ldr	r6, [sp, #0]
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	920d      	str	r2, [sp, #52]	@ 0x34
 800baea:	2400      	movs	r4, #0
 800baec:	e721      	b.n	800b932 <_dtoa_r+0x71a>
 800baee:	9c08      	ldr	r4, [sp, #32]
 800baf0:	9e00      	ldr	r6, [sp, #0]
 800baf2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800baf4:	e728      	b.n	800b948 <_dtoa_r+0x730>
 800baf6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bafa:	e751      	b.n	800b9a0 <_dtoa_r+0x788>
 800bafc:	9a08      	ldr	r2, [sp, #32]
 800bafe:	9902      	ldr	r1, [sp, #8]
 800bb00:	e750      	b.n	800b9a4 <_dtoa_r+0x78c>
 800bb02:	f8cd 8008 	str.w	r8, [sp, #8]
 800bb06:	e751      	b.n	800b9ac <_dtoa_r+0x794>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e779      	b.n	800ba00 <_dtoa_r+0x7e8>
 800bb0c:	9b04      	ldr	r3, [sp, #16]
 800bb0e:	e777      	b.n	800ba00 <_dtoa_r+0x7e8>
 800bb10:	2300      	movs	r3, #0
 800bb12:	9308      	str	r3, [sp, #32]
 800bb14:	e779      	b.n	800ba0a <_dtoa_r+0x7f2>
 800bb16:	d093      	beq.n	800ba40 <_dtoa_r+0x828>
 800bb18:	9a00      	ldr	r2, [sp, #0]
 800bb1a:	331c      	adds	r3, #28
 800bb1c:	441a      	add	r2, r3
 800bb1e:	9200      	str	r2, [sp, #0]
 800bb20:	9a06      	ldr	r2, [sp, #24]
 800bb22:	441a      	add	r2, r3
 800bb24:	441e      	add	r6, r3
 800bb26:	9206      	str	r2, [sp, #24]
 800bb28:	e78a      	b.n	800ba40 <_dtoa_r+0x828>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	e7f4      	b.n	800bb18 <_dtoa_r+0x900>
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	46b8      	mov	r8, r7
 800bb34:	dc20      	bgt.n	800bb78 <_dtoa_r+0x960>
 800bb36:	469b      	mov	fp, r3
 800bb38:	9b07      	ldr	r3, [sp, #28]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	dd1e      	ble.n	800bb7c <_dtoa_r+0x964>
 800bb3e:	f1bb 0f00 	cmp.w	fp, #0
 800bb42:	f47f adb1 	bne.w	800b6a8 <_dtoa_r+0x490>
 800bb46:	4621      	mov	r1, r4
 800bb48:	465b      	mov	r3, fp
 800bb4a:	2205      	movs	r2, #5
 800bb4c:	4648      	mov	r0, r9
 800bb4e:	f000 f9df 	bl	800bf10 <__multadd>
 800bb52:	4601      	mov	r1, r0
 800bb54:	4604      	mov	r4, r0
 800bb56:	9802      	ldr	r0, [sp, #8]
 800bb58:	f000 fbea 	bl	800c330 <__mcmp>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f77f ada3 	ble.w	800b6a8 <_dtoa_r+0x490>
 800bb62:	4656      	mov	r6, sl
 800bb64:	2331      	movs	r3, #49	@ 0x31
 800bb66:	f806 3b01 	strb.w	r3, [r6], #1
 800bb6a:	f108 0801 	add.w	r8, r8, #1
 800bb6e:	e59f      	b.n	800b6b0 <_dtoa_r+0x498>
 800bb70:	9c03      	ldr	r4, [sp, #12]
 800bb72:	46b8      	mov	r8, r7
 800bb74:	4625      	mov	r5, r4
 800bb76:	e7f4      	b.n	800bb62 <_dtoa_r+0x94a>
 800bb78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 8101 	beq.w	800bd86 <_dtoa_r+0xb6e>
 800bb84:	2e00      	cmp	r6, #0
 800bb86:	dd05      	ble.n	800bb94 <_dtoa_r+0x97c>
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4632      	mov	r2, r6
 800bb8c:	4648      	mov	r0, r9
 800bb8e:	f000 fb63 	bl	800c258 <__lshift>
 800bb92:	4605      	mov	r5, r0
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d05c      	beq.n	800bc54 <_dtoa_r+0xa3c>
 800bb9a:	6869      	ldr	r1, [r5, #4]
 800bb9c:	4648      	mov	r0, r9
 800bb9e:	f000 f955 	bl	800be4c <_Balloc>
 800bba2:	4606      	mov	r6, r0
 800bba4:	b928      	cbnz	r0, 800bbb2 <_dtoa_r+0x99a>
 800bba6:	4b82      	ldr	r3, [pc, #520]	@ (800bdb0 <_dtoa_r+0xb98>)
 800bba8:	4602      	mov	r2, r0
 800bbaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bbae:	f7ff bb4a 	b.w	800b246 <_dtoa_r+0x2e>
 800bbb2:	692a      	ldr	r2, [r5, #16]
 800bbb4:	3202      	adds	r2, #2
 800bbb6:	0092      	lsls	r2, r2, #2
 800bbb8:	f105 010c 	add.w	r1, r5, #12
 800bbbc:	300c      	adds	r0, #12
 800bbbe:	f000 ff85 	bl	800cacc <memcpy>
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	4648      	mov	r0, r9
 800bbc8:	f000 fb46 	bl	800c258 <__lshift>
 800bbcc:	f10a 0301 	add.w	r3, sl, #1
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	eb0a 030b 	add.w	r3, sl, fp
 800bbd6:	9308      	str	r3, [sp, #32]
 800bbd8:	9b04      	ldr	r3, [sp, #16]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	462f      	mov	r7, r5
 800bbe0:	9306      	str	r3, [sp, #24]
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	9802      	ldr	r0, [sp, #8]
 800bbe8:	4621      	mov	r1, r4
 800bbea:	f103 3bff 	add.w	fp, r3, #4294967295
 800bbee:	f7ff fa89 	bl	800b104 <quorem>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	3330      	adds	r3, #48	@ 0x30
 800bbf6:	9003      	str	r0, [sp, #12]
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	9802      	ldr	r0, [sp, #8]
 800bbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfe:	f000 fb97 	bl	800c330 <__mcmp>
 800bc02:	462a      	mov	r2, r5
 800bc04:	9004      	str	r0, [sp, #16]
 800bc06:	4621      	mov	r1, r4
 800bc08:	4648      	mov	r0, r9
 800bc0a:	f000 fbad 	bl	800c368 <__mdiff>
 800bc0e:	68c2      	ldr	r2, [r0, #12]
 800bc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc12:	4606      	mov	r6, r0
 800bc14:	bb02      	cbnz	r2, 800bc58 <_dtoa_r+0xa40>
 800bc16:	4601      	mov	r1, r0
 800bc18:	9802      	ldr	r0, [sp, #8]
 800bc1a:	f000 fb89 	bl	800c330 <__mcmp>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc20:	4602      	mov	r2, r0
 800bc22:	4631      	mov	r1, r6
 800bc24:	4648      	mov	r0, r9
 800bc26:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2a:	f000 f94f 	bl	800becc <_Bfree>
 800bc2e:	9b07      	ldr	r3, [sp, #28]
 800bc30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc32:	9e00      	ldr	r6, [sp, #0]
 800bc34:	ea42 0103 	orr.w	r1, r2, r3
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	4319      	orrs	r1, r3
 800bc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc3e:	d10d      	bne.n	800bc5c <_dtoa_r+0xa44>
 800bc40:	2b39      	cmp	r3, #57	@ 0x39
 800bc42:	d027      	beq.n	800bc94 <_dtoa_r+0xa7c>
 800bc44:	9a04      	ldr	r2, [sp, #16]
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	dd01      	ble.n	800bc4e <_dtoa_r+0xa36>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	3331      	adds	r3, #49	@ 0x31
 800bc4e:	f88b 3000 	strb.w	r3, [fp]
 800bc52:	e52e      	b.n	800b6b2 <_dtoa_r+0x49a>
 800bc54:	4628      	mov	r0, r5
 800bc56:	e7b9      	b.n	800bbcc <_dtoa_r+0x9b4>
 800bc58:	2201      	movs	r2, #1
 800bc5a:	e7e2      	b.n	800bc22 <_dtoa_r+0xa0a>
 800bc5c:	9904      	ldr	r1, [sp, #16]
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	db04      	blt.n	800bc6c <_dtoa_r+0xa54>
 800bc62:	9807      	ldr	r0, [sp, #28]
 800bc64:	4301      	orrs	r1, r0
 800bc66:	9806      	ldr	r0, [sp, #24]
 800bc68:	4301      	orrs	r1, r0
 800bc6a:	d120      	bne.n	800bcae <_dtoa_r+0xa96>
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	ddee      	ble.n	800bc4e <_dtoa_r+0xa36>
 800bc70:	9902      	ldr	r1, [sp, #8]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	2201      	movs	r2, #1
 800bc76:	4648      	mov	r0, r9
 800bc78:	f000 faee 	bl	800c258 <__lshift>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	9002      	str	r0, [sp, #8]
 800bc80:	f000 fb56 	bl	800c330 <__mcmp>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	dc02      	bgt.n	800bc90 <_dtoa_r+0xa78>
 800bc8a:	d1e0      	bne.n	800bc4e <_dtoa_r+0xa36>
 800bc8c:	07da      	lsls	r2, r3, #31
 800bc8e:	d5de      	bpl.n	800bc4e <_dtoa_r+0xa36>
 800bc90:	2b39      	cmp	r3, #57	@ 0x39
 800bc92:	d1da      	bne.n	800bc4a <_dtoa_r+0xa32>
 800bc94:	2339      	movs	r3, #57	@ 0x39
 800bc96:	f88b 3000 	strb.w	r3, [fp]
 800bc9a:	4633      	mov	r3, r6
 800bc9c:	461e      	mov	r6, r3
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bca4:	2a39      	cmp	r2, #57	@ 0x39
 800bca6:	d04e      	beq.n	800bd46 <_dtoa_r+0xb2e>
 800bca8:	3201      	adds	r2, #1
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	e501      	b.n	800b6b2 <_dtoa_r+0x49a>
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	dd03      	ble.n	800bcba <_dtoa_r+0xaa2>
 800bcb2:	2b39      	cmp	r3, #57	@ 0x39
 800bcb4:	d0ee      	beq.n	800bc94 <_dtoa_r+0xa7c>
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	e7c9      	b.n	800bc4e <_dtoa_r+0xa36>
 800bcba:	9a00      	ldr	r2, [sp, #0]
 800bcbc:	9908      	ldr	r1, [sp, #32]
 800bcbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bcc2:	428a      	cmp	r2, r1
 800bcc4:	d028      	beq.n	800bd18 <_dtoa_r+0xb00>
 800bcc6:	9902      	ldr	r1, [sp, #8]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	220a      	movs	r2, #10
 800bccc:	4648      	mov	r0, r9
 800bcce:	f000 f91f 	bl	800bf10 <__multadd>
 800bcd2:	42af      	cmp	r7, r5
 800bcd4:	9002      	str	r0, [sp, #8]
 800bcd6:	f04f 0300 	mov.w	r3, #0
 800bcda:	f04f 020a 	mov.w	r2, #10
 800bcde:	4639      	mov	r1, r7
 800bce0:	4648      	mov	r0, r9
 800bce2:	d107      	bne.n	800bcf4 <_dtoa_r+0xadc>
 800bce4:	f000 f914 	bl	800bf10 <__multadd>
 800bce8:	4607      	mov	r7, r0
 800bcea:	4605      	mov	r5, r0
 800bcec:	9b00      	ldr	r3, [sp, #0]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	e777      	b.n	800bbe4 <_dtoa_r+0x9cc>
 800bcf4:	f000 f90c 	bl	800bf10 <__multadd>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	220a      	movs	r2, #10
 800bd00:	4648      	mov	r0, r9
 800bd02:	f000 f905 	bl	800bf10 <__multadd>
 800bd06:	4605      	mov	r5, r0
 800bd08:	e7f0      	b.n	800bcec <_dtoa_r+0xad4>
 800bd0a:	f1bb 0f00 	cmp.w	fp, #0
 800bd0e:	bfcc      	ite	gt
 800bd10:	465e      	movgt	r6, fp
 800bd12:	2601      	movle	r6, #1
 800bd14:	4456      	add	r6, sl
 800bd16:	2700      	movs	r7, #0
 800bd18:	9902      	ldr	r1, [sp, #8]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	4648      	mov	r0, r9
 800bd20:	f000 fa9a 	bl	800c258 <__lshift>
 800bd24:	4621      	mov	r1, r4
 800bd26:	9002      	str	r0, [sp, #8]
 800bd28:	f000 fb02 	bl	800c330 <__mcmp>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dcb4      	bgt.n	800bc9a <_dtoa_r+0xa82>
 800bd30:	d102      	bne.n	800bd38 <_dtoa_r+0xb20>
 800bd32:	9b00      	ldr	r3, [sp, #0]
 800bd34:	07db      	lsls	r3, r3, #31
 800bd36:	d4b0      	bmi.n	800bc9a <_dtoa_r+0xa82>
 800bd38:	4633      	mov	r3, r6
 800bd3a:	461e      	mov	r6, r3
 800bd3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd40:	2a30      	cmp	r2, #48	@ 0x30
 800bd42:	d0fa      	beq.n	800bd3a <_dtoa_r+0xb22>
 800bd44:	e4b5      	b.n	800b6b2 <_dtoa_r+0x49a>
 800bd46:	459a      	cmp	sl, r3
 800bd48:	d1a8      	bne.n	800bc9c <_dtoa_r+0xa84>
 800bd4a:	2331      	movs	r3, #49	@ 0x31
 800bd4c:	f108 0801 	add.w	r8, r8, #1
 800bd50:	f88a 3000 	strb.w	r3, [sl]
 800bd54:	e4ad      	b.n	800b6b2 <_dtoa_r+0x49a>
 800bd56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bdb4 <_dtoa_r+0xb9c>
 800bd5c:	b11b      	cbz	r3, 800bd66 <_dtoa_r+0xb4e>
 800bd5e:	f10a 0308 	add.w	r3, sl, #8
 800bd62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	4650      	mov	r0, sl
 800bd68:	b017      	add	sp, #92	@ 0x5c
 800bd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6e:	9b07      	ldr	r3, [sp, #28]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	f77f ae2e 	ble.w	800b9d2 <_dtoa_r+0x7ba>
 800bd76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd78:	9308      	str	r3, [sp, #32]
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	e64d      	b.n	800ba1a <_dtoa_r+0x802>
 800bd7e:	f1bb 0f00 	cmp.w	fp, #0
 800bd82:	f77f aed9 	ble.w	800bb38 <_dtoa_r+0x920>
 800bd86:	4656      	mov	r6, sl
 800bd88:	9802      	ldr	r0, [sp, #8]
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	f7ff f9ba 	bl	800b104 <quorem>
 800bd90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bd94:	f806 3b01 	strb.w	r3, [r6], #1
 800bd98:	eba6 020a 	sub.w	r2, r6, sl
 800bd9c:	4593      	cmp	fp, r2
 800bd9e:	ddb4      	ble.n	800bd0a <_dtoa_r+0xaf2>
 800bda0:	9902      	ldr	r1, [sp, #8]
 800bda2:	2300      	movs	r3, #0
 800bda4:	220a      	movs	r2, #10
 800bda6:	4648      	mov	r0, r9
 800bda8:	f000 f8b2 	bl	800bf10 <__multadd>
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	e7eb      	b.n	800bd88 <_dtoa_r+0xb70>
 800bdb0:	0800ce64 	.word	0x0800ce64
 800bdb4:	0800cde8 	.word	0x0800cde8

0800bdb8 <_free_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4605      	mov	r5, r0
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d041      	beq.n	800be44 <_free_r+0x8c>
 800bdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc4:	1f0c      	subs	r4, r1, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bfb8      	it	lt
 800bdca:	18e4      	addlt	r4, r4, r3
 800bdcc:	f7fe fb8a 	bl	800a4e4 <__malloc_lock>
 800bdd0:	4a1d      	ldr	r2, [pc, #116]	@ (800be48 <_free_r+0x90>)
 800bdd2:	6813      	ldr	r3, [r2, #0]
 800bdd4:	b933      	cbnz	r3, 800bde4 <_free_r+0x2c>
 800bdd6:	6063      	str	r3, [r4, #4]
 800bdd8:	6014      	str	r4, [r2, #0]
 800bdda:	4628      	mov	r0, r5
 800bddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde0:	f7fe bb86 	b.w	800a4f0 <__malloc_unlock>
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d908      	bls.n	800bdfa <_free_r+0x42>
 800bde8:	6820      	ldr	r0, [r4, #0]
 800bdea:	1821      	adds	r1, r4, r0
 800bdec:	428b      	cmp	r3, r1
 800bdee:	bf01      	itttt	eq
 800bdf0:	6819      	ldreq	r1, [r3, #0]
 800bdf2:	685b      	ldreq	r3, [r3, #4]
 800bdf4:	1809      	addeq	r1, r1, r0
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	e7ed      	b.n	800bdd6 <_free_r+0x1e>
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	b10b      	cbz	r3, 800be04 <_free_r+0x4c>
 800be00:	42a3      	cmp	r3, r4
 800be02:	d9fa      	bls.n	800bdfa <_free_r+0x42>
 800be04:	6811      	ldr	r1, [r2, #0]
 800be06:	1850      	adds	r0, r2, r1
 800be08:	42a0      	cmp	r0, r4
 800be0a:	d10b      	bne.n	800be24 <_free_r+0x6c>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	4401      	add	r1, r0
 800be10:	1850      	adds	r0, r2, r1
 800be12:	4283      	cmp	r3, r0
 800be14:	6011      	str	r1, [r2, #0]
 800be16:	d1e0      	bne.n	800bdda <_free_r+0x22>
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	6053      	str	r3, [r2, #4]
 800be1e:	4408      	add	r0, r1
 800be20:	6010      	str	r0, [r2, #0]
 800be22:	e7da      	b.n	800bdda <_free_r+0x22>
 800be24:	d902      	bls.n	800be2c <_free_r+0x74>
 800be26:	230c      	movs	r3, #12
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	e7d6      	b.n	800bdda <_free_r+0x22>
 800be2c:	6820      	ldr	r0, [r4, #0]
 800be2e:	1821      	adds	r1, r4, r0
 800be30:	428b      	cmp	r3, r1
 800be32:	bf04      	itt	eq
 800be34:	6819      	ldreq	r1, [r3, #0]
 800be36:	685b      	ldreq	r3, [r3, #4]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	bf04      	itt	eq
 800be3c:	1809      	addeq	r1, r1, r0
 800be3e:	6021      	streq	r1, [r4, #0]
 800be40:	6054      	str	r4, [r2, #4]
 800be42:	e7ca      	b.n	800bdda <_free_r+0x22>
 800be44:	bd38      	pop	{r3, r4, r5, pc}
 800be46:	bf00      	nop
 800be48:	20001f94 	.word	0x20001f94

0800be4c <_Balloc>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	69c6      	ldr	r6, [r0, #28]
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	b976      	cbnz	r6, 800be74 <_Balloc+0x28>
 800be56:	2010      	movs	r0, #16
 800be58:	f7fe fa9a 	bl	800a390 <malloc>
 800be5c:	4602      	mov	r2, r0
 800be5e:	61e0      	str	r0, [r4, #28]
 800be60:	b920      	cbnz	r0, 800be6c <_Balloc+0x20>
 800be62:	4b18      	ldr	r3, [pc, #96]	@ (800bec4 <_Balloc+0x78>)
 800be64:	4818      	ldr	r0, [pc, #96]	@ (800bec8 <_Balloc+0x7c>)
 800be66:	216b      	movs	r1, #107	@ 0x6b
 800be68:	f7fe fa74 	bl	800a354 <__assert_func>
 800be6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be70:	6006      	str	r6, [r0, #0]
 800be72:	60c6      	str	r6, [r0, #12]
 800be74:	69e6      	ldr	r6, [r4, #28]
 800be76:	68f3      	ldr	r3, [r6, #12]
 800be78:	b183      	cbz	r3, 800be9c <_Balloc+0x50>
 800be7a:	69e3      	ldr	r3, [r4, #28]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be82:	b9b8      	cbnz	r0, 800beb4 <_Balloc+0x68>
 800be84:	2101      	movs	r1, #1
 800be86:	fa01 f605 	lsl.w	r6, r1, r5
 800be8a:	1d72      	adds	r2, r6, #5
 800be8c:	0092      	lsls	r2, r2, #2
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 fe2a 	bl	800cae8 <_calloc_r>
 800be94:	b160      	cbz	r0, 800beb0 <_Balloc+0x64>
 800be96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be9a:	e00e      	b.n	800beba <_Balloc+0x6e>
 800be9c:	2221      	movs	r2, #33	@ 0x21
 800be9e:	2104      	movs	r1, #4
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fe21 	bl	800cae8 <_calloc_r>
 800bea6:	69e3      	ldr	r3, [r4, #28]
 800bea8:	60f0      	str	r0, [r6, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e4      	bne.n	800be7a <_Balloc+0x2e>
 800beb0:	2000      	movs	r0, #0
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	6802      	ldr	r2, [r0, #0]
 800beb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beba:	2300      	movs	r3, #0
 800bebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bec0:	e7f7      	b.n	800beb2 <_Balloc+0x66>
 800bec2:	bf00      	nop
 800bec4:	0800cdf5 	.word	0x0800cdf5
 800bec8:	0800ce75 	.word	0x0800ce75

0800becc <_Bfree>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	69c6      	ldr	r6, [r0, #28]
 800bed0:	4605      	mov	r5, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	b976      	cbnz	r6, 800bef4 <_Bfree+0x28>
 800bed6:	2010      	movs	r0, #16
 800bed8:	f7fe fa5a 	bl	800a390 <malloc>
 800bedc:	4602      	mov	r2, r0
 800bede:	61e8      	str	r0, [r5, #28]
 800bee0:	b920      	cbnz	r0, 800beec <_Bfree+0x20>
 800bee2:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <_Bfree+0x3c>)
 800bee4:	4809      	ldr	r0, [pc, #36]	@ (800bf0c <_Bfree+0x40>)
 800bee6:	218f      	movs	r1, #143	@ 0x8f
 800bee8:	f7fe fa34 	bl	800a354 <__assert_func>
 800beec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bef0:	6006      	str	r6, [r0, #0]
 800bef2:	60c6      	str	r6, [r0, #12]
 800bef4:	b13c      	cbz	r4, 800bf06 <_Bfree+0x3a>
 800bef6:	69eb      	ldr	r3, [r5, #28]
 800bef8:	6862      	ldr	r2, [r4, #4]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf00:	6021      	str	r1, [r4, #0]
 800bf02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	0800cdf5 	.word	0x0800cdf5
 800bf0c:	0800ce75 	.word	0x0800ce75

0800bf10 <__multadd>:
 800bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf14:	690d      	ldr	r5, [r1, #16]
 800bf16:	4607      	mov	r7, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	461e      	mov	r6, r3
 800bf1c:	f101 0c14 	add.w	ip, r1, #20
 800bf20:	2000      	movs	r0, #0
 800bf22:	f8dc 3000 	ldr.w	r3, [ip]
 800bf26:	b299      	uxth	r1, r3
 800bf28:	fb02 6101 	mla	r1, r2, r1, r6
 800bf2c:	0c1e      	lsrs	r6, r3, #16
 800bf2e:	0c0b      	lsrs	r3, r1, #16
 800bf30:	fb02 3306 	mla	r3, r2, r6, r3
 800bf34:	b289      	uxth	r1, r1
 800bf36:	3001      	adds	r0, #1
 800bf38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf3c:	4285      	cmp	r5, r0
 800bf3e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf46:	dcec      	bgt.n	800bf22 <__multadd+0x12>
 800bf48:	b30e      	cbz	r6, 800bf8e <__multadd+0x7e>
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	42ab      	cmp	r3, r5
 800bf4e:	dc19      	bgt.n	800bf84 <__multadd+0x74>
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	4638      	mov	r0, r7
 800bf54:	3101      	adds	r1, #1
 800bf56:	f7ff ff79 	bl	800be4c <_Balloc>
 800bf5a:	4680      	mov	r8, r0
 800bf5c:	b928      	cbnz	r0, 800bf6a <__multadd+0x5a>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b0c      	ldr	r3, [pc, #48]	@ (800bf94 <__multadd+0x84>)
 800bf62:	480d      	ldr	r0, [pc, #52]	@ (800bf98 <__multadd+0x88>)
 800bf64:	21ba      	movs	r1, #186	@ 0xba
 800bf66:	f7fe f9f5 	bl	800a354 <__assert_func>
 800bf6a:	6922      	ldr	r2, [r4, #16]
 800bf6c:	3202      	adds	r2, #2
 800bf6e:	f104 010c 	add.w	r1, r4, #12
 800bf72:	0092      	lsls	r2, r2, #2
 800bf74:	300c      	adds	r0, #12
 800bf76:	f000 fda9 	bl	800cacc <memcpy>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f7ff ffa5 	bl	800becc <_Bfree>
 800bf82:	4644      	mov	r4, r8
 800bf84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf88:	3501      	adds	r5, #1
 800bf8a:	615e      	str	r6, [r3, #20]
 800bf8c:	6125      	str	r5, [r4, #16]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf94:	0800ce64 	.word	0x0800ce64
 800bf98:	0800ce75 	.word	0x0800ce75

0800bf9c <__hi0bits>:
 800bf9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	bf36      	itet	cc
 800bfa4:	0403      	lslcc	r3, r0, #16
 800bfa6:	2000      	movcs	r0, #0
 800bfa8:	2010      	movcc	r0, #16
 800bfaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfae:	bf3c      	itt	cc
 800bfb0:	021b      	lslcc	r3, r3, #8
 800bfb2:	3008      	addcc	r0, #8
 800bfb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb8:	bf3c      	itt	cc
 800bfba:	011b      	lslcc	r3, r3, #4
 800bfbc:	3004      	addcc	r0, #4
 800bfbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfc2:	bf3c      	itt	cc
 800bfc4:	009b      	lslcc	r3, r3, #2
 800bfc6:	3002      	addcc	r0, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	db05      	blt.n	800bfd8 <__hi0bits+0x3c>
 800bfcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bfd0:	f100 0001 	add.w	r0, r0, #1
 800bfd4:	bf08      	it	eq
 800bfd6:	2020      	moveq	r0, #32
 800bfd8:	4770      	bx	lr

0800bfda <__lo0bits>:
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	4602      	mov	r2, r0
 800bfde:	f013 0007 	ands.w	r0, r3, #7
 800bfe2:	d00b      	beq.n	800bffc <__lo0bits+0x22>
 800bfe4:	07d9      	lsls	r1, r3, #31
 800bfe6:	d421      	bmi.n	800c02c <__lo0bits+0x52>
 800bfe8:	0798      	lsls	r0, r3, #30
 800bfea:	bf49      	itett	mi
 800bfec:	085b      	lsrmi	r3, r3, #1
 800bfee:	089b      	lsrpl	r3, r3, #2
 800bff0:	2001      	movmi	r0, #1
 800bff2:	6013      	strmi	r3, [r2, #0]
 800bff4:	bf5c      	itt	pl
 800bff6:	6013      	strpl	r3, [r2, #0]
 800bff8:	2002      	movpl	r0, #2
 800bffa:	4770      	bx	lr
 800bffc:	b299      	uxth	r1, r3
 800bffe:	b909      	cbnz	r1, 800c004 <__lo0bits+0x2a>
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	2010      	movs	r0, #16
 800c004:	b2d9      	uxtb	r1, r3
 800c006:	b909      	cbnz	r1, 800c00c <__lo0bits+0x32>
 800c008:	3008      	adds	r0, #8
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	0719      	lsls	r1, r3, #28
 800c00e:	bf04      	itt	eq
 800c010:	091b      	lsreq	r3, r3, #4
 800c012:	3004      	addeq	r0, #4
 800c014:	0799      	lsls	r1, r3, #30
 800c016:	bf04      	itt	eq
 800c018:	089b      	lsreq	r3, r3, #2
 800c01a:	3002      	addeq	r0, #2
 800c01c:	07d9      	lsls	r1, r3, #31
 800c01e:	d403      	bmi.n	800c028 <__lo0bits+0x4e>
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	f100 0001 	add.w	r0, r0, #1
 800c026:	d003      	beq.n	800c030 <__lo0bits+0x56>
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	4770      	bx	lr
 800c02c:	2000      	movs	r0, #0
 800c02e:	4770      	bx	lr
 800c030:	2020      	movs	r0, #32
 800c032:	4770      	bx	lr

0800c034 <__i2b>:
 800c034:	b510      	push	{r4, lr}
 800c036:	460c      	mov	r4, r1
 800c038:	2101      	movs	r1, #1
 800c03a:	f7ff ff07 	bl	800be4c <_Balloc>
 800c03e:	4602      	mov	r2, r0
 800c040:	b928      	cbnz	r0, 800c04e <__i2b+0x1a>
 800c042:	4b05      	ldr	r3, [pc, #20]	@ (800c058 <__i2b+0x24>)
 800c044:	4805      	ldr	r0, [pc, #20]	@ (800c05c <__i2b+0x28>)
 800c046:	f240 1145 	movw	r1, #325	@ 0x145
 800c04a:	f7fe f983 	bl	800a354 <__assert_func>
 800c04e:	2301      	movs	r3, #1
 800c050:	6144      	str	r4, [r0, #20]
 800c052:	6103      	str	r3, [r0, #16]
 800c054:	bd10      	pop	{r4, pc}
 800c056:	bf00      	nop
 800c058:	0800ce64 	.word	0x0800ce64
 800c05c:	0800ce75 	.word	0x0800ce75

0800c060 <__multiply>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	4617      	mov	r7, r2
 800c066:	690a      	ldr	r2, [r1, #16]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	bfa8      	it	ge
 800c06e:	463b      	movge	r3, r7
 800c070:	4689      	mov	r9, r1
 800c072:	bfa4      	itt	ge
 800c074:	460f      	movge	r7, r1
 800c076:	4699      	movge	r9, r3
 800c078:	693d      	ldr	r5, [r7, #16]
 800c07a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	eb05 060a 	add.w	r6, r5, sl
 800c086:	42b3      	cmp	r3, r6
 800c088:	b085      	sub	sp, #20
 800c08a:	bfb8      	it	lt
 800c08c:	3101      	addlt	r1, #1
 800c08e:	f7ff fedd 	bl	800be4c <_Balloc>
 800c092:	b930      	cbnz	r0, 800c0a2 <__multiply+0x42>
 800c094:	4602      	mov	r2, r0
 800c096:	4b41      	ldr	r3, [pc, #260]	@ (800c19c <__multiply+0x13c>)
 800c098:	4841      	ldr	r0, [pc, #260]	@ (800c1a0 <__multiply+0x140>)
 800c09a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c09e:	f7fe f959 	bl	800a354 <__assert_func>
 800c0a2:	f100 0414 	add.w	r4, r0, #20
 800c0a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c0aa:	4623      	mov	r3, r4
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4573      	cmp	r3, lr
 800c0b0:	d320      	bcc.n	800c0f4 <__multiply+0x94>
 800c0b2:	f107 0814 	add.w	r8, r7, #20
 800c0b6:	f109 0114 	add.w	r1, r9, #20
 800c0ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c0be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c0c2:	9302      	str	r3, [sp, #8]
 800c0c4:	1beb      	subs	r3, r5, r7
 800c0c6:	3b15      	subs	r3, #21
 800c0c8:	f023 0303 	bic.w	r3, r3, #3
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	3715      	adds	r7, #21
 800c0d0:	42bd      	cmp	r5, r7
 800c0d2:	bf38      	it	cc
 800c0d4:	2304      	movcc	r3, #4
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	9103      	str	r1, [sp, #12]
 800c0dc:	428b      	cmp	r3, r1
 800c0de:	d80c      	bhi.n	800c0fa <__multiply+0x9a>
 800c0e0:	2e00      	cmp	r6, #0
 800c0e2:	dd03      	ble.n	800c0ec <__multiply+0x8c>
 800c0e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d055      	beq.n	800c198 <__multiply+0x138>
 800c0ec:	6106      	str	r6, [r0, #16]
 800c0ee:	b005      	add	sp, #20
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	f843 2b04 	str.w	r2, [r3], #4
 800c0f8:	e7d9      	b.n	800c0ae <__multiply+0x4e>
 800c0fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0fe:	f1ba 0f00 	cmp.w	sl, #0
 800c102:	d01f      	beq.n	800c144 <__multiply+0xe4>
 800c104:	46c4      	mov	ip, r8
 800c106:	46a1      	mov	r9, r4
 800c108:	2700      	movs	r7, #0
 800c10a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c10e:	f8d9 3000 	ldr.w	r3, [r9]
 800c112:	fa1f fb82 	uxth.w	fp, r2
 800c116:	b29b      	uxth	r3, r3
 800c118:	fb0a 330b 	mla	r3, sl, fp, r3
 800c11c:	443b      	add	r3, r7
 800c11e:	f8d9 7000 	ldr.w	r7, [r9]
 800c122:	0c12      	lsrs	r2, r2, #16
 800c124:	0c3f      	lsrs	r7, r7, #16
 800c126:	fb0a 7202 	mla	r2, sl, r2, r7
 800c12a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c12e:	b29b      	uxth	r3, r3
 800c130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c134:	4565      	cmp	r5, ip
 800c136:	f849 3b04 	str.w	r3, [r9], #4
 800c13a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c13e:	d8e4      	bhi.n	800c10a <__multiply+0xaa>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	50e7      	str	r7, [r4, r3]
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c14a:	3104      	adds	r1, #4
 800c14c:	f1b9 0f00 	cmp.w	r9, #0
 800c150:	d020      	beq.n	800c194 <__multiply+0x134>
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	4647      	mov	r7, r8
 800c156:	46a4      	mov	ip, r4
 800c158:	f04f 0a00 	mov.w	sl, #0
 800c15c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c160:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c164:	fb09 220b 	mla	r2, r9, fp, r2
 800c168:	4452      	add	r2, sl
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c170:	f84c 3b04 	str.w	r3, [ip], #4
 800c174:	f857 3b04 	ldr.w	r3, [r7], #4
 800c178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c17c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c180:	fb09 330a 	mla	r3, r9, sl, r3
 800c184:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c188:	42bd      	cmp	r5, r7
 800c18a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c18e:	d8e5      	bhi.n	800c15c <__multiply+0xfc>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	50a3      	str	r3, [r4, r2]
 800c194:	3404      	adds	r4, #4
 800c196:	e79f      	b.n	800c0d8 <__multiply+0x78>
 800c198:	3e01      	subs	r6, #1
 800c19a:	e7a1      	b.n	800c0e0 <__multiply+0x80>
 800c19c:	0800ce64 	.word	0x0800ce64
 800c1a0:	0800ce75 	.word	0x0800ce75

0800c1a4 <__pow5mult>:
 800c1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	f012 0203 	ands.w	r2, r2, #3
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	460e      	mov	r6, r1
 800c1b2:	d007      	beq.n	800c1c4 <__pow5mult+0x20>
 800c1b4:	4c25      	ldr	r4, [pc, #148]	@ (800c24c <__pow5mult+0xa8>)
 800c1b6:	3a01      	subs	r2, #1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1be:	f7ff fea7 	bl	800bf10 <__multadd>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	10ad      	asrs	r5, r5, #2
 800c1c6:	d03d      	beq.n	800c244 <__pow5mult+0xa0>
 800c1c8:	69fc      	ldr	r4, [r7, #28]
 800c1ca:	b97c      	cbnz	r4, 800c1ec <__pow5mult+0x48>
 800c1cc:	2010      	movs	r0, #16
 800c1ce:	f7fe f8df 	bl	800a390 <malloc>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	61f8      	str	r0, [r7, #28]
 800c1d6:	b928      	cbnz	r0, 800c1e4 <__pow5mult+0x40>
 800c1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <__pow5mult+0xac>)
 800c1da:	481e      	ldr	r0, [pc, #120]	@ (800c254 <__pow5mult+0xb0>)
 800c1dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1e0:	f7fe f8b8 	bl	800a354 <__assert_func>
 800c1e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1e8:	6004      	str	r4, [r0, #0]
 800c1ea:	60c4      	str	r4, [r0, #12]
 800c1ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1f4:	b94c      	cbnz	r4, 800c20a <__pow5mult+0x66>
 800c1f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7ff ff1a 	bl	800c034 <__i2b>
 800c200:	2300      	movs	r3, #0
 800c202:	f8c8 0008 	str.w	r0, [r8, #8]
 800c206:	4604      	mov	r4, r0
 800c208:	6003      	str	r3, [r0, #0]
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	07eb      	lsls	r3, r5, #31
 800c210:	d50a      	bpl.n	800c228 <__pow5mult+0x84>
 800c212:	4631      	mov	r1, r6
 800c214:	4622      	mov	r2, r4
 800c216:	4638      	mov	r0, r7
 800c218:	f7ff ff22 	bl	800c060 <__multiply>
 800c21c:	4631      	mov	r1, r6
 800c21e:	4680      	mov	r8, r0
 800c220:	4638      	mov	r0, r7
 800c222:	f7ff fe53 	bl	800becc <_Bfree>
 800c226:	4646      	mov	r6, r8
 800c228:	106d      	asrs	r5, r5, #1
 800c22a:	d00b      	beq.n	800c244 <__pow5mult+0xa0>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	b938      	cbnz	r0, 800c240 <__pow5mult+0x9c>
 800c230:	4622      	mov	r2, r4
 800c232:	4621      	mov	r1, r4
 800c234:	4638      	mov	r0, r7
 800c236:	f7ff ff13 	bl	800c060 <__multiply>
 800c23a:	6020      	str	r0, [r4, #0]
 800c23c:	f8c0 9000 	str.w	r9, [r0]
 800c240:	4604      	mov	r4, r0
 800c242:	e7e4      	b.n	800c20e <__pow5mult+0x6a>
 800c244:	4630      	mov	r0, r6
 800c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24a:	bf00      	nop
 800c24c:	0800ceec 	.word	0x0800ceec
 800c250:	0800cdf5 	.word	0x0800cdf5
 800c254:	0800ce75 	.word	0x0800ce75

0800c258 <__lshift>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	6849      	ldr	r1, [r1, #4]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	4607      	mov	r7, r0
 800c26a:	4691      	mov	r9, r2
 800c26c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c270:	f108 0601 	add.w	r6, r8, #1
 800c274:	42b3      	cmp	r3, r6
 800c276:	db0b      	blt.n	800c290 <__lshift+0x38>
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff fde7 	bl	800be4c <_Balloc>
 800c27e:	4605      	mov	r5, r0
 800c280:	b948      	cbnz	r0, 800c296 <__lshift+0x3e>
 800c282:	4602      	mov	r2, r0
 800c284:	4b28      	ldr	r3, [pc, #160]	@ (800c328 <__lshift+0xd0>)
 800c286:	4829      	ldr	r0, [pc, #164]	@ (800c32c <__lshift+0xd4>)
 800c288:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c28c:	f7fe f862 	bl	800a354 <__assert_func>
 800c290:	3101      	adds	r1, #1
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	e7ee      	b.n	800c274 <__lshift+0x1c>
 800c296:	2300      	movs	r3, #0
 800c298:	f100 0114 	add.w	r1, r0, #20
 800c29c:	f100 0210 	add.w	r2, r0, #16
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	4553      	cmp	r3, sl
 800c2a4:	db33      	blt.n	800c30e <__lshift+0xb6>
 800c2a6:	6920      	ldr	r0, [r4, #16]
 800c2a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2ac:	f104 0314 	add.w	r3, r4, #20
 800c2b0:	f019 091f 	ands.w	r9, r9, #31
 800c2b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2bc:	d02b      	beq.n	800c316 <__lshift+0xbe>
 800c2be:	f1c9 0e20 	rsb	lr, r9, #32
 800c2c2:	468a      	mov	sl, r1
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c2cc:	4310      	orrs	r0, r2
 800c2ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	459c      	cmp	ip, r3
 800c2d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2dc:	d8f3      	bhi.n	800c2c6 <__lshift+0x6e>
 800c2de:	ebac 0304 	sub.w	r3, ip, r4
 800c2e2:	3b15      	subs	r3, #21
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	f104 0015 	add.w	r0, r4, #21
 800c2ee:	4560      	cmp	r0, ip
 800c2f0:	bf88      	it	hi
 800c2f2:	2304      	movhi	r3, #4
 800c2f4:	50ca      	str	r2, [r1, r3]
 800c2f6:	b10a      	cbz	r2, 800c2fc <__lshift+0xa4>
 800c2f8:	f108 0602 	add.w	r6, r8, #2
 800c2fc:	3e01      	subs	r6, #1
 800c2fe:	4638      	mov	r0, r7
 800c300:	612e      	str	r6, [r5, #16]
 800c302:	4621      	mov	r1, r4
 800c304:	f7ff fde2 	bl	800becc <_Bfree>
 800c308:	4628      	mov	r0, r5
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c312:	3301      	adds	r3, #1
 800c314:	e7c5      	b.n	800c2a2 <__lshift+0x4a>
 800c316:	3904      	subs	r1, #4
 800c318:	f853 2b04 	ldr.w	r2, [r3], #4
 800c31c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c320:	459c      	cmp	ip, r3
 800c322:	d8f9      	bhi.n	800c318 <__lshift+0xc0>
 800c324:	e7ea      	b.n	800c2fc <__lshift+0xa4>
 800c326:	bf00      	nop
 800c328:	0800ce64 	.word	0x0800ce64
 800c32c:	0800ce75 	.word	0x0800ce75

0800c330 <__mcmp>:
 800c330:	690a      	ldr	r2, [r1, #16]
 800c332:	4603      	mov	r3, r0
 800c334:	6900      	ldr	r0, [r0, #16]
 800c336:	1a80      	subs	r0, r0, r2
 800c338:	b530      	push	{r4, r5, lr}
 800c33a:	d10e      	bne.n	800c35a <__mcmp+0x2a>
 800c33c:	3314      	adds	r3, #20
 800c33e:	3114      	adds	r1, #20
 800c340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c34c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c350:	4295      	cmp	r5, r2
 800c352:	d003      	beq.n	800c35c <__mcmp+0x2c>
 800c354:	d205      	bcs.n	800c362 <__mcmp+0x32>
 800c356:	f04f 30ff 	mov.w	r0, #4294967295
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d3f3      	bcc.n	800c348 <__mcmp+0x18>
 800c360:	e7fb      	b.n	800c35a <__mcmp+0x2a>
 800c362:	2001      	movs	r0, #1
 800c364:	e7f9      	b.n	800c35a <__mcmp+0x2a>
	...

0800c368 <__mdiff>:
 800c368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	4689      	mov	r9, r1
 800c36e:	4606      	mov	r6, r0
 800c370:	4611      	mov	r1, r2
 800c372:	4648      	mov	r0, r9
 800c374:	4614      	mov	r4, r2
 800c376:	f7ff ffdb 	bl	800c330 <__mcmp>
 800c37a:	1e05      	subs	r5, r0, #0
 800c37c:	d112      	bne.n	800c3a4 <__mdiff+0x3c>
 800c37e:	4629      	mov	r1, r5
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff fd63 	bl	800be4c <_Balloc>
 800c386:	4602      	mov	r2, r0
 800c388:	b928      	cbnz	r0, 800c396 <__mdiff+0x2e>
 800c38a:	4b3f      	ldr	r3, [pc, #252]	@ (800c488 <__mdiff+0x120>)
 800c38c:	f240 2137 	movw	r1, #567	@ 0x237
 800c390:	483e      	ldr	r0, [pc, #248]	@ (800c48c <__mdiff+0x124>)
 800c392:	f7fd ffdf 	bl	800a354 <__assert_func>
 800c396:	2301      	movs	r3, #1
 800c398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c39c:	4610      	mov	r0, r2
 800c39e:	b003      	add	sp, #12
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	bfbc      	itt	lt
 800c3a6:	464b      	movlt	r3, r9
 800c3a8:	46a1      	movlt	r9, r4
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3b0:	bfba      	itte	lt
 800c3b2:	461c      	movlt	r4, r3
 800c3b4:	2501      	movlt	r5, #1
 800c3b6:	2500      	movge	r5, #0
 800c3b8:	f7ff fd48 	bl	800be4c <_Balloc>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	b918      	cbnz	r0, 800c3c8 <__mdiff+0x60>
 800c3c0:	4b31      	ldr	r3, [pc, #196]	@ (800c488 <__mdiff+0x120>)
 800c3c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c3c6:	e7e3      	b.n	800c390 <__mdiff+0x28>
 800c3c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c3cc:	6926      	ldr	r6, [r4, #16]
 800c3ce:	60c5      	str	r5, [r0, #12]
 800c3d0:	f109 0310 	add.w	r3, r9, #16
 800c3d4:	f109 0514 	add.w	r5, r9, #20
 800c3d8:	f104 0e14 	add.w	lr, r4, #20
 800c3dc:	f100 0b14 	add.w	fp, r0, #20
 800c3e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	46d9      	mov	r9, fp
 800c3ec:	f04f 0c00 	mov.w	ip, #0
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	fa1f f38a 	uxth.w	r3, sl
 800c400:	4619      	mov	r1, r3
 800c402:	b283      	uxth	r3, r0
 800c404:	1acb      	subs	r3, r1, r3
 800c406:	0c00      	lsrs	r0, r0, #16
 800c408:	4463      	add	r3, ip
 800c40a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c40e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c418:	4576      	cmp	r6, lr
 800c41a:	f849 3b04 	str.w	r3, [r9], #4
 800c41e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c422:	d8e5      	bhi.n	800c3f0 <__mdiff+0x88>
 800c424:	1b33      	subs	r3, r6, r4
 800c426:	3b15      	subs	r3, #21
 800c428:	f023 0303 	bic.w	r3, r3, #3
 800c42c:	3415      	adds	r4, #21
 800c42e:	3304      	adds	r3, #4
 800c430:	42a6      	cmp	r6, r4
 800c432:	bf38      	it	cc
 800c434:	2304      	movcc	r3, #4
 800c436:	441d      	add	r5, r3
 800c438:	445b      	add	r3, fp
 800c43a:	461e      	mov	r6, r3
 800c43c:	462c      	mov	r4, r5
 800c43e:	4544      	cmp	r4, r8
 800c440:	d30e      	bcc.n	800c460 <__mdiff+0xf8>
 800c442:	f108 0103 	add.w	r1, r8, #3
 800c446:	1b49      	subs	r1, r1, r5
 800c448:	f021 0103 	bic.w	r1, r1, #3
 800c44c:	3d03      	subs	r5, #3
 800c44e:	45a8      	cmp	r8, r5
 800c450:	bf38      	it	cc
 800c452:	2100      	movcc	r1, #0
 800c454:	440b      	add	r3, r1
 800c456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c45a:	b191      	cbz	r1, 800c482 <__mdiff+0x11a>
 800c45c:	6117      	str	r7, [r2, #16]
 800c45e:	e79d      	b.n	800c39c <__mdiff+0x34>
 800c460:	f854 1b04 	ldr.w	r1, [r4], #4
 800c464:	46e6      	mov	lr, ip
 800c466:	0c08      	lsrs	r0, r1, #16
 800c468:	fa1c fc81 	uxtah	ip, ip, r1
 800c46c:	4471      	add	r1, lr
 800c46e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c472:	b289      	uxth	r1, r1
 800c474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c478:	f846 1b04 	str.w	r1, [r6], #4
 800c47c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c480:	e7dd      	b.n	800c43e <__mdiff+0xd6>
 800c482:	3f01      	subs	r7, #1
 800c484:	e7e7      	b.n	800c456 <__mdiff+0xee>
 800c486:	bf00      	nop
 800c488:	0800ce64 	.word	0x0800ce64
 800c48c:	0800ce75 	.word	0x0800ce75

0800c490 <__d2b>:
 800c490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c494:	460f      	mov	r7, r1
 800c496:	2101      	movs	r1, #1
 800c498:	ec59 8b10 	vmov	r8, r9, d0
 800c49c:	4616      	mov	r6, r2
 800c49e:	f7ff fcd5 	bl	800be4c <_Balloc>
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	b930      	cbnz	r0, 800c4b4 <__d2b+0x24>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	4b23      	ldr	r3, [pc, #140]	@ (800c538 <__d2b+0xa8>)
 800c4aa:	4824      	ldr	r0, [pc, #144]	@ (800c53c <__d2b+0xac>)
 800c4ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c4b0:	f7fd ff50 	bl	800a354 <__assert_func>
 800c4b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4bc:	b10d      	cbz	r5, 800c4c2 <__d2b+0x32>
 800c4be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c4c8:	d023      	beq.n	800c512 <__d2b+0x82>
 800c4ca:	4668      	mov	r0, sp
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	f7ff fd84 	bl	800bfda <__lo0bits>
 800c4d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4d6:	b1d0      	cbz	r0, 800c50e <__d2b+0x7e>
 800c4d8:	f1c0 0320 	rsb	r3, r0, #32
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	430b      	orrs	r3, r1
 800c4e2:	40c2      	lsrs	r2, r0
 800c4e4:	6163      	str	r3, [r4, #20]
 800c4e6:	9201      	str	r2, [sp, #4]
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	61a3      	str	r3, [r4, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bf0c      	ite	eq
 800c4f0:	2201      	moveq	r2, #1
 800c4f2:	2202      	movne	r2, #2
 800c4f4:	6122      	str	r2, [r4, #16]
 800c4f6:	b1a5      	cbz	r5, 800c522 <__d2b+0x92>
 800c4f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4fc:	4405      	add	r5, r0
 800c4fe:	603d      	str	r5, [r7, #0]
 800c500:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c504:	6030      	str	r0, [r6, #0]
 800c506:	4620      	mov	r0, r4
 800c508:	b003      	add	sp, #12
 800c50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c50e:	6161      	str	r1, [r4, #20]
 800c510:	e7ea      	b.n	800c4e8 <__d2b+0x58>
 800c512:	a801      	add	r0, sp, #4
 800c514:	f7ff fd61 	bl	800bfda <__lo0bits>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	6163      	str	r3, [r4, #20]
 800c51c:	3020      	adds	r0, #32
 800c51e:	2201      	movs	r2, #1
 800c520:	e7e8      	b.n	800c4f4 <__d2b+0x64>
 800c522:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c526:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c52a:	6038      	str	r0, [r7, #0]
 800c52c:	6918      	ldr	r0, [r3, #16]
 800c52e:	f7ff fd35 	bl	800bf9c <__hi0bits>
 800c532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c536:	e7e5      	b.n	800c504 <__d2b+0x74>
 800c538:	0800ce64 	.word	0x0800ce64
 800c53c:	0800ce75 	.word	0x0800ce75

0800c540 <__sfputc_r>:
 800c540:	6893      	ldr	r3, [r2, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	b410      	push	{r4}
 800c548:	6093      	str	r3, [r2, #8]
 800c54a:	da08      	bge.n	800c55e <__sfputc_r+0x1e>
 800c54c:	6994      	ldr	r4, [r2, #24]
 800c54e:	42a3      	cmp	r3, r4
 800c550:	db01      	blt.n	800c556 <__sfputc_r+0x16>
 800c552:	290a      	cmp	r1, #10
 800c554:	d103      	bne.n	800c55e <__sfputc_r+0x1e>
 800c556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55a:	f000 b9df 	b.w	800c91c <__swbuf_r>
 800c55e:	6813      	ldr	r3, [r2, #0]
 800c560:	1c58      	adds	r0, r3, #1
 800c562:	6010      	str	r0, [r2, #0]
 800c564:	7019      	strb	r1, [r3, #0]
 800c566:	4608      	mov	r0, r1
 800c568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <__sfputs_r>:
 800c56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c570:	4606      	mov	r6, r0
 800c572:	460f      	mov	r7, r1
 800c574:	4614      	mov	r4, r2
 800c576:	18d5      	adds	r5, r2, r3
 800c578:	42ac      	cmp	r4, r5
 800c57a:	d101      	bne.n	800c580 <__sfputs_r+0x12>
 800c57c:	2000      	movs	r0, #0
 800c57e:	e007      	b.n	800c590 <__sfputs_r+0x22>
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	463a      	mov	r2, r7
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ffda 	bl	800c540 <__sfputc_r>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d1f3      	bne.n	800c578 <__sfputs_r+0xa>
 800c590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c594 <_vfiprintf_r>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	460d      	mov	r5, r1
 800c59a:	b09d      	sub	sp, #116	@ 0x74
 800c59c:	4614      	mov	r4, r2
 800c59e:	4698      	mov	r8, r3
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	b118      	cbz	r0, 800c5ac <_vfiprintf_r+0x18>
 800c5a4:	6a03      	ldr	r3, [r0, #32]
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x18>
 800c5a8:	f7fe fc8a 	bl	800aec0 <__sinit>
 800c5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5ae:	07d9      	lsls	r1, r3, #31
 800c5b0:	d405      	bmi.n	800c5be <_vfiprintf_r+0x2a>
 800c5b2:	89ab      	ldrh	r3, [r5, #12]
 800c5b4:	059a      	lsls	r2, r3, #22
 800c5b6:	d402      	bmi.n	800c5be <_vfiprintf_r+0x2a>
 800c5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ba:	f7fe fd9a 	bl	800b0f2 <__retarget_lock_acquire_recursive>
 800c5be:	89ab      	ldrh	r3, [r5, #12]
 800c5c0:	071b      	lsls	r3, r3, #28
 800c5c2:	d501      	bpl.n	800c5c8 <_vfiprintf_r+0x34>
 800c5c4:	692b      	ldr	r3, [r5, #16]
 800c5c6:	b99b      	cbnz	r3, 800c5f0 <_vfiprintf_r+0x5c>
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 f9e4 	bl	800c998 <__swsetup_r>
 800c5d0:	b170      	cbz	r0, 800c5f0 <_vfiprintf_r+0x5c>
 800c5d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d4:	07dc      	lsls	r4, r3, #31
 800c5d6:	d504      	bpl.n	800c5e2 <_vfiprintf_r+0x4e>
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	b01d      	add	sp, #116	@ 0x74
 800c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	0598      	lsls	r0, r3, #22
 800c5e6:	d4f7      	bmi.n	800c5d8 <_vfiprintf_r+0x44>
 800c5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ea:	f7fe fd83 	bl	800b0f4 <__retarget_lock_release_recursive>
 800c5ee:	e7f3      	b.n	800c5d8 <_vfiprintf_r+0x44>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fe:	2330      	movs	r3, #48	@ 0x30
 800c600:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7b0 <_vfiprintf_r+0x21c>
 800c604:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c608:	f04f 0901 	mov.w	r9, #1
 800c60c:	4623      	mov	r3, r4
 800c60e:	469a      	mov	sl, r3
 800c610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c614:	b10a      	cbz	r2, 800c61a <_vfiprintf_r+0x86>
 800c616:	2a25      	cmp	r2, #37	@ 0x25
 800c618:	d1f9      	bne.n	800c60e <_vfiprintf_r+0x7a>
 800c61a:	ebba 0b04 	subs.w	fp, sl, r4
 800c61e:	d00b      	beq.n	800c638 <_vfiprintf_r+0xa4>
 800c620:	465b      	mov	r3, fp
 800c622:	4622      	mov	r2, r4
 800c624:	4629      	mov	r1, r5
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff ffa1 	bl	800c56e <__sfputs_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	f000 80a7 	beq.w	800c780 <_vfiprintf_r+0x1ec>
 800c632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c634:	445a      	add	r2, fp
 800c636:	9209      	str	r2, [sp, #36]	@ 0x24
 800c638:	f89a 3000 	ldrb.w	r3, [sl]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 809f 	beq.w	800c780 <_vfiprintf_r+0x1ec>
 800c642:	2300      	movs	r3, #0
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64c:	f10a 0a01 	add.w	sl, sl, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	9307      	str	r3, [sp, #28]
 800c654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c658:	931a      	str	r3, [sp, #104]	@ 0x68
 800c65a:	4654      	mov	r4, sl
 800c65c:	2205      	movs	r2, #5
 800c65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c662:	4853      	ldr	r0, [pc, #332]	@ (800c7b0 <_vfiprintf_r+0x21c>)
 800c664:	f7f3 fdb4 	bl	80001d0 <memchr>
 800c668:	9a04      	ldr	r2, [sp, #16]
 800c66a:	b9d8      	cbnz	r0, 800c6a4 <_vfiprintf_r+0x110>
 800c66c:	06d1      	lsls	r1, r2, #27
 800c66e:	bf44      	itt	mi
 800c670:	2320      	movmi	r3, #32
 800c672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c676:	0713      	lsls	r3, r2, #28
 800c678:	bf44      	itt	mi
 800c67a:	232b      	movmi	r3, #43	@ 0x2b
 800c67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c680:	f89a 3000 	ldrb.w	r3, [sl]
 800c684:	2b2a      	cmp	r3, #42	@ 0x2a
 800c686:	d015      	beq.n	800c6b4 <_vfiprintf_r+0x120>
 800c688:	9a07      	ldr	r2, [sp, #28]
 800c68a:	4654      	mov	r4, sl
 800c68c:	2000      	movs	r0, #0
 800c68e:	f04f 0c0a 	mov.w	ip, #10
 800c692:	4621      	mov	r1, r4
 800c694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c698:	3b30      	subs	r3, #48	@ 0x30
 800c69a:	2b09      	cmp	r3, #9
 800c69c:	d94b      	bls.n	800c736 <_vfiprintf_r+0x1a2>
 800c69e:	b1b0      	cbz	r0, 800c6ce <_vfiprintf_r+0x13a>
 800c6a0:	9207      	str	r2, [sp, #28]
 800c6a2:	e014      	b.n	800c6ce <_vfiprintf_r+0x13a>
 800c6a4:	eba0 0308 	sub.w	r3, r0, r8
 800c6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	46a2      	mov	sl, r4
 800c6b2:	e7d2      	b.n	800c65a <_vfiprintf_r+0xc6>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	1d19      	adds	r1, r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	9103      	str	r1, [sp, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfbb      	ittet	lt
 800c6c0:	425b      	neglt	r3, r3
 800c6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c6:	9307      	strge	r3, [sp, #28]
 800c6c8:	9307      	strlt	r3, [sp, #28]
 800c6ca:	bfb8      	it	lt
 800c6cc:	9204      	strlt	r2, [sp, #16]
 800c6ce:	7823      	ldrb	r3, [r4, #0]
 800c6d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d2:	d10a      	bne.n	800c6ea <_vfiprintf_r+0x156>
 800c6d4:	7863      	ldrb	r3, [r4, #1]
 800c6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d8:	d132      	bne.n	800c740 <_vfiprintf_r+0x1ac>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	9203      	str	r2, [sp, #12]
 800c6e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e6:	3402      	adds	r4, #2
 800c6e8:	9305      	str	r3, [sp, #20]
 800c6ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7c0 <_vfiprintf_r+0x22c>
 800c6ee:	7821      	ldrb	r1, [r4, #0]
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	f7f3 fd6c 	bl	80001d0 <memchr>
 800c6f8:	b138      	cbz	r0, 800c70a <_vfiprintf_r+0x176>
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	eba0 000a 	sub.w	r0, r0, sl
 800c700:	2240      	movs	r2, #64	@ 0x40
 800c702:	4082      	lsls	r2, r0
 800c704:	4313      	orrs	r3, r2
 800c706:	3401      	adds	r4, #1
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70e:	4829      	ldr	r0, [pc, #164]	@ (800c7b4 <_vfiprintf_r+0x220>)
 800c710:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c714:	2206      	movs	r2, #6
 800c716:	f7f3 fd5b 	bl	80001d0 <memchr>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d03f      	beq.n	800c79e <_vfiprintf_r+0x20a>
 800c71e:	4b26      	ldr	r3, [pc, #152]	@ (800c7b8 <_vfiprintf_r+0x224>)
 800c720:	bb1b      	cbnz	r3, 800c76a <_vfiprintf_r+0x1d6>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	3307      	adds	r3, #7
 800c726:	f023 0307 	bic.w	r3, r3, #7
 800c72a:	3308      	adds	r3, #8
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c730:	443b      	add	r3, r7
 800c732:	9309      	str	r3, [sp, #36]	@ 0x24
 800c734:	e76a      	b.n	800c60c <_vfiprintf_r+0x78>
 800c736:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73a:	460c      	mov	r4, r1
 800c73c:	2001      	movs	r0, #1
 800c73e:	e7a8      	b.n	800c692 <_vfiprintf_r+0xfe>
 800c740:	2300      	movs	r3, #0
 800c742:	3401      	adds	r4, #1
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	4619      	mov	r1, r3
 800c748:	f04f 0c0a 	mov.w	ip, #10
 800c74c:	4620      	mov	r0, r4
 800c74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c752:	3a30      	subs	r2, #48	@ 0x30
 800c754:	2a09      	cmp	r2, #9
 800c756:	d903      	bls.n	800c760 <_vfiprintf_r+0x1cc>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0c6      	beq.n	800c6ea <_vfiprintf_r+0x156>
 800c75c:	9105      	str	r1, [sp, #20]
 800c75e:	e7c4      	b.n	800c6ea <_vfiprintf_r+0x156>
 800c760:	fb0c 2101 	mla	r1, ip, r1, r2
 800c764:	4604      	mov	r4, r0
 800c766:	2301      	movs	r3, #1
 800c768:	e7f0      	b.n	800c74c <_vfiprintf_r+0x1b8>
 800c76a:	ab03      	add	r3, sp, #12
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	462a      	mov	r2, r5
 800c770:	4b12      	ldr	r3, [pc, #72]	@ (800c7bc <_vfiprintf_r+0x228>)
 800c772:	a904      	add	r1, sp, #16
 800c774:	4630      	mov	r0, r6
 800c776:	f7fd ff61 	bl	800a63c <_printf_float>
 800c77a:	4607      	mov	r7, r0
 800c77c:	1c78      	adds	r0, r7, #1
 800c77e:	d1d6      	bne.n	800c72e <_vfiprintf_r+0x19a>
 800c780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c782:	07d9      	lsls	r1, r3, #31
 800c784:	d405      	bmi.n	800c792 <_vfiprintf_r+0x1fe>
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	059a      	lsls	r2, r3, #22
 800c78a:	d402      	bmi.n	800c792 <_vfiprintf_r+0x1fe>
 800c78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c78e:	f7fe fcb1 	bl	800b0f4 <__retarget_lock_release_recursive>
 800c792:	89ab      	ldrh	r3, [r5, #12]
 800c794:	065b      	lsls	r3, r3, #25
 800c796:	f53f af1f 	bmi.w	800c5d8 <_vfiprintf_r+0x44>
 800c79a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c79c:	e71e      	b.n	800c5dc <_vfiprintf_r+0x48>
 800c79e:	ab03      	add	r3, sp, #12
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	4b05      	ldr	r3, [pc, #20]	@ (800c7bc <_vfiprintf_r+0x228>)
 800c7a6:	a904      	add	r1, sp, #16
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7fe f9df 	bl	800ab6c <_printf_i>
 800c7ae:	e7e4      	b.n	800c77a <_vfiprintf_r+0x1e6>
 800c7b0:	0800cece 	.word	0x0800cece
 800c7b4:	0800ced8 	.word	0x0800ced8
 800c7b8:	0800a63d 	.word	0x0800a63d
 800c7bc:	0800c56f 	.word	0x0800c56f
 800c7c0:	0800ced4 	.word	0x0800ced4

0800c7c4 <__sflush_r>:
 800c7c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	0716      	lsls	r6, r2, #28
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	d454      	bmi.n	800c87e <__sflush_r+0xba>
 800c7d4:	684b      	ldr	r3, [r1, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dc02      	bgt.n	800c7e0 <__sflush_r+0x1c>
 800c7da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dd48      	ble.n	800c872 <__sflush_r+0xae>
 800c7e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	d045      	beq.n	800c872 <__sflush_r+0xae>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7ec:	682f      	ldr	r7, [r5, #0]
 800c7ee:	6a21      	ldr	r1, [r4, #32]
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	d030      	beq.n	800c856 <__sflush_r+0x92>
 800c7f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	0759      	lsls	r1, r3, #29
 800c7fa:	d505      	bpl.n	800c808 <__sflush_r+0x44>
 800c7fc:	6863      	ldr	r3, [r4, #4]
 800c7fe:	1ad2      	subs	r2, r2, r3
 800c800:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c802:	b10b      	cbz	r3, 800c808 <__sflush_r+0x44>
 800c804:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	2300      	movs	r3, #0
 800c80a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c80c:	6a21      	ldr	r1, [r4, #32]
 800c80e:	4628      	mov	r0, r5
 800c810:	47b0      	blx	r6
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	89a3      	ldrh	r3, [r4, #12]
 800c816:	d106      	bne.n	800c826 <__sflush_r+0x62>
 800c818:	6829      	ldr	r1, [r5, #0]
 800c81a:	291d      	cmp	r1, #29
 800c81c:	d82b      	bhi.n	800c876 <__sflush_r+0xb2>
 800c81e:	4a2a      	ldr	r2, [pc, #168]	@ (800c8c8 <__sflush_r+0x104>)
 800c820:	40ca      	lsrs	r2, r1
 800c822:	07d6      	lsls	r6, r2, #31
 800c824:	d527      	bpl.n	800c876 <__sflush_r+0xb2>
 800c826:	2200      	movs	r2, #0
 800c828:	6062      	str	r2, [r4, #4]
 800c82a:	04d9      	lsls	r1, r3, #19
 800c82c:	6922      	ldr	r2, [r4, #16]
 800c82e:	6022      	str	r2, [r4, #0]
 800c830:	d504      	bpl.n	800c83c <__sflush_r+0x78>
 800c832:	1c42      	adds	r2, r0, #1
 800c834:	d101      	bne.n	800c83a <__sflush_r+0x76>
 800c836:	682b      	ldr	r3, [r5, #0]
 800c838:	b903      	cbnz	r3, 800c83c <__sflush_r+0x78>
 800c83a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c83c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c83e:	602f      	str	r7, [r5, #0]
 800c840:	b1b9      	cbz	r1, 800c872 <__sflush_r+0xae>
 800c842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c846:	4299      	cmp	r1, r3
 800c848:	d002      	beq.n	800c850 <__sflush_r+0x8c>
 800c84a:	4628      	mov	r0, r5
 800c84c:	f7ff fab4 	bl	800bdb8 <_free_r>
 800c850:	2300      	movs	r3, #0
 800c852:	6363      	str	r3, [r4, #52]	@ 0x34
 800c854:	e00d      	b.n	800c872 <__sflush_r+0xae>
 800c856:	2301      	movs	r3, #1
 800c858:	4628      	mov	r0, r5
 800c85a:	47b0      	blx	r6
 800c85c:	4602      	mov	r2, r0
 800c85e:	1c50      	adds	r0, r2, #1
 800c860:	d1c9      	bne.n	800c7f6 <__sflush_r+0x32>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0c6      	beq.n	800c7f6 <__sflush_r+0x32>
 800c868:	2b1d      	cmp	r3, #29
 800c86a:	d001      	beq.n	800c870 <__sflush_r+0xac>
 800c86c:	2b16      	cmp	r3, #22
 800c86e:	d11e      	bne.n	800c8ae <__sflush_r+0xea>
 800c870:	602f      	str	r7, [r5, #0]
 800c872:	2000      	movs	r0, #0
 800c874:	e022      	b.n	800c8bc <__sflush_r+0xf8>
 800c876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	e01b      	b.n	800c8b6 <__sflush_r+0xf2>
 800c87e:	690f      	ldr	r7, [r1, #16]
 800c880:	2f00      	cmp	r7, #0
 800c882:	d0f6      	beq.n	800c872 <__sflush_r+0xae>
 800c884:	0793      	lsls	r3, r2, #30
 800c886:	680e      	ldr	r6, [r1, #0]
 800c888:	bf08      	it	eq
 800c88a:	694b      	ldreq	r3, [r1, #20]
 800c88c:	600f      	str	r7, [r1, #0]
 800c88e:	bf18      	it	ne
 800c890:	2300      	movne	r3, #0
 800c892:	eba6 0807 	sub.w	r8, r6, r7
 800c896:	608b      	str	r3, [r1, #8]
 800c898:	f1b8 0f00 	cmp.w	r8, #0
 800c89c:	dde9      	ble.n	800c872 <__sflush_r+0xae>
 800c89e:	6a21      	ldr	r1, [r4, #32]
 800c8a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8a2:	4643      	mov	r3, r8
 800c8a4:	463a      	mov	r2, r7
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	47b0      	blx	r6
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	dc08      	bgt.n	800c8c0 <__sflush_r+0xfc>
 800c8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	4407      	add	r7, r0
 800c8c2:	eba8 0800 	sub.w	r8, r8, r0
 800c8c6:	e7e7      	b.n	800c898 <__sflush_r+0xd4>
 800c8c8:	20400001 	.word	0x20400001

0800c8cc <_fflush_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	690b      	ldr	r3, [r1, #16]
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	b913      	cbnz	r3, 800c8dc <_fflush_r+0x10>
 800c8d6:	2500      	movs	r5, #0
 800c8d8:	4628      	mov	r0, r5
 800c8da:	bd38      	pop	{r3, r4, r5, pc}
 800c8dc:	b118      	cbz	r0, 800c8e6 <_fflush_r+0x1a>
 800c8de:	6a03      	ldr	r3, [r0, #32]
 800c8e0:	b90b      	cbnz	r3, 800c8e6 <_fflush_r+0x1a>
 800c8e2:	f7fe faed 	bl	800aec0 <__sinit>
 800c8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0f3      	beq.n	800c8d6 <_fflush_r+0xa>
 800c8ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8f0:	07d0      	lsls	r0, r2, #31
 800c8f2:	d404      	bmi.n	800c8fe <_fflush_r+0x32>
 800c8f4:	0599      	lsls	r1, r3, #22
 800c8f6:	d402      	bmi.n	800c8fe <_fflush_r+0x32>
 800c8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8fa:	f7fe fbfa 	bl	800b0f2 <__retarget_lock_acquire_recursive>
 800c8fe:	4628      	mov	r0, r5
 800c900:	4621      	mov	r1, r4
 800c902:	f7ff ff5f 	bl	800c7c4 <__sflush_r>
 800c906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c908:	07da      	lsls	r2, r3, #31
 800c90a:	4605      	mov	r5, r0
 800c90c:	d4e4      	bmi.n	800c8d8 <_fflush_r+0xc>
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	059b      	lsls	r3, r3, #22
 800c912:	d4e1      	bmi.n	800c8d8 <_fflush_r+0xc>
 800c914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c916:	f7fe fbed 	bl	800b0f4 <__retarget_lock_release_recursive>
 800c91a:	e7dd      	b.n	800c8d8 <_fflush_r+0xc>

0800c91c <__swbuf_r>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	460e      	mov	r6, r1
 800c920:	4614      	mov	r4, r2
 800c922:	4605      	mov	r5, r0
 800c924:	b118      	cbz	r0, 800c92e <__swbuf_r+0x12>
 800c926:	6a03      	ldr	r3, [r0, #32]
 800c928:	b90b      	cbnz	r3, 800c92e <__swbuf_r+0x12>
 800c92a:	f7fe fac9 	bl	800aec0 <__sinit>
 800c92e:	69a3      	ldr	r3, [r4, #24]
 800c930:	60a3      	str	r3, [r4, #8]
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	071a      	lsls	r2, r3, #28
 800c936:	d501      	bpl.n	800c93c <__swbuf_r+0x20>
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	b943      	cbnz	r3, 800c94e <__swbuf_r+0x32>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 f82a 	bl	800c998 <__swsetup_r>
 800c944:	b118      	cbz	r0, 800c94e <__swbuf_r+0x32>
 800c946:	f04f 37ff 	mov.w	r7, #4294967295
 800c94a:	4638      	mov	r0, r7
 800c94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	6922      	ldr	r2, [r4, #16]
 800c952:	1a98      	subs	r0, r3, r2
 800c954:	6963      	ldr	r3, [r4, #20]
 800c956:	b2f6      	uxtb	r6, r6
 800c958:	4283      	cmp	r3, r0
 800c95a:	4637      	mov	r7, r6
 800c95c:	dc05      	bgt.n	800c96a <__swbuf_r+0x4e>
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff ffb3 	bl	800c8cc <_fflush_r>
 800c966:	2800      	cmp	r0, #0
 800c968:	d1ed      	bne.n	800c946 <__swbuf_r+0x2a>
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	3b01      	subs	r3, #1
 800c96e:	60a3      	str	r3, [r4, #8]
 800c970:	6823      	ldr	r3, [r4, #0]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	6022      	str	r2, [r4, #0]
 800c976:	701e      	strb	r6, [r3, #0]
 800c978:	6962      	ldr	r2, [r4, #20]
 800c97a:	1c43      	adds	r3, r0, #1
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d004      	beq.n	800c98a <__swbuf_r+0x6e>
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	07db      	lsls	r3, r3, #31
 800c984:	d5e1      	bpl.n	800c94a <__swbuf_r+0x2e>
 800c986:	2e0a      	cmp	r6, #10
 800c988:	d1df      	bne.n	800c94a <__swbuf_r+0x2e>
 800c98a:	4621      	mov	r1, r4
 800c98c:	4628      	mov	r0, r5
 800c98e:	f7ff ff9d 	bl	800c8cc <_fflush_r>
 800c992:	2800      	cmp	r0, #0
 800c994:	d0d9      	beq.n	800c94a <__swbuf_r+0x2e>
 800c996:	e7d6      	b.n	800c946 <__swbuf_r+0x2a>

0800c998 <__swsetup_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4b29      	ldr	r3, [pc, #164]	@ (800ca40 <__swsetup_r+0xa8>)
 800c99c:	4605      	mov	r5, r0
 800c99e:	6818      	ldr	r0, [r3, #0]
 800c9a0:	460c      	mov	r4, r1
 800c9a2:	b118      	cbz	r0, 800c9ac <__swsetup_r+0x14>
 800c9a4:	6a03      	ldr	r3, [r0, #32]
 800c9a6:	b90b      	cbnz	r3, 800c9ac <__swsetup_r+0x14>
 800c9a8:	f7fe fa8a 	bl	800aec0 <__sinit>
 800c9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b0:	0719      	lsls	r1, r3, #28
 800c9b2:	d422      	bmi.n	800c9fa <__swsetup_r+0x62>
 800c9b4:	06da      	lsls	r2, r3, #27
 800c9b6:	d407      	bmi.n	800c9c8 <__swsetup_r+0x30>
 800c9b8:	2209      	movs	r2, #9
 800c9ba:	602a      	str	r2, [r5, #0]
 800c9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c6:	e033      	b.n	800ca30 <__swsetup_r+0x98>
 800c9c8:	0758      	lsls	r0, r3, #29
 800c9ca:	d512      	bpl.n	800c9f2 <__swsetup_r+0x5a>
 800c9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9ce:	b141      	cbz	r1, 800c9e2 <__swsetup_r+0x4a>
 800c9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9d4:	4299      	cmp	r1, r3
 800c9d6:	d002      	beq.n	800c9de <__swsetup_r+0x46>
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f7ff f9ed 	bl	800bdb8 <_free_r>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	6063      	str	r3, [r4, #4]
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f043 0308 	orr.w	r3, r3, #8
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	b94b      	cbnz	r3, 800ca12 <__swsetup_r+0x7a>
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca08:	d003      	beq.n	800ca12 <__swsetup_r+0x7a>
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f000 f8c4 	bl	800cb9a <__smakebuf_r>
 800ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca16:	f013 0201 	ands.w	r2, r3, #1
 800ca1a:	d00a      	beq.n	800ca32 <__swsetup_r+0x9a>
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	60a2      	str	r2, [r4, #8]
 800ca20:	6962      	ldr	r2, [r4, #20]
 800ca22:	4252      	negs	r2, r2
 800ca24:	61a2      	str	r2, [r4, #24]
 800ca26:	6922      	ldr	r2, [r4, #16]
 800ca28:	b942      	cbnz	r2, 800ca3c <__swsetup_r+0xa4>
 800ca2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca2e:	d1c5      	bne.n	800c9bc <__swsetup_r+0x24>
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
 800ca32:	0799      	lsls	r1, r3, #30
 800ca34:	bf58      	it	pl
 800ca36:	6962      	ldrpl	r2, [r4, #20]
 800ca38:	60a2      	str	r2, [r4, #8]
 800ca3a:	e7f4      	b.n	800ca26 <__swsetup_r+0x8e>
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e7f7      	b.n	800ca30 <__swsetup_r+0x98>
 800ca40:	20000108 	.word	0x20000108

0800ca44 <_raise_r>:
 800ca44:	291f      	cmp	r1, #31
 800ca46:	b538      	push	{r3, r4, r5, lr}
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	d904      	bls.n	800ca58 <_raise_r+0x14>
 800ca4e:	2316      	movs	r3, #22
 800ca50:	6003      	str	r3, [r0, #0]
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295
 800ca56:	bd38      	pop	{r3, r4, r5, pc}
 800ca58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca5a:	b112      	cbz	r2, 800ca62 <_raise_r+0x1e>
 800ca5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca60:	b94b      	cbnz	r3, 800ca76 <_raise_r+0x32>
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 f830 	bl	800cac8 <_getpid_r>
 800ca68:	4622      	mov	r2, r4
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca72:	f000 b817 	b.w	800caa4 <_kill_r>
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d00a      	beq.n	800ca90 <_raise_r+0x4c>
 800ca7a:	1c59      	adds	r1, r3, #1
 800ca7c:	d103      	bne.n	800ca86 <_raise_r+0x42>
 800ca7e:	2316      	movs	r3, #22
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	2001      	movs	r0, #1
 800ca84:	e7e7      	b.n	800ca56 <_raise_r+0x12>
 800ca86:	2100      	movs	r1, #0
 800ca88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4798      	blx	r3
 800ca90:	2000      	movs	r0, #0
 800ca92:	e7e0      	b.n	800ca56 <_raise_r+0x12>

0800ca94 <raise>:
 800ca94:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <raise+0xc>)
 800ca96:	4601      	mov	r1, r0
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	f7ff bfd3 	b.w	800ca44 <_raise_r>
 800ca9e:	bf00      	nop
 800caa0:	20000108 	.word	0x20000108

0800caa4 <_kill_r>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4d07      	ldr	r5, [pc, #28]	@ (800cac4 <_kill_r+0x20>)
 800caa8:	2300      	movs	r3, #0
 800caaa:	4604      	mov	r4, r0
 800caac:	4608      	mov	r0, r1
 800caae:	4611      	mov	r1, r2
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	f7f5 fcfb 	bl	80024ac <_kill>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	d102      	bne.n	800cac0 <_kill_r+0x1c>
 800caba:	682b      	ldr	r3, [r5, #0]
 800cabc:	b103      	cbz	r3, 800cac0 <_kill_r+0x1c>
 800cabe:	6023      	str	r3, [r4, #0]
 800cac0:	bd38      	pop	{r3, r4, r5, pc}
 800cac2:	bf00      	nop
 800cac4:	200020d4 	.word	0x200020d4

0800cac8 <_getpid_r>:
 800cac8:	f7f5 bce8 	b.w	800249c <_getpid>

0800cacc <memcpy>:
 800cacc:	440a      	add	r2, r1
 800cace:	4291      	cmp	r1, r2
 800cad0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad4:	d100      	bne.n	800cad8 <memcpy+0xc>
 800cad6:	4770      	bx	lr
 800cad8:	b510      	push	{r4, lr}
 800cada:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cade:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae2:	4291      	cmp	r1, r2
 800cae4:	d1f9      	bne.n	800cada <memcpy+0xe>
 800cae6:	bd10      	pop	{r4, pc}

0800cae8 <_calloc_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	fba1 5402 	umull	r5, r4, r1, r2
 800caee:	b934      	cbnz	r4, 800cafe <_calloc_r+0x16>
 800caf0:	4629      	mov	r1, r5
 800caf2:	f7fd fc77 	bl	800a3e4 <_malloc_r>
 800caf6:	4606      	mov	r6, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <_calloc_r+0x1e>
 800cafa:	4630      	mov	r0, r6
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	220c      	movs	r2, #12
 800cb00:	6002      	str	r2, [r0, #0]
 800cb02:	2600      	movs	r6, #0
 800cb04:	e7f9      	b.n	800cafa <_calloc_r+0x12>
 800cb06:	462a      	mov	r2, r5
 800cb08:	4621      	mov	r1, r4
 800cb0a:	f7fe fa64 	bl	800afd6 <memset>
 800cb0e:	e7f4      	b.n	800cafa <_calloc_r+0x12>

0800cb10 <__ascii_mbtowc>:
 800cb10:	b082      	sub	sp, #8
 800cb12:	b901      	cbnz	r1, 800cb16 <__ascii_mbtowc+0x6>
 800cb14:	a901      	add	r1, sp, #4
 800cb16:	b142      	cbz	r2, 800cb2a <__ascii_mbtowc+0x1a>
 800cb18:	b14b      	cbz	r3, 800cb2e <__ascii_mbtowc+0x1e>
 800cb1a:	7813      	ldrb	r3, [r2, #0]
 800cb1c:	600b      	str	r3, [r1, #0]
 800cb1e:	7812      	ldrb	r2, [r2, #0]
 800cb20:	1e10      	subs	r0, r2, #0
 800cb22:	bf18      	it	ne
 800cb24:	2001      	movne	r0, #1
 800cb26:	b002      	add	sp, #8
 800cb28:	4770      	bx	lr
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	e7fb      	b.n	800cb26 <__ascii_mbtowc+0x16>
 800cb2e:	f06f 0001 	mvn.w	r0, #1
 800cb32:	e7f8      	b.n	800cb26 <__ascii_mbtowc+0x16>

0800cb34 <__ascii_wctomb>:
 800cb34:	4603      	mov	r3, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	b141      	cbz	r1, 800cb4c <__ascii_wctomb+0x18>
 800cb3a:	2aff      	cmp	r2, #255	@ 0xff
 800cb3c:	d904      	bls.n	800cb48 <__ascii_wctomb+0x14>
 800cb3e:	228a      	movs	r2, #138	@ 0x8a
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295
 800cb46:	4770      	bx	lr
 800cb48:	700a      	strb	r2, [r1, #0]
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	4770      	bx	lr

0800cb4e <__swhatbuf_r>:
 800cb4e:	b570      	push	{r4, r5, r6, lr}
 800cb50:	460c      	mov	r4, r1
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	2900      	cmp	r1, #0
 800cb58:	b096      	sub	sp, #88	@ 0x58
 800cb5a:	4615      	mov	r5, r2
 800cb5c:	461e      	mov	r6, r3
 800cb5e:	da0d      	bge.n	800cb7c <__swhatbuf_r+0x2e>
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb66:	f04f 0100 	mov.w	r1, #0
 800cb6a:	bf14      	ite	ne
 800cb6c:	2340      	movne	r3, #64	@ 0x40
 800cb6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb72:	2000      	movs	r0, #0
 800cb74:	6031      	str	r1, [r6, #0]
 800cb76:	602b      	str	r3, [r5, #0]
 800cb78:	b016      	add	sp, #88	@ 0x58
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	466a      	mov	r2, sp
 800cb7e:	f000 f849 	bl	800cc14 <_fstat_r>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	dbec      	blt.n	800cb60 <__swhatbuf_r+0x12>
 800cb86:	9901      	ldr	r1, [sp, #4]
 800cb88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb90:	4259      	negs	r1, r3
 800cb92:	4159      	adcs	r1, r3
 800cb94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb98:	e7eb      	b.n	800cb72 <__swhatbuf_r+0x24>

0800cb9a <__smakebuf_r>:
 800cb9a:	898b      	ldrh	r3, [r1, #12]
 800cb9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb9e:	079d      	lsls	r5, r3, #30
 800cba0:	4606      	mov	r6, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	d507      	bpl.n	800cbb6 <__smakebuf_r+0x1c>
 800cba6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	6123      	str	r3, [r4, #16]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	6163      	str	r3, [r4, #20]
 800cbb2:	b003      	add	sp, #12
 800cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb6:	ab01      	add	r3, sp, #4
 800cbb8:	466a      	mov	r2, sp
 800cbba:	f7ff ffc8 	bl	800cb4e <__swhatbuf_r>
 800cbbe:	9f00      	ldr	r7, [sp, #0]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7fd fc0d 	bl	800a3e4 <_malloc_r>
 800cbca:	b948      	cbnz	r0, 800cbe0 <__smakebuf_r+0x46>
 800cbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd0:	059a      	lsls	r2, r3, #22
 800cbd2:	d4ee      	bmi.n	800cbb2 <__smakebuf_r+0x18>
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	f043 0302 	orr.w	r3, r3, #2
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	e7e2      	b.n	800cba6 <__smakebuf_r+0xc>
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	6020      	str	r0, [r4, #0]
 800cbe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	9b01      	ldr	r3, [sp, #4]
 800cbec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbf0:	b15b      	cbz	r3, 800cc0a <__smakebuf_r+0x70>
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f000 f81e 	bl	800cc38 <_isatty_r>
 800cbfc:	b128      	cbz	r0, 800cc0a <__smakebuf_r+0x70>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	81a3      	strh	r3, [r4, #12]
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	431d      	orrs	r5, r3
 800cc0e:	81a5      	strh	r5, [r4, #12]
 800cc10:	e7cf      	b.n	800cbb2 <__smakebuf_r+0x18>
	...

0800cc14 <_fstat_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4d07      	ldr	r5, [pc, #28]	@ (800cc34 <_fstat_r+0x20>)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	4608      	mov	r0, r1
 800cc1e:	4611      	mov	r1, r2
 800cc20:	602b      	str	r3, [r5, #0]
 800cc22:	f7f5 fc87 	bl	8002534 <_fstat>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	d102      	bne.n	800cc30 <_fstat_r+0x1c>
 800cc2a:	682b      	ldr	r3, [r5, #0]
 800cc2c:	b103      	cbz	r3, 800cc30 <_fstat_r+0x1c>
 800cc2e:	6023      	str	r3, [r4, #0]
 800cc30:	bd38      	pop	{r3, r4, r5, pc}
 800cc32:	bf00      	nop
 800cc34:	200020d4 	.word	0x200020d4

0800cc38 <_isatty_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d06      	ldr	r5, [pc, #24]	@ (800cc54 <_isatty_r+0x1c>)
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	4604      	mov	r4, r0
 800cc40:	4608      	mov	r0, r1
 800cc42:	602b      	str	r3, [r5, #0]
 800cc44:	f7f5 fc86 	bl	8002554 <_isatty>
 800cc48:	1c43      	adds	r3, r0, #1
 800cc4a:	d102      	bne.n	800cc52 <_isatty_r+0x1a>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	b103      	cbz	r3, 800cc52 <_isatty_r+0x1a>
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	bd38      	pop	{r3, r4, r5, pc}
 800cc54:	200020d4 	.word	0x200020d4

0800cc58 <_init>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr

0800cc64 <_fini>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr
