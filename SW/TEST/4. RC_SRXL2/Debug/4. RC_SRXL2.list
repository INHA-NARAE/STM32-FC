
4. RC_SRXL2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800d358  0800d358  0000e358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7bc  0800d7bc  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d7bc  0800d7bc  0000e7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7c4  0800d7c4  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7c4  0800d7c4  0000e7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7c8  0800d7c8  0000e7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d7cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001e40  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002104  20002104  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018247  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048af  00000000  00000000  0002753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff7  00000000  00000000  0002d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028daf  00000000  00000000  0002e33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2a0  00000000  00000000  000570ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db477  00000000  00000000  0007238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d805  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066ec  00000000  00000000  0014d848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00153f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d340 	.word	0x0800d340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800d340 	.word	0x0800d340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:

#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <BuzzerPlayNote+0x54>)
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fac7 	bl	8000504 <__aeabi_ui2d>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <BuzzerPlayNote+0x58>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4c08      	ldr	r4, [pc, #32]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8000fa2:	bf00      	nop
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	0501bd00 	.word	0x0501bd00
 8000fb4:	0800d3d8 	.word	0x0800d3d8

08000fb8 <BuzzerPlayInit>:

void BuzzerPlayInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f001 ff28 	bl	8002e34 <HAL_Delay>
	TIM4->PSC = 1500;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f001 ff21 	bl	8002e34 <HAL_Delay>
	TIM4->PSC = 1000;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f001 ff1a 	bl	8002e34 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <BuzzerPlayInit+0x58>)
 8001006:	f7ff ff96 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000800 	.word	0x40000800

08001014 <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001020:	f7ff ff78 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001026:	2204      	movs	r2, #4
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

	for (int i=0; i<8; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00a      	b.n	8001046 <BuzzerPlayOneCycle+0x32>
		BuzzerPlayNote(i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <BuzzerPlayNote>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f001 fefa 	bl	8002e34 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b07      	cmp	r3, #7
 800104a:	ddf1      	ble.n	8001030 <BuzzerPlayOneCycle+0x1c>
	}
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001052:	f7ff ff70 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001056:	bf00      	nop
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40000800 	.word	0x40000800

08001064 <RB_init>:
  * @param  ptRB		
  					size 		
  * @retval unsigned int 0 성공
  */
unsigned char RB_init(RingFifo_t * ptRB, unsigned short size)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]

	if(size & (size-1))
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	3b01      	subs	r3, #1
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <RB_init+0x24>
	{
		assert(0);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <RB_init+0x64>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <RB_init+0x68>)
 8001080:	2119      	movs	r1, #25
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <RB_init+0x6c>)
 8001084:	f009 fcda 	bl	800aa3c <__assert_func>
		return 1;
	}

	ptRB->size = size;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	801a      	strh	r2, [r3, #0]
	ptRB->wrIdx= 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	805a      	strh	r2, [r3, #2]
	ptRB->rdIdx= 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	809a      	strh	r2, [r3, #4]
	ptRB->data = malloc(size);
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fceb 	bl	800aa78 <malloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	609a      	str	r2, [r3, #8]

	assert(ptRB->data);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <RB_init+0x5a>
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <RB_init+0x70>)
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <RB_init+0x68>)
 80010b6:	2122      	movs	r1, #34	@ 0x22
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <RB_init+0x6c>)
 80010ba:	f009 fcbf 	bl	800aa3c <__assert_func>

	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800d358 	.word	0x0800d358
 80010cc:	0800d418 	.word	0x0800d418
 80010d0:	0800d35c 	.word	0x0800d35c
 80010d4:	0800d380 	.word	0x0800d380

080010d8 <RB_write>:
		ptRB->rdIdx= 0;
		memset(ptRB->data, 0, ptRB->size);
}

void RB_write(RingFifo_t * ptRB, unsigned char data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  if(RB_isfull(ptRB))
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f852 	bl	800118e <RB_isfull>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d116      	bne.n	800111e <RB_write+0x46>
    return;
    
	ptRB->data[ptRB->wrIdx] = data;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	8852      	ldrh	r2, [r2, #2]
 80010f8:	4413      	add	r3, r2
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	701a      	strb	r2, [r3, #0]
	ptRB->wrIdx = (ptRB->size-1) & (ptRB->wrIdx+1);	
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21b      	sxth	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	805a      	strh	r2, [r3, #2]
 800111c:	e000      	b.n	8001120 <RB_write+0x48>
    return;
 800111e:	bf00      	nop
}
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <RB_read>:

unsigned char RB_read(RingFifo_t * ptRB)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]

	unsigned char val = ptRB->data[ptRB->rdIdx];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	8892      	ldrh	r2, [r2, #4]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]
	ptRB->rdIdx = (ptRB->size-1) & (ptRB->rdIdx+1);	
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21b      	sxth	r3, r3
 8001150:	4013      	ands	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	809a      	strh	r2, [r3, #4]

	return val;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <RB_isempty>:

unsigned char RB_isempty(RingFifo_t * ptRB)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	return (ptRB->rdIdx == ptRB->wrIdx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889a      	ldrh	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	885b      	ldrh	r3, [r3, #2]
 8001178:	429a      	cmp	r2, r3
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <RB_isfull>:

unsigned char RB_isfull(RingFifo_t * ptRB)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return ((ptRB->size-1) & ptRB->rdIdx) == ((ptRB->size-1) & (ptRB->wrIdx+1));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	889b      	ldrh	r3, [r3, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	3301      	adds	r3, #1
 80011a2:	405a      	eors	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 0210 	bic.w	r2, r3, #16
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d101      	bne.n	8001246 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	330c      	adds	r3, #12
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	330c      	adds	r3, #12
 8001280:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800

08001300 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 800130a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800130c:	4907      	ldr	r1, [pc, #28]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023800 	.word	0x40023800

08001330 <ICM42688_GPIO_SPI_Initialization>:
Struct_ICM42688 ICM42688;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	@ 0x40
 8001334:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2228      	movs	r2, #40	@ 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00a f9bd 	bl	800b6be <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001354:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001358:	f7ff ffd2 	bl	8001300 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff ffb7 	bl	80012d0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001362:	2010      	movs	r0, #16
 8001364:	f7ff ffb4 	bl	80012d0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001368:	23e0      	movs	r3, #224	@ 0xe0
 800136a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800137c:	2305      	movs	r3, #5
 800137e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4820      	ldr	r0, [pc, #128]	@ (8001408 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 8001386:	f004 fb1e 	bl	80059c6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800138e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001392:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001398:	2302      	movs	r3, #2
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013a6:	2310      	movs	r3, #16
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013b2:	230a      	movs	r3, #10
 80013b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013be:	f004 fcdc 	bl	8005d7a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013c2:	2100      	movs	r1, #0
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013c6:	f7ff ff0c 	bl	80011e2 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 80013ca:	2120      	movs	r1, #32
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013ce:	f7ff ff6f 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 80013d2:	2320      	movs	r3, #32
 80013d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013d6:	2301      	movs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4809      	ldr	r0, [pc, #36]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013ec:	f004 faeb 	bl	80059c6 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80013f0:	4806      	ldr	r0, [pc, #24]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013f2:	f7ff fee6 	bl	80011c2 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80013f6:	2120      	movs	r1, #32
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013fa:	f7ff ff4b 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	@ 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020000 	.word	0x40020000
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000

08001414 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 800141e:	bf00      	nop
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <SPI1_SendByte+0x40>)
 8001422:	f7ff ff04 	bl	800122e <LL_SPI_IsActiveFlag_TXE>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f9      	beq.n	8001420 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4619      	mov	r1, r3
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <SPI1_SendByte+0x40>)
 8001432:	f7ff ff1d 	bl	8001270 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 8001436:	bf00      	nop
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <SPI1_SendByte+0x40>)
 800143a:	f7ff fee5 	bl	8001208 <LL_SPI_IsActiveFlag_RXNE>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f9      	beq.n	8001438 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <SPI1_SendByte+0x40>)
 8001446:	f7ff ff05 	bl	8001254 <LL_SPI_ReceiveData8>
 800144a:	4603      	mov	r3, r0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013000 	.word	0x40013000

08001458 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001462:	2120      	movs	r1, #32
 8001464:	480b      	ldr	r0, [pc, #44]	@ (8001494 <ICM42688_Readbyte+0x3c>)
 8001466:	f7ff ff23 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffce 	bl	8001414 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffcb 	bl	8001414 <SPI1_SendByte>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001482:	2120      	movs	r1, #32
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <ICM42688_Readbyte+0x3c>)
 8001486:	f7ff ff05 	bl	8001294 <LL_GPIO_SetOutputPin>
	
	return val;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000

08001498 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	603a      	str	r2, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	460b      	mov	r3, r1
 80014a6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 80014ac:	2120      	movs	r1, #32
 80014ae:	4810      	ldr	r0, [pc, #64]	@ (80014f0 <ICM42688_Readbytes+0x58>)
 80014b0:	f7ff fefe 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffa9 	bl	8001414 <SPI1_SendByte>
	while(i < len)
 80014c2:	e009      	b.n	80014d8 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60fa      	str	r2, [r7, #12]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	18d4      	adds	r4, r2, r3
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ffa0 	bl	8001414 <SPI1_SendByte>
 80014d4:	4603      	mov	r3, r0
 80014d6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3f1      	bcc.n	80014c4 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 80014e0:	2120      	movs	r1, #32
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <ICM42688_Readbytes+0x58>)
 80014e4:	f7ff fed6 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 8001504:	2120      	movs	r1, #32
 8001506:	480b      	ldr	r0, [pc, #44]	@ (8001534 <ICM42688_Writebyte+0x40>)
 8001508:	f7ff fed2 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff7d 	bl	8001414 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff79 	bl	8001414 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 8001522:	2120      	movs	r1, #32
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <ICM42688_Writebyte+0x40>)
 8001526:	f7ff feb5 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 8001554:	f7ff feec 	bl	8001330 <ICM42688_GPIO_SPI_Initialization>
	
	// printf("Checking ICM42688...\n\r");
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 8001558:	2075      	movs	r0, #117	@ 0x75
 800155a:	f7ff ff7d 	bl	8001458 <ICM42688_Readbyte>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b47      	cmp	r3, #71	@ 0x47
 8001566:	d00c      	beq.n	8001582 <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b47      	cmp	r3, #71	@ 0x47
 800156c:	d009      	beq.n	8001582 <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800156e:	2075      	movs	r0, #117	@ 0x75
 8001570:	f7ff ff72 	bl	8001458 <ICM42688_Readbyte>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b12      	cmp	r3, #18
 800157c:	d001      	beq.n	8001582 <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 800157e:	2301      	movs	r3, #1
 8001580:	e02a      	b.n	80015d8 <ICM42688_Initialization+0xa0>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001582:	210f      	movs	r1, #15
 8001584:	204e      	movs	r0, #78	@ 0x4e
 8001586:	f7ff ffb5 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 800158a:	2032      	movs	r0, #50	@ 0x32
 800158c:	f001 fc52 	bl	8002e34 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001590:	2106      	movs	r1, #6
 8001592:	204f      	movs	r0, #79	@ 0x4f
 8001594:	f7ff ffae 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f001 fc4b 	bl	8002e34 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 800159e:	2100      	movs	r1, #0
 80015a0:	2051      	movs	r0, #81	@ 0x51
 80015a2:	f7ff ffa7 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015a6:	2032      	movs	r0, #50	@ 0x32
 80015a8:	f001 fc44 	bl	8002e34 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 80015ac:	2106      	movs	r1, #6
 80015ae:	2050      	movs	r0, #80	@ 0x50
 80015b0:	f7ff ffa0 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015b4:	2032      	movs	r0, #50	@ 0x32
 80015b6:	f001 fc3d 	bl	8002e34 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 80015ba:	2100      	movs	r1, #0
 80015bc:	2053      	movs	r0, #83	@ 0x53
 80015be:	f7ff ff99 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015c2:	2032      	movs	r0, #50	@ 0x32
 80015c4:	f001 fc36 	bl	8002e34 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80015c8:	2111      	movs	r1, #17
 80015ca:	2052      	movs	r0, #82	@ 0x52
 80015cc:	f7ff ff92 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015d0:	2032      	movs	r0, #50	@ 0x32
 80015d2:	f001 fc2f 	bl	8002e34 <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
	unsigned char data[14];

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 80015e6:	463b      	mov	r3, r7
 80015e8:	461a      	mov	r2, r3
 80015ea:	210e      	movs	r1, #14
 80015ec:	201f      	movs	r0, #31
 80015ee:	f7ff ff53 	bl	8001498 <ICM42688_Readbytes>
	
	ICM42688.temperature_raw = (data[0] << 8) | data[1];
 80015f2:	783b      	ldrb	r3, [r7, #0]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001604:	801a      	strh	r2, [r3, #0]
	ICM42688.acc_x_raw = (data[2] << 8) | data[3];
 8001606:	78bb      	ldrb	r3, [r7, #2]
 8001608:	b21b      	sxth	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001618:	805a      	strh	r2, [r3, #2]
	ICM42688.acc_y_raw = (data[4] << 8) | data[5];
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 800162c:	809a      	strh	r2, [r3, #4]
	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	b21b      	sxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001640:	80da      	strh	r2, [r3, #6]
	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7a7b      	ldrb	r3, [r7, #9]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001654:	811a      	strh	r2, [r3, #8]
	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
 8001656:	7abb      	ldrb	r3, [r7, #10]
 8001658:	b21b      	sxth	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001668:	815a      	strh	r2, [r3, #10]
	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);
 800166a:	7b3b      	ldrb	r3, [r7, #12]
 800166c:	b21b      	sxth	r3, r3
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 800167c:	819a      	strh	r2, [r3, #12]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200002e0 	.word	0x200002e0

0800168c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169c:	2b80      	cmp	r3, #128	@ 0x80
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_GPIO_SetOutputPin>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	619a      	str	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_GPIO_ResetOutputPin>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <RC_halfDuplex_Transmit>:
 * @retval -1 : 송신 실패.
 *
 * +디버깅을 위해 PC1 (RSSI)에 GPIO 연결함
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <RC_halfDuplex_Transmit+0x80>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <RC_halfDuplex_Transmit+0x20>
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e02b      	b.n	8001784 <RC_halfDuplex_Transmit+0x78>

	RC_rxFlag.half_using = 1;
 800172c:	4a17      	ldr	r2, [pc, #92]	@ (800178c <RC_halfDuplex_Transmit+0x80>)
 800172e:	7813      	ldrb	r3, [r2, #0]
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 8001736:	4a15      	ldr	r2, [pc, #84]	@ (800178c <RC_halfDuplex_Transmit+0x80>)
 8001738:	7813      	ldrb	r3, [r2, #0]
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	7013      	strb	r3, [r2, #0]

	LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001740:	2102      	movs	r1, #2
 8001742:	4813      	ldr	r0, [pc, #76]	@ (8001790 <RC_halfDuplex_Transmit+0x84>)
 8001744:	f7ff ffc4 	bl	80016d0 <LL_GPIO_SetOutputPin>

	for(int i=0; i<len; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e011      	b.n	8001772 <RC_halfDuplex_Transmit+0x66>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 800174e:	bf00      	nop
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <RC_halfDuplex_Transmit+0x88>)
 8001752:	f7ff ff9b 	bl	800168c <LL_USART_IsActiveFlag_TXE>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f9      	beq.n	8001750 <RC_halfDuplex_Transmit+0x44>
		LL_USART_TransmitData8(USART1, data[i]);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	480b      	ldr	r0, [pc, #44]	@ (8001794 <RC_halfDuplex_Transmit+0x88>)
 8001768:	f7ff ffa3 	bl	80016b2 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbe9      	blt.n	800174e <RC_halfDuplex_Transmit+0x42>

		// while(!LL_USART_IsActiveFlag_TC(USART1));
	}
	LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800177a:	2102      	movs	r1, #2
 800177c:	4804      	ldr	r0, [pc, #16]	@ (8001790 <RC_halfDuplex_Transmit+0x84>)
 800177e:	f7ff ffb5 	bl	80016ec <LL_GPIO_ResetOutputPin>
	return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000314 	.word	0x20000314
 8001790:	40020800 	.word	0x40020800
 8001794:	40011000 	.word	0x40011000

08001798 <SRXL2_Initialization>:

/* driver_SRXL2.h ------------------------------------------------------------*/
/*
 * 수신 데이터를 받기 위한 링버퍼 설정
 */
int SRXL2_Initialization(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	while(RB_init(&RC_rxRingFifo, SRXL2_RING_BUFFER_SIZE));
 800179c:	bf00      	nop
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <SRXL2_Initialization+0x1c>)
 80017a2:	f7ff fc5f 	bl	8001064 <RB_init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f8      	bne.n	800179e <SRXL2_Initialization+0x6>

	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000308 	.word	0x20000308

080017b8 <SRXL2_Connect>:
 * 텔레메트리 장치 포함 범용적 설계 필요
 *
 * + Handshake만 제대로 하면 Bind 없이 Control Packet 보내는듯.
 * 데이터시트에 의하면 Handshake 과정에 다른 패킷이 전송되면 바로 Control 패킷 보내도록 함
 */
int SRXL2_Connect(void){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
	SRXL2_Handshake_Data* rx_handshake;

	while(1)
	{
		SRXL2_GetData();
 80017be:	f000 f84b 	bl	8001858 <SRXL2_GetData>
		if(packet.header.pType == SRXL_HANDSHAKE_ID)
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <SRXL2_Connect+0x94>)
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	2b21      	cmp	r3, #33	@ 0x21
 80017c8:	d1f9      	bne.n	80017be <SRXL2_Connect+0x6>
		{
			rx_handshake = &(((SRXL2_Handshake_Packet *) SRXL2_data)->data);
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <SRXL2_Connect+0x98>)
 80017cc:	617b      	str	r3, [r7, #20]

			// 수신기의 ID를 가져옴
			if((rx_handshake->SrcID)>>4 == 0x1)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d1f1      	bne.n	80017be <SRXL2_Connect+0x6>
			{
				receiver_info.SrcID = rx_handshake->SrcID;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <SRXL2_Connect+0x9c>)
 80017e0:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx_handshake->Info;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	791a      	ldrb	r2, [r3, #4]
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <SRXL2_Connect+0x9c>)
 80017e8:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx_handshake->UID;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <SRXL2_Connect+0x9c>)
 80017f2:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 80017f6:	bf00      	nop
			}
		}
	}

	uint8_t tx_packet_fc[14] ={
 80017f8:	23a6      	movs	r3, #166	@ 0xa6
 80017fa:	713b      	strb	r3, [r7, #4]
 80017fc:	2321      	movs	r3, #33	@ 0x21
 80017fe:	717b      	strb	r3, [r7, #5]
 8001800:	230e      	movs	r3, #14
 8001802:	71bb      	strb	r3, [r7, #6]
 8001804:	2330      	movs	r3, #48	@ 0x30
 8001806:	71fb      	strb	r3, [r7, #7]
			SPEKTRUM_SRXL_ID,
			SRXL_HANDSHAKE_ID,
			0x0e,
			SRXL_FC_DEVICE_ID,				// 장치 ID. 0x30 : FC master로 설정
			receiver_info.SrcID,			// 타겟 ID. 수신기
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <SRXL2_Connect+0x9c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
	uint8_t tx_packet_fc[14] ={
 800180c:	723b      	strb	r3, [r7, #8]
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	727b      	strb	r3, [r7, #9]
 8001812:	2300      	movs	r3, #0
 8001814:	72bb      	strb	r3, [r7, #10]
 8001816:	2301      	movs	r3, #1
 8001818:	72fb      	strb	r3, [r7, #11]
 800181a:	2312      	movs	r3, #18
 800181c:	733b      	strb	r3, [r7, #12]
 800181e:	2334      	movs	r3, #52	@ 0x34
 8001820:	737b      	strb	r3, [r7, #13]
 8001822:	2356      	movs	r3, #86	@ 0x56
 8001824:	73bb      	strb	r3, [r7, #14]
 8001826:	2378      	movs	r3, #120	@ 0x78
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	2300      	movs	r3, #0
 800182c:	743b      	strb	r3, [r7, #16]
 800182e:	2300      	movs	r3, #0
 8001830:	747b      	strb	r3, [r7, #17]
			0x01,							// Info
			0x12, 0x34, 0x56, 0x78, 		// UID (32-bit).
			0x00, 0x00						// CRC. SRXL2_doHandshake에서 자동 생성함.
	};

	while(SRXL2_doHandshake((SRXL2_Handshake_Packet *)tx_packet_fc));
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f8b3 	bl	80019a0 <SRXL2_doHandshake>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f8      	bne.n	8001832 <SRXL2_Connect+0x7a>
	// while(SRXL2_doBind());

	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000368 	.word	0x20000368
 8001850:	2000031b 	.word	0x2000031b
 8001854:	20000374 	.word	0x20000374

08001858 <SRXL2_GetData>:


/*
 * 수신 데이터 로딩
 */
int SRXL2_GetData(){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <SRXL2_GetData+0x54>)
 8001860:	607b      	str	r3, [r7, #4]
	while(SRXL2_readByte())
 8001862:	e00d      	b.n	8001880 <SRXL2_GetData+0x28>
	{
		if(calculate_crc(SRXL2_data, header->len) == packet.crc){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	4619      	mov	r1, r3
 800186a:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <SRXL2_GetData+0x58>)
 800186c:	f000 f8d2 	bl	8001a14 <calculate_crc>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <SRXL2_GetData+0x54>)
 8001876:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800187a:	b29b      	uxth	r3, r3
 800187c:	429a      	cmp	r2, r3
 800187e:	d005      	beq.n	800188c <SRXL2_GetData+0x34>
	while(SRXL2_readByte())
 8001880:	f000 f818 	bl	80018b4 <SRXL2_readByte>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ec      	bne.n	8001864 <SRXL2_GetData+0xc>
 800188a:	e000      	b.n	800188e <SRXL2_GetData+0x36>
			break;
 800188c:	bf00      	nop
		}
	}

	switch(header->pType){
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b21      	cmp	r3, #33	@ 0x21
 8001894:	d004      	beq.n	80018a0 <SRXL2_GetData+0x48>
 8001896:	2bcd      	cmp	r3, #205	@ 0xcd
 8001898:	d103      	bne.n	80018a2 <SRXL2_GetData+0x4a>
	case SRXL_HANDSHAKE_ID :
		break;
	case SRXL_CTRL_ID :
		SRXL2_SendTelemetryData();
 800189a:	f000 f93b 	bl	8001b14 <SRXL2_SendTelemetryData>
		break;
 800189e:	e000      	b.n	80018a2 <SRXL2_GetData+0x4a>
		break;
 80018a0:	bf00      	nop
	}
	return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000368 	.word	0x20000368
 80018b0:	20000318 	.word	0x20000318

080018b4 <SRXL2_readByte>:
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : 링버퍼 오류
 * @retval -3 : 기타 오류
 * 			  : 링버퍼 크기 초과
 */
int SRXL2_readByte(void){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
	// 단축어..
	SRXL2_Packet *rx = &packet;
 80018ba:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <SRXL2_readByte+0xdc>)
 80018bc:	60bb      	str	r3, [r7, #8]
	SRXL2_Header *header = &rx->header;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	607b      	str	r3, [r7, #4]
	enum INDEX_PACKET {
			pType = 1,
			len = 2
	};

	if(RC_rxFlag.uart == 0)
 80018c2:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <SRXL2_readByte+0xe0>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <SRXL2_readByte+0x22>
	{
		return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	e058      	b.n	8001988 <SRXL2_readByte+0xd4>
	}
	if(RB_isempty(&RC_rxRingFifo))
 80018d6:	4830      	ldr	r0, [pc, #192]	@ (8001998 <SRXL2_readByte+0xe4>)
 80018d8:	f7ff fc46 	bl	8001168 <RB_isempty>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <SRXL2_readByte+0x34>
	{
		return -2;
 80018e2:	f06f 0301 	mvn.w	r3, #1
 80018e6:	e04f      	b.n	8001988 <SRXL2_readByte+0xd4>
	}


	RC_rxFlag.uart = 0;
 80018e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001994 <SRXL2_readByte+0xe0>)
 80018ea:	7813      	ldrb	r3, [r2, #0]
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	7013      	strb	r3, [r2, #0]

	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e041      	b.n	800197c <SRXL2_readByte+0xc8>

		SRXL2_data[cnt] = RB_read(&RC_rxRingFifo);
 80018f8:	7bfc      	ldrb	r4, [r7, #15]
 80018fa:	4827      	ldr	r0, [pc, #156]	@ (8001998 <SRXL2_readByte+0xe4>)
 80018fc:	f7ff fc13 	bl	8001126 <RB_read>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <SRXL2_readByte+0xe8>)
 8001906:	551a      	strb	r2, [r3, r4]

		if(SRXL2_data[cnt] == SPEKTRUM_SRXL_ID){
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4a24      	ldr	r2, [pc, #144]	@ (800199c <SRXL2_readByte+0xe8>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	2ba6      	cmp	r3, #166	@ 0xa6
 8001910:	d104      	bne.n	800191c <SRXL2_readByte+0x68>
			cnt = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
			SRXL2_data[0] = SPEKTRUM_SRXL_ID;
 8001916:	4b21      	ldr	r3, [pc, #132]	@ (800199c <SRXL2_readByte+0xe8>)
 8001918:	22a6      	movs	r2, #166	@ 0xa6
 800191a:	701a      	strb	r2, [r3, #0]
		}

		if(cnt>len && SRXL2_data[len] == cnt){
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d929      	bls.n	8001976 <SRXL2_readByte+0xc2>
 8001922:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <SRXL2_readByte+0xe8>)
 8001924:	789b      	ldrb	r3, [r3, #2]
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	429a      	cmp	r2, r3
 800192a:	d124      	bne.n	8001976 <SRXL2_readByte+0xc2>
			header->speckrum_id = SPEKTRUM_SRXL_ID;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	22a6      	movs	r2, #166	@ 0xa6
 8001930:	701a      	strb	r2, [r3, #0]
			header->pType = SRXL2_data[pType];
 8001932:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <SRXL2_readByte+0xe8>)
 8001934:	785a      	ldrb	r2, [r3, #1]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	705a      	strb	r2, [r3, #1]
			header->len = SRXL2_data[len];
 800193a:	4b18      	ldr	r3, [pc, #96]	@ (800199c <SRXL2_readByte+0xe8>)
 800193c:	789a      	ldrb	r2, [r3, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	709a      	strb	r2, [r3, #2]

			rx->Data = SRXL2_data;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4a15      	ldr	r2, [pc, #84]	@ (800199c <SRXL2_readByte+0xe8>)
 8001946:	f8c3 2003 	str.w	r2, [r3, #3]
			rx->crc = ((uint16_t)SRXL2_data[header->len -2] << 8 | SRXL2_data[header->len -1]);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	3b02      	subs	r3, #2
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <SRXL2_readByte+0xe8>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	b21b      	sxth	r3, r3
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	3b01      	subs	r3, #1
 8001960:	490e      	ldr	r1, [pc, #56]	@ (800199c <SRXL2_readByte+0xe8>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21b      	sxth	r3, r3
 800196a:	b29a      	uxth	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f8a3 2007 	strh.w	r2, [r3, #7]

			// DEBUG
			// CDC_Transmit_FS(SRXL2_data, header->len);
			return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e008      	b.n	8001988 <SRXL2_readByte+0xd4>
	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3301      	adds	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dab9      	bge.n	80018f8 <SRXL2_readByte+0x44>
		}
	}
	return -3;
 8001984:	f06f 0302 	mvn.w	r3, #2
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	20000368 	.word	0x20000368
 8001994:	20000314 	.word	0x20000314
 8001998:	20000308 	.word	0x20000308
 800199c:	20000318 	.word	0x20000318

080019a0 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx_handshake;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3303      	adds	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 80019b4:	7cfb      	ldrb	r3, [r7, #19]
 80019b6:	2b0e      	cmp	r3, #14
 80019b8:	d002      	beq.n	80019c0 <SRXL2_doHandshake+0x20>
 80019ba:	f06f 0301 	mvn.w	r3, #1
 80019be:	e020      	b.n	8001a02 <SRXL2_doHandshake+0x62>

	while(1)
	{
		SRXL2_GetData();
 80019c0:	f7ff ff4a 	bl	8001858 <SRXL2_GetData>
		if(packet.header.pType == SRXL_HANDSHAKE_ID)
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <SRXL2_doHandshake+0x6c>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	2b21      	cmp	r3, #33	@ 0x21
 80019ca:	d1f9      	bne.n	80019c0 <SRXL2_doHandshake+0x20>
		{
			rx_handshake = &(((SRXL2_Handshake_Packet *) SRXL2_data)->data);
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <SRXL2_doHandshake+0x70>)
 80019ce:	60fb      	str	r3, [r7, #12]

			if(rx_handshake->SrcID == data->DestID && rx_handshake->DestID == data->SrcID)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1f1      	bne.n	80019c0 <SRXL2_doHandshake+0x20>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	785a      	ldrb	r2, [r3, #1]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d000      	beq.n	80019ea <SRXL2_doHandshake+0x4a>
		SRXL2_GetData();
 80019e8:	e7ea      	b.n	80019c0 <SRXL2_doHandshake+0x20>
			{
				break;
 80019ea:	bf00      	nop
			}
		}
	}

	insert_crc(tx_packet, len);
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f850 	bl	8001a96 <insert_crc>
	return RC_halfDuplex_Transmit(tx_packet, len);
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fe86 	bl	800170c <RC_halfDuplex_Transmit>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000368 	.word	0x20000368
 8001a10:	2000031b 	.word	0x2000031b

08001a14 <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8001a20:	2300      	movs	r3, #0
 8001a22:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	737b      	strb	r3, [r7, #13]
 8001a28:	e029      	b.n	8001a7e <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3c:	4053      	eors	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	733b      	strb	r3, [r7, #12]
 8001a46:	e014      	b.n	8001a72 <calculate_crc+0x5e>
			if (crc & 0x8000)
 8001a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da0a      	bge.n	8001a66 <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8001a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	81fb      	strh	r3, [r7, #14]
 8001a64:	e002      	b.n	8001a6c <calculate_crc+0x58>
			else
				crc = (crc << 1);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	733b      	strb	r3, [r7, #12]
 8001a72:	7b3b      	ldrb	r3, [r7, #12]
 8001a74:	2b07      	cmp	r3, #7
 8001a76:	d9e7      	bls.n	8001a48 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 8001a78:	7b7b      	ldrb	r3, [r7, #13]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	737b      	strb	r3, [r7, #13]
 8001a7e:	7b7a      	ldrb	r2, [r7, #13]
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	3b02      	subs	r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbd0      	blt.n	8001a2a <calculate_crc+0x16>
		}
	}

	return crc;
 8001a88:	89fb      	ldrh	r3, [r7, #14]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb4 	bl	8001a14 <calculate_crc>
 8001aac:	4603      	mov	r3, r0
 8001aae:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	3b02      	subs	r3, #2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	89fa      	ldrh	r2, [r7, #14]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]

	return crc;
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LL_GPIO_SetOutputPin>:
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	619a      	str	r2, [r3, #24]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_GPIO_ResetOutputPin>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SRXL2_SendTelemetryData>:
 * 그러나 위 규칙이 지켜지지 않음.
 *  0 : 전송 성공
 * -1 : 전송 실패
 */
int SRXL2_SendTelemetryData(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
	SRXL2_Control_Packet* rx_packet;
	rx_packet = (SRXL2_Control_Packet *)SRXL2_data;
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <SRXL2_SendTelemetryData+0xa4>)
 8001b1c:	61fb      	str	r3, [r7, #28]

	if(rx_packet->ReplyID != SRXL_FC_DEVICE_ID)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	2b30      	cmp	r3, #48	@ 0x30
 8001b24:	d002      	beq.n	8001b2c <SRXL2_SendTelemetryData+0x18>
	{
		return -1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e041      	b.n	8001bb0 <SRXL2_SendTelemetryData+0x9c>
	}

	LL_GPIO_SetOutputPin(LED_DEBUG2_GPIO_Port, LED_DEBUG2_Pin);
 8001b2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b30:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <SRXL2_SendTelemetryData+0xa8>)
 8001b32:	f7ff ffd2 	bl	8001ada <LL_GPIO_SetOutputPin>
	uint8_t telm_packet[22] =
 8001b36:	23a6      	movs	r3, #166	@ 0xa6
 8001b38:	713b      	strb	r3, [r7, #4]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	717b      	strb	r3, [r7, #5]
 8001b3e:	2316      	movs	r3, #22
 8001b40:	71bb      	strb	r3, [r7, #6]
	{
		SPEKTRUM_SRXL_ID,
		SRXL_TELEM_ID,
		22,
		receiver_info.SrcID,	// DeviceID (Receiver)
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <SRXL2_SendTelemetryData+0xac>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
	uint8_t telm_packet[22] =
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	2350      	movs	r3, #80	@ 0x50
 8001b4a:	723b      	strb	r3, [r7, #8]
 8001b4c:	2330      	movs	r3, #48	@ 0x30
 8001b4e:	727b      	strb	r3, [r7, #9]
 8001b50:	2300      	movs	r3, #0
 8001b52:	72bb      	strb	r3, [r7, #10]
 8001b54:	2300      	movs	r3, #0
 8001b56:	72fb      	strb	r3, [r7, #11]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	733b      	strb	r3, [r7, #12]
 8001b5c:	23a0      	movs	r3, #160	@ 0xa0
 8001b5e:	737b      	strb	r3, [r7, #13]
 8001b60:	2300      	movs	r3, #0
 8001b62:	73bb      	strb	r3, [r7, #14]
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	743b      	strb	r3, [r7, #16]
 8001b6c:	23a0      	movs	r3, #160	@ 0xa0
 8001b6e:	747b      	strb	r3, [r7, #17]
 8001b70:	2300      	movs	r3, #0
 8001b72:	74bb      	strb	r3, [r7, #18]
 8001b74:	2300      	movs	r3, #0
 8001b76:	74fb      	strb	r3, [r7, #19]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	753b      	strb	r3, [r7, #20]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	757b      	strb	r3, [r7, #21]
 8001b80:	2300      	movs	r3, #0
 8001b82:	75bb      	strb	r3, [r7, #22]
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	763b      	strb	r3, [r7, #24]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	767b      	strb	r3, [r7, #25]
		0x00, 0x00,				// uint16 field2
		0x00, 0x00,				// uint16 field3
		0x00, 0x00,				// uint16 field4
		0x00, 0x00   			// CRC 자리 (계산 후 입력)
	};
	insert_crc(telm_packet, sizeof(telm_packet));
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2116      	movs	r1, #22
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff7e 	bl	8001a96 <insert_crc>


	RC_halfDuplex_Transmit(telm_packet, sizeof(telm_packet));
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2116      	movs	r1, #22
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fdb4 	bl	800170c <RC_halfDuplex_Transmit>
	LL_GPIO_ResetOutputPin(LED_DEBUG2_GPIO_Port, LED_DEBUG2_Pin);
 8001ba4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <SRXL2_SendTelemetryData+0xa8>)
 8001baa:	f7ff ffa4 	bl	8001af6 <LL_GPIO_ResetOutputPin>
	return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000318 	.word	0x20000318
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	20000374 	.word	0x20000374

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_SPI_SetStandard>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 0210 	bic.w	r2, r3, #16
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_TIM_EnableCounter>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_TIM_DisableARRPreload>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d01c      	beq.n	8001d86 <LL_TIM_OC_DisableFast+0x4a>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d017      	beq.n	8001d82 <LL_TIM_OC_DisableFast+0x46>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d012      	beq.n	8001d7e <LL_TIM_OC_DisableFast+0x42>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b40      	cmp	r3, #64	@ 0x40
 8001d5c:	d00d      	beq.n	8001d7a <LL_TIM_OC_DisableFast+0x3e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d64:	d007      	beq.n	8001d76 <LL_TIM_OC_DisableFast+0x3a>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6c:	d101      	bne.n	8001d72 <LL_TIM_OC_DisableFast+0x36>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e00a      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e008      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_TIM_OC_DisableFast+0x4c>
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <LL_TIM_OC_DisableFast+0x84>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	440b      	add	r3, r1
 8001d98:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <LL_TIM_OC_DisableFast+0x88>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	4619      	mov	r1, r3
 8001da6:	2304      	movs	r3, #4
 8001da8:	408b      	lsls	r3, r1
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	601a      	str	r2, [r3, #0]

}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	0800d420 	.word	0x0800d420
 8001dc4:	0800d428 	.word	0x0800d428

08001dc8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d01c      	beq.n	8001e12 <LL_TIM_OC_EnablePreload+0x4a>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d017      	beq.n	8001e0e <LL_TIM_OC_EnablePreload+0x46>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d012      	beq.n	8001e0a <LL_TIM_OC_EnablePreload+0x42>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b40      	cmp	r3, #64	@ 0x40
 8001de8:	d00d      	beq.n	8001e06 <LL_TIM_OC_EnablePreload+0x3e>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df0:	d007      	beq.n	8001e02 <LL_TIM_OC_EnablePreload+0x3a>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df8:	d101      	bne.n	8001dfe <LL_TIM_OC_EnablePreload+0x36>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e00a      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e008      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_TIM_OC_EnablePreload+0x4c>
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <LL_TIM_OC_EnablePreload+0x80>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	440b      	add	r3, r1
 8001e24:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <LL_TIM_OC_EnablePreload+0x84>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2308      	movs	r3, #8
 8001e34:	408b      	lsls	r3, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	0800d420 	.word	0x0800d420
 8001e4c:	0800d428 	.word	0x0800d428

08001e50 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e62:	f023 0307 	bic.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	605a      	str	r2, [r3, #4]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_USART_Enable>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_USART_ConfigAsyncMode>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	615a      	str	r2, [r3, #20]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_USART_ConfigHalfDuplexMode>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f043 0208 	orr.w	r2, r3, #8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_USART_EnableIT_RXNE>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	e853 3f00 	ldrex	r3, [r3]
 8001f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	330c      	adds	r3, #12
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	61ba      	str	r2, [r7, #24]
 8001f8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	e841 2300 	strex	r3, r2, [r1]
 8001f94:	613b      	str	r3, [r7, #16]
   return(result);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e7      	bne.n	8001f6c <LL_USART_EnableIT_RXNE+0x8>
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_GPIO_ResetOutputPin>:
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_AHB1_GRP1_EnableClock>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <LL_APB1_GRP1_EnableClock>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <LL_APB1_GRP1_EnableClock+0x2c>)
 800200e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800

08002028 <LL_APB2_GRP1_EnableClock>:
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002032:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4313      	orrs	r3, r2
 800203a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x2c>)
 800203e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4013      	ands	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40023800 	.word	0x40023800

08002058 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8002064:	bf00      	nop
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f008 f889 	bl	800a184 <CDC_Transmit_FS>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d0f6      	beq.n	8002066 <_write+0xe>
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
#endif
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002088:	f000 fe62 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208c:	f000 f83c 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002090:	f000 fb72 	bl	8002778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002094:	f000 fa60 	bl	8002558 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002098:	f000 f8f2 	bl	8002280 <MX_TIM4_Init>
  MX_TIM14_Init();
 800209c:	f000 f964 	bl	8002368 <MX_TIM14_Init>
  MX_SPI1_Init();
 80020a0:	f000 f89c 	bl	80021dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80020a4:	f000 fab6 	bl	8002614 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80020a8:	f000 fb14 	bl	80026d4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80020ac:	f000 f9b2 	bl	8002414 <MX_UART4_Init>
  MX_UART5_Init();
 80020b0:	f000 f9da 	bl	8002468 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80020b4:	f007 ffa8 	bl	800a008 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 80020b8:	480e      	ldr	r0, [pc, #56]	@ (80020f4 <main+0x70>)
 80020ba:	f7ff fe1f 	bl	8001cfc <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 80020be:	480e      	ldr	r0, [pc, #56]	@ (80020f8 <main+0x74>)
 80020c0:	f7ff fe1c 	bl	8001cfc <LL_TIM_EnableCounter>

  SRXL2_Initialization();
 80020c4:	f7ff fb68 	bl	8001798 <SRXL2_Initialization>
  // Servo OUT 초기화
  BuzzerPlayInit();
 80020c8:	f7fe ff76 	bl	8000fb8 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 80020cc:	480b      	ldr	r0, [pc, #44]	@ (80020fc <main+0x78>)
 80020ce:	f7ff ff49 	bl	8001f64 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80020d2:	480b      	ldr	r0, [pc, #44]	@ (8002100 <main+0x7c>)
 80020d4:	f7ff ff46 	bl	8001f64 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 80020d8:	480a      	ldr	r0, [pc, #40]	@ (8002104 <main+0x80>)
 80020da:	f7ff ff43 	bl	8001f64 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  SRXL2_Connect();
 80020de:	f7ff fb6b 	bl	80017b8 <SRXL2_Connect>
  ICM42688_Initialization();
 80020e2:	f7ff fa29 	bl	8001538 <ICM42688_Initialization>
  BuzzerPlayOneCycle();
 80020e6:	f7fe ff95 	bl	8001014 <BuzzerPlayOneCycle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SRXL2_GetData() != 0)
 80020ea:	f7ff fbb5 	bl	8001858 <SRXL2_GetData>
	  {
		  // Do fail safe
	  }
	  ICM42688_Get6AxisRawData();
 80020ee:	f7ff fa77 	bl	80015e0 <ICM42688_Get6AxisRawData>
	  if(SRXL2_GetData() != 0)
 80020f2:	e7fa      	b.n	80020ea <main+0x66>
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40002000 	.word	0x40002000
 80020fc:	40011000 	.word	0x40011000
 8002100:	40004400 	.word	0x40004400
 8002104:	40004800 	.word	0x40004800

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b094      	sub	sp, #80	@ 0x50
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0320 	add.w	r3, r7, #32
 8002112:	2230      	movs	r2, #48	@ 0x30
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f009 fad1 	bl	800b6be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <SystemClock_Config+0xcc>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <SystemClock_Config+0xcc>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213a:	6413      	str	r3, [r2, #64]	@ 0x40
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <SystemClock_Config+0xcc>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <SystemClock_Config+0xd0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <SystemClock_Config+0xd0>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <SystemClock_Config+0xd0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002164:	2301      	movs	r3, #1
 8002166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216e:	2302      	movs	r3, #2
 8002170:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002172:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002178:	2308      	movs	r3, #8
 800217a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800217c:	23a8      	movs	r3, #168	@ 0xa8
 800217e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002180:	2302      	movs	r3, #2
 8002182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002184:	2307      	movs	r3, #7
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 0320 	add.w	r3, r7, #32
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fb75 	bl	800487c <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002198:	f000 fb38 	bl	800280c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2302      	movs	r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2105      	movs	r1, #5
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fdd6 	bl	8004d6c <HAL_RCC_ClockConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021c6:	f000 fb21 	bl	800280c <Error_Handler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	3750      	adds	r7, #80	@ 0x50
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000

080021dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b090      	sub	sp, #64	@ 0x40
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	2228      	movs	r2, #40	@ 0x28
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f009 fa67 	bl	800b6be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	463b      	mov	r3, r7
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002200:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002204:	f7ff ff10 	bl	8002028 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff fedd 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800220e:	23e0      	movs	r3, #224	@ 0xe0
 8002210:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002212:	2302      	movs	r3, #2
 8002214:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002222:	2305      	movs	r3, #5
 8002224:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	4813      	ldr	r0, [pc, #76]	@ (8002278 <MX_SPI1_Init+0x9c>)
 800222c:	f003 fbcb 	bl	80059c6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002234:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002238:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800223e:	2302      	movs	r3, #2
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002242:	2301      	movs	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800224a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800224c:	2318      	movs	r3, #24
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002250:	2300      	movs	r3, #0
 8002252:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002258:	230a      	movs	r3, #10
 800225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	@ (800227c <MX_SPI1_Init+0xa0>)
 8002264:	f003 fd89 	bl	8005d7a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002268:	2100      	movs	r1, #0
 800226a:	4804      	ldr	r0, [pc, #16]	@ (800227c <MX_SPI1_Init+0xa0>)
 800226c:	f7ff fd33 	bl	8001cd6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3740      	adds	r7, #64	@ 0x40
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020000 	.word	0x40020000
 800227c:	40013000 	.word	0x40013000

08002280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b094      	sub	sp, #80	@ 0x50
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002286:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	2220      	movs	r2, #32
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f009 fa0d 	bl	800b6be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80022b4:	2004      	movs	r0, #4
 80022b6:	f7ff fe9f 	bl	8001ff8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 80022ba:	2304      	movs	r3, #4
 80022bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022be:	2300      	movs	r3, #0
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <MX_TIM4_Init+0xdc>)
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80022ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022ce:	4619      	mov	r1, r3
 80022d0:	4823      	ldr	r0, [pc, #140]	@ (8002360 <MX_TIM4_Init+0xe0>)
 80022d2:	f003 fe17 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80022d6:	4822      	ldr	r0, [pc, #136]	@ (8002360 <MX_TIM4_Init+0xe0>)
 80022d8:	f7ff fd20 	bl	8001d1c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80022dc:	2100      	movs	r1, #0
 80022de:	4820      	ldr	r0, [pc, #128]	@ (8002360 <MX_TIM4_Init+0xe0>)
 80022e0:	f7ff fdb6 	bl	8001e50 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80022e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e8:	481d      	ldr	r0, [pc, #116]	@ (8002360 <MX_TIM4_Init+0xe0>)
 80022ea:	f7ff fd6d 	bl	8001dc8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022ee:	2360      	movs	r3, #96	@ 0x60
 80022f0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	461a      	mov	r2, r3
 8002308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800230c:	4814      	ldr	r0, [pc, #80]	@ (8002360 <MX_TIM4_Init+0xe0>)
 800230e:	f003 fe93 	bl	8006038 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8002312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002316:	4812      	ldr	r0, [pc, #72]	@ (8002360 <MX_TIM4_Init+0xe0>)
 8002318:	f7ff fd10 	bl	8001d3c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800231c:	2100      	movs	r1, #0
 800231e:	4810      	ldr	r0, [pc, #64]	@ (8002360 <MX_TIM4_Init+0xe0>)
 8002320:	f7ff fdab 	bl	8001e7a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002324:	480e      	ldr	r0, [pc, #56]	@ (8002360 <MX_TIM4_Init+0xe0>)
 8002326:	f7ff fdbb 	bl	8001ea0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800232a:	2008      	movs	r0, #8
 800232c:	f7ff fe4c 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8002330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002336:	2302      	movs	r3, #2
 8002338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	@ (8002364 <MX_TIM4_Init+0xe4>)
 8002350:	f003 fb39 	bl	80059c6 <LL_GPIO_Init>

}
 8002354:	bf00      	nop
 8002356:	3750      	adds	r7, #80	@ 0x50
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fff0fadc 	.word	0xfff0fadc
 8002360:	40000800 	.word	0x40000800
 8002364:	40020c00 	.word	0x40020c00

08002368 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	@ 0x38
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800236e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2220      	movs	r2, #32
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f009 f99a 	bl	800b6be <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 800238a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800238e:	f7ff fe33 	bl	8001ff8 <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002392:	f7ff fc17 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8002396:	4603      	mov	r3, r0
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc67 	bl	8001c70 <NVIC_EncodePriority>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4619      	mov	r1, r3
 80023a6:	202d      	movs	r0, #45	@ 0x2d
 80023a8:	f7ff fc38 	bl	8001c1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80023ac:	202d      	movs	r0, #45	@ 0x2d
 80023ae:	f7ff fc17 	bl	8001be0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80023b2:	2353      	movs	r3, #83	@ 0x53
 80023b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <MX_TIM14_Init+0xa4>)
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 80023c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c6:	4619      	mov	r1, r3
 80023c8:	4811      	ldr	r0, [pc, #68]	@ (8002410 <MX_TIM14_Init+0xa8>)
 80023ca:	f003 fd9b 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 80023ce:	4810      	ldr	r0, [pc, #64]	@ (8002410 <MX_TIM14_Init+0xa8>)
 80023d0:	f7ff fca4 	bl	8001d1c <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	461a      	mov	r2, r3
 80023ec:	2101      	movs	r1, #1
 80023ee:	4808      	ldr	r0, [pc, #32]	@ (8002410 <MX_TIM14_Init+0xa8>)
 80023f0:	f003 fe22 	bl	8006038 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	4806      	ldr	r0, [pc, #24]	@ (8002410 <MX_TIM14_Init+0xa8>)
 80023f8:	f7ff fca0 	bl	8001d3c <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 80023fc:	4804      	ldr	r0, [pc, #16]	@ (8002410 <MX_TIM14_Init+0xa8>)
 80023fe:	f7ff fd5f 	bl	8001ec0 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM14_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3738      	adds	r7, #56	@ 0x38
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	fff003e8 	.word	0xfff003e8
 8002410:	40002000 	.word	0x40002000

08002414 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <MX_UART4_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <MX_UART4_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <MX_UART4_Init+0x4c>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <MX_UART4_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <MX_UART4_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <MX_UART4_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <MX_UART4_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <MX_UART4_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <MX_UART4_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	@ (8002460 <MX_UART4_Init+0x4c>)
 800244c:	f002 feac 	bl	80051a8 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002456:	f000 f9d9 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000380 	.word	0x20000380
 8002464:	40004c00 	.word	0x40004c00

08002468 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	@ 0x38
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002492:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002496:	f7ff fdaf 	bl	8001ff8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800249a:	2004      	movs	r0, #4
 800249c:	f7ff fd94 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80024a0:	2008      	movs	r0, #8
 80024a2:	f7ff fd91 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 80024a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80024bc:	2308      	movs	r3, #8
 80024be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4821      	ldr	r0, [pc, #132]	@ (800254c <MX_UART5_Init+0xe4>)
 80024c6:	f003 fa7e 	bl	80059c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 80024ca:	2304      	movs	r3, #4
 80024cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024ce:	2302      	movs	r3, #2
 80024d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80024de:	2308      	movs	r3, #8
 80024e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	481a      	ldr	r0, [pc, #104]	@ (8002550 <MX_UART5_Init+0xe8>)
 80024e8:	f003 fa6d 	bl	80059c6 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024ec:	f7ff fb6a 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbba 	bl	8001c70 <NVIC_EncodePriority>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4619      	mov	r1, r3
 8002500:	2035      	movs	r0, #53	@ 0x35
 8002502:	f7ff fb8b 	bl	8001c1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002506:	2035      	movs	r0, #53	@ 0x35
 8002508:	f7ff fb6a 	bl	8001be0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800250c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002510:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800251e:	230c      	movs	r3, #12
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	4808      	ldr	r0, [pc, #32]	@ (8002554 <MX_UART5_Init+0xec>)
 8002532:	f004 f9cf 	bl	80068d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002536:	4807      	ldr	r0, [pc, #28]	@ (8002554 <MX_UART5_Init+0xec>)
 8002538:	f7ff fce2 	bl	8001f00 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800253c:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_UART5_Init+0xec>)
 800253e:	f7ff fccf 	bl	8001ee0 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3738      	adds	r7, #56	@ 0x38
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40005000 	.word	0x40005000

08002558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	@ 0x38
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002582:	2010      	movs	r0, #16
 8002584:	f7ff fd50 	bl	8002028 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002588:	2001      	movs	r0, #1
 800258a:	f7ff fd1d 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 800258e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002594:	2302      	movs	r3, #2
 8002596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025a4:	2307      	movs	r3, #7
 80025a6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4817      	ldr	r0, [pc, #92]	@ (800260c <MX_USART1_UART_Init+0xb4>)
 80025ae:	f003 fa0a 	bl	80059c6 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025b2:	f7ff fb07 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fb57 	bl	8001c70 <NVIC_EncodePriority>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4619      	mov	r1, r3
 80025c6:	2025      	movs	r0, #37	@ 0x25
 80025c8:	f7ff fb28 	bl	8001c1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80025cc:	2025      	movs	r0, #37	@ 0x25
 80025ce:	f7ff fb07 	bl	8001be0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80025d2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80025d6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80025e4:	230c      	movs	r3, #12
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80025e8:	2300      	movs	r3, #0
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	4807      	ldr	r0, [pc, #28]	@ (8002610 <MX_USART1_UART_Init+0xb8>)
 80025f4:	f004 f96e 	bl	80068d4 <LL_USART_Init>
  LL_USART_Enable(USART1);
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_USART1_UART_Init+0xb8>)
 80025fa:	f7ff fc71 	bl	8001ee0 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 80025fe:	4804      	ldr	r0, [pc, #16]	@ (8002610 <MX_USART1_UART_Init+0xb8>)
 8002600:	f7ff fc94 	bl	8001f2c <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	3738      	adds	r7, #56	@ 0x38
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40020000 	.word	0x40020000
 8002610:	40011000 	.word	0x40011000

08002614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800263e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002642:	f7ff fcd9 	bl	8001ff8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002646:	2008      	movs	r0, #8
 8002648:	f7ff fcbe 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 800264c:	2378      	movs	r3, #120	@ 0x78
 800264e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002650:	2302      	movs	r3, #2
 8002652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002660:	2307      	movs	r3, #7
 8002662:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4818      	ldr	r0, [pc, #96]	@ (80026cc <MX_USART2_UART_Init+0xb8>)
 800266a:	f003 f9ac 	bl	80059c6 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800266e:	f7ff faa9 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8002672:	4603      	mov	r3, r0
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff faf9 	bl	8001c70 <NVIC_EncodePriority>
 800267e:	4603      	mov	r3, r0
 8002680:	4619      	mov	r1, r3
 8002682:	2026      	movs	r0, #38	@ 0x26
 8002684:	f7ff faca 	bl	8001c1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002688:	2026      	movs	r0, #38	@ 0x26
 800268a:	f7ff faa9 	bl	8001be0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 800268e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002692:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80026a0:	230c      	movs	r3, #12
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4807      	ldr	r0, [pc, #28]	@ (80026d0 <MX_USART2_UART_Init+0xbc>)
 80026b4:	f004 f90e 	bl	80068d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80026b8:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <MX_USART2_UART_Init+0xbc>)
 80026ba:	f7ff fc21 	bl	8001f00 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80026be:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <MX_USART2_UART_Init+0xbc>)
 80026c0:	f7ff fc0e 	bl	8001ee0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	3738      	adds	r7, #56	@ 0x38
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40004400 	.word	0x40004400

080026d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	@ 0x38
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80026fe:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002702:	f7ff fc79 	bl	8001ff8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002706:	2008      	movs	r0, #8
 8002708:	f7ff fc5e 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800270c:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8002710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002712:	2302      	movs	r3, #2
 8002714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002722:	2307      	movs	r3, #7
 8002724:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4811      	ldr	r0, [pc, #68]	@ (8002770 <MX_USART3_UART_Init+0x9c>)
 800272c:	f003 f94b 	bl	80059c6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002730:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002734:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002742:	230c      	movs	r3, #12
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002746:	2300      	movs	r3, #0
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800274a:	2300      	movs	r3, #0
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4807      	ldr	r0, [pc, #28]	@ (8002774 <MX_USART3_UART_Init+0xa0>)
 8002756:	f004 f8bd 	bl	80068d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800275a:	4806      	ldr	r0, [pc, #24]	@ (8002774 <MX_USART3_UART_Init+0xa0>)
 800275c:	f7ff fbd0 	bl	8001f00 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002760:	4804      	ldr	r0, [pc, #16]	@ (8002774 <MX_USART3_UART_Init+0xa0>)
 8002762:	f7ff fbbd 	bl	8001ee0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	3738      	adds	r7, #56	@ 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40020c00 	.word	0x40020c00
 8002774:	40004800 	.word	0x40004800

08002778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277e:	463b      	mov	r3, r7
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800278e:	2010      	movs	r0, #16
 8002790:	f7ff fc1a 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002794:	2080      	movs	r0, #128	@ 0x80
 8002796:	f7ff fc17 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800279a:	2004      	movs	r0, #4
 800279c:	f7ff fc14 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff fc11 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80027a6:	2008      	movs	r0, #8
 80027a8:	f7ff fc0e 	bl	8001fc8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|LL_GPIO_PIN_5|LED_DEBUG3_Pin|LED_DEBUG2_Pin
 80027ac:	f642 0127 	movw	r1, #10279	@ 0x2827
 80027b0:	4814      	ldr	r0, [pc, #80]	@ (8002804 <MX_GPIO_Init+0x8c>)
 80027b2:	f7ff fbfa 	bl	8001faa <LL_GPIO_ResetOutputPin>
                          |LED_RED_Pin|LED_YELLOW_Pin);

  /**/
  LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80027b6:	2102      	movs	r1, #2
 80027b8:	4813      	ldr	r0, [pc, #76]	@ (8002808 <MX_GPIO_Init+0x90>)
 80027ba:	f7ff fbf6 	bl	8001faa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LL_GPIO_PIN_5|LED_DEBUG3_Pin|LED_DEBUG2_Pin
 80027be:	f642 0327 	movw	r3, #10279	@ 0x2827
 80027c2:	603b      	str	r3, [r7, #0]
                          |LED_RED_Pin|LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027c4:	2301      	movs	r3, #1
 80027c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d4:	463b      	mov	r3, r7
 80027d6:	4619      	mov	r1, r3
 80027d8:	480a      	ldr	r0, [pc, #40]	@ (8002804 <MX_GPIO_Init+0x8c>)
 80027da:	f003 f8f4 	bl	80059c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027e2:	2301      	movs	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 80027f2:	463b      	mov	r3, r7
 80027f4:	4619      	mov	r1, r3
 80027f6:	4804      	ldr	r0, [pc, #16]	@ (8002808 <MX_GPIO_Init+0x90>)
 80027f8:	f003 f8e5 	bl	80059c6 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40020800 	.word	0x40020800

0800280c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <Error_Handler+0x8>

08002818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	4a0f      	ldr	r2, [pc, #60]	@ (8002864 <HAL_MspInit+0x4c>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282c:	6453      	str	r3, [r2, #68]	@ 0x44
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_MspInit+0x4c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <HAL_MspInit+0x4c>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_UART_MspInit+0x84>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12c      	bne.n	80028e4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 8002894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_UART_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028d4:	2308      	movs	r3, #8
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4619      	mov	r1, r3
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <HAL_UART_MspInit+0x8c>)
 80028e0:	f000 fbde 	bl	80030a0 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	@ 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40004c00 	.word	0x40004c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020800 	.word	0x40020800

080028f8 <LL_TIM_EnableCounter>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_TIM_DisableCounter>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 0201 	bic.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_TIM_SetCounter>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_TIM_ClearFlag_UPDATE>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f06f 0201 	mvn.w	r2, #1
 8002962:	611a      	str	r2, [r3, #16]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_USART_IsActiveFlag_RXNE>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_USART_ClearFlag_RXNE>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f06f 0220 	mvn.w	r2, #32
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_USART_ReceiveData8>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b2db      	uxtb	r3, r3
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f6:	bf00      	nop
 80029f8:	e7fd      	b.n	80029f6 <NMI_Handler+0x4>

080029fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fe:	bf00      	nop
 8002a00:	e7fd      	b.n	80029fe <HardFault_Handler+0x4>

08002a02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <BusFault_Handler+0x4>

08002a12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a16:	bf00      	nop
 8002a18:	e7fd      	b.n	8002a16 <UsageFault_Handler+0x4>

08002a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a48:	f000 f9d4 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8002a56:	4814      	ldr	r0, [pc, #80]	@ (8002aa8 <USART1_IRQHandler+0x58>)
 8002a58:	f7ff ff9d 	bl	8002996 <LL_USART_IsActiveFlag_RXNE>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01d      	beq.n	8002a9e <USART1_IRQHandler+0x4e>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 8002a62:	4811      	ldr	r0, [pc, #68]	@ (8002aa8 <USART1_IRQHandler+0x58>)
 8002a64:	f7ff ffaa 	bl	80029bc <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8002a68:	480f      	ldr	r0, [pc, #60]	@ (8002aa8 <USART1_IRQHandler+0x58>)
 8002a6a:	f7ff ffb5 	bl	80029d8 <LL_USART_ReceiveData8>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 8002a72:	4a0e      	ldr	r2, [pc, #56]	@ (8002aac <USART1_IRQHandler+0x5c>)
 8002a74:	7813      	ldrb	r3, [r2, #0]
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	7013      	strb	r3, [r2, #0]
		RC_rxFlag.uart = 1;
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <USART1_IRQHandler+0x5c>)
 8002a7e:	7813      	ldrb	r3, [r2, #0]
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	7013      	strb	r3, [r2, #0]

		LL_TIM_EnableCounter(TIM14);
 8002a86:	480a      	ldr	r0, [pc, #40]	@ (8002ab0 <USART1_IRQHandler+0x60>)
 8002a88:	f7ff ff36 	bl	80028f8 <LL_TIM_EnableCounter>
		LL_TIM_SetCounter(TIM14, 0);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4808      	ldr	r0, [pc, #32]	@ (8002ab0 <USART1_IRQHandler+0x60>)
 8002a90:	f7ff ff52 	bl	8002938 <LL_TIM_SetCounter>

		RB_write(&RC_rxRingFifo, uart1_rx_data);
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4806      	ldr	r0, [pc, #24]	@ (8002ab4 <USART1_IRQHandler+0x64>)
 8002a9a:	f7fe fb1d 	bl	80010d8 <RB_write>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	20000314 	.word	0x20000314
 8002ab0:	40002000 	.word	0x40002000
 8002ab4:	20000308 	.word	0x20000308

08002ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8002abc:	480a      	ldr	r0, [pc, #40]	@ (8002ae8 <USART2_IRQHandler+0x30>)
 8002abe:	f7ff ff6a 	bl	8002996 <LL_USART_IsActiveFlag_RXNE>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8002ac8:	4807      	ldr	r0, [pc, #28]	@ (8002ae8 <USART2_IRQHandler+0x30>)
 8002aca:	f7ff ff77 	bl	80029bc <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8002ace:	4806      	ldr	r0, [pc, #24]	@ (8002ae8 <USART2_IRQHandler+0x30>)
 8002ad0:	f7ff ff82 	bl	80029d8 <LL_USART_ReceiveData8>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <USART2_IRQHandler+0x34>)
 8002ada:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <USART2_IRQHandler+0x38>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	200003c9 	.word	0x200003c9
 8002af0:	200003c8 	.word	0x200003c8

08002af4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 8002af8:	4817      	ldr	r0, [pc, #92]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 8002afa:	f7ff ff39 	bl	8002970 <LL_TIM_IsActiveFlag_UPDATE>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d027      	beq.n	8002b54 <TIM8_TRG_COM_TIM14_IRQHandler+0x60>
	{

		LL_TIM_ClearFlag_UPDATE(TIM14);
 8002b04:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 8002b06:	f7ff ff25 	bl	8002954 <LL_TIM_ClearFlag_UPDATE>

		if(RC_rxFlag.half_using == 1 && RC_rxFlag.half_tx == 0){
 8002b0a:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <TIM8_TRG_COM_TIM14_IRQHandler+0x46>
 8002b18:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <TIM8_TRG_COM_TIM14_IRQHandler+0x46>
			RC_rxFlag.half_using = 0;
 8002b26:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 8002b28:	7813      	ldrb	r3, [r2, #0]
 8002b2a:	f023 0302 	bic.w	r3, r3, #2
 8002b2e:	7013      	strb	r3, [r2, #0]
			LL_TIM_SetCounter(TIM14, 0);
 8002b30:	2100      	movs	r1, #0
 8002b32:	4809      	ldr	r0, [pc, #36]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 8002b34:	f7ff ff00 	bl	8002938 <LL_TIM_SetCounter>
	}
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b38:	e00c      	b.n	8002b54 <TIM8_TRG_COM_TIM14_IRQHandler+0x60>
			RC_rxFlag.half_using = 1;
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 8002b3c:	7813      	ldrb	r3, [r2, #0]
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	7013      	strb	r3, [r2, #0]
			RC_rxFlag.half_tx = 0;
 8002b44:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 8002b46:	7813      	ldrb	r3, [r2, #0]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	7013      	strb	r3, [r2, #0]
			LL_TIM_DisableCounter(TIM14);
 8002b4e:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 8002b50:	f7ff fee2 	bl	8002918 <LL_TIM_DisableCounter>
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40002000 	.word	0x40002000
 8002b5c:	20000314 	.word	0x20000314

08002b60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <OTG_FS_IRQHandler+0x10>)
 8002b76:	f000 fd73 	bl	8003660 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200018b4 	.word	0x200018b4

08002b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return 1;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_kill>:

int _kill(int pid, int sig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b9e:	f008 fdf1 	bl	800b784 <__errno>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2216      	movs	r2, #22
 8002ba6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_exit>:

void _exit (int status)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ffe7 	bl	8002b94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <_exit+0x12>

08002bca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e00a      	b.n	8002bf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bdc:	f3af 8000 	nop.w
 8002be0:	4601      	mov	r1, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	60ba      	str	r2, [r7, #8]
 8002be8:	b2ca      	uxtb	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbf0      	blt.n	8002bdc <_read+0x12>
  }

  return len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_isatty>:

int _isatty(int file)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f008 fd72 	bl	800b784 <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20020000 	.word	0x20020000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	200003cc 	.word	0x200003cc
 8002cd4:	20002108 	.word	0x20002108

08002cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <SystemInit+0x20>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <SystemInit+0x20>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d00:	f7ff ffea 	bl	8002cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d04:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d06:	490d      	ldr	r1, [pc, #52]	@ (8002d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f008 fd31 	bl	800b790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7ff f9a9 	bl	8002084 <main>
  bx  lr    
 8002d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002d40:	0800d7cc 	.word	0x0800d7cc
  ldr r2, =_sbss
 8002d44:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002d48:	20002104 	.word	0x20002104

08002d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <HAL_Init+0x40>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_Init+0x40>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <HAL_Init+0x40>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 f94f 	bl	800301c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f000 f808 	bl	8002d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d84:	f7ff fd48 	bl	8002818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_InitTick+0x54>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_InitTick+0x58>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f967 	bl	8003086 <HAL_SYSTICK_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00e      	b.n	8002de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d80a      	bhi.n	8002dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f000 f92f 	bl	8003032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	@ (8002df0 <HAL_InitTick+0x5c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000008 	.word	0x20000008
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008
 8002e18:	200003d0 	.word	0x200003d0

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200003d0 	.word	0x200003d0

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <__NVIC_SetPriorityGrouping>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4907      	ldr	r1, [pc, #28]	@ (8002f18 <__NVIC_EnableIRQ+0x38>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	@ (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe8:	d301      	bcc.n	8002fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00f      	b.n	800300e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <SysTick_Config+0x40>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f7ff ff8e 	bl	8002f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <SysTick_Config+0x40>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003006:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <SysTick_Config+0x40>)
 8003008:	2207      	movs	r2, #7
 800300a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000e010 	.word	0xe000e010

0800301c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff29 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003044:	f7ff ff3e 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 8003048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7ff ff8e 	bl	8002f70 <NVIC_EncodePriority>
 8003054:	4602      	mov	r2, r0
 8003056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff5d 	bl	8002f1c <__NVIC_SetPriority>
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff31 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffa2 	bl	8002fd8 <SysTick_Config>
 8003094:	4603      	mov	r3, r0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	@ 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e16b      	b.n	8003394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 815a 	bne.w	800338e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80b4 	beq.w	800338e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b60      	ldr	r3, [pc, #384]	@ (80033ac <HAL_GPIO_Init+0x30c>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	4a5f      	ldr	r2, [pc, #380]	@ (80033ac <HAL_GPIO_Init+0x30c>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003234:	6453      	str	r3, [r2, #68]	@ 0x44
 8003236:	4b5d      	ldr	r3, [pc, #372]	@ (80033ac <HAL_GPIO_Init+0x30c>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003242:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_GPIO_Init+0x310>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a52      	ldr	r2, [pc, #328]	@ (80033b4 <HAL_GPIO_Init+0x314>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d02b      	beq.n	80032c6 <HAL_GPIO_Init+0x226>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a51      	ldr	r2, [pc, #324]	@ (80033b8 <HAL_GPIO_Init+0x318>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d025      	beq.n	80032c2 <HAL_GPIO_Init+0x222>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a50      	ldr	r2, [pc, #320]	@ (80033bc <HAL_GPIO_Init+0x31c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01f      	beq.n	80032be <HAL_GPIO_Init+0x21e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	@ (80033c0 <HAL_GPIO_Init+0x320>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d019      	beq.n	80032ba <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	@ (80033c8 <HAL_GPIO_Init+0x328>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00d      	beq.n	80032b2 <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <HAL_GPIO_Init+0x32c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <HAL_GPIO_Init+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	@ (80033d0 <HAL_GPIO_Init+0x330>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_GPIO_Init+0x20a>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00e      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032aa:	2308      	movs	r3, #8
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	@ (80033b0 <HAL_GPIO_Init+0x310>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b30      	ldr	r3, [pc, #192]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a27      	ldr	r2, [pc, #156]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b26      	ldr	r3, [pc, #152]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a12      	ldr	r2, [pc, #72]	@ (80033d4 <HAL_GPIO_Init+0x334>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f ae90 	bls.w	80030bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021400 	.word	0x40021400
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40021c00 	.word	0x40021c00
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af02      	add	r7, sp, #8
 80033de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e101      	b.n	80035ee <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f007 f805 	bl	800a414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2203      	movs	r2, #3
 800340e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003418:	d102      	bne.n	8003420 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f003 fbec 	bl	8006c02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7c1a      	ldrb	r2, [r3, #16]
 8003432:	f88d 2000 	strb.w	r2, [sp]
 8003436:	3304      	adds	r3, #4
 8003438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800343a:	f003 facb 	bl	80069d4 <USB_CoreInit>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0ce      	b.n	80035ee <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fbe4 	bl	8006c24 <USB_SetCurrentMode>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0bf      	b.n	80035ee <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e04a      	b.n	800350a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3315      	adds	r3, #21
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3314      	adds	r3, #20
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	b298      	uxth	r0, r3
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332e      	adds	r3, #46	@ 0x2e
 80034b0:	4602      	mov	r2, r0
 80034b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3318      	adds	r3, #24
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	331c      	adds	r3, #28
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3320      	adds	r3, #32
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3324      	adds	r3, #36	@ 0x24
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	3301      	adds	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	791b      	ldrb	r3, [r3, #4]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	429a      	cmp	r2, r3
 8003512:	d3af      	bcc.n	8003474 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e044      	b.n	80035a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	3301      	adds	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	791b      	ldrb	r3, [r3, #4]
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3b5      	bcc.n	800351a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7c1a      	ldrb	r2, [r3, #16]
 80035b6:	f88d 2000 	strb.w	r2, [sp]
 80035ba:	3304      	adds	r3, #4
 80035bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035be:	f003 fb7d 	bl	8006cbc <USB_DevInit>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e00c      	b.n	80035ee <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fbc7 	bl	8007d7a <USB_DevDisconnect>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_PCD_Start+0x1c>
 800360e:	2302      	movs	r3, #2
 8003610:	e022      	b.n	8003658 <HAL_PCD_Start+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 face 	bl	8006be0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fb75 	bl	8007d38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b08d      	sub	sp, #52	@ 0x34
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fc33 	bl	8007ee2 <USB_GetMode>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 848c 	bne.w	8003f9c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f004 fb97 	bl	8007dbc <USB_ReadInterrupts>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8482 	beq.w	8003f9a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fb84 	bl	8007dbc <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d107      	bne.n	80036ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f002 0202 	and.w	r2, r2, #2
 80036cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 fb72 	bl	8007dbc <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d161      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0210 	bic.w	r2, r2, #16
 80036f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800371c:	d124      	bne.n	8003768 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d035      	beq.n	8003796 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003738:	b29b      	uxth	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	6a38      	ldr	r0, [r7, #32]
 800373e:	f004 f9a9 	bl	8007a94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374e:	441a      	add	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003760:	441a      	add	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	615a      	str	r2, [r3, #20]
 8003766:	e016      	b.n	8003796 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800376e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003772:	d110      	bne.n	8003796 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800377a:	2208      	movs	r2, #8
 800377c:	4619      	mov	r1, r3
 800377e:	6a38      	ldr	r0, [r7, #32]
 8003780:	f004 f988 	bl	8007a94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003790:	441a      	add	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0210 	orr.w	r2, r2, #16
 80037a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 fb06 	bl	8007dbc <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037ba:	f040 80a7 	bne.w	800390c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fb0b 	bl	8007de2 <USB_ReadDevAllOutEpInterrupt>
 80037cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80037ce:	e099      	b.n	8003904 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 808e 	beq.w	80038f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fb2f 	bl	8007e4a <USB_ReadDevOutEPInterrupt>
 80037ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	2301      	movs	r3, #1
 8003808:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800380a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fea3 	bl	8004558 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	2308      	movs	r3, #8
 800382c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800382e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 ff79 	bl	8004728 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	2310      	movs	r3, #16
 8003850:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d030      	beq.n	80038be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	2b80      	cmp	r3, #128	@ 0x80
 8003866:	d109      	bne.n	800387c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800387a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800387c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f006 feba 	bl	800a620 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2302      	movs	r3, #2
 80038bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	2320      	movs	r3, #32
 80038d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f0:	461a      	mov	r2, r3
 80038f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	3301      	adds	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	f47f af62 	bne.w	80037d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 fa53 	bl	8007dbc <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003920:	f040 80db 	bne.w	8003ada <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fa74 	bl	8007e16 <USB_ReadDevAllInEpInterrupt>
 800392e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003934:	e0cd      	b.n	8003ad2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80c2 	beq.w	8003ac6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f004 fa9a 	bl	8007e86 <USB_ReadDevInEPInterrupt>
 8003952:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d057      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	2201      	movs	r2, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800397e:	4013      	ands	r3, r2
 8003980:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	2301      	movs	r3, #1
 8003992:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	799b      	ldrb	r3, [r3, #6]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d132      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3320      	adds	r3, #32
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4403      	add	r3, r0
 80039bc:	331c      	adds	r3, #28
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4419      	add	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4403      	add	r3, r0
 80039d0:	3320      	adds	r3, #32
 80039d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d113      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x3a2>
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3324      	adds	r3, #36	@ 0x24
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039fa:	461a      	mov	r2, r3
 80039fc:	2101      	movs	r1, #1
 80039fe:	f004 faa1 	bl	8007f44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f006 fd84 	bl	800a516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2308      	movs	r3, #8
 8003a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	2310      	movs	r3, #16
 8003a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2340      	movs	r3, #64	@ 0x40
 8003a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d023      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a6e:	6a38      	ldr	r0, [r7, #32]
 8003a70:	f003 fa88 	bl	8006f84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	78db      	ldrb	r3, [r3, #3]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f006 fdd1 	bl	800a644 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fcbd 	bl	8004440 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	3301      	adds	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f af2e 	bne.w	8003936 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 f96c 	bl	8007dbc <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aee:	d122      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b16:	2100      	movs	r1, #0
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fea3 	bl	8004864 <HAL_PCDEx_LPM_Callback>
 8003b1e:	e002      	b.n	8003b26 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f006 fd6f 	bl	800a604 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 f93e 	bl	8007dbc <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4a:	d112      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f006 fd2b 	bl	800a5b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b70:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 f920 	bl	8007dbc <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b86:	f040 80b7 	bne.w	8003cf8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 f9ed 	bl	8006f84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bae:	e046      	b.n	8003c3e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bc2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003be2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bf6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	791b      	ldrb	r3, [r3, #4]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d3b2      	bcc.n	8003bb0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c58:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7bdb      	ldrb	r3, [r3, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c76:	f043 030b 	orr.w	r3, r3, #11
 8003c7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c8c:	f043 030b 	orr.w	r3, r3, #11
 8003c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c92:	e015      	b.n	8003cc0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ca6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003caa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cba:	f043 030b 	orr.w	r3, r3, #11
 8003cbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003cd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f004 f92e 	bl	8007f44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f004 f85d 	bl	8007dbc <USB_ReadInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d0c:	d123      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f004 f8f3 	bl	8007efe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 f9aa 	bl	8007076 <USB_GetDevSpeed>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681c      	ldr	r4, [r3, #0]
 8003d2e:	f001 fa07 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8003d32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f002 feae 	bl	8006a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f006 fc10 	bl	800a566 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 f82e 	bl	8007dbc <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d10a      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f006 fbed 	bl	800a54a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f002 0208 	and.w	r2, r2, #8
 8003d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 f819 	bl	8007dbc <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d123      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da4:	e014      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fb0a 	bl	80043de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	791b      	ldrb	r3, [r3, #4]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d3e4      	bcc.n	8003da6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 ffeb 	bl	8007dbc <USB_ReadInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df0:	d13c      	bne.n	8003e6c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003df2:	2301      	movs	r3, #1
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df6:	e02b      	b.n	8003e50 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3318      	adds	r3, #24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d115      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da12      	bge.n	8003e4a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3317      	adds	r3, #23
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 faca 	bl	80043de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d3cd      	bcc.n	8003df8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 ffa3 	bl	8007dbc <USB_ReadInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e80:	d156      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e82:	2301      	movs	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	e045      	b.n	8003f14 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12e      	bne.n	8003f0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003eb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da2b      	bge.n	8003f0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d121      	bne.n	8003f0e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f0a:	6053      	str	r3, [r2, #4]
            break;
 8003f0c:	e008      	b.n	8003f20 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	3301      	adds	r3, #1
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	791b      	ldrb	r3, [r3, #4]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d3b3      	bcc.n	8003e88 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f003 ff41 	bl	8007dbc <USB_ReadInterrupts>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d10a      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f006 fb8e 	bl	800a668 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 ff2b 	bl	8007dbc <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d115      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f006 fb7e 	bl	800a684 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	e000      	b.n	8003f9c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f9a:	bf00      	nop
    }
  }
}
 8003f9c:	3734      	adds	r7, #52	@ 0x34
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_PCD_SetAddress+0x1a>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e012      	b.n	8003fe2 <HAL_PCD_SetAddress+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fe8a 	bl	8007cec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	70fb      	strb	r3, [r7, #3]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	803b      	strh	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da0f      	bge.n	8004030 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3310      	adds	r3, #16
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	705a      	strb	r2, [r3, #1]
 800402e:	e00f      	b.n	8004050 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 020f 	and.w	r2, r3, #15
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	b2da      	uxtb	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800405c:	883b      	ldrh	r3, [r7, #0]
 800405e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	78ba      	ldrb	r2, [r7, #2]
 800406a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800407e:	78bb      	ldrb	r3, [r7, #2]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d102      	bne.n	800408a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_PCD_EP_Open+0xae>
 8004094:	2302      	movs	r3, #2
 8004096:	e00e      	b.n	80040b6 <HAL_PCD_EP_Open+0xcc>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f003 f80a 	bl	80070c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040b4:	7afb      	ldrb	r3, [r7, #11]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0f      	bge.n	80040f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3310      	adds	r3, #16
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	705a      	strb	r2, [r3, #1]
 80040f0:	e00f      	b.n	8004112 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_PCD_EP_Close+0x6e>
 8004128:	2302      	movs	r3, #2
 800412a:	e00e      	b.n	800414a <HAL_PCD_EP_Close+0x8c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	f003 f848 	bl	80071d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	460b      	mov	r3, r1
 8004160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004162:	7afb      	ldrb	r3, [r7, #11]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	b2da      	uxtb	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	799b      	ldrb	r3, [r3, #6]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	799b      	ldrb	r3, [r3, #6]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6979      	ldr	r1, [r7, #20]
 80041ba:	f003 f8e5 	bl	8007388 <USB_EPStartXfer>

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	460b      	mov	r3, r1
 8004206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3310      	adds	r3, #16
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2200      	movs	r2, #0
 8004230:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2201      	movs	r2, #1
 8004236:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004238:	7afb      	ldrb	r3, [r7, #11]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	b2da      	uxtb	r2, r3
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	799b      	ldrb	r3, [r3, #6]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	799b      	ldrb	r3, [r3, #6]
 800425a:	461a      	mov	r2, r3
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	f003 f893 	bl	8007388 <USB_EPStartXfer>

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	7912      	ldrb	r2, [r2, #4]
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e04f      	b.n	800432a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800428a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0f      	bge.n	80042b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3310      	adds	r3, #16
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
 80042b0:	e00d      	b.n	80042ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_PCD_EP_SetStall+0x82>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e01d      	b.n	800432a <HAL_PCD_EP_SetStall+0xbe>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f003 fc21 	bl	8007b44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7999      	ldrb	r1, [r3, #6]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800431a:	461a      	mov	r2, r3
 800431c:	f003 fe12 	bl	8007f44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	7912      	ldrb	r2, [r2, #4]
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e042      	b.n	80043d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	da0f      	bge.n	8004378 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 020f 	and.w	r2, r3, #15
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	3310      	adds	r3, #16
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	705a      	strb	r2, [r3, #1]
 8004376:	e00f      	b.n	8004398 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_PCD_EP_ClrStall+0x86>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e00e      	b.n	80043d6 <HAL_PCD_EP_ClrStall+0xa4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f003 fc2a 	bl	8007c20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da0c      	bge.n	800440c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3310      	adds	r3, #16
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e00c      	b.n	8004426 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	4618      	mov	r0, r3
 800442e:	f003 fa49 	bl	80078c4 <USB_EPStopXfer>
 8004432:	4603      	mov	r3, r0
 8004434:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004436:	7afb      	ldrb	r3, [r7, #11]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3310      	adds	r3, #16
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	d901      	bls.n	8004478 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e06b      	b.n	8004550 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	429a      	cmp	r2, r3
 800448c:	d902      	bls.n	8004494 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3303      	adds	r3, #3
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800449c:	e02a      	b.n	80044f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3303      	adds	r3, #3
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68d9      	ldr	r1, [r3, #12]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4603      	mov	r3, r0
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f003 fa9e 	bl	8007a18 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	429a      	cmp	r2, r3
 8004508:	d809      	bhi.n	800451e <PCD_WriteEmptyTxFifo+0xde>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004512:	429a      	cmp	r2, r3
 8004514:	d203      	bcs.n	800451e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1bf      	bne.n	800449e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	429a      	cmp	r2, r3
 8004528:	d811      	bhi.n	800454e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	2201      	movs	r2, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	43db      	mvns	r3, r3
 8004544:	6939      	ldr	r1, [r7, #16]
 8004546:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800454a:	4013      	ands	r3, r2
 800454c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	333c      	adds	r3, #60	@ 0x3c
 8004570:	3304      	adds	r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	799b      	ldrb	r3, [r3, #6]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d17b      	bne.n	8004686 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d015      	beq.n	80045c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4a61      	ldr	r2, [pc, #388]	@ (8004720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	f240 80b9 	bls.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80b3 	beq.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	e0a7      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2320      	movs	r3, #32
 80045de:	6093      	str	r3, [r2, #8]
 80045e0:	e098      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 8093 	bne.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d90f      	bls.n	8004616 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	e07e      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	0159      	lsls	r1, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	440b      	add	r3, r1
 8004638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004660:	461a      	mov	r2, r3
 8004662:	2101      	movs	r1, #1
 8004664:	f003 fc6e 	bl	8007f44 <USB_EP0_OutStart>
 8004668:	e006      	b.n	8004678 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	441a      	add	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f005 ff2e 	bl	800a4e0 <HAL_PCD_DataOutStageCallback>
 8004684:	e046      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d124      	bne.n	80046d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a4:	461a      	mov	r2, r3
 80046a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046aa:	6093      	str	r3, [r2, #8]
 80046ac:	e032      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c4:	461a      	mov	r2, r3
 80046c6:	2320      	movs	r3, #32
 80046c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f005 ff05 	bl	800a4e0 <HAL_PCD_DataOutStageCallback>
 80046d6:	e01d      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d114      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004700:	461a      	mov	r2, r3
 8004702:	2100      	movs	r1, #0
 8004704:	f003 fc1e 	bl	8007f44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f005 fee6 	bl	800a4e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	4f54300a 	.word	0x4f54300a
 8004724:	4f54310a 	.word	0x4f54310a

08004728 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	333c      	adds	r3, #60	@ 0x3c
 8004740:	3304      	adds	r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d90e      	bls.n	800477c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f005 fe9d 	bl	800a4bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d90c      	bls.n	80047a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	799b      	ldrb	r3, [r3, #6]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800479c:	461a      	mov	r2, r3
 800479e:	2101      	movs	r1, #1
 80047a0:	f003 fbd0 	bl	8007f44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	4f54300a 	.word	0x4f54300a

080047b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
 80047c0:	4613      	mov	r3, r2
 80047c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047d2:	883b      	ldrh	r3, [r7, #0]
 80047d4:	0419      	lsls	r1, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	430a      	orrs	r2, r1
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e0:	e028      	b.n	8004834 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e00d      	b.n	8004812 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	3340      	adds	r3, #64	@ 0x40
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	3301      	adds	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	3b01      	subs	r3, #1
 8004818:	429a      	cmp	r2, r3
 800481a:	d3ec      	bcc.n	80047f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800481c:	883b      	ldrh	r3, [r7, #0]
 800481e:	0418      	lsls	r0, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	3b01      	subs	r3, #1
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	4302      	orrs	r2, r0
 800482c:	3340      	adds	r3, #64	@ 0x40
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e267      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800489a:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d00c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a6:	4b85      	ldr	r3, [pc, #532]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d112      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b2:	4b82      	ldr	r3, [pc, #520]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4b7e      	ldr	r3, [pc, #504]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <HAL_RCC_OscConfig+0x108>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d157      	bne.n	8004984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e242      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x74>
 80048e2:	4b76      	ldr	r3, [pc, #472]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a75      	ldr	r2, [pc, #468]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b70      	ldr	r3, [pc, #448]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6f      	ldr	r2, [pc, #444]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6d      	ldr	r3, [pc, #436]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6c      	ldr	r2, [pc, #432]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 8004914:	4b69      	ldr	r3, [pc, #420]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a68      	ldr	r2, [pc, #416]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a65      	ldr	r2, [pc, #404]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fa72 	bl	8002e1c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe fa6e 	bl	8002e1c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	@ 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e207      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b5b      	ldr	r3, [pc, #364]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xc0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe fa5e 	bl	8002e1c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fe fa5a 	bl	8002e1c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1f3      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	4b51      	ldr	r3, [pc, #324]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0xe8>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004992:	4b4a      	ldr	r3, [pc, #296]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499e:	4b47      	ldr	r3, [pc, #284]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d11c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049aa:	4b44      	ldr	r3, [pc, #272]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	4b41      	ldr	r3, [pc, #260]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1c7      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ce:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4937      	ldr	r1, [pc, #220]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	e03a      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ec:	4b34      	ldr	r3, [pc, #208]	@ (8004ac0 <HAL_RCC_OscConfig+0x244>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fe fa13 	bl	8002e1c <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fe fa0f 	bl	8002e1c <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e1a8      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a18:	4b28      	ldr	r3, [pc, #160]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4925      	ldr	r1, [pc, #148]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <HAL_RCC_OscConfig+0x244>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fe f9f2 	bl	8002e1c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fe f9ee 	bl	8002e1c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e187      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d036      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe f9d2 	bl	8002e1c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fe f9ce 	bl	8002e1c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e167      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x200>
 8004a9a:	e01b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe f9bb 	bl	8002e1c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	e00e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fe f9b7 	bl	8002e1c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d907      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e150      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	42470000 	.word	0x42470000
 8004ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ea      	bne.n	8004aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8097 	beq.w	8004c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b81      	ldr	r3, [pc, #516]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	4a7c      	ldr	r2, [pc, #496]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b02:	4b7a      	ldr	r3, [pc, #488]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b77      	ldr	r3, [pc, #476]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b74      	ldr	r3, [pc, #464]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a73      	ldr	r2, [pc, #460]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe f977 	bl	8002e1c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fe f973 	bl	8002e1c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e10c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2ea>
 8004b58:	4b64      	ldr	r3, [pc, #400]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	4a63      	ldr	r2, [pc, #396]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x30c>
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	4a5e      	ldr	r2, [pc, #376]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b88:	4b58      	ldr	r3, [pc, #352]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a57      	ldr	r2, [pc, #348]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b94:	4b55      	ldr	r3, [pc, #340]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	4a54      	ldr	r2, [pc, #336]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fe f938 	bl	8002e1c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fe f934 	bl	8002e1c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0cb      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	4b49      	ldr	r3, [pc, #292]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ee      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x334>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd4:	f7fe f922 	bl	8002e1c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe f91e 	bl	8002e1c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0b5      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b39      	ldr	r3, [pc, #228]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	4a38      	ldr	r2, [pc, #224]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a1 	beq.w	8004d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1a:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d05c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d141      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fe f8f2 	bl	8002e1c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fe f8ee 	bl	8002e1c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e087      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b27      	ldr	r3, [pc, #156]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	491b      	ldr	r1, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c84:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fe f8c7 	bl	8002e1c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fe f8c3 	bl	8002e1c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e05c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x416>
 8004cb0:	e054      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fe f8b0 	bl	8002e1c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fe f8ac 	bl	8002e1c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e045      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x444>
 8004cde:	e03d      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e038      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <HAL_RCC_OscConfig+0x4ec>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d028      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cc      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b68      	ldr	r3, [pc, #416]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d90c      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d119      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e067      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4b37      	ldr	r3, [pc, #220]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4934      	ldr	r1, [pc, #208]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e5c:	f7fd ffde 	bl	8002e1c <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e64:	f7fd ffda 	bl	8002e1c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e04f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 020c 	and.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1eb      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20c      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ede:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f821 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd ff3e 	bl	8002d94 <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	0800d430 	.word	0x0800d430
 8004f30:	20000000 	.word	0x20000000
 8004f34:	20000004 	.word	0x20000004

08004f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b094      	sub	sp, #80	@ 0x50
 8004f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4b79      	ldr	r3, [pc, #484]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	f200 80e1 	bhi.w	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x34>
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6a:	e0db      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b73      	ldr	r3, [pc, #460]	@ (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f70:	e0db      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f72:	4b72      	ldr	r3, [pc, #456]	@ (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f76:	e0d8      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f78:	4b6f      	ldr	r3, [pc, #444]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f82:	4b6d      	ldr	r3, [pc, #436]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d063      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	0159      	lsls	r1, r3, #5
 8004fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbc:	0150      	lsls	r0, r2, #5
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	1a51      	subs	r1, r2, r1
 8004fc6:	6139      	str	r1, [r7, #16]
 8004fc8:	4629      	mov	r1, r5
 8004fca:	eb63 0301 	sbc.w	r3, r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	018b      	lsls	r3, r1, #6
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	018a      	lsls	r2, r1, #6
 8004fea:	4651      	mov	r1, sl
 8004fec:	ebb2 0801 	subs.w	r8, r2, r1
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	462b      	mov	r3, r5
 8005018:	eb49 0303 	adc.w	r3, r9, r3
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800502a:	4629      	mov	r1, r5
 800502c:	028b      	lsls	r3, r1, #10
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005034:	4621      	mov	r1, r4
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005048:	f7fb fdce 	bl	8000be8 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	e058      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b38      	ldr	r3, [pc, #224]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	4618      	mov	r0, r3
 8005060:	4611      	mov	r1, r2
 8005062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	2300      	movs	r3, #0
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4641      	mov	r1, r8
 800508a:	ebb2 0a01 	subs.w	sl, r2, r1
 800508e:	4649      	mov	r1, r9
 8005090:	eb63 0b01 	sbc.w	fp, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050a8:	ebb2 040a 	subs.w	r4, r2, sl
 80050ac:	eb63 050b 	sbc.w	r5, r3, fp
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb45 0303 	adc.w	r3, r5, r3
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050de:	4629      	mov	r1, r5
 80050e0:	028b      	lsls	r3, r1, #10
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e8:	4621      	mov	r1, r4
 80050ea:	028a      	lsls	r2, r1, #10
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fc:	f7fb fd74 	bl	8000be8 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4613      	mov	r3, r2
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	3301      	adds	r3, #1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800511a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005122:	e002      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8005126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800512c:	4618      	mov	r0, r3
 800512e:	3750      	adds	r7, #80	@ 0x50
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	00f42400 	.word	0x00f42400

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <HAL_RCC_GetHCLKFreq+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000000 	.word	0x20000000

08005158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800515c:	f7ff fff0 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	0a9b      	lsrs	r3, r3, #10
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4903      	ldr	r1, [pc, #12]	@ (800517c <HAL_RCC_GetPCLK1Freq+0x24>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40023800 	.word	0x40023800
 800517c:	0800d440 	.word	0x0800d440

08005180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005184:	f7ff ffdc 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0b5b      	lsrs	r3, r3, #13
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	0800d440 	.word	0x0800d440

080051a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e042      	b.n	8005240 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fb4a 	bl	8002868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2224      	movs	r2, #36	@ 0x24
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f82b 	bl	8005248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b0c0      	sub	sp, #256	@ 0x100
 800524e:	af00      	add	r7, sp, #0
 8005250:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	68d9      	ldr	r1, [r3, #12]
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	ea40 0301 	orr.w	r3, r0, r1
 8005270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	431a      	orrs	r2, r3
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052a0:	f021 010c 	bic.w	r1, r1, #12
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ae:	430b      	orrs	r3, r1
 80052b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	6999      	ldr	r1, [r3, #24]
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	ea40 0301 	orr.w	r3, r0, r1
 80052ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005514 <UART_SetConfig+0x2cc>)
 80052d8:	429a      	cmp	r2, r3
 80052da:	d005      	beq.n	80052e8 <UART_SetConfig+0xa0>
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005518 <UART_SetConfig+0x2d0>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d104      	bne.n	80052f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7ff ff4a 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 80052ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052f0:	e003      	b.n	80052fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052f2:	f7ff ff31 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 80052f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005304:	f040 810c 	bne.w	8005520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530c:	2200      	movs	r2, #0
 800530e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	1891      	adds	r1, r2, r2
 8005320:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005322:	415b      	adcs	r3, r3
 8005324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800532a:	4621      	mov	r1, r4
 800532c:	eb12 0801 	adds.w	r8, r2, r1
 8005330:	4629      	mov	r1, r5
 8005332:	eb43 0901 	adc.w	r9, r3, r1
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	4623      	mov	r3, r4
 8005350:	eb18 0303 	adds.w	r3, r8, r3
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005358:	462b      	mov	r3, r5
 800535a:	eb49 0303 	adc.w	r3, r9, r3
 800535e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800536e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005376:	460b      	mov	r3, r1
 8005378:	18db      	adds	r3, r3, r3
 800537a:	653b      	str	r3, [r7, #80]	@ 0x50
 800537c:	4613      	mov	r3, r2
 800537e:	eb42 0303 	adc.w	r3, r2, r3
 8005382:	657b      	str	r3, [r7, #84]	@ 0x54
 8005384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800538c:	f7fb fc2c 	bl	8000be8 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4b61      	ldr	r3, [pc, #388]	@ (800551c <UART_SetConfig+0x2d4>)
 8005396:	fba3 2302 	umull	r2, r3, r3, r2
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	011c      	lsls	r4, r3, #4
 800539e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	1891      	adds	r1, r2, r2
 80053b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053b8:	415b      	adcs	r3, r3
 80053ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053c0:	4641      	mov	r1, r8
 80053c2:	eb12 0a01 	adds.w	sl, r2, r1
 80053c6:	4649      	mov	r1, r9
 80053c8:	eb43 0b01 	adc.w	fp, r3, r1
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053e0:	4692      	mov	sl, r2
 80053e2:	469b      	mov	fp, r3
 80053e4:	4643      	mov	r3, r8
 80053e6:	eb1a 0303 	adds.w	r3, sl, r3
 80053ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ee:	464b      	mov	r3, r9
 80053f0:	eb4b 0303 	adc.w	r3, fp, r3
 80053f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005404:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800540c:	460b      	mov	r3, r1
 800540e:	18db      	adds	r3, r3, r3
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
 8005412:	4613      	mov	r3, r2
 8005414:	eb42 0303 	adc.w	r3, r2, r3
 8005418:	647b      	str	r3, [r7, #68]	@ 0x44
 800541a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800541e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005422:	f7fb fbe1 	bl	8000be8 <__aeabi_uldivmod>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4611      	mov	r1, r2
 800542c:	4b3b      	ldr	r3, [pc, #236]	@ (800551c <UART_SetConfig+0x2d4>)
 800542e:	fba3 2301 	umull	r2, r3, r3, r1
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2264      	movs	r2, #100	@ 0x64
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	1acb      	subs	r3, r1, r3
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005442:	4b36      	ldr	r3, [pc, #216]	@ (800551c <UART_SetConfig+0x2d4>)
 8005444:	fba3 2302 	umull	r2, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005450:	441c      	add	r4, r3
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800545c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	1891      	adds	r1, r2, r2
 800546a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800546c:	415b      	adcs	r3, r3
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005474:	4641      	mov	r1, r8
 8005476:	1851      	adds	r1, r2, r1
 8005478:	6339      	str	r1, [r7, #48]	@ 0x30
 800547a:	4649      	mov	r1, r9
 800547c:	414b      	adcs	r3, r1
 800547e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800548c:	4659      	mov	r1, fp
 800548e:	00cb      	lsls	r3, r1, #3
 8005490:	4651      	mov	r1, sl
 8005492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005496:	4651      	mov	r1, sl
 8005498:	00ca      	lsls	r2, r1, #3
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	4642      	mov	r2, r8
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a8:	464b      	mov	r3, r9
 80054aa:	460a      	mov	r2, r1
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054c8:	460b      	mov	r3, r1
 80054ca:	18db      	adds	r3, r3, r3
 80054cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ce:	4613      	mov	r3, r2
 80054d0:	eb42 0303 	adc.w	r3, r2, r3
 80054d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054de:	f7fb fb83 	bl	8000be8 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <UART_SetConfig+0x2d4>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	@ 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	3332      	adds	r3, #50	@ 0x32
 80054fa:	4a08      	ldr	r2, [pc, #32]	@ (800551c <UART_SetConfig+0x2d4>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f003 0207 	and.w	r2, r3, #7
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4422      	add	r2, r4
 800550e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005510:	e106      	b.n	8005720 <UART_SetConfig+0x4d8>
 8005512:	bf00      	nop
 8005514:	40011000 	.word	0x40011000
 8005518:	40011400 	.word	0x40011400
 800551c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800552a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800552e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005532:	4642      	mov	r2, r8
 8005534:	464b      	mov	r3, r9
 8005536:	1891      	adds	r1, r2, r2
 8005538:	6239      	str	r1, [r7, #32]
 800553a:	415b      	adcs	r3, r3
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
 800553e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005542:	4641      	mov	r1, r8
 8005544:	1854      	adds	r4, r2, r1
 8005546:	4649      	mov	r1, r9
 8005548:	eb43 0501 	adc.w	r5, r3, r1
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	00eb      	lsls	r3, r5, #3
 8005556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800555a:	00e2      	lsls	r2, r4, #3
 800555c:	4614      	mov	r4, r2
 800555e:	461d      	mov	r5, r3
 8005560:	4643      	mov	r3, r8
 8005562:	18e3      	adds	r3, r4, r3
 8005564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005568:	464b      	mov	r3, r9
 800556a:	eb45 0303 	adc.w	r3, r5, r3
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800557e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800558e:	4629      	mov	r1, r5
 8005590:	008b      	lsls	r3, r1, #2
 8005592:	4621      	mov	r1, r4
 8005594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005598:	4621      	mov	r1, r4
 800559a:	008a      	lsls	r2, r1, #2
 800559c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055a0:	f7fb fb22 	bl	8000be8 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4b60      	ldr	r3, [pc, #384]	@ (800572c <UART_SetConfig+0x4e4>)
 80055aa:	fba3 2302 	umull	r2, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	011c      	lsls	r4, r3, #4
 80055b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055c4:	4642      	mov	r2, r8
 80055c6:	464b      	mov	r3, r9
 80055c8:	1891      	adds	r1, r2, r2
 80055ca:	61b9      	str	r1, [r7, #24]
 80055cc:	415b      	adcs	r3, r3
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d4:	4641      	mov	r1, r8
 80055d6:	1851      	adds	r1, r2, r1
 80055d8:	6139      	str	r1, [r7, #16]
 80055da:	4649      	mov	r1, r9
 80055dc:	414b      	adcs	r3, r1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055ec:	4659      	mov	r1, fp
 80055ee:	00cb      	lsls	r3, r1, #3
 80055f0:	4651      	mov	r1, sl
 80055f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055f6:	4651      	mov	r1, sl
 80055f8:	00ca      	lsls	r2, r1, #3
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	4603      	mov	r3, r0
 8005600:	4642      	mov	r2, r8
 8005602:	189b      	adds	r3, r3, r2
 8005604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005608:	464b      	mov	r3, r9
 800560a:	460a      	mov	r2, r1
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800562c:	4649      	mov	r1, r9
 800562e:	008b      	lsls	r3, r1, #2
 8005630:	4641      	mov	r1, r8
 8005632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005636:	4641      	mov	r1, r8
 8005638:	008a      	lsls	r2, r1, #2
 800563a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800563e:	f7fb fad3 	bl	8000be8 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4611      	mov	r1, r2
 8005648:	4b38      	ldr	r3, [pc, #224]	@ (800572c <UART_SetConfig+0x4e4>)
 800564a:	fba3 2301 	umull	r2, r3, r3, r1
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2264      	movs	r2, #100	@ 0x64
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	1acb      	subs	r3, r1, r3
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	3332      	adds	r3, #50	@ 0x32
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <UART_SetConfig+0x4e4>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005668:	441c      	add	r4, r3
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	673b      	str	r3, [r7, #112]	@ 0x70
 8005672:	677a      	str	r2, [r7, #116]	@ 0x74
 8005674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	1891      	adds	r1, r2, r2
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	415b      	adcs	r3, r3
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005688:	4641      	mov	r1, r8
 800568a:	1851      	adds	r1, r2, r1
 800568c:	6039      	str	r1, [r7, #0]
 800568e:	4649      	mov	r1, r9
 8005690:	414b      	adcs	r3, r1
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056a0:	4659      	mov	r1, fp
 80056a2:	00cb      	lsls	r3, r1, #3
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056aa:	4651      	mov	r1, sl
 80056ac:	00ca      	lsls	r2, r1, #3
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	4642      	mov	r2, r8
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ba:	464b      	mov	r3, r9
 80056bc:	460a      	mov	r2, r1
 80056be:	eb42 0303 	adc.w	r3, r2, r3
 80056c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056dc:	4649      	mov	r1, r9
 80056de:	008b      	lsls	r3, r1, #2
 80056e0:	4641      	mov	r1, r8
 80056e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e6:	4641      	mov	r1, r8
 80056e8:	008a      	lsls	r2, r1, #2
 80056ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056ee:	f7fb fa7b 	bl	8000be8 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <UART_SetConfig+0x4e4>)
 80056f8:	fba3 1302 	umull	r1, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	2164      	movs	r1, #100	@ 0x64
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	3332      	adds	r3, #50	@ 0x32
 800570a:	4a08      	ldr	r2, [pc, #32]	@ (800572c <UART_SetConfig+0x4e4>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f003 020f 	and.w	r2, r3, #15
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4422      	add	r2, r4
 800571e:	609a      	str	r2, [r3, #8]
}
 8005720:	bf00      	nop
 8005722:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005726:	46bd      	mov	sp, r7
 8005728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800572c:	51eb851f 	.word	0x51eb851f

08005730 <LL_GPIO_SetPinMode>:
{
 8005730:	b480      	push	{r7}
 8005732:	b08b      	sub	sp, #44	@ 0x2c
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	613b      	str	r3, [r7, #16]
  return result;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e003      	b.n	8005762 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	2103      	movs	r1, #3
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	401a      	ands	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	fa93 f3a3 	rbit	r3, r3
 8005778:	61fb      	str	r3, [r7, #28]
  return result;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005784:	2320      	movs	r3, #32
 8005786:	e003      	b.n	8005790 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	372c      	adds	r7, #44	@ 0x2c
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_GPIO_SetPinOutputType>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <LL_GPIO_SetPinSpeed>:
{
 80057da:	b480      	push	{r7}
 80057dc:	b08b      	sub	sp, #44	@ 0x2c
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	613b      	str	r3, [r7, #16]
  return result;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005800:	2320      	movs	r3, #32
 8005802:	e003      	b.n	800580c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	fab3 f383 	clz	r3, r3
 800580a:	b2db      	uxtb	r3, r3
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2103      	movs	r1, #3
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	61fb      	str	r3, [r7, #28]
  return result;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800582e:	2320      	movs	r3, #32
 8005830:	e003      	b.n	800583a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	fab3 f383 	clz	r3, r3
 8005838:	b2db      	uxtb	r3, r3
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	372c      	adds	r7, #44	@ 0x2c
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_GPIO_SetPinPull>:
{
 8005854:	b480      	push	{r7}
 8005856:	b08b      	sub	sp, #44	@ 0x2c
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	fa93 f3a3 	rbit	r3, r3
 800586e:	613b      	str	r3, [r7, #16]
  return result;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800587a:	2320      	movs	r3, #32
 800587c:	e003      	b.n	8005886 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	fab3 f383 	clz	r3, r3
 8005884:	b2db      	uxtb	r3, r3
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	2103      	movs	r1, #3
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	401a      	ands	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	fa93 f3a3 	rbit	r3, r3
 800589c:	61fb      	str	r3, [r7, #28]
  return result;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80058a8:	2320      	movs	r3, #32
 80058aa:	e003      	b.n	80058b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	fab3 f383 	clz	r3, r3
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	60da      	str	r2, [r3, #12]
}
 80058c2:	bf00      	nop
 80058c4:	372c      	adds	r7, #44	@ 0x2c
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <LL_GPIO_SetAFPin_0_7>:
{
 80058ce:	b480      	push	{r7}
 80058d0:	b08b      	sub	sp, #44	@ 0x2c
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa93 f3a3 	rbit	r3, r3
 80058e8:	613b      	str	r3, [r7, #16]
  return result;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80058f4:	2320      	movs	r3, #32
 80058f6:	e003      	b.n	8005900 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	fab3 f383 	clz	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	210f      	movs	r1, #15
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	401a      	ands	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	fa93 f3a3 	rbit	r3, r3
 8005916:	61fb      	str	r3, [r7, #28]
  return result;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005922:	2320      	movs	r3, #32
 8005924:	e003      	b.n	800592e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	fab3 f383 	clz	r3, r3
 800592c:	b2db      	uxtb	r3, r3
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	431a      	orrs	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	372c      	adds	r7, #44	@ 0x2c
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <LL_GPIO_SetAFPin_8_15>:
{
 8005948:	b480      	push	{r7}
 800594a:	b08b      	sub	sp, #44	@ 0x2c
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	fa93 f3a3 	rbit	r3, r3
 8005964:	613b      	str	r3, [r7, #16]
  return result;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005970:	2320      	movs	r3, #32
 8005972:	e003      	b.n	800597c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fab3 f383 	clz	r3, r3
 800597a:	b2db      	uxtb	r3, r3
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	210f      	movs	r1, #15
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	fa93 f3a3 	rbit	r3, r3
 8005994:	61fb      	str	r3, [r7, #28]
  return result;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80059a0:	2320      	movs	r3, #32
 80059a2:	e003      	b.n	80059ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	fab3 f383 	clz	r3, r3
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80059ba:	bf00      	nop
 80059bc:	372c      	adds	r7, #44	@ 0x2c
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	@ 0x28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	617b      	str	r3, [r7, #20]
  return result;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <LL_GPIO_Init+0x2e>
    return 32U;
 80059f0:	2320      	movs	r3, #32
 80059f2:	e003      	b.n	80059fc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059fe:	e057      	b.n	8005ab0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	2101      	movs	r1, #1
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d049      	beq.n	8005aaa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d003      	beq.n	8005a26 <LL_GPIO_Init+0x60>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d10d      	bne.n	8005a42 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fed3 	bl	80057da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6a39      	ldr	r1, [r7, #32]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff feb4 	bl	80057aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6a39      	ldr	r1, [r7, #32]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff02 	bl	8005854 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d121      	bne.n	8005a9c <LL_GPIO_Init+0xd6>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	60bb      	str	r3, [r7, #8]
  return result;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <LL_GPIO_Init+0xac>
    return 32U;
 8005a6e:	2320      	movs	r3, #32
 8005a70:	e003      	b.n	8005a7a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	fab3 f383 	clz	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d807      	bhi.n	8005a8e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	461a      	mov	r2, r3
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ff21 	bl	80058ce <LL_GPIO_SetAFPin_0_7>
 8005a8c:	e006      	b.n	8005a9c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff56 	bl	8005948 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6a39      	ldr	r1, [r7, #32]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fe43 	bl	8005730 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	3301      	adds	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1a0      	bne.n	8005a00 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	@ 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <LL_RCC_GetSysClkSource+0x18>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 030c 	and.w	r3, r3, #12
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800

08005ae4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ae8:	4b04      	ldr	r3, [pc, #16]	@ (8005afc <LL_RCC_GetAHBPrescaler+0x18>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800

08005b00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b04:	4b04      	ldr	r3, [pc, #16]	@ (8005b18 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b20:	4b04      	ldr	r3, [pc, #16]	@ (8005b34 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800

08005b38 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b3c:	4b04      	ldr	r3, [pc, #16]	@ (8005b50 <LL_RCC_PLL_GetMainSource+0x18>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800

08005b54 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b58:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <LL_RCC_PLL_GetN+0x18>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	40023800 	.word	0x40023800

08005b70 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <LL_RCC_PLL_GetP+0x18>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <LL_RCC_PLL_GetDivider+0x18>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005bb0:	f000 f820 	bl	8005bf4 <RCC_GetSystemClockFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f83e 	bl	8005c40 <RCC_GetHCLKClockFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f84c 	bl	8005c6c <RCC_GetPCLK1ClockFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f858 	bl	8005c94 <RCC_GetPCLK2ClockFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005bfe:	f7ff ff63 	bl	8005ac8 <LL_RCC_GetSysClkSource>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d00c      	beq.n	8005c22 <RCC_GetSystemClockFreq+0x2e>
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d80f      	bhi.n	8005c2c <RCC_GetSystemClockFreq+0x38>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <RCC_GetSystemClockFreq+0x22>
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d003      	beq.n	8005c1c <RCC_GetSystemClockFreq+0x28>
 8005c14:	e00a      	b.n	8005c2c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005c16:	4b09      	ldr	r3, [pc, #36]	@ (8005c3c <RCC_GetSystemClockFreq+0x48>)
 8005c18:	607b      	str	r3, [r7, #4]
      break;
 8005c1a:	e00a      	b.n	8005c32 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <RCC_GetSystemClockFreq+0x48>)
 8005c1e:	607b      	str	r3, [r7, #4]
      break;
 8005c20:	e007      	b.n	8005c32 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005c22:	2008      	movs	r0, #8
 8005c24:	f000 f84a 	bl	8005cbc <RCC_PLL_GetFreqDomain_SYS>
 8005c28:	6078      	str	r0, [r7, #4]
      break;
 8005c2a:	e002      	b.n	8005c32 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	@ (8005c3c <RCC_GetSystemClockFreq+0x48>)
 8005c2e:	607b      	str	r3, [r7, #4]
      break;
 8005c30:	bf00      	nop
  }

  return frequency;
 8005c32:	687b      	ldr	r3, [r7, #4]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	00f42400 	.word	0x00f42400

08005c40 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005c48:	f7ff ff4c 	bl	8005ae4 <LL_RCC_GetAHBPrescaler>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	4a04      	ldr	r2, [pc, #16]	@ (8005c68 <RCC_GetHCLKClockFreq+0x28>)
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	40d3      	lsrs	r3, r2
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	0800d430 	.word	0x0800d430

08005c6c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c74:	f7ff ff44 	bl	8005b00 <LL_RCC_GetAPB1Prescaler>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <RCC_GetPCLK1ClockFreq+0x24>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	461a      	mov	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	40d3      	lsrs	r3, r2
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	0800d440 	.word	0x0800d440

08005c94 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c9c:	f7ff ff3e 	bl	8005b1c <LL_RCC_GetAPB2Prescaler>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <RCC_GetPCLK2ClockFreq+0x24>)
 8005ca6:	5cd3      	ldrb	r3, [r2, r3]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	40d3      	lsrs	r3, r2
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	0800d440 	.word	0x0800d440

08005cbc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005cd0:	f7ff ff32 	bl	8005b38 <LL_RCC_PLL_GetMainSource>
 8005cd4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce2:	d003      	beq.n	8005cec <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005ce4:	e005      	b.n	8005cf2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005ce8:	617b      	str	r3, [r7, #20]
      break;
 8005cea:	e005      	b.n	8005cf8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005cec:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005cee:	617b      	str	r3, [r7, #20]
      break;
 8005cf0:	e002      	b.n	8005cf8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d30 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005cf4:	617b      	str	r3, [r7, #20]
      break;
 8005cf6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d113      	bne.n	8005d26 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005cfe:	f7ff ff45 	bl	8005b8c <LL_RCC_PLL_GetDivider>
 8005d02:	4602      	mov	r2, r0
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fbb3 f4f2 	udiv	r4, r3, r2
 8005d0a:	f7ff ff23 	bl	8005b54 <LL_RCC_PLL_GetN>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	fb03 f404 	mul.w	r4, r3, r4
 8005d14:	f7ff ff2c 	bl	8005b70 <LL_RCC_PLL_GetP>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	0c1b      	lsrs	r3, r3, #16
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d24:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005d26:	693b      	ldr	r3, [r7, #16]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}
 8005d30:	00f42400 	.word	0x00f42400

08005d34 <LL_SPI_IsEnabled>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b40      	cmp	r3, #64	@ 0x40
 8005d46:	d101      	bne.n	8005d4c <LL_SPI_IsEnabled+0x18>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <LL_SPI_IsEnabled+0x1a>
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_SPI_SetCRCPolynomial>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ffd3 	bl	8005d34 <LL_SPI_IsEnabled>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d139      	bne.n	8005e08 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d9c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	6811      	ldr	r1, [r2, #0]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	6852      	ldr	r2, [r2, #4]
 8005da8:	4311      	orrs	r1, r2
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	6892      	ldr	r2, [r2, #8]
 8005dae:	4311      	orrs	r1, r2
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	68d2      	ldr	r2, [r2, #12]
 8005db4:	4311      	orrs	r1, r2
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	6912      	ldr	r2, [r2, #16]
 8005dba:	4311      	orrs	r1, r2
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	6952      	ldr	r2, [r2, #20]
 8005dc0:	4311      	orrs	r1, r2
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	6992      	ldr	r2, [r2, #24]
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	69d2      	ldr	r2, [r2, #28]
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	6a12      	ldr	r2, [r2, #32]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 0204 	bic.w	r2, r3, #4
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df6:	d105      	bne.n	8005e04 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffab 	bl	8005d5a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005e04:	2300      	movs	r3, #0
 8005e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	61da      	str	r2, [r3, #28]
  return status;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <LL_TIM_SetPrescaler>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <LL_TIM_SetAutoReload>:
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <LL_TIM_SetRepetitionCounter>:
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <LL_TIM_OC_SetCompareCH1>:
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_TIM_OC_SetCompareCH2>:
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <LL_TIM_OC_SetCompareCH3>:
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_TIM_OC_SetCompareCH4>:
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f043 0201 	orr.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	615a      	str	r2, [r3, #20]
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3d      	ldr	r2, [pc, #244]	@ (800600c <LL_TIM_Init+0x108>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f22:	d00f      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	@ (8006010 <LL_TIM_Init+0x10c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a39      	ldr	r2, [pc, #228]	@ (8006014 <LL_TIM_Init+0x110>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d007      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a38      	ldr	r2, [pc, #224]	@ (8006018 <LL_TIM_Init+0x114>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a37      	ldr	r2, [pc, #220]	@ (800601c <LL_TIM_Init+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d106      	bne.n	8005f52 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2d      	ldr	r2, [pc, #180]	@ (800600c <LL_TIM_Init+0x108>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d02b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f60:	d027      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <LL_TIM_Init+0x10c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d023      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <LL_TIM_Init+0x110>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01f      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	@ (8006018 <LL_TIM_Init+0x114>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	@ (800601c <LL_TIM_Init+0x118>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d017      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a26      	ldr	r2, [pc, #152]	@ (8006020 <LL_TIM_Init+0x11c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	@ (8006024 <LL_TIM_Init+0x120>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <LL_TIM_Init+0x124>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	@ (800602c <LL_TIM_Init+0x128>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	@ (8006030 <LL_TIM_Init+0x12c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a21      	ldr	r2, [pc, #132]	@ (8006034 <LL_TIM_Init+0x130>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d106      	bne.n	8005fc0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ff34 	bl	8005e3a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff20 	bl	8005e1e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800600c <LL_TIM_Init+0x108>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <LL_TIM_Init+0xea>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800601c <LL_TIM_Init+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d105      	bne.n	8005ffa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff2e 	bl	8005e56 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff71 	bl	8005ee2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800
 800602c:	40001800 	.word	0x40001800
 8006030:	40001c00 	.word	0x40001c00
 8006034:	40002000 	.word	0x40002000

08006038 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604e:	d027      	beq.n	80060a0 <LL_TIM_OC_Init+0x68>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006056:	d82a      	bhi.n	80060ae <LL_TIM_OC_Init+0x76>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605e:	d018      	beq.n	8006092 <LL_TIM_OC_Init+0x5a>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006066:	d822      	bhi.n	80060ae <LL_TIM_OC_Init+0x76>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d003      	beq.n	8006076 <LL_TIM_OC_Init+0x3e>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d007      	beq.n	8006084 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006074:	e01b      	b.n	80060ae <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f81f 	bl	80060bc <OC1Config>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]
      break;
 8006082:	e015      	b.n	80060b0 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f884 	bl	8006194 <OC2Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]
      break;
 8006090:	e00e      	b.n	80060b0 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f8ed 	bl	8006274 <OC3Config>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
      break;
 800609e:	e007      	b.n	80060b0 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f956 	bl	8006354 <OC4Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	e000      	b.n	80060b0 <LL_TIM_OC_Init+0x78>
      break;
 80060ae:	bf00      	nop
  }

  return result;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 0202 	bic.w	r2, r3, #2
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1c      	ldr	r2, [pc, #112]	@ (800618c <OC1Config+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <OC1Config+0x6a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1b      	ldr	r2, [pc, #108]	@ (8006190 <OC1Config+0xd4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d11e      	bne.n	8006164 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0208 	bic.w	r2, r3, #8
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 0204 	bic.w	r2, r3, #4
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fe7b 	bl	8005e72 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40010000 	.word	0x40010000
 8006190:	40010400 	.word	0x40010400

08006194 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0220 	bic.w	r2, r3, #32
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0210 	bic.w	r2, r3, #16
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <OC2Config+0xd8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <OC2Config+0x70>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <OC2Config+0xdc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d11f      	bne.n	8006244 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	019b      	lsls	r3, r3, #6
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	019b      	lsls	r3, r3, #6
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fe19 	bl	8005e8e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1d      	ldr	r2, [pc, #116]	@ (800634c <OC3Config+0xd8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d003      	beq.n	80062e2 <OC3Config+0x6e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006350 <OC3Config+0xdc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d11f      	bne.n	8006322 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	029b      	lsls	r3, r3, #10
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	015b      	lsls	r3, r3, #5
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fdb8 	bl	8005eaa <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	031b      	lsls	r3, r3, #12
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <OC4Config+0xa8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <OC4Config+0x70>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a10      	ldr	r2, [pc, #64]	@ (8006400 <OC4Config+0xac>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d107      	bne.n	80063d4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fd6d 	bl	8005ec6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400

08006404 <LL_USART_IsEnabled>:
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <LL_USART_SetStopBitsLength>:
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	611a      	str	r2, [r3, #16]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_USART_SetHWFlowCtrl>:
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	615a      	str	r2, [r3, #20]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_USART_SetBaudRate>:
{
 8006478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800647c:	b0c0      	sub	sp, #256	@ 0x100
 800647e:	af00      	add	r7, sp, #0
 8006480:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006484:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006488:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800648c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006498:	f040 810c 	bne.w	80066b4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800649c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064ae:	4622      	mov	r2, r4
 80064b0:	462b      	mov	r3, r5
 80064b2:	1891      	adds	r1, r2, r2
 80064b4:	6639      	str	r1, [r7, #96]	@ 0x60
 80064b6:	415b      	adcs	r3, r3
 80064b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80064be:	4621      	mov	r1, r4
 80064c0:	eb12 0801 	adds.w	r8, r2, r1
 80064c4:	4629      	mov	r1, r5
 80064c6:	eb43 0901 	adc.w	r9, r3, r1
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064de:	4690      	mov	r8, r2
 80064e0:	4699      	mov	r9, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	eb18 0303 	adds.w	r3, r8, r3
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064ec:	462b      	mov	r3, r5
 80064ee:	eb49 0303 	adc.w	r3, r9, r3
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064fa:	2200      	movs	r2, #0
 80064fc:	469a      	mov	sl, r3
 80064fe:	4693      	mov	fp, r2
 8006500:	eb1a 030a 	adds.w	r3, sl, sl
 8006504:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006506:	eb4b 030b 	adc.w	r3, fp, fp
 800650a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800650c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006510:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006514:	f7fa fb68 	bl	8000be8 <__aeabi_uldivmod>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4b64      	ldr	r3, [pc, #400]	@ (80066b0 <LL_USART_SetBaudRate+0x238>)
 800651e:	fba3 2302 	umull	r2, r3, r3, r2
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	b29b      	uxth	r3, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	b29c      	uxth	r4, r3
 800652a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006534:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006538:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	1891      	adds	r1, r2, r2
 8006542:	6539      	str	r1, [r7, #80]	@ 0x50
 8006544:	415b      	adcs	r3, r3
 8006546:	657b      	str	r3, [r7, #84]	@ 0x54
 8006548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800654c:	4641      	mov	r1, r8
 800654e:	1851      	adds	r1, r2, r1
 8006550:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006552:	4649      	mov	r1, r9
 8006554:	414b      	adcs	r3, r1
 8006556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006564:	4659      	mov	r1, fp
 8006566:	00cb      	lsls	r3, r1, #3
 8006568:	4651      	mov	r1, sl
 800656a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800656e:	4651      	mov	r1, sl
 8006570:	00ca      	lsls	r2, r1, #3
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	4603      	mov	r3, r0
 8006578:	4642      	mov	r2, r8
 800657a:	189b      	adds	r3, r3, r2
 800657c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006580:	464b      	mov	r3, r9
 8006582:	460a      	mov	r2, r1
 8006584:	eb42 0303 	adc.w	r3, r2, r3
 8006588:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800658c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006590:	2200      	movs	r2, #0
 8006592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006596:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800659a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800659e:	460b      	mov	r3, r1
 80065a0:	18db      	adds	r3, r3, r3
 80065a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065a4:	4613      	mov	r3, r2
 80065a6:	eb42 0303 	adc.w	r3, r2, r3
 80065aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065b0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80065b4:	f7fa fb18 	bl	8000be8 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4611      	mov	r1, r2
 80065be:	4b3c      	ldr	r3, [pc, #240]	@ (80066b0 <LL_USART_SetBaudRate+0x238>)
 80065c0:	fba3 2301 	umull	r2, r3, r3, r1
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	2264      	movs	r2, #100	@ 0x64
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	1acb      	subs	r3, r1, r3
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065d4:	4b36      	ldr	r3, [pc, #216]	@ (80066b0 <LL_USART_SetBaudRate+0x238>)
 80065d6:	fba3 2302 	umull	r2, r3, r3, r2
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	b29b      	uxth	r3, r3
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4423      	add	r3, r4
 80065ea:	b29c      	uxth	r4, r3
 80065ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065f6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065fa:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80065fe:	4642      	mov	r2, r8
 8006600:	464b      	mov	r3, r9
 8006602:	1891      	adds	r1, r2, r2
 8006604:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006606:	415b      	adcs	r3, r3
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800660e:	4641      	mov	r1, r8
 8006610:	1851      	adds	r1, r2, r1
 8006612:	6339      	str	r1, [r7, #48]	@ 0x30
 8006614:	4649      	mov	r1, r9
 8006616:	414b      	adcs	r3, r1
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006626:	4659      	mov	r1, fp
 8006628:	00cb      	lsls	r3, r1, #3
 800662a:	4651      	mov	r1, sl
 800662c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006630:	4651      	mov	r1, sl
 8006632:	00ca      	lsls	r2, r1, #3
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	4603      	mov	r3, r0
 800663a:	4642      	mov	r2, r8
 800663c:	189b      	adds	r3, r3, r2
 800663e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006642:	464b      	mov	r3, r9
 8006644:	460a      	mov	r2, r1
 8006646:	eb42 0303 	adc.w	r3, r2, r3
 800664a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800664e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006658:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800665c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006660:	460b      	mov	r3, r1
 8006662:	18db      	adds	r3, r3, r3
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006666:	4613      	mov	r3, r2
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006672:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006676:	f7fa fab7 	bl	8000be8 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <LL_USART_SetBaudRate+0x238>)
 8006680:	fba3 1302 	umull	r1, r3, r3, r2
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	2164      	movs	r1, #100	@ 0x64
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	3332      	adds	r3, #50	@ 0x32
 8006692:	4a07      	ldr	r2, [pc, #28]	@ (80066b0 <LL_USART_SetBaudRate+0x238>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	b29b      	uxth	r3, r3
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	4423      	add	r3, r4
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	e108      	b.n	80068c2 <LL_USART_SetBaudRate+0x44a>
 80066b0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80066b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066be:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066c2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	1891      	adds	r1, r2, r2
 80066cc:	6239      	str	r1, [r7, #32]
 80066ce:	415b      	adcs	r3, r3
 80066d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066d6:	4641      	mov	r1, r8
 80066d8:	1854      	adds	r4, r2, r1
 80066da:	4649      	mov	r1, r9
 80066dc:	eb43 0501 	adc.w	r5, r3, r1
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	00eb      	lsls	r3, r5, #3
 80066ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ee:	00e2      	lsls	r2, r4, #3
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	4643      	mov	r3, r8
 80066f6:	18e3      	adds	r3, r4, r3
 80066f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066fc:	464b      	mov	r3, r9
 80066fe:	eb45 0303 	adc.w	r3, r5, r3
 8006702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800670a:	2200      	movs	r2, #0
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006710:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006720:	4629      	mov	r1, r5
 8006722:	008b      	lsls	r3, r1, #2
 8006724:	4621      	mov	r1, r4
 8006726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800672a:	4621      	mov	r1, r4
 800672c:	008a      	lsls	r2, r1, #2
 800672e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006732:	f7fa fa59 	bl	8000be8 <__aeabi_uldivmod>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4b65      	ldr	r3, [pc, #404]	@ (80068d0 <LL_USART_SetBaudRate+0x458>)
 800673c:	fba3 2302 	umull	r2, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	b29b      	uxth	r3, r3
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	b29c      	uxth	r4, r3
 8006748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006752:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006756:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800675a:	4642      	mov	r2, r8
 800675c:	464b      	mov	r3, r9
 800675e:	1891      	adds	r1, r2, r2
 8006760:	61b9      	str	r1, [r7, #24]
 8006762:	415b      	adcs	r3, r3
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800676a:	4641      	mov	r1, r8
 800676c:	1851      	adds	r1, r2, r1
 800676e:	6139      	str	r1, [r7, #16]
 8006770:	4649      	mov	r1, r9
 8006772:	414b      	adcs	r3, r1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006782:	4659      	mov	r1, fp
 8006784:	00cb      	lsls	r3, r1, #3
 8006786:	4651      	mov	r1, sl
 8006788:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678c:	4651      	mov	r1, sl
 800678e:	00ca      	lsls	r2, r1, #3
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	4603      	mov	r3, r0
 8006796:	4642      	mov	r2, r8
 8006798:	189b      	adds	r3, r3, r2
 800679a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800679e:	464b      	mov	r3, r9
 80067a0:	460a      	mov	r2, r1
 80067a2:	eb42 0303 	adc.w	r3, r2, r3
 80067a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80067c4:	4649      	mov	r1, r9
 80067c6:	008b      	lsls	r3, r1, #2
 80067c8:	4641      	mov	r1, r8
 80067ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ce:	4641      	mov	r1, r8
 80067d0:	008a      	lsls	r2, r1, #2
 80067d2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80067d6:	f7fa fa07 	bl	8000be8 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	4b3b      	ldr	r3, [pc, #236]	@ (80068d0 <LL_USART_SetBaudRate+0x458>)
 80067e2:	fba3 2301 	umull	r2, r3, r3, r1
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2264      	movs	r2, #100	@ 0x64
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	1acb      	subs	r3, r1, r3
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3332      	adds	r3, #50	@ 0x32
 80067f4:	4a36      	ldr	r2, [pc, #216]	@ (80068d0 <LL_USART_SetBaudRate+0x458>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006802:	b29b      	uxth	r3, r3
 8006804:	4423      	add	r3, r4
 8006806:	b29c      	uxth	r4, r3
 8006808:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800680c:	2200      	movs	r2, #0
 800680e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006810:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006812:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006816:	4642      	mov	r2, r8
 8006818:	464b      	mov	r3, r9
 800681a:	1891      	adds	r1, r2, r2
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	415b      	adcs	r3, r3
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006826:	4641      	mov	r1, r8
 8006828:	1851      	adds	r1, r2, r1
 800682a:	6039      	str	r1, [r7, #0]
 800682c:	4649      	mov	r1, r9
 800682e:	414b      	adcs	r3, r1
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800683e:	4659      	mov	r1, fp
 8006840:	00cb      	lsls	r3, r1, #3
 8006842:	4651      	mov	r1, sl
 8006844:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006848:	4651      	mov	r1, sl
 800684a:	00ca      	lsls	r2, r1, #3
 800684c:	4610      	mov	r0, r2
 800684e:	4619      	mov	r1, r3
 8006850:	4603      	mov	r3, r0
 8006852:	4642      	mov	r2, r8
 8006854:	189b      	adds	r3, r3, r2
 8006856:	673b      	str	r3, [r7, #112]	@ 0x70
 8006858:	464b      	mov	r3, r9
 800685a:	460a      	mov	r2, r1
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	677b      	str	r3, [r7, #116]	@ 0x74
 8006862:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006866:	2200      	movs	r2, #0
 8006868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800686a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006878:	4649      	mov	r1, r9
 800687a:	008b      	lsls	r3, r1, #2
 800687c:	4641      	mov	r1, r8
 800687e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006882:	4641      	mov	r1, r8
 8006884:	008a      	lsls	r2, r1, #2
 8006886:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800688a:	f7fa f9ad 	bl	8000be8 <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4b0f      	ldr	r3, [pc, #60]	@ (80068d0 <LL_USART_SetBaudRate+0x458>)
 8006894:	fba3 1302 	umull	r1, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2164      	movs	r1, #100	@ 0x64
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	3332      	adds	r3, #50	@ 0x32
 80068a6:	4a0a      	ldr	r2, [pc, #40]	@ (80068d0 <LL_USART_SetBaudRate+0x458>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	4423      	add	r3, r4
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c0:	609a      	str	r2, [r3, #8]
}
 80068c2:	bf00      	nop
 80068c4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068c8:	46bd      	mov	sp, r7
 80068ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ce:	bf00      	nop
 80068d0:	51eb851f 	.word	0x51eb851f

080068d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fd8c 	bl	8006404 <LL_USART_IsEnabled>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d15e      	bne.n	80069b0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80068fa:	f023 030c 	bic.w	r3, r3, #12
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	6851      	ldr	r1, [r2, #4]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	68d2      	ldr	r2, [r2, #12]
 8006906:	4311      	orrs	r1, r2
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	6912      	ldr	r2, [r2, #16]
 800690c:	4311      	orrs	r1, r2
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	6992      	ldr	r2, [r2, #24]
 8006912:	430a      	orrs	r2, r1
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fd83 	bl	800642c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff fd90 	bl	8006452 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff f936 	bl	8005ba8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1f      	ldr	r2, [pc, #124]	@ (80069bc <LL_USART_Init+0xe8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d102      	bne.n	800694a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e021      	b.n	800698e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <LL_USART_Init+0xec>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d102      	bne.n	8006958 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	e01a      	b.n	800698e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <LL_USART_Init+0xf0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d102      	bne.n	8006966 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e013      	b.n	800698e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a17      	ldr	r2, [pc, #92]	@ (80069c8 <LL_USART_Init+0xf4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d102      	bne.n	8006974 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e00c      	b.n	800698e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <LL_USART_Init+0xf8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d102      	bne.n	8006982 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e005      	b.n	800698e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a12      	ldr	r2, [pc, #72]	@ (80069d0 <LL_USART_Init+0xfc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00d      	beq.n	80069b0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fd64 	bl	8006478 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80069b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40011000 	.word	0x40011000
 80069c0:	40004400 	.word	0x40004400
 80069c4:	40004800 	.word	0x40004800
 80069c8:	40011400 	.word	0x40011400
 80069cc:	40004c00 	.word	0x40004c00
 80069d0:	40005000 	.word	0x40005000

080069d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069d4:	b084      	sub	sp, #16
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	f107 001c 	add.w	r0, r7, #28
 80069e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d123      	bne.n	8006a36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d105      	bne.n	8006a2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fae8 	bl	8008000 <USB_CoreReset>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e01b      	b.n	8006a6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fadc 	bl	8008000 <USB_CoreReset>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a60:	e005      	b.n	8006a6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a6e:	7fbb      	ldrb	r3, [r7, #30]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10b      	bne.n	8006a8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f043 0206 	orr.w	r2, r3, #6
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f043 0220 	orr.w	r2, r3, #32
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr

08006a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d165      	bne.n	8006b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a41      	ldr	r2, [pc, #260]	@ (8006bb8 <USB_SetTurnaroundTime+0x11c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d906      	bls.n	8006ac6 <USB_SetTurnaroundTime+0x2a>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a40      	ldr	r2, [pc, #256]	@ (8006bbc <USB_SetTurnaroundTime+0x120>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d202      	bcs.n	8006ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ac0:	230f      	movs	r3, #15
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e062      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bbc <USB_SetTurnaroundTime+0x120>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d306      	bcc.n	8006adc <USB_SetTurnaroundTime+0x40>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8006bc0 <USB_SetTurnaroundTime+0x124>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d202      	bcs.n	8006adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ad6:	230e      	movs	r3, #14
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e057      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a38      	ldr	r2, [pc, #224]	@ (8006bc0 <USB_SetTurnaroundTime+0x124>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d306      	bcc.n	8006af2 <USB_SetTurnaroundTime+0x56>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a37      	ldr	r2, [pc, #220]	@ (8006bc4 <USB_SetTurnaroundTime+0x128>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d202      	bcs.n	8006af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006aec:	230d      	movs	r3, #13
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e04c      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4a33      	ldr	r2, [pc, #204]	@ (8006bc4 <USB_SetTurnaroundTime+0x128>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d306      	bcc.n	8006b08 <USB_SetTurnaroundTime+0x6c>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a32      	ldr	r2, [pc, #200]	@ (8006bc8 <USB_SetTurnaroundTime+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d802      	bhi.n	8006b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b02:	230c      	movs	r3, #12
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e041      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bc8 <USB_SetTurnaroundTime+0x12c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d906      	bls.n	8006b1e <USB_SetTurnaroundTime+0x82>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a2e      	ldr	r2, [pc, #184]	@ (8006bcc <USB_SetTurnaroundTime+0x130>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d802      	bhi.n	8006b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b18:	230b      	movs	r3, #11
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e036      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4a2a      	ldr	r2, [pc, #168]	@ (8006bcc <USB_SetTurnaroundTime+0x130>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d906      	bls.n	8006b34 <USB_SetTurnaroundTime+0x98>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4a29      	ldr	r2, [pc, #164]	@ (8006bd0 <USB_SetTurnaroundTime+0x134>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d802      	bhi.n	8006b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b2e:	230a      	movs	r3, #10
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e02b      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a26      	ldr	r2, [pc, #152]	@ (8006bd0 <USB_SetTurnaroundTime+0x134>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d906      	bls.n	8006b4a <USB_SetTurnaroundTime+0xae>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a25      	ldr	r2, [pc, #148]	@ (8006bd4 <USB_SetTurnaroundTime+0x138>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d202      	bcs.n	8006b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b44:	2309      	movs	r3, #9
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	e020      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4a21      	ldr	r2, [pc, #132]	@ (8006bd4 <USB_SetTurnaroundTime+0x138>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d306      	bcc.n	8006b60 <USB_SetTurnaroundTime+0xc4>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4a20      	ldr	r2, [pc, #128]	@ (8006bd8 <USB_SetTurnaroundTime+0x13c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d802      	bhi.n	8006b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e015      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd8 <USB_SetTurnaroundTime+0x13c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d906      	bls.n	8006b76 <USB_SetTurnaroundTime+0xda>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bdc <USB_SetTurnaroundTime+0x140>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d202      	bcs.n	8006b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b70:	2307      	movs	r3, #7
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e00a      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b76:	2306      	movs	r3, #6
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e007      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b82:	2309      	movs	r3, #9
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e001      	b.n	8006b8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b88:	2309      	movs	r3, #9
 8006b8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	029b      	lsls	r3, r3, #10
 8006ba0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	00d8acbf 	.word	0x00d8acbf
 8006bbc:	00e4e1c0 	.word	0x00e4e1c0
 8006bc0:	00f42400 	.word	0x00f42400
 8006bc4:	01067380 	.word	0x01067380
 8006bc8:	011a499f 	.word	0x011a499f
 8006bcc:	01312cff 	.word	0x01312cff
 8006bd0:	014ca43f 	.word	0x014ca43f
 8006bd4:	016e3600 	.word	0x016e3600
 8006bd8:	01a6ab1f 	.word	0x01a6ab1f
 8006bdc:	01e84800 	.word	0x01e84800

08006be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f043 0201 	orr.w	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f023 0201 	bic.w	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d115      	bne.n	8006c72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c52:	200a      	movs	r0, #10
 8006c54:	f7fc f8ee 	bl	8002e34 <HAL_Delay>
      ms += 10U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	330a      	adds	r3, #10
 8006c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f93f 	bl	8007ee2 <USB_GetMode>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d01e      	beq.n	8006ca8 <USB_SetCurrentMode+0x84>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c6e:	d9f0      	bls.n	8006c52 <USB_SetCurrentMode+0x2e>
 8006c70:	e01a      	b.n	8006ca8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d115      	bne.n	8006ca4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c84:	200a      	movs	r0, #10
 8006c86:	f7fc f8d5 	bl	8002e34 <HAL_Delay>
      ms += 10U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	330a      	adds	r3, #10
 8006c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f926 	bl	8007ee2 <USB_GetMode>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <USB_SetCurrentMode+0x84>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ca0:	d9f0      	bls.n	8006c84 <USB_SetCurrentMode+0x60>
 8006ca2:	e001      	b.n	8006ca8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e005      	b.n	8006cb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2bc8      	cmp	r3, #200	@ 0xc8
 8006cac:	d101      	bne.n	8006cb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b086      	sub	sp, #24
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	e009      	b.n	8006cf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	3340      	adds	r3, #64	@ 0x40
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3301      	adds	r3, #1
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b0e      	cmp	r3, #14
 8006cf4:	d9f2      	bls.n	8006cdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cf6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11c      	bne.n	8006d38 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d0c:	f043 0302 	orr.w	r3, r3, #2
 8006d10:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d36:	e00b      	b.n	8006d50 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d10d      	bne.n	8006d80 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f968 	bl	8007044 <USB_SetDevSpeed>
 8006d74:	e008      	b.n	8006d88 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d76:	2101      	movs	r1, #1
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f963 	bl	8007044 <USB_SetDevSpeed>
 8006d7e:	e003      	b.n	8006d88 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d80:	2103      	movs	r1, #3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f95e 	bl	8007044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d88:	2110      	movs	r1, #16
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8fa 	bl	8006f84 <USB_FlushTxFifo>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f924 	bl	8006fe8 <USB_FlushRxFifo>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e043      	b.n	8006e5c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dea:	d118      	bne.n	8006e1e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	e013      	b.n	8006e30 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	461a      	mov	r2, r3
 8006e16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	e008      	b.n	8006e30 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e60:	461a      	mov	r2, r3
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d3b5      	bcc.n	8006dd4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	e043      	b.n	8006ef6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e84:	d118      	bne.n	8006eb8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	e013      	b.n	8006eca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e008      	b.n	8006eca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006efa:	461a      	mov	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d3b5      	bcc.n	8006e6e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f043 0210 	orr.w	r2, r3, #16
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <USB_DevInit+0x2c4>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f043 0208 	orr.w	r2, r3, #8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d107      	bne.n	8006f70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f68:	f043 0304 	orr.w	r3, r3, #4
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f7c:	b004      	add	sp, #16
 8006f7e:	4770      	bx	lr
 8006f80:	803c3800 	.word	0x803c3800

08006f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f9e:	d901      	bls.n	8006fa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e01b      	b.n	8006fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	daf2      	bge.n	8006f92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	019b      	lsls	r3, r3, #6
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fc8:	d901      	bls.n	8006fce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e006      	b.n	8006fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d0f0      	beq.n	8006fbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007000:	d901      	bls.n	8007006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e018      	b.n	8007038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	daf2      	bge.n	8006ff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2210      	movs	r2, #16
 8007016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007024:	d901      	bls.n	800702a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e006      	b.n	8007038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0310 	and.w	r3, r3, #16
 8007032:	2b10      	cmp	r3, #16
 8007034:	d0f0      	beq.n	8007018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
 800709a:	e00a      	b.n	80070b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d002      	beq.n	80070a8 <USB_GetDevSpeed+0x32>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d102      	bne.n	80070ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070a8:	2302      	movs	r3, #2
 80070aa:	75fb      	strb	r3, [r7, #23]
 80070ac:	e001      	b.n	80070b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070ae:	230f      	movs	r3, #15
 80070b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d13a      	bne.n	8007152 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d155      	bne.n	80071c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007130:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	059b      	lsls	r3, r3, #22
 8007136:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007138:	4313      	orrs	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e036      	b.n	80071c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	2101      	movs	r1, #1
 8007164:	fa01 f303 	lsl.w	r3, r1, r3
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007170:	4313      	orrs	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d11a      	bne.n	80071c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071a6:	430b      	orrs	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d161      	bne.n	80072b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007202:	d11f      	bne.n	8007244 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800721e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007222:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007242:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	2101      	movs	r1, #1
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	b29b      	uxth	r3, r3
 800725c:	43db      	mvns	r3, r3
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007264:	4013      	ands	r3, r2
 8007266:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	43db      	mvns	r3, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007288:	4013      	ands	r3, r2
 800728a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	0159      	lsls	r1, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	440b      	add	r3, r1
 80072a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a6:	4619      	mov	r1, r3
 80072a8:	4b35      	ldr	r3, [pc, #212]	@ (8007380 <USB_DeactivateEndpoint+0x1b0>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]
 80072ae:	e060      	b.n	8007372 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c6:	d11f      	bne.n	8007308 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007302:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007306:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2101      	movs	r1, #1
 800731a:	fa01 f303 	lsl.w	r3, r1, r3
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	43db      	mvns	r3, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007328:	4013      	ands	r3, r2
 800732a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	2101      	movs	r1, #1
 800733e:	fa01 f303 	lsl.w	r3, r1, r3
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	43db      	mvns	r3, r3
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800734c:	4013      	ands	r3, r2
 800734e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0159      	lsls	r1, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	440b      	add	r3, r1
 8007366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736a:	4619      	mov	r1, r3
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <USB_DeactivateEndpoint+0x1b4>)
 800736e:	4013      	ands	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	ec337800 	.word	0xec337800
 8007384:	eff37800 	.word	0xeff37800

08007388 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	@ 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f040 817f 	bne.w	80076a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d132      	bne.n	8007418 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80073d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80073d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007410:	0cdb      	lsrs	r3, r3, #19
 8007412:	04db      	lsls	r3, r3, #19
 8007414:	6113      	str	r3, [r2, #16]
 8007416:	e097      	b.n	8007548 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007432:	0cdb      	lsrs	r3, r3, #19
 8007434:	04db      	lsls	r3, r3, #19
 8007436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007452:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007456:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800745a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d11a      	bne.n	8007498 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	d903      	bls.n	8007476 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007494:	6113      	str	r3, [r2, #16]
 8007496:	e044      	b.n	8007522 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	1e5a      	subs	r2, r3, #1
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	8afb      	ldrh	r3, [r7, #22]
 80074be:	04d9      	lsls	r1, r3, #19
 80074c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007754 <USB_EPStartXfer+0x3cc>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	69f9      	ldr	r1, [r7, #28]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d122      	bne.n	8007522 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80074fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	8afb      	ldrh	r3, [r7, #22]
 800750c:	075b      	lsls	r3, r3, #29
 800750e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	0148      	lsls	r0, r1, #5
 8007516:	69f9      	ldr	r1, [r7, #28]
 8007518:	4401      	add	r1, r0
 800751a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800751e:	4313      	orrs	r3, r2
 8007520:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007538:	69b9      	ldr	r1, [r7, #24]
 800753a:	0148      	lsls	r0, r1, #5
 800753c:	69f9      	ldr	r1, [r7, #28]
 800753e:	4401      	add	r1, r0
 8007540:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007544:	4313      	orrs	r3, r2
 8007546:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d14b      	bne.n	80075e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007562:	461a      	mov	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d128      	bne.n	80075c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d110      	bne.n	80075a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800759c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	e00f      	b.n	80075c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e166      	b.n	80078b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007600:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007604:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	791b      	ldrb	r3, [r3, #4]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d015      	beq.n	800763a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 814e 	beq.w	80078b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	2101      	movs	r1, #1
 800762a:	fa01 f303 	lsl.w	r3, r1, r3
 800762e:	69f9      	ldr	r1, [r7, #28]
 8007630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007634:	4313      	orrs	r3, r2
 8007636:	634b      	str	r3, [r1, #52]	@ 0x34
 8007638:	e13c      	b.n	80078b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d110      	bne.n	800766c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007664:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e00f      	b.n	800768c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	440a      	add	r2, r1
 8007682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800768a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	68d9      	ldr	r1, [r3, #12]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	b298      	uxth	r0, r3
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f9b9 	bl	8007a18 <USB_WritePacket>
 80076a6:	e105      	b.n	80078b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076c2:	0cdb      	lsrs	r3, r3, #19
 80076c4:	04db      	lsls	r3, r3, #19
 80076c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80076e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80076ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d132      	bne.n	8007758 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	0148      	lsls	r0, r1, #5
 8007724:	69f9      	ldr	r1, [r7, #28]
 8007726:	4401      	add	r1, r0
 8007728:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800772c:	4313      	orrs	r3, r2
 800772e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800774e:	6113      	str	r3, [r2, #16]
 8007750:	e062      	b.n	8007818 <USB_EPStartXfer+0x490>
 8007752:	bf00      	nop
 8007754:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d123      	bne.n	80077a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007776:	69b9      	ldr	r1, [r7, #24]
 8007778:	0148      	lsls	r0, r1, #5
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	4401      	add	r1, r0
 800777e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007782:	4313      	orrs	r3, r2
 8007784:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077a4:	6113      	str	r3, [r2, #16]
 80077a6:	e037      	b.n	8007818 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	1e5a      	subs	r2, r3, #1
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	8afa      	ldrh	r2, [r7, #22]
 80077c4:	fb03 f202 	mul.w	r2, r3, r2
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	691a      	ldr	r2, [r3, #16]
 80077da:	8afb      	ldrh	r3, [r7, #22]
 80077dc:	04d9      	lsls	r1, r3, #19
 80077de:	4b38      	ldr	r3, [pc, #224]	@ (80078c0 <USB_EPStartXfer+0x538>)
 80077e0:	400b      	ands	r3, r1
 80077e2:	69b9      	ldr	r1, [r7, #24]
 80077e4:	0148      	lsls	r0, r1, #5
 80077e6:	69f9      	ldr	r1, [r7, #28]
 80077e8:	4401      	add	r1, r0
 80077ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077ee:	4313      	orrs	r3, r2
 80077f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007808:	69b9      	ldr	r1, [r7, #24]
 800780a:	0148      	lsls	r0, r1, #5
 800780c:	69f9      	ldr	r1, [r7, #28]
 800780e:	4401      	add	r1, r0
 8007810:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007814:	4313      	orrs	r3, r2
 8007816:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d10d      	bne.n	800783a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	68d9      	ldr	r1, [r3, #12]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	460a      	mov	r2, r1
 8007838:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d128      	bne.n	8007894 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d110      	bne.n	8007874 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800786c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e00f      	b.n	8007894 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	440a      	add	r2, r1
 800788a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800788e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007892:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	1ff80000 	.word	0x1ff80000

080078c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d14a      	bne.n	8007978 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078fa:	f040 8086 	bne.w	8007a0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800791c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007920:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	440a      	add	r2, r1
 800793c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007944:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007952:	4293      	cmp	r3, r2
 8007954:	d902      	bls.n	800795c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	75fb      	strb	r3, [r7, #23]
          break;
 800795a:	e056      	b.n	8007a0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007974:	d0e7      	beq.n	8007946 <USB_EPStopXfer+0x82>
 8007976:	e048      	b.n	8007a0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800798c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007990:	d13b      	bne.n	8007a0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d902      	bls.n	80079f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
          break;
 80079ee:	e00c      	b.n	8007a0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a08:	d0e7      	beq.n	80079da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b089      	sub	sp, #36	@ 0x24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	460b      	mov	r3, r1
 8007a28:	71fb      	strb	r3, [r7, #7]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d123      	bne.n	8007a86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a3e:	88bb      	ldrh	r3, [r7, #4]
 8007a40:	3303      	adds	r3, #3
 8007a42:	089b      	lsrs	r3, r3, #2
 8007a44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a46:	2300      	movs	r3, #0
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	e018      	b.n	8007a7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	031a      	lsls	r2, r3, #12
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a58:	461a      	mov	r2, r3
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3301      	adds	r3, #1
 8007a76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3e2      	bcc.n	8007a4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3724      	adds	r7, #36	@ 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b08b      	sub	sp, #44	@ 0x2c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	089b      	lsrs	r3, r3, #2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	e014      	b.n	8007aea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	601a      	str	r2, [r3, #0]
    pDest++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	3301      	adds	r3, #1
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	623b      	str	r3, [r7, #32]
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3e6      	bcc.n	8007ac0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007af2:	8bfb      	ldrh	r3, [r7, #30]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01e      	beq.n	8007b36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b02:	461a      	mov	r2, r3
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	3301      	adds	r3, #1
 8007b22:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	3301      	adds	r3, #1
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007b2a:	8bfb      	ldrh	r3, [r7, #30]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ea      	bne.n	8007b0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	372c      	adds	r7, #44	@ 0x2c
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d12c      	bne.n	8007bba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	db12      	blt.n	8007b98 <USB_EPSetStall+0x54>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00f      	beq.n	8007b98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	0151      	lsls	r1, r2, #5
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	440a      	add	r2, r1
 8007bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e02b      	b.n	8007c12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	db12      	blt.n	8007bf2 <USB_EPSetStall+0xae>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00f      	beq.n	8007bf2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007bf0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d128      	bne.n	8007c8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d003      	beq.n	8007c6c <USB_EPClearStall+0x4c>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	791b      	ldrb	r3, [r3, #4]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d138      	bne.n	8007cde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e027      	b.n	8007cde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ca8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	791b      	ldrb	r3, [r3, #4]
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d003      	beq.n	8007cbe <USB_EPClearStall+0x9e>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	791b      	ldrb	r3, [r3, #4]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d10f      	bne.n	8007cde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007d0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d26:	4313      	orrs	r3, r2
 8007d28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d66:	f023 0302 	bic.w	r3, r3, #2
 8007d6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	0c1b      	lsrs	r3, r3, #16
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4013      	ands	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	b29b      	uxth	r3, r3
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4013      	ands	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e78:	68bb      	ldr	r3, [r7, #8]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	01db      	lsls	r3, r3, #7
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	f003 0301 	and.w	r3, r3, #1
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	333c      	adds	r3, #60	@ 0x3c
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4a26      	ldr	r2, [pc, #152]	@ (8007ffc <USB_EP0_OutStart+0xb8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d90a      	bls.n	8007f7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f78:	d101      	bne.n	8007f7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e037      	b.n	8007fee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f84:	461a      	mov	r2, r3
 8007f86:	2300      	movs	r3, #0
 8007f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fac:	f043 0318 	orr.w	r3, r3, #24
 8007fb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fc0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007fc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d10f      	bne.n	8007fec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	4f54300a 	.word	0x4f54300a

08008000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008018:	d901      	bls.n	800801e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e01b      	b.n	8008056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	daf2      	bge.n	800800c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f043 0201 	orr.w	r2, r3, #1
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3301      	adds	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008042:	d901      	bls.n	8008048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e006      	b.n	8008056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b01      	cmp	r3, #1
 8008052:	d0f0      	beq.n	8008036 <USB_CoreReset+0x36>

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008070:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008074:	f002 fc9e 	bl	800a9b4 <USBD_static_malloc>
 8008078:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32b0      	adds	r2, #176	@ 0xb0
 800808a:	2100      	movs	r1, #0
 800808c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008090:	2302      	movs	r3, #2
 8008092:	e0d4      	b.n	800823e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008094:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008098:	2100      	movs	r1, #0
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f003 fb0f 	bl	800b6be <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32b0      	adds	r2, #176	@ 0xb0
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32b0      	adds	r2, #176	@ 0xb0
 80080ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7c1b      	ldrb	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d138      	bne.n	800813e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008248 <USBD_CDC_Init+0x1e4>)
 80080ce:	7819      	ldrb	r1, [r3, #0]
 80080d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080d4:	2202      	movs	r2, #2
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 fb49 	bl	800a76e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080dc:	4b5a      	ldr	r3, [pc, #360]	@ (8008248 <USBD_CDC_Init+0x1e4>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	3324      	adds	r3, #36	@ 0x24
 80080f2:	2201      	movs	r2, #1
 80080f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080f6:	4b55      	ldr	r3, [pc, #340]	@ (800824c <USBD_CDC_Init+0x1e8>)
 80080f8:	7819      	ldrb	r1, [r3, #0]
 80080fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080fe:	2202      	movs	r2, #2
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f002 fb34 	bl	800a76e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008106:	4b51      	ldr	r3, [pc, #324]	@ (800824c <USBD_CDC_Init+0x1e8>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800811e:	2201      	movs	r2, #1
 8008120:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008122:	4b4b      	ldr	r3, [pc, #300]	@ (8008250 <USBD_CDC_Init+0x1ec>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	f003 020f 	and.w	r2, r3, #15
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	3326      	adds	r3, #38	@ 0x26
 8008138:	2210      	movs	r2, #16
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e035      	b.n	80081aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800813e:	4b42      	ldr	r3, [pc, #264]	@ (8008248 <USBD_CDC_Init+0x1e4>)
 8008140:	7819      	ldrb	r1, [r3, #0]
 8008142:	2340      	movs	r3, #64	@ 0x40
 8008144:	2202      	movs	r2, #2
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f002 fb11 	bl	800a76e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800814c:	4b3e      	ldr	r3, [pc, #248]	@ (8008248 <USBD_CDC_Init+0x1e4>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 020f 	and.w	r2, r3, #15
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3324      	adds	r3, #36	@ 0x24
 8008162:	2201      	movs	r2, #1
 8008164:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008166:	4b39      	ldr	r3, [pc, #228]	@ (800824c <USBD_CDC_Init+0x1e8>)
 8008168:	7819      	ldrb	r1, [r3, #0]
 800816a:	2340      	movs	r3, #64	@ 0x40
 800816c:	2202      	movs	r2, #2
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f002 fafd 	bl	800a76e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008174:	4b35      	ldr	r3, [pc, #212]	@ (800824c <USBD_CDC_Init+0x1e8>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 020f 	and.w	r2, r3, #15
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800818c:	2201      	movs	r2, #1
 800818e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008190:	4b2f      	ldr	r3, [pc, #188]	@ (8008250 <USBD_CDC_Init+0x1ec>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 020f 	and.w	r2, r3, #15
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	440b      	add	r3, r1
 80081a4:	3326      	adds	r3, #38	@ 0x26
 80081a6:	2210      	movs	r2, #16
 80081a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081aa:	4b29      	ldr	r3, [pc, #164]	@ (8008250 <USBD_CDC_Init+0x1ec>)
 80081ac:	7819      	ldrb	r1, [r3, #0]
 80081ae:	2308      	movs	r3, #8
 80081b0:	2203      	movs	r2, #3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f002 fadb 	bl	800a76e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80081b8:	4b25      	ldr	r3, [pc, #148]	@ (8008250 <USBD_CDC_Init+0x1ec>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3324      	adds	r3, #36	@ 0x24
 80081ce:	2201      	movs	r2, #1
 80081d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	33b0      	adds	r3, #176	@ 0xb0
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008208:	2302      	movs	r3, #2
 800820a:	e018      	b.n	800823e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7c1b      	ldrb	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008214:	4b0d      	ldr	r3, [pc, #52]	@ (800824c <USBD_CDC_Init+0x1e8>)
 8008216:	7819      	ldrb	r1, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800821e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f002 fb92 	bl	800a94c <USBD_LL_PrepareReceive>
 8008228:	e008      	b.n	800823c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800822a:	4b08      	ldr	r3, [pc, #32]	@ (800824c <USBD_CDC_Init+0x1e8>)
 800822c:	7819      	ldrb	r1, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008234:	2340      	movs	r3, #64	@ 0x40
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f002 fb88 	bl	800a94c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000093 	.word	0x20000093
 800824c:	20000094 	.word	0x20000094
 8008250:	20000095 	.word	0x20000095

08008254 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008260:	4b3a      	ldr	r3, [pc, #232]	@ (800834c <USBD_CDC_DeInit+0xf8>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 faa7 	bl	800a7ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800826c:	4b37      	ldr	r3, [pc, #220]	@ (800834c <USBD_CDC_DeInit+0xf8>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 020f 	and.w	r2, r3, #15
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3324      	adds	r3, #36	@ 0x24
 8008282:	2200      	movs	r2, #0
 8008284:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008286:	4b32      	ldr	r3, [pc, #200]	@ (8008350 <USBD_CDC_DeInit+0xfc>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f002 fa94 	bl	800a7ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008292:	4b2f      	ldr	r3, [pc, #188]	@ (8008350 <USBD_CDC_DeInit+0xfc>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	f003 020f 	and.w	r2, r3, #15
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082aa:	2200      	movs	r2, #0
 80082ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80082ae:	4b29      	ldr	r3, [pc, #164]	@ (8008354 <USBD_CDC_DeInit+0x100>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f002 fa80 	bl	800a7ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80082ba:	4b26      	ldr	r3, [pc, #152]	@ (8008354 <USBD_CDC_DeInit+0x100>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 020f 	and.w	r2, r3, #15
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	3324      	adds	r3, #36	@ 0x24
 80082d0:	2200      	movs	r2, #0
 80082d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008354 <USBD_CDC_DeInit+0x100>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3326      	adds	r3, #38	@ 0x26
 80082ea:	2200      	movs	r2, #0
 80082ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	32b0      	adds	r2, #176	@ 0xb0
 80082f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01f      	beq.n	8008340 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	33b0      	adds	r3, #176	@ 0xb0
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32b0      	adds	r2, #176	@ 0xb0
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	4618      	mov	r0, r3
 8008324:	f002 fb54 	bl	800a9d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	32b0      	adds	r2, #176	@ 0xb0
 8008332:	2100      	movs	r1, #0
 8008334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000093 	.word	0x20000093
 8008350:	20000094 	.word	0x20000094
 8008354:	20000095 	.word	0x20000095

08008358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32b0      	adds	r2, #176	@ 0xb0
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e0bf      	b.n	8008508 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008390:	2b00      	cmp	r3, #0
 8008392:	d050      	beq.n	8008436 <USBD_CDC_Setup+0xde>
 8008394:	2b20      	cmp	r3, #32
 8008396:	f040 80af 	bne.w	80084f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d03a      	beq.n	8008418 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da1b      	bge.n	80083e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	33b0      	adds	r3, #176	@ 0xb0
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	88d2      	ldrh	r2, [r2, #6]
 80083c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b07      	cmp	r3, #7
 80083d0:	bf28      	it	cs
 80083d2:	2307      	movcs	r3, #7
 80083d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	89fa      	ldrh	r2, [r7, #14]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fd93 	bl	8009f08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083e2:	e090      	b.n	8008506 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	785a      	ldrb	r2, [r3, #1]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	88db      	ldrh	r3, [r3, #6]
 80083f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80083f4:	d803      	bhi.n	80083fe <USBD_CDC_Setup+0xa6>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	e000      	b.n	8008400 <USBD_CDC_Setup+0xa8>
 80083fe:	2240      	movs	r2, #64	@ 0x40
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008406:	6939      	ldr	r1, [r7, #16]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800840e:	461a      	mov	r2, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fda5 	bl	8009f60 <USBD_CtlPrepareRx>
      break;
 8008416:	e076      	b.n	8008506 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	33b0      	adds	r3, #176	@ 0xb0
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	7850      	ldrb	r0, [r2, #1]
 800842e:	2200      	movs	r2, #0
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	4798      	blx	r3
      break;
 8008434:	e067      	b.n	8008506 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b0b      	cmp	r3, #11
 800843c:	d851      	bhi.n	80084e2 <USBD_CDC_Setup+0x18a>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <USBD_CDC_Setup+0xec>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008475 	.word	0x08008475
 8008448:	080084f1 	.word	0x080084f1
 800844c:	080084e3 	.word	0x080084e3
 8008450:	080084e3 	.word	0x080084e3
 8008454:	080084e3 	.word	0x080084e3
 8008458:	080084e3 	.word	0x080084e3
 800845c:	080084e3 	.word	0x080084e3
 8008460:	080084e3 	.word	0x080084e3
 8008464:	080084e3 	.word	0x080084e3
 8008468:	080084e3 	.word	0x080084e3
 800846c:	0800849f 	.word	0x0800849f
 8008470:	080084c9 	.word	0x080084c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b03      	cmp	r3, #3
 800847e:	d107      	bne.n	8008490 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008480:	f107 030a 	add.w	r3, r7, #10
 8008484:	2202      	movs	r2, #2
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 fd3d 	bl	8009f08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800848e:	e032      	b.n	80084f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fcbb 	bl	8009e0e <USBD_CtlError>
            ret = USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	75fb      	strb	r3, [r7, #23]
          break;
 800849c:	e02b      	b.n	80084f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d107      	bne.n	80084ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084aa:	f107 030d 	add.w	r3, r7, #13
 80084ae:	2201      	movs	r2, #1
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fd28 	bl	8009f08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084b8:	e01d      	b.n	80084f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fca6 	bl	8009e0e <USBD_CtlError>
            ret = USBD_FAIL;
 80084c2:	2303      	movs	r3, #3
 80084c4:	75fb      	strb	r3, [r7, #23]
          break;
 80084c6:	e016      	b.n	80084f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d00f      	beq.n	80084f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fc99 	bl	8009e0e <USBD_CtlError>
            ret = USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084e0:	e008      	b.n	80084f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 fc92 	bl	8009e0e <USBD_CtlError>
          ret = USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
          break;
 80084ee:	e002      	b.n	80084f6 <USBD_CDC_Setup+0x19e>
          break;
 80084f0:	bf00      	nop
 80084f2:	e008      	b.n	8008506 <USBD_CDC_Setup+0x1ae>
          break;
 80084f4:	bf00      	nop
      }
      break;
 80084f6:	e006      	b.n	8008506 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fc87 	bl	8009e0e <USBD_CtlError>
      ret = USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	75fb      	strb	r3, [r7, #23]
      break;
 8008504:	bf00      	nop
  }

  return (uint8_t)ret;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	@ 0xb0
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008536:	2303      	movs	r3, #3
 8008538:	e065      	b.n	8008606 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	32b0      	adds	r2, #176	@ 0xb0
 8008544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	f003 020f 	and.w	r2, r3, #15
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	3318      	adds	r3, #24
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02f      	beq.n	80085c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 020f 	and.w	r2, r3, #15
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	3318      	adds	r3, #24
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	78fb      	ldrb	r3, [r7, #3]
 800857c:	f003 010f 	and.w	r1, r3, #15
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	460b      	mov	r3, r1
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	440b      	add	r3, r1
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4403      	add	r3, r0
 800858c:	331c      	adds	r3, #28
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	fbb2 f1f3 	udiv	r1, r2, r3
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800859a:	2b00      	cmp	r3, #0
 800859c:	d112      	bne.n	80085c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	f003 020f 	and.w	r2, r3, #15
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	440b      	add	r3, r1
 80085b0:	3318      	adds	r3, #24
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085b6:	78f9      	ldrb	r1, [r7, #3]
 80085b8:	2300      	movs	r3, #0
 80085ba:	2200      	movs	r2, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 f9a4 	bl	800a90a <USBD_LL_Transmit>
 80085c2:	e01f      	b.n	8008604 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	33b0      	adds	r3, #176	@ 0xb0
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	33b0      	adds	r3, #176	@ 0xb0
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	32b0      	adds	r2, #176	@ 0xb0
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	32b0      	adds	r2, #176	@ 0xb0
 8008634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800863c:	2303      	movs	r3, #3
 800863e:	e01a      	b.n	8008676 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f002 f9a2 	bl	800a98e <USBD_LL_GetRxDataSize>
 800864a:	4602      	mov	r2, r0
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	33b0      	adds	r3, #176	@ 0xb0
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008670:	4611      	mov	r1, r2
 8008672:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	32b0      	adds	r2, #176	@ 0xb0
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e024      	b.n	80086ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	33b0      	adds	r3, #176	@ 0xb0
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d019      	beq.n	80086e8 <USBD_CDC_EP0_RxReady+0x6a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80086ba:	2bff      	cmp	r3, #255	@ 0xff
 80086bc:	d014      	beq.n	80086e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	33b0      	adds	r3, #176	@ 0xb0
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80086d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	22ff      	movs	r2, #255	@ 0xff
 80086e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086fc:	2182      	movs	r1, #130	@ 0x82
 80086fe:	4818      	ldr	r0, [pc, #96]	@ (8008760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008700:	f000 fd4f 	bl	80091a2 <USBD_GetEpDesc>
 8008704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008706:	2101      	movs	r1, #1
 8008708:	4815      	ldr	r0, [pc, #84]	@ (8008760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800870a:	f000 fd4a 	bl	80091a2 <USBD_GetEpDesc>
 800870e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008710:	2181      	movs	r1, #129	@ 0x81
 8008712:	4813      	ldr	r0, [pc, #76]	@ (8008760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008714:	f000 fd45 	bl	80091a2 <USBD_GetEpDesc>
 8008718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2210      	movs	r2, #16
 8008724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d006      	beq.n	800873a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2200      	movs	r2, #0
 8008730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008734:	711a      	strb	r2, [r3, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008748:	711a      	strb	r2, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2243      	movs	r2, #67	@ 0x43
 8008752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000050 	.word	0x20000050

08008764 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800876c:	2182      	movs	r1, #130	@ 0x82
 800876e:	4818      	ldr	r0, [pc, #96]	@ (80087d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008770:	f000 fd17 	bl	80091a2 <USBD_GetEpDesc>
 8008774:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008776:	2101      	movs	r1, #1
 8008778:	4815      	ldr	r0, [pc, #84]	@ (80087d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800877a:	f000 fd12 	bl	80091a2 <USBD_GetEpDesc>
 800877e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008780:	2181      	movs	r1, #129	@ 0x81
 8008782:	4813      	ldr	r0, [pc, #76]	@ (80087d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008784:	f000 fd0d 	bl	80091a2 <USBD_GetEpDesc>
 8008788:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2210      	movs	r2, #16
 8008794:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d006      	beq.n	80087aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2200      	movs	r2, #0
 80087a0:	711a      	strb	r2, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f042 0202 	orr.w	r2, r2, #2
 80087a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d006      	beq.n	80087be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	711a      	strb	r2, [r3, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f042 0202 	orr.w	r2, r2, #2
 80087bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2243      	movs	r2, #67	@ 0x43
 80087c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087c4:	4b02      	ldr	r3, [pc, #8]	@ (80087d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000050 	.word	0x20000050

080087d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087dc:	2182      	movs	r1, #130	@ 0x82
 80087de:	4818      	ldr	r0, [pc, #96]	@ (8008840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087e0:	f000 fcdf 	bl	80091a2 <USBD_GetEpDesc>
 80087e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087e6:	2101      	movs	r1, #1
 80087e8:	4815      	ldr	r0, [pc, #84]	@ (8008840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087ea:	f000 fcda 	bl	80091a2 <USBD_GetEpDesc>
 80087ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087f0:	2181      	movs	r1, #129	@ 0x81
 80087f2:	4813      	ldr	r0, [pc, #76]	@ (8008840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087f4:	f000 fcd5 	bl	80091a2 <USBD_GetEpDesc>
 80087f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2210      	movs	r2, #16
 8008804:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d006      	beq.n	800881a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2200      	movs	r2, #0
 8008810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008814:	711a      	strb	r2, [r3, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d006      	beq.n	800882e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008828:	711a      	strb	r2, [r3, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2243      	movs	r2, #67	@ 0x43
 8008832:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008834:	4b02      	ldr	r3, [pc, #8]	@ (8008840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000050 	.word	0x20000050

08008844 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	220a      	movs	r2, #10
 8008850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	2000000c 	.word	0x2000000c

08008864 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	e009      	b.n	800888c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	33b0      	adds	r3, #176	@ 0xb0
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	32b0      	adds	r2, #176	@ 0xb0
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e008      	b.n	80088d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	32b0      	adds	r2, #176	@ 0xb0
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e004      	b.n	800890a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32b0      	adds	r2, #176	@ 0xb0
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008930:	2301      	movs	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800893a:	2303      	movs	r3, #3
 800893c:	e025      	b.n	800898a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11f      	bne.n	8008988 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2201      	movs	r2, #1
 800894c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008950:	4b10      	ldr	r3, [pc, #64]	@ (8008994 <USBD_CDC_TransmitPacket+0x7c>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4403      	add	r3, r0
 800896a:	3318      	adds	r3, #24
 800896c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <USBD_CDC_TransmitPacket+0x7c>)
 8008970:	7819      	ldrb	r1, [r3, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 ffc3 	bl	800a90a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000093 	.word	0x20000093

08008998 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	32b0      	adds	r2, #176	@ 0xb0
 80089aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32b0      	adds	r2, #176	@ 0xb0
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e018      	b.n	80089f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008a00 <USBD_CDC_ReceivePacket+0x68>)
 80089d0:	7819      	ldrb	r1, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 ffb5 	bl	800a94c <USBD_LL_PrepareReceive>
 80089e2:	e008      	b.n	80089f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <USBD_CDC_ReceivePacket+0x68>)
 80089e6:	7819      	ldrb	r1, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089ee:	2340      	movs	r3, #64	@ 0x40
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 ffab 	bl	800a94c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000094 	.word	0x20000094

08008a04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e01f      	b.n	8008a5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	79fa      	ldrb	r2, [r7, #7]
 8008a4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f001 fe25 	bl	800a6a0 <USBD_LL_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e025      	b.n	8008ac8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32ae      	adds	r2, #174	@ 0xae
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00f      	beq.n	8008ab8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32ae      	adds	r2, #174	@ 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	f107 020e 	add.w	r2, r7, #14
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fe2d 	bl	800a738 <USBD_LL_Start>
 8008ade:	4603      	mov	r3, r0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	4611      	mov	r1, r2
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	4798      	blx	r3
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 f90c 	bl	8009d9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008b90:	461a      	mov	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d01a      	beq.n	8008bdc <USBD_LL_SetupStage+0x72>
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d822      	bhi.n	8008bf0 <USBD_LL_SetupStage+0x86>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <USBD_LL_SetupStage+0x4a>
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d00a      	beq.n	8008bc8 <USBD_LL_SetupStage+0x5e>
 8008bb2:	e01d      	b.n	8008bf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fb63 	bl	8009288 <USBD_StdDevReq>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc6:	e020      	b.n	8008c0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fbcb 	bl	800936c <USBD_StdItfReq>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bda:	e016      	b.n	8008c0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc2d 	bl	8009444 <USBD_StdEPReq>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]
      break;
 8008bee:	e00c      	b.n	8008c0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008bf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 fdfa 	bl	800a7f8 <USBD_LL_StallEP>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
      break;
 8008c08:	bf00      	nop
  }

  return ret;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d16e      	bne.n	8008d0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008c32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	f040 8098 	bne.w	8008d70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d913      	bls.n	8008c74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	1ad2      	subs	r2, r2, r3
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bf28      	it	cs
 8008c66:	4613      	movcs	r3, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f001 f994 	bl	8009f9a <USBD_CtlContinueRx>
 8008c72:	e07d      	b.n	8008d70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d014      	beq.n	8008cac <USBD_LL_DataOutStage+0x98>
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d81d      	bhi.n	8008cc2 <USBD_LL_DataOutStage+0xae>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <USBD_LL_DataOutStage+0x7c>
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d003      	beq.n	8008c96 <USBD_LL_DataOutStage+0x82>
 8008c8e:	e018      	b.n	8008cc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	75bb      	strb	r3, [r7, #22]
            break;
 8008c94:	e018      	b.n	8008cc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fa64 	bl	800916e <USBD_CoreFindIF>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8008caa:	e00d      	b.n	8008cc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 fa66 	bl	8009188 <USBD_CoreFindEP>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	75bb      	strb	r3, [r7, #22]
            break;
 8008cc0:	e002      	b.n	8008cc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75bb      	strb	r3, [r7, #22]
            break;
 8008cc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008cc8:	7dbb      	ldrb	r3, [r7, #22]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d119      	bne.n	8008d02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d113      	bne.n	8008d02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cda:	7dba      	ldrb	r2, [r7, #22]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	32ae      	adds	r2, #174	@ 0xae
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008cea:	7dba      	ldrb	r2, [r7, #22]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008cf2:	7dba      	ldrb	r2, [r7, #22]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	32ae      	adds	r2, #174	@ 0xae
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 f95a 	bl	8009fbc <USBD_CtlSendStatus>
 8008d08:	e032      	b.n	8008d70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	4619      	mov	r1, r3
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fa37 	bl	8009188 <USBD_CoreFindEP>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	2bff      	cmp	r3, #255	@ 0xff
 8008d22:	d025      	beq.n	8008d70 <USBD_LL_DataOutStage+0x15c>
 8008d24:	7dbb      	ldrb	r3, [r7, #22]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d122      	bne.n	8008d70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d117      	bne.n	8008d66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d36:	7dba      	ldrb	r2, [r7, #22]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	32ae      	adds	r2, #174	@ 0xae
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00f      	beq.n	8008d66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d46:	7dba      	ldrb	r2, [r7, #22]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d4e:	7dba      	ldrb	r2, [r7, #22]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	32ae      	adds	r2, #174	@ 0xae
 8008d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	7afa      	ldrb	r2, [r7, #11]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	4798      	blx	r3
 8008d62:	4603      	mov	r3, r0
 8008d64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	e000      	b.n	8008d72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b086      	sub	sp, #24
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	460b      	mov	r3, r1
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d16f      	bne.n	8008e6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3314      	adds	r3, #20
 8008d92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d15a      	bne.n	8008e54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d914      	bls.n	8008dd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	1ad2      	subs	r2, r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f001 f8bc 	bl	8009f3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2100      	movs	r1, #0
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f001 fdbd 	bl	800a94c <USBD_LL_PrepareReceive>
 8008dd2:	e03f      	b.n	8008e54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d11c      	bne.n	8008e1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d316      	bcc.n	8008e1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d20f      	bcs.n	8008e1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f001 f89d 	bl	8009f3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f001 fd9a 	bl	800a94c <USBD_LL_PrepareReceive>
 8008e18:	e01c      	b.n	8008e54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d10f      	bne.n	8008e46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e46:	2180      	movs	r1, #128	@ 0x80
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 fcd5 	bl	800a7f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 f8c7 	bl	8009fe2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d03a      	beq.n	8008ed4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff fe42 	bl	8008ae8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008e6c:	e032      	b.n	8008ed4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f985 	bl	8009188 <USBD_CoreFindEP>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	2bff      	cmp	r3, #255	@ 0xff
 8008e86:	d025      	beq.n	8008ed4 <USBD_LL_DataInStage+0x15a>
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d122      	bne.n	8008ed4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d11c      	bne.n	8008ed4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e9a:	7dfa      	ldrb	r2, [r7, #23]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	32ae      	adds	r2, #174	@ 0xae
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d014      	beq.n	8008ed4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008eaa:	7dfa      	ldrb	r2, [r7, #23]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008eb2:	7dfa      	ldrb	r2, [r7, #23]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	32ae      	adds	r2, #174	@ 0xae
 8008eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	7afa      	ldrb	r2, [r7, #11]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	4798      	blx	r3
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008eca:	7dbb      	ldrb	r3, [r7, #22]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ed0:	7dbb      	ldrb	r3, [r7, #22]
 8008ed2:	e000      	b.n	8008ed6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d014      	beq.n	8008f44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00e      	beq.n	8008f44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	6852      	ldr	r2, [r2, #4]
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	4611      	mov	r1, r2
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f44:	2340      	movs	r3, #64	@ 0x40
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fc0f 	bl	800a76e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2240      	movs	r2, #64	@ 0x40
 8008f5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	2200      	movs	r2, #0
 8008f64:	2180      	movs	r1, #128	@ 0x80
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fc01 	bl	800a76e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2240      	movs	r2, #64	@ 0x40
 8008f76:	621a      	str	r2, [r3, #32]

  return ret;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d006      	beq.n	8008fc4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d106      	bne.n	8008ffc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d110      	bne.n	8009040 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	32ae      	adds	r2, #174	@ 0xae
 8009060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009068:	2303      	movs	r3, #3
 800906a:	e01c      	b.n	80090a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b03      	cmp	r3, #3
 8009076:	d115      	bne.n	80090a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	32ae      	adds	r2, #174	@ 0xae
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	32ae      	adds	r2, #174	@ 0xae
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	32ae      	adds	r2, #174	@ 0xae
 80090c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e01c      	b.n	800910a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d115      	bne.n	8009108 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	32ae      	adds	r2, #174	@ 0xae
 80090e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32ae      	adds	r2, #174	@ 0xae
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4611      	mov	r1, r2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00e      	beq.n	8009164 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	6852      	ldr	r2, [r2, #4]
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	4611      	mov	r1, r2
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800917a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009194:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b086      	sub	sp, #24
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d91f      	bls.n	8009208 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091ce:	e013      	b.n	80091f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091d0:	f107 030a 	add.w	r3, r7, #10
 80091d4:	4619      	mov	r1, r3
 80091d6:	6978      	ldr	r0, [r7, #20]
 80091d8:	f000 f81b 	bl	8009212 <USBD_GetNextDesc>
 80091dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d108      	bne.n	80091f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	789b      	ldrb	r3, [r3, #2]
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d008      	beq.n	8009206 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	885b      	ldrh	r3, [r3, #2]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	897b      	ldrh	r3, [r7, #10]
 8009200:	429a      	cmp	r2, r3
 8009202:	d8e5      	bhi.n	80091d0 <USBD_GetEpDesc+0x2e>
 8009204:	e000      	b.n	8009208 <USBD_GetEpDesc+0x66>
          break;
 8009206:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009208:	693b      	ldr	r3, [r7, #16]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	7812      	ldrb	r2, [r2, #0]
 8009228:	4413      	add	r3, r2
 800922a:	b29a      	uxth	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800923c:	68fb      	ldr	r3, [r7, #12]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800924a:	b480      	push	{r7}
 800924c:	b087      	sub	sp, #28
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3301      	adds	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009268:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	b21a      	sxth	r2, r3
 8009270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009274:	4313      	orrs	r3, r2
 8009276:	b21b      	sxth	r3, r3
 8009278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800927a:	89fb      	ldrh	r3, [r7, #14]
}
 800927c:	4618      	mov	r0, r3
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800929e:	2b40      	cmp	r3, #64	@ 0x40
 80092a0:	d005      	beq.n	80092ae <USBD_StdDevReq+0x26>
 80092a2:	2b40      	cmp	r3, #64	@ 0x40
 80092a4:	d857      	bhi.n	8009356 <USBD_StdDevReq+0xce>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00f      	beq.n	80092ca <USBD_StdDevReq+0x42>
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d153      	bne.n	8009356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	32ae      	adds	r2, #174	@ 0xae
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]
      break;
 80092c8:	e04a      	b.n	8009360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b09      	cmp	r3, #9
 80092d0:	d83b      	bhi.n	800934a <USBD_StdDevReq+0xc2>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <USBD_StdDevReq+0x50>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	08009341 	.word	0x08009341
 80092e0:	0800934b 	.word	0x0800934b
 80092e4:	08009337 	.word	0x08009337
 80092e8:	0800934b 	.word	0x0800934b
 80092ec:	0800930b 	.word	0x0800930b
 80092f0:	08009301 	.word	0x08009301
 80092f4:	0800934b 	.word	0x0800934b
 80092f8:	08009323 	.word	0x08009323
 80092fc:	08009315 	.word	0x08009315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa3c 	bl	8009780 <USBD_GetDescriptor>
          break;
 8009308:	e024      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fba1 	bl	8009a54 <USBD_SetAddress>
          break;
 8009312:	e01f      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fbe0 	bl	8009adc <USBD_SetConfig>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
          break;
 8009320:	e018      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fc83 	bl	8009c30 <USBD_GetConfig>
          break;
 800932a:	e013      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fcb4 	bl	8009c9c <USBD_GetStatus>
          break;
 8009334:	e00e      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fce3 	bl	8009d04 <USBD_SetFeature>
          break;
 800933e:	e009      	b.n	8009354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fd07 	bl	8009d56 <USBD_ClrFeature>
          break;
 8009348:	e004      	b.n	8009354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fd5e 	bl	8009e0e <USBD_CtlError>
          break;
 8009352:	bf00      	nop
      }
      break;
 8009354:	e004      	b.n	8009360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fd58 	bl	8009e0e <USBD_CtlError>
      break;
 800935e:	bf00      	nop
  }

  return ret;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop

0800936c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009382:	2b40      	cmp	r3, #64	@ 0x40
 8009384:	d005      	beq.n	8009392 <USBD_StdItfReq+0x26>
 8009386:	2b40      	cmp	r3, #64	@ 0x40
 8009388:	d852      	bhi.n	8009430 <USBD_StdItfReq+0xc4>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <USBD_StdItfReq+0x26>
 800938e:	2b20      	cmp	r3, #32
 8009390:	d14e      	bne.n	8009430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009398:	b2db      	uxtb	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	2b02      	cmp	r3, #2
 800939e:	d840      	bhi.n	8009422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	889b      	ldrh	r3, [r3, #4]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d836      	bhi.n	8009418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	889b      	ldrh	r3, [r3, #4]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fedb 	bl	800916e <USBD_CoreFindIF>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2bff      	cmp	r3, #255	@ 0xff
 80093c0:	d01d      	beq.n	80093fe <USBD_StdItfReq+0x92>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d11a      	bne.n	80093fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80093c8:	7bba      	ldrb	r2, [r7, #14]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32ae      	adds	r2, #174	@ 0xae
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00f      	beq.n	80093f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093d8:	7bba      	ldrb	r2, [r7, #14]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093e0:	7bba      	ldrb	r2, [r7, #14]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	32ae      	adds	r2, #174	@ 0xae
 80093e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093f6:	e004      	b.n	8009402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80093f8:	2303      	movs	r3, #3
 80093fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093fc:	e001      	b.n	8009402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80093fe:	2303      	movs	r3, #3
 8009400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d110      	bne.n	800942c <USBD_StdItfReq+0xc0>
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10d      	bne.n	800942c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fdd3 	bl	8009fbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009416:	e009      	b.n	800942c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fcf7 	bl	8009e0e <USBD_CtlError>
          break;
 8009420:	e004      	b.n	800942c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fcf2 	bl	8009e0e <USBD_CtlError>
          break;
 800942a:	e000      	b.n	800942e <USBD_StdItfReq+0xc2>
          break;
 800942c:	bf00      	nop
      }
      break;
 800942e:	e004      	b.n	800943a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fceb 	bl	8009e0e <USBD_CtlError>
      break;
 8009438:	bf00      	nop
  }

  return ret;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	889b      	ldrh	r3, [r3, #4]
 8009456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009460:	2b40      	cmp	r3, #64	@ 0x40
 8009462:	d007      	beq.n	8009474 <USBD_StdEPReq+0x30>
 8009464:	2b40      	cmp	r3, #64	@ 0x40
 8009466:	f200 817f 	bhi.w	8009768 <USBD_StdEPReq+0x324>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d02a      	beq.n	80094c4 <USBD_StdEPReq+0x80>
 800946e:	2b20      	cmp	r3, #32
 8009470:	f040 817a 	bne.w	8009768 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff fe85 	bl	8009188 <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7b7b      	ldrb	r3, [r7, #13]
 8009484:	2bff      	cmp	r3, #255	@ 0xff
 8009486:	f000 8174 	beq.w	8009772 <USBD_StdEPReq+0x32e>
 800948a:	7b7b      	ldrb	r3, [r7, #13]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f040 8170 	bne.w	8009772 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009492:	7b7a      	ldrb	r2, [r7, #13]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	32ae      	adds	r2, #174	@ 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8163 	beq.w	8009772 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80094ac:	7b7a      	ldrb	r2, [r7, #13]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32ae      	adds	r2, #174	@ 0xae
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094c2:	e156      	b.n	8009772 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d008      	beq.n	80094de <USBD_StdEPReq+0x9a>
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	f300 8145 	bgt.w	800975c <USBD_StdEPReq+0x318>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 809b 	beq.w	800960e <USBD_StdEPReq+0x1ca>
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d03c      	beq.n	8009556 <USBD_StdEPReq+0x112>
 80094dc:	e13e      	b.n	800975c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d002      	beq.n	80094f0 <USBD_StdEPReq+0xac>
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d016      	beq.n	800951c <USBD_StdEPReq+0xd8>
 80094ee:	e02c      	b.n	800954a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00d      	beq.n	8009512 <USBD_StdEPReq+0xce>
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b80      	cmp	r3, #128	@ 0x80
 80094fa:	d00a      	beq.n	8009512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f979 	bl	800a7f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009506:	2180      	movs	r1, #128	@ 0x80
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f975 	bl	800a7f8 <USBD_LL_StallEP>
 800950e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009510:	e020      	b.n	8009554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc7a 	bl	8009e0e <USBD_CtlError>
              break;
 800951a:	e01b      	b.n	8009554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	885b      	ldrh	r3, [r3, #2]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10e      	bne.n	8009542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00b      	beq.n	8009542 <USBD_StdEPReq+0xfe>
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b80      	cmp	r3, #128	@ 0x80
 800952e:	d008      	beq.n	8009542 <USBD_StdEPReq+0xfe>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	88db      	ldrh	r3, [r3, #6]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f95b 	bl	800a7f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fd3a 	bl	8009fbc <USBD_CtlSendStatus>

              break;
 8009548:	e004      	b.n	8009554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc5e 	bl	8009e0e <USBD_CtlError>
              break;
 8009552:	bf00      	nop
          }
          break;
 8009554:	e107      	b.n	8009766 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d002      	beq.n	8009568 <USBD_StdEPReq+0x124>
 8009562:	2b03      	cmp	r3, #3
 8009564:	d016      	beq.n	8009594 <USBD_StdEPReq+0x150>
 8009566:	e04b      	b.n	8009600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00d      	beq.n	800958a <USBD_StdEPReq+0x146>
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b80      	cmp	r3, #128	@ 0x80
 8009572:	d00a      	beq.n	800958a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 f93d 	bl	800a7f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800957e:	2180      	movs	r1, #128	@ 0x80
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 f939 	bl	800a7f8 <USBD_LL_StallEP>
 8009586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009588:	e040      	b.n	800960c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fc3e 	bl	8009e0e <USBD_CtlError>
              break;
 8009592:	e03b      	b.n	800960c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	885b      	ldrh	r3, [r3, #2]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d136      	bne.n	800960a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d004      	beq.n	80095b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f943 	bl	800a836 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fd03 	bl	8009fbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff fde4 	bl	8009188 <USBD_CoreFindEP>
 80095c0:	4603      	mov	r3, r0
 80095c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095c4:	7b7b      	ldrb	r3, [r7, #13]
 80095c6:	2bff      	cmp	r3, #255	@ 0xff
 80095c8:	d01f      	beq.n	800960a <USBD_StdEPReq+0x1c6>
 80095ca:	7b7b      	ldrb	r3, [r7, #13]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d11c      	bne.n	800960a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095d8:	7b7a      	ldrb	r2, [r7, #13]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	32ae      	adds	r2, #174	@ 0xae
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d010      	beq.n	800960a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095e8:	7b7a      	ldrb	r2, [r7, #13]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	32ae      	adds	r2, #174	@ 0xae
 80095ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80095fe:	e004      	b.n	800960a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fc03 	bl	8009e0e <USBD_CtlError>
              break;
 8009608:	e000      	b.n	800960c <USBD_StdEPReq+0x1c8>
              break;
 800960a:	bf00      	nop
          }
          break;
 800960c:	e0ab      	b.n	8009766 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b02      	cmp	r3, #2
 8009618:	d002      	beq.n	8009620 <USBD_StdEPReq+0x1dc>
 800961a:	2b03      	cmp	r3, #3
 800961c:	d032      	beq.n	8009684 <USBD_StdEPReq+0x240>
 800961e:	e097      	b.n	8009750 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <USBD_StdEPReq+0x1f2>
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b80      	cmp	r3, #128	@ 0x80
 800962a:	d004      	beq.n	8009636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fbed 	bl	8009e0e <USBD_CtlError>
                break;
 8009634:	e091      	b.n	800975a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	da0b      	bge.n	8009656 <USBD_StdEPReq+0x212>
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	3310      	adds	r3, #16
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	3304      	adds	r3, #4
 8009654:	e00b      	b.n	800966e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	4413      	add	r3, r2
 800966c:	3304      	adds	r3, #4
 800966e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2202      	movs	r2, #2
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fc43 	bl	8009f08 <USBD_CtlSendData>
              break;
 8009682:	e06a      	b.n	800975a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009688:	2b00      	cmp	r3, #0
 800968a:	da11      	bge.n	80096b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	f003 020f 	and.w	r2, r3, #15
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	3324      	adds	r3, #36	@ 0x24
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d117      	bne.n	80096d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fbb0 	bl	8009e0e <USBD_CtlError>
                  break;
 80096ae:	e054      	b.n	800975a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	f003 020f 	and.w	r2, r3, #15
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fb9d 	bl	8009e0e <USBD_CtlError>
                  break;
 80096d4:	e041      	b.n	800975a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	da0b      	bge.n	80096f6 <USBD_StdEPReq+0x2b2>
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	3310      	adds	r3, #16
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	3304      	adds	r3, #4
 80096f4:	e00b      	b.n	800970e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	4413      	add	r3, r2
 800970c:	3304      	adds	r3, #4
 800970e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <USBD_StdEPReq+0x2d8>
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	2b80      	cmp	r3, #128	@ 0x80
 800971a:	d103      	bne.n	8009724 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	e00e      	b.n	8009742 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 f8a3 	bl	800a874 <USBD_LL_IsStallEP>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2201      	movs	r2, #1
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	e002      	b.n	8009742 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2202      	movs	r2, #2
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fbdd 	bl	8009f08 <USBD_CtlSendData>
              break;
 800974e:	e004      	b.n	800975a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fb5b 	bl	8009e0e <USBD_CtlError>
              break;
 8009758:	bf00      	nop
          }
          break;
 800975a:	e004      	b.n	8009766 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb55 	bl	8009e0e <USBD_CtlError>
          break;
 8009764:	bf00      	nop
      }
      break;
 8009766:	e005      	b.n	8009774 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb4f 	bl	8009e0e <USBD_CtlError>
      break;
 8009770:	e000      	b.n	8009774 <USBD_StdEPReq+0x330>
      break;
 8009772:	bf00      	nop
  }

  return ret;
 8009774:	7bfb      	ldrb	r3, [r7, #15]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	885b      	ldrh	r3, [r3, #2]
 800979a:	0a1b      	lsrs	r3, r3, #8
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	2b06      	cmp	r3, #6
 80097a2:	f200 8128 	bhi.w	80099f6 <USBD_GetDescriptor+0x276>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <USBD_GetDescriptor+0x2c>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097c9 	.word	0x080097c9
 80097b0:	080097e1 	.word	0x080097e1
 80097b4:	08009821 	.word	0x08009821
 80097b8:	080099f7 	.word	0x080099f7
 80097bc:	080099f7 	.word	0x080099f7
 80097c0:	08009997 	.word	0x08009997
 80097c4:	080099c3 	.word	0x080099c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	7c12      	ldrb	r2, [r2, #16]
 80097d4:	f107 0108 	add.w	r1, r7, #8
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
 80097dc:	60f8      	str	r0, [r7, #12]
      break;
 80097de:	e112      	b.n	8009a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7c1b      	ldrb	r3, [r3, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10d      	bne.n	8009804 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f0:	f107 0208 	add.w	r2, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	2202      	movs	r2, #2
 8009800:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009802:	e100      	b.n	8009a06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	f107 0208 	add.w	r2, r7, #8
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
      break;
 800981e:	e0f2      	b.n	8009a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	885b      	ldrh	r3, [r3, #2]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b05      	cmp	r3, #5
 8009828:	f200 80ac 	bhi.w	8009984 <USBD_GetDescriptor+0x204>
 800982c:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <USBD_GetDescriptor+0xb4>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	0800984d 	.word	0x0800984d
 8009838:	08009881 	.word	0x08009881
 800983c:	080098b5 	.word	0x080098b5
 8009840:	080098e9 	.word	0x080098e9
 8009844:	0800991d 	.word	0x0800991d
 8009848:	08009951 	.word	0x08009951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986e:	e091      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 facb 	bl	8009e0e <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e089      	b.n	8009994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a2:	e077      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fab1 	bl	8009e0e <USBD_CtlError>
            err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
          break;
 80098b2:	e06f      	b.n	8009994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d6:	e05d      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa97 	bl	8009e0e <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e055      	b.n	8009994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800990a:	e043      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa7d 	bl	8009e0e <USBD_CtlError>
            err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
          break;
 800991a:	e03b      	b.n	8009994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	7c12      	ldrb	r2, [r2, #16]
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993e:	e029      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa63 	bl	8009e0e <USBD_CtlError>
            err++;
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	3301      	adds	r3, #1
 800994c:	72fb      	strb	r3, [r7, #11]
          break;
 800994e:	e021      	b.n	8009994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	7c12      	ldrb	r2, [r2, #16]
 8009968:	f107 0108 	add.w	r1, r7, #8
 800996c:	4610      	mov	r0, r2
 800996e:	4798      	blx	r3
 8009970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009972:	e00f      	b.n	8009994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa49 	bl	8009e0e <USBD_CtlError>
            err++;
 800997c:	7afb      	ldrb	r3, [r7, #11]
 800997e:	3301      	adds	r3, #1
 8009980:	72fb      	strb	r3, [r7, #11]
          break;
 8009982:	e007      	b.n	8009994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa41 	bl	8009e0e <USBD_CtlError>
          err++;
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	3301      	adds	r3, #1
 8009990:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009992:	bf00      	nop
      }
      break;
 8009994:	e037      	b.n	8009a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7c1b      	ldrb	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d109      	bne.n	80099b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a6:	f107 0208 	add.w	r2, r7, #8
 80099aa:	4610      	mov	r0, r2
 80099ac:	4798      	blx	r3
 80099ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099b0:	e029      	b.n	8009a06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa2a 	bl	8009e0e <USBD_CtlError>
        err++;
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	3301      	adds	r3, #1
 80099be:	72fb      	strb	r3, [r7, #11]
      break;
 80099c0:	e021      	b.n	8009a06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	7c1b      	ldrb	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10d      	bne.n	80099e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	f107 0208 	add.w	r2, r7, #8
 80099d6:	4610      	mov	r0, r2
 80099d8:	4798      	blx	r3
 80099da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
 80099e0:	2207      	movs	r2, #7
 80099e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099e4:	e00f      	b.n	8009a06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fa10 	bl	8009e0e <USBD_CtlError>
        err++;
 80099ee:	7afb      	ldrb	r3, [r7, #11]
 80099f0:	3301      	adds	r3, #1
 80099f2:	72fb      	strb	r3, [r7, #11]
      break;
 80099f4:	e007      	b.n	8009a06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fa08 	bl	8009e0e <USBD_CtlError>
      err++;
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	3301      	adds	r3, #1
 8009a02:	72fb      	strb	r3, [r7, #11]
      break;
 8009a04:	bf00      	nop
  }

  if (err != 0U)
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11e      	bne.n	8009a4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d016      	beq.n	8009a42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009a14:	893b      	ldrh	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00e      	beq.n	8009a38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	88da      	ldrh	r2, [r3, #6]
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bf28      	it	cs
 8009a24:	4613      	movcs	r3, r2
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a2a:	893b      	ldrh	r3, [r7, #8]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa69 	bl	8009f08 <USBD_CtlSendData>
 8009a36:	e009      	b.n	8009a4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9e7 	bl	8009e0e <USBD_CtlError>
 8009a40:	e004      	b.n	8009a4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 faba 	bl	8009fbc <USBD_CtlSendStatus>
 8009a48:	e000      	b.n	8009a4c <USBD_GetDescriptor+0x2cc>
    return;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	889b      	ldrh	r3, [r3, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d131      	bne.n	8009aca <USBD_SetAddress+0x76>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88db      	ldrh	r3, [r3, #6]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d12d      	bne.n	8009aca <USBD_SetAddress+0x76>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a74:	d829      	bhi.n	8009aca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	885b      	ldrh	r3, [r3, #2]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d104      	bne.n	8009a98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f9bc 	bl	8009e0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a96:	e01d      	b.n	8009ad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 ff11 	bl	800a8cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa86 	bl	8009fbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	e009      	b.n	8009ad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac8:	e004      	b.n	8009ad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f99e 	bl	8009e0e <USBD_CtlError>
  }
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	4b4e      	ldr	r3, [pc, #312]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009af4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d905      	bls.n	8009b08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f985 	bl	8009e0e <USBD_CtlError>
    return USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e08c      	b.n	8009c22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d002      	beq.n	8009b1a <USBD_SetConfig+0x3e>
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d029      	beq.n	8009b6c <USBD_SetConfig+0x90>
 8009b18:	e075      	b.n	8009c06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b1a:	4b44      	ldr	r3, [pc, #272]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d020      	beq.n	8009b64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b22:	4b42      	ldr	r3, [pc, #264]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fe ffe3 	bl	8008afe <USBD_SetClassConfig>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d008      	beq.n	8009b54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f962 	bl	8009e0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b52:	e065      	b.n	8009c20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa31 	bl	8009fbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b62:	e05d      	b.n	8009c20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fa29 	bl	8009fbc <USBD_CtlSendStatus>
      break;
 8009b6a:	e059      	b.n	8009c20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d112      	bne.n	8009b9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b86:	4b29      	ldr	r3, [pc, #164]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7fe ffd2 	bl	8008b36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa12 	bl	8009fbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b98:	e042      	b.n	8009c20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b9a:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d02a      	beq.n	8009bfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7fe ffc0 	bl	8008b36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe ff99 	bl	8008afe <USBD_SetClassConfig>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f918 	bl	8009e0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7fe ffa5 	bl	8008b36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bf4:	e014      	b.n	8009c20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f9e0 	bl	8009fbc <USBD_CtlSendStatus>
      break;
 8009bfc:	e010      	b.n	8009c20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f9dc 	bl	8009fbc <USBD_CtlSendStatus>
      break;
 8009c04:	e00c      	b.n	8009c20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f900 	bl	8009e0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c0e:	4b07      	ldr	r3, [pc, #28]	@ (8009c2c <USBD_SetConfig+0x150>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	4619      	mov	r1, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7fe ff8e 	bl	8008b36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1e:	bf00      	nop
  }

  return ret;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	200003d4 	.word	0x200003d4

08009c30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	88db      	ldrh	r3, [r3, #6]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d004      	beq.n	8009c4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f8e2 	bl	8009e0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c4a:	e023      	b.n	8009c94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	dc02      	bgt.n	8009c5e <USBD_GetConfig+0x2e>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	dc03      	bgt.n	8009c64 <USBD_GetConfig+0x34>
 8009c5c:	e015      	b.n	8009c8a <USBD_GetConfig+0x5a>
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d00b      	beq.n	8009c7a <USBD_GetConfig+0x4a>
 8009c62:	e012      	b.n	8009c8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f948 	bl	8009f08 <USBD_CtlSendData>
        break;
 8009c78:	e00c      	b.n	8009c94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	2201      	movs	r2, #1
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f940 	bl	8009f08 <USBD_CtlSendData>
        break;
 8009c88:	e004      	b.n	8009c94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f8be 	bl	8009e0e <USBD_CtlError>
        break;
 8009c92:	bf00      	nop
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d81e      	bhi.n	8009cf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	88db      	ldrh	r3, [r3, #6]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d004      	beq.n	8009cc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f8a5 	bl	8009e0e <USBD_CtlError>
        break;
 8009cc4:	e01a      	b.n	8009cfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f043 0202 	orr.w	r2, r3, #2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f90c 	bl	8009f08 <USBD_CtlSendData>
      break;
 8009cf0:	e004      	b.n	8009cfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f88a 	bl	8009e0e <USBD_CtlError>
      break;
 8009cfa:	bf00      	nop
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	885b      	ldrh	r3, [r3, #2]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d107      	bne.n	8009d26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f94c 	bl	8009fbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d24:	e013      	b.n	8009d4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d10b      	bne.n	8009d46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	889b      	ldrh	r3, [r3, #4]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f93c 	bl	8009fbc <USBD_CtlSendStatus>
}
 8009d44:	e003      	b.n	8009d4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f860 	bl	8009e0e <USBD_CtlError>
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d80b      	bhi.n	8009d86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	885b      	ldrh	r3, [r3, #2]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d10c      	bne.n	8009d90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f91c 	bl	8009fbc <USBD_CtlSendStatus>
      }
      break;
 8009d84:	e004      	b.n	8009d90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f840 	bl	8009e0e <USBD_CtlError>
      break;
 8009d8e:	e000      	b.n	8009d92 <USBD_ClrFeature+0x3c>
      break;
 8009d90:	bf00      	nop
  }
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	781a      	ldrb	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fa40 	bl	800924a <SWAPBYTE>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	461a      	mov	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff fa33 	bl	800924a <SWAPBYTE>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fa26 	bl	800924a <SWAPBYTE>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	461a      	mov	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	80da      	strh	r2, [r3, #6]
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e18:	2180      	movs	r1, #128	@ 0x80
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fcec 	bl	800a7f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e20:	2100      	movs	r1, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fce8 	bl	800a7f8 <USBD_LL_StallEP>
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d042      	beq.n	8009ecc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f000 f842 	bl	8009ed4 <USBD_GetLen>
 8009e50:	4603      	mov	r3, r0
 8009e52:	3301      	adds	r3, #1
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5a:	d808      	bhi.n	8009e6e <USBD_GetString+0x3e>
 8009e5c:	6938      	ldr	r0, [r7, #16]
 8009e5e:	f000 f839 	bl	8009ed4 <USBD_GetLen>
 8009e62:	4603      	mov	r3, r0
 8009e64:	3301      	adds	r3, #1
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	e001      	b.n	8009e72 <USBD_GetString+0x42>
 8009e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	7812      	ldrb	r2, [r2, #0]
 8009e80:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	3301      	adds	r3, #1
 8009e86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	2203      	movs	r2, #3
 8009e90:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	3301      	adds	r3, #1
 8009e96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e98:	e013      	b.n	8009ec2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	613b      	str	r3, [r7, #16]
    idx++;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1e7      	bne.n	8009e9a <USBD_GetString+0x6a>
 8009eca:	e000      	b.n	8009ece <USBD_GetString+0x9e>
    return;
 8009ecc:	bf00      	nop
  }
}
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ee4:	e005      	b.n	8009ef2 <USBD_GetLen+0x1e>
  {
    len++;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f5      	bne.n	8009ee6 <USBD_GetLen+0x12>
  }

  return len;
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fceb 	bl	800a90a <USBD_LL_Transmit>

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	2100      	movs	r1, #0
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fcda 	bl	800a90a <USBD_LL_Transmit>

  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fcde 	bl	800a94c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 fccd 	bl	800a94c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fc99 	bl	800a90a <USBD_LL_Transmit>

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2205      	movs	r2, #5
 8009fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fca7 	bl	800a94c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a00c:	2200      	movs	r2, #0
 800a00e:	4912      	ldr	r1, [pc, #72]	@ (800a058 <MX_USB_DEVICE_Init+0x50>)
 800a010:	4812      	ldr	r0, [pc, #72]	@ (800a05c <MX_USB_DEVICE_Init+0x54>)
 800a012:	f7fe fcf7 	bl	8008a04 <USBD_Init>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a01c:	f7f8 fbf6 	bl	800280c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a020:	490f      	ldr	r1, [pc, #60]	@ (800a060 <MX_USB_DEVICE_Init+0x58>)
 800a022:	480e      	ldr	r0, [pc, #56]	@ (800a05c <MX_USB_DEVICE_Init+0x54>)
 800a024:	f7fe fd1e 	bl	8008a64 <USBD_RegisterClass>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a02e:	f7f8 fbed 	bl	800280c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a032:	490c      	ldr	r1, [pc, #48]	@ (800a064 <MX_USB_DEVICE_Init+0x5c>)
 800a034:	4809      	ldr	r0, [pc, #36]	@ (800a05c <MX_USB_DEVICE_Init+0x54>)
 800a036:	f7fe fc15 	bl	8008864 <USBD_CDC_RegisterInterface>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a040:	f7f8 fbe4 	bl	800280c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a044:	4805      	ldr	r0, [pc, #20]	@ (800a05c <MX_USB_DEVICE_Init+0x54>)
 800a046:	f7fe fd43 	bl	8008ad0 <USBD_Start>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a050:	f7f8 fbdc 	bl	800280c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a054:	bf00      	nop
 800a056:	bd80      	pop	{r7, pc}
 800a058:	200000ac 	.word	0x200000ac
 800a05c:	200003d8 	.word	0x200003d8
 800a060:	20000018 	.word	0x20000018
 800a064:	20000098 	.word	0x20000098

0800a068 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a06c:	2200      	movs	r2, #0
 800a06e:	4905      	ldr	r1, [pc, #20]	@ (800a084 <CDC_Init_FS+0x1c>)
 800a070:	4805      	ldr	r0, [pc, #20]	@ (800a088 <CDC_Init_FS+0x20>)
 800a072:	f7fe fc11 	bl	8008898 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a076:	4905      	ldr	r1, [pc, #20]	@ (800a08c <CDC_Init_FS+0x24>)
 800a078:	4803      	ldr	r0, [pc, #12]	@ (800a088 <CDC_Init_FS+0x20>)
 800a07a:	f7fe fc2f 	bl	80088dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a07e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a080:	4618      	mov	r0, r3
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20000eb4 	.word	0x20000eb4
 800a088:	200003d8 	.word	0x200003d8
 800a08c:	200006b4 	.word	0x200006b4

0800a090 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a094:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a096:	4618      	mov	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	6039      	str	r1, [r7, #0]
 800a0aa:	71fb      	strb	r3, [r7, #7]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	2b23      	cmp	r3, #35	@ 0x23
 800a0b4:	d84a      	bhi.n	800a14c <CDC_Control_FS+0xac>
 800a0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0bc <CDC_Control_FS+0x1c>)
 800a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0bc:	0800a14d 	.word	0x0800a14d
 800a0c0:	0800a14d 	.word	0x0800a14d
 800a0c4:	0800a14d 	.word	0x0800a14d
 800a0c8:	0800a14d 	.word	0x0800a14d
 800a0cc:	0800a14d 	.word	0x0800a14d
 800a0d0:	0800a14d 	.word	0x0800a14d
 800a0d4:	0800a14d 	.word	0x0800a14d
 800a0d8:	0800a14d 	.word	0x0800a14d
 800a0dc:	0800a14d 	.word	0x0800a14d
 800a0e0:	0800a14d 	.word	0x0800a14d
 800a0e4:	0800a14d 	.word	0x0800a14d
 800a0e8:	0800a14d 	.word	0x0800a14d
 800a0ec:	0800a14d 	.word	0x0800a14d
 800a0f0:	0800a14d 	.word	0x0800a14d
 800a0f4:	0800a14d 	.word	0x0800a14d
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a14d 	.word	0x0800a14d
 800a100:	0800a14d 	.word	0x0800a14d
 800a104:	0800a14d 	.word	0x0800a14d
 800a108:	0800a14d 	.word	0x0800a14d
 800a10c:	0800a14d 	.word	0x0800a14d
 800a110:	0800a14d 	.word	0x0800a14d
 800a114:	0800a14d 	.word	0x0800a14d
 800a118:	0800a14d 	.word	0x0800a14d
 800a11c:	0800a14d 	.word	0x0800a14d
 800a120:	0800a14d 	.word	0x0800a14d
 800a124:	0800a14d 	.word	0x0800a14d
 800a128:	0800a14d 	.word	0x0800a14d
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a14d 	.word	0x0800a14d
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a14d 	.word	0x0800a14d
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a14d 	.word	0x0800a14d
 800a144:	0800a14d 	.word	0x0800a14d
 800a148:	0800a14d 	.word	0x0800a14d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a14c:	bf00      	nop
  }

  return (USBD_OK);
 800a14e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4805      	ldr	r0, [pc, #20]	@ (800a180 <CDC_Receive_FS+0x24>)
 800a16a:	f7fe fbb7 	bl	80088dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a16e:	4804      	ldr	r0, [pc, #16]	@ (800a180 <CDC_Receive_FS+0x24>)
 800a170:	f7fe fc12 	bl	8008998 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a174:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	200003d8 	.word	0x200003d8

0800a184 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a194:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <CDC_Transmit_FS+0x48>)
 800a196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a19a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e00b      	b.n	800a1c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	4806      	ldr	r0, [pc, #24]	@ (800a1cc <CDC_Transmit_FS+0x48>)
 800a1b2:	f7fe fb71 	bl	8008898 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1b6:	4805      	ldr	r0, [pc, #20]	@ (800a1cc <CDC_Transmit_FS+0x48>)
 800a1b8:	f7fe fbae 	bl	8008918 <USBD_CDC_TransmitPacket>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200003d8 	.word	0x200003d8

0800a1d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2212      	movs	r2, #18
 800a204:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a206:	4b03      	ldr	r3, [pc, #12]	@ (800a214 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	200000c8 	.word	0x200000c8

0800a218 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2204      	movs	r2, #4
 800a228:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	@ (800a238 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200000dc 	.word	0x200000dc

0800a23c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d105      	bne.n	800a25a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4907      	ldr	r1, [pc, #28]	@ (800a270 <USBD_FS_ProductStrDescriptor+0x34>)
 800a252:	4808      	ldr	r0, [pc, #32]	@ (800a274 <USBD_FS_ProductStrDescriptor+0x38>)
 800a254:	f7ff fdec 	bl	8009e30 <USBD_GetString>
 800a258:	e004      	b.n	800a264 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4904      	ldr	r1, [pc, #16]	@ (800a270 <USBD_FS_ProductStrDescriptor+0x34>)
 800a25e:	4805      	ldr	r0, [pc, #20]	@ (800a274 <USBD_FS_ProductStrDescriptor+0x38>)
 800a260:	f7ff fde6 	bl	8009e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a264:	4b02      	ldr	r3, [pc, #8]	@ (800a270 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200016b4 	.word	0x200016b4
 800a274:	0800d38c 	.word	0x0800d38c

0800a278 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	4904      	ldr	r1, [pc, #16]	@ (800a298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a288:	4804      	ldr	r0, [pc, #16]	@ (800a29c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a28a:	f7ff fdd1 	bl	8009e30 <USBD_GetString>
  return USBD_StrDesc;
 800a28e:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	200016b4 	.word	0x200016b4
 800a29c:	0800d3a4 	.word	0x0800d3a4

0800a2a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	221a      	movs	r2, #26
 800a2b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2b2:	f000 f843 	bl	800a33c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2b6:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200000e0 	.word	0x200000e0

0800a2c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d105      	bne.n	800a2e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	4907      	ldr	r1, [pc, #28]	@ (800a2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2da:	4808      	ldr	r0, [pc, #32]	@ (800a2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2dc:	f7ff fda8 	bl	8009e30 <USBD_GetString>
 800a2e0:	e004      	b.n	800a2ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4904      	ldr	r1, [pc, #16]	@ (800a2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2e6:	4805      	ldr	r0, [pc, #20]	@ (800a2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e8:	f7ff fda2 	bl	8009e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2ec:	4b02      	ldr	r3, [pc, #8]	@ (800a2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200016b4 	.word	0x200016b4
 800a2fc:	0800d3b8 	.word	0x0800d3b8

0800a300 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	6039      	str	r1, [r7, #0]
 800a30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d105      	bne.n	800a31e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4907      	ldr	r1, [pc, #28]	@ (800a334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a316:	4808      	ldr	r0, [pc, #32]	@ (800a338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a318:	f7ff fd8a 	bl	8009e30 <USBD_GetString>
 800a31c:	e004      	b.n	800a328 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4904      	ldr	r1, [pc, #16]	@ (800a334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a322:	4805      	ldr	r0, [pc, #20]	@ (800a338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a324:	f7ff fd84 	bl	8009e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a328:	4b02      	ldr	r3, [pc, #8]	@ (800a334 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	200016b4 	.word	0x200016b4
 800a338:	0800d3c4 	.word	0x0800d3c4

0800a33c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a342:	4b0f      	ldr	r3, [pc, #60]	@ (800a380 <Get_SerialNum+0x44>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a348:	4b0e      	ldr	r3, [pc, #56]	@ (800a384 <Get_SerialNum+0x48>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a34e:	4b0e      	ldr	r3, [pc, #56]	@ (800a388 <Get_SerialNum+0x4c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d009      	beq.n	800a376 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a362:	2208      	movs	r2, #8
 800a364:	4909      	ldr	r1, [pc, #36]	@ (800a38c <Get_SerialNum+0x50>)
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 f814 	bl	800a394 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a36c:	2204      	movs	r2, #4
 800a36e:	4908      	ldr	r1, [pc, #32]	@ (800a390 <Get_SerialNum+0x54>)
 800a370:	68b8      	ldr	r0, [r7, #8]
 800a372:	f000 f80f 	bl	800a394 <IntToUnicode>
  }
}
 800a376:	bf00      	nop
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	1fff7a10 	.word	0x1fff7a10
 800a384:	1fff7a14 	.word	0x1fff7a14
 800a388:	1fff7a18 	.word	0x1fff7a18
 800a38c:	200000e2 	.word	0x200000e2
 800a390:	200000f2 	.word	0x200000f2

0800a394 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	75fb      	strb	r3, [r7, #23]
 800a3aa:	e027      	b.n	800a3fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	0f1b      	lsrs	r3, r3, #28
 800a3b0:	2b09      	cmp	r3, #9
 800a3b2:	d80b      	bhi.n	800a3cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	0f1b      	lsrs	r3, r3, #28
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	440b      	add	r3, r1
 800a3c4:	3230      	adds	r2, #48	@ 0x30
 800a3c6:	b2d2      	uxtb	r2, r2
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	e00a      	b.n	800a3e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	0f1b      	lsrs	r3, r3, #28
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	440b      	add	r3, r1
 800a3dc:	3237      	adds	r2, #55	@ 0x37
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]
 800a3fc:	7dfa      	ldrb	r2, [r7, #23]
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	429a      	cmp	r2, r3
 800a402:	d3d3      	bcc.n	800a3ac <IntToUnicode+0x18>
  }
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
	...

0800a414 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	@ 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	609a      	str	r2, [r3, #8]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a434:	d13a      	bne.n	800a4ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	4b1e      	ldr	r3, [pc, #120]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a43e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	6313      	str	r3, [r2, #48]	@ 0x30
 800a446:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a452:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a458:	2302      	movs	r3, #2
 800a45a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a460:	2303      	movs	r3, #3
 800a462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a464:	230a      	movs	r3, #10
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a468:	f107 0314 	add.w	r3, r7, #20
 800a46c:	4619      	mov	r1, r3
 800a46e:	4812      	ldr	r0, [pc, #72]	@ (800a4b8 <HAL_PCD_MspInit+0xa4>)
 800a470:	f7f8 fe16 	bl	80030a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a474:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a478:	4a0e      	ldr	r2, [pc, #56]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a47e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a488:	4a0a      	ldr	r2, [pc, #40]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a48a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a48e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a490:	4b08      	ldr	r3, [pc, #32]	@ (800a4b4 <HAL_PCD_MspInit+0xa0>)
 800a492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a49c:	2200      	movs	r2, #0
 800a49e:	2100      	movs	r1, #0
 800a4a0:	2043      	movs	r0, #67	@ 0x43
 800a4a2:	f7f8 fdc6 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4a6:	2043      	movs	r0, #67	@ 0x43
 800a4a8:	f7f8 fddf 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4ac:	bf00      	nop
 800a4ae:	3728      	adds	r7, #40	@ 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	40020000 	.word	0x40020000

0800a4bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7fe fb49 	bl	8008b6a <USBD_LL_SetupStage>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	4619      	mov	r1, r3
 800a50a:	f7fe fb83 	bl	8008c14 <USBD_LL_DataOutStage>
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4613      	mov	r3, r2
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	440b      	add	r3, r1
 800a536:	3320      	adds	r3, #32
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	4619      	mov	r1, r3
 800a53e:	f7fe fc1c 	bl	8008d7a <USBD_LL_DataInStage>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fd56 	bl	800900a <USBD_LL_SOF>
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a56e:	2301      	movs	r3, #1
 800a570:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	79db      	ldrb	r3, [r3, #7]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
 800a57e:	e008      	b.n	800a592 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	79db      	ldrb	r3, [r3, #7]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d102      	bne.n	800a58e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a588:	2301      	movs	r3, #1
 800a58a:	73fb      	strb	r3, [r7, #15]
 800a58c:	e001      	b.n	800a592 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a58e:	f7f8 f93d 	bl	800280c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a598:	7bfa      	ldrb	r2, [r7, #15]
 800a59a:	4611      	mov	r1, r2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe fcf0 	bl	8008f82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fc98 	bl	8008ede <USBD_LL_Reset>
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fceb 	bl	8008fa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6812      	ldr	r2, [r2, #0]
 800a5da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7adb      	ldrb	r3, [r3, #11]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5ec:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <HAL_PCD_SuspendCallback+0x48>)
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4a03      	ldr	r2, [pc, #12]	@ (800a600 <HAL_PCD_SuspendCallback+0x48>)
 800a5f2:	f043 0306 	orr.w	r3, r3, #6
 800a5f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	e000ed00 	.word	0xe000ed00

0800a604 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fce1 	bl	8008fda <USBD_LL_Resume>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	4611      	mov	r1, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fd39 	bl	80090ae <USBD_LL_IsoOUTIncomplete>
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fcf5 	bl	800904a <USBD_LL_IsoINIncomplete>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe fd4b 	bl	8009112 <USBD_LL_DevConnected>
}
 800a67c:	bf00      	nop
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fd48 	bl	8009128 <USBD_LL_DevDisconnected>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d13c      	bne.n	800a72a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6b0:	4a20      	ldr	r2, [pc, #128]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a6c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a6ce:	4b19      	ldr	r3, [pc, #100]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6d4:	4b17      	ldr	r3, [pc, #92]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6da:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6dc:	2202      	movs	r2, #2
 800a6de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6e0:	4b14      	ldr	r3, [pc, #80]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6e6:	4b13      	ldr	r3, [pc, #76]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6ec:	4b11      	ldr	r3, [pc, #68]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6f2:	4b10      	ldr	r3, [pc, #64]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a734 <USBD_LL_Init+0x94>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6fe:	480d      	ldr	r0, [pc, #52]	@ (800a734 <USBD_LL_Init+0x94>)
 800a700:	f7f8 fe6a 	bl	80033d8 <HAL_PCD_Init>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a70a:	f7f8 f87f 	bl	800280c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a70e:	2180      	movs	r1, #128	@ 0x80
 800a710:	4808      	ldr	r0, [pc, #32]	@ (800a734 <USBD_LL_Init+0x94>)
 800a712:	f7fa f896 	bl	8004842 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a716:	2240      	movs	r2, #64	@ 0x40
 800a718:	2100      	movs	r1, #0
 800a71a:	4806      	ldr	r0, [pc, #24]	@ (800a734 <USBD_LL_Init+0x94>)
 800a71c:	f7fa f84a 	bl	80047b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a720:	2280      	movs	r2, #128	@ 0x80
 800a722:	2101      	movs	r1, #1
 800a724:	4803      	ldr	r0, [pc, #12]	@ (800a734 <USBD_LL_Init+0x94>)
 800a726:	f7fa f845 	bl	80047b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	200018b4 	.word	0x200018b4

0800a738 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f8 ff51 	bl	80035f6 <HAL_PCD_Start>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f942 	bl	800a9e4 <USBD_Get_USB_Status>
 800a760:	4603      	mov	r3, r0
 800a762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a764:	7bbb      	ldrb	r3, [r7, #14]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	461a      	mov	r2, r3
 800a77c:	4603      	mov	r3, r0
 800a77e:	70fb      	strb	r3, [r7, #3]
 800a780:	460b      	mov	r3, r1
 800a782:	70bb      	strb	r3, [r7, #2]
 800a784:	4613      	mov	r3, r2
 800a786:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a796:	78bb      	ldrb	r3, [r7, #2]
 800a798:	883a      	ldrh	r2, [r7, #0]
 800a79a:	78f9      	ldrb	r1, [r7, #3]
 800a79c:	f7f9 fc25 	bl	8003fea <HAL_PCD_EP_Open>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f91c 	bl	800a9e4 <USBD_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7d4:	78fa      	ldrb	r2, [r7, #3]
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f9 fc70 	bl	80040be <HAL_PCD_EP_Close>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f8fd 	bl	800a9e4 <USBD_Get_USB_Status>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f7f9 fd28 	bl	800426c <HAL_PCD_EP_SetStall>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f8de 	bl	800a9e4 <USBD_Get_USB_Status>
 800a828:	4603      	mov	r3, r0
 800a82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	4611      	mov	r1, r2
 800a854:	4618      	mov	r0, r3
 800a856:	f7f9 fd6c 	bl	8004332 <HAL_PCD_EP_ClrStall>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 f8bf 	bl	800a9e4 <USBD_Get_USB_Status>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a886:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da0b      	bge.n	800a8a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a896:	68f9      	ldr	r1, [r7, #12]
 800a898:	4613      	mov	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3316      	adds	r3, #22
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	e00b      	b.n	800a8c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	440b      	add	r3, r1
 800a8ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a8be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7f9 fb59 	bl	8003fa2 <HAL_PCD_SetAddress>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f874 	bl	800a9e4 <USBD_Get_USB_Status>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a900:	7bbb      	ldrb	r3, [r7, #14]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
 800a916:	460b      	mov	r3, r1
 800a918:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a928:	7af9      	ldrb	r1, [r7, #11]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	f7f9 fc63 	bl	80041f8 <HAL_PCD_EP_Transmit>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 f853 	bl	800a9e4 <USBD_Get_USB_Status>
 800a93e:	4603      	mov	r3, r0
 800a940:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a942:	7dbb      	ldrb	r3, [r7, #22]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	460b      	mov	r3, r1
 800a95a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a96a:	7af9      	ldrb	r1, [r7, #11]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	f7f9 fbef 	bl	8004152 <HAL_PCD_EP_Receive>
 800a974:	4603      	mov	r3, r0
 800a976:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 f832 	bl	800a9e4 <USBD_Get_USB_Status>
 800a980:	4603      	mov	r3, r0
 800a982:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a984:	7dbb      	ldrb	r3, [r7, #22]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f9 fc0f 	bl	80041c8 <HAL_PCD_EP_GetRxCount>
 800a9aa:	4603      	mov	r3, r0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9bc:	4b03      	ldr	r3, [pc, #12]	@ (800a9cc <USBD_static_malloc+0x18>)
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20001d98 	.word	0x20001d98

0800a9d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]

}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d817      	bhi.n	800aa28 <USBD_Get_USB_Status+0x44>
 800a9f8:	a201      	add	r2, pc, #4	@ (adr r2, 800aa00 <USBD_Get_USB_Status+0x1c>)
 800a9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fe:	bf00      	nop
 800aa00:	0800aa11 	.word	0x0800aa11
 800aa04:	0800aa17 	.word	0x0800aa17
 800aa08:	0800aa1d 	.word	0x0800aa1d
 800aa0c:	0800aa23 	.word	0x0800aa23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
    break;
 800aa14:	e00b      	b.n	800aa2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa16:	2303      	movs	r3, #3
 800aa18:	73fb      	strb	r3, [r7, #15]
    break;
 800aa1a:	e008      	b.n	800aa2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa20:	e005      	b.n	800aa2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	73fb      	strb	r3, [r7, #15]
    break;
 800aa26:	e002      	b.n	800aa2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa2c:	bf00      	nop
  }
  return usb_status;
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <__assert_func>:
 800aa3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa3e:	4614      	mov	r4, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	4b09      	ldr	r3, [pc, #36]	@ (800aa68 <__assert_func+0x2c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4605      	mov	r5, r0
 800aa48:	68d8      	ldr	r0, [r3, #12]
 800aa4a:	b14c      	cbz	r4, 800aa60 <__assert_func+0x24>
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <__assert_func+0x30>)
 800aa4e:	9100      	str	r1, [sp, #0]
 800aa50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa54:	4906      	ldr	r1, [pc, #24]	@ (800aa70 <__assert_func+0x34>)
 800aa56:	462b      	mov	r3, r5
 800aa58:	f000 fdbe 	bl	800b5d8 <fiprintf>
 800aa5c:	f000 febf 	bl	800b7de <abort>
 800aa60:	4b04      	ldr	r3, [pc, #16]	@ (800aa74 <__assert_func+0x38>)
 800aa62:	461c      	mov	r4, r3
 800aa64:	e7f3      	b.n	800aa4e <__assert_func+0x12>
 800aa66:	bf00      	nop
 800aa68:	20000108 	.word	0x20000108
 800aa6c:	0800d448 	.word	0x0800d448
 800aa70:	0800d455 	.word	0x0800d455
 800aa74:	0800d483 	.word	0x0800d483

0800aa78 <malloc>:
 800aa78:	4b02      	ldr	r3, [pc, #8]	@ (800aa84 <malloc+0xc>)
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	f000 b825 	b.w	800aacc <_malloc_r>
 800aa82:	bf00      	nop
 800aa84:	20000108 	.word	0x20000108

0800aa88 <sbrk_aligned>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4e0f      	ldr	r6, [pc, #60]	@ (800aac8 <sbrk_aligned+0x40>)
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	6831      	ldr	r1, [r6, #0]
 800aa90:	4605      	mov	r5, r0
 800aa92:	b911      	cbnz	r1, 800aa9a <sbrk_aligned+0x12>
 800aa94:	f000 fe54 	bl	800b740 <_sbrk_r>
 800aa98:	6030      	str	r0, [r6, #0]
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f000 fe4f 	bl	800b740 <_sbrk_r>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d103      	bne.n	800aaae <sbrk_aligned+0x26>
 800aaa6:	f04f 34ff 	mov.w	r4, #4294967295
 800aaaa:	4620      	mov	r0, r4
 800aaac:	bd70      	pop	{r4, r5, r6, pc}
 800aaae:	1cc4      	adds	r4, r0, #3
 800aab0:	f024 0403 	bic.w	r4, r4, #3
 800aab4:	42a0      	cmp	r0, r4
 800aab6:	d0f8      	beq.n	800aaaa <sbrk_aligned+0x22>
 800aab8:	1a21      	subs	r1, r4, r0
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 fe40 	bl	800b740 <_sbrk_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	d1f2      	bne.n	800aaaa <sbrk_aligned+0x22>
 800aac4:	e7ef      	b.n	800aaa6 <sbrk_aligned+0x1e>
 800aac6:	bf00      	nop
 800aac8:	20001fb8 	.word	0x20001fb8

0800aacc <_malloc_r>:
 800aacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad0:	1ccd      	adds	r5, r1, #3
 800aad2:	f025 0503 	bic.w	r5, r5, #3
 800aad6:	3508      	adds	r5, #8
 800aad8:	2d0c      	cmp	r5, #12
 800aada:	bf38      	it	cc
 800aadc:	250c      	movcc	r5, #12
 800aade:	2d00      	cmp	r5, #0
 800aae0:	4606      	mov	r6, r0
 800aae2:	db01      	blt.n	800aae8 <_malloc_r+0x1c>
 800aae4:	42a9      	cmp	r1, r5
 800aae6:	d904      	bls.n	800aaf2 <_malloc_r+0x26>
 800aae8:	230c      	movs	r3, #12
 800aaea:	6033      	str	r3, [r6, #0]
 800aaec:	2000      	movs	r0, #0
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc8 <_malloc_r+0xfc>
 800aaf6:	f000 f869 	bl	800abcc <__malloc_lock>
 800aafa:	f8d8 3000 	ldr.w	r3, [r8]
 800aafe:	461c      	mov	r4, r3
 800ab00:	bb44      	cbnz	r4, 800ab54 <_malloc_r+0x88>
 800ab02:	4629      	mov	r1, r5
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ffbf 	bl	800aa88 <sbrk_aligned>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	d158      	bne.n	800abc2 <_malloc_r+0xf6>
 800ab10:	f8d8 4000 	ldr.w	r4, [r8]
 800ab14:	4627      	mov	r7, r4
 800ab16:	2f00      	cmp	r7, #0
 800ab18:	d143      	bne.n	800aba2 <_malloc_r+0xd6>
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d04b      	beq.n	800abb6 <_malloc_r+0xea>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	4639      	mov	r1, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	eb04 0903 	add.w	r9, r4, r3
 800ab28:	f000 fe0a 	bl	800b740 <_sbrk_r>
 800ab2c:	4581      	cmp	r9, r0
 800ab2e:	d142      	bne.n	800abb6 <_malloc_r+0xea>
 800ab30:	6821      	ldr	r1, [r4, #0]
 800ab32:	1a6d      	subs	r5, r5, r1
 800ab34:	4629      	mov	r1, r5
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7ff ffa6 	bl	800aa88 <sbrk_aligned>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d03a      	beq.n	800abb6 <_malloc_r+0xea>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	442b      	add	r3, r5
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	bb62      	cbnz	r2, 800aba8 <_malloc_r+0xdc>
 800ab4e:	f8c8 7000 	str.w	r7, [r8]
 800ab52:	e00f      	b.n	800ab74 <_malloc_r+0xa8>
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	1b52      	subs	r2, r2, r5
 800ab58:	d420      	bmi.n	800ab9c <_malloc_r+0xd0>
 800ab5a:	2a0b      	cmp	r2, #11
 800ab5c:	d917      	bls.n	800ab8e <_malloc_r+0xc2>
 800ab5e:	1961      	adds	r1, r4, r5
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	6025      	str	r5, [r4, #0]
 800ab64:	bf18      	it	ne
 800ab66:	6059      	strne	r1, [r3, #4]
 800ab68:	6863      	ldr	r3, [r4, #4]
 800ab6a:	bf08      	it	eq
 800ab6c:	f8c8 1000 	streq.w	r1, [r8]
 800ab70:	5162      	str	r2, [r4, r5]
 800ab72:	604b      	str	r3, [r1, #4]
 800ab74:	4630      	mov	r0, r6
 800ab76:	f000 f82f 	bl	800abd8 <__malloc_unlock>
 800ab7a:	f104 000b 	add.w	r0, r4, #11
 800ab7e:	1d23      	adds	r3, r4, #4
 800ab80:	f020 0007 	bic.w	r0, r0, #7
 800ab84:	1ac2      	subs	r2, r0, r3
 800ab86:	bf1c      	itt	ne
 800ab88:	1a1b      	subne	r3, r3, r0
 800ab8a:	50a3      	strne	r3, [r4, r2]
 800ab8c:	e7af      	b.n	800aaee <_malloc_r+0x22>
 800ab8e:	6862      	ldr	r2, [r4, #4]
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	bf0c      	ite	eq
 800ab94:	f8c8 2000 	streq.w	r2, [r8]
 800ab98:	605a      	strne	r2, [r3, #4]
 800ab9a:	e7eb      	b.n	800ab74 <_malloc_r+0xa8>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	6864      	ldr	r4, [r4, #4]
 800aba0:	e7ae      	b.n	800ab00 <_malloc_r+0x34>
 800aba2:	463c      	mov	r4, r7
 800aba4:	687f      	ldr	r7, [r7, #4]
 800aba6:	e7b6      	b.n	800ab16 <_malloc_r+0x4a>
 800aba8:	461a      	mov	r2, r3
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	42a3      	cmp	r3, r4
 800abae:	d1fb      	bne.n	800aba8 <_malloc_r+0xdc>
 800abb0:	2300      	movs	r3, #0
 800abb2:	6053      	str	r3, [r2, #4]
 800abb4:	e7de      	b.n	800ab74 <_malloc_r+0xa8>
 800abb6:	230c      	movs	r3, #12
 800abb8:	6033      	str	r3, [r6, #0]
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 f80c 	bl	800abd8 <__malloc_unlock>
 800abc0:	e794      	b.n	800aaec <_malloc_r+0x20>
 800abc2:	6005      	str	r5, [r0, #0]
 800abc4:	e7d6      	b.n	800ab74 <_malloc_r+0xa8>
 800abc6:	bf00      	nop
 800abc8:	20001fbc 	.word	0x20001fbc

0800abcc <__malloc_lock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	@ (800abd4 <__malloc_lock+0x8>)
 800abce:	f000 be04 	b.w	800b7da <__retarget_lock_acquire_recursive>
 800abd2:	bf00      	nop
 800abd4:	20002100 	.word	0x20002100

0800abd8 <__malloc_unlock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	@ (800abe0 <__malloc_unlock+0x8>)
 800abda:	f000 bdff 	b.w	800b7dc <__retarget_lock_release_recursive>
 800abde:	bf00      	nop
 800abe0:	20002100 	.word	0x20002100

0800abe4 <__cvt>:
 800abe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	ec57 6b10 	vmov	r6, r7, d0
 800abec:	2f00      	cmp	r7, #0
 800abee:	460c      	mov	r4, r1
 800abf0:	4619      	mov	r1, r3
 800abf2:	463b      	mov	r3, r7
 800abf4:	bfbb      	ittet	lt
 800abf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800abfa:	461f      	movlt	r7, r3
 800abfc:	2300      	movge	r3, #0
 800abfe:	232d      	movlt	r3, #45	@ 0x2d
 800ac00:	700b      	strb	r3, [r1, #0]
 800ac02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ac08:	4691      	mov	r9, r2
 800ac0a:	f023 0820 	bic.w	r8, r3, #32
 800ac0e:	bfbc      	itt	lt
 800ac10:	4632      	movlt	r2, r6
 800ac12:	4616      	movlt	r6, r2
 800ac14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac18:	d005      	beq.n	800ac26 <__cvt+0x42>
 800ac1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac1e:	d100      	bne.n	800ac22 <__cvt+0x3e>
 800ac20:	3401      	adds	r4, #1
 800ac22:	2102      	movs	r1, #2
 800ac24:	e000      	b.n	800ac28 <__cvt+0x44>
 800ac26:	2103      	movs	r1, #3
 800ac28:	ab03      	add	r3, sp, #12
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	ab02      	add	r3, sp, #8
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	ec47 6b10 	vmov	d0, r6, r7
 800ac34:	4653      	mov	r3, sl
 800ac36:	4622      	mov	r2, r4
 800ac38:	f000 fe62 	bl	800b900 <_dtoa_r>
 800ac3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac40:	4605      	mov	r5, r0
 800ac42:	d119      	bne.n	800ac78 <__cvt+0x94>
 800ac44:	f019 0f01 	tst.w	r9, #1
 800ac48:	d00e      	beq.n	800ac68 <__cvt+0x84>
 800ac4a:	eb00 0904 	add.w	r9, r0, r4
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5a:	b108      	cbz	r0, 800ac60 <__cvt+0x7c>
 800ac5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac60:	2230      	movs	r2, #48	@ 0x30
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	454b      	cmp	r3, r9
 800ac66:	d31e      	bcc.n	800aca6 <__cvt+0xc2>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac6c:	1b5b      	subs	r3, r3, r5
 800ac6e:	4628      	mov	r0, r5
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	b004      	add	sp, #16
 800ac74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac7c:	eb00 0904 	add.w	r9, r0, r4
 800ac80:	d1e5      	bne.n	800ac4e <__cvt+0x6a>
 800ac82:	7803      	ldrb	r3, [r0, #0]
 800ac84:	2b30      	cmp	r3, #48	@ 0x30
 800ac86:	d10a      	bne.n	800ac9e <__cvt+0xba>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac94:	b918      	cbnz	r0, 800ac9e <__cvt+0xba>
 800ac96:	f1c4 0401 	rsb	r4, r4, #1
 800ac9a:	f8ca 4000 	str.w	r4, [sl]
 800ac9e:	f8da 3000 	ldr.w	r3, [sl]
 800aca2:	4499      	add	r9, r3
 800aca4:	e7d3      	b.n	800ac4e <__cvt+0x6a>
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	9103      	str	r1, [sp, #12]
 800acaa:	701a      	strb	r2, [r3, #0]
 800acac:	e7d9      	b.n	800ac62 <__cvt+0x7e>

0800acae <__exponent>:
 800acae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acb0:	2900      	cmp	r1, #0
 800acb2:	bfba      	itte	lt
 800acb4:	4249      	neglt	r1, r1
 800acb6:	232d      	movlt	r3, #45	@ 0x2d
 800acb8:	232b      	movge	r3, #43	@ 0x2b
 800acba:	2909      	cmp	r1, #9
 800acbc:	7002      	strb	r2, [r0, #0]
 800acbe:	7043      	strb	r3, [r0, #1]
 800acc0:	dd29      	ble.n	800ad16 <__exponent+0x68>
 800acc2:	f10d 0307 	add.w	r3, sp, #7
 800acc6:	461d      	mov	r5, r3
 800acc8:	270a      	movs	r7, #10
 800acca:	461a      	mov	r2, r3
 800accc:	fbb1 f6f7 	udiv	r6, r1, r7
 800acd0:	fb07 1416 	mls	r4, r7, r6, r1
 800acd4:	3430      	adds	r4, #48	@ 0x30
 800acd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800acda:	460c      	mov	r4, r1
 800acdc:	2c63      	cmp	r4, #99	@ 0x63
 800acde:	f103 33ff 	add.w	r3, r3, #4294967295
 800ace2:	4631      	mov	r1, r6
 800ace4:	dcf1      	bgt.n	800acca <__exponent+0x1c>
 800ace6:	3130      	adds	r1, #48	@ 0x30
 800ace8:	1e94      	subs	r4, r2, #2
 800acea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acee:	1c41      	adds	r1, r0, #1
 800acf0:	4623      	mov	r3, r4
 800acf2:	42ab      	cmp	r3, r5
 800acf4:	d30a      	bcc.n	800ad0c <__exponent+0x5e>
 800acf6:	f10d 0309 	add.w	r3, sp, #9
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	42ac      	cmp	r4, r5
 800acfe:	bf88      	it	hi
 800ad00:	2300      	movhi	r3, #0
 800ad02:	3302      	adds	r3, #2
 800ad04:	4403      	add	r3, r0
 800ad06:	1a18      	subs	r0, r3, r0
 800ad08:	b003      	add	sp, #12
 800ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad14:	e7ed      	b.n	800acf2 <__exponent+0x44>
 800ad16:	2330      	movs	r3, #48	@ 0x30
 800ad18:	3130      	adds	r1, #48	@ 0x30
 800ad1a:	7083      	strb	r3, [r0, #2]
 800ad1c:	70c1      	strb	r1, [r0, #3]
 800ad1e:	1d03      	adds	r3, r0, #4
 800ad20:	e7f1      	b.n	800ad06 <__exponent+0x58>
	...

0800ad24 <_printf_float>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	b08d      	sub	sp, #52	@ 0x34
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad30:	4616      	mov	r6, r2
 800ad32:	461f      	mov	r7, r3
 800ad34:	4605      	mov	r5, r0
 800ad36:	f000 fccb 	bl	800b6d0 <_localeconv_r>
 800ad3a:	6803      	ldr	r3, [r0, #0]
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f5 fa96 	bl	8000270 <strlen>
 800ad44:	2300      	movs	r3, #0
 800ad46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad48:	f8d8 3000 	ldr.w	r3, [r8]
 800ad4c:	9005      	str	r0, [sp, #20]
 800ad4e:	3307      	adds	r3, #7
 800ad50:	f023 0307 	bic.w	r3, r3, #7
 800ad54:	f103 0208 	add.w	r2, r3, #8
 800ad58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad5c:	f8d4 b000 	ldr.w	fp, [r4]
 800ad60:	f8c8 2000 	str.w	r2, [r8]
 800ad64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad7a:	4b9c      	ldr	r3, [pc, #624]	@ (800afec <_printf_float+0x2c8>)
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	f7f5 fed4 	bl	8000b2c <__aeabi_dcmpun>
 800ad84:	bb70      	cbnz	r0, 800ade4 <_printf_float+0xc0>
 800ad86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad8a:	4b98      	ldr	r3, [pc, #608]	@ (800afec <_printf_float+0x2c8>)
 800ad8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad90:	f7f5 feae 	bl	8000af0 <__aeabi_dcmple>
 800ad94:	bb30      	cbnz	r0, 800ade4 <_printf_float+0xc0>
 800ad96:	2200      	movs	r2, #0
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f7f5 fe9d 	bl	8000adc <__aeabi_dcmplt>
 800ada2:	b110      	cbz	r0, 800adaa <_printf_float+0x86>
 800ada4:	232d      	movs	r3, #45	@ 0x2d
 800ada6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adaa:	4a91      	ldr	r2, [pc, #580]	@ (800aff0 <_printf_float+0x2cc>)
 800adac:	4b91      	ldr	r3, [pc, #580]	@ (800aff4 <_printf_float+0x2d0>)
 800adae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adb2:	bf8c      	ite	hi
 800adb4:	4690      	movhi	r8, r2
 800adb6:	4698      	movls	r8, r3
 800adb8:	2303      	movs	r3, #3
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	f02b 0304 	bic.w	r3, fp, #4
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	f04f 0900 	mov.w	r9, #0
 800adc6:	9700      	str	r7, [sp, #0]
 800adc8:	4633      	mov	r3, r6
 800adca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f9d2 	bl	800b178 <_printf_common>
 800add4:	3001      	adds	r0, #1
 800add6:	f040 808d 	bne.w	800aef4 <_printf_float+0x1d0>
 800adda:	f04f 30ff 	mov.w	r0, #4294967295
 800adde:	b00d      	add	sp, #52	@ 0x34
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	4642      	mov	r2, r8
 800ade6:	464b      	mov	r3, r9
 800ade8:	4640      	mov	r0, r8
 800adea:	4649      	mov	r1, r9
 800adec:	f7f5 fe9e 	bl	8000b2c <__aeabi_dcmpun>
 800adf0:	b140      	cbz	r0, 800ae04 <_printf_float+0xe0>
 800adf2:	464b      	mov	r3, r9
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfbc      	itt	lt
 800adf8:	232d      	movlt	r3, #45	@ 0x2d
 800adfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adfe:	4a7e      	ldr	r2, [pc, #504]	@ (800aff8 <_printf_float+0x2d4>)
 800ae00:	4b7e      	ldr	r3, [pc, #504]	@ (800affc <_printf_float+0x2d8>)
 800ae02:	e7d4      	b.n	800adae <_printf_float+0x8a>
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ae0a:	9206      	str	r2, [sp, #24]
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	d13b      	bne.n	800ae88 <_printf_float+0x164>
 800ae10:	2306      	movs	r3, #6
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ae18:	2300      	movs	r3, #0
 800ae1a:	6022      	str	r2, [r4, #0]
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ae24:	ab09      	add	r3, sp, #36	@ 0x24
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	6861      	ldr	r1, [r4, #4]
 800ae2a:	ec49 8b10 	vmov	d0, r8, r9
 800ae2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ae32:	4628      	mov	r0, r5
 800ae34:	f7ff fed6 	bl	800abe4 <__cvt>
 800ae38:	9b06      	ldr	r3, [sp, #24]
 800ae3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae3c:	2b47      	cmp	r3, #71	@ 0x47
 800ae3e:	4680      	mov	r8, r0
 800ae40:	d129      	bne.n	800ae96 <_printf_float+0x172>
 800ae42:	1cc8      	adds	r0, r1, #3
 800ae44:	db02      	blt.n	800ae4c <_printf_float+0x128>
 800ae46:	6863      	ldr	r3, [r4, #4]
 800ae48:	4299      	cmp	r1, r3
 800ae4a:	dd41      	ble.n	800aed0 <_printf_float+0x1ac>
 800ae4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae50:	fa5f fa8a 	uxtb.w	sl, sl
 800ae54:	3901      	subs	r1, #1
 800ae56:	4652      	mov	r2, sl
 800ae58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae5e:	f7ff ff26 	bl	800acae <__exponent>
 800ae62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae64:	1813      	adds	r3, r2, r0
 800ae66:	2a01      	cmp	r2, #1
 800ae68:	4681      	mov	r9, r0
 800ae6a:	6123      	str	r3, [r4, #16]
 800ae6c:	dc02      	bgt.n	800ae74 <_printf_float+0x150>
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	07d2      	lsls	r2, r2, #31
 800ae72:	d501      	bpl.n	800ae78 <_printf_float+0x154>
 800ae74:	3301      	adds	r3, #1
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0a2      	beq.n	800adc6 <_printf_float+0xa2>
 800ae80:	232d      	movs	r3, #45	@ 0x2d
 800ae82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae86:	e79e      	b.n	800adc6 <_printf_float+0xa2>
 800ae88:	9a06      	ldr	r2, [sp, #24]
 800ae8a:	2a47      	cmp	r2, #71	@ 0x47
 800ae8c:	d1c2      	bne.n	800ae14 <_printf_float+0xf0>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1c0      	bne.n	800ae14 <_printf_float+0xf0>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e7bd      	b.n	800ae12 <_printf_float+0xee>
 800ae96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae9a:	d9db      	bls.n	800ae54 <_printf_float+0x130>
 800ae9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aea0:	d118      	bne.n	800aed4 <_printf_float+0x1b0>
 800aea2:	2900      	cmp	r1, #0
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	dd0b      	ble.n	800aec0 <_printf_float+0x19c>
 800aea8:	6121      	str	r1, [r4, #16]
 800aeaa:	b913      	cbnz	r3, 800aeb2 <_printf_float+0x18e>
 800aeac:	6822      	ldr	r2, [r4, #0]
 800aeae:	07d0      	lsls	r0, r2, #31
 800aeb0:	d502      	bpl.n	800aeb8 <_printf_float+0x194>
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	440b      	add	r3, r1
 800aeb6:	6123      	str	r3, [r4, #16]
 800aeb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aeba:	f04f 0900 	mov.w	r9, #0
 800aebe:	e7db      	b.n	800ae78 <_printf_float+0x154>
 800aec0:	b913      	cbnz	r3, 800aec8 <_printf_float+0x1a4>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	07d2      	lsls	r2, r2, #31
 800aec6:	d501      	bpl.n	800aecc <_printf_float+0x1a8>
 800aec8:	3302      	adds	r3, #2
 800aeca:	e7f4      	b.n	800aeb6 <_printf_float+0x192>
 800aecc:	2301      	movs	r3, #1
 800aece:	e7f2      	b.n	800aeb6 <_printf_float+0x192>
 800aed0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aed6:	4299      	cmp	r1, r3
 800aed8:	db05      	blt.n	800aee6 <_printf_float+0x1c2>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	6121      	str	r1, [r4, #16]
 800aede:	07d8      	lsls	r0, r3, #31
 800aee0:	d5ea      	bpl.n	800aeb8 <_printf_float+0x194>
 800aee2:	1c4b      	adds	r3, r1, #1
 800aee4:	e7e7      	b.n	800aeb6 <_printf_float+0x192>
 800aee6:	2900      	cmp	r1, #0
 800aee8:	bfd4      	ite	le
 800aeea:	f1c1 0202 	rsble	r2, r1, #2
 800aeee:	2201      	movgt	r2, #1
 800aef0:	4413      	add	r3, r2
 800aef2:	e7e0      	b.n	800aeb6 <_printf_float+0x192>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	055a      	lsls	r2, r3, #21
 800aef8:	d407      	bmi.n	800af0a <_printf_float+0x1e6>
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	4642      	mov	r2, r8
 800aefe:	4631      	mov	r1, r6
 800af00:	4628      	mov	r0, r5
 800af02:	47b8      	blx	r7
 800af04:	3001      	adds	r0, #1
 800af06:	d12b      	bne.n	800af60 <_printf_float+0x23c>
 800af08:	e767      	b.n	800adda <_printf_float+0xb6>
 800af0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af0e:	f240 80dd 	bls.w	800b0cc <_printf_float+0x3a8>
 800af12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	f7f5 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d033      	beq.n	800af8a <_printf_float+0x266>
 800af22:	4a37      	ldr	r2, [pc, #220]	@ (800b000 <_printf_float+0x2dc>)
 800af24:	2301      	movs	r3, #1
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	47b8      	blx	r7
 800af2c:	3001      	adds	r0, #1
 800af2e:	f43f af54 	beq.w	800adda <_printf_float+0xb6>
 800af32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af36:	4543      	cmp	r3, r8
 800af38:	db02      	blt.n	800af40 <_printf_float+0x21c>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	07d8      	lsls	r0, r3, #31
 800af3e:	d50f      	bpl.n	800af60 <_printf_float+0x23c>
 800af40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	47b8      	blx	r7
 800af4a:	3001      	adds	r0, #1
 800af4c:	f43f af45 	beq.w	800adda <_printf_float+0xb6>
 800af50:	f04f 0900 	mov.w	r9, #0
 800af54:	f108 38ff 	add.w	r8, r8, #4294967295
 800af58:	f104 0a1a 	add.w	sl, r4, #26
 800af5c:	45c8      	cmp	r8, r9
 800af5e:	dc09      	bgt.n	800af74 <_printf_float+0x250>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	079b      	lsls	r3, r3, #30
 800af64:	f100 8103 	bmi.w	800b16e <_printf_float+0x44a>
 800af68:	68e0      	ldr	r0, [r4, #12]
 800af6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af6c:	4298      	cmp	r0, r3
 800af6e:	bfb8      	it	lt
 800af70:	4618      	movlt	r0, r3
 800af72:	e734      	b.n	800adde <_printf_float+0xba>
 800af74:	2301      	movs	r3, #1
 800af76:	4652      	mov	r2, sl
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f af2b 	beq.w	800adda <_printf_float+0xb6>
 800af84:	f109 0901 	add.w	r9, r9, #1
 800af88:	e7e8      	b.n	800af5c <_printf_float+0x238>
 800af8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dc39      	bgt.n	800b004 <_printf_float+0x2e0>
 800af90:	4a1b      	ldr	r2, [pc, #108]	@ (800b000 <_printf_float+0x2dc>)
 800af92:	2301      	movs	r3, #1
 800af94:	4631      	mov	r1, r6
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	f43f af1d 	beq.w	800adda <_printf_float+0xb6>
 800afa0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800afa4:	ea59 0303 	orrs.w	r3, r9, r3
 800afa8:	d102      	bne.n	800afb0 <_printf_float+0x28c>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	d5d7      	bpl.n	800af60 <_printf_float+0x23c>
 800afb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	f43f af0d 	beq.w	800adda <_printf_float+0xb6>
 800afc0:	f04f 0a00 	mov.w	sl, #0
 800afc4:	f104 0b1a 	add.w	fp, r4, #26
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	425b      	negs	r3, r3
 800afcc:	4553      	cmp	r3, sl
 800afce:	dc01      	bgt.n	800afd4 <_printf_float+0x2b0>
 800afd0:	464b      	mov	r3, r9
 800afd2:	e793      	b.n	800aefc <_printf_float+0x1d8>
 800afd4:	2301      	movs	r3, #1
 800afd6:	465a      	mov	r2, fp
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	47b8      	blx	r7
 800afde:	3001      	adds	r0, #1
 800afe0:	f43f aefb 	beq.w	800adda <_printf_float+0xb6>
 800afe4:	f10a 0a01 	add.w	sl, sl, #1
 800afe8:	e7ee      	b.n	800afc8 <_printf_float+0x2a4>
 800afea:	bf00      	nop
 800afec:	7fefffff 	.word	0x7fefffff
 800aff0:	0800d488 	.word	0x0800d488
 800aff4:	0800d484 	.word	0x0800d484
 800aff8:	0800d490 	.word	0x0800d490
 800affc:	0800d48c 	.word	0x0800d48c
 800b000:	0800d494 	.word	0x0800d494
 800b004:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b006:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b00a:	4553      	cmp	r3, sl
 800b00c:	bfa8      	it	ge
 800b00e:	4653      	movge	r3, sl
 800b010:	2b00      	cmp	r3, #0
 800b012:	4699      	mov	r9, r3
 800b014:	dc36      	bgt.n	800b084 <_printf_float+0x360>
 800b016:	f04f 0b00 	mov.w	fp, #0
 800b01a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b01e:	f104 021a 	add.w	r2, r4, #26
 800b022:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b024:	9306      	str	r3, [sp, #24]
 800b026:	eba3 0309 	sub.w	r3, r3, r9
 800b02a:	455b      	cmp	r3, fp
 800b02c:	dc31      	bgt.n	800b092 <_printf_float+0x36e>
 800b02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b030:	459a      	cmp	sl, r3
 800b032:	dc3a      	bgt.n	800b0aa <_printf_float+0x386>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	07da      	lsls	r2, r3, #31
 800b038:	d437      	bmi.n	800b0aa <_printf_float+0x386>
 800b03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03c:	ebaa 0903 	sub.w	r9, sl, r3
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	ebaa 0303 	sub.w	r3, sl, r3
 800b046:	4599      	cmp	r9, r3
 800b048:	bfa8      	it	ge
 800b04a:	4699      	movge	r9, r3
 800b04c:	f1b9 0f00 	cmp.w	r9, #0
 800b050:	dc33      	bgt.n	800b0ba <_printf_float+0x396>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b05a:	f104 0b1a 	add.w	fp, r4, #26
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	ebaa 0303 	sub.w	r3, sl, r3
 800b064:	eba3 0309 	sub.w	r3, r3, r9
 800b068:	4543      	cmp	r3, r8
 800b06a:	f77f af79 	ble.w	800af60 <_printf_float+0x23c>
 800b06e:	2301      	movs	r3, #1
 800b070:	465a      	mov	r2, fp
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	f43f aeae 	beq.w	800adda <_printf_float+0xb6>
 800b07e:	f108 0801 	add.w	r8, r8, #1
 800b082:	e7ec      	b.n	800b05e <_printf_float+0x33a>
 800b084:	4642      	mov	r2, r8
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	d1c2      	bne.n	800b016 <_printf_float+0x2f2>
 800b090:	e6a3      	b.n	800adda <_printf_float+0xb6>
 800b092:	2301      	movs	r3, #1
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	9206      	str	r2, [sp, #24]
 800b09a:	47b8      	blx	r7
 800b09c:	3001      	adds	r0, #1
 800b09e:	f43f ae9c 	beq.w	800adda <_printf_float+0xb6>
 800b0a2:	9a06      	ldr	r2, [sp, #24]
 800b0a4:	f10b 0b01 	add.w	fp, fp, #1
 800b0a8:	e7bb      	b.n	800b022 <_printf_float+0x2fe>
 800b0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	47b8      	blx	r7
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d1c0      	bne.n	800b03a <_printf_float+0x316>
 800b0b8:	e68f      	b.n	800adda <_printf_float+0xb6>
 800b0ba:	9a06      	ldr	r2, [sp, #24]
 800b0bc:	464b      	mov	r3, r9
 800b0be:	4442      	add	r2, r8
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	47b8      	blx	r7
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d1c3      	bne.n	800b052 <_printf_float+0x32e>
 800b0ca:	e686      	b.n	800adda <_printf_float+0xb6>
 800b0cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0d0:	f1ba 0f01 	cmp.w	sl, #1
 800b0d4:	dc01      	bgt.n	800b0da <_printf_float+0x3b6>
 800b0d6:	07db      	lsls	r3, r3, #31
 800b0d8:	d536      	bpl.n	800b148 <_printf_float+0x424>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4642      	mov	r2, r8
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f43f ae78 	beq.w	800adda <_printf_float+0xb6>
 800b0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f ae70 	beq.w	800adda <_printf_float+0xb6>
 800b0fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0fe:	2200      	movs	r2, #0
 800b100:	2300      	movs	r3, #0
 800b102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b106:	f7f5 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b10a:	b9c0      	cbnz	r0, 800b13e <_printf_float+0x41a>
 800b10c:	4653      	mov	r3, sl
 800b10e:	f108 0201 	add.w	r2, r8, #1
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	d10c      	bne.n	800b136 <_printf_float+0x412>
 800b11c:	e65d      	b.n	800adda <_printf_float+0xb6>
 800b11e:	2301      	movs	r3, #1
 800b120:	465a      	mov	r2, fp
 800b122:	4631      	mov	r1, r6
 800b124:	4628      	mov	r0, r5
 800b126:	47b8      	blx	r7
 800b128:	3001      	adds	r0, #1
 800b12a:	f43f ae56 	beq.w	800adda <_printf_float+0xb6>
 800b12e:	f108 0801 	add.w	r8, r8, #1
 800b132:	45d0      	cmp	r8, sl
 800b134:	dbf3      	blt.n	800b11e <_printf_float+0x3fa>
 800b136:	464b      	mov	r3, r9
 800b138:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b13c:	e6df      	b.n	800aefe <_printf_float+0x1da>
 800b13e:	f04f 0800 	mov.w	r8, #0
 800b142:	f104 0b1a 	add.w	fp, r4, #26
 800b146:	e7f4      	b.n	800b132 <_printf_float+0x40e>
 800b148:	2301      	movs	r3, #1
 800b14a:	4642      	mov	r2, r8
 800b14c:	e7e1      	b.n	800b112 <_printf_float+0x3ee>
 800b14e:	2301      	movs	r3, #1
 800b150:	464a      	mov	r2, r9
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	f43f ae3e 	beq.w	800adda <_printf_float+0xb6>
 800b15e:	f108 0801 	add.w	r8, r8, #1
 800b162:	68e3      	ldr	r3, [r4, #12]
 800b164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b166:	1a5b      	subs	r3, r3, r1
 800b168:	4543      	cmp	r3, r8
 800b16a:	dcf0      	bgt.n	800b14e <_printf_float+0x42a>
 800b16c:	e6fc      	b.n	800af68 <_printf_float+0x244>
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	f104 0919 	add.w	r9, r4, #25
 800b176:	e7f4      	b.n	800b162 <_printf_float+0x43e>

0800b178 <_printf_common>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	4616      	mov	r6, r2
 800b17e:	4698      	mov	r8, r3
 800b180:	688a      	ldr	r2, [r1, #8]
 800b182:	690b      	ldr	r3, [r1, #16]
 800b184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b188:	4293      	cmp	r3, r2
 800b18a:	bfb8      	it	lt
 800b18c:	4613      	movlt	r3, r2
 800b18e:	6033      	str	r3, [r6, #0]
 800b190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b194:	4607      	mov	r7, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b10a      	cbz	r2, 800b19e <_printf_common+0x26>
 800b19a:	3301      	adds	r3, #1
 800b19c:	6033      	str	r3, [r6, #0]
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	0699      	lsls	r1, r3, #26
 800b1a2:	bf42      	ittt	mi
 800b1a4:	6833      	ldrmi	r3, [r6, #0]
 800b1a6:	3302      	addmi	r3, #2
 800b1a8:	6033      	strmi	r3, [r6, #0]
 800b1aa:	6825      	ldr	r5, [r4, #0]
 800b1ac:	f015 0506 	ands.w	r5, r5, #6
 800b1b0:	d106      	bne.n	800b1c0 <_printf_common+0x48>
 800b1b2:	f104 0a19 	add.w	sl, r4, #25
 800b1b6:	68e3      	ldr	r3, [r4, #12]
 800b1b8:	6832      	ldr	r2, [r6, #0]
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	42ab      	cmp	r3, r5
 800b1be:	dc26      	bgt.n	800b20e <_printf_common+0x96>
 800b1c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1c4:	6822      	ldr	r2, [r4, #0]
 800b1c6:	3b00      	subs	r3, #0
 800b1c8:	bf18      	it	ne
 800b1ca:	2301      	movne	r3, #1
 800b1cc:	0692      	lsls	r2, r2, #26
 800b1ce:	d42b      	bmi.n	800b228 <_printf_common+0xb0>
 800b1d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1d4:	4641      	mov	r1, r8
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	47c8      	blx	r9
 800b1da:	3001      	adds	r0, #1
 800b1dc:	d01e      	beq.n	800b21c <_printf_common+0xa4>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	6922      	ldr	r2, [r4, #16]
 800b1e2:	f003 0306 	and.w	r3, r3, #6
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	bf02      	ittt	eq
 800b1ea:	68e5      	ldreq	r5, [r4, #12]
 800b1ec:	6833      	ldreq	r3, [r6, #0]
 800b1ee:	1aed      	subeq	r5, r5, r3
 800b1f0:	68a3      	ldr	r3, [r4, #8]
 800b1f2:	bf0c      	ite	eq
 800b1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1f8:	2500      	movne	r5, #0
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	bfc4      	itt	gt
 800b1fe:	1a9b      	subgt	r3, r3, r2
 800b200:	18ed      	addgt	r5, r5, r3
 800b202:	2600      	movs	r6, #0
 800b204:	341a      	adds	r4, #26
 800b206:	42b5      	cmp	r5, r6
 800b208:	d11a      	bne.n	800b240 <_printf_common+0xc8>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e008      	b.n	800b220 <_printf_common+0xa8>
 800b20e:	2301      	movs	r3, #1
 800b210:	4652      	mov	r2, sl
 800b212:	4641      	mov	r1, r8
 800b214:	4638      	mov	r0, r7
 800b216:	47c8      	blx	r9
 800b218:	3001      	adds	r0, #1
 800b21a:	d103      	bne.n	800b224 <_printf_common+0xac>
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b224:	3501      	adds	r5, #1
 800b226:	e7c6      	b.n	800b1b6 <_printf_common+0x3e>
 800b228:	18e1      	adds	r1, r4, r3
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	2030      	movs	r0, #48	@ 0x30
 800b22e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b232:	4422      	add	r2, r4
 800b234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b23c:	3302      	adds	r3, #2
 800b23e:	e7c7      	b.n	800b1d0 <_printf_common+0x58>
 800b240:	2301      	movs	r3, #1
 800b242:	4622      	mov	r2, r4
 800b244:	4641      	mov	r1, r8
 800b246:	4638      	mov	r0, r7
 800b248:	47c8      	blx	r9
 800b24a:	3001      	adds	r0, #1
 800b24c:	d0e6      	beq.n	800b21c <_printf_common+0xa4>
 800b24e:	3601      	adds	r6, #1
 800b250:	e7d9      	b.n	800b206 <_printf_common+0x8e>
	...

0800b254 <_printf_i>:
 800b254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	7e0f      	ldrb	r7, [r1, #24]
 800b25a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b25c:	2f78      	cmp	r7, #120	@ 0x78
 800b25e:	4691      	mov	r9, r2
 800b260:	4680      	mov	r8, r0
 800b262:	460c      	mov	r4, r1
 800b264:	469a      	mov	sl, r3
 800b266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b26a:	d807      	bhi.n	800b27c <_printf_i+0x28>
 800b26c:	2f62      	cmp	r7, #98	@ 0x62
 800b26e:	d80a      	bhi.n	800b286 <_printf_i+0x32>
 800b270:	2f00      	cmp	r7, #0
 800b272:	f000 80d1 	beq.w	800b418 <_printf_i+0x1c4>
 800b276:	2f58      	cmp	r7, #88	@ 0x58
 800b278:	f000 80b8 	beq.w	800b3ec <_printf_i+0x198>
 800b27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b284:	e03a      	b.n	800b2fc <_printf_i+0xa8>
 800b286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b28a:	2b15      	cmp	r3, #21
 800b28c:	d8f6      	bhi.n	800b27c <_printf_i+0x28>
 800b28e:	a101      	add	r1, pc, #4	@ (adr r1, 800b294 <_printf_i+0x40>)
 800b290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b294:	0800b2ed 	.word	0x0800b2ed
 800b298:	0800b301 	.word	0x0800b301
 800b29c:	0800b27d 	.word	0x0800b27d
 800b2a0:	0800b27d 	.word	0x0800b27d
 800b2a4:	0800b27d 	.word	0x0800b27d
 800b2a8:	0800b27d 	.word	0x0800b27d
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b27d 	.word	0x0800b27d
 800b2b4:	0800b27d 	.word	0x0800b27d
 800b2b8:	0800b27d 	.word	0x0800b27d
 800b2bc:	0800b27d 	.word	0x0800b27d
 800b2c0:	0800b3ff 	.word	0x0800b3ff
 800b2c4:	0800b32b 	.word	0x0800b32b
 800b2c8:	0800b3b9 	.word	0x0800b3b9
 800b2cc:	0800b27d 	.word	0x0800b27d
 800b2d0:	0800b27d 	.word	0x0800b27d
 800b2d4:	0800b421 	.word	0x0800b421
 800b2d8:	0800b27d 	.word	0x0800b27d
 800b2dc:	0800b32b 	.word	0x0800b32b
 800b2e0:	0800b27d 	.word	0x0800b27d
 800b2e4:	0800b27d 	.word	0x0800b27d
 800b2e8:	0800b3c1 	.word	0x0800b3c1
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6032      	str	r2, [r6, #0]
 800b2f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e09c      	b.n	800b43a <_printf_i+0x1e6>
 800b300:	6833      	ldr	r3, [r6, #0]
 800b302:	6820      	ldr	r0, [r4, #0]
 800b304:	1d19      	adds	r1, r3, #4
 800b306:	6031      	str	r1, [r6, #0]
 800b308:	0606      	lsls	r6, r0, #24
 800b30a:	d501      	bpl.n	800b310 <_printf_i+0xbc>
 800b30c:	681d      	ldr	r5, [r3, #0]
 800b30e:	e003      	b.n	800b318 <_printf_i+0xc4>
 800b310:	0645      	lsls	r5, r0, #25
 800b312:	d5fb      	bpl.n	800b30c <_printf_i+0xb8>
 800b314:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b318:	2d00      	cmp	r5, #0
 800b31a:	da03      	bge.n	800b324 <_printf_i+0xd0>
 800b31c:	232d      	movs	r3, #45	@ 0x2d
 800b31e:	426d      	negs	r5, r5
 800b320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b324:	4858      	ldr	r0, [pc, #352]	@ (800b488 <_printf_i+0x234>)
 800b326:	230a      	movs	r3, #10
 800b328:	e011      	b.n	800b34e <_printf_i+0xfa>
 800b32a:	6821      	ldr	r1, [r4, #0]
 800b32c:	6833      	ldr	r3, [r6, #0]
 800b32e:	0608      	lsls	r0, r1, #24
 800b330:	f853 5b04 	ldr.w	r5, [r3], #4
 800b334:	d402      	bmi.n	800b33c <_printf_i+0xe8>
 800b336:	0649      	lsls	r1, r1, #25
 800b338:	bf48      	it	mi
 800b33a:	b2ad      	uxthmi	r5, r5
 800b33c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b33e:	4852      	ldr	r0, [pc, #328]	@ (800b488 <_printf_i+0x234>)
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	bf14      	ite	ne
 800b344:	230a      	movne	r3, #10
 800b346:	2308      	moveq	r3, #8
 800b348:	2100      	movs	r1, #0
 800b34a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b34e:	6866      	ldr	r6, [r4, #4]
 800b350:	60a6      	str	r6, [r4, #8]
 800b352:	2e00      	cmp	r6, #0
 800b354:	db05      	blt.n	800b362 <_printf_i+0x10e>
 800b356:	6821      	ldr	r1, [r4, #0]
 800b358:	432e      	orrs	r6, r5
 800b35a:	f021 0104 	bic.w	r1, r1, #4
 800b35e:	6021      	str	r1, [r4, #0]
 800b360:	d04b      	beq.n	800b3fa <_printf_i+0x1a6>
 800b362:	4616      	mov	r6, r2
 800b364:	fbb5 f1f3 	udiv	r1, r5, r3
 800b368:	fb03 5711 	mls	r7, r3, r1, r5
 800b36c:	5dc7      	ldrb	r7, [r0, r7]
 800b36e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b372:	462f      	mov	r7, r5
 800b374:	42bb      	cmp	r3, r7
 800b376:	460d      	mov	r5, r1
 800b378:	d9f4      	bls.n	800b364 <_printf_i+0x110>
 800b37a:	2b08      	cmp	r3, #8
 800b37c:	d10b      	bne.n	800b396 <_printf_i+0x142>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	07df      	lsls	r7, r3, #31
 800b382:	d508      	bpl.n	800b396 <_printf_i+0x142>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	6861      	ldr	r1, [r4, #4]
 800b388:	4299      	cmp	r1, r3
 800b38a:	bfde      	ittt	le
 800b38c:	2330      	movle	r3, #48	@ 0x30
 800b38e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b392:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b396:	1b92      	subs	r2, r2, r6
 800b398:	6122      	str	r2, [r4, #16]
 800b39a:	f8cd a000 	str.w	sl, [sp]
 800b39e:	464b      	mov	r3, r9
 800b3a0:	aa03      	add	r2, sp, #12
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	f7ff fee7 	bl	800b178 <_printf_common>
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d14a      	bne.n	800b444 <_printf_i+0x1f0>
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	b004      	add	sp, #16
 800b3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	f043 0320 	orr.w	r3, r3, #32
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	4832      	ldr	r0, [pc, #200]	@ (800b48c <_printf_i+0x238>)
 800b3c2:	2778      	movs	r7, #120	@ 0x78
 800b3c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	6831      	ldr	r1, [r6, #0]
 800b3cc:	061f      	lsls	r7, r3, #24
 800b3ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3d2:	d402      	bmi.n	800b3da <_printf_i+0x186>
 800b3d4:	065f      	lsls	r7, r3, #25
 800b3d6:	bf48      	it	mi
 800b3d8:	b2ad      	uxthmi	r5, r5
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	07d9      	lsls	r1, r3, #31
 800b3de:	bf44      	itt	mi
 800b3e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b3e4:	6023      	strmi	r3, [r4, #0]
 800b3e6:	b11d      	cbz	r5, 800b3f0 <_printf_i+0x19c>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	e7ad      	b.n	800b348 <_printf_i+0xf4>
 800b3ec:	4826      	ldr	r0, [pc, #152]	@ (800b488 <_printf_i+0x234>)
 800b3ee:	e7e9      	b.n	800b3c4 <_printf_i+0x170>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	f023 0320 	bic.w	r3, r3, #32
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	e7f6      	b.n	800b3e8 <_printf_i+0x194>
 800b3fa:	4616      	mov	r6, r2
 800b3fc:	e7bd      	b.n	800b37a <_printf_i+0x126>
 800b3fe:	6833      	ldr	r3, [r6, #0]
 800b400:	6825      	ldr	r5, [r4, #0]
 800b402:	6961      	ldr	r1, [r4, #20]
 800b404:	1d18      	adds	r0, r3, #4
 800b406:	6030      	str	r0, [r6, #0]
 800b408:	062e      	lsls	r6, r5, #24
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	d501      	bpl.n	800b412 <_printf_i+0x1be>
 800b40e:	6019      	str	r1, [r3, #0]
 800b410:	e002      	b.n	800b418 <_printf_i+0x1c4>
 800b412:	0668      	lsls	r0, r5, #25
 800b414:	d5fb      	bpl.n	800b40e <_printf_i+0x1ba>
 800b416:	8019      	strh	r1, [r3, #0]
 800b418:	2300      	movs	r3, #0
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	4616      	mov	r6, r2
 800b41e:	e7bc      	b.n	800b39a <_printf_i+0x146>
 800b420:	6833      	ldr	r3, [r6, #0]
 800b422:	1d1a      	adds	r2, r3, #4
 800b424:	6032      	str	r2, [r6, #0]
 800b426:	681e      	ldr	r6, [r3, #0]
 800b428:	6862      	ldr	r2, [r4, #4]
 800b42a:	2100      	movs	r1, #0
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7f4 fecf 	bl	80001d0 <memchr>
 800b432:	b108      	cbz	r0, 800b438 <_printf_i+0x1e4>
 800b434:	1b80      	subs	r0, r0, r6
 800b436:	6060      	str	r0, [r4, #4]
 800b438:	6863      	ldr	r3, [r4, #4]
 800b43a:	6123      	str	r3, [r4, #16]
 800b43c:	2300      	movs	r3, #0
 800b43e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b442:	e7aa      	b.n	800b39a <_printf_i+0x146>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	4632      	mov	r2, r6
 800b448:	4649      	mov	r1, r9
 800b44a:	4640      	mov	r0, r8
 800b44c:	47d0      	blx	sl
 800b44e:	3001      	adds	r0, #1
 800b450:	d0ad      	beq.n	800b3ae <_printf_i+0x15a>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	079b      	lsls	r3, r3, #30
 800b456:	d413      	bmi.n	800b480 <_printf_i+0x22c>
 800b458:	68e0      	ldr	r0, [r4, #12]
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	4298      	cmp	r0, r3
 800b45e:	bfb8      	it	lt
 800b460:	4618      	movlt	r0, r3
 800b462:	e7a6      	b.n	800b3b2 <_printf_i+0x15e>
 800b464:	2301      	movs	r3, #1
 800b466:	4632      	mov	r2, r6
 800b468:	4649      	mov	r1, r9
 800b46a:	4640      	mov	r0, r8
 800b46c:	47d0      	blx	sl
 800b46e:	3001      	adds	r0, #1
 800b470:	d09d      	beq.n	800b3ae <_printf_i+0x15a>
 800b472:	3501      	adds	r5, #1
 800b474:	68e3      	ldr	r3, [r4, #12]
 800b476:	9903      	ldr	r1, [sp, #12]
 800b478:	1a5b      	subs	r3, r3, r1
 800b47a:	42ab      	cmp	r3, r5
 800b47c:	dcf2      	bgt.n	800b464 <_printf_i+0x210>
 800b47e:	e7eb      	b.n	800b458 <_printf_i+0x204>
 800b480:	2500      	movs	r5, #0
 800b482:	f104 0619 	add.w	r6, r4, #25
 800b486:	e7f5      	b.n	800b474 <_printf_i+0x220>
 800b488:	0800d496 	.word	0x0800d496
 800b48c:	0800d4a7 	.word	0x0800d4a7

0800b490 <std>:
 800b490:	2300      	movs	r3, #0
 800b492:	b510      	push	{r4, lr}
 800b494:	4604      	mov	r4, r0
 800b496:	e9c0 3300 	strd	r3, r3, [r0]
 800b49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b49e:	6083      	str	r3, [r0, #8]
 800b4a0:	8181      	strh	r1, [r0, #12]
 800b4a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4a4:	81c2      	strh	r2, [r0, #14]
 800b4a6:	6183      	str	r3, [r0, #24]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	305c      	adds	r0, #92	@ 0x5c
 800b4ae:	f000 f906 	bl	800b6be <memset>
 800b4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e8 <std+0x58>)
 800b4b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ec <std+0x5c>)
 800b4b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <std+0x60>)
 800b4bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4be:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f4 <std+0x64>)
 800b4c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f8 <std+0x68>)
 800b4c4:	6224      	str	r4, [r4, #32]
 800b4c6:	429c      	cmp	r4, r3
 800b4c8:	d006      	beq.n	800b4d8 <std+0x48>
 800b4ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4ce:	4294      	cmp	r4, r2
 800b4d0:	d002      	beq.n	800b4d8 <std+0x48>
 800b4d2:	33d0      	adds	r3, #208	@ 0xd0
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d105      	bne.n	800b4e4 <std+0x54>
 800b4d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e0:	f000 b97a 	b.w	800b7d8 <__retarget_lock_init_recursive>
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800b639 	.word	0x0800b639
 800b4ec:	0800b65b 	.word	0x0800b65b
 800b4f0:	0800b693 	.word	0x0800b693
 800b4f4:	0800b6b7 	.word	0x0800b6b7
 800b4f8:	20001fc0 	.word	0x20001fc0

0800b4fc <stdio_exit_handler>:
 800b4fc:	4a02      	ldr	r2, [pc, #8]	@ (800b508 <stdio_exit_handler+0xc>)
 800b4fe:	4903      	ldr	r1, [pc, #12]	@ (800b50c <stdio_exit_handler+0x10>)
 800b500:	4803      	ldr	r0, [pc, #12]	@ (800b510 <stdio_exit_handler+0x14>)
 800b502:	f000 b87b 	b.w	800b5fc <_fwalk_sglue>
 800b506:	bf00      	nop
 800b508:	200000fc 	.word	0x200000fc
 800b50c:	0800cfb5 	.word	0x0800cfb5
 800b510:	2000010c 	.word	0x2000010c

0800b514 <cleanup_stdio>:
 800b514:	6841      	ldr	r1, [r0, #4]
 800b516:	4b0c      	ldr	r3, [pc, #48]	@ (800b548 <cleanup_stdio+0x34>)
 800b518:	4299      	cmp	r1, r3
 800b51a:	b510      	push	{r4, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	d001      	beq.n	800b524 <cleanup_stdio+0x10>
 800b520:	f001 fd48 	bl	800cfb4 <_fflush_r>
 800b524:	68a1      	ldr	r1, [r4, #8]
 800b526:	4b09      	ldr	r3, [pc, #36]	@ (800b54c <cleanup_stdio+0x38>)
 800b528:	4299      	cmp	r1, r3
 800b52a:	d002      	beq.n	800b532 <cleanup_stdio+0x1e>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f001 fd41 	bl	800cfb4 <_fflush_r>
 800b532:	68e1      	ldr	r1, [r4, #12]
 800b534:	4b06      	ldr	r3, [pc, #24]	@ (800b550 <cleanup_stdio+0x3c>)
 800b536:	4299      	cmp	r1, r3
 800b538:	d004      	beq.n	800b544 <cleanup_stdio+0x30>
 800b53a:	4620      	mov	r0, r4
 800b53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b540:	f001 bd38 	b.w	800cfb4 <_fflush_r>
 800b544:	bd10      	pop	{r4, pc}
 800b546:	bf00      	nop
 800b548:	20001fc0 	.word	0x20001fc0
 800b54c:	20002028 	.word	0x20002028
 800b550:	20002090 	.word	0x20002090

0800b554 <global_stdio_init.part.0>:
 800b554:	b510      	push	{r4, lr}
 800b556:	4b0b      	ldr	r3, [pc, #44]	@ (800b584 <global_stdio_init.part.0+0x30>)
 800b558:	4c0b      	ldr	r4, [pc, #44]	@ (800b588 <global_stdio_init.part.0+0x34>)
 800b55a:	4a0c      	ldr	r2, [pc, #48]	@ (800b58c <global_stdio_init.part.0+0x38>)
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	4620      	mov	r0, r4
 800b560:	2200      	movs	r2, #0
 800b562:	2104      	movs	r1, #4
 800b564:	f7ff ff94 	bl	800b490 <std>
 800b568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b56c:	2201      	movs	r2, #1
 800b56e:	2109      	movs	r1, #9
 800b570:	f7ff ff8e 	bl	800b490 <std>
 800b574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b578:	2202      	movs	r2, #2
 800b57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b57e:	2112      	movs	r1, #18
 800b580:	f7ff bf86 	b.w	800b490 <std>
 800b584:	200020f8 	.word	0x200020f8
 800b588:	20001fc0 	.word	0x20001fc0
 800b58c:	0800b4fd 	.word	0x0800b4fd

0800b590 <__sfp_lock_acquire>:
 800b590:	4801      	ldr	r0, [pc, #4]	@ (800b598 <__sfp_lock_acquire+0x8>)
 800b592:	f000 b922 	b.w	800b7da <__retarget_lock_acquire_recursive>
 800b596:	bf00      	nop
 800b598:	20002101 	.word	0x20002101

0800b59c <__sfp_lock_release>:
 800b59c:	4801      	ldr	r0, [pc, #4]	@ (800b5a4 <__sfp_lock_release+0x8>)
 800b59e:	f000 b91d 	b.w	800b7dc <__retarget_lock_release_recursive>
 800b5a2:	bf00      	nop
 800b5a4:	20002101 	.word	0x20002101

0800b5a8 <__sinit>:
 800b5a8:	b510      	push	{r4, lr}
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	f7ff fff0 	bl	800b590 <__sfp_lock_acquire>
 800b5b0:	6a23      	ldr	r3, [r4, #32]
 800b5b2:	b11b      	cbz	r3, 800b5bc <__sinit+0x14>
 800b5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b8:	f7ff bff0 	b.w	800b59c <__sfp_lock_release>
 800b5bc:	4b04      	ldr	r3, [pc, #16]	@ (800b5d0 <__sinit+0x28>)
 800b5be:	6223      	str	r3, [r4, #32]
 800b5c0:	4b04      	ldr	r3, [pc, #16]	@ (800b5d4 <__sinit+0x2c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1f5      	bne.n	800b5b4 <__sinit+0xc>
 800b5c8:	f7ff ffc4 	bl	800b554 <global_stdio_init.part.0>
 800b5cc:	e7f2      	b.n	800b5b4 <__sinit+0xc>
 800b5ce:	bf00      	nop
 800b5d0:	0800b515 	.word	0x0800b515
 800b5d4:	200020f8 	.word	0x200020f8

0800b5d8 <fiprintf>:
 800b5d8:	b40e      	push	{r1, r2, r3}
 800b5da:	b503      	push	{r0, r1, lr}
 800b5dc:	4601      	mov	r1, r0
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	4805      	ldr	r0, [pc, #20]	@ (800b5f8 <fiprintf+0x20>)
 800b5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e6:	6800      	ldr	r0, [r0, #0]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	f001 fb47 	bl	800cc7c <_vfiprintf_r>
 800b5ee:	b002      	add	sp, #8
 800b5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f4:	b003      	add	sp, #12
 800b5f6:	4770      	bx	lr
 800b5f8:	20000108 	.word	0x20000108

0800b5fc <_fwalk_sglue>:
 800b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b600:	4607      	mov	r7, r0
 800b602:	4688      	mov	r8, r1
 800b604:	4614      	mov	r4, r2
 800b606:	2600      	movs	r6, #0
 800b608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b60c:	f1b9 0901 	subs.w	r9, r9, #1
 800b610:	d505      	bpl.n	800b61e <_fwalk_sglue+0x22>
 800b612:	6824      	ldr	r4, [r4, #0]
 800b614:	2c00      	cmp	r4, #0
 800b616:	d1f7      	bne.n	800b608 <_fwalk_sglue+0xc>
 800b618:	4630      	mov	r0, r6
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d907      	bls.n	800b634 <_fwalk_sglue+0x38>
 800b624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b628:	3301      	adds	r3, #1
 800b62a:	d003      	beq.n	800b634 <_fwalk_sglue+0x38>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4638      	mov	r0, r7
 800b630:	47c0      	blx	r8
 800b632:	4306      	orrs	r6, r0
 800b634:	3568      	adds	r5, #104	@ 0x68
 800b636:	e7e9      	b.n	800b60c <_fwalk_sglue+0x10>

0800b638 <__sread>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	f000 f86c 	bl	800b71c <_read_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	bfab      	itete	ge
 800b648:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b64a:	89a3      	ldrhlt	r3, [r4, #12]
 800b64c:	181b      	addge	r3, r3, r0
 800b64e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b652:	bfac      	ite	ge
 800b654:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b656:	81a3      	strhlt	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__swrite>:
 800b65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	461f      	mov	r7, r3
 800b660:	898b      	ldrh	r3, [r1, #12]
 800b662:	05db      	lsls	r3, r3, #23
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	4616      	mov	r6, r2
 800b66a:	d505      	bpl.n	800b678 <__swrite+0x1e>
 800b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b670:	2302      	movs	r3, #2
 800b672:	2200      	movs	r2, #0
 800b674:	f000 f840 	bl	800b6f8 <_lseek_r>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b67e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	4632      	mov	r2, r6
 800b686:	463b      	mov	r3, r7
 800b688:	4628      	mov	r0, r5
 800b68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	f000 b867 	b.w	800b760 <_write_r>

0800b692 <__sseek>:
 800b692:	b510      	push	{r4, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69a:	f000 f82d 	bl	800b6f8 <_lseek_r>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	bf15      	itete	ne
 800b6a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b6a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b6aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b6ae:	81a3      	strheq	r3, [r4, #12]
 800b6b0:	bf18      	it	ne
 800b6b2:	81a3      	strhne	r3, [r4, #12]
 800b6b4:	bd10      	pop	{r4, pc}

0800b6b6 <__sclose>:
 800b6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ba:	f000 b80d 	b.w	800b6d8 <_close_r>

0800b6be <memset>:
 800b6be:	4402      	add	r2, r0
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d100      	bne.n	800b6c8 <memset+0xa>
 800b6c6:	4770      	bx	lr
 800b6c8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6cc:	e7f9      	b.n	800b6c2 <memset+0x4>
	...

0800b6d0 <_localeconv_r>:
 800b6d0:	4800      	ldr	r0, [pc, #0]	@ (800b6d4 <_localeconv_r+0x4>)
 800b6d2:	4770      	bx	lr
 800b6d4:	20000248 	.word	0x20000248

0800b6d8 <_close_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d06      	ldr	r5, [pc, #24]	@ (800b6f4 <_close_r+0x1c>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	602b      	str	r3, [r5, #0]
 800b6e4:	f7f7 fa8e 	bl	8002c04 <_close>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_close_r+0x1a>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_close_r+0x1a>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	200020fc 	.word	0x200020fc

0800b6f8 <_lseek_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4d07      	ldr	r5, [pc, #28]	@ (800b718 <_lseek_r+0x20>)
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	2200      	movs	r2, #0
 800b704:	602a      	str	r2, [r5, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	f7f7 faa3 	bl	8002c52 <_lseek>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d102      	bne.n	800b716 <_lseek_r+0x1e>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	b103      	cbz	r3, 800b716 <_lseek_r+0x1e>
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	200020fc 	.word	0x200020fc

0800b71c <_read_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	@ (800b73c <_read_r+0x20>)
 800b720:	4604      	mov	r4, r0
 800b722:	4608      	mov	r0, r1
 800b724:	4611      	mov	r1, r2
 800b726:	2200      	movs	r2, #0
 800b728:	602a      	str	r2, [r5, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f7 fa4d 	bl	8002bca <_read>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_read_r+0x1e>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_read_r+0x1e>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	200020fc 	.word	0x200020fc

0800b740 <_sbrk_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	@ (800b75c <_sbrk_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f7 fa8e 	bl	8002c6c <_sbrk>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_sbrk_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_sbrk_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	200020fc 	.word	0x200020fc

0800b760 <_write_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_write_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f6 fc72 	bl	8002058 <_write>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_write_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_write_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	200020fc 	.word	0x200020fc

0800b784 <__errno>:
 800b784:	4b01      	ldr	r3, [pc, #4]	@ (800b78c <__errno+0x8>)
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	20000108 	.word	0x20000108

0800b790 <__libc_init_array>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	4d0d      	ldr	r5, [pc, #52]	@ (800b7c8 <__libc_init_array+0x38>)
 800b794:	4c0d      	ldr	r4, [pc, #52]	@ (800b7cc <__libc_init_array+0x3c>)
 800b796:	1b64      	subs	r4, r4, r5
 800b798:	10a4      	asrs	r4, r4, #2
 800b79a:	2600      	movs	r6, #0
 800b79c:	42a6      	cmp	r6, r4
 800b79e:	d109      	bne.n	800b7b4 <__libc_init_array+0x24>
 800b7a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b7d0 <__libc_init_array+0x40>)
 800b7a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b7d4 <__libc_init_array+0x44>)
 800b7a4:	f001 fdcc 	bl	800d340 <_init>
 800b7a8:	1b64      	subs	r4, r4, r5
 800b7aa:	10a4      	asrs	r4, r4, #2
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	42a6      	cmp	r6, r4
 800b7b0:	d105      	bne.n	800b7be <__libc_init_array+0x2e>
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b8:	4798      	blx	r3
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	e7ee      	b.n	800b79c <__libc_init_array+0xc>
 800b7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7c2:	4798      	blx	r3
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	e7f2      	b.n	800b7ae <__libc_init_array+0x1e>
 800b7c8:	0800d7c4 	.word	0x0800d7c4
 800b7cc:	0800d7c4 	.word	0x0800d7c4
 800b7d0:	0800d7c4 	.word	0x0800d7c4
 800b7d4:	0800d7c8 	.word	0x0800d7c8

0800b7d8 <__retarget_lock_init_recursive>:
 800b7d8:	4770      	bx	lr

0800b7da <__retarget_lock_acquire_recursive>:
 800b7da:	4770      	bx	lr

0800b7dc <__retarget_lock_release_recursive>:
 800b7dc:	4770      	bx	lr

0800b7de <abort>:
 800b7de:	b508      	push	{r3, lr}
 800b7e0:	2006      	movs	r0, #6
 800b7e2:	f001 fccb 	bl	800d17c <raise>
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	f7f7 f9e4 	bl	8002bb4 <_exit>

0800b7ec <quorem>:
 800b7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	6903      	ldr	r3, [r0, #16]
 800b7f2:	690c      	ldr	r4, [r1, #16]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	db7e      	blt.n	800b8f8 <quorem+0x10c>
 800b7fa:	3c01      	subs	r4, #1
 800b7fc:	f101 0814 	add.w	r8, r1, #20
 800b800:	00a3      	lsls	r3, r4, #2
 800b802:	f100 0514 	add.w	r5, r0, #20
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b816:	3301      	adds	r3, #1
 800b818:	429a      	cmp	r2, r3
 800b81a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b81e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b822:	d32e      	bcc.n	800b882 <quorem+0x96>
 800b824:	f04f 0a00 	mov.w	sl, #0
 800b828:	46c4      	mov	ip, r8
 800b82a:	46ae      	mov	lr, r5
 800b82c:	46d3      	mov	fp, sl
 800b82e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b832:	b298      	uxth	r0, r3
 800b834:	fb06 a000 	mla	r0, r6, r0, sl
 800b838:	0c02      	lsrs	r2, r0, #16
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	fb06 2303 	mla	r3, r6, r3, r2
 800b840:	f8de 2000 	ldr.w	r2, [lr]
 800b844:	b280      	uxth	r0, r0
 800b846:	b292      	uxth	r2, r2
 800b848:	1a12      	subs	r2, r2, r0
 800b84a:	445a      	add	r2, fp
 800b84c:	f8de 0000 	ldr.w	r0, [lr]
 800b850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b854:	b29b      	uxth	r3, r3
 800b856:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b85a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b85e:	b292      	uxth	r2, r2
 800b860:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b864:	45e1      	cmp	r9, ip
 800b866:	f84e 2b04 	str.w	r2, [lr], #4
 800b86a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b86e:	d2de      	bcs.n	800b82e <quorem+0x42>
 800b870:	9b00      	ldr	r3, [sp, #0]
 800b872:	58eb      	ldr	r3, [r5, r3]
 800b874:	b92b      	cbnz	r3, 800b882 <quorem+0x96>
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	3b04      	subs	r3, #4
 800b87a:	429d      	cmp	r5, r3
 800b87c:	461a      	mov	r2, r3
 800b87e:	d32f      	bcc.n	800b8e0 <quorem+0xf4>
 800b880:	613c      	str	r4, [r7, #16]
 800b882:	4638      	mov	r0, r7
 800b884:	f001 f8c8 	bl	800ca18 <__mcmp>
 800b888:	2800      	cmp	r0, #0
 800b88a:	db25      	blt.n	800b8d8 <quorem+0xec>
 800b88c:	4629      	mov	r1, r5
 800b88e:	2000      	movs	r0, #0
 800b890:	f858 2b04 	ldr.w	r2, [r8], #4
 800b894:	f8d1 c000 	ldr.w	ip, [r1]
 800b898:	fa1f fe82 	uxth.w	lr, r2
 800b89c:	fa1f f38c 	uxth.w	r3, ip
 800b8a0:	eba3 030e 	sub.w	r3, r3, lr
 800b8a4:	4403      	add	r3, r0
 800b8a6:	0c12      	lsrs	r2, r2, #16
 800b8a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b8ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8b6:	45c1      	cmp	r9, r8
 800b8b8:	f841 3b04 	str.w	r3, [r1], #4
 800b8bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8c0:	d2e6      	bcs.n	800b890 <quorem+0xa4>
 800b8c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ca:	b922      	cbnz	r2, 800b8d6 <quorem+0xea>
 800b8cc:	3b04      	subs	r3, #4
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	d30b      	bcc.n	800b8ec <quorem+0x100>
 800b8d4:	613c      	str	r4, [r7, #16]
 800b8d6:	3601      	adds	r6, #1
 800b8d8:	4630      	mov	r0, r6
 800b8da:	b003      	add	sp, #12
 800b8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	3b04      	subs	r3, #4
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1cb      	bne.n	800b880 <quorem+0x94>
 800b8e8:	3c01      	subs	r4, #1
 800b8ea:	e7c6      	b.n	800b87a <quorem+0x8e>
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	3b04      	subs	r3, #4
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	d1ef      	bne.n	800b8d4 <quorem+0xe8>
 800b8f4:	3c01      	subs	r4, #1
 800b8f6:	e7ea      	b.n	800b8ce <quorem+0xe2>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7ee      	b.n	800b8da <quorem+0xee>
 800b8fc:	0000      	movs	r0, r0
	...

0800b900 <_dtoa_r>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	69c7      	ldr	r7, [r0, #28]
 800b906:	b097      	sub	sp, #92	@ 0x5c
 800b908:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b90c:	ec55 4b10 	vmov	r4, r5, d0
 800b910:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b912:	9107      	str	r1, [sp, #28]
 800b914:	4681      	mov	r9, r0
 800b916:	920c      	str	r2, [sp, #48]	@ 0x30
 800b918:	9311      	str	r3, [sp, #68]	@ 0x44
 800b91a:	b97f      	cbnz	r7, 800b93c <_dtoa_r+0x3c>
 800b91c:	2010      	movs	r0, #16
 800b91e:	f7ff f8ab 	bl	800aa78 <malloc>
 800b922:	4602      	mov	r2, r0
 800b924:	f8c9 001c 	str.w	r0, [r9, #28]
 800b928:	b920      	cbnz	r0, 800b934 <_dtoa_r+0x34>
 800b92a:	4ba9      	ldr	r3, [pc, #676]	@ (800bbd0 <_dtoa_r+0x2d0>)
 800b92c:	21ef      	movs	r1, #239	@ 0xef
 800b92e:	48a9      	ldr	r0, [pc, #676]	@ (800bbd4 <_dtoa_r+0x2d4>)
 800b930:	f7ff f884 	bl	800aa3c <__assert_func>
 800b934:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b938:	6007      	str	r7, [r0, #0]
 800b93a:	60c7      	str	r7, [r0, #12]
 800b93c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	b159      	cbz	r1, 800b95c <_dtoa_r+0x5c>
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	604a      	str	r2, [r1, #4]
 800b948:	2301      	movs	r3, #1
 800b94a:	4093      	lsls	r3, r2
 800b94c:	608b      	str	r3, [r1, #8]
 800b94e:	4648      	mov	r0, r9
 800b950:	f000 fe30 	bl	800c5b4 <_Bfree>
 800b954:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	1e2b      	subs	r3, r5, #0
 800b95e:	bfb9      	ittee	lt
 800b960:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b964:	9305      	strlt	r3, [sp, #20]
 800b966:	2300      	movge	r3, #0
 800b968:	6033      	strge	r3, [r6, #0]
 800b96a:	9f05      	ldr	r7, [sp, #20]
 800b96c:	4b9a      	ldr	r3, [pc, #616]	@ (800bbd8 <_dtoa_r+0x2d8>)
 800b96e:	bfbc      	itt	lt
 800b970:	2201      	movlt	r2, #1
 800b972:	6032      	strlt	r2, [r6, #0]
 800b974:	43bb      	bics	r3, r7
 800b976:	d112      	bne.n	800b99e <_dtoa_r+0x9e>
 800b978:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b97a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b97e:	6013      	str	r3, [r2, #0]
 800b980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b984:	4323      	orrs	r3, r4
 800b986:	f000 855a 	beq.w	800c43e <_dtoa_r+0xb3e>
 800b98a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b98c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bbec <_dtoa_r+0x2ec>
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 855c 	beq.w	800c44e <_dtoa_r+0xb4e>
 800b996:	f10a 0303 	add.w	r3, sl, #3
 800b99a:	f000 bd56 	b.w	800c44a <_dtoa_r+0xb4a>
 800b99e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	ec51 0b17 	vmov	r0, r1, d7
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b9ae:	f7f5 f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	b158      	cbz	r0, 800b9ce <_dtoa_r+0xce>
 800b9b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9be:	b113      	cbz	r3, 800b9c6 <_dtoa_r+0xc6>
 800b9c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b9c2:	4b86      	ldr	r3, [pc, #536]	@ (800bbdc <_dtoa_r+0x2dc>)
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bbf0 <_dtoa_r+0x2f0>
 800b9ca:	f000 bd40 	b.w	800c44e <_dtoa_r+0xb4e>
 800b9ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b9d2:	aa14      	add	r2, sp, #80	@ 0x50
 800b9d4:	a915      	add	r1, sp, #84	@ 0x54
 800b9d6:	4648      	mov	r0, r9
 800b9d8:	f001 f8ce 	bl	800cb78 <__d2b>
 800b9dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9e0:	9002      	str	r0, [sp, #8]
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d078      	beq.n	800bad8 <_dtoa_r+0x1d8>
 800b9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b9ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba00:	4619      	mov	r1, r3
 800ba02:	2200      	movs	r2, #0
 800ba04:	4b76      	ldr	r3, [pc, #472]	@ (800bbe0 <_dtoa_r+0x2e0>)
 800ba06:	f7f4 fc3f 	bl	8000288 <__aeabi_dsub>
 800ba0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bbb8 <_dtoa_r+0x2b8>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ba14:	a36a      	add	r3, pc, #424	@ (adr r3, 800bbc0 <_dtoa_r+0x2c0>)
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	f7f4 fc37 	bl	800028c <__adddf3>
 800ba1e:	4604      	mov	r4, r0
 800ba20:	4630      	mov	r0, r6
 800ba22:	460d      	mov	r5, r1
 800ba24:	f7f4 fd7e 	bl	8000524 <__aeabi_i2d>
 800ba28:	a367      	add	r3, pc, #412	@ (adr r3, 800bbc8 <_dtoa_r+0x2c8>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f4 fde3 	bl	80005f8 <__aeabi_dmul>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7f4 fc27 	bl	800028c <__adddf3>
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460d      	mov	r5, r1
 800ba42:	f7f5 f889 	bl	8000b58 <__aeabi_d2iz>
 800ba46:	2200      	movs	r2, #0
 800ba48:	4607      	mov	r7, r0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f5 f844 	bl	8000adc <__aeabi_dcmplt>
 800ba54:	b140      	cbz	r0, 800ba68 <_dtoa_r+0x168>
 800ba56:	4638      	mov	r0, r7
 800ba58:	f7f4 fd64 	bl	8000524 <__aeabi_i2d>
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	462b      	mov	r3, r5
 800ba60:	f7f5 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba64:	b900      	cbnz	r0, 800ba68 <_dtoa_r+0x168>
 800ba66:	3f01      	subs	r7, #1
 800ba68:	2f16      	cmp	r7, #22
 800ba6a:	d852      	bhi.n	800bb12 <_dtoa_r+0x212>
 800ba6c:	4b5d      	ldr	r3, [pc, #372]	@ (800bbe4 <_dtoa_r+0x2e4>)
 800ba6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba7a:	f7f5 f82f 	bl	8000adc <__aeabi_dcmplt>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d049      	beq.n	800bb16 <_dtoa_r+0x216>
 800ba82:	3f01      	subs	r7, #1
 800ba84:	2300      	movs	r3, #0
 800ba86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba8a:	1b9b      	subs	r3, r3, r6
 800ba8c:	1e5a      	subs	r2, r3, #1
 800ba8e:	bf45      	ittet	mi
 800ba90:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba94:	9300      	strmi	r3, [sp, #0]
 800ba96:	2300      	movpl	r3, #0
 800ba98:	2300      	movmi	r3, #0
 800ba9a:	9206      	str	r2, [sp, #24]
 800ba9c:	bf54      	ite	pl
 800ba9e:	9300      	strpl	r3, [sp, #0]
 800baa0:	9306      	strmi	r3, [sp, #24]
 800baa2:	2f00      	cmp	r7, #0
 800baa4:	db39      	blt.n	800bb1a <_dtoa_r+0x21a>
 800baa6:	9b06      	ldr	r3, [sp, #24]
 800baa8:	970d      	str	r7, [sp, #52]	@ 0x34
 800baaa:	443b      	add	r3, r7
 800baac:	9306      	str	r3, [sp, #24]
 800baae:	2300      	movs	r3, #0
 800bab0:	9308      	str	r3, [sp, #32]
 800bab2:	9b07      	ldr	r3, [sp, #28]
 800bab4:	2b09      	cmp	r3, #9
 800bab6:	d863      	bhi.n	800bb80 <_dtoa_r+0x280>
 800bab8:	2b05      	cmp	r3, #5
 800baba:	bfc4      	itt	gt
 800babc:	3b04      	subgt	r3, #4
 800babe:	9307      	strgt	r3, [sp, #28]
 800bac0:	9b07      	ldr	r3, [sp, #28]
 800bac2:	f1a3 0302 	sub.w	r3, r3, #2
 800bac6:	bfcc      	ite	gt
 800bac8:	2400      	movgt	r4, #0
 800baca:	2401      	movle	r4, #1
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d863      	bhi.n	800bb98 <_dtoa_r+0x298>
 800bad0:	e8df f003 	tbb	[pc, r3]
 800bad4:	2b375452 	.word	0x2b375452
 800bad8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800badc:	441e      	add	r6, r3
 800bade:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	bfc1      	itttt	gt
 800bae6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800baea:	409f      	lslgt	r7, r3
 800baec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800baf0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800baf4:	bfd6      	itet	le
 800baf6:	f1c3 0320 	rsble	r3, r3, #32
 800bafa:	ea47 0003 	orrgt.w	r0, r7, r3
 800bafe:	fa04 f003 	lslle.w	r0, r4, r3
 800bb02:	f7f4 fcff 	bl	8000504 <__aeabi_ui2d>
 800bb06:	2201      	movs	r2, #1
 800bb08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb0c:	3e01      	subs	r6, #1
 800bb0e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bb10:	e776      	b.n	800ba00 <_dtoa_r+0x100>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e7b7      	b.n	800ba86 <_dtoa_r+0x186>
 800bb16:	9010      	str	r0, [sp, #64]	@ 0x40
 800bb18:	e7b6      	b.n	800ba88 <_dtoa_r+0x188>
 800bb1a:	9b00      	ldr	r3, [sp, #0]
 800bb1c:	1bdb      	subs	r3, r3, r7
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	427b      	negs	r3, r7
 800bb22:	9308      	str	r3, [sp, #32]
 800bb24:	2300      	movs	r3, #0
 800bb26:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb28:	e7c3      	b.n	800bab2 <_dtoa_r+0x1b2>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb30:	eb07 0b03 	add.w	fp, r7, r3
 800bb34:	f10b 0301 	add.w	r3, fp, #1
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	9303      	str	r3, [sp, #12]
 800bb3c:	bfb8      	it	lt
 800bb3e:	2301      	movlt	r3, #1
 800bb40:	e006      	b.n	800bb50 <_dtoa_r+0x250>
 800bb42:	2301      	movs	r3, #1
 800bb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	dd28      	ble.n	800bb9e <_dtoa_r+0x29e>
 800bb4c:	469b      	mov	fp, r3
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bb54:	2100      	movs	r1, #0
 800bb56:	2204      	movs	r2, #4
 800bb58:	f102 0514 	add.w	r5, r2, #20
 800bb5c:	429d      	cmp	r5, r3
 800bb5e:	d926      	bls.n	800bbae <_dtoa_r+0x2ae>
 800bb60:	6041      	str	r1, [r0, #4]
 800bb62:	4648      	mov	r0, r9
 800bb64:	f000 fce6 	bl	800c534 <_Balloc>
 800bb68:	4682      	mov	sl, r0
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d142      	bne.n	800bbf4 <_dtoa_r+0x2f4>
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe8 <_dtoa_r+0x2e8>)
 800bb70:	4602      	mov	r2, r0
 800bb72:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb76:	e6da      	b.n	800b92e <_dtoa_r+0x2e>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e7e3      	b.n	800bb44 <_dtoa_r+0x244>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e7d5      	b.n	800bb2c <_dtoa_r+0x22c>
 800bb80:	2401      	movs	r4, #1
 800bb82:	2300      	movs	r3, #0
 800bb84:	9307      	str	r3, [sp, #28]
 800bb86:	9409      	str	r4, [sp, #36]	@ 0x24
 800bb88:	f04f 3bff 	mov.w	fp, #4294967295
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb92:	2312      	movs	r3, #18
 800bb94:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb96:	e7db      	b.n	800bb50 <_dtoa_r+0x250>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb9c:	e7f4      	b.n	800bb88 <_dtoa_r+0x288>
 800bb9e:	f04f 0b01 	mov.w	fp, #1
 800bba2:	f8cd b00c 	str.w	fp, [sp, #12]
 800bba6:	465b      	mov	r3, fp
 800bba8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bbac:	e7d0      	b.n	800bb50 <_dtoa_r+0x250>
 800bbae:	3101      	adds	r1, #1
 800bbb0:	0052      	lsls	r2, r2, #1
 800bbb2:	e7d1      	b.n	800bb58 <_dtoa_r+0x258>
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	636f4361 	.word	0x636f4361
 800bbbc:	3fd287a7 	.word	0x3fd287a7
 800bbc0:	8b60c8b3 	.word	0x8b60c8b3
 800bbc4:	3fc68a28 	.word	0x3fc68a28
 800bbc8:	509f79fb 	.word	0x509f79fb
 800bbcc:	3fd34413 	.word	0x3fd34413
 800bbd0:	0800d4c5 	.word	0x0800d4c5
 800bbd4:	0800d4dc 	.word	0x0800d4dc
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	0800d495 	.word	0x0800d495
 800bbe0:	3ff80000 	.word	0x3ff80000
 800bbe4:	0800d5f0 	.word	0x0800d5f0
 800bbe8:	0800d534 	.word	0x0800d534
 800bbec:	0800d4c1 	.word	0x0800d4c1
 800bbf0:	0800d494 	.word	0x0800d494
 800bbf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbf8:	6018      	str	r0, [r3, #0]
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	2b0e      	cmp	r3, #14
 800bbfe:	f200 80a1 	bhi.w	800bd44 <_dtoa_r+0x444>
 800bc02:	2c00      	cmp	r4, #0
 800bc04:	f000 809e 	beq.w	800bd44 <_dtoa_r+0x444>
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	dd33      	ble.n	800bc74 <_dtoa_r+0x374>
 800bc0c:	4b9c      	ldr	r3, [pc, #624]	@ (800be80 <_dtoa_r+0x580>)
 800bc0e:	f007 020f 	and.w	r2, r7, #15
 800bc12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc16:	ed93 7b00 	vldr	d7, [r3]
 800bc1a:	05f8      	lsls	r0, r7, #23
 800bc1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bc20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc24:	d516      	bpl.n	800bc54 <_dtoa_r+0x354>
 800bc26:	4b97      	ldr	r3, [pc, #604]	@ (800be84 <_dtoa_r+0x584>)
 800bc28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc30:	f7f4 fe0c 	bl	800084c <__aeabi_ddiv>
 800bc34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc38:	f004 040f 	and.w	r4, r4, #15
 800bc3c:	2603      	movs	r6, #3
 800bc3e:	4d91      	ldr	r5, [pc, #580]	@ (800be84 <_dtoa_r+0x584>)
 800bc40:	b954      	cbnz	r4, 800bc58 <_dtoa_r+0x358>
 800bc42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc4a:	f7f4 fdff 	bl	800084c <__aeabi_ddiv>
 800bc4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc52:	e028      	b.n	800bca6 <_dtoa_r+0x3a6>
 800bc54:	2602      	movs	r6, #2
 800bc56:	e7f2      	b.n	800bc3e <_dtoa_r+0x33e>
 800bc58:	07e1      	lsls	r1, r4, #31
 800bc5a:	d508      	bpl.n	800bc6e <_dtoa_r+0x36e>
 800bc5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc64:	f7f4 fcc8 	bl	80005f8 <__aeabi_dmul>
 800bc68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc6c:	3601      	adds	r6, #1
 800bc6e:	1064      	asrs	r4, r4, #1
 800bc70:	3508      	adds	r5, #8
 800bc72:	e7e5      	b.n	800bc40 <_dtoa_r+0x340>
 800bc74:	f000 80af 	beq.w	800bdd6 <_dtoa_r+0x4d6>
 800bc78:	427c      	negs	r4, r7
 800bc7a:	4b81      	ldr	r3, [pc, #516]	@ (800be80 <_dtoa_r+0x580>)
 800bc7c:	4d81      	ldr	r5, [pc, #516]	@ (800be84 <_dtoa_r+0x584>)
 800bc7e:	f004 020f 	and.w	r2, r4, #15
 800bc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc8e:	f7f4 fcb3 	bl	80005f8 <__aeabi_dmul>
 800bc92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc96:	1124      	asrs	r4, r4, #4
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2602      	movs	r6, #2
 800bc9c:	2c00      	cmp	r4, #0
 800bc9e:	f040 808f 	bne.w	800bdc0 <_dtoa_r+0x4c0>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1d3      	bne.n	800bc4e <_dtoa_r+0x34e>
 800bca6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bca8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8094 	beq.w	800bdda <_dtoa_r+0x4da>
 800bcb2:	4b75      	ldr	r3, [pc, #468]	@ (800be88 <_dtoa_r+0x588>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 ff0f 	bl	8000adc <__aeabi_dcmplt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f000 808b 	beq.w	800bdda <_dtoa_r+0x4da>
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 8087 	beq.w	800bdda <_dtoa_r+0x4da>
 800bccc:	f1bb 0f00 	cmp.w	fp, #0
 800bcd0:	dd34      	ble.n	800bd3c <_dtoa_r+0x43c>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4b6d      	ldr	r3, [pc, #436]	@ (800be8c <_dtoa_r+0x58c>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 fc8d 	bl	80005f8 <__aeabi_dmul>
 800bcde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bce2:	f107 38ff 	add.w	r8, r7, #4294967295
 800bce6:	3601      	adds	r6, #1
 800bce8:	465c      	mov	r4, fp
 800bcea:	4630      	mov	r0, r6
 800bcec:	f7f4 fc1a 	bl	8000524 <__aeabi_i2d>
 800bcf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcf4:	f7f4 fc80 	bl	80005f8 <__aeabi_dmul>
 800bcf8:	4b65      	ldr	r3, [pc, #404]	@ (800be90 <_dtoa_r+0x590>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fac6 	bl	800028c <__adddf3>
 800bd00:	4605      	mov	r5, r0
 800bd02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd06:	2c00      	cmp	r4, #0
 800bd08:	d16a      	bne.n	800bde0 <_dtoa_r+0x4e0>
 800bd0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0e:	4b61      	ldr	r3, [pc, #388]	@ (800be94 <_dtoa_r+0x594>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	f7f4 fab9 	bl	8000288 <__aeabi_dsub>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4633      	mov	r3, r6
 800bd22:	f7f4 fef9 	bl	8000b18 <__aeabi_dcmpgt>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f040 8298 	bne.w	800c25c <_dtoa_r+0x95c>
 800bd2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd30:	462a      	mov	r2, r5
 800bd32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd36:	f7f4 fed1 	bl	8000adc <__aeabi_dcmplt>
 800bd3a:	bb38      	cbnz	r0, 800bd8c <_dtoa_r+0x48c>
 800bd3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bd40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f2c0 8157 	blt.w	800bffa <_dtoa_r+0x6fa>
 800bd4c:	2f0e      	cmp	r7, #14
 800bd4e:	f300 8154 	bgt.w	800bffa <_dtoa_r+0x6fa>
 800bd52:	4b4b      	ldr	r3, [pc, #300]	@ (800be80 <_dtoa_r+0x580>)
 800bd54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd58:	ed93 7b00 	vldr	d7, [r3]
 800bd5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	ed8d 7b00 	vstr	d7, [sp]
 800bd64:	f280 80e5 	bge.w	800bf32 <_dtoa_r+0x632>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f300 80e1 	bgt.w	800bf32 <_dtoa_r+0x632>
 800bd70:	d10c      	bne.n	800bd8c <_dtoa_r+0x48c>
 800bd72:	4b48      	ldr	r3, [pc, #288]	@ (800be94 <_dtoa_r+0x594>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	ec51 0b17 	vmov	r0, r1, d7
 800bd7a:	f7f4 fc3d 	bl	80005f8 <__aeabi_dmul>
 800bd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd82:	f7f4 febf 	bl	8000b04 <__aeabi_dcmpge>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f000 8266 	beq.w	800c258 <_dtoa_r+0x958>
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	4625      	mov	r5, r4
 800bd90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd92:	4656      	mov	r6, sl
 800bd94:	ea6f 0803 	mvn.w	r8, r3
 800bd98:	2700      	movs	r7, #0
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4648      	mov	r0, r9
 800bd9e:	f000 fc09 	bl	800c5b4 <_Bfree>
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	f000 80bd 	beq.w	800bf22 <_dtoa_r+0x622>
 800bda8:	b12f      	cbz	r7, 800bdb6 <_dtoa_r+0x4b6>
 800bdaa:	42af      	cmp	r7, r5
 800bdac:	d003      	beq.n	800bdb6 <_dtoa_r+0x4b6>
 800bdae:	4639      	mov	r1, r7
 800bdb0:	4648      	mov	r0, r9
 800bdb2:	f000 fbff 	bl	800c5b4 <_Bfree>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4648      	mov	r0, r9
 800bdba:	f000 fbfb 	bl	800c5b4 <_Bfree>
 800bdbe:	e0b0      	b.n	800bf22 <_dtoa_r+0x622>
 800bdc0:	07e2      	lsls	r2, r4, #31
 800bdc2:	d505      	bpl.n	800bdd0 <_dtoa_r+0x4d0>
 800bdc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdc8:	f7f4 fc16 	bl	80005f8 <__aeabi_dmul>
 800bdcc:	3601      	adds	r6, #1
 800bdce:	2301      	movs	r3, #1
 800bdd0:	1064      	asrs	r4, r4, #1
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	e762      	b.n	800bc9c <_dtoa_r+0x39c>
 800bdd6:	2602      	movs	r6, #2
 800bdd8:	e765      	b.n	800bca6 <_dtoa_r+0x3a6>
 800bdda:	9c03      	ldr	r4, [sp, #12]
 800bddc:	46b8      	mov	r8, r7
 800bdde:	e784      	b.n	800bcea <_dtoa_r+0x3ea>
 800bde0:	4b27      	ldr	r3, [pc, #156]	@ (800be80 <_dtoa_r+0x580>)
 800bde2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bde4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bde8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdec:	4454      	add	r4, sl
 800bdee:	2900      	cmp	r1, #0
 800bdf0:	d054      	beq.n	800be9c <_dtoa_r+0x59c>
 800bdf2:	4929      	ldr	r1, [pc, #164]	@ (800be98 <_dtoa_r+0x598>)
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f7f4 fd29 	bl	800084c <__aeabi_ddiv>
 800bdfa:	4633      	mov	r3, r6
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	f7f4 fa43 	bl	8000288 <__aeabi_dsub>
 800be02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be06:	4656      	mov	r6, sl
 800be08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be0c:	f7f4 fea4 	bl	8000b58 <__aeabi_d2iz>
 800be10:	4605      	mov	r5, r0
 800be12:	f7f4 fb87 	bl	8000524 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be1e:	f7f4 fa33 	bl	8000288 <__aeabi_dsub>
 800be22:	3530      	adds	r5, #48	@ 0x30
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be2c:	f806 5b01 	strb.w	r5, [r6], #1
 800be30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be34:	f7f4 fe52 	bl	8000adc <__aeabi_dcmplt>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d172      	bne.n	800bf22 <_dtoa_r+0x622>
 800be3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be40:	4911      	ldr	r1, [pc, #68]	@ (800be88 <_dtoa_r+0x588>)
 800be42:	2000      	movs	r0, #0
 800be44:	f7f4 fa20 	bl	8000288 <__aeabi_dsub>
 800be48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be4c:	f7f4 fe46 	bl	8000adc <__aeabi_dcmplt>
 800be50:	2800      	cmp	r0, #0
 800be52:	f040 80b4 	bne.w	800bfbe <_dtoa_r+0x6be>
 800be56:	42a6      	cmp	r6, r4
 800be58:	f43f af70 	beq.w	800bd3c <_dtoa_r+0x43c>
 800be5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be60:	4b0a      	ldr	r3, [pc, #40]	@ (800be8c <_dtoa_r+0x58c>)
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	4b08      	ldr	r3, [pc, #32]	@ (800be8c <_dtoa_r+0x58c>)
 800be6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be6e:	2200      	movs	r2, #0
 800be70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be74:	f7f4 fbc0 	bl	80005f8 <__aeabi_dmul>
 800be78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be7c:	e7c4      	b.n	800be08 <_dtoa_r+0x508>
 800be7e:	bf00      	nop
 800be80:	0800d5f0 	.word	0x0800d5f0
 800be84:	0800d5c8 	.word	0x0800d5c8
 800be88:	3ff00000 	.word	0x3ff00000
 800be8c:	40240000 	.word	0x40240000
 800be90:	401c0000 	.word	0x401c0000
 800be94:	40140000 	.word	0x40140000
 800be98:	3fe00000 	.word	0x3fe00000
 800be9c:	4631      	mov	r1, r6
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7f4 fbaa 	bl	80005f8 <__aeabi_dmul>
 800bea4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bea8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800beaa:	4656      	mov	r6, sl
 800beac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beb0:	f7f4 fe52 	bl	8000b58 <__aeabi_d2iz>
 800beb4:	4605      	mov	r5, r0
 800beb6:	f7f4 fb35 	bl	8000524 <__aeabi_i2d>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec2:	f7f4 f9e1 	bl	8000288 <__aeabi_dsub>
 800bec6:	3530      	adds	r5, #48	@ 0x30
 800bec8:	f806 5b01 	strb.w	r5, [r6], #1
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	42a6      	cmp	r6, r4
 800bed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bed6:	f04f 0200 	mov.w	r2, #0
 800beda:	d124      	bne.n	800bf26 <_dtoa_r+0x626>
 800bedc:	4baf      	ldr	r3, [pc, #700]	@ (800c19c <_dtoa_r+0x89c>)
 800bede:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bee2:	f7f4 f9d3 	bl	800028c <__adddf3>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beee:	f7f4 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d163      	bne.n	800bfbe <_dtoa_r+0x6be>
 800bef6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800befa:	49a8      	ldr	r1, [pc, #672]	@ (800c19c <_dtoa_r+0x89c>)
 800befc:	2000      	movs	r0, #0
 800befe:	f7f4 f9c3 	bl	8000288 <__aeabi_dsub>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf0a:	f7f4 fde7 	bl	8000adc <__aeabi_dcmplt>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	f43f af14 	beq.w	800bd3c <_dtoa_r+0x43c>
 800bf14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bf16:	1e73      	subs	r3, r6, #1
 800bf18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf1e:	2b30      	cmp	r3, #48	@ 0x30
 800bf20:	d0f8      	beq.n	800bf14 <_dtoa_r+0x614>
 800bf22:	4647      	mov	r7, r8
 800bf24:	e03b      	b.n	800bf9e <_dtoa_r+0x69e>
 800bf26:	4b9e      	ldr	r3, [pc, #632]	@ (800c1a0 <_dtoa_r+0x8a0>)
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf30:	e7bc      	b.n	800beac <_dtoa_r+0x5ac>
 800bf32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bf36:	4656      	mov	r6, sl
 800bf38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fc84 	bl	800084c <__aeabi_ddiv>
 800bf44:	f7f4 fe08 	bl	8000b58 <__aeabi_d2iz>
 800bf48:	4680      	mov	r8, r0
 800bf4a:	f7f4 faeb 	bl	8000524 <__aeabi_i2d>
 800bf4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf52:	f7f4 fb51 	bl	80005f8 <__aeabi_dmul>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf62:	f7f4 f991 	bl	8000288 <__aeabi_dsub>
 800bf66:	f806 4b01 	strb.w	r4, [r6], #1
 800bf6a:	9d03      	ldr	r5, [sp, #12]
 800bf6c:	eba6 040a 	sub.w	r4, r6, sl
 800bf70:	42a5      	cmp	r5, r4
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	d133      	bne.n	800bfe0 <_dtoa_r+0x6e0>
 800bf78:	f7f4 f988 	bl	800028c <__adddf3>
 800bf7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	f7f4 fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 800bf88:	b9c0      	cbnz	r0, 800bfbc <_dtoa_r+0x6bc>
 800bf8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4629      	mov	r1, r5
 800bf92:	f7f4 fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf96:	b110      	cbz	r0, 800bf9e <_dtoa_r+0x69e>
 800bf98:	f018 0f01 	tst.w	r8, #1
 800bf9c:	d10e      	bne.n	800bfbc <_dtoa_r+0x6bc>
 800bf9e:	9902      	ldr	r1, [sp, #8]
 800bfa0:	4648      	mov	r0, r9
 800bfa2:	f000 fb07 	bl	800c5b4 <_Bfree>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	7033      	strb	r3, [r6, #0]
 800bfaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfac:	3701      	adds	r7, #1
 800bfae:	601f      	str	r7, [r3, #0]
 800bfb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 824b 	beq.w	800c44e <_dtoa_r+0xb4e>
 800bfb8:	601e      	str	r6, [r3, #0]
 800bfba:	e248      	b.n	800c44e <_dtoa_r+0xb4e>
 800bfbc:	46b8      	mov	r8, r7
 800bfbe:	4633      	mov	r3, r6
 800bfc0:	461e      	mov	r6, r3
 800bfc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfc6:	2a39      	cmp	r2, #57	@ 0x39
 800bfc8:	d106      	bne.n	800bfd8 <_dtoa_r+0x6d8>
 800bfca:	459a      	cmp	sl, r3
 800bfcc:	d1f8      	bne.n	800bfc0 <_dtoa_r+0x6c0>
 800bfce:	2230      	movs	r2, #48	@ 0x30
 800bfd0:	f108 0801 	add.w	r8, r8, #1
 800bfd4:	f88a 2000 	strb.w	r2, [sl]
 800bfd8:	781a      	ldrb	r2, [r3, #0]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	e7a0      	b.n	800bf22 <_dtoa_r+0x622>
 800bfe0:	4b6f      	ldr	r3, [pc, #444]	@ (800c1a0 <_dtoa_r+0x8a0>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f7f4 fb08 	bl	80005f8 <__aeabi_dmul>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	4604      	mov	r4, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	f7f4 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d09f      	beq.n	800bf38 <_dtoa_r+0x638>
 800bff8:	e7d1      	b.n	800bf9e <_dtoa_r+0x69e>
 800bffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	f000 80ea 	beq.w	800c1d6 <_dtoa_r+0x8d6>
 800c002:	9a07      	ldr	r2, [sp, #28]
 800c004:	2a01      	cmp	r2, #1
 800c006:	f300 80cd 	bgt.w	800c1a4 <_dtoa_r+0x8a4>
 800c00a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c00c:	2a00      	cmp	r2, #0
 800c00e:	f000 80c1 	beq.w	800c194 <_dtoa_r+0x894>
 800c012:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c016:	9c08      	ldr	r4, [sp, #32]
 800c018:	9e00      	ldr	r6, [sp, #0]
 800c01a:	9a00      	ldr	r2, [sp, #0]
 800c01c:	441a      	add	r2, r3
 800c01e:	9200      	str	r2, [sp, #0]
 800c020:	9a06      	ldr	r2, [sp, #24]
 800c022:	2101      	movs	r1, #1
 800c024:	441a      	add	r2, r3
 800c026:	4648      	mov	r0, r9
 800c028:	9206      	str	r2, [sp, #24]
 800c02a:	f000 fb77 	bl	800c71c <__i2b>
 800c02e:	4605      	mov	r5, r0
 800c030:	b166      	cbz	r6, 800c04c <_dtoa_r+0x74c>
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dd09      	ble.n	800c04c <_dtoa_r+0x74c>
 800c038:	42b3      	cmp	r3, r6
 800c03a:	9a00      	ldr	r2, [sp, #0]
 800c03c:	bfa8      	it	ge
 800c03e:	4633      	movge	r3, r6
 800c040:	1ad2      	subs	r2, r2, r3
 800c042:	9200      	str	r2, [sp, #0]
 800c044:	9a06      	ldr	r2, [sp, #24]
 800c046:	1af6      	subs	r6, r6, r3
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	9306      	str	r3, [sp, #24]
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	b30b      	cbz	r3, 800c094 <_dtoa_r+0x794>
 800c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 80c6 	beq.w	800c1e4 <_dtoa_r+0x8e4>
 800c058:	2c00      	cmp	r4, #0
 800c05a:	f000 80c0 	beq.w	800c1de <_dtoa_r+0x8de>
 800c05e:	4629      	mov	r1, r5
 800c060:	4622      	mov	r2, r4
 800c062:	4648      	mov	r0, r9
 800c064:	f000 fc12 	bl	800c88c <__pow5mult>
 800c068:	9a02      	ldr	r2, [sp, #8]
 800c06a:	4601      	mov	r1, r0
 800c06c:	4605      	mov	r5, r0
 800c06e:	4648      	mov	r0, r9
 800c070:	f000 fb6a 	bl	800c748 <__multiply>
 800c074:	9902      	ldr	r1, [sp, #8]
 800c076:	4680      	mov	r8, r0
 800c078:	4648      	mov	r0, r9
 800c07a:	f000 fa9b 	bl	800c5b4 <_Bfree>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	1b1b      	subs	r3, r3, r4
 800c082:	9308      	str	r3, [sp, #32]
 800c084:	f000 80b1 	beq.w	800c1ea <_dtoa_r+0x8ea>
 800c088:	9a08      	ldr	r2, [sp, #32]
 800c08a:	4641      	mov	r1, r8
 800c08c:	4648      	mov	r0, r9
 800c08e:	f000 fbfd 	bl	800c88c <__pow5mult>
 800c092:	9002      	str	r0, [sp, #8]
 800c094:	2101      	movs	r1, #1
 800c096:	4648      	mov	r0, r9
 800c098:	f000 fb40 	bl	800c71c <__i2b>
 800c09c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 81d8 	beq.w	800c456 <_dtoa_r+0xb56>
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	4648      	mov	r0, r9
 800c0ac:	f000 fbee 	bl	800c88c <__pow5mult>
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	f300 809f 	bgt.w	800c1f8 <_dtoa_r+0x8f8>
 800c0ba:	9b04      	ldr	r3, [sp, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f040 8097 	bne.w	800c1f0 <_dtoa_r+0x8f0>
 800c0c2:	9b05      	ldr	r3, [sp, #20]
 800c0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f040 8093 	bne.w	800c1f4 <_dtoa_r+0x8f4>
 800c0ce:	9b05      	ldr	r3, [sp, #20]
 800c0d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0d4:	0d1b      	lsrs	r3, r3, #20
 800c0d6:	051b      	lsls	r3, r3, #20
 800c0d8:	b133      	cbz	r3, 800c0e8 <_dtoa_r+0x7e8>
 800c0da:	9b00      	ldr	r3, [sp, #0]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	9b06      	ldr	r3, [sp, #24]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	9306      	str	r3, [sp, #24]
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	9308      	str	r3, [sp, #32]
 800c0ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 81b8 	beq.w	800c462 <_dtoa_r+0xb62>
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0f8:	6918      	ldr	r0, [r3, #16]
 800c0fa:	f000 fac3 	bl	800c684 <__hi0bits>
 800c0fe:	f1c0 0020 	rsb	r0, r0, #32
 800c102:	9b06      	ldr	r3, [sp, #24]
 800c104:	4418      	add	r0, r3
 800c106:	f010 001f 	ands.w	r0, r0, #31
 800c10a:	f000 8082 	beq.w	800c212 <_dtoa_r+0x912>
 800c10e:	f1c0 0320 	rsb	r3, r0, #32
 800c112:	2b04      	cmp	r3, #4
 800c114:	dd73      	ble.n	800c1fe <_dtoa_r+0x8fe>
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	f1c0 001c 	rsb	r0, r0, #28
 800c11c:	4403      	add	r3, r0
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	4403      	add	r3, r0
 800c124:	4406      	add	r6, r0
 800c126:	9306      	str	r3, [sp, #24]
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd05      	ble.n	800c13a <_dtoa_r+0x83a>
 800c12e:	9902      	ldr	r1, [sp, #8]
 800c130:	461a      	mov	r2, r3
 800c132:	4648      	mov	r0, r9
 800c134:	f000 fc04 	bl	800c940 <__lshift>
 800c138:	9002      	str	r0, [sp, #8]
 800c13a:	9b06      	ldr	r3, [sp, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd05      	ble.n	800c14c <_dtoa_r+0x84c>
 800c140:	4621      	mov	r1, r4
 800c142:	461a      	mov	r2, r3
 800c144:	4648      	mov	r0, r9
 800c146:	f000 fbfb 	bl	800c940 <__lshift>
 800c14a:	4604      	mov	r4, r0
 800c14c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d061      	beq.n	800c216 <_dtoa_r+0x916>
 800c152:	9802      	ldr	r0, [sp, #8]
 800c154:	4621      	mov	r1, r4
 800c156:	f000 fc5f 	bl	800ca18 <__mcmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	da5b      	bge.n	800c216 <_dtoa_r+0x916>
 800c15e:	2300      	movs	r3, #0
 800c160:	9902      	ldr	r1, [sp, #8]
 800c162:	220a      	movs	r2, #10
 800c164:	4648      	mov	r0, r9
 800c166:	f000 fa47 	bl	800c5f8 <__multadd>
 800c16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c16c:	9002      	str	r0, [sp, #8]
 800c16e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 8177 	beq.w	800c466 <_dtoa_r+0xb66>
 800c178:	4629      	mov	r1, r5
 800c17a:	2300      	movs	r3, #0
 800c17c:	220a      	movs	r2, #10
 800c17e:	4648      	mov	r0, r9
 800c180:	f000 fa3a 	bl	800c5f8 <__multadd>
 800c184:	f1bb 0f00 	cmp.w	fp, #0
 800c188:	4605      	mov	r5, r0
 800c18a:	dc6f      	bgt.n	800c26c <_dtoa_r+0x96c>
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	dc49      	bgt.n	800c226 <_dtoa_r+0x926>
 800c192:	e06b      	b.n	800c26c <_dtoa_r+0x96c>
 800c194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c19a:	e73c      	b.n	800c016 <_dtoa_r+0x716>
 800c19c:	3fe00000 	.word	0x3fe00000
 800c1a0:	40240000 	.word	0x40240000
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	1e5c      	subs	r4, r3, #1
 800c1a8:	9b08      	ldr	r3, [sp, #32]
 800c1aa:	42a3      	cmp	r3, r4
 800c1ac:	db09      	blt.n	800c1c2 <_dtoa_r+0x8c2>
 800c1ae:	1b1c      	subs	r4, r3, r4
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f6bf af30 	bge.w	800c018 <_dtoa_r+0x718>
 800c1b8:	9b00      	ldr	r3, [sp, #0]
 800c1ba:	9a03      	ldr	r2, [sp, #12]
 800c1bc:	1a9e      	subs	r6, r3, r2
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e72b      	b.n	800c01a <_dtoa_r+0x71a>
 800c1c2:	9b08      	ldr	r3, [sp, #32]
 800c1c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1c6:	9408      	str	r4, [sp, #32]
 800c1c8:	1ae3      	subs	r3, r4, r3
 800c1ca:	441a      	add	r2, r3
 800c1cc:	9e00      	ldr	r6, [sp, #0]
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c1d2:	2400      	movs	r4, #0
 800c1d4:	e721      	b.n	800c01a <_dtoa_r+0x71a>
 800c1d6:	9c08      	ldr	r4, [sp, #32]
 800c1d8:	9e00      	ldr	r6, [sp, #0]
 800c1da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c1dc:	e728      	b.n	800c030 <_dtoa_r+0x730>
 800c1de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c1e2:	e751      	b.n	800c088 <_dtoa_r+0x788>
 800c1e4:	9a08      	ldr	r2, [sp, #32]
 800c1e6:	9902      	ldr	r1, [sp, #8]
 800c1e8:	e750      	b.n	800c08c <_dtoa_r+0x78c>
 800c1ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800c1ee:	e751      	b.n	800c094 <_dtoa_r+0x794>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e779      	b.n	800c0e8 <_dtoa_r+0x7e8>
 800c1f4:	9b04      	ldr	r3, [sp, #16]
 800c1f6:	e777      	b.n	800c0e8 <_dtoa_r+0x7e8>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9308      	str	r3, [sp, #32]
 800c1fc:	e779      	b.n	800c0f2 <_dtoa_r+0x7f2>
 800c1fe:	d093      	beq.n	800c128 <_dtoa_r+0x828>
 800c200:	9a00      	ldr	r2, [sp, #0]
 800c202:	331c      	adds	r3, #28
 800c204:	441a      	add	r2, r3
 800c206:	9200      	str	r2, [sp, #0]
 800c208:	9a06      	ldr	r2, [sp, #24]
 800c20a:	441a      	add	r2, r3
 800c20c:	441e      	add	r6, r3
 800c20e:	9206      	str	r2, [sp, #24]
 800c210:	e78a      	b.n	800c128 <_dtoa_r+0x828>
 800c212:	4603      	mov	r3, r0
 800c214:	e7f4      	b.n	800c200 <_dtoa_r+0x900>
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	46b8      	mov	r8, r7
 800c21c:	dc20      	bgt.n	800c260 <_dtoa_r+0x960>
 800c21e:	469b      	mov	fp, r3
 800c220:	9b07      	ldr	r3, [sp, #28]
 800c222:	2b02      	cmp	r3, #2
 800c224:	dd1e      	ble.n	800c264 <_dtoa_r+0x964>
 800c226:	f1bb 0f00 	cmp.w	fp, #0
 800c22a:	f47f adb1 	bne.w	800bd90 <_dtoa_r+0x490>
 800c22e:	4621      	mov	r1, r4
 800c230:	465b      	mov	r3, fp
 800c232:	2205      	movs	r2, #5
 800c234:	4648      	mov	r0, r9
 800c236:	f000 f9df 	bl	800c5f8 <__multadd>
 800c23a:	4601      	mov	r1, r0
 800c23c:	4604      	mov	r4, r0
 800c23e:	9802      	ldr	r0, [sp, #8]
 800c240:	f000 fbea 	bl	800ca18 <__mcmp>
 800c244:	2800      	cmp	r0, #0
 800c246:	f77f ada3 	ble.w	800bd90 <_dtoa_r+0x490>
 800c24a:	4656      	mov	r6, sl
 800c24c:	2331      	movs	r3, #49	@ 0x31
 800c24e:	f806 3b01 	strb.w	r3, [r6], #1
 800c252:	f108 0801 	add.w	r8, r8, #1
 800c256:	e59f      	b.n	800bd98 <_dtoa_r+0x498>
 800c258:	9c03      	ldr	r4, [sp, #12]
 800c25a:	46b8      	mov	r8, r7
 800c25c:	4625      	mov	r5, r4
 800c25e:	e7f4      	b.n	800c24a <_dtoa_r+0x94a>
 800c260:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 8101 	beq.w	800c46e <_dtoa_r+0xb6e>
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	dd05      	ble.n	800c27c <_dtoa_r+0x97c>
 800c270:	4629      	mov	r1, r5
 800c272:	4632      	mov	r2, r6
 800c274:	4648      	mov	r0, r9
 800c276:	f000 fb63 	bl	800c940 <__lshift>
 800c27a:	4605      	mov	r5, r0
 800c27c:	9b08      	ldr	r3, [sp, #32]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d05c      	beq.n	800c33c <_dtoa_r+0xa3c>
 800c282:	6869      	ldr	r1, [r5, #4]
 800c284:	4648      	mov	r0, r9
 800c286:	f000 f955 	bl	800c534 <_Balloc>
 800c28a:	4606      	mov	r6, r0
 800c28c:	b928      	cbnz	r0, 800c29a <_dtoa_r+0x99a>
 800c28e:	4b82      	ldr	r3, [pc, #520]	@ (800c498 <_dtoa_r+0xb98>)
 800c290:	4602      	mov	r2, r0
 800c292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c296:	f7ff bb4a 	b.w	800b92e <_dtoa_r+0x2e>
 800c29a:	692a      	ldr	r2, [r5, #16]
 800c29c:	3202      	adds	r2, #2
 800c29e:	0092      	lsls	r2, r2, #2
 800c2a0:	f105 010c 	add.w	r1, r5, #12
 800c2a4:	300c      	adds	r0, #12
 800c2a6:	f000 ff85 	bl	800d1b4 <memcpy>
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4648      	mov	r0, r9
 800c2b0:	f000 fb46 	bl	800c940 <__lshift>
 800c2b4:	f10a 0301 	add.w	r3, sl, #1
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	eb0a 030b 	add.w	r3, sl, fp
 800c2be:	9308      	str	r3, [sp, #32]
 800c2c0:	9b04      	ldr	r3, [sp, #16]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	462f      	mov	r7, r5
 800c2c8:	9306      	str	r3, [sp, #24]
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	9b00      	ldr	r3, [sp, #0]
 800c2ce:	9802      	ldr	r0, [sp, #8]
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2d6:	f7ff fa89 	bl	800b7ec <quorem>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	3330      	adds	r3, #48	@ 0x30
 800c2de:	9003      	str	r0, [sp, #12]
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	9802      	ldr	r0, [sp, #8]
 800c2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e6:	f000 fb97 	bl	800ca18 <__mcmp>
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	9004      	str	r0, [sp, #16]
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4648      	mov	r0, r9
 800c2f2:	f000 fbad 	bl	800ca50 <__mdiff>
 800c2f6:	68c2      	ldr	r2, [r0, #12]
 800c2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	bb02      	cbnz	r2, 800c340 <_dtoa_r+0xa40>
 800c2fe:	4601      	mov	r1, r0
 800c300:	9802      	ldr	r0, [sp, #8]
 800c302:	f000 fb89 	bl	800ca18 <__mcmp>
 800c306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c308:	4602      	mov	r2, r0
 800c30a:	4631      	mov	r1, r6
 800c30c:	4648      	mov	r0, r9
 800c30e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c310:	9309      	str	r3, [sp, #36]	@ 0x24
 800c312:	f000 f94f 	bl	800c5b4 <_Bfree>
 800c316:	9b07      	ldr	r3, [sp, #28]
 800c318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c31a:	9e00      	ldr	r6, [sp, #0]
 800c31c:	ea42 0103 	orr.w	r1, r2, r3
 800c320:	9b06      	ldr	r3, [sp, #24]
 800c322:	4319      	orrs	r1, r3
 800c324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c326:	d10d      	bne.n	800c344 <_dtoa_r+0xa44>
 800c328:	2b39      	cmp	r3, #57	@ 0x39
 800c32a:	d027      	beq.n	800c37c <_dtoa_r+0xa7c>
 800c32c:	9a04      	ldr	r2, [sp, #16]
 800c32e:	2a00      	cmp	r2, #0
 800c330:	dd01      	ble.n	800c336 <_dtoa_r+0xa36>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	3331      	adds	r3, #49	@ 0x31
 800c336:	f88b 3000 	strb.w	r3, [fp]
 800c33a:	e52e      	b.n	800bd9a <_dtoa_r+0x49a>
 800c33c:	4628      	mov	r0, r5
 800c33e:	e7b9      	b.n	800c2b4 <_dtoa_r+0x9b4>
 800c340:	2201      	movs	r2, #1
 800c342:	e7e2      	b.n	800c30a <_dtoa_r+0xa0a>
 800c344:	9904      	ldr	r1, [sp, #16]
 800c346:	2900      	cmp	r1, #0
 800c348:	db04      	blt.n	800c354 <_dtoa_r+0xa54>
 800c34a:	9807      	ldr	r0, [sp, #28]
 800c34c:	4301      	orrs	r1, r0
 800c34e:	9806      	ldr	r0, [sp, #24]
 800c350:	4301      	orrs	r1, r0
 800c352:	d120      	bne.n	800c396 <_dtoa_r+0xa96>
 800c354:	2a00      	cmp	r2, #0
 800c356:	ddee      	ble.n	800c336 <_dtoa_r+0xa36>
 800c358:	9902      	ldr	r1, [sp, #8]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	2201      	movs	r2, #1
 800c35e:	4648      	mov	r0, r9
 800c360:	f000 faee 	bl	800c940 <__lshift>
 800c364:	4621      	mov	r1, r4
 800c366:	9002      	str	r0, [sp, #8]
 800c368:	f000 fb56 	bl	800ca18 <__mcmp>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	dc02      	bgt.n	800c378 <_dtoa_r+0xa78>
 800c372:	d1e0      	bne.n	800c336 <_dtoa_r+0xa36>
 800c374:	07da      	lsls	r2, r3, #31
 800c376:	d5de      	bpl.n	800c336 <_dtoa_r+0xa36>
 800c378:	2b39      	cmp	r3, #57	@ 0x39
 800c37a:	d1da      	bne.n	800c332 <_dtoa_r+0xa32>
 800c37c:	2339      	movs	r3, #57	@ 0x39
 800c37e:	f88b 3000 	strb.w	r3, [fp]
 800c382:	4633      	mov	r3, r6
 800c384:	461e      	mov	r6, r3
 800c386:	3b01      	subs	r3, #1
 800c388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c38c:	2a39      	cmp	r2, #57	@ 0x39
 800c38e:	d04e      	beq.n	800c42e <_dtoa_r+0xb2e>
 800c390:	3201      	adds	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	e501      	b.n	800bd9a <_dtoa_r+0x49a>
 800c396:	2a00      	cmp	r2, #0
 800c398:	dd03      	ble.n	800c3a2 <_dtoa_r+0xaa2>
 800c39a:	2b39      	cmp	r3, #57	@ 0x39
 800c39c:	d0ee      	beq.n	800c37c <_dtoa_r+0xa7c>
 800c39e:	3301      	adds	r3, #1
 800c3a0:	e7c9      	b.n	800c336 <_dtoa_r+0xa36>
 800c3a2:	9a00      	ldr	r2, [sp, #0]
 800c3a4:	9908      	ldr	r1, [sp, #32]
 800c3a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c3aa:	428a      	cmp	r2, r1
 800c3ac:	d028      	beq.n	800c400 <_dtoa_r+0xb00>
 800c3ae:	9902      	ldr	r1, [sp, #8]
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	f000 f91f 	bl	800c5f8 <__multadd>
 800c3ba:	42af      	cmp	r7, r5
 800c3bc:	9002      	str	r0, [sp, #8]
 800c3be:	f04f 0300 	mov.w	r3, #0
 800c3c2:	f04f 020a 	mov.w	r2, #10
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	4648      	mov	r0, r9
 800c3ca:	d107      	bne.n	800c3dc <_dtoa_r+0xadc>
 800c3cc:	f000 f914 	bl	800c5f8 <__multadd>
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	9b00      	ldr	r3, [sp, #0]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	e777      	b.n	800c2cc <_dtoa_r+0x9cc>
 800c3dc:	f000 f90c 	bl	800c5f8 <__multadd>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	220a      	movs	r2, #10
 800c3e8:	4648      	mov	r0, r9
 800c3ea:	f000 f905 	bl	800c5f8 <__multadd>
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	e7f0      	b.n	800c3d4 <_dtoa_r+0xad4>
 800c3f2:	f1bb 0f00 	cmp.w	fp, #0
 800c3f6:	bfcc      	ite	gt
 800c3f8:	465e      	movgt	r6, fp
 800c3fa:	2601      	movle	r6, #1
 800c3fc:	4456      	add	r6, sl
 800c3fe:	2700      	movs	r7, #0
 800c400:	9902      	ldr	r1, [sp, #8]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	2201      	movs	r2, #1
 800c406:	4648      	mov	r0, r9
 800c408:	f000 fa9a 	bl	800c940 <__lshift>
 800c40c:	4621      	mov	r1, r4
 800c40e:	9002      	str	r0, [sp, #8]
 800c410:	f000 fb02 	bl	800ca18 <__mcmp>
 800c414:	2800      	cmp	r0, #0
 800c416:	dcb4      	bgt.n	800c382 <_dtoa_r+0xa82>
 800c418:	d102      	bne.n	800c420 <_dtoa_r+0xb20>
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	07db      	lsls	r3, r3, #31
 800c41e:	d4b0      	bmi.n	800c382 <_dtoa_r+0xa82>
 800c420:	4633      	mov	r3, r6
 800c422:	461e      	mov	r6, r3
 800c424:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c428:	2a30      	cmp	r2, #48	@ 0x30
 800c42a:	d0fa      	beq.n	800c422 <_dtoa_r+0xb22>
 800c42c:	e4b5      	b.n	800bd9a <_dtoa_r+0x49a>
 800c42e:	459a      	cmp	sl, r3
 800c430:	d1a8      	bne.n	800c384 <_dtoa_r+0xa84>
 800c432:	2331      	movs	r3, #49	@ 0x31
 800c434:	f108 0801 	add.w	r8, r8, #1
 800c438:	f88a 3000 	strb.w	r3, [sl]
 800c43c:	e4ad      	b.n	800bd9a <_dtoa_r+0x49a>
 800c43e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c440:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c49c <_dtoa_r+0xb9c>
 800c444:	b11b      	cbz	r3, 800c44e <_dtoa_r+0xb4e>
 800c446:	f10a 0308 	add.w	r3, sl, #8
 800c44a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	4650      	mov	r0, sl
 800c450:	b017      	add	sp, #92	@ 0x5c
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	9b07      	ldr	r3, [sp, #28]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	f77f ae2e 	ble.w	800c0ba <_dtoa_r+0x7ba>
 800c45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c460:	9308      	str	r3, [sp, #32]
 800c462:	2001      	movs	r0, #1
 800c464:	e64d      	b.n	800c102 <_dtoa_r+0x802>
 800c466:	f1bb 0f00 	cmp.w	fp, #0
 800c46a:	f77f aed9 	ble.w	800c220 <_dtoa_r+0x920>
 800c46e:	4656      	mov	r6, sl
 800c470:	9802      	ldr	r0, [sp, #8]
 800c472:	4621      	mov	r1, r4
 800c474:	f7ff f9ba 	bl	800b7ec <quorem>
 800c478:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c47c:	f806 3b01 	strb.w	r3, [r6], #1
 800c480:	eba6 020a 	sub.w	r2, r6, sl
 800c484:	4593      	cmp	fp, r2
 800c486:	ddb4      	ble.n	800c3f2 <_dtoa_r+0xaf2>
 800c488:	9902      	ldr	r1, [sp, #8]
 800c48a:	2300      	movs	r3, #0
 800c48c:	220a      	movs	r2, #10
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 f8b2 	bl	800c5f8 <__multadd>
 800c494:	9002      	str	r0, [sp, #8]
 800c496:	e7eb      	b.n	800c470 <_dtoa_r+0xb70>
 800c498:	0800d534 	.word	0x0800d534
 800c49c:	0800d4b8 	.word	0x0800d4b8

0800c4a0 <_free_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	d041      	beq.n	800c52c <_free_r+0x8c>
 800c4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ac:	1f0c      	subs	r4, r1, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	bfb8      	it	lt
 800c4b2:	18e4      	addlt	r4, r4, r3
 800c4b4:	f7fe fb8a 	bl	800abcc <__malloc_lock>
 800c4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c530 <_free_r+0x90>)
 800c4ba:	6813      	ldr	r3, [r2, #0]
 800c4bc:	b933      	cbnz	r3, 800c4cc <_free_r+0x2c>
 800c4be:	6063      	str	r3, [r4, #4]
 800c4c0:	6014      	str	r4, [r2, #0]
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c8:	f7fe bb86 	b.w	800abd8 <__malloc_unlock>
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	d908      	bls.n	800c4e2 <_free_r+0x42>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	1821      	adds	r1, r4, r0
 800c4d4:	428b      	cmp	r3, r1
 800c4d6:	bf01      	itttt	eq
 800c4d8:	6819      	ldreq	r1, [r3, #0]
 800c4da:	685b      	ldreq	r3, [r3, #4]
 800c4dc:	1809      	addeq	r1, r1, r0
 800c4de:	6021      	streq	r1, [r4, #0]
 800c4e0:	e7ed      	b.n	800c4be <_free_r+0x1e>
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	b10b      	cbz	r3, 800c4ec <_free_r+0x4c>
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	d9fa      	bls.n	800c4e2 <_free_r+0x42>
 800c4ec:	6811      	ldr	r1, [r2, #0]
 800c4ee:	1850      	adds	r0, r2, r1
 800c4f0:	42a0      	cmp	r0, r4
 800c4f2:	d10b      	bne.n	800c50c <_free_r+0x6c>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	4401      	add	r1, r0
 800c4f8:	1850      	adds	r0, r2, r1
 800c4fa:	4283      	cmp	r3, r0
 800c4fc:	6011      	str	r1, [r2, #0]
 800c4fe:	d1e0      	bne.n	800c4c2 <_free_r+0x22>
 800c500:	6818      	ldr	r0, [r3, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	6053      	str	r3, [r2, #4]
 800c506:	4408      	add	r0, r1
 800c508:	6010      	str	r0, [r2, #0]
 800c50a:	e7da      	b.n	800c4c2 <_free_r+0x22>
 800c50c:	d902      	bls.n	800c514 <_free_r+0x74>
 800c50e:	230c      	movs	r3, #12
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	e7d6      	b.n	800c4c2 <_free_r+0x22>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	1821      	adds	r1, r4, r0
 800c518:	428b      	cmp	r3, r1
 800c51a:	bf04      	itt	eq
 800c51c:	6819      	ldreq	r1, [r3, #0]
 800c51e:	685b      	ldreq	r3, [r3, #4]
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	bf04      	itt	eq
 800c524:	1809      	addeq	r1, r1, r0
 800c526:	6021      	streq	r1, [r4, #0]
 800c528:	6054      	str	r4, [r2, #4]
 800c52a:	e7ca      	b.n	800c4c2 <_free_r+0x22>
 800c52c:	bd38      	pop	{r3, r4, r5, pc}
 800c52e:	bf00      	nop
 800c530:	20001fbc 	.word	0x20001fbc

0800c534 <_Balloc>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	69c6      	ldr	r6, [r0, #28]
 800c538:	4604      	mov	r4, r0
 800c53a:	460d      	mov	r5, r1
 800c53c:	b976      	cbnz	r6, 800c55c <_Balloc+0x28>
 800c53e:	2010      	movs	r0, #16
 800c540:	f7fe fa9a 	bl	800aa78 <malloc>
 800c544:	4602      	mov	r2, r0
 800c546:	61e0      	str	r0, [r4, #28]
 800c548:	b920      	cbnz	r0, 800c554 <_Balloc+0x20>
 800c54a:	4b18      	ldr	r3, [pc, #96]	@ (800c5ac <_Balloc+0x78>)
 800c54c:	4818      	ldr	r0, [pc, #96]	@ (800c5b0 <_Balloc+0x7c>)
 800c54e:	216b      	movs	r1, #107	@ 0x6b
 800c550:	f7fe fa74 	bl	800aa3c <__assert_func>
 800c554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c558:	6006      	str	r6, [r0, #0]
 800c55a:	60c6      	str	r6, [r0, #12]
 800c55c:	69e6      	ldr	r6, [r4, #28]
 800c55e:	68f3      	ldr	r3, [r6, #12]
 800c560:	b183      	cbz	r3, 800c584 <_Balloc+0x50>
 800c562:	69e3      	ldr	r3, [r4, #28]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c56a:	b9b8      	cbnz	r0, 800c59c <_Balloc+0x68>
 800c56c:	2101      	movs	r1, #1
 800c56e:	fa01 f605 	lsl.w	r6, r1, r5
 800c572:	1d72      	adds	r2, r6, #5
 800c574:	0092      	lsls	r2, r2, #2
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fe2a 	bl	800d1d0 <_calloc_r>
 800c57c:	b160      	cbz	r0, 800c598 <_Balloc+0x64>
 800c57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c582:	e00e      	b.n	800c5a2 <_Balloc+0x6e>
 800c584:	2221      	movs	r2, #33	@ 0x21
 800c586:	2104      	movs	r1, #4
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fe21 	bl	800d1d0 <_calloc_r>
 800c58e:	69e3      	ldr	r3, [r4, #28]
 800c590:	60f0      	str	r0, [r6, #12]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e4      	bne.n	800c562 <_Balloc+0x2e>
 800c598:	2000      	movs	r0, #0
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	6802      	ldr	r2, [r0, #0]
 800c59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5a8:	e7f7      	b.n	800c59a <_Balloc+0x66>
 800c5aa:	bf00      	nop
 800c5ac:	0800d4c5 	.word	0x0800d4c5
 800c5b0:	0800d545 	.word	0x0800d545

0800c5b4 <_Bfree>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	69c6      	ldr	r6, [r0, #28]
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	b976      	cbnz	r6, 800c5dc <_Bfree+0x28>
 800c5be:	2010      	movs	r0, #16
 800c5c0:	f7fe fa5a 	bl	800aa78 <malloc>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	61e8      	str	r0, [r5, #28]
 800c5c8:	b920      	cbnz	r0, 800c5d4 <_Bfree+0x20>
 800c5ca:	4b09      	ldr	r3, [pc, #36]	@ (800c5f0 <_Bfree+0x3c>)
 800c5cc:	4809      	ldr	r0, [pc, #36]	@ (800c5f4 <_Bfree+0x40>)
 800c5ce:	218f      	movs	r1, #143	@ 0x8f
 800c5d0:	f7fe fa34 	bl	800aa3c <__assert_func>
 800c5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5d8:	6006      	str	r6, [r0, #0]
 800c5da:	60c6      	str	r6, [r0, #12]
 800c5dc:	b13c      	cbz	r4, 800c5ee <_Bfree+0x3a>
 800c5de:	69eb      	ldr	r3, [r5, #28]
 800c5e0:	6862      	ldr	r2, [r4, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5e8:	6021      	str	r1, [r4, #0]
 800c5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	0800d4c5 	.word	0x0800d4c5
 800c5f4:	0800d545 	.word	0x0800d545

0800c5f8 <__multadd>:
 800c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fc:	690d      	ldr	r5, [r1, #16]
 800c5fe:	4607      	mov	r7, r0
 800c600:	460c      	mov	r4, r1
 800c602:	461e      	mov	r6, r3
 800c604:	f101 0c14 	add.w	ip, r1, #20
 800c608:	2000      	movs	r0, #0
 800c60a:	f8dc 3000 	ldr.w	r3, [ip]
 800c60e:	b299      	uxth	r1, r3
 800c610:	fb02 6101 	mla	r1, r2, r1, r6
 800c614:	0c1e      	lsrs	r6, r3, #16
 800c616:	0c0b      	lsrs	r3, r1, #16
 800c618:	fb02 3306 	mla	r3, r2, r6, r3
 800c61c:	b289      	uxth	r1, r1
 800c61e:	3001      	adds	r0, #1
 800c620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c624:	4285      	cmp	r5, r0
 800c626:	f84c 1b04 	str.w	r1, [ip], #4
 800c62a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c62e:	dcec      	bgt.n	800c60a <__multadd+0x12>
 800c630:	b30e      	cbz	r6, 800c676 <__multadd+0x7e>
 800c632:	68a3      	ldr	r3, [r4, #8]
 800c634:	42ab      	cmp	r3, r5
 800c636:	dc19      	bgt.n	800c66c <__multadd+0x74>
 800c638:	6861      	ldr	r1, [r4, #4]
 800c63a:	4638      	mov	r0, r7
 800c63c:	3101      	adds	r1, #1
 800c63e:	f7ff ff79 	bl	800c534 <_Balloc>
 800c642:	4680      	mov	r8, r0
 800c644:	b928      	cbnz	r0, 800c652 <__multadd+0x5a>
 800c646:	4602      	mov	r2, r0
 800c648:	4b0c      	ldr	r3, [pc, #48]	@ (800c67c <__multadd+0x84>)
 800c64a:	480d      	ldr	r0, [pc, #52]	@ (800c680 <__multadd+0x88>)
 800c64c:	21ba      	movs	r1, #186	@ 0xba
 800c64e:	f7fe f9f5 	bl	800aa3c <__assert_func>
 800c652:	6922      	ldr	r2, [r4, #16]
 800c654:	3202      	adds	r2, #2
 800c656:	f104 010c 	add.w	r1, r4, #12
 800c65a:	0092      	lsls	r2, r2, #2
 800c65c:	300c      	adds	r0, #12
 800c65e:	f000 fda9 	bl	800d1b4 <memcpy>
 800c662:	4621      	mov	r1, r4
 800c664:	4638      	mov	r0, r7
 800c666:	f7ff ffa5 	bl	800c5b4 <_Bfree>
 800c66a:	4644      	mov	r4, r8
 800c66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c670:	3501      	adds	r5, #1
 800c672:	615e      	str	r6, [r3, #20]
 800c674:	6125      	str	r5, [r4, #16]
 800c676:	4620      	mov	r0, r4
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	0800d534 	.word	0x0800d534
 800c680:	0800d545 	.word	0x0800d545

0800c684 <__hi0bits>:
 800c684:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c688:	4603      	mov	r3, r0
 800c68a:	bf36      	itet	cc
 800c68c:	0403      	lslcc	r3, r0, #16
 800c68e:	2000      	movcs	r0, #0
 800c690:	2010      	movcc	r0, #16
 800c692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c696:	bf3c      	itt	cc
 800c698:	021b      	lslcc	r3, r3, #8
 800c69a:	3008      	addcc	r0, #8
 800c69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6a0:	bf3c      	itt	cc
 800c6a2:	011b      	lslcc	r3, r3, #4
 800c6a4:	3004      	addcc	r0, #4
 800c6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6aa:	bf3c      	itt	cc
 800c6ac:	009b      	lslcc	r3, r3, #2
 800c6ae:	3002      	addcc	r0, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	db05      	blt.n	800c6c0 <__hi0bits+0x3c>
 800c6b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6b8:	f100 0001 	add.w	r0, r0, #1
 800c6bc:	bf08      	it	eq
 800c6be:	2020      	moveq	r0, #32
 800c6c0:	4770      	bx	lr

0800c6c2 <__lo0bits>:
 800c6c2:	6803      	ldr	r3, [r0, #0]
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	f013 0007 	ands.w	r0, r3, #7
 800c6ca:	d00b      	beq.n	800c6e4 <__lo0bits+0x22>
 800c6cc:	07d9      	lsls	r1, r3, #31
 800c6ce:	d421      	bmi.n	800c714 <__lo0bits+0x52>
 800c6d0:	0798      	lsls	r0, r3, #30
 800c6d2:	bf49      	itett	mi
 800c6d4:	085b      	lsrmi	r3, r3, #1
 800c6d6:	089b      	lsrpl	r3, r3, #2
 800c6d8:	2001      	movmi	r0, #1
 800c6da:	6013      	strmi	r3, [r2, #0]
 800c6dc:	bf5c      	itt	pl
 800c6de:	6013      	strpl	r3, [r2, #0]
 800c6e0:	2002      	movpl	r0, #2
 800c6e2:	4770      	bx	lr
 800c6e4:	b299      	uxth	r1, r3
 800c6e6:	b909      	cbnz	r1, 800c6ec <__lo0bits+0x2a>
 800c6e8:	0c1b      	lsrs	r3, r3, #16
 800c6ea:	2010      	movs	r0, #16
 800c6ec:	b2d9      	uxtb	r1, r3
 800c6ee:	b909      	cbnz	r1, 800c6f4 <__lo0bits+0x32>
 800c6f0:	3008      	adds	r0, #8
 800c6f2:	0a1b      	lsrs	r3, r3, #8
 800c6f4:	0719      	lsls	r1, r3, #28
 800c6f6:	bf04      	itt	eq
 800c6f8:	091b      	lsreq	r3, r3, #4
 800c6fa:	3004      	addeq	r0, #4
 800c6fc:	0799      	lsls	r1, r3, #30
 800c6fe:	bf04      	itt	eq
 800c700:	089b      	lsreq	r3, r3, #2
 800c702:	3002      	addeq	r0, #2
 800c704:	07d9      	lsls	r1, r3, #31
 800c706:	d403      	bmi.n	800c710 <__lo0bits+0x4e>
 800c708:	085b      	lsrs	r3, r3, #1
 800c70a:	f100 0001 	add.w	r0, r0, #1
 800c70e:	d003      	beq.n	800c718 <__lo0bits+0x56>
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	4770      	bx	lr
 800c714:	2000      	movs	r0, #0
 800c716:	4770      	bx	lr
 800c718:	2020      	movs	r0, #32
 800c71a:	4770      	bx	lr

0800c71c <__i2b>:
 800c71c:	b510      	push	{r4, lr}
 800c71e:	460c      	mov	r4, r1
 800c720:	2101      	movs	r1, #1
 800c722:	f7ff ff07 	bl	800c534 <_Balloc>
 800c726:	4602      	mov	r2, r0
 800c728:	b928      	cbnz	r0, 800c736 <__i2b+0x1a>
 800c72a:	4b05      	ldr	r3, [pc, #20]	@ (800c740 <__i2b+0x24>)
 800c72c:	4805      	ldr	r0, [pc, #20]	@ (800c744 <__i2b+0x28>)
 800c72e:	f240 1145 	movw	r1, #325	@ 0x145
 800c732:	f7fe f983 	bl	800aa3c <__assert_func>
 800c736:	2301      	movs	r3, #1
 800c738:	6144      	str	r4, [r0, #20]
 800c73a:	6103      	str	r3, [r0, #16]
 800c73c:	bd10      	pop	{r4, pc}
 800c73e:	bf00      	nop
 800c740:	0800d534 	.word	0x0800d534
 800c744:	0800d545 	.word	0x0800d545

0800c748 <__multiply>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	4617      	mov	r7, r2
 800c74e:	690a      	ldr	r2, [r1, #16]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	429a      	cmp	r2, r3
 800c754:	bfa8      	it	ge
 800c756:	463b      	movge	r3, r7
 800c758:	4689      	mov	r9, r1
 800c75a:	bfa4      	itt	ge
 800c75c:	460f      	movge	r7, r1
 800c75e:	4699      	movge	r9, r3
 800c760:	693d      	ldr	r5, [r7, #16]
 800c762:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	6879      	ldr	r1, [r7, #4]
 800c76a:	eb05 060a 	add.w	r6, r5, sl
 800c76e:	42b3      	cmp	r3, r6
 800c770:	b085      	sub	sp, #20
 800c772:	bfb8      	it	lt
 800c774:	3101      	addlt	r1, #1
 800c776:	f7ff fedd 	bl	800c534 <_Balloc>
 800c77a:	b930      	cbnz	r0, 800c78a <__multiply+0x42>
 800c77c:	4602      	mov	r2, r0
 800c77e:	4b41      	ldr	r3, [pc, #260]	@ (800c884 <__multiply+0x13c>)
 800c780:	4841      	ldr	r0, [pc, #260]	@ (800c888 <__multiply+0x140>)
 800c782:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c786:	f7fe f959 	bl	800aa3c <__assert_func>
 800c78a:	f100 0414 	add.w	r4, r0, #20
 800c78e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c792:	4623      	mov	r3, r4
 800c794:	2200      	movs	r2, #0
 800c796:	4573      	cmp	r3, lr
 800c798:	d320      	bcc.n	800c7dc <__multiply+0x94>
 800c79a:	f107 0814 	add.w	r8, r7, #20
 800c79e:	f109 0114 	add.w	r1, r9, #20
 800c7a2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c7a6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c7aa:	9302      	str	r3, [sp, #8]
 800c7ac:	1beb      	subs	r3, r5, r7
 800c7ae:	3b15      	subs	r3, #21
 800c7b0:	f023 0303 	bic.w	r3, r3, #3
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	3715      	adds	r7, #21
 800c7b8:	42bd      	cmp	r5, r7
 800c7ba:	bf38      	it	cc
 800c7bc:	2304      	movcc	r3, #4
 800c7be:	9301      	str	r3, [sp, #4]
 800c7c0:	9b02      	ldr	r3, [sp, #8]
 800c7c2:	9103      	str	r1, [sp, #12]
 800c7c4:	428b      	cmp	r3, r1
 800c7c6:	d80c      	bhi.n	800c7e2 <__multiply+0x9a>
 800c7c8:	2e00      	cmp	r6, #0
 800c7ca:	dd03      	ble.n	800c7d4 <__multiply+0x8c>
 800c7cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d055      	beq.n	800c880 <__multiply+0x138>
 800c7d4:	6106      	str	r6, [r0, #16]
 800c7d6:	b005      	add	sp, #20
 800c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	f843 2b04 	str.w	r2, [r3], #4
 800c7e0:	e7d9      	b.n	800c796 <__multiply+0x4e>
 800c7e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c7e6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ea:	d01f      	beq.n	800c82c <__multiply+0xe4>
 800c7ec:	46c4      	mov	ip, r8
 800c7ee:	46a1      	mov	r9, r4
 800c7f0:	2700      	movs	r7, #0
 800c7f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c7fa:	fa1f fb82 	uxth.w	fp, r2
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	fb0a 330b 	mla	r3, sl, fp, r3
 800c804:	443b      	add	r3, r7
 800c806:	f8d9 7000 	ldr.w	r7, [r9]
 800c80a:	0c12      	lsrs	r2, r2, #16
 800c80c:	0c3f      	lsrs	r7, r7, #16
 800c80e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c812:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c816:	b29b      	uxth	r3, r3
 800c818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c81c:	4565      	cmp	r5, ip
 800c81e:	f849 3b04 	str.w	r3, [r9], #4
 800c822:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c826:	d8e4      	bhi.n	800c7f2 <__multiply+0xaa>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	50e7      	str	r7, [r4, r3]
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c832:	3104      	adds	r1, #4
 800c834:	f1b9 0f00 	cmp.w	r9, #0
 800c838:	d020      	beq.n	800c87c <__multiply+0x134>
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	4647      	mov	r7, r8
 800c83e:	46a4      	mov	ip, r4
 800c840:	f04f 0a00 	mov.w	sl, #0
 800c844:	f8b7 b000 	ldrh.w	fp, [r7]
 800c848:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c84c:	fb09 220b 	mla	r2, r9, fp, r2
 800c850:	4452      	add	r2, sl
 800c852:	b29b      	uxth	r3, r3
 800c854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c858:	f84c 3b04 	str.w	r3, [ip], #4
 800c85c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c864:	f8bc 3000 	ldrh.w	r3, [ip]
 800c868:	fb09 330a 	mla	r3, r9, sl, r3
 800c86c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c870:	42bd      	cmp	r5, r7
 800c872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c876:	d8e5      	bhi.n	800c844 <__multiply+0xfc>
 800c878:	9a01      	ldr	r2, [sp, #4]
 800c87a:	50a3      	str	r3, [r4, r2]
 800c87c:	3404      	adds	r4, #4
 800c87e:	e79f      	b.n	800c7c0 <__multiply+0x78>
 800c880:	3e01      	subs	r6, #1
 800c882:	e7a1      	b.n	800c7c8 <__multiply+0x80>
 800c884:	0800d534 	.word	0x0800d534
 800c888:	0800d545 	.word	0x0800d545

0800c88c <__pow5mult>:
 800c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c890:	4615      	mov	r5, r2
 800c892:	f012 0203 	ands.w	r2, r2, #3
 800c896:	4607      	mov	r7, r0
 800c898:	460e      	mov	r6, r1
 800c89a:	d007      	beq.n	800c8ac <__pow5mult+0x20>
 800c89c:	4c25      	ldr	r4, [pc, #148]	@ (800c934 <__pow5mult+0xa8>)
 800c89e:	3a01      	subs	r2, #1
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8a6:	f7ff fea7 	bl	800c5f8 <__multadd>
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	10ad      	asrs	r5, r5, #2
 800c8ae:	d03d      	beq.n	800c92c <__pow5mult+0xa0>
 800c8b0:	69fc      	ldr	r4, [r7, #28]
 800c8b2:	b97c      	cbnz	r4, 800c8d4 <__pow5mult+0x48>
 800c8b4:	2010      	movs	r0, #16
 800c8b6:	f7fe f8df 	bl	800aa78 <malloc>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	61f8      	str	r0, [r7, #28]
 800c8be:	b928      	cbnz	r0, 800c8cc <__pow5mult+0x40>
 800c8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c938 <__pow5mult+0xac>)
 800c8c2:	481e      	ldr	r0, [pc, #120]	@ (800c93c <__pow5mult+0xb0>)
 800c8c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8c8:	f7fe f8b8 	bl	800aa3c <__assert_func>
 800c8cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8d0:	6004      	str	r4, [r0, #0]
 800c8d2:	60c4      	str	r4, [r0, #12]
 800c8d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8dc:	b94c      	cbnz	r4, 800c8f2 <__pow5mult+0x66>
 800c8de:	f240 2171 	movw	r1, #625	@ 0x271
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f7ff ff1a 	bl	800c71c <__i2b>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	6003      	str	r3, [r0, #0]
 800c8f2:	f04f 0900 	mov.w	r9, #0
 800c8f6:	07eb      	lsls	r3, r5, #31
 800c8f8:	d50a      	bpl.n	800c910 <__pow5mult+0x84>
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4638      	mov	r0, r7
 800c900:	f7ff ff22 	bl	800c748 <__multiply>
 800c904:	4631      	mov	r1, r6
 800c906:	4680      	mov	r8, r0
 800c908:	4638      	mov	r0, r7
 800c90a:	f7ff fe53 	bl	800c5b4 <_Bfree>
 800c90e:	4646      	mov	r6, r8
 800c910:	106d      	asrs	r5, r5, #1
 800c912:	d00b      	beq.n	800c92c <__pow5mult+0xa0>
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	b938      	cbnz	r0, 800c928 <__pow5mult+0x9c>
 800c918:	4622      	mov	r2, r4
 800c91a:	4621      	mov	r1, r4
 800c91c:	4638      	mov	r0, r7
 800c91e:	f7ff ff13 	bl	800c748 <__multiply>
 800c922:	6020      	str	r0, [r4, #0]
 800c924:	f8c0 9000 	str.w	r9, [r0]
 800c928:	4604      	mov	r4, r0
 800c92a:	e7e4      	b.n	800c8f6 <__pow5mult+0x6a>
 800c92c:	4630      	mov	r0, r6
 800c92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c932:	bf00      	nop
 800c934:	0800d5bc 	.word	0x0800d5bc
 800c938:	0800d4c5 	.word	0x0800d4c5
 800c93c:	0800d545 	.word	0x0800d545

0800c940 <__lshift>:
 800c940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c944:	460c      	mov	r4, r1
 800c946:	6849      	ldr	r1, [r1, #4]
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	4607      	mov	r7, r0
 800c952:	4691      	mov	r9, r2
 800c954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c958:	f108 0601 	add.w	r6, r8, #1
 800c95c:	42b3      	cmp	r3, r6
 800c95e:	db0b      	blt.n	800c978 <__lshift+0x38>
 800c960:	4638      	mov	r0, r7
 800c962:	f7ff fde7 	bl	800c534 <_Balloc>
 800c966:	4605      	mov	r5, r0
 800c968:	b948      	cbnz	r0, 800c97e <__lshift+0x3e>
 800c96a:	4602      	mov	r2, r0
 800c96c:	4b28      	ldr	r3, [pc, #160]	@ (800ca10 <__lshift+0xd0>)
 800c96e:	4829      	ldr	r0, [pc, #164]	@ (800ca14 <__lshift+0xd4>)
 800c970:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c974:	f7fe f862 	bl	800aa3c <__assert_func>
 800c978:	3101      	adds	r1, #1
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	e7ee      	b.n	800c95c <__lshift+0x1c>
 800c97e:	2300      	movs	r3, #0
 800c980:	f100 0114 	add.w	r1, r0, #20
 800c984:	f100 0210 	add.w	r2, r0, #16
 800c988:	4618      	mov	r0, r3
 800c98a:	4553      	cmp	r3, sl
 800c98c:	db33      	blt.n	800c9f6 <__lshift+0xb6>
 800c98e:	6920      	ldr	r0, [r4, #16]
 800c990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c994:	f104 0314 	add.w	r3, r4, #20
 800c998:	f019 091f 	ands.w	r9, r9, #31
 800c99c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9a4:	d02b      	beq.n	800c9fe <__lshift+0xbe>
 800c9a6:	f1c9 0e20 	rsb	lr, r9, #32
 800c9aa:	468a      	mov	sl, r1
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	fa00 f009 	lsl.w	r0, r0, r9
 800c9b4:	4310      	orrs	r0, r2
 800c9b6:	f84a 0b04 	str.w	r0, [sl], #4
 800c9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9be:	459c      	cmp	ip, r3
 800c9c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9c4:	d8f3      	bhi.n	800c9ae <__lshift+0x6e>
 800c9c6:	ebac 0304 	sub.w	r3, ip, r4
 800c9ca:	3b15      	subs	r3, #21
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	f104 0015 	add.w	r0, r4, #21
 800c9d6:	4560      	cmp	r0, ip
 800c9d8:	bf88      	it	hi
 800c9da:	2304      	movhi	r3, #4
 800c9dc:	50ca      	str	r2, [r1, r3]
 800c9de:	b10a      	cbz	r2, 800c9e4 <__lshift+0xa4>
 800c9e0:	f108 0602 	add.w	r6, r8, #2
 800c9e4:	3e01      	subs	r6, #1
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	612e      	str	r6, [r5, #16]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f7ff fde2 	bl	800c5b4 <_Bfree>
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	e7c5      	b.n	800c98a <__lshift+0x4a>
 800c9fe:	3904      	subs	r1, #4
 800ca00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca08:	459c      	cmp	ip, r3
 800ca0a:	d8f9      	bhi.n	800ca00 <__lshift+0xc0>
 800ca0c:	e7ea      	b.n	800c9e4 <__lshift+0xa4>
 800ca0e:	bf00      	nop
 800ca10:	0800d534 	.word	0x0800d534
 800ca14:	0800d545 	.word	0x0800d545

0800ca18 <__mcmp>:
 800ca18:	690a      	ldr	r2, [r1, #16]
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6900      	ldr	r0, [r0, #16]
 800ca1e:	1a80      	subs	r0, r0, r2
 800ca20:	b530      	push	{r4, r5, lr}
 800ca22:	d10e      	bne.n	800ca42 <__mcmp+0x2a>
 800ca24:	3314      	adds	r3, #20
 800ca26:	3114      	adds	r1, #20
 800ca28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca38:	4295      	cmp	r5, r2
 800ca3a:	d003      	beq.n	800ca44 <__mcmp+0x2c>
 800ca3c:	d205      	bcs.n	800ca4a <__mcmp+0x32>
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	bd30      	pop	{r4, r5, pc}
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d3f3      	bcc.n	800ca30 <__mcmp+0x18>
 800ca48:	e7fb      	b.n	800ca42 <__mcmp+0x2a>
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e7f9      	b.n	800ca42 <__mcmp+0x2a>
	...

0800ca50 <__mdiff>:
 800ca50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	4689      	mov	r9, r1
 800ca56:	4606      	mov	r6, r0
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	4614      	mov	r4, r2
 800ca5e:	f7ff ffdb 	bl	800ca18 <__mcmp>
 800ca62:	1e05      	subs	r5, r0, #0
 800ca64:	d112      	bne.n	800ca8c <__mdiff+0x3c>
 800ca66:	4629      	mov	r1, r5
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7ff fd63 	bl	800c534 <_Balloc>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	b928      	cbnz	r0, 800ca7e <__mdiff+0x2e>
 800ca72:	4b3f      	ldr	r3, [pc, #252]	@ (800cb70 <__mdiff+0x120>)
 800ca74:	f240 2137 	movw	r1, #567	@ 0x237
 800ca78:	483e      	ldr	r0, [pc, #248]	@ (800cb74 <__mdiff+0x124>)
 800ca7a:	f7fd ffdf 	bl	800aa3c <__assert_func>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca84:	4610      	mov	r0, r2
 800ca86:	b003      	add	sp, #12
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	bfbc      	itt	lt
 800ca8e:	464b      	movlt	r3, r9
 800ca90:	46a1      	movlt	r9, r4
 800ca92:	4630      	mov	r0, r6
 800ca94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ca98:	bfba      	itte	lt
 800ca9a:	461c      	movlt	r4, r3
 800ca9c:	2501      	movlt	r5, #1
 800ca9e:	2500      	movge	r5, #0
 800caa0:	f7ff fd48 	bl	800c534 <_Balloc>
 800caa4:	4602      	mov	r2, r0
 800caa6:	b918      	cbnz	r0, 800cab0 <__mdiff+0x60>
 800caa8:	4b31      	ldr	r3, [pc, #196]	@ (800cb70 <__mdiff+0x120>)
 800caaa:	f240 2145 	movw	r1, #581	@ 0x245
 800caae:	e7e3      	b.n	800ca78 <__mdiff+0x28>
 800cab0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cab4:	6926      	ldr	r6, [r4, #16]
 800cab6:	60c5      	str	r5, [r0, #12]
 800cab8:	f109 0310 	add.w	r3, r9, #16
 800cabc:	f109 0514 	add.w	r5, r9, #20
 800cac0:	f104 0e14 	add.w	lr, r4, #20
 800cac4:	f100 0b14 	add.w	fp, r0, #20
 800cac8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cacc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	46d9      	mov	r9, fp
 800cad4:	f04f 0c00 	mov.w	ip, #0
 800cad8:	9b01      	ldr	r3, [sp, #4]
 800cada:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cade:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cae2:	9301      	str	r3, [sp, #4]
 800cae4:	fa1f f38a 	uxth.w	r3, sl
 800cae8:	4619      	mov	r1, r3
 800caea:	b283      	uxth	r3, r0
 800caec:	1acb      	subs	r3, r1, r3
 800caee:	0c00      	lsrs	r0, r0, #16
 800caf0:	4463      	add	r3, ip
 800caf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800caf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb00:	4576      	cmp	r6, lr
 800cb02:	f849 3b04 	str.w	r3, [r9], #4
 800cb06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb0a:	d8e5      	bhi.n	800cad8 <__mdiff+0x88>
 800cb0c:	1b33      	subs	r3, r6, r4
 800cb0e:	3b15      	subs	r3, #21
 800cb10:	f023 0303 	bic.w	r3, r3, #3
 800cb14:	3415      	adds	r4, #21
 800cb16:	3304      	adds	r3, #4
 800cb18:	42a6      	cmp	r6, r4
 800cb1a:	bf38      	it	cc
 800cb1c:	2304      	movcc	r3, #4
 800cb1e:	441d      	add	r5, r3
 800cb20:	445b      	add	r3, fp
 800cb22:	461e      	mov	r6, r3
 800cb24:	462c      	mov	r4, r5
 800cb26:	4544      	cmp	r4, r8
 800cb28:	d30e      	bcc.n	800cb48 <__mdiff+0xf8>
 800cb2a:	f108 0103 	add.w	r1, r8, #3
 800cb2e:	1b49      	subs	r1, r1, r5
 800cb30:	f021 0103 	bic.w	r1, r1, #3
 800cb34:	3d03      	subs	r5, #3
 800cb36:	45a8      	cmp	r8, r5
 800cb38:	bf38      	it	cc
 800cb3a:	2100      	movcc	r1, #0
 800cb3c:	440b      	add	r3, r1
 800cb3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb42:	b191      	cbz	r1, 800cb6a <__mdiff+0x11a>
 800cb44:	6117      	str	r7, [r2, #16]
 800cb46:	e79d      	b.n	800ca84 <__mdiff+0x34>
 800cb48:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb4c:	46e6      	mov	lr, ip
 800cb4e:	0c08      	lsrs	r0, r1, #16
 800cb50:	fa1c fc81 	uxtah	ip, ip, r1
 800cb54:	4471      	add	r1, lr
 800cb56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb5a:	b289      	uxth	r1, r1
 800cb5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb60:	f846 1b04 	str.w	r1, [r6], #4
 800cb64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb68:	e7dd      	b.n	800cb26 <__mdiff+0xd6>
 800cb6a:	3f01      	subs	r7, #1
 800cb6c:	e7e7      	b.n	800cb3e <__mdiff+0xee>
 800cb6e:	bf00      	nop
 800cb70:	0800d534 	.word	0x0800d534
 800cb74:	0800d545 	.word	0x0800d545

0800cb78 <__d2b>:
 800cb78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	2101      	movs	r1, #1
 800cb80:	ec59 8b10 	vmov	r8, r9, d0
 800cb84:	4616      	mov	r6, r2
 800cb86:	f7ff fcd5 	bl	800c534 <_Balloc>
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	b930      	cbnz	r0, 800cb9c <__d2b+0x24>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	4b23      	ldr	r3, [pc, #140]	@ (800cc20 <__d2b+0xa8>)
 800cb92:	4824      	ldr	r0, [pc, #144]	@ (800cc24 <__d2b+0xac>)
 800cb94:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb98:	f7fd ff50 	bl	800aa3c <__assert_func>
 800cb9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cba4:	b10d      	cbz	r5, 800cbaa <__d2b+0x32>
 800cba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbaa:	9301      	str	r3, [sp, #4]
 800cbac:	f1b8 0300 	subs.w	r3, r8, #0
 800cbb0:	d023      	beq.n	800cbfa <__d2b+0x82>
 800cbb2:	4668      	mov	r0, sp
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	f7ff fd84 	bl	800c6c2 <__lo0bits>
 800cbba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbbe:	b1d0      	cbz	r0, 800cbf6 <__d2b+0x7e>
 800cbc0:	f1c0 0320 	rsb	r3, r0, #32
 800cbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc8:	430b      	orrs	r3, r1
 800cbca:	40c2      	lsrs	r2, r0
 800cbcc:	6163      	str	r3, [r4, #20]
 800cbce:	9201      	str	r2, [sp, #4]
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	61a3      	str	r3, [r4, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bf0c      	ite	eq
 800cbd8:	2201      	moveq	r2, #1
 800cbda:	2202      	movne	r2, #2
 800cbdc:	6122      	str	r2, [r4, #16]
 800cbde:	b1a5      	cbz	r5, 800cc0a <__d2b+0x92>
 800cbe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbe4:	4405      	add	r5, r0
 800cbe6:	603d      	str	r5, [r7, #0]
 800cbe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbec:	6030      	str	r0, [r6, #0]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	b003      	add	sp, #12
 800cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	6161      	str	r1, [r4, #20]
 800cbf8:	e7ea      	b.n	800cbd0 <__d2b+0x58>
 800cbfa:	a801      	add	r0, sp, #4
 800cbfc:	f7ff fd61 	bl	800c6c2 <__lo0bits>
 800cc00:	9b01      	ldr	r3, [sp, #4]
 800cc02:	6163      	str	r3, [r4, #20]
 800cc04:	3020      	adds	r0, #32
 800cc06:	2201      	movs	r2, #1
 800cc08:	e7e8      	b.n	800cbdc <__d2b+0x64>
 800cc0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc12:	6038      	str	r0, [r7, #0]
 800cc14:	6918      	ldr	r0, [r3, #16]
 800cc16:	f7ff fd35 	bl	800c684 <__hi0bits>
 800cc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc1e:	e7e5      	b.n	800cbec <__d2b+0x74>
 800cc20:	0800d534 	.word	0x0800d534
 800cc24:	0800d545 	.word	0x0800d545

0800cc28 <__sfputc_r>:
 800cc28:	6893      	ldr	r3, [r2, #8]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	b410      	push	{r4}
 800cc30:	6093      	str	r3, [r2, #8]
 800cc32:	da08      	bge.n	800cc46 <__sfputc_r+0x1e>
 800cc34:	6994      	ldr	r4, [r2, #24]
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	db01      	blt.n	800cc3e <__sfputc_r+0x16>
 800cc3a:	290a      	cmp	r1, #10
 800cc3c:	d103      	bne.n	800cc46 <__sfputc_r+0x1e>
 800cc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc42:	f000 b9df 	b.w	800d004 <__swbuf_r>
 800cc46:	6813      	ldr	r3, [r2, #0]
 800cc48:	1c58      	adds	r0, r3, #1
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	7019      	strb	r1, [r3, #0]
 800cc4e:	4608      	mov	r0, r1
 800cc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <__sfputs_r>:
 800cc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc58:	4606      	mov	r6, r0
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	18d5      	adds	r5, r2, r3
 800cc60:	42ac      	cmp	r4, r5
 800cc62:	d101      	bne.n	800cc68 <__sfputs_r+0x12>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e007      	b.n	800cc78 <__sfputs_r+0x22>
 800cc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ffda 	bl	800cc28 <__sfputc_r>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d1f3      	bne.n	800cc60 <__sfputs_r+0xa>
 800cc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc7c <_vfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	b09d      	sub	sp, #116	@ 0x74
 800cc84:	4614      	mov	r4, r2
 800cc86:	4698      	mov	r8, r3
 800cc88:	4606      	mov	r6, r0
 800cc8a:	b118      	cbz	r0, 800cc94 <_vfiprintf_r+0x18>
 800cc8c:	6a03      	ldr	r3, [r0, #32]
 800cc8e:	b90b      	cbnz	r3, 800cc94 <_vfiprintf_r+0x18>
 800cc90:	f7fe fc8a 	bl	800b5a8 <__sinit>
 800cc94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc96:	07d9      	lsls	r1, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	059a      	lsls	r2, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cca2:	f7fe fd9a 	bl	800b7da <__retarget_lock_acquire_recursive>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d501      	bpl.n	800ccb0 <_vfiprintf_r+0x34>
 800ccac:	692b      	ldr	r3, [r5, #16]
 800ccae:	b99b      	cbnz	r3, 800ccd8 <_vfiprintf_r+0x5c>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f000 f9e4 	bl	800d080 <__swsetup_r>
 800ccb8:	b170      	cbz	r0, 800ccd8 <_vfiprintf_r+0x5c>
 800ccba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccbc:	07dc      	lsls	r4, r3, #31
 800ccbe:	d504      	bpl.n	800ccca <_vfiprintf_r+0x4e>
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	b01d      	add	sp, #116	@ 0x74
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	89ab      	ldrh	r3, [r5, #12]
 800cccc:	0598      	lsls	r0, r3, #22
 800ccce:	d4f7      	bmi.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccd2:	f7fe fd83 	bl	800b7dc <__retarget_lock_release_recursive>
 800ccd6:	e7f3      	b.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cce2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce6:	2330      	movs	r3, #48	@ 0x30
 800cce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce98 <_vfiprintf_r+0x21c>
 800ccec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccf0:	f04f 0901 	mov.w	r9, #1
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	469a      	mov	sl, r3
 800ccf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfc:	b10a      	cbz	r2, 800cd02 <_vfiprintf_r+0x86>
 800ccfe:	2a25      	cmp	r2, #37	@ 0x25
 800cd00:	d1f9      	bne.n	800ccf6 <_vfiprintf_r+0x7a>
 800cd02:	ebba 0b04 	subs.w	fp, sl, r4
 800cd06:	d00b      	beq.n	800cd20 <_vfiprintf_r+0xa4>
 800cd08:	465b      	mov	r3, fp
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ffa1 	bl	800cc56 <__sfputs_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f000 80a7 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd1c:	445a      	add	r2, fp
 800cd1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd20:	f89a 3000 	ldrb.w	r3, [sl]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 809f 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd34:	f10a 0a01 	add.w	sl, sl, #1
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd40:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd42:	4654      	mov	r4, sl
 800cd44:	2205      	movs	r2, #5
 800cd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4a:	4853      	ldr	r0, [pc, #332]	@ (800ce98 <_vfiprintf_r+0x21c>)
 800cd4c:	f7f3 fa40 	bl	80001d0 <memchr>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	b9d8      	cbnz	r0, 800cd8c <_vfiprintf_r+0x110>
 800cd54:	06d1      	lsls	r1, r2, #27
 800cd56:	bf44      	itt	mi
 800cd58:	2320      	movmi	r3, #32
 800cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd5e:	0713      	lsls	r3, r2, #28
 800cd60:	bf44      	itt	mi
 800cd62:	232b      	movmi	r3, #43	@ 0x2b
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6e:	d015      	beq.n	800cd9c <_vfiprintf_r+0x120>
 800cd70:	9a07      	ldr	r2, [sp, #28]
 800cd72:	4654      	mov	r4, sl
 800cd74:	2000      	movs	r0, #0
 800cd76:	f04f 0c0a 	mov.w	ip, #10
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd80:	3b30      	subs	r3, #48	@ 0x30
 800cd82:	2b09      	cmp	r3, #9
 800cd84:	d94b      	bls.n	800ce1e <_vfiprintf_r+0x1a2>
 800cd86:	b1b0      	cbz	r0, 800cdb6 <_vfiprintf_r+0x13a>
 800cd88:	9207      	str	r2, [sp, #28]
 800cd8a:	e014      	b.n	800cdb6 <_vfiprintf_r+0x13a>
 800cd8c:	eba0 0308 	sub.w	r3, r0, r8
 800cd90:	fa09 f303 	lsl.w	r3, r9, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	9304      	str	r3, [sp, #16]
 800cd98:	46a2      	mov	sl, r4
 800cd9a:	e7d2      	b.n	800cd42 <_vfiprintf_r+0xc6>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	1d19      	adds	r1, r3, #4
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	9103      	str	r1, [sp, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbb      	ittet	lt
 800cda8:	425b      	neglt	r3, r3
 800cdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdae:	9307      	strge	r3, [sp, #28]
 800cdb0:	9307      	strlt	r3, [sp, #28]
 800cdb2:	bfb8      	it	lt
 800cdb4:	9204      	strlt	r2, [sp, #16]
 800cdb6:	7823      	ldrb	r3, [r4, #0]
 800cdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdba:	d10a      	bne.n	800cdd2 <_vfiprintf_r+0x156>
 800cdbc:	7863      	ldrb	r3, [r4, #1]
 800cdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc0:	d132      	bne.n	800ce28 <_vfiprintf_r+0x1ac>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	1d1a      	adds	r2, r3, #4
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	9203      	str	r2, [sp, #12]
 800cdca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdce:	3402      	adds	r4, #2
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cea8 <_vfiprintf_r+0x22c>
 800cdd6:	7821      	ldrb	r1, [r4, #0]
 800cdd8:	2203      	movs	r2, #3
 800cdda:	4650      	mov	r0, sl
 800cddc:	f7f3 f9f8 	bl	80001d0 <memchr>
 800cde0:	b138      	cbz	r0, 800cdf2 <_vfiprintf_r+0x176>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	eba0 000a 	sub.w	r0, r0, sl
 800cde8:	2240      	movs	r2, #64	@ 0x40
 800cdea:	4082      	lsls	r2, r0
 800cdec:	4313      	orrs	r3, r2
 800cdee:	3401      	adds	r4, #1
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf6:	4829      	ldr	r0, [pc, #164]	@ (800ce9c <_vfiprintf_r+0x220>)
 800cdf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdfc:	2206      	movs	r2, #6
 800cdfe:	f7f3 f9e7 	bl	80001d0 <memchr>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d03f      	beq.n	800ce86 <_vfiprintf_r+0x20a>
 800ce06:	4b26      	ldr	r3, [pc, #152]	@ (800cea0 <_vfiprintf_r+0x224>)
 800ce08:	bb1b      	cbnz	r3, 800ce52 <_vfiprintf_r+0x1d6>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	3307      	adds	r3, #7
 800ce0e:	f023 0307 	bic.w	r3, r3, #7
 800ce12:	3308      	adds	r3, #8
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	443b      	add	r3, r7
 800ce1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce1c:	e76a      	b.n	800ccf4 <_vfiprintf_r+0x78>
 800ce1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce22:	460c      	mov	r4, r1
 800ce24:	2001      	movs	r0, #1
 800ce26:	e7a8      	b.n	800cd7a <_vfiprintf_r+0xfe>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	3401      	adds	r4, #1
 800ce2c:	9305      	str	r3, [sp, #20]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f04f 0c0a 	mov.w	ip, #10
 800ce34:	4620      	mov	r0, r4
 800ce36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce3a:	3a30      	subs	r2, #48	@ 0x30
 800ce3c:	2a09      	cmp	r2, #9
 800ce3e:	d903      	bls.n	800ce48 <_vfiprintf_r+0x1cc>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0c6      	beq.n	800cdd2 <_vfiprintf_r+0x156>
 800ce44:	9105      	str	r1, [sp, #20]
 800ce46:	e7c4      	b.n	800cdd2 <_vfiprintf_r+0x156>
 800ce48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e7f0      	b.n	800ce34 <_vfiprintf_r+0x1b8>
 800ce52:	ab03      	add	r3, sp, #12
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	462a      	mov	r2, r5
 800ce58:	4b12      	ldr	r3, [pc, #72]	@ (800cea4 <_vfiprintf_r+0x228>)
 800ce5a:	a904      	add	r1, sp, #16
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7fd ff61 	bl	800ad24 <_printf_float>
 800ce62:	4607      	mov	r7, r0
 800ce64:	1c78      	adds	r0, r7, #1
 800ce66:	d1d6      	bne.n	800ce16 <_vfiprintf_r+0x19a>
 800ce68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce6a:	07d9      	lsls	r1, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce76:	f7fe fcb1 	bl	800b7dc <__retarget_lock_release_recursive>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	065b      	lsls	r3, r3, #25
 800ce7e:	f53f af1f 	bmi.w	800ccc0 <_vfiprintf_r+0x44>
 800ce82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce84:	e71e      	b.n	800ccc4 <_vfiprintf_r+0x48>
 800ce86:	ab03      	add	r3, sp, #12
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <_vfiprintf_r+0x228>)
 800ce8e:	a904      	add	r1, sp, #16
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7fe f9df 	bl	800b254 <_printf_i>
 800ce96:	e7e4      	b.n	800ce62 <_vfiprintf_r+0x1e6>
 800ce98:	0800d59e 	.word	0x0800d59e
 800ce9c:	0800d5a8 	.word	0x0800d5a8
 800cea0:	0800ad25 	.word	0x0800ad25
 800cea4:	0800cc57 	.word	0x0800cc57
 800cea8:	0800d5a4 	.word	0x0800d5a4

0800ceac <__sflush_r>:
 800ceac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb4:	0716      	lsls	r6, r2, #28
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	460c      	mov	r4, r1
 800ceba:	d454      	bmi.n	800cf66 <__sflush_r+0xba>
 800cebc:	684b      	ldr	r3, [r1, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dc02      	bgt.n	800cec8 <__sflush_r+0x1c>
 800cec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	dd48      	ble.n	800cf5a <__sflush_r+0xae>
 800cec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ceca:	2e00      	cmp	r6, #0
 800cecc:	d045      	beq.n	800cf5a <__sflush_r+0xae>
 800cece:	2300      	movs	r3, #0
 800ced0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ced4:	682f      	ldr	r7, [r5, #0]
 800ced6:	6a21      	ldr	r1, [r4, #32]
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	d030      	beq.n	800cf3e <__sflush_r+0x92>
 800cedc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	0759      	lsls	r1, r3, #29
 800cee2:	d505      	bpl.n	800cef0 <__sflush_r+0x44>
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	1ad2      	subs	r2, r2, r3
 800cee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ceea:	b10b      	cbz	r3, 800cef0 <__sflush_r+0x44>
 800ceec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	2300      	movs	r3, #0
 800cef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cef4:	6a21      	ldr	r1, [r4, #32]
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b0      	blx	r6
 800cefa:	1c43      	adds	r3, r0, #1
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	d106      	bne.n	800cf0e <__sflush_r+0x62>
 800cf00:	6829      	ldr	r1, [r5, #0]
 800cf02:	291d      	cmp	r1, #29
 800cf04:	d82b      	bhi.n	800cf5e <__sflush_r+0xb2>
 800cf06:	4a2a      	ldr	r2, [pc, #168]	@ (800cfb0 <__sflush_r+0x104>)
 800cf08:	40ca      	lsrs	r2, r1
 800cf0a:	07d6      	lsls	r6, r2, #31
 800cf0c:	d527      	bpl.n	800cf5e <__sflush_r+0xb2>
 800cf0e:	2200      	movs	r2, #0
 800cf10:	6062      	str	r2, [r4, #4]
 800cf12:	04d9      	lsls	r1, r3, #19
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	6022      	str	r2, [r4, #0]
 800cf18:	d504      	bpl.n	800cf24 <__sflush_r+0x78>
 800cf1a:	1c42      	adds	r2, r0, #1
 800cf1c:	d101      	bne.n	800cf22 <__sflush_r+0x76>
 800cf1e:	682b      	ldr	r3, [r5, #0]
 800cf20:	b903      	cbnz	r3, 800cf24 <__sflush_r+0x78>
 800cf22:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf26:	602f      	str	r7, [r5, #0]
 800cf28:	b1b9      	cbz	r1, 800cf5a <__sflush_r+0xae>
 800cf2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf2e:	4299      	cmp	r1, r3
 800cf30:	d002      	beq.n	800cf38 <__sflush_r+0x8c>
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7ff fab4 	bl	800c4a0 <_free_r>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf3c:	e00d      	b.n	800cf5a <__sflush_r+0xae>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b0      	blx	r6
 800cf44:	4602      	mov	r2, r0
 800cf46:	1c50      	adds	r0, r2, #1
 800cf48:	d1c9      	bne.n	800cede <__sflush_r+0x32>
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d0c6      	beq.n	800cede <__sflush_r+0x32>
 800cf50:	2b1d      	cmp	r3, #29
 800cf52:	d001      	beq.n	800cf58 <__sflush_r+0xac>
 800cf54:	2b16      	cmp	r3, #22
 800cf56:	d11e      	bne.n	800cf96 <__sflush_r+0xea>
 800cf58:	602f      	str	r7, [r5, #0]
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e022      	b.n	800cfa4 <__sflush_r+0xf8>
 800cf5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf62:	b21b      	sxth	r3, r3
 800cf64:	e01b      	b.n	800cf9e <__sflush_r+0xf2>
 800cf66:	690f      	ldr	r7, [r1, #16]
 800cf68:	2f00      	cmp	r7, #0
 800cf6a:	d0f6      	beq.n	800cf5a <__sflush_r+0xae>
 800cf6c:	0793      	lsls	r3, r2, #30
 800cf6e:	680e      	ldr	r6, [r1, #0]
 800cf70:	bf08      	it	eq
 800cf72:	694b      	ldreq	r3, [r1, #20]
 800cf74:	600f      	str	r7, [r1, #0]
 800cf76:	bf18      	it	ne
 800cf78:	2300      	movne	r3, #0
 800cf7a:	eba6 0807 	sub.w	r8, r6, r7
 800cf7e:	608b      	str	r3, [r1, #8]
 800cf80:	f1b8 0f00 	cmp.w	r8, #0
 800cf84:	dde9      	ble.n	800cf5a <__sflush_r+0xae>
 800cf86:	6a21      	ldr	r1, [r4, #32]
 800cf88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf8a:	4643      	mov	r3, r8
 800cf8c:	463a      	mov	r2, r7
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b0      	blx	r6
 800cf92:	2800      	cmp	r0, #0
 800cf94:	dc08      	bgt.n	800cfa8 <__sflush_r+0xfc>
 800cf96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa8:	4407      	add	r7, r0
 800cfaa:	eba8 0800 	sub.w	r8, r8, r0
 800cfae:	e7e7      	b.n	800cf80 <__sflush_r+0xd4>
 800cfb0:	20400001 	.word	0x20400001

0800cfb4 <_fflush_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	690b      	ldr	r3, [r1, #16]
 800cfb8:	4605      	mov	r5, r0
 800cfba:	460c      	mov	r4, r1
 800cfbc:	b913      	cbnz	r3, 800cfc4 <_fflush_r+0x10>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	b118      	cbz	r0, 800cfce <_fflush_r+0x1a>
 800cfc6:	6a03      	ldr	r3, [r0, #32]
 800cfc8:	b90b      	cbnz	r3, 800cfce <_fflush_r+0x1a>
 800cfca:	f7fe faed 	bl	800b5a8 <__sinit>
 800cfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0f3      	beq.n	800cfbe <_fflush_r+0xa>
 800cfd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfd8:	07d0      	lsls	r0, r2, #31
 800cfda:	d404      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfdc:	0599      	lsls	r1, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfe2:	f7fe fbfa 	bl	800b7da <__retarget_lock_acquire_recursive>
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f7ff ff5f 	bl	800ceac <__sflush_r>
 800cfee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cff0:	07da      	lsls	r2, r3, #31
 800cff2:	4605      	mov	r5, r0
 800cff4:	d4e4      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	059b      	lsls	r3, r3, #22
 800cffa:	d4e1      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cffe:	f7fe fbed 	bl	800b7dc <__retarget_lock_release_recursive>
 800d002:	e7dd      	b.n	800cfc0 <_fflush_r+0xc>

0800d004 <__swbuf_r>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	460e      	mov	r6, r1
 800d008:	4614      	mov	r4, r2
 800d00a:	4605      	mov	r5, r0
 800d00c:	b118      	cbz	r0, 800d016 <__swbuf_r+0x12>
 800d00e:	6a03      	ldr	r3, [r0, #32]
 800d010:	b90b      	cbnz	r3, 800d016 <__swbuf_r+0x12>
 800d012:	f7fe fac9 	bl	800b5a8 <__sinit>
 800d016:	69a3      	ldr	r3, [r4, #24]
 800d018:	60a3      	str	r3, [r4, #8]
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	071a      	lsls	r2, r3, #28
 800d01e:	d501      	bpl.n	800d024 <__swbuf_r+0x20>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	b943      	cbnz	r3, 800d036 <__swbuf_r+0x32>
 800d024:	4621      	mov	r1, r4
 800d026:	4628      	mov	r0, r5
 800d028:	f000 f82a 	bl	800d080 <__swsetup_r>
 800d02c:	b118      	cbz	r0, 800d036 <__swbuf_r+0x32>
 800d02e:	f04f 37ff 	mov.w	r7, #4294967295
 800d032:	4638      	mov	r0, r7
 800d034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	6922      	ldr	r2, [r4, #16]
 800d03a:	1a98      	subs	r0, r3, r2
 800d03c:	6963      	ldr	r3, [r4, #20]
 800d03e:	b2f6      	uxtb	r6, r6
 800d040:	4283      	cmp	r3, r0
 800d042:	4637      	mov	r7, r6
 800d044:	dc05      	bgt.n	800d052 <__swbuf_r+0x4e>
 800d046:	4621      	mov	r1, r4
 800d048:	4628      	mov	r0, r5
 800d04a:	f7ff ffb3 	bl	800cfb4 <_fflush_r>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d1ed      	bne.n	800d02e <__swbuf_r+0x2a>
 800d052:	68a3      	ldr	r3, [r4, #8]
 800d054:	3b01      	subs	r3, #1
 800d056:	60a3      	str	r3, [r4, #8]
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	6022      	str	r2, [r4, #0]
 800d05e:	701e      	strb	r6, [r3, #0]
 800d060:	6962      	ldr	r2, [r4, #20]
 800d062:	1c43      	adds	r3, r0, #1
 800d064:	429a      	cmp	r2, r3
 800d066:	d004      	beq.n	800d072 <__swbuf_r+0x6e>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	07db      	lsls	r3, r3, #31
 800d06c:	d5e1      	bpl.n	800d032 <__swbuf_r+0x2e>
 800d06e:	2e0a      	cmp	r6, #10
 800d070:	d1df      	bne.n	800d032 <__swbuf_r+0x2e>
 800d072:	4621      	mov	r1, r4
 800d074:	4628      	mov	r0, r5
 800d076:	f7ff ff9d 	bl	800cfb4 <_fflush_r>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0d9      	beq.n	800d032 <__swbuf_r+0x2e>
 800d07e:	e7d6      	b.n	800d02e <__swbuf_r+0x2a>

0800d080 <__swsetup_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4b29      	ldr	r3, [pc, #164]	@ (800d128 <__swsetup_r+0xa8>)
 800d084:	4605      	mov	r5, r0
 800d086:	6818      	ldr	r0, [r3, #0]
 800d088:	460c      	mov	r4, r1
 800d08a:	b118      	cbz	r0, 800d094 <__swsetup_r+0x14>
 800d08c:	6a03      	ldr	r3, [r0, #32]
 800d08e:	b90b      	cbnz	r3, 800d094 <__swsetup_r+0x14>
 800d090:	f7fe fa8a 	bl	800b5a8 <__sinit>
 800d094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d098:	0719      	lsls	r1, r3, #28
 800d09a:	d422      	bmi.n	800d0e2 <__swsetup_r+0x62>
 800d09c:	06da      	lsls	r2, r3, #27
 800d09e:	d407      	bmi.n	800d0b0 <__swsetup_r+0x30>
 800d0a0:	2209      	movs	r2, #9
 800d0a2:	602a      	str	r2, [r5, #0]
 800d0a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ae:	e033      	b.n	800d118 <__swsetup_r+0x98>
 800d0b0:	0758      	lsls	r0, r3, #29
 800d0b2:	d512      	bpl.n	800d0da <__swsetup_r+0x5a>
 800d0b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0b6:	b141      	cbz	r1, 800d0ca <__swsetup_r+0x4a>
 800d0b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0bc:	4299      	cmp	r1, r3
 800d0be:	d002      	beq.n	800d0c6 <__swsetup_r+0x46>
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f7ff f9ed 	bl	800c4a0 <_free_r>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0d0:	81a3      	strh	r3, [r4, #12]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	6063      	str	r3, [r4, #4]
 800d0d6:	6923      	ldr	r3, [r4, #16]
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	f043 0308 	orr.w	r3, r3, #8
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	b94b      	cbnz	r3, 800d0fa <__swsetup_r+0x7a>
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0f0:	d003      	beq.n	800d0fa <__swsetup_r+0x7a>
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	f000 f8c4 	bl	800d282 <__smakebuf_r>
 800d0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fe:	f013 0201 	ands.w	r2, r3, #1
 800d102:	d00a      	beq.n	800d11a <__swsetup_r+0x9a>
 800d104:	2200      	movs	r2, #0
 800d106:	60a2      	str	r2, [r4, #8]
 800d108:	6962      	ldr	r2, [r4, #20]
 800d10a:	4252      	negs	r2, r2
 800d10c:	61a2      	str	r2, [r4, #24]
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	b942      	cbnz	r2, 800d124 <__swsetup_r+0xa4>
 800d112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d116:	d1c5      	bne.n	800d0a4 <__swsetup_r+0x24>
 800d118:	bd38      	pop	{r3, r4, r5, pc}
 800d11a:	0799      	lsls	r1, r3, #30
 800d11c:	bf58      	it	pl
 800d11e:	6962      	ldrpl	r2, [r4, #20]
 800d120:	60a2      	str	r2, [r4, #8]
 800d122:	e7f4      	b.n	800d10e <__swsetup_r+0x8e>
 800d124:	2000      	movs	r0, #0
 800d126:	e7f7      	b.n	800d118 <__swsetup_r+0x98>
 800d128:	20000108 	.word	0x20000108

0800d12c <_raise_r>:
 800d12c:	291f      	cmp	r1, #31
 800d12e:	b538      	push	{r3, r4, r5, lr}
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	d904      	bls.n	800d140 <_raise_r+0x14>
 800d136:	2316      	movs	r3, #22
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	f04f 30ff 	mov.w	r0, #4294967295
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d142:	b112      	cbz	r2, 800d14a <_raise_r+0x1e>
 800d144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d148:	b94b      	cbnz	r3, 800d15e <_raise_r+0x32>
 800d14a:	4628      	mov	r0, r5
 800d14c:	f000 f830 	bl	800d1b0 <_getpid_r>
 800d150:	4622      	mov	r2, r4
 800d152:	4601      	mov	r1, r0
 800d154:	4628      	mov	r0, r5
 800d156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d15a:	f000 b817 	b.w	800d18c <_kill_r>
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d00a      	beq.n	800d178 <_raise_r+0x4c>
 800d162:	1c59      	adds	r1, r3, #1
 800d164:	d103      	bne.n	800d16e <_raise_r+0x42>
 800d166:	2316      	movs	r3, #22
 800d168:	6003      	str	r3, [r0, #0]
 800d16a:	2001      	movs	r0, #1
 800d16c:	e7e7      	b.n	800d13e <_raise_r+0x12>
 800d16e:	2100      	movs	r1, #0
 800d170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d174:	4620      	mov	r0, r4
 800d176:	4798      	blx	r3
 800d178:	2000      	movs	r0, #0
 800d17a:	e7e0      	b.n	800d13e <_raise_r+0x12>

0800d17c <raise>:
 800d17c:	4b02      	ldr	r3, [pc, #8]	@ (800d188 <raise+0xc>)
 800d17e:	4601      	mov	r1, r0
 800d180:	6818      	ldr	r0, [r3, #0]
 800d182:	f7ff bfd3 	b.w	800d12c <_raise_r>
 800d186:	bf00      	nop
 800d188:	20000108 	.word	0x20000108

0800d18c <_kill_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d07      	ldr	r5, [pc, #28]	@ (800d1ac <_kill_r+0x20>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	4611      	mov	r1, r2
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	f7f5 fcfb 	bl	8002b94 <_kill>
 800d19e:	1c43      	adds	r3, r0, #1
 800d1a0:	d102      	bne.n	800d1a8 <_kill_r+0x1c>
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	b103      	cbz	r3, 800d1a8 <_kill_r+0x1c>
 800d1a6:	6023      	str	r3, [r4, #0]
 800d1a8:	bd38      	pop	{r3, r4, r5, pc}
 800d1aa:	bf00      	nop
 800d1ac:	200020fc 	.word	0x200020fc

0800d1b0 <_getpid_r>:
 800d1b0:	f7f5 bce8 	b.w	8002b84 <_getpid>

0800d1b4 <memcpy>:
 800d1b4:	440a      	add	r2, r1
 800d1b6:	4291      	cmp	r1, r2
 800d1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1bc:	d100      	bne.n	800d1c0 <memcpy+0xc>
 800d1be:	4770      	bx	lr
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1ca:	4291      	cmp	r1, r2
 800d1cc:	d1f9      	bne.n	800d1c2 <memcpy+0xe>
 800d1ce:	bd10      	pop	{r4, pc}

0800d1d0 <_calloc_r>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	fba1 5402 	umull	r5, r4, r1, r2
 800d1d6:	b934      	cbnz	r4, 800d1e6 <_calloc_r+0x16>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	f7fd fc77 	bl	800aacc <_malloc_r>
 800d1de:	4606      	mov	r6, r0
 800d1e0:	b928      	cbnz	r0, 800d1ee <_calloc_r+0x1e>
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	bd70      	pop	{r4, r5, r6, pc}
 800d1e6:	220c      	movs	r2, #12
 800d1e8:	6002      	str	r2, [r0, #0]
 800d1ea:	2600      	movs	r6, #0
 800d1ec:	e7f9      	b.n	800d1e2 <_calloc_r+0x12>
 800d1ee:	462a      	mov	r2, r5
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	f7fe fa64 	bl	800b6be <memset>
 800d1f6:	e7f4      	b.n	800d1e2 <_calloc_r+0x12>

0800d1f8 <__ascii_mbtowc>:
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	b901      	cbnz	r1, 800d1fe <__ascii_mbtowc+0x6>
 800d1fc:	a901      	add	r1, sp, #4
 800d1fe:	b142      	cbz	r2, 800d212 <__ascii_mbtowc+0x1a>
 800d200:	b14b      	cbz	r3, 800d216 <__ascii_mbtowc+0x1e>
 800d202:	7813      	ldrb	r3, [r2, #0]
 800d204:	600b      	str	r3, [r1, #0]
 800d206:	7812      	ldrb	r2, [r2, #0]
 800d208:	1e10      	subs	r0, r2, #0
 800d20a:	bf18      	it	ne
 800d20c:	2001      	movne	r0, #1
 800d20e:	b002      	add	sp, #8
 800d210:	4770      	bx	lr
 800d212:	4610      	mov	r0, r2
 800d214:	e7fb      	b.n	800d20e <__ascii_mbtowc+0x16>
 800d216:	f06f 0001 	mvn.w	r0, #1
 800d21a:	e7f8      	b.n	800d20e <__ascii_mbtowc+0x16>

0800d21c <__ascii_wctomb>:
 800d21c:	4603      	mov	r3, r0
 800d21e:	4608      	mov	r0, r1
 800d220:	b141      	cbz	r1, 800d234 <__ascii_wctomb+0x18>
 800d222:	2aff      	cmp	r2, #255	@ 0xff
 800d224:	d904      	bls.n	800d230 <__ascii_wctomb+0x14>
 800d226:	228a      	movs	r2, #138	@ 0x8a
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	4770      	bx	lr
 800d230:	700a      	strb	r2, [r1, #0]
 800d232:	2001      	movs	r0, #1
 800d234:	4770      	bx	lr

0800d236 <__swhatbuf_r>:
 800d236:	b570      	push	{r4, r5, r6, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23e:	2900      	cmp	r1, #0
 800d240:	b096      	sub	sp, #88	@ 0x58
 800d242:	4615      	mov	r5, r2
 800d244:	461e      	mov	r6, r3
 800d246:	da0d      	bge.n	800d264 <__swhatbuf_r+0x2e>
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d24e:	f04f 0100 	mov.w	r1, #0
 800d252:	bf14      	ite	ne
 800d254:	2340      	movne	r3, #64	@ 0x40
 800d256:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d25a:	2000      	movs	r0, #0
 800d25c:	6031      	str	r1, [r6, #0]
 800d25e:	602b      	str	r3, [r5, #0]
 800d260:	b016      	add	sp, #88	@ 0x58
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	466a      	mov	r2, sp
 800d266:	f000 f849 	bl	800d2fc <_fstat_r>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	dbec      	blt.n	800d248 <__swhatbuf_r+0x12>
 800d26e:	9901      	ldr	r1, [sp, #4]
 800d270:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d274:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d278:	4259      	negs	r1, r3
 800d27a:	4159      	adcs	r1, r3
 800d27c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d280:	e7eb      	b.n	800d25a <__swhatbuf_r+0x24>

0800d282 <__smakebuf_r>:
 800d282:	898b      	ldrh	r3, [r1, #12]
 800d284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d286:	079d      	lsls	r5, r3, #30
 800d288:	4606      	mov	r6, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	d507      	bpl.n	800d29e <__smakebuf_r+0x1c>
 800d28e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d292:	6023      	str	r3, [r4, #0]
 800d294:	6123      	str	r3, [r4, #16]
 800d296:	2301      	movs	r3, #1
 800d298:	6163      	str	r3, [r4, #20]
 800d29a:	b003      	add	sp, #12
 800d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29e:	ab01      	add	r3, sp, #4
 800d2a0:	466a      	mov	r2, sp
 800d2a2:	f7ff ffc8 	bl	800d236 <__swhatbuf_r>
 800d2a6:	9f00      	ldr	r7, [sp, #0]
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7fd fc0d 	bl	800aacc <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x46>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ee      	bmi.n	800d29a <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e2      	b.n	800d28e <__smakebuf_r+0xc>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2d8:	b15b      	cbz	r3, 800d2f2 <__smakebuf_r+0x70>
 800d2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f000 f81e 	bl	800d320 <_isatty_r>
 800d2e4:	b128      	cbz	r0, 800d2f2 <__smakebuf_r+0x70>
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	f023 0303 	bic.w	r3, r3, #3
 800d2ec:	f043 0301 	orr.w	r3, r3, #1
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	431d      	orrs	r5, r3
 800d2f6:	81a5      	strh	r5, [r4, #12]
 800d2f8:	e7cf      	b.n	800d29a <__smakebuf_r+0x18>
	...

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	@ (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f5 fc87 	bl	8002c1c <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	200020fc 	.word	0x200020fc

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	@ (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f5 fc86 	bl	8002c3c <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	200020fc 	.word	0x200020fc

0800d340 <_init>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	bf00      	nop
 800d344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d346:	bc08      	pop	{r3}
 800d348:	469e      	mov	lr, r3
 800d34a:	4770      	bx	lr

0800d34c <_fini>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	bf00      	nop
 800d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d352:	bc08      	pop	{r3}
 800d354:	469e      	mov	lr, r3
 800d356:	4770      	bx	lr
