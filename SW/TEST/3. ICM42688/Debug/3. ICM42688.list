
3. ICM42688.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c000  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c190  0800c190  0000d190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5ec  0800c5ec  0000e2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5ec  0800c5ec  0000d5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f4  0800c5f4  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f4  0800c5f4  0000d5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5f8  0800c5f8  0000d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c5fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001d80  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002044  20002044  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132c3  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dcb  00000000  00000000  000215b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00025388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d12  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273f6  00000000  00000000  00027252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016131  00000000  00000000  0004e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d81dd  00000000  00000000  00064779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c956  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057f0  00000000  00000000  0013c99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014218c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c178 	.word	0x0800c178

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c178 	.word	0x0800c178

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	621a      	str	r2, [r3, #32]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	621a      	str	r2, [r3, #32]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <BuzzerPlayInit>:
void BuzzerPlayNote(Note note){
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
	return;
}

void BuzzerPlayInit(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f26:	f7ff ffd5 	bl	8000ed4 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f2c:	2215      	movs	r2, #21
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	@ 0x64
 8000f44:	f001 f96e 	bl	8002224 <HAL_Delay>
	TIM4->PSC = 1500;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f4a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f001 f967 	bl	8002224 <HAL_Delay>
	TIM4->PSC = 1000;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	@ 0x64
 8000f60:	f001 f960 	bl	8002224 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f6a:	f7ff ffc4 	bl	8000ef6 <LL_TIM_CC_DisableChannel>
	return;
 8000f6e:	bf00      	nop
}
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40000800 	.word	0x40000800

08000f78 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f023 0210 	bic.w	r2, r3, #16
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d101      	bne.n	8000ffc <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	330c      	adds	r3, #12
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330c      	adds	r3, #12
 8001036:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	041a      	lsls	r2, r3, #16
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800

080010b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800

080010e4 <ICM42688_GPIO_SPI_Initialization>:
Struct_ICM42688 ICM42688;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	@ 0x40
 80010e8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2228      	movs	r2, #40	@ 0x28
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 fa01 	bl	800a4fa <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001108:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800110c:	f7ff ffd2 	bl	80010b4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ffb7 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001116:	2010      	movs	r0, #16
 8001118:	f7ff ffb4 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800111c:	23e0      	movs	r3, #224	@ 0xe0
 800111e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001130:	2305      	movs	r3, #5
 8001132:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4820      	ldr	r0, [pc, #128]	@ (80011bc <ICM42688_GPIO_SPI_Initialization+0xd8>)
 800113a:	f003 fb50 	bl	80047de <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001142:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001146:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800115a:	2310      	movs	r3, #16
 800115c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001172:	f003 fd0e 	bl	8004b92 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001176:	2100      	movs	r1, #0
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800117a:	f7ff ff0d 	bl	8000f98 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 800117e:	2120      	movs	r1, #32
 8001180:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 8001182:	f7ff ff70 	bl	8001066 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 8001186:	2320      	movs	r3, #32
 8001188:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80011a0:	f003 fb1d 	bl	80047de <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80011a6:	f7ff fee7 	bl	8000f78 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80011aa:	2120      	movs	r1, #32
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80011ae:	f7ff ff4c 	bl	800104a <LL_GPIO_SetOutputPin>
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	@ 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40013000 	.word	0x40013000
 80011c4:	40021000 	.word	0x40021000

080011c8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80011d2:	bf00      	nop
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <SPI1_SendByte+0x40>)
 80011d6:	f7ff ff05 	bl	8000fe4 <LL_SPI_IsActiveFlag_TXE>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <SPI1_SendByte+0x40>)
 80011e6:	f7ff ff1e 	bl	8001026 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 80011ea:	bf00      	nop
 80011ec:	4806      	ldr	r0, [pc, #24]	@ (8001208 <SPI1_SendByte+0x40>)
 80011ee:	f7ff fee6 	bl	8000fbe <LL_SPI_IsActiveFlag_RXNE>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f9      	beq.n	80011ec <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <SPI1_SendByte+0x40>)
 80011fa:	f7ff ff06 	bl	800100a <LL_SPI_ReceiveData8>
 80011fe:	4603      	mov	r3, r0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013000 	.word	0x40013000

0800120c <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001216:	2120      	movs	r1, #32
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <ICM42688_Readbyte+0x3c>)
 800121a:	f7ff ff24 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffce 	bl	80011c8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffcb 	bl	80011c8 <SPI1_SendByte>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001236:	2120      	movs	r1, #32
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <ICM42688_Readbyte+0x3c>)
 800123a:	f7ff ff06 	bl	800104a <LL_GPIO_SetOutputPin>
	
	return val;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	603a      	str	r2, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 8001260:	2120      	movs	r1, #32
 8001262:	4810      	ldr	r0, [pc, #64]	@ (80012a4 <ICM42688_Readbytes+0x58>)
 8001264:	f7ff feff 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffa9 	bl	80011c8 <SPI1_SendByte>
	while(i < len)
 8001276:	e009      	b.n	800128c <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60fa      	str	r2, [r7, #12]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	18d4      	adds	r4, r2, r3
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ffa0 	bl	80011c8 <SPI1_SendByte>
 8001288:	4603      	mov	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f1      	bcc.n	8001278 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 8001294:	2120      	movs	r1, #32
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <ICM42688_Readbytes+0x58>)
 8001298:	f7ff fed7 	bl	800104a <LL_GPIO_SetOutputPin>
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40021000 	.word	0x40021000

080012a8 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80012b8:	2120      	movs	r1, #32
 80012ba:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <ICM42688_Writebyte+0x40>)
 80012bc:	f7ff fed3 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff7d 	bl	80011c8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff79 	bl	80011c8 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80012d6:	2120      	movs	r1, #32
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <ICM42688_Writebyte+0x40>)
 80012da:	f7ff feb6 	bl	800104a <LL_GPIO_SetOutputPin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 8001308:	f7ff feec 	bl	80010e4 <ICM42688_GPIO_SPI_Initialization>
	
	printf("Checking ICM42688...");
 800130c:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <ICM42688_Initialization+0xc8>)
 800130e:	f009 f89f 	bl	800a450 <iprintf>
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 8001312:	2075      	movs	r0, #117	@ 0x75
 8001314:	f7ff ff7a 	bl	800120c <ICM42688_Readbyte>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b47      	cmp	r3, #71	@ 0x47
 8001320:	d105      	bne.n	800132e <ICM42688_Initialization+0x42>
	{
		printf("\nICM42688 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	@ (80013b8 <ICM42688_Initialization+0xcc>)
 8001328:	f009 f892 	bl	800a450 <iprintf>
 800132c:	e012      	b.n	8001354 <ICM42688_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b47      	cmp	r3, #71	@ 0x47
 8001332:	d00f      	beq.n	8001354 <ICM42688_Initialization+0x68>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001334:	2075      	movs	r0, #117	@ 0x75
 8001336:	f7ff ff69 	bl	800120c <ICM42688_Readbyte>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d007      	beq.n	8001354 <ICM42688_Initialization+0x68>
			printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2212      	movs	r2, #18
 8001348:	4619      	mov	r1, r3
 800134a:	481c      	ldr	r0, [pc, #112]	@ (80013bc <ICM42688_Initialization+0xd0>)
 800134c:	f009 f880 	bl	800a450 <iprintf>
			return 1; //ERROR
 8001350:	2301      	movs	r3, #1
 8001352:	e02a      	b.n	80013aa <ICM42688_Initialization+0xbe>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001354:	210f      	movs	r1, #15
 8001356:	204e      	movs	r0, #78	@ 0x4e
 8001358:	f7ff ffa6 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800135c:	2032      	movs	r0, #50	@ 0x32
 800135e:	f000 ff61 	bl	8002224 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001362:	2106      	movs	r1, #6
 8001364:	204f      	movs	r0, #79	@ 0x4f
 8001366:	f7ff ff9f 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800136a:	2032      	movs	r0, #50	@ 0x32
 800136c:	f000 ff5a 	bl	8002224 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 8001370:	2100      	movs	r1, #0
 8001372:	2051      	movs	r0, #81	@ 0x51
 8001374:	f7ff ff98 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f000 ff53 	bl	8002224 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 800137e:	2106      	movs	r1, #6
 8001380:	2050      	movs	r0, #80	@ 0x50
 8001382:	f7ff ff91 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f000 ff4c 	bl	8002224 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 800138c:	2100      	movs	r1, #0
 800138e:	2053      	movs	r0, #83	@ 0x53
 8001390:	f7ff ff8a 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f000 ff45 	bl	8002224 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 800139a:	2111      	movs	r1, #17
 800139c:	2052      	movs	r0, #82	@ 0x52
 800139e:	f7ff ff83 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80013a2:	2032      	movs	r0, #50	@ 0x32
 80013a4:	f000 ff3e 	bl	8002224 <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	0800c190 	.word	0x0800c190
 80013b8:	0800c1a8 	.word	0x0800c1a8
 80013bc:	0800c1cc 	.word	0x0800c1cc

080013c0 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	unsigned char data[14];
	//ICM42688_Readbytes(TEMP_DATA1, 14, data);

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 80013c6:	463b      	mov	r3, r7
 80013c8:	461a      	mov	r2, r3
 80013ca:	210e      	movs	r1, #14
 80013cc:	201f      	movs	r0, #31
 80013ce:	f7ff ff3d 	bl	800124c <ICM42688_Readbytes>
	
	ICM42688.temperature_raw = (data[0] << 8) | data[1];
 80013d2:	783b      	ldrb	r3, [r7, #0]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 80013e4:	801a      	strh	r2, [r3, #0]
	ICM42688.acc_x_raw = (data[2] << 8) | data[3];
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 80013f8:	805a      	strh	r2, [r3, #2]
	ICM42688.acc_y_raw = (data[4] << 8) | data[5];
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 800140c:	809a      	strh	r2, [r3, #4]
	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	b21b      	sxth	r3, r3
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001420:	80da      	strh	r2, [r3, #6]
	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	b21b      	sxth	r3, r3
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	7a7b      	ldrb	r3, [r7, #9]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001434:	811a      	strh	r2, [r3, #8]
	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
 8001436:	7abb      	ldrb	r3, [r7, #10]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001448:	815a      	strh	r2, [r3, #10]
	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	b21b      	sxth	r3, r3
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 800145c:	819a      	strh	r2, [r3, #12]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002e0 	.word	0x200002e0

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_SPI_SetStandard>:
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 0210 	bic.w	r2, r3, #16
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_TIM_EnableCounter>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_TIM_DisableARRPreload>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d01c      	beq.n	800162e <LL_TIM_OC_DisableFast+0x4a>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d017      	beq.n	800162a <LL_TIM_OC_DisableFast+0x46>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d012      	beq.n	8001626 <LL_TIM_OC_DisableFast+0x42>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b40      	cmp	r3, #64	@ 0x40
 8001604:	d00d      	beq.n	8001622 <LL_TIM_OC_DisableFast+0x3e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800160c:	d007      	beq.n	800161e <LL_TIM_OC_DisableFast+0x3a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001614:	d101      	bne.n	800161a <LL_TIM_OC_DisableFast+0x36>
 8001616:	2305      	movs	r3, #5
 8001618:	e00a      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800161a:	2306      	movs	r3, #6
 800161c:	e008      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3318      	adds	r3, #24
 8001636:	4619      	mov	r1, r3
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <LL_TIM_OC_DisableFast+0x84>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	440b      	add	r3, r1
 8001640:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4908      	ldr	r1, [pc, #32]	@ (800166c <LL_TIM_OC_DisableFast+0x88>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	4619      	mov	r1, r3
 800164e:	2304      	movs	r3, #4
 8001650:	408b      	lsls	r3, r1
 8001652:	43db      	mvns	r3, r3
 8001654:	401a      	ands	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	601a      	str	r2, [r3, #0]

}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	0800c24c 	.word	0x0800c24c
 800166c:	0800c254 	.word	0x0800c254

08001670 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d01c      	beq.n	80016ba <LL_TIM_OC_EnablePreload+0x4a>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d017      	beq.n	80016b6 <LL_TIM_OC_EnablePreload+0x46>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d012      	beq.n	80016b2 <LL_TIM_OC_EnablePreload+0x42>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b40      	cmp	r3, #64	@ 0x40
 8001690:	d00d      	beq.n	80016ae <LL_TIM_OC_EnablePreload+0x3e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001698:	d007      	beq.n	80016aa <LL_TIM_OC_EnablePreload+0x3a>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016a0:	d101      	bne.n	80016a6 <LL_TIM_OC_EnablePreload+0x36>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e00a      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e008      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3318      	adds	r3, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LL_TIM_OC_EnablePreload+0x80>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	440b      	add	r3, r1
 80016cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <LL_TIM_OC_EnablePreload+0x84>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	4619      	mov	r1, r3
 80016da:	2308      	movs	r3, #8
 80016dc:	408b      	lsls	r3, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	0800c24c 	.word	0x0800c24c
 80016f4:	0800c254 	.word	0x0800c254

080016f8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	615a      	str	r2, [r3, #20]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	330c      	adds	r3, #12
 80017c0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	e853 3f00 	ldrex	r3, [r3]
 80017c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	330c      	adds	r3, #12
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	61ba      	str	r2, [r7, #24]
 80017da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017dc:	6979      	ldr	r1, [r7, #20]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	e841 2300 	strex	r3, r2, [r1]
 80017e4:	613b      	str	r3, [r7, #16]
   return(result);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e7      	bne.n	80017bc <LL_USART_EnableIT_RXNE+0x8>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_GPIO_ResetOutputPin>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <LL_AHB1_GRP1_EnableClock>:
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800184e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4013      	ands	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40023800 	.word	0x40023800

08001868 <LL_APB1_GRP1_EnableClock>:
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001874:	4907      	ldr	r1, [pc, #28]	@ (8001894 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <LL_APB1_GRP1_EnableClock+0x2c>)
 800187e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40023800 	.word	0x40023800

08001898 <LL_APB2_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018a4:	4907      	ldr	r1, [pc, #28]	@ (80018c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023800 	.word	0x40023800

080018c8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
		HAL_Delay(1);
	}
	*/

	// 송신 성공할때까지 시도
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t *)p, len)){}
 80018d4:	bf00      	nop
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f007 fb5f 	bl	8008f9c <CDC_Transmit_FS>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d0f8      	beq.n	80018d6 <_write+0xe>

	return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f000 fc24 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 f848 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fc:	f000 fa38 	bl	8001d70 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001900:	f000 f900 	bl	8001b04 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001904:	f000 f972 	bl	8001bec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001908:	f000 f9d0 	bl	8001cac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800190c:	f000 f8a8 	bl	8001a60 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001910:	f007 fa86 	bl	8008e20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8001914:	4816      	ldr	r0, [pc, #88]	@ (8001970 <main+0x80>)
 8001916:	f7ff fe45 	bl	80015a4 <LL_TIM_EnableCounter>
  BuzzerPlayInit();
 800191a:	f7ff faff 	bl	8000f1c <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART2);
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <main+0x84>)
 8001920:	f7ff ff48 	bl	80017b4 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8001924:	4814      	ldr	r0, [pc, #80]	@ (8001978 <main+0x88>)
 8001926:	f7ff ff45 	bl	80017b4 <LL_USART_EnableIT_RXNE>

  ICM42688_Initialization();
 800192a:	f7ff fcdf 	bl	80012ec <ICM42688_Initialization>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uart2_rx_flag == 1)
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <main+0x8c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d108      	bne.n	8001948 <main+0x58>
	  {
		  uart2_rx_flag = 0;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <main+0x8c>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART2, uart2_rx_data);
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <main+0x90>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <main+0x84>)
 8001944:	f7ff ff59 	bl	80017fa <LL_USART_TransmitData8>
	  }
	  ICM42688_Get6AxisRawData();
 8001948:	f7ff fd3a 	bl	80013c0 <ICM42688_Get6AxisRawData>
	  printf("%d %d %d\n\r", ICM42688.gyro_x_raw, ICM42688.gyro_y_raw, ICM42688.gyro_z_raw);
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <main+0x94>)
 800194e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001952:	4619      	mov	r1, r3
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <main+0x94>)
 8001956:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800195a:	461a      	mov	r2, r3
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <main+0x94>)
 800195e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <main+0x98>)
 8001964:	f008 fd74 	bl	800a450 <iprintf>
	  HAL_Delay(100);
 8001968:	2064      	movs	r0, #100	@ 0x64
 800196a:	f000 fc5b 	bl	8002224 <HAL_Delay>
	  if(uart2_rx_flag == 1)
 800196e:	e7de      	b.n	800192e <main+0x3e>
 8001970:	40000800 	.word	0x40000800
 8001974:	40004400 	.word	0x40004400
 8001978:	40004800 	.word	0x40004800
 800197c:	20000308 	.word	0x20000308
 8001980:	20000309 	.word	0x20000309
 8001984:	200002e0 	.word	0x200002e0
 8001988:	0800c1f8 	.word	0x0800c1f8

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	@ 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	@ 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f008 fdad 	bl	800a4fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a27      	ldr	r2, [pc, #156]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019fc:	2308      	movs	r3, #8
 80019fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a00:	23a8      	movs	r3, #168	@ 0xa8
 8001a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 f92b 	bl	8003c6c <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a1c:	f000 f9d8 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fb8c 	bl	800415c <HAL_RCC_ClockConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a4a:	f000 f9c1 	bl	8001dd0 <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3750      	adds	r7, #80	@ 0x50
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b090      	sub	sp, #64	@ 0x40
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	2228      	movs	r2, #40	@ 0x28
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f008 fd43 	bl	800a4fa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001a84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a88:	f7ff ff06 	bl	8001898 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff fed3 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001a92:	23e0      	movs	r3, #224	@ 0xe0
 8001a94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a96:	2302      	movs	r3, #2
 8001a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4813      	ldr	r0, [pc, #76]	@ (8001afc <MX_SPI1_Init+0x9c>)
 8001ab0:	f002 fe95 	bl	80047de <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ab8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001abc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001aca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001ad0:	2318      	movs	r3, #24
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001adc:	230a      	movs	r3, #10
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_SPI1_Init+0xa0>)
 8001ae8:	f003 f853 	bl	8004b92 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001aec:	2100      	movs	r1, #0
 8001aee:	4804      	ldr	r0, [pc, #16]	@ (8001b00 <MX_SPI1_Init+0xa0>)
 8001af0:	f7ff fd45 	bl	800157e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3740      	adds	r7, #64	@ 0x40
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40013000 	.word	0x40013000

08001b04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b094      	sub	sp, #80	@ 0x50
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2220      	movs	r2, #32
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f008 fce9 	bl	800a4fa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f7ff fe95 	bl	8001868 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b42:	2300      	movs	r3, #0
 8001b44:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8001b46:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <MX_TIM4_Init+0xdc>)
 8001b48:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001b4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4823      	ldr	r0, [pc, #140]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b56:	f003 f8e1 	bl	8004d1c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001b5a:	4822      	ldr	r0, [pc, #136]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b5c:	f7ff fd32 	bl	80015c4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4820      	ldr	r0, [pc, #128]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b64:	f7ff fdc8 	bl	80016f8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8001b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b6c:	481d      	ldr	r0, [pc, #116]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b6e:	f7ff fd7f 	bl	8001670 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	@ 0x60
 8001b74:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b90:	4814      	ldr	r0, [pc, #80]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b92:	f003 f95d 	bl	8004e50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8001b96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b9a:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001b9c:	f7ff fd22 	bl	80015e4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001ba4:	f7ff fdbd 	bl	8001722 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001ba8:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <MX_TIM4_Init+0xe0>)
 8001baa:	f7ff fdcd 	bl	8001748 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f7ff fe42 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_TIM4_Init+0xe4>)
 8001bd4:	f002 fe03 	bl	80047de <LL_GPIO_Init>

}
 8001bd8:	bf00      	nop
 8001bda:	3750      	adds	r7, #80	@ 0x50
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	fff0fadc 	.word	0xfff0fadc
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40020c00 	.word	0x40020c00

08001bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	@ 0x38
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001c16:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c1a:	f7ff fe25 	bl	8001868 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f7ff fe0a 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8001c24:	2378      	movs	r3, #120	@ 0x78
 8001c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4818      	ldr	r0, [pc, #96]	@ (8001ca4 <MX_USART2_UART_Init+0xb8>)
 8001c42:	f002 fdcc 	bl	80047de <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c46:	f7ff fc11 	bl	800146c <__NVIC_GetPriorityGrouping>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fc61 	bl	8001518 <NVIC_EncodePriority>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2026      	movs	r0, #38	@ 0x26
 8001c5c:	f7ff fc32 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001c60:	2026      	movs	r0, #38	@ 0x26
 8001c62:	f7ff fc11 	bl	8001488 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001c66:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001c6a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <MX_USART2_UART_Init+0xbc>)
 8001c8c:	f003 fd2e 	bl	80056ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_USART2_UART_Init+0xbc>)
 8001c92:	f7ff fd79 	bl	8001788 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c96:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <MX_USART2_UART_Init+0xbc>)
 8001c98:	f7ff fd66 	bl	8001768 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3738      	adds	r7, #56	@ 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40004400 	.word	0x40004400

08001cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001cd6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001cda:	f7ff fdc5 	bl	8001868 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001cde:	2008      	movs	r0, #8
 8001ce0:	f7ff fdaa 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001ce4:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8001ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cea:	2302      	movs	r3, #2
 8001cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4819      	ldr	r0, [pc, #100]	@ (8001d68 <MX_USART3_UART_Init+0xbc>)
 8001d04:	f002 fd6b 	bl	80047de <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d08:	f7ff fbb0 	bl	800146c <__NVIC_GetPriorityGrouping>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc00 	bl	8001518 <NVIC_EncodePriority>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2027      	movs	r0, #39	@ 0x27
 8001d1e:	f7ff fbd1 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001d22:	2027      	movs	r0, #39	@ 0x27
 8001d24:	f7ff fbb0 	bl	8001488 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001d28:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001d2c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <MX_USART3_UART_Init+0xc0>)
 8001d4e:	f003 fccd 	bl	80056ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <MX_USART3_UART_Init+0xc0>)
 8001d54:	f7ff fd18 	bl	8001788 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_USART3_UART_Init+0xc0>)
 8001d5a:	f7ff fd05 	bl	8001768 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3738      	adds	r7, #56	@ 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40004800 	.word	0x40004800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	463b      	mov	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001d86:	2010      	movs	r0, #16
 8001d88:	f7ff fd56 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001d8c:	2080      	movs	r0, #128	@ 0x80
 8001d8e:	f7ff fd53 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fd50 	bl	8001838 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001d98:	2008      	movs	r0, #8
 8001d9a:	f7ff fd4d 	bl	8001838 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin);
 8001d9e:	2127      	movs	r1, #39	@ 0x27
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <MX_GPIO_Init+0x5c>)
 8001da2:	f7ff fd39 	bl	8001818 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin;
 8001da6:	2327      	movs	r3, #39	@ 0x27
 8001da8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001daa:	2301      	movs	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MX_GPIO_Init+0x5c>)
 8001dc0:	f002 fd0d 	bl	80047de <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <LL_USART_IsActiveFlag_RXNE>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_USART_ClearFlag_RXNE>:
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f06f 0220 	mvn.w	r2, #32
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_USART_ReceiveData8>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <NMI_Handler+0x4>

08001e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <MemManage_Handler+0x4>

08001ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <UsageFault_Handler+0x4>

08001eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ede:	f000 f981 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <USART2_IRQHandler+0x30>)
 8001eee:	f7ff ff9d 	bl	8001e2c <LL_USART_IsActiveFlag_RXNE>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00c      	beq.n	8001f12 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8001ef8:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <USART2_IRQHandler+0x30>)
 8001efa:	f7ff ffaa 	bl	8001e52 <LL_USART_ClearFlag_RXNE>
		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <USART2_IRQHandler+0x30>)
 8001f00:	f7ff ffb5 	bl	8001e6e <LL_USART_ReceiveData8>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <USART2_IRQHandler+0x34>)
 8001f0a:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <USART2_IRQHandler+0x38>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	20000309 	.word	0x20000309
 8001f20:	20000308 	.word	0x20000308

08001f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8001f28:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <USART3_IRQHandler+0x30>)
 8001f2a:	f7ff ff7f 	bl	8001e2c <LL_USART_IsActiveFlag_RXNE>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <USART3_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8001f34:	4807      	ldr	r0, [pc, #28]	@ (8001f54 <USART3_IRQHandler+0x30>)
 8001f36:	f7ff ff8c 	bl	8001e52 <LL_USART_ClearFlag_RXNE>
		uart3_rx_data = LL_USART_ReceiveData8(USART3);
 8001f3a:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <USART3_IRQHandler+0x30>)
 8001f3c:	f7ff ff97 	bl	8001e6e <LL_USART_ReceiveData8>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <USART3_IRQHandler+0x34>)
 8001f46:	701a      	strb	r2, [r3, #0]
		uart3_rx_flag = 1;
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <USART3_IRQHandler+0x38>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40004800 	.word	0x40004800
 8001f58:	2000030b 	.word	0x2000030b
 8001f5c:	2000030a 	.word	0x2000030a

08001f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <OTG_FS_IRQHandler+0x10>)
 8001f66:	f000 fd73 	bl	8002a50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200017f4 	.word	0x200017f4

08001f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_kill>:

int _kill(int pid, int sig)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f8e:	f008 fb17 	bl	800a5c0 <__errno>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2216      	movs	r2, #22
 8001f96:	601a      	str	r2, [r3, #0]
  return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_exit>:

void _exit (int status)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ffe7 	bl	8001f84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb6:	bf00      	nop
 8001fb8:	e7fd      	b.n	8001fb6 <_exit+0x12>

08001fba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e00a      	b.n	8001fe2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	b2ca      	uxtb	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf0      	blt.n	8001fcc <_read+0x12>
  }

  return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	605a      	str	r2, [r3, #4]
  return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_isatty>:

int _isatty(int file)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f008 fa98 	bl	800a5c0 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20020000 	.word	0x20020000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	2000030c 	.word	0x2000030c
 80020c4:	20002048 	.word	0x20002048

080020c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002124 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020f0:	f7ff ffea 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	@ (8002138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f008 fa57 	bl	800a5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7ff fbe7 	bl	80018f0 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002130:	0800c5fc 	.word	0x0800c5fc
  ldr r2, =_sbss
 8002134:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002138:	20002044 	.word	0x20002044

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <HAL_Init+0x40>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <HAL_Init+0x40>)
 8002156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_Init+0x40>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f94f 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fe32 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f967 	bl	8002476 <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f92f 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	20000310 	.word	0x20000310

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000310 	.word	0x20000310

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008

0800226c <__NVIC_SetPriorityGrouping>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e16b      	b.n	8002784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 815a 	bne.w	800277e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80b4 	beq.w	800277e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b60      	ldr	r3, [pc, #384]	@ (800279c <HAL_GPIO_Init+0x30c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a5f      	ldr	r2, [pc, #380]	@ (800279c <HAL_GPIO_Init+0x30c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <HAL_GPIO_Init+0x30c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a5b      	ldr	r2, [pc, #364]	@ (80027a0 <HAL_GPIO_Init+0x310>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_GPIO_Init+0x314>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02b      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a51      	ldr	r2, [pc, #324]	@ (80027a8 <HAL_GPIO_Init+0x318>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a50      	ldr	r2, [pc, #320]	@ (80027ac <HAL_GPIO_Init+0x31c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4f      	ldr	r2, [pc, #316]	@ (80027b0 <HAL_GPIO_Init+0x320>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x21a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4e      	ldr	r2, [pc, #312]	@ (80027b4 <HAL_GPIO_Init+0x324>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x216>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4d      	ldr	r2, [pc, #308]	@ (80027b8 <HAL_GPIO_Init+0x328>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x212>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4c      	ldr	r2, [pc, #304]	@ (80027bc <HAL_GPIO_Init+0x32c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x20e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4b      	ldr	r2, [pc, #300]	@ (80027c0 <HAL_GPIO_Init+0x330>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x20a>
 8002696:	2307      	movs	r3, #7
 8002698:	e00e      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 800269a:	2308      	movs	r3, #8
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	@ (80027a0 <HAL_GPIO_Init+0x310>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a32      	ldr	r2, [pc, #200]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b30      	ldr	r3, [pc, #192]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae90 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40021c00 	.word	0x40021c00
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e101      	b.n	80029de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f006 fd19 	bl	800922c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002808:	d102      	bne.n	8002810 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f900 	bl	8005a1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7c1a      	ldrb	r2, [r3, #16]
 8002822:	f88d 2000 	strb.w	r2, [sp]
 8002826:	3304      	adds	r3, #4
 8002828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800282a:	f002 ffdf 	bl	80057ec <USB_CoreInit>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0ce      	b.n	80029de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f003 f8f8 	bl	8005a3c <USB_SetCurrentMode>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0bf      	b.n	80029de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e04a      	b.n	80028fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3315      	adds	r3, #21
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3314      	adds	r3, #20
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	b298      	uxth	r0, r3
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	332e      	adds	r3, #46	@ 0x2e
 80028a0:	4602      	mov	r2, r0
 80028a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3318      	adds	r3, #24
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	331c      	adds	r3, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3320      	adds	r3, #32
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3324      	adds	r3, #36	@ 0x24
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	3301      	adds	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	429a      	cmp	r2, r3
 8002902:	d3af      	bcc.n	8002864 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e044      	b.n	8002994 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3301      	adds	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3b5      	bcc.n	800290a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7c1a      	ldrb	r2, [r3, #16]
 80029a6:	f88d 2000 	strb.w	r2, [sp]
 80029aa:	3304      	adds	r3, #4
 80029ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ae:	f003 f891 	bl	8005ad4 <USB_DevInit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e00c      	b.n	80029de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 f8db 	bl	8006b92 <USB_DevDisconnect>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_PCD_Start+0x1c>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e022      	b.n	8002a48 <HAL_PCD_Start+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 ffe2 	bl	80059f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 f889 	bl	8006b50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08d      	sub	sp, #52	@ 0x34
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f947 	bl	8006cfa <USB_GetMode>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 848c 	bne.w	800338c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 f8ab 	bl	8006bd4 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8482 	beq.w	800338a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f898 	bl	8006bd4 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 0202 	and.w	r2, r2, #2
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f886 	bl	8006bd4 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d161      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0210 	bic.w	r2, r2, #16
 8002ae0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	3304      	adds	r3, #4
 8002b00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b0c:	d124      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d035      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6a38      	ldr	r0, [r7, #32]
 8002b2e:	f003 febd 	bl	80068ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3e:	441a      	add	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b50:	441a      	add	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	e016      	b.n	8002b86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b62:	d110      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6a38      	ldr	r0, [r7, #32]
 8002b70:	f003 fe9c 	bl	80068ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b80:	441a      	add	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0210 	orr.w	r2, r2, #16
 8002b94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 f81a 	bl	8006bd4 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002baa:	f040 80a7 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 f81f 	bl	8006bfa <USB_ReadDevAllOutEpInterrupt>
 8002bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002bbe:	e099      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 808e 	beq.w	8002ce8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 f843 	bl	8006c62 <USB_ReadDevOutEPInterrupt>
 8002bdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fea3 	bl	8003948 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 ff79 	bl	8003b18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2310      	movs	r3, #16
 8002c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d030      	beq.n	8002cae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b80      	cmp	r3, #128	@ 0x80
 8002c56:	d109      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f006 fbce 	bl	8009438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2302      	movs	r3, #2
 8002cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af62 	bne.w	8002bc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 ff67 	bl	8006bd4 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d10:	f040 80db 	bne.w	8002eca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 ff88 	bl	8006c2e <USB_ReadDevAllInEpInterrupt>
 8002d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d24:	e0cd      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80c2 	beq.w	8002eb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 ffae 	bl	8006c9e <USB_ReadDevInEPInterrupt>
 8002d42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d057      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	2201      	movs	r2, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d6e:	4013      	ands	r3, r2
 8002d70:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2301      	movs	r3, #1
 8002d82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d132      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4403      	add	r3, r0
 8002dac:	331c      	adds	r3, #28
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4419      	add	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d113      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3324      	adds	r3, #36	@ 0x24
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dea:	461a      	mov	r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	f003 ffb5 	bl	8006d5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f006 fa98 	bl	800932e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2308      	movs	r3, #8
 8002e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	2310      	movs	r3, #16
 8002e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2340      	movs	r3, #64	@ 0x40
 8002e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5e:	6a38      	ldr	r0, [r7, #32]
 8002e60:	f002 ff9c 	bl	8005d9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3310      	adds	r3, #16
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f006 fae5 	bl	800945c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fcbd 	bl	8003830 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	3301      	adds	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af2e 	bne.w	8002d26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fe80 	bl	8006bd4 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ede:	d122      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f06:	2100      	movs	r1, #0
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fea3 	bl	8003c54 <HAL_PCDEx_LPM_Callback>
 8002f0e:	e002      	b.n	8002f16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f006 fa83 	bl	800941c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fe52 	bl	8006bd4 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f3a:	d112      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f006 fa3f 	bl	80093d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f60:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fe34 	bl	8006bd4 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f76:	f040 80b7 	bne.w	80030e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2110      	movs	r1, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 ff01 	bl	8005d9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f9e:	e046      	b.n	800302e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fac:	461a      	mov	r2, r3
 8002fae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc4:	0151      	lsls	r1, r2, #5
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	440a      	add	r2, r1
 8002fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fe6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff8:	0151      	lsls	r1, r2, #5
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	440a      	add	r2, r1
 8002ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003006:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003018:	0151      	lsls	r1, r2, #5
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	440a      	add	r2, r1
 800301e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003022:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003026:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	3301      	adds	r3, #1
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	791b      	ldrb	r3, [r3, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003036:	4293      	cmp	r3, r2
 8003038:	d3b2      	bcc.n	8002fa0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003048:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800304c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7bdb      	ldrb	r3, [r3, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003066:	f043 030b 	orr.w	r3, r3, #11
 800306a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800307c:	f043 030b 	orr.w	r3, r3, #11
 8003080:	6453      	str	r3, [r2, #68]	@ 0x44
 8003082:	e015      	b.n	80030b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003092:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003096:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800309a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030aa:	f043 030b 	orr.w	r3, r3, #11
 80030ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f003 fe42 	bl	8006d5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80030e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fd71 	bl	8006bd4 <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030fc:	d123      	bne.n	8003146 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fe07 	bl	8006d16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f002 febe 	bl	8005e8e <USB_GetDevSpeed>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	f001 fa07 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8003122:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003128:	461a      	mov	r2, r3
 800312a:	4620      	mov	r0, r4
 800312c:	f002 fbc2 	bl	80058b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 f924 	bl	800937e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fd42 	bl	8006bd4 <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d10a      	bne.n	8003170 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 f901 	bl	8009362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f002 0208 	and.w	r2, r2, #8
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fd2d 	bl	8006bd4 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d123      	bne.n	80031cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	e014      	b.n	80031c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb0a 	bl	80037ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	3301      	adds	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d3e4      	bcc.n	8003196 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 fcff 	bl	8006bd4 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031e0:	d13c      	bne.n	800325c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e2:	2301      	movs	r3, #1
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	e02b      	b.n	8003240 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3318      	adds	r3, #24
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d115      	bne.n	800323a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800320e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003210:	2b00      	cmp	r3, #0
 8003212:	da12      	bge.n	800323a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3317      	adds	r3, #23
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 faca 	bl	80037ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	3301      	adds	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	461a      	mov	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	4293      	cmp	r3, r2
 800324a:	d3cd      	bcc.n	80031e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800325a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 fcb7 	bl	8006bd4 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003270:	d156      	bne.n	8003320 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	e045      	b.n	8003304 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d12e      	bne.n	80032fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da2b      	bge.n	80032fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d121      	bne.n	80032fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fa:	6053      	str	r3, [r2, #4]
            break;
 80032fc:	e008      	b.n	8003310 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	3301      	adds	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	791b      	ldrb	r3, [r3, #4]
 8003308:	461a      	mov	r2, r3
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	4293      	cmp	r3, r2
 800330e:	d3b3      	bcc.n	8003278 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800331e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fc55 	bl	8006bd4 <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003334:	d10a      	bne.n	800334c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f006 f8a2 	bl	8009480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800334a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fc3f 	bl	8006bd4 <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d115      	bne.n	800338c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f006 f892 	bl	800949c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	e000      	b.n	800338c <HAL_PCD_IRQHandler+0x93c>
      return;
 800338a:	bf00      	nop
    }
  }
}
 800338c:	3734      	adds	r7, #52	@ 0x34
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}

08003392 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_PCD_SetAddress+0x1a>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e012      	b.n	80033d2 <HAL_PCD_SetAddress+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 fb9e 	bl	8006b04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	460b      	mov	r3, r1
 80033ee:	803b      	strh	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0f      	bge.n	8003420 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3310      	adds	r3, #16
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	705a      	strb	r2, [r3, #1]
 800341e:	e00f      	b.n	8003440 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800344c:	883b      	ldrh	r3, [r7, #0]
 800344e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	78ba      	ldrb	r2, [r7, #2]
 800345a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800346e:	78bb      	ldrb	r3, [r7, #2]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d102      	bne.n	800347a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_PCD_EP_Open+0xae>
 8003484:	2302      	movs	r3, #2
 8003486:	e00e      	b.n	80034a6 <HAL_PCD_EP_Open+0xcc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fd1e 	bl	8005ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034a4:	7afb      	ldrb	r3, [r7, #11]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0f      	bge.n	80034e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	3310      	adds	r3, #16
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	705a      	strb	r2, [r3, #1]
 80034e0:	e00f      	b.n	8003502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_PCD_EP_Close+0x6e>
 8003518:	2302      	movs	r3, #2
 800351a:	e00e      	b.n	800353a <HAL_PCD_EP_Close+0x8c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fd5c 	bl	8005fe8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	460b      	mov	r3, r1
 8003550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	b2da      	uxtb	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	799b      	ldrb	r3, [r3, #6]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d102      	bne.n	800359e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6979      	ldr	r1, [r7, #20]
 80035aa:	f002 fdf9 	bl	80061a0 <USB_EPStartXfer>

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	f003 020f 	and.w	r2, r3, #15
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3310      	adds	r3, #16
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2201      	movs	r2, #1
 8003626:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	b2da      	uxtb	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	799b      	ldrb	r3, [r3, #6]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	799b      	ldrb	r3, [r3, #6]
 800364a:	461a      	mov	r2, r3
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	f002 fda7 	bl	80061a0 <USB_EPStartXfer>

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	7912      	ldrb	r2, [r2, #4]
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e04f      	b.n	800371a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800367a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da0f      	bge.n	80036a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3310      	adds	r3, #16
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	705a      	strb	r2, [r3, #1]
 80036a0:	e00d      	b.n	80036be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_PCD_EP_SetStall+0x82>
 80036da:	2302      	movs	r3, #2
 80036dc:	e01d      	b.n	800371a <HAL_PCD_EP_SetStall+0xbe>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 f935 	bl	800695c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7999      	ldrb	r1, [r3, #6]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800370a:	461a      	mov	r2, r3
 800370c:	f003 fb26 	bl	8006d5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	7912      	ldrb	r2, [r2, #4]
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e042      	b.n	80037c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da0f      	bge.n	8003768 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3310      	adds	r3, #16
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	705a      	strb	r2, [r3, #1]
 8003766:	e00f      	b.n	8003788 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_PCD_EP_ClrStall+0x86>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e00e      	b.n	80037c6 <HAL_PCD_EP_ClrStall+0xa4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 f93e 	bl	8006a38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da0c      	bge.n	80037fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e00c      	b.n	8003816 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f002 ff5d 	bl	80066dc <USB_EPStopXfer>
 8003822:	4603      	mov	r3, r0
 8003824:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003826:	7afb      	ldrb	r3, [r7, #11]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	@ 0x28
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3310      	adds	r3, #16
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d901      	bls.n	8003868 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e06b      	b.n	8003940 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	429a      	cmp	r2, r3
 800387c:	d902      	bls.n	8003884 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3303      	adds	r3, #3
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800388c:	e02a      	b.n	80038e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d902      	bls.n	80038aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3303      	adds	r3, #3
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68d9      	ldr	r1, [r3, #12]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4603      	mov	r3, r0
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f002 ffb2 	bl	8006830 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	441a      	add	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	441a      	add	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d809      	bhi.n	800390e <PCD_WriteEmptyTxFifo+0xde>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003902:	429a      	cmp	r2, r3
 8003904:	d203      	bcs.n	800390e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1bf      	bne.n	800388e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	429a      	cmp	r2, r3
 8003918:	d811      	bhi.n	800393e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	2201      	movs	r2, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800392e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	43db      	mvns	r3, r3
 8003934:	6939      	ldr	r1, [r7, #16]
 8003936:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800393a:	4013      	ands	r3, r2
 800393c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	333c      	adds	r3, #60	@ 0x3c
 8003960:	3304      	adds	r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	799b      	ldrb	r3, [r3, #6]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d17b      	bne.n	8003a76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4a61      	ldr	r2, [pc, #388]	@ (8003b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	f240 80b9 	bls.w	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80b3 	beq.w	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b0:	6093      	str	r3, [r2, #8]
 80039b2:	e0a7      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ca:	461a      	mov	r2, r3
 80039cc:	2320      	movs	r3, #32
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	e098      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8093 	bne.w	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d90f      	bls.n	8003a06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a02:	6093      	str	r3, [r2, #8]
 8003a04:	e07e      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	440b      	add	r3, r1
 8003a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d114      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a50:	461a      	mov	r2, r3
 8003a52:	2101      	movs	r1, #1
 8003a54:	f003 f982 	bl	8006d5c <USB_EP0_OutStart>
 8003a58:	e006      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	441a      	add	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f005 fc42 	bl	80092f8 <HAL_PCD_DataOutStageCallback>
 8003a74:	e046      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4a26      	ldr	r2, [pc, #152]	@ (8003b14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d124      	bne.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9a:	6093      	str	r3, [r2, #8]
 8003a9c:	e032      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f005 fc19 	bl	80092f8 <HAL_PCD_DataOutStageCallback>
 8003ac6:	e01d      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d114      	bne.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af0:	461a      	mov	r2, r3
 8003af2:	2100      	movs	r1, #0
 8003af4:	f003 f932 	bl	8006d5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f005 fbfa 	bl	80092f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	4f54300a 	.word	0x4f54300a
 8003b14:	4f54310a 	.word	0x4f54310a

08003b18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	333c      	adds	r3, #60	@ 0x3c
 8003b30:	3304      	adds	r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d90e      	bls.n	8003b6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f005 fbb1 	bl	80092d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d90c      	bls.n	8003b94 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	799b      	ldrb	r3, [r3, #6]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2101      	movs	r1, #1
 8003b90:	f003 f8e4 	bl	8006d5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	4f54300a 	.word	0x4f54300a

08003ba4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bc2:	883b      	ldrh	r3, [r7, #0]
 8003bc4:	0419      	lsls	r1, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd0:	e028      	b.n	8003c24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	e00d      	b.n	8003c02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	3340      	adds	r3, #64	@ 0x40
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d3ec      	bcc.n	8003be6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c0c:	883b      	ldrh	r3, [r7, #0]
 8003c0e:	0418      	lsls	r0, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4302      	orrs	r2, r0
 8003c1c:	3340      	adds	r3, #64	@ 0x40
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e267      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d075      	beq.n	8003d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c8a:	4b88      	ldr	r3, [pc, #544]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00c      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c96:	4b85      	ldr	r3, [pc, #532]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d112      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca2:	4b82      	ldr	r3, [pc, #520]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05b      	beq.n	8003d74 <HAL_RCC_OscConfig+0x108>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d157      	bne.n	8003d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e242      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x74>
 8003cd2:	4b76      	ldr	r3, [pc, #472]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a75      	ldr	r2, [pc, #468]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e01d      	b.n	8003d1c <HAL_RCC_OscConfig+0xb0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x98>
 8003cea:	4b70      	ldr	r3, [pc, #448]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6f      	ldr	r2, [pc, #444]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0xb0>
 8003d04:	4b69      	ldr	r3, [pc, #420]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a68      	ldr	r2, [pc, #416]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	4b66      	ldr	r3, [pc, #408]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fa72 	bl	800220c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe fa6e 	bl	800220c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	@ 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e207      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0xc0>
 8003d4a:	e014      	b.n	8003d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fa5e 	bl	800220c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fe fa5a 	bl	800220c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e1f3      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	4b51      	ldr	r3, [pc, #324]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0xe8>
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d063      	beq.n	8003e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d82:	4b4a      	ldr	r3, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8e:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d11c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9a:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d116      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_RCC_OscConfig+0x152>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e1c7      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4937      	ldr	r1, [pc, #220]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	e03a      	b.n	8003e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ddc:	4b34      	ldr	r3, [pc, #208]	@ (8003eb0 <HAL_RCC_OscConfig+0x244>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fe fa13 	bl	800220c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dea:	f7fe fa0f 	bl	800220c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e1a8      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b28      	ldr	r3, [pc, #160]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4925      	ldr	r1, [pc, #148]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1e:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCC_OscConfig+0x244>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fe f9f2 	bl	800220c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2c:	f7fe f9ee 	bl	800220c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e187      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d036      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <HAL_RCC_OscConfig+0x248>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe f9d2 	bl	800220c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fe f9ce 	bl	800220c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e167      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_OscConfig+0x240>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x200>
 8003e8a:	e01b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_RCC_OscConfig+0x248>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe f9bb 	bl	800220c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	e00e      	b.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fe f9b7 	bl	800220c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d907      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e150      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	42470000 	.word	0x42470000
 8003eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	4b88      	ldr	r3, [pc, #544]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ea      	bne.n	8003e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8097 	beq.w	8004000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b81      	ldr	r3, [pc, #516]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4a7c      	ldr	r2, [pc, #496]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f02:	4b77      	ldr	r3, [pc, #476]	@ (80040e0 <HAL_RCC_OscConfig+0x474>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0e:	4b74      	ldr	r3, [pc, #464]	@ (80040e0 <HAL_RCC_OscConfig+0x474>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a73      	ldr	r2, [pc, #460]	@ (80040e0 <HAL_RCC_OscConfig+0x474>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1a:	f7fe f977 	bl	800220c <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fe f973 	bl	800220c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e10c      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	4b6a      	ldr	r3, [pc, #424]	@ (80040e0 <HAL_RCC_OscConfig+0x474>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x2ea>
 8003f48:	4b64      	ldr	r3, [pc, #400]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a63      	ldr	r2, [pc, #396]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x324>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x30c>
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a5e      	ldr	r2, [pc, #376]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0x324>
 8003f78:	4b58      	ldr	r3, [pc, #352]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f84:	4b55      	ldr	r3, [pc, #340]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	4a54      	ldr	r2, [pc, #336]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003f8a:	f023 0304 	bic.w	r3, r3, #4
 8003f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fe f938 	bl	800220c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fe f934 	bl	800220c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0cb      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	4b49      	ldr	r3, [pc, #292]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0ee      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x334>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc4:	f7fe f922 	bl	800220c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fe f91e 	bl	800220c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0b5      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ee      	bne.n	8003fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	4a38      	ldr	r2, [pc, #224]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a1 	beq.w	800414c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800400a:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b08      	cmp	r3, #8
 8004014:	d05c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d141      	bne.n	80040a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401e:	4b31      	ldr	r3, [pc, #196]	@ (80040e4 <HAL_RCC_OscConfig+0x478>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fe f8f2 	bl	800220c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe f8ee 	bl	800220c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e087      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	3b01      	subs	r3, #1
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	491b      	ldr	r1, [pc, #108]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x478>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe f8c7 	bl	800220c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fe f8c3 	bl	800220c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e05c      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004094:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x416>
 80040a0:	e054      	b.n	800414c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_RCC_OscConfig+0x478>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe f8b0 	bl	800220c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe f8ac 	bl	800220c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e045      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <HAL_RCC_OscConfig+0x470>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x444>
 80040ce:	e03d      	b.n	800414c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e038      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40007000 	.word	0x40007000
 80040e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_RCC_OscConfig+0x4ec>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d028      	beq.n	8004148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d121      	bne.n	8004148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11a      	bne.n	8004148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800411e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	3b01      	subs	r3, #1
 8004132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0cc      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b68      	ldr	r3, [pc, #416]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d90c      	bls.n	8004198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b65      	ldr	r3, [pc, #404]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b63      	ldr	r3, [pc, #396]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0b8      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b0:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a58      	ldr	r2, [pc, #352]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041c8:	4b53      	ldr	r3, [pc, #332]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a52      	ldr	r2, [pc, #328]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d4:	4b50      	ldr	r3, [pc, #320]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	494d      	ldr	r1, [pc, #308]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d044      	beq.n	800427c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d119      	bne.n	800423a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e07f      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d003      	beq.n	800421a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004216:	2b03      	cmp	r3, #3
 8004218:	d107      	bne.n	800422a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421a:	4b3f      	ldr	r3, [pc, #252]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e06f      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422a:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e067      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423a:	4b37      	ldr	r3, [pc, #220]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4934      	ldr	r1, [pc, #208]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800424c:	f7fd ffde 	bl	800220c <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	e00a      	b.n	800426a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004254:	f7fd ffda 	bl	800220c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e04f      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 020c 	and.w	r2, r3, #12
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	429a      	cmp	r2, r3
 800427a:	d1eb      	bne.n	8004254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800427c:	4b25      	ldr	r3, [pc, #148]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d20c      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e032      	b.n	800430a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b0:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4916      	ldr	r1, [pc, #88]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ce:	4b12      	ldr	r3, [pc, #72]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	490e      	ldr	r1, [pc, #56]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042e2:	f000 f821 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80042e6:	4602      	mov	r2, r0
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	490a      	ldr	r1, [pc, #40]	@ (800431c <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	5ccb      	ldrb	r3, [r1, r3]
 80042f6:	fa22 f303 	lsr.w	r3, r2, r3
 80042fa:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042fe:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd ff3e 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40023c00 	.word	0x40023c00
 8004318:	40023800 	.word	0x40023800
 800431c:	0800c25c 	.word	0x0800c25c
 8004320:	20000000 	.word	0x20000000
 8004324:	20000004 	.word	0x20000004

08004328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800432c:	b094      	sub	sp, #80	@ 0x50
 800432e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004340:	4b79      	ldr	r3, [pc, #484]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d00d      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x40>
 800434c:	2b08      	cmp	r3, #8
 800434e:	f200 80e1 	bhi.w	8004514 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x34>
 8004356:	2b04      	cmp	r3, #4
 8004358:	d003      	beq.n	8004362 <HAL_RCC_GetSysClockFreq+0x3a>
 800435a:	e0db      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b73      	ldr	r3, [pc, #460]	@ (800452c <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004360:	e0db      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004362:	4b72      	ldr	r3, [pc, #456]	@ (800452c <HAL_RCC_GetSysClockFreq+0x204>)
 8004364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004366:	e0d8      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004368:	4b6f      	ldr	r3, [pc, #444]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004370:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004372:	4b6d      	ldr	r3, [pc, #436]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d063      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	099b      	lsrs	r3, r3, #6
 8004384:	2200      	movs	r2, #0
 8004386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004388:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
 8004392:	2300      	movs	r3, #0
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
 8004396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	f04f 0000 	mov.w	r0, #0
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	0159      	lsls	r1, r3, #5
 80043a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ac:	0150      	lsls	r0, r2, #5
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4621      	mov	r1, r4
 80043b4:	1a51      	subs	r1, r2, r1
 80043b6:	6139      	str	r1, [r7, #16]
 80043b8:	4629      	mov	r1, r5
 80043ba:	eb63 0301 	sbc.w	r3, r3, r1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043cc:	4659      	mov	r1, fp
 80043ce:	018b      	lsls	r3, r1, #6
 80043d0:	4651      	mov	r1, sl
 80043d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043d6:	4651      	mov	r1, sl
 80043d8:	018a      	lsls	r2, r1, #6
 80043da:	4651      	mov	r1, sl
 80043dc:	ebb2 0801 	subs.w	r8, r2, r1
 80043e0:	4659      	mov	r1, fp
 80043e2:	eb63 0901 	sbc.w	r9, r3, r1
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fa:	4690      	mov	r8, r2
 80043fc:	4699      	mov	r9, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	eb18 0303 	adds.w	r3, r8, r3
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	462b      	mov	r3, r5
 8004408:	eb49 0303 	adc.w	r3, r9, r3
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800441a:	4629      	mov	r1, r5
 800441c:	028b      	lsls	r3, r1, #10
 800441e:	4621      	mov	r1, r4
 8004420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004424:	4621      	mov	r1, r4
 8004426:	028a      	lsls	r2, r1, #10
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442e:	2200      	movs	r2, #0
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004438:	f7fc fbb6 	bl	8000ba8 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004444:	e058      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004446:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	099b      	lsrs	r3, r3, #6
 800444c:	2200      	movs	r2, #0
 800444e:	4618      	mov	r0, r3
 8004450:	4611      	mov	r1, r2
 8004452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004460:	4642      	mov	r2, r8
 8004462:	464b      	mov	r3, r9
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	0159      	lsls	r1, r3, #5
 800446e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004472:	0150      	lsls	r0, r2, #5
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4641      	mov	r1, r8
 800447a:	ebb2 0a01 	subs.w	sl, r2, r1
 800447e:	4649      	mov	r1, r9
 8004480:	eb63 0b01 	sbc.w	fp, r3, r1
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004498:	ebb2 040a 	subs.w	r4, r2, sl
 800449c:	eb63 050b 	sbc.w	r5, r3, fp
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	00eb      	lsls	r3, r5, #3
 80044aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ae:	00e2      	lsls	r2, r4, #3
 80044b0:	4614      	mov	r4, r2
 80044b2:	461d      	mov	r5, r3
 80044b4:	4643      	mov	r3, r8
 80044b6:	18e3      	adds	r3, r4, r3
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	464b      	mov	r3, r9
 80044bc:	eb45 0303 	adc.w	r3, r5, r3
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ce:	4629      	mov	r1, r5
 80044d0:	028b      	lsls	r3, r1, #10
 80044d2:	4621      	mov	r1, r4
 80044d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d8:	4621      	mov	r1, r4
 80044da:	028a      	lsls	r2, r1, #10
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e2:	2200      	movs	r2, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	61fa      	str	r2, [r7, #28]
 80044e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ec:	f7fc fb5c 	bl	8000ba8 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4613      	mov	r3, r2
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004512:	e002      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCC_GetSysClockFreq+0x204>)
 8004516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800451c:	4618      	mov	r0, r3
 800451e:	3750      	adds	r7, #80	@ 0x50
 8004520:	46bd      	mov	sp, r7
 8004522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	00f42400 	.word	0x00f42400

08004530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000

08004548 <LL_GPIO_SetPinMode>:
{
 8004548:	b480      	push	{r7}
 800454a:	b08b      	sub	sp, #44	@ 0x2c
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	613b      	str	r3, [r7, #16]
  return result;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e003      	b.n	800457a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2103      	movs	r1, #3
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	401a      	ands	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	61fb      	str	r3, [r7, #28]
  return result;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	372c      	adds	r7, #44	@ 0x2c
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_GPIO_SetPinOutputType>:
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	401a      	ands	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_GPIO_SetPinSpeed>:
{
 80045f2:	b480      	push	{r7}
 80045f4:	b08b      	sub	sp, #44	@ 0x2c
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	613b      	str	r3, [r7, #16]
  return result;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2103      	movs	r1, #3
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
  return result;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004646:	2320      	movs	r3, #32
 8004648:	e003      	b.n	8004652 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	fab3 f383 	clz	r3, r3
 8004650:	b2db      	uxtb	r3, r3
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	431a      	orrs	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	372c      	adds	r7, #44	@ 0x2c
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_GPIO_SetPinPull>:
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	@ 0x2c
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	613b      	str	r3, [r7, #16]
  return result;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004692:	2320      	movs	r3, #32
 8004694:	e003      	b.n	800469e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2103      	movs	r1, #3
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	401a      	ands	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	61fb      	str	r3, [r7, #28]
  return result;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	60da      	str	r2, [r3, #12]
}
 80046da:	bf00      	nop
 80046dc:	372c      	adds	r7, #44	@ 0x2c
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <LL_GPIO_SetAFPin_0_7>:
{
 80046e6:	b480      	push	{r7}
 80046e8:	b08b      	sub	sp, #44	@ 0x2c
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	613b      	str	r3, [r7, #16]
  return result;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e003      	b.n	8004718 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	210f      	movs	r1, #15
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	61fb      	str	r3, [r7, #28]
  return result;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800473a:	2320      	movs	r3, #32
 800473c:	e003      	b.n	8004746 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	fab3 f383 	clz	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	372c      	adds	r7, #44	@ 0x2c
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_GPIO_SetAFPin_8_15>:
{
 8004760:	b480      	push	{r7}
 8004762:	b08b      	sub	sp, #44	@ 0x2c
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	613b      	str	r3, [r7, #16]
  return result;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004788:	2320      	movs	r3, #32
 800478a:	e003      	b.n	8004794 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	210f      	movs	r1, #15
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	61fb      	str	r3, [r7, #28]
  return result;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e003      	b.n	80047c4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80047d2:	bf00      	nop
 80047d4:	372c      	adds	r7, #44	@ 0x2c
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b08a      	sub	sp, #40	@ 0x28
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	617b      	str	r3, [r7, #20]
  return result;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <LL_GPIO_Init+0x2e>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004816:	e057      	b.n	80048c8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	4013      	ands	r3, r2
 8004826:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d049      	beq.n	80048c2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <LL_GPIO_Init+0x60>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d10d      	bne.n	800485a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	461a      	mov	r2, r3
 8004844:	6a39      	ldr	r1, [r7, #32]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff fed3 	bl	80045f2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	461a      	mov	r2, r3
 8004852:	6a39      	ldr	r1, [r7, #32]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff feb4 	bl	80045c2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	461a      	mov	r2, r3
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff02 	bl	800466c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d121      	bne.n	80048b4 <LL_GPIO_Init+0xd6>
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	60bb      	str	r3, [r7, #8]
  return result;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <LL_GPIO_Init+0xac>
    return 32U;
 8004886:	2320      	movs	r3, #32
 8004888:	e003      	b.n	8004892 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004892:	2b07      	cmp	r3, #7
 8004894:	d807      	bhi.n	80048a6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	461a      	mov	r2, r3
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff21 	bl	80046e6 <LL_GPIO_SetAFPin_0_7>
 80048a4:	e006      	b.n	80048b4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff ff56 	bl	8004760 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6a39      	ldr	r1, [r7, #32]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fe43 	bl	8004548 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1a0      	bne.n	8004818 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048e4:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <LL_RCC_GetSysClkSource+0x18>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <LL_RCC_GetAHBPrescaler+0x18>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <LL_RCC_GetAPB1Prescaler+0x18>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800

08004934 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <LL_RCC_GetAPB2Prescaler+0x18>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800

08004950 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004954:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <LL_RCC_PLL_GetMainSource+0x18>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800

0800496c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <LL_RCC_PLL_GetN+0x18>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40023800 	.word	0x40023800

08004988 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <LL_RCC_PLL_GetP+0x18>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049a8:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <LL_RCC_PLL_GetDivider+0x18>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800

080049c0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80049c8:	f000 f820 	bl	8004a0c <RCC_GetSystemClockFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f83e 	bl	8004a58 <RCC_GetHCLKClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f84c 	bl	8004a84 <RCC_GetPCLK1ClockFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f858 	bl	8004aac <RCC_GetPCLK2ClockFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004a16:	f7ff ff63 	bl	80048e0 <LL_RCC_GetSysClkSource>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d00c      	beq.n	8004a3a <RCC_GetSystemClockFreq+0x2e>
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d80f      	bhi.n	8004a44 <RCC_GetSystemClockFreq+0x38>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <RCC_GetSystemClockFreq+0x22>
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d003      	beq.n	8004a34 <RCC_GetSystemClockFreq+0x28>
 8004a2c:	e00a      	b.n	8004a44 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <RCC_GetSystemClockFreq+0x48>)
 8004a30:	607b      	str	r3, [r7, #4]
      break;
 8004a32:	e00a      	b.n	8004a4a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004a34:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <RCC_GetSystemClockFreq+0x48>)
 8004a36:	607b      	str	r3, [r7, #4]
      break;
 8004a38:	e007      	b.n	8004a4a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004a3a:	2008      	movs	r0, #8
 8004a3c:	f000 f84a 	bl	8004ad4 <RCC_PLL_GetFreqDomain_SYS>
 8004a40:	6078      	str	r0, [r7, #4]
      break;
 8004a42:	e002      	b.n	8004a4a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004a44:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <RCC_GetSystemClockFreq+0x48>)
 8004a46:	607b      	str	r3, [r7, #4]
      break;
 8004a48:	bf00      	nop
  }

  return frequency;
 8004a4a:	687b      	ldr	r3, [r7, #4]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	00f42400 	.word	0x00f42400

08004a58 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004a60:	f7ff ff4c 	bl	80048fc <LL_RCC_GetAHBPrescaler>
 8004a64:	4603      	mov	r3, r0
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	4a04      	ldr	r2, [pc, #16]	@ (8004a80 <RCC_GetHCLKClockFreq+0x28>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	40d3      	lsrs	r3, r2
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	0800c25c 	.word	0x0800c25c

08004a84 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004a8c:	f7ff ff44 	bl	8004918 <LL_RCC_GetAPB1Prescaler>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0a9b      	lsrs	r3, r3, #10
 8004a94:	4a04      	ldr	r2, [pc, #16]	@ (8004aa8 <RCC_GetPCLK1ClockFreq+0x24>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	40d3      	lsrs	r3, r2
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	0800c26c 	.word	0x0800c26c

08004aac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004ab4:	f7ff ff3e 	bl	8004934 <LL_RCC_GetAPB2Prescaler>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	0b5b      	lsrs	r3, r3, #13
 8004abc:	4a04      	ldr	r2, [pc, #16]	@ (8004ad0 <RCC_GetPCLK2ClockFreq+0x24>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	40d3      	lsrs	r3, r2
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	0800c26c 	.word	0x0800c26c

08004ad4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ae8:	f7ff ff32 	bl	8004950 <LL_RCC_PLL_GetMainSource>
 8004aec:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004afa:	d003      	beq.n	8004b04 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004afc:	e005      	b.n	8004b0a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004b00:	617b      	str	r3, [r7, #20]
      break;
 8004b02:	e005      	b.n	8004b10 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004b04:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004b06:	617b      	str	r3, [r7, #20]
      break;
 8004b08:	e002      	b.n	8004b10 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004b0c:	617b      	str	r3, [r7, #20]
      break;
 8004b0e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d113      	bne.n	8004b3e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004b16:	f7ff ff45 	bl	80049a4 <LL_RCC_PLL_GetDivider>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004b22:	f7ff ff23 	bl	800496c <LL_RCC_PLL_GetN>
 8004b26:	4603      	mov	r3, r0
 8004b28:	fb03 f404 	mul.w	r4, r3, r4
 8004b2c:	f7ff ff2c 	bl	8004988 <LL_RCC_PLL_GetP>
 8004b30:	4603      	mov	r3, r0
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	3301      	adds	r3, #1
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b3c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004b3e:	693b      	ldr	r3, [r7, #16]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}
 8004b48:	00f42400 	.word	0x00f42400

08004b4c <LL_SPI_IsEnabled>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d101      	bne.n	8004b64 <LL_SPI_IsEnabled+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_SPI_IsEnabled+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_SPI_SetCRCPolynomial>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ffd3 	bl	8004b4c <LL_SPI_IsEnabled>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d139      	bne.n	8004c20 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	6811      	ldr	r1, [r2, #0]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	6852      	ldr	r2, [r2, #4]
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	6892      	ldr	r2, [r2, #8]
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	68d2      	ldr	r2, [r2, #12]
 8004bcc:	4311      	orrs	r1, r2
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	6912      	ldr	r2, [r2, #16]
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	6952      	ldr	r2, [r2, #20]
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	6992      	ldr	r2, [r2, #24]
 8004bde:	4311      	orrs	r1, r2
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	69d2      	ldr	r2, [r2, #28]
 8004be4:	4311      	orrs	r1, r2
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	6a12      	ldr	r2, [r2, #32]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f023 0204 	bic.w	r2, r3, #4
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0e:	d105      	bne.n	8004c1c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffab 	bl	8004b72 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	61da      	str	r2, [r3, #28]
  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <LL_TIM_SetPrescaler>:
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_TIM_SetAutoReload>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_TIM_SetRepetitionCounter>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_TIM_OC_SetCompareCH1>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_TIM_OC_SetCompareCH2>:
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_TIM_OC_SetCompareCH3>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_TIM_OC_SetCompareCH4>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f043 0201 	orr.w	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	615a      	str	r2, [r3, #20]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e24 <LL_TIM_Init+0x108>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <LL_TIM_Init+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3a:	d00f      	beq.n	8004d5c <LL_TIM_Init+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8004e28 <LL_TIM_Init+0x10c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <LL_TIM_Init+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a39      	ldr	r2, [pc, #228]	@ (8004e2c <LL_TIM_Init+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <LL_TIM_Init+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a38      	ldr	r2, [pc, #224]	@ (8004e30 <LL_TIM_Init+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <LL_TIM_Init+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a37      	ldr	r2, [pc, #220]	@ (8004e34 <LL_TIM_Init+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d106      	bne.n	8004d6a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e24 <LL_TIM_Init+0x108>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d78:	d027      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e28 <LL_TIM_Init+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d023      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a29      	ldr	r2, [pc, #164]	@ (8004e2c <LL_TIM_Init+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01f      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a28      	ldr	r2, [pc, #160]	@ (8004e30 <LL_TIM_Init+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01b      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a27      	ldr	r2, [pc, #156]	@ (8004e34 <LL_TIM_Init+0x118>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d017      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a26      	ldr	r2, [pc, #152]	@ (8004e38 <LL_TIM_Init+0x11c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a25      	ldr	r2, [pc, #148]	@ (8004e3c <LL_TIM_Init+0x120>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a24      	ldr	r2, [pc, #144]	@ (8004e40 <LL_TIM_Init+0x124>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <LL_TIM_Init+0x128>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <LL_TIM_Init+0x12c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <LL_TIM_Init+0xae>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <LL_TIM_Init+0x130>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d106      	bne.n	8004dd8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff34 	bl	8004c52 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff20 	bl	8004c36 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e24 <LL_TIM_Init+0x108>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <LL_TIM_Init+0xea>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <LL_TIM_Init+0x118>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d105      	bne.n	8004e12 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff2e 	bl	8004c6e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff71 	bl	8004cfa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40001800 	.word	0x40001800
 8004e48:	40001c00 	.word	0x40001c00
 8004e4c:	40002000 	.word	0x40002000

08004e50 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e66:	d027      	beq.n	8004eb8 <LL_TIM_OC_Init+0x68>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d82a      	bhi.n	8004ec6 <LL_TIM_OC_Init+0x76>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e76:	d018      	beq.n	8004eaa <LL_TIM_OC_Init+0x5a>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d822      	bhi.n	8004ec6 <LL_TIM_OC_Init+0x76>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d003      	beq.n	8004e8e <LL_TIM_OC_Init+0x3e>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d007      	beq.n	8004e9c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004e8c:	e01b      	b.n	8004ec6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f81f 	bl	8004ed4 <OC1Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e015      	b.n	8004ec8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f884 	bl	8004fac <OC2Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea8:	e00e      	b.n	8004ec8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f8ed 	bl	800508c <OC3Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb6:	e007      	b.n	8004ec8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f956 	bl	800516c <OC4Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e000      	b.n	8004ec8 <LL_TIM_OC_Init+0x78>
      break;
 8004ec6:	bf00      	nop
  }

  return result;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0202 	bic.w	r2, r3, #2
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <OC1Config+0xd0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <OC1Config+0x6a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa8 <OC1Config+0xd4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d11e      	bne.n	8004f7c <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0208 	bic.w	r2, r3, #8
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0204 	bic.w	r2, r3, #4
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fe7b 	bl	8004c8a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40010400 	.word	0x40010400

08004fac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0210 	bic.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0220 	bic.w	r2, r3, #32
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0210 	bic.w	r2, r3, #16
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1d      	ldr	r2, [pc, #116]	@ (8005084 <OC2Config+0xd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <OC2Config+0x70>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1c      	ldr	r2, [pc, #112]	@ (8005088 <OC2Config+0xdc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d11f      	bne.n	800505c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	019b      	lsls	r3, r3, #6
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	019b      	lsls	r3, r3, #6
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fe19 	bl	8004ca6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <OC3Config+0xd8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <OC3Config+0x6e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <OC3Config+0xdc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d11f      	bne.n	800513a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	015b      	lsls	r3, r3, #5
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fdb8 	bl	8004cc2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400

0800516c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	031b      	lsls	r3, r3, #12
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	031b      	lsls	r3, r3, #12
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a11      	ldr	r2, [pc, #68]	@ (8005214 <OC4Config+0xa8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <OC4Config+0x70>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a10      	ldr	r2, [pc, #64]	@ (8005218 <OC4Config+0xac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d107      	bne.n	80051ec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fd6d 	bl	8004cde <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40010000 	.word	0x40010000
 8005218:	40010400 	.word	0x40010400

0800521c <LL_USART_IsEnabled>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_USART_SetStopBitsLength>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	611a      	str	r2, [r3, #16]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_USART_SetHWFlowCtrl>:
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	615a      	str	r2, [r3, #20]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_USART_SetBaudRate>:
{
 8005290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005294:	b0c0      	sub	sp, #256	@ 0x100
 8005296:	af00      	add	r7, sp, #0
 8005298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800529c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80052a0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80052a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	f040 810c 	bne.w	80054cc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80052b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	6639      	str	r1, [r7, #96]	@ 0x60
 80052ce:	415b      	adcs	r3, r3
 80052d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80052d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80052d6:	4621      	mov	r1, r4
 80052d8:	eb12 0801 	adds.w	r8, r2, r1
 80052dc:	4629      	mov	r1, r5
 80052de:	eb43 0901 	adc.w	r9, r3, r1
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f6:	4690      	mov	r8, r2
 80052f8:	4699      	mov	r9, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	eb18 0303 	adds.w	r3, r8, r3
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005304:	462b      	mov	r3, r5
 8005306:	eb49 0303 	adc.w	r3, r9, r3
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800530e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005312:	2200      	movs	r2, #0
 8005314:	469a      	mov	sl, r3
 8005316:	4693      	mov	fp, r2
 8005318:	eb1a 030a 	adds.w	r3, sl, sl
 800531c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800531e:	eb4b 030b 	adc.w	r3, fp, fp
 8005322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005324:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800532c:	f7fb fc3c 	bl	8000ba8 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4b64      	ldr	r3, [pc, #400]	@ (80054c8 <LL_USART_SetBaudRate+0x238>)
 8005336:	fba3 2302 	umull	r2, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	b29b      	uxth	r3, r3
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	b29c      	uxth	r4, r3
 8005342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800534c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005350:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	6539      	str	r1, [r7, #80]	@ 0x50
 800535c:	415b      	adcs	r3, r3
 800535e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	64b9      	str	r1, [r7, #72]	@ 0x48
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ae:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80053b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053b6:	460b      	mov	r3, r1
 80053b8:	18db      	adds	r3, r3, r3
 80053ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80053bc:	4613      	mov	r3, r2
 80053be:	eb42 0303 	adc.w	r3, r2, r3
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80053cc:	f7fb fbec 	bl	8000ba8 <__aeabi_uldivmod>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <LL_USART_SetBaudRate+0x238>)
 80053d8:	fba3 2301 	umull	r2, r3, r3, r1
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2264      	movs	r2, #100	@ 0x64
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	1acb      	subs	r3, r1, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053ec:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <LL_USART_SetBaudRate+0x238>)
 80053ee:	fba3 2302 	umull	r2, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4423      	add	r3, r4
 8005402:	b29c      	uxth	r4, r3
 8005404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005412:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005416:	4642      	mov	r2, r8
 8005418:	464b      	mov	r3, r9
 800541a:	1891      	adds	r1, r2, r2
 800541c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800541e:	415b      	adcs	r3, r3
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005422:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005426:	4641      	mov	r1, r8
 8005428:	1851      	adds	r1, r2, r1
 800542a:	6339      	str	r1, [r7, #48]	@ 0x30
 800542c:	4649      	mov	r1, r9
 800542e:	414b      	adcs	r3, r1
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800543e:	4659      	mov	r1, fp
 8005440:	00cb      	lsls	r3, r1, #3
 8005442:	4651      	mov	r1, sl
 8005444:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005448:	4651      	mov	r1, sl
 800544a:	00ca      	lsls	r2, r1, #3
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	4603      	mov	r3, r0
 8005452:	4642      	mov	r2, r8
 8005454:	189b      	adds	r3, r3, r2
 8005456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800545a:	464b      	mov	r3, r9
 800545c:	460a      	mov	r2, r1
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005470:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005474:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005478:	460b      	mov	r3, r1
 800547a:	18db      	adds	r3, r3, r3
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547e:	4613      	mov	r3, r2
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800548a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800548e:	f7fb fb8b 	bl	8000ba8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <LL_USART_SetBaudRate+0x238>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	@ 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	3332      	adds	r3, #50	@ 0x32
 80054aa:	4a07      	ldr	r2, [pc, #28]	@ (80054c8 <LL_USART_SetBaudRate+0x238>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	4423      	add	r3, r4
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	e108      	b.n	80056da <LL_USART_SetBaudRate+0x44a>
 80054c8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80054cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054d6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054da:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	415b      	adcs	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ee:	4641      	mov	r1, r8
 80054f0:	1854      	adds	r4, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb43 0501 	adc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005514:	464b      	mov	r3, r9
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800551e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005522:	2200      	movs	r2, #0
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005528:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005538:	4629      	mov	r1, r5
 800553a:	008b      	lsls	r3, r1, #2
 800553c:	4621      	mov	r1, r4
 800553e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005542:	4621      	mov	r1, r4
 8005544:	008a      	lsls	r2, r1, #2
 8005546:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800554a:	f7fb fb2d 	bl	8000ba8 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b65      	ldr	r3, [pc, #404]	@ (80056e8 <LL_USART_SetBaudRate+0x458>)
 8005554:	fba3 2302 	umull	r2, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	b29b      	uxth	r3, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	b29c      	uxth	r4, r3
 8005560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800556a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800556e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005572:	4642      	mov	r2, r8
 8005574:	464b      	mov	r3, r9
 8005576:	1891      	adds	r1, r2, r2
 8005578:	61b9      	str	r1, [r7, #24]
 800557a:	415b      	adcs	r3, r3
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005582:	4641      	mov	r1, r8
 8005584:	1851      	adds	r1, r2, r1
 8005586:	6139      	str	r1, [r7, #16]
 8005588:	4649      	mov	r1, r9
 800558a:	414b      	adcs	r3, r1
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800559a:	4659      	mov	r1, fp
 800559c:	00cb      	lsls	r3, r1, #3
 800559e:	4651      	mov	r1, sl
 80055a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a4:	4651      	mov	r1, sl
 80055a6:	00ca      	lsls	r2, r1, #3
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	4603      	mov	r3, r0
 80055ae:	4642      	mov	r2, r8
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b6:	464b      	mov	r3, r9
 80055b8:	460a      	mov	r2, r1
 80055ba:	eb42 0303 	adc.w	r3, r2, r3
 80055be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80055dc:	4649      	mov	r1, r9
 80055de:	008b      	lsls	r3, r1, #2
 80055e0:	4641      	mov	r1, r8
 80055e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e6:	4641      	mov	r1, r8
 80055e8:	008a      	lsls	r2, r1, #2
 80055ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80055ee:	f7fb fadb 	bl	8000ba8 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	4b3b      	ldr	r3, [pc, #236]	@ (80056e8 <LL_USART_SetBaudRate+0x458>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2264      	movs	r2, #100	@ 0x64
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	3332      	adds	r3, #50	@ 0x32
 800560c:	4a36      	ldr	r2, [pc, #216]	@ (80056e8 <LL_USART_SetBaudRate+0x458>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	b29b      	uxth	r3, r3
 8005616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800561a:	b29b      	uxth	r3, r3
 800561c:	4423      	add	r3, r4
 800561e:	b29c      	uxth	r4, r3
 8005620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005624:	2200      	movs	r2, #0
 8005626:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005628:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800562a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	4641      	mov	r1, r8
 8005640:	1851      	adds	r1, r2, r1
 8005642:	6039      	str	r1, [r7, #0]
 8005644:	4649      	mov	r1, r9
 8005646:	414b      	adcs	r3, r1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005656:	4659      	mov	r1, fp
 8005658:	00cb      	lsls	r3, r1, #3
 800565a:	4651      	mov	r1, sl
 800565c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005660:	4651      	mov	r1, sl
 8005662:	00ca      	lsls	r2, r1, #3
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	4603      	mov	r3, r0
 800566a:	4642      	mov	r2, r8
 800566c:	189b      	adds	r3, r3, r2
 800566e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	677b      	str	r3, [r7, #116]	@ 0x74
 800567a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800567e:	2200      	movs	r2, #0
 8005680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005682:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8005690:	4649      	mov	r1, r9
 8005692:	008b      	lsls	r3, r1, #2
 8005694:	4641      	mov	r1, r8
 8005696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569a:	4641      	mov	r1, r8
 800569c:	008a      	lsls	r2, r1, #2
 800569e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80056a2:	f7fb fa81 	bl	8000ba8 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b0f      	ldr	r3, [pc, #60]	@ (80056e8 <LL_USART_SetBaudRate+0x458>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	@ 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	@ 0x32
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <LL_USART_SetBaudRate+0x458>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	4423      	add	r3, r4
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d8:	609a      	str	r2, [r3, #8]
}
 80056da:	bf00      	nop
 80056dc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e6:	bf00      	nop
 80056e8:	51eb851f 	.word	0x51eb851f

080056ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fd8c 	bl	800521c <LL_USART_IsEnabled>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d15e      	bne.n	80057c8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005712:	f023 030c 	bic.w	r3, r3, #12
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	6851      	ldr	r1, [r2, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	4311      	orrs	r1, r2
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	6912      	ldr	r2, [r2, #16]
 8005724:	4311      	orrs	r1, r2
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	6992      	ldr	r2, [r2, #24]
 800572a:	430a      	orrs	r2, r1
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fd83 	bl	8005244 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fd90 	bl	800526a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f936 	bl	80049c0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <LL_USART_Init+0xe8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d102      	bne.n	8005762 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	e021      	b.n	80057a6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <LL_USART_Init+0xec>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d102      	bne.n	8005770 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	e01a      	b.n	80057a6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <LL_USART_Init+0xf0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d102      	bne.n	800577e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e013      	b.n	80057a6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a17      	ldr	r2, [pc, #92]	@ (80057e0 <LL_USART_Init+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d102      	bne.n	800578c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e00c      	b.n	80057a6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a15      	ldr	r2, [pc, #84]	@ (80057e4 <LL_USART_Init+0xf8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d102      	bne.n	800579a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e005      	b.n	80057a6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <LL_USART_Init+0xfc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80057b4:	2300      	movs	r3, #0
 80057b6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fd64 	bl	8005290 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40011000 	.word	0x40011000
 80057d8:	40004400 	.word	0x40004400
 80057dc:	40004800 	.word	0x40004800
 80057e0:	40011400 	.word	0x40011400
 80057e4:	40004c00 	.word	0x40004c00
 80057e8:	40005000 	.word	0x40005000

080057ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057ec:	b084      	sub	sp, #16
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	f107 001c 	add.w	r0, r7, #28
 80057fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005802:	2b01      	cmp	r3, #1
 8005804:	d123      	bne.n	800584e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800581a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800582e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005832:	2b01      	cmp	r3, #1
 8005834:	d105      	bne.n	8005842 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fae8 	bl	8006e18 <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e01b      	b.n	8005886 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fadc 	bl	8006e18 <USB_CoreReset>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005864:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
 8005878:	e005      	b.n	8005886 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005886:	7fbb      	ldrb	r3, [r7, #30]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10b      	bne.n	80058a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f043 0206 	orr.w	r2, r3, #6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b0:	b004      	add	sp, #16
 80058b2:	4770      	bx	lr

080058b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d165      	bne.n	8005994 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a41      	ldr	r2, [pc, #260]	@ (80059d0 <USB_SetTurnaroundTime+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d906      	bls.n	80058de <USB_SetTurnaroundTime+0x2a>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4a40      	ldr	r2, [pc, #256]	@ (80059d4 <USB_SetTurnaroundTime+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d202      	bcs.n	80058de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058d8:	230f      	movs	r3, #15
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e062      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a3c      	ldr	r2, [pc, #240]	@ (80059d4 <USB_SetTurnaroundTime+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d306      	bcc.n	80058f4 <USB_SetTurnaroundTime+0x40>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4a3b      	ldr	r2, [pc, #236]	@ (80059d8 <USB_SetTurnaroundTime+0x124>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d202      	bcs.n	80058f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ee:	230e      	movs	r3, #14
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e057      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a38      	ldr	r2, [pc, #224]	@ (80059d8 <USB_SetTurnaroundTime+0x124>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d306      	bcc.n	800590a <USB_SetTurnaroundTime+0x56>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4a37      	ldr	r2, [pc, #220]	@ (80059dc <USB_SetTurnaroundTime+0x128>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d202      	bcs.n	800590a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005904:	230d      	movs	r3, #13
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	e04c      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a33      	ldr	r2, [pc, #204]	@ (80059dc <USB_SetTurnaroundTime+0x128>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d306      	bcc.n	8005920 <USB_SetTurnaroundTime+0x6c>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4a32      	ldr	r2, [pc, #200]	@ (80059e0 <USB_SetTurnaroundTime+0x12c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d802      	bhi.n	8005920 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800591a:	230c      	movs	r3, #12
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e041      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a2f      	ldr	r2, [pc, #188]	@ (80059e0 <USB_SetTurnaroundTime+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d906      	bls.n	8005936 <USB_SetTurnaroundTime+0x82>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4a2e      	ldr	r2, [pc, #184]	@ (80059e4 <USB_SetTurnaroundTime+0x130>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d802      	bhi.n	8005936 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005930:	230b      	movs	r3, #11
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e036      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <USB_SetTurnaroundTime+0x130>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d906      	bls.n	800594c <USB_SetTurnaroundTime+0x98>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4a29      	ldr	r2, [pc, #164]	@ (80059e8 <USB_SetTurnaroundTime+0x134>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d802      	bhi.n	800594c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005946:	230a      	movs	r3, #10
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e02b      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a26      	ldr	r2, [pc, #152]	@ (80059e8 <USB_SetTurnaroundTime+0x134>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d906      	bls.n	8005962 <USB_SetTurnaroundTime+0xae>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4a25      	ldr	r2, [pc, #148]	@ (80059ec <USB_SetTurnaroundTime+0x138>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d202      	bcs.n	8005962 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800595c:	2309      	movs	r3, #9
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e020      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <USB_SetTurnaroundTime+0x138>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d306      	bcc.n	8005978 <USB_SetTurnaroundTime+0xc4>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <USB_SetTurnaroundTime+0x13c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d802      	bhi.n	8005978 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005972:	2308      	movs	r3, #8
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e015      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <USB_SetTurnaroundTime+0x13c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d906      	bls.n	800598e <USB_SetTurnaroundTime+0xda>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <USB_SetTurnaroundTime+0x140>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d202      	bcs.n	800598e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005988:	2307      	movs	r3, #7
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e00a      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800598e:	2306      	movs	r3, #6
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e007      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800599a:	2309      	movs	r3, #9
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e001      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059a0:	2309      	movs	r3, #9
 80059a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	029b      	lsls	r3, r3, #10
 80059b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	00d8acbf 	.word	0x00d8acbf
 80059d4:	00e4e1c0 	.word	0x00e4e1c0
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	01067380 	.word	0x01067380
 80059e0:	011a499f 	.word	0x011a499f
 80059e4:	01312cff 	.word	0x01312cff
 80059e8:	014ca43f 	.word	0x014ca43f
 80059ec:	016e3600 	.word	0x016e3600
 80059f0:	01a6ab1f 	.word	0x01a6ab1f
 80059f4:	01e84800 	.word	0x01e84800

080059f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f043 0201 	orr.w	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d115      	bne.n	8005a8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a6a:	200a      	movs	r0, #10
 8005a6c:	f7fc fbda 	bl	8002224 <HAL_Delay>
      ms += 10U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	330a      	adds	r3, #10
 8005a74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 f93f 	bl	8006cfa <USB_GetMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d01e      	beq.n	8005ac0 <USB_SetCurrentMode+0x84>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a86:	d9f0      	bls.n	8005a6a <USB_SetCurrentMode+0x2e>
 8005a88:	e01a      	b.n	8005ac0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d115      	bne.n	8005abc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a9c:	200a      	movs	r0, #10
 8005a9e:	f7fc fbc1 	bl	8002224 <HAL_Delay>
      ms += 10U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	330a      	adds	r3, #10
 8005aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f926 	bl	8006cfa <USB_GetMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <USB_SetCurrentMode+0x84>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ab8:	d9f0      	bls.n	8005a9c <USB_SetCurrentMode+0x60>
 8005aba:	e001      	b.n	8005ac0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e005      	b.n	8005acc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ac4:	d101      	bne.n	8005aca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e009      	b.n	8005b08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3340      	adds	r3, #64	@ 0x40
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3301      	adds	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b0e      	cmp	r3, #14
 8005b0c:	d9f2      	bls.n	8005af4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11c      	bne.n	8005b50 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b4e:	e00b      	b.n	8005b68 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10d      	bne.n	8005b98 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b84:	2100      	movs	r1, #0
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f968 	bl	8005e5c <USB_SetDevSpeed>
 8005b8c:	e008      	b.n	8005ba0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b8e:	2101      	movs	r1, #1
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f963 	bl	8005e5c <USB_SetDevSpeed>
 8005b96:	e003      	b.n	8005ba0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b98:	2103      	movs	r1, #3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f95e 	bl	8005e5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8fa 	bl	8005d9c <USB_FlushTxFifo>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f924 	bl	8005e00 <USB_FlushRxFifo>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	461a      	mov	r2, r3
 8005be2:	2300      	movs	r3, #0
 8005be4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e043      	b.n	8005c74 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c02:	d118      	bne.n	8005c36 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e013      	b.n	8005c48 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e008      	b.n	8005c48 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	461a      	mov	r2, r3
 8005c68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c78:	461a      	mov	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d3b5      	bcc.n	8005bec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	e043      	b.n	8005d0e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c9c:	d118      	bne.n	8005cd0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e013      	b.n	8005ce2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e008      	b.n	8005ce2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	461a      	mov	r2, r3
 8005d02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d12:	461a      	mov	r2, r3
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d3b5      	bcc.n	8005c86 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f043 0210 	orr.w	r2, r3, #16
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <USB_DevInit+0x2c4>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f043 0208 	orr.w	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d107      	bne.n	8005d88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d80:	f043 0304 	orr.w	r3, r3, #4
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d94:	b004      	add	sp, #16
 8005d96:	4770      	bx	lr
 8005d98:	803c3800 	.word	0x803c3800

08005d9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db6:	d901      	bls.n	8005dbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e01b      	b.n	8005df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	daf2      	bge.n	8005daa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	019b      	lsls	r3, r3, #6
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de0:	d901      	bls.n	8005de6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e006      	b.n	8005df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d0f0      	beq.n	8005dd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e18:	d901      	bls.n	8005e1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e018      	b.n	8005e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	daf2      	bge.n	8005e0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e3c:	d901      	bls.n	8005e42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e006      	b.n	8005e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d0f0      	beq.n	8005e30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	68f9      	ldr	r1, [r7, #12]
 8005e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0306 	and.w	r3, r3, #6
 8005ea6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
 8005eb2:	e00a      	b.n	8005eca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d002      	beq.n	8005ec0 <USB_GetDevSpeed+0x32>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d102      	bne.n	8005ec6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	75fb      	strb	r3, [r7, #23]
 8005ec4:	e001      	b.n	8005eca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ec6:	230f      	movs	r3, #15
 8005ec8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d13a      	bne.n	8005f6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d155      	bne.n	8005fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	059b      	lsls	r3, r3, #22
 8005f4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f50:	4313      	orrs	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e036      	b.n	8005fd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	69da      	ldr	r2, [r3, #28]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d11a      	bne.n	8005fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	791b      	ldrb	r3, [r3, #4]
 8005fbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d161      	bne.n	80060c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800601a:	d11f      	bne.n	800605c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006036:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800603a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	2101      	movs	r1, #1
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	b29b      	uxth	r3, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800607c:	4013      	ands	r3, r2
 800607e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2101      	movs	r1, #1
 8006092:	fa01 f303 	lsl.w	r3, r1, r3
 8006096:	b29b      	uxth	r3, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a0:	4013      	ands	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	0159      	lsls	r1, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	440b      	add	r3, r1
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	4619      	mov	r1, r3
 80060c0:	4b35      	ldr	r3, [pc, #212]	@ (8006198 <USB_DeactivateEndpoint+0x1b0>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]
 80060c6:	e060      	b.n	800618a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060de:	d11f      	bne.n	8006120 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800611e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	43db      	mvns	r3, r3
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006140:	4013      	ands	r3, r2
 8006142:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	43db      	mvns	r3, r3
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006164:	4013      	ands	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	0159      	lsls	r1, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	440b      	add	r3, r1
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	4619      	mov	r1, r3
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <USB_DeactivateEndpoint+0x1b4>)
 8006186:	4013      	ands	r3, r2
 8006188:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	ec337800 	.word	0xec337800
 800619c:	eff37800 	.word	0xeff37800

080061a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	f040 817f 	bne.w	80064c0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d132      	bne.n	8006230 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006208:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800620c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006228:	0cdb      	lsrs	r3, r3, #19
 800622a:	04db      	lsls	r3, r3, #19
 800622c:	6113      	str	r3, [r2, #16]
 800622e:	e097      	b.n	8006360 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800624a:	0cdb      	lsrs	r3, r3, #19
 800624c:	04db      	lsls	r3, r3, #19
 800624e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800626e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006272:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11a      	bne.n	80062b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d903      	bls.n	800628e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062ac:	6113      	str	r3, [r2, #16]
 80062ae:	e044      	b.n	800633a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	04d9      	lsls	r1, r3, #19
 80062d8:	4ba4      	ldr	r3, [pc, #656]	@ (800656c <USB_EPStartXfer+0x3cc>)
 80062da:	400b      	ands	r3, r1
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d122      	bne.n	800633a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006312:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	8afb      	ldrh	r3, [r7, #22]
 8006324:	075b      	lsls	r3, r3, #29
 8006326:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	0148      	lsls	r0, r1, #5
 800632e:	69f9      	ldr	r1, [r7, #28]
 8006330:	4401      	add	r1, r0
 8006332:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006336:	4313      	orrs	r3, r2
 8006338:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	0148      	lsls	r0, r1, #5
 8006354:	69f9      	ldr	r1, [r7, #28]
 8006356:	4401      	add	r1, r0
 8006358:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800635c:	4313      	orrs	r3, r2
 800635e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d14b      	bne.n	80063fe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	791b      	ldrb	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d128      	bne.n	80063dc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d110      	bne.n	80063bc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e00f      	b.n	80063dc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063da:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e166      	b.n	80066cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006418:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800641c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d015      	beq.n	8006452 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 814e 	beq.w	80066cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	2101      	movs	r1, #1
 8006442:	fa01 f303 	lsl.w	r3, r1, r3
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800644c:	4313      	orrs	r3, r2
 800644e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006450:	e13c      	b.n	80066cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e00f      	b.n	80064a4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	b298      	uxth	r0, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4603      	mov	r3, r0
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f9b9 	bl	8006830 <USB_WritePacket>
 80064be:	e105      	b.n	80066cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064da:	0cdb      	lsrs	r3, r3, #19
 80064dc:	04db      	lsls	r3, r3, #19
 80064de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006502:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d132      	bne.n	8006570 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	0148      	lsls	r0, r1, #5
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	4401      	add	r1, r0
 8006540:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006562:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006566:	6113      	str	r3, [r2, #16]
 8006568:	e062      	b.n	8006630 <USB_EPStartXfer+0x490>
 800656a:	bf00      	nop
 800656c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d123      	bne.n	80065c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	69b9      	ldr	r1, [r7, #24]
 8006590:	0148      	lsls	r0, r1, #5
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	4401      	add	r1, r0
 8006596:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	e037      	b.n	8006630 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	1e5a      	subs	r2, r3, #1
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	8afa      	ldrh	r2, [r7, #22]
 80065dc:	fb03 f202 	mul.w	r2, r3, r2
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	8afb      	ldrh	r3, [r7, #22]
 80065f4:	04d9      	lsls	r1, r3, #19
 80065f6:	4b38      	ldr	r3, [pc, #224]	@ (80066d8 <USB_EPStartXfer+0x538>)
 80065f8:	400b      	ands	r3, r1
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	0148      	lsls	r0, r1, #5
 80065fe:	69f9      	ldr	r1, [r7, #28]
 8006600:	4401      	add	r1, r0
 8006602:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	0148      	lsls	r0, r1, #5
 8006624:	69f9      	ldr	r1, [r7, #28]
 8006626:	4401      	add	r1, r0
 8006628:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800662c:	4313      	orrs	r3, r2
 800662e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10d      	bne.n	8006652 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	460a      	mov	r2, r1
 8006650:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	791b      	ldrb	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d128      	bne.n	80066ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006684:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e00f      	b.n	80066ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	1ff80000 	.word	0x1ff80000

080066dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d14a      	bne.n	8006790 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006712:	f040 8086 	bne.w	8006822 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006734:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006738:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f242 7210 	movw	r2, #10000	@ 0x2710
 800676a:	4293      	cmp	r3, r2
 800676c:	d902      	bls.n	8006774 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
          break;
 8006772:	e056      	b.n	8006822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800678c:	d0e7      	beq.n	800675e <USB_EPStopXfer+0x82>
 800678e:	e048      	b.n	8006822 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a8:	d13b      	bne.n	8006822 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067fe:	4293      	cmp	r3, r2
 8006800:	d902      	bls.n	8006808 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
          break;
 8006806:	e00c      	b.n	8006822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006820:	d0e7      	beq.n	80067f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	@ 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	460b      	mov	r3, r1
 8006840:	71fb      	strb	r3, [r7, #7]
 8006842:	4613      	mov	r3, r2
 8006844:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800684e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	d123      	bne.n	800689e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006856:	88bb      	ldrh	r3, [r7, #4]
 8006858:	3303      	adds	r3, #3
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e018      	b.n	8006896 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	031a      	lsls	r2, r3, #12
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4413      	add	r3, r2
 800686c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006870:	461a      	mov	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3301      	adds	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3301      	adds	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3301      	adds	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d3e2      	bcc.n	8006864 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3724      	adds	r7, #36	@ 0x24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b08b      	sub	sp, #44	@ 0x2c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	e014      	b.n	8006902 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	3301      	adds	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	3301      	adds	r3, #1
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	3301      	adds	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	3301      	adds	r3, #1
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	3301      	adds	r3, #1
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	429a      	cmp	r2, r3
 8006908:	d3e6      	bcc.n	80068d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800690a:	8bfb      	ldrh	r3, [r7, #30]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691a:	461a      	mov	r2, r3
 800691c:	f107 0310 	add.w	r3, r7, #16
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
 8006930:	b2da      	uxtb	r2, r3
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	701a      	strb	r2, [r3, #0]
      i++;
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	3301      	adds	r3, #1
 800693a:	623b      	str	r3, [r7, #32]
      pDest++;
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	3301      	adds	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006942:	8bfb      	ldrh	r3, [r7, #30]
 8006944:	3b01      	subs	r3, #1
 8006946:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006948:	8bfb      	ldrh	r3, [r7, #30]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ea      	bne.n	8006924 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006950:	4618      	mov	r0, r3
 8006952:	372c      	adds	r7, #44	@ 0x2c
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d12c      	bne.n	80069d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db12      	blt.n	80069b0 <USB_EPSetStall+0x54>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e02b      	b.n	8006a2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db12      	blt.n	8006a0a <USB_EPSetStall+0xae>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d128      	bne.n	8006aa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	791b      	ldrb	r3, [r3, #4]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d003      	beq.n	8006a84 <USB_EPClearStall+0x4c>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d138      	bne.n	8006af6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	e027      	b.n	8006af6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ac4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d003      	beq.n	8006ad6 <USB_EPClearStall+0x9e>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d10f      	bne.n	8006af6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b7e:	f023 0302 	bic.w	r3, r3, #2
 8006b82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bac:	f023 0303 	bic.w	r3, r3, #3
 8006bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0c1b      	lsrs	r3, r3, #16
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	b29b      	uxth	r3, r3
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c90:	68bb      	ldr	r3, [r7, #8]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	01db      	lsls	r3, r3, #7
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cec:	68bb      	ldr	r3, [r7, #8]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0301 	and.w	r3, r3, #1
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	460b      	mov	r3, r1
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	333c      	adds	r3, #60	@ 0x3c
 8006d72:	3304      	adds	r3, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4a26      	ldr	r2, [pc, #152]	@ (8006e14 <USB_EP0_OutStart+0xb8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d90a      	bls.n	8006d96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d90:	d101      	bne.n	8006d96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e037      	b.n	8006e06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc4:	f043 0318 	orr.w	r3, r3, #24
 8006dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dd8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ddc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10f      	bne.n	8006e04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dfe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	4f54300a 	.word	0x4f54300a

08006e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e30:	d901      	bls.n	8006e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e01b      	b.n	8006e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	daf2      	bge.n	8006e24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f043 0201 	orr.w	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e5a:	d901      	bls.n	8006e60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e006      	b.n	8006e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d0f0      	beq.n	8006e4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e8c:	f002 fc9e 	bl	80097cc <USBD_static_malloc>
 8006e90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	@ 0xb0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e0d4      	b.n	8007056 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006eac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f003 fb21 	bl	800a4fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	32b0      	adds	r2, #176	@ 0xb0
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32b0      	adds	r2, #176	@ 0xb0
 8006ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	7c1b      	ldrb	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d138      	bne.n	8006f56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8007060 <USBD_CDC_Init+0x1e4>)
 8006ee6:	7819      	ldrb	r1, [r3, #0]
 8006ee8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eec:	2202      	movs	r2, #2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 fb49 	bl	8009586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8007060 <USBD_CDC_Init+0x1e4>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 020f 	and.w	r2, r3, #15
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	3324      	adds	r3, #36	@ 0x24
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f0e:	4b55      	ldr	r3, [pc, #340]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f16:	2202      	movs	r2, #2
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f002 fb34 	bl	8009586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f1e:	4b51      	ldr	r3, [pc, #324]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f003 020f 	and.w	r2, r3, #15
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f36:	2201      	movs	r2, #1
 8006f38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007068 <USBD_CDC_Init+0x1ec>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3326      	adds	r3, #38	@ 0x26
 8006f50:	2210      	movs	r2, #16
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e035      	b.n	8006fc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f56:	4b42      	ldr	r3, [pc, #264]	@ (8007060 <USBD_CDC_Init+0x1e4>)
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	2340      	movs	r3, #64	@ 0x40
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 fb11 	bl	8009586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f64:	4b3e      	ldr	r3, [pc, #248]	@ (8007060 <USBD_CDC_Init+0x1e4>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3324      	adds	r3, #36	@ 0x24
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f7e:	4b39      	ldr	r3, [pc, #228]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	2340      	movs	r3, #64	@ 0x40
 8006f84:	2202      	movs	r2, #2
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f002 fafd 	bl	8009586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f8c:	4b35      	ldr	r3, [pc, #212]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8007068 <USBD_CDC_Init+0x1ec>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	3326      	adds	r3, #38	@ 0x26
 8006fbe:	2210      	movs	r2, #16
 8006fc0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fc2:	4b29      	ldr	r3, [pc, #164]	@ (8007068 <USBD_CDC_Init+0x1ec>)
 8006fc4:	7819      	ldrb	r1, [r3, #0]
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	2203      	movs	r2, #3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f002 fadb 	bl	8009586 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fd0:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <USBD_CDC_Init+0x1ec>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3324      	adds	r3, #36	@ 0x24
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	33b0      	adds	r3, #176	@ 0xb0
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007020:	2302      	movs	r3, #2
 8007022:	e018      	b.n	8007056 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7c1b      	ldrb	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 800702e:	7819      	ldrb	r1, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f002 fb92 	bl	8009764 <USBD_LL_PrepareReceive>
 8007040:	e008      	b.n	8007054 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007042:	4b08      	ldr	r3, [pc, #32]	@ (8007064 <USBD_CDC_Init+0x1e8>)
 8007044:	7819      	ldrb	r1, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800704c:	2340      	movs	r3, #64	@ 0x40
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f002 fb88 	bl	8009764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000093 	.word	0x20000093
 8007064:	20000094 	.word	0x20000094
 8007068:	20000095 	.word	0x20000095

0800706c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007078:	4b3a      	ldr	r3, [pc, #232]	@ (8007164 <USBD_CDC_DeInit+0xf8>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f002 faa7 	bl	80095d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007084:	4b37      	ldr	r3, [pc, #220]	@ (8007164 <USBD_CDC_DeInit+0xf8>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 020f 	and.w	r2, r3, #15
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	3324      	adds	r3, #36	@ 0x24
 800709a:	2200      	movs	r2, #0
 800709c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800709e:	4b32      	ldr	r3, [pc, #200]	@ (8007168 <USBD_CDC_DeInit+0xfc>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f002 fa94 	bl	80095d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007168 <USBD_CDC_DeInit+0xfc>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070c2:	2200      	movs	r2, #0
 80070c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070c6:	4b29      	ldr	r3, [pc, #164]	@ (800716c <USBD_CDC_DeInit+0x100>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f002 fa80 	bl	80095d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070d2:	4b26      	ldr	r3, [pc, #152]	@ (800716c <USBD_CDC_DeInit+0x100>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	3324      	adds	r3, #36	@ 0x24
 80070e8:	2200      	movs	r2, #0
 80070ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070ec:	4b1f      	ldr	r3, [pc, #124]	@ (800716c <USBD_CDC_DeInit+0x100>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	3326      	adds	r3, #38	@ 0x26
 8007102:	2200      	movs	r2, #0
 8007104:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	32b0      	adds	r2, #176	@ 0xb0
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01f      	beq.n	8007158 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	33b0      	adds	r3, #176	@ 0xb0
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	32b0      	adds	r2, #176	@ 0xb0
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	4618      	mov	r0, r3
 800713c:	f002 fb54 	bl	80097e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	32b0      	adds	r2, #176	@ 0xb0
 800714a:	2100      	movs	r1, #0
 800714c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000093 	.word	0x20000093
 8007168:	20000094 	.word	0x20000094
 800716c:	20000095 	.word	0x20000095

08007170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32b0      	adds	r2, #176	@ 0xb0
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	e0bf      	b.n	8007320 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d050      	beq.n	800724e <USBD_CDC_Setup+0xde>
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	f040 80af 	bne.w	8007310 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	88db      	ldrh	r3, [r3, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03a      	beq.n	8007230 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da1b      	bge.n	80071fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	33b0      	adds	r3, #176	@ 0xb0
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	88d2      	ldrh	r2, [r2, #6]
 80071e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b07      	cmp	r3, #7
 80071e8:	bf28      	it	cs
 80071ea:	2307      	movcs	r3, #7
 80071ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fd93 	bl	8008d20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071fa:	e090      	b.n	800731e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	785a      	ldrb	r2, [r3, #1]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b3f      	cmp	r3, #63	@ 0x3f
 800720c:	d803      	bhi.n	8007216 <USBD_CDC_Setup+0xa6>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	88db      	ldrh	r3, [r3, #6]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	e000      	b.n	8007218 <USBD_CDC_Setup+0xa8>
 8007216:	2240      	movs	r2, #64	@ 0x40
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800721e:	6939      	ldr	r1, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007226:	461a      	mov	r2, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fda5 	bl	8008d78 <USBD_CtlPrepareRx>
      break;
 800722e:	e076      	b.n	800731e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	33b0      	adds	r3, #176	@ 0xb0
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	7850      	ldrb	r0, [r2, #1]
 8007246:	2200      	movs	r2, #0
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	4798      	blx	r3
      break;
 800724c:	e067      	b.n	800731e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b0b      	cmp	r3, #11
 8007254:	d851      	bhi.n	80072fa <USBD_CDC_Setup+0x18a>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <USBD_CDC_Setup+0xec>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	0800728d 	.word	0x0800728d
 8007260:	08007309 	.word	0x08007309
 8007264:	080072fb 	.word	0x080072fb
 8007268:	080072fb 	.word	0x080072fb
 800726c:	080072fb 	.word	0x080072fb
 8007270:	080072fb 	.word	0x080072fb
 8007274:	080072fb 	.word	0x080072fb
 8007278:	080072fb 	.word	0x080072fb
 800727c:	080072fb 	.word	0x080072fb
 8007280:	080072fb 	.word	0x080072fb
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072e1 	.word	0x080072e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b03      	cmp	r3, #3
 8007296:	d107      	bne.n	80072a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007298:	f107 030a 	add.w	r3, r7, #10
 800729c:	2202      	movs	r2, #2
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fd3d 	bl	8008d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072a6:	e032      	b.n	800730e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fcbb 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	75fb      	strb	r3, [r7, #23]
          break;
 80072b4:	e02b      	b.n	800730e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d107      	bne.n	80072d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072c2:	f107 030d 	add.w	r3, r7, #13
 80072c6:	2201      	movs	r2, #1
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fd28 	bl	8008d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072d0:	e01d      	b.n	800730e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fca6 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	75fb      	strb	r3, [r7, #23]
          break;
 80072de:	e016      	b.n	800730e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d00f      	beq.n	800730c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fc99 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072f8:	e008      	b.n	800730c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fc92 	bl	8008c26 <USBD_CtlError>
          ret = USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	75fb      	strb	r3, [r7, #23]
          break;
 8007306:	e002      	b.n	800730e <USBD_CDC_Setup+0x19e>
          break;
 8007308:	bf00      	nop
 800730a:	e008      	b.n	800731e <USBD_CDC_Setup+0x1ae>
          break;
 800730c:	bf00      	nop
      }
      break;
 800730e:	e006      	b.n	800731e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fc87 	bl	8008c26 <USBD_CtlError>
      ret = USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	75fb      	strb	r3, [r7, #23]
      break;
 800731c:	bf00      	nop
  }

  return (uint8_t)ret;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800733a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32b0      	adds	r2, #176	@ 0xb0
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	e065      	b.n	800741e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	32b0      	adds	r2, #176	@ 0xb0
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3318      	adds	r3, #24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02f      	beq.n	80073dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	f003 020f 	and.w	r2, r3, #15
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	3318      	adds	r3, #24
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	f003 010f 	and.w	r1, r3, #15
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	460b      	mov	r3, r1
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	440b      	add	r3, r1
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4403      	add	r3, r0
 80073a4:	331c      	adds	r3, #28
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d112      	bne.n	80073dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3318      	adds	r3, #24
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073ce:	78f9      	ldrb	r1, [r7, #3]
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 f9a4 	bl	8009722 <USBD_LL_Transmit>
 80073da:	e01f      	b.n	800741c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	33b0      	adds	r3, #176	@ 0xb0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	33b0      	adds	r3, #176	@ 0xb0
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32b0      	adds	r2, #176	@ 0xb0
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32b0      	adds	r2, #176	@ 0xb0
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e01a      	b.n	800748e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 f9a2 	bl	80097a6 <USBD_LL_GetRxDataSize>
 8007462:	4602      	mov	r2, r0
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	33b0      	adds	r3, #176	@ 0xb0
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007488:	4611      	mov	r1, r2
 800748a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	32b0      	adds	r2, #176	@ 0xb0
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e024      	b.n	8007502 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	33b0      	adds	r3, #176	@ 0xb0
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d019      	beq.n	8007500 <USBD_CDC_EP0_RxReady+0x6a>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80074d2:	2bff      	cmp	r3, #255	@ 0xff
 80074d4:	d014      	beq.n	8007500 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	33b0      	adds	r3, #176	@ 0xb0
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80074ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	22ff      	movs	r2, #255	@ 0xff
 80074fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007514:	2182      	movs	r1, #130	@ 0x82
 8007516:	4818      	ldr	r0, [pc, #96]	@ (8007578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007518:	f000 fd4f 	bl	8007fba <USBD_GetEpDesc>
 800751c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800751e:	2101      	movs	r1, #1
 8007520:	4815      	ldr	r0, [pc, #84]	@ (8007578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007522:	f000 fd4a 	bl	8007fba <USBD_GetEpDesc>
 8007526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007528:	2181      	movs	r1, #129	@ 0x81
 800752a:	4813      	ldr	r0, [pc, #76]	@ (8007578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800752c:	f000 fd45 	bl	8007fba <USBD_GetEpDesc>
 8007530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2210      	movs	r2, #16
 800753c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2200      	movs	r2, #0
 8007548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800754c:	711a      	strb	r2, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007560:	711a      	strb	r2, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2243      	movs	r2, #67	@ 0x43
 800756a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800756c:	4b02      	ldr	r3, [pc, #8]	@ (8007578 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000050 	.word	0x20000050

0800757c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007584:	2182      	movs	r1, #130	@ 0x82
 8007586:	4818      	ldr	r0, [pc, #96]	@ (80075e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007588:	f000 fd17 	bl	8007fba <USBD_GetEpDesc>
 800758c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800758e:	2101      	movs	r1, #1
 8007590:	4815      	ldr	r0, [pc, #84]	@ (80075e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007592:	f000 fd12 	bl	8007fba <USBD_GetEpDesc>
 8007596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007598:	2181      	movs	r1, #129	@ 0x81
 800759a:	4813      	ldr	r0, [pc, #76]	@ (80075e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800759c:	f000 fd0d 	bl	8007fba <USBD_GetEpDesc>
 80075a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2210      	movs	r2, #16
 80075ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2200      	movs	r2, #0
 80075b8:	711a      	strb	r2, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f042 0202 	orr.w	r2, r2, #2
 80075c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	711a      	strb	r2, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f042 0202 	orr.w	r2, r2, #2
 80075d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2243      	movs	r2, #67	@ 0x43
 80075da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075dc:	4b02      	ldr	r3, [pc, #8]	@ (80075e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000050 	.word	0x20000050

080075ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075f4:	2182      	movs	r1, #130	@ 0x82
 80075f6:	4818      	ldr	r0, [pc, #96]	@ (8007658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075f8:	f000 fcdf 	bl	8007fba <USBD_GetEpDesc>
 80075fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075fe:	2101      	movs	r1, #1
 8007600:	4815      	ldr	r0, [pc, #84]	@ (8007658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007602:	f000 fcda 	bl	8007fba <USBD_GetEpDesc>
 8007606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007608:	2181      	movs	r1, #129	@ 0x81
 800760a:	4813      	ldr	r0, [pc, #76]	@ (8007658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800760c:	f000 fcd5 	bl	8007fba <USBD_GetEpDesc>
 8007610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2210      	movs	r2, #16
 800761c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2200      	movs	r2, #0
 8007628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800762c:	711a      	strb	r2, [r3, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d006      	beq.n	8007646 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007640:	711a      	strb	r2, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2243      	movs	r2, #67	@ 0x43
 800764a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800764c:	4b02      	ldr	r3, [pc, #8]	@ (8007658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000050 	.word	0x20000050

0800765c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	220a      	movs	r2, #10
 8007668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800766a:	4b03      	ldr	r3, [pc, #12]	@ (8007678 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	2000000c 	.word	0x2000000c

0800767c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e009      	b.n	80076a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	33b0      	adds	r3, #176	@ 0xb0
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	32b0      	adds	r2, #176	@ 0xb0
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e008      	b.n	80076e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	32b0      	adds	r2, #176	@ 0xb0
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e004      	b.n	8007722 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32b0      	adds	r2, #176	@ 0xb0
 8007742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007746:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	e025      	b.n	80077a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11f      	bne.n	80077a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2201      	movs	r2, #1
 8007764:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007768:	4b10      	ldr	r3, [pc, #64]	@ (80077ac <USBD_CDC_TransmitPacket+0x7c>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 020f 	and.w	r2, r3, #15
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4403      	add	r3, r0
 8007782:	3318      	adds	r3, #24
 8007784:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007786:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <USBD_CDC_TransmitPacket+0x7c>)
 8007788:	7819      	ldrb	r1, [r3, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 ffc3 	bl	8009722 <USBD_LL_Transmit>

    ret = USBD_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000093 	.word	0x20000093

080077b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32b0      	adds	r2, #176	@ 0xb0
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	e018      	b.n	8007810 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <USBD_CDC_ReceivePacket+0x68>)
 80077e8:	7819      	ldrb	r1, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 ffb5 	bl	8009764 <USBD_LL_PrepareReceive>
 80077fa:	e008      	b.n	800780e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077fc:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <USBD_CDC_ReceivePacket+0x68>)
 80077fe:	7819      	ldrb	r1, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007806:	2340      	movs	r3, #64	@ 0x40
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 ffab 	bl	8009764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000094 	.word	0x20000094

0800781c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	e01f      	b.n	8007874 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	79fa      	ldrb	r2, [r7, #7]
 8007866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f001 fe25 	bl	80094b8 <USBD_LL_Init>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007890:	2303      	movs	r3, #3
 8007892:	e025      	b.n	80078e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	@ 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	@ 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	f107 020e 	add.w	r2, r7, #14
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fe2d 	bl	8009550 <USBD_LL_Start>
 80078f6:	4603      	mov	r3, r0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	4611      	mov	r1, r2
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	4611      	mov	r1, r2
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f90c 	bl	8008bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079a8:	461a      	mov	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d01a      	beq.n	80079f4 <USBD_LL_SetupStage+0x72>
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d822      	bhi.n	8007a08 <USBD_LL_SetupStage+0x86>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <USBD_LL_SetupStage+0x4a>
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d00a      	beq.n	80079e0 <USBD_LL_SetupStage+0x5e>
 80079ca:	e01d      	b.n	8007a08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fb63 	bl	80080a0 <USBD_StdDevReq>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
      break;
 80079de:	e020      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fbcb 	bl	8008184 <USBD_StdItfReq>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
      break;
 80079f2:	e016      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc2d 	bl	800825c <USBD_StdEPReq>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e00c      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fdfa 	bl	8009610 <USBD_LL_StallEP>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a20:	bf00      	nop
  }

  return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	460b      	mov	r3, r1
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d16e      	bne.n	8007b22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	f040 8098 	bne.w	8007b88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d913      	bls.n	8007a8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	1ad2      	subs	r2, r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	bf28      	it	cs
 8007a7e:	4613      	movcs	r3, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f001 f994 	bl	8008db2 <USBD_CtlContinueRx>
 8007a8a:	e07d      	b.n	8007b88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d014      	beq.n	8007ac4 <USBD_LL_DataOutStage+0x98>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d81d      	bhi.n	8007ada <USBD_LL_DataOutStage+0xae>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <USBD_LL_DataOutStage+0x7c>
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d003      	beq.n	8007aae <USBD_LL_DataOutStage+0x82>
 8007aa6:	e018      	b.n	8007ada <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8007aac:	e018      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fa64 	bl	8007f86 <USBD_CoreFindIF>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ac2:	e00d      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fa66 	bl	8007fa0 <USBD_CoreFindEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ad8:	e002      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75bb      	strb	r3, [r7, #22]
            break;
 8007ade:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d119      	bne.n	8007b1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d113      	bne.n	8007b1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007af2:	7dba      	ldrb	r2, [r7, #22]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	32ae      	adds	r2, #174	@ 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b02:	7dba      	ldrb	r2, [r7, #22]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b0a:	7dba      	ldrb	r2, [r7, #22]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	32ae      	adds	r2, #174	@ 0xae
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 f95a 	bl	8008dd4 <USBD_CtlSendStatus>
 8007b20:	e032      	b.n	8007b88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fa37 	bl	8007fa0 <USBD_CoreFindEP>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b36:	7dbb      	ldrb	r3, [r7, #22]
 8007b38:	2bff      	cmp	r3, #255	@ 0xff
 8007b3a:	d025      	beq.n	8007b88 <USBD_LL_DataOutStage+0x15c>
 8007b3c:	7dbb      	ldrb	r3, [r7, #22]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d122      	bne.n	8007b88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d117      	bne.n	8007b7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b4e:	7dba      	ldrb	r2, [r7, #22]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	32ae      	adds	r2, #174	@ 0xae
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b5e:	7dba      	ldrb	r2, [r7, #22]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b66:	7dba      	ldrb	r2, [r7, #22]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	32ae      	adds	r2, #174	@ 0xae
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	7afa      	ldrb	r2, [r7, #11]
 8007b74:	4611      	mov	r1, r2
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	e000      	b.n	8007b8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d16f      	bne.n	8007c86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d15a      	bne.n	8007c6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d914      	bls.n	8007bec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 f8bc 	bl	8008d56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bde:	2300      	movs	r3, #0
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f001 fdbd 	bl	8009764 <USBD_LL_PrepareReceive>
 8007bea:	e03f      	b.n	8007c6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d11c      	bne.n	8007c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d316      	bcc.n	8007c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d20f      	bcs.n	8007c32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f001 f89d 	bl	8008d56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f001 fd9a 	bl	8009764 <USBD_LL_PrepareReceive>
 8007c30:	e01c      	b.n	8007c6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d10f      	bne.n	8007c5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5e:	2180      	movs	r1, #128	@ 0x80
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f001 fcd5 	bl	8009610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 f8c7 	bl	8008dfa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d03a      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fe42 	bl	8007900 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c84:	e032      	b.n	8007cec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f985 	bl	8007fa0 <USBD_CoreFindEP>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	2bff      	cmp	r3, #255	@ 0xff
 8007c9e:	d025      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d122      	bne.n	8007cec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d11c      	bne.n	8007cec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cb2:	7dfa      	ldrb	r2, [r7, #23]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	32ae      	adds	r2, #174	@ 0xae
 8007cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d014      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cc2:	7dfa      	ldrb	r2, [r7, #23]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cca:	7dfa      	ldrb	r2, [r7, #23]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	32ae      	adds	r2, #174	@ 0xae
 8007cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	7afa      	ldrb	r2, [r7, #11]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ce2:	7dbb      	ldrb	r3, [r7, #22]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ce8:	7dbb      	ldrb	r3, [r7, #22]
 8007cea:	e000      	b.n	8007cee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d014      	beq.n	8007d5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	6852      	ldr	r2, [r2, #4]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d5c:	2340      	movs	r3, #64	@ 0x40
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fc0f 	bl	8009586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2240      	movs	r2, #64	@ 0x40
 8007d74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d78:	2340      	movs	r3, #64	@ 0x40
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2180      	movs	r1, #128	@ 0x80
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fc01 	bl	8009586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	621a      	str	r2, [r3, #32]

  return ret;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d006      	beq.n	8007ddc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d106      	bne.n	8007e14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d110      	bne.n	8007e58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	32ae      	adds	r2, #174	@ 0xae
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e01c      	b.n	8007ebe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d115      	bne.n	8007ebc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32ae      	adds	r2, #174	@ 0xae
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	32ae      	adds	r2, #174	@ 0xae
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32ae      	adds	r2, #174	@ 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e01c      	b.n	8007f22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d115      	bne.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32ae      	adds	r2, #174	@ 0xae
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	@ 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6852      	ldr	r2, [r2, #4]
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d91f      	bls.n	8008020 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fe6:	e013      	b.n	8008010 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fe8:	f107 030a 	add.w	r3, r7, #10
 8007fec:	4619      	mov	r1, r3
 8007fee:	6978      	ldr	r0, [r7, #20]
 8007ff0:	f000 f81b 	bl	800802a <USBD_GetNextDesc>
 8007ff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	d108      	bne.n	8008010 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	789b      	ldrb	r3, [r3, #2]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	429a      	cmp	r2, r3
 800800a:	d008      	beq.n	800801e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	885b      	ldrh	r3, [r3, #2]
 8008014:	b29a      	uxth	r2, r3
 8008016:	897b      	ldrh	r3, [r7, #10]
 8008018:	429a      	cmp	r2, r3
 800801a:	d8e5      	bhi.n	8007fe8 <USBD_GetEpDesc+0x2e>
 800801c:	e000      	b.n	8008020 <USBD_GetEpDesc+0x66>
          break;
 800801e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008020:	693b      	ldr	r3, [r7, #16]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	4413      	add	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008062:	b480      	push	{r7}
 8008064:	b087      	sub	sp, #28
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008080:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	b21a      	sxth	r2, r3
 8008088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800808c:	4313      	orrs	r3, r2
 800808e:	b21b      	sxth	r3, r3
 8008090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008092:	89fb      	ldrh	r3, [r7, #14]
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d005      	beq.n	80080c6 <USBD_StdDevReq+0x26>
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d857      	bhi.n	800816e <USBD_StdDevReq+0xce>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00f      	beq.n	80080e2 <USBD_StdDevReq+0x42>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d153      	bne.n	800816e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32ae      	adds	r2, #174	@ 0xae
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
      break;
 80080e0:	e04a      	b.n	8008178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d83b      	bhi.n	8008162 <USBD_StdDevReq+0xc2>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_StdDevReq+0x50>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008145 	.word	0x08008145
 80080f4:	08008159 	.word	0x08008159
 80080f8:	08008163 	.word	0x08008163
 80080fc:	0800814f 	.word	0x0800814f
 8008100:	08008163 	.word	0x08008163
 8008104:	08008123 	.word	0x08008123
 8008108:	08008119 	.word	0x08008119
 800810c:	08008163 	.word	0x08008163
 8008110:	0800813b 	.word	0x0800813b
 8008114:	0800812d 	.word	0x0800812d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa3c 	bl	8008598 <USBD_GetDescriptor>
          break;
 8008120:	e024      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fba1 	bl	800886c <USBD_SetAddress>
          break;
 800812a:	e01f      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fbe0 	bl	80088f4 <USBD_SetConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
          break;
 8008138:	e018      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fc83 	bl	8008a48 <USBD_GetConfig>
          break;
 8008142:	e013      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fcb4 	bl	8008ab4 <USBD_GetStatus>
          break;
 800814c:	e00e      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fce3 	bl	8008b1c <USBD_SetFeature>
          break;
 8008156:	e009      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fd07 	bl	8008b6e <USBD_ClrFeature>
          break;
 8008160:	e004      	b.n	800816c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fd5e 	bl	8008c26 <USBD_CtlError>
          break;
 800816a:	bf00      	nop
      }
      break;
 800816c:	e004      	b.n	8008178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fd58 	bl	8008c26 <USBD_CtlError>
      break;
 8008176:	bf00      	nop
  }

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop

08008184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800819a:	2b40      	cmp	r3, #64	@ 0x40
 800819c:	d005      	beq.n	80081aa <USBD_StdItfReq+0x26>
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d852      	bhi.n	8008248 <USBD_StdItfReq+0xc4>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <USBD_StdItfReq+0x26>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d14e      	bne.n	8008248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d840      	bhi.n	800823a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	889b      	ldrh	r3, [r3, #4]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d836      	bhi.n	8008230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff fedb 	bl	8007f86 <USBD_CoreFindIF>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2bff      	cmp	r3, #255	@ 0xff
 80081d8:	d01d      	beq.n	8008216 <USBD_StdItfReq+0x92>
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d11a      	bne.n	8008216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081e0:	7bba      	ldrb	r2, [r7, #14]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	@ 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081f0:	7bba      	ldrb	r2, [r7, #14]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081f8:	7bba      	ldrb	r2, [r7, #14]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	32ae      	adds	r2, #174	@ 0xae
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800820e:	e004      	b.n	800821a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008214:	e001      	b.n	800821a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d110      	bne.n	8008244 <USBD_StdItfReq+0xc0>
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10d      	bne.n	8008244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fdd3 	bl	8008dd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800822e:	e009      	b.n	8008244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fcf7 	bl	8008c26 <USBD_CtlError>
          break;
 8008238:	e004      	b.n	8008244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fcf2 	bl	8008c26 <USBD_CtlError>
          break;
 8008242:	e000      	b.n	8008246 <USBD_StdItfReq+0xc2>
          break;
 8008244:	bf00      	nop
      }
      break;
 8008246:	e004      	b.n	8008252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fceb 	bl	8008c26 <USBD_CtlError>
      break;
 8008250:	bf00      	nop
  }

  return ret;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d007      	beq.n	800828c <USBD_StdEPReq+0x30>
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	f200 817f 	bhi.w	8008580 <USBD_StdEPReq+0x324>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02a      	beq.n	80082dc <USBD_StdEPReq+0x80>
 8008286:	2b20      	cmp	r3, #32
 8008288:	f040 817a 	bne.w	8008580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fe85 	bl	8007fa0 <USBD_CoreFindEP>
 8008296:	4603      	mov	r3, r0
 8008298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800829a:	7b7b      	ldrb	r3, [r7, #13]
 800829c:	2bff      	cmp	r3, #255	@ 0xff
 800829e:	f000 8174 	beq.w	800858a <USBD_StdEPReq+0x32e>
 80082a2:	7b7b      	ldrb	r3, [r7, #13]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8170 	bne.w	800858a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082aa:	7b7a      	ldrb	r2, [r7, #13]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082b2:	7b7a      	ldrb	r2, [r7, #13]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	32ae      	adds	r2, #174	@ 0xae
 80082b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8163 	beq.w	800858a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082c4:	7b7a      	ldrb	r2, [r7, #13]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	@ 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082da:	e156      	b.n	800858a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d008      	beq.n	80082f6 <USBD_StdEPReq+0x9a>
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	f300 8145 	bgt.w	8008574 <USBD_StdEPReq+0x318>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 809b 	beq.w	8008426 <USBD_StdEPReq+0x1ca>
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d03c      	beq.n	800836e <USBD_StdEPReq+0x112>
 80082f4:	e13e      	b.n	8008574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d002      	beq.n	8008308 <USBD_StdEPReq+0xac>
 8008302:	2b03      	cmp	r3, #3
 8008304:	d016      	beq.n	8008334 <USBD_StdEPReq+0xd8>
 8008306:	e02c      	b.n	8008362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00d      	beq.n	800832a <USBD_StdEPReq+0xce>
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b80      	cmp	r3, #128	@ 0x80
 8008312:	d00a      	beq.n	800832a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f979 	bl	8009610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800831e:	2180      	movs	r1, #128	@ 0x80
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f975 	bl	8009610 <USBD_LL_StallEP>
 8008326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008328:	e020      	b.n	800836c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc7a 	bl	8008c26 <USBD_CtlError>
              break;
 8008332:	e01b      	b.n	800836c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	885b      	ldrh	r3, [r3, #2]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10e      	bne.n	800835a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <USBD_StdEPReq+0xfe>
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b80      	cmp	r3, #128	@ 0x80
 8008346:	d008      	beq.n	800835a <USBD_StdEPReq+0xfe>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	88db      	ldrh	r3, [r3, #6]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f95b 	bl	8009610 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fd3a 	bl	8008dd4 <USBD_CtlSendStatus>

              break;
 8008360:	e004      	b.n	800836c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc5e 	bl	8008c26 <USBD_CtlError>
              break;
 800836a:	bf00      	nop
          }
          break;
 800836c:	e107      	b.n	800857e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d002      	beq.n	8008380 <USBD_StdEPReq+0x124>
 800837a:	2b03      	cmp	r3, #3
 800837c:	d016      	beq.n	80083ac <USBD_StdEPReq+0x150>
 800837e:	e04b      	b.n	8008418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_StdEPReq+0x146>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b80      	cmp	r3, #128	@ 0x80
 800838a:	d00a      	beq.n	80083a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f93d 	bl	8009610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	@ 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f939 	bl	8009610 <USBD_LL_StallEP>
 800839e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a0:	e040      	b.n	8008424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc3e 	bl	8008c26 <USBD_CtlError>
              break;
 80083aa:	e03b      	b.n	8008424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d136      	bne.n	8008422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 f943 	bl	800964e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fd03 	bl	8008dd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fde4 	bl	8007fa0 <USBD_CoreFindEP>
 80083d8:	4603      	mov	r3, r0
 80083da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083dc:	7b7b      	ldrb	r3, [r7, #13]
 80083de:	2bff      	cmp	r3, #255	@ 0xff
 80083e0:	d01f      	beq.n	8008422 <USBD_StdEPReq+0x1c6>
 80083e2:	7b7b      	ldrb	r3, [r7, #13]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11c      	bne.n	8008422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083e8:	7b7a      	ldrb	r2, [r7, #13]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083f0:	7b7a      	ldrb	r2, [r7, #13]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32ae      	adds	r2, #174	@ 0xae
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008400:	7b7a      	ldrb	r2, [r7, #13]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	@ 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008416:	e004      	b.n	8008422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc03 	bl	8008c26 <USBD_CtlError>
              break;
 8008420:	e000      	b.n	8008424 <USBD_StdEPReq+0x1c8>
              break;
 8008422:	bf00      	nop
          }
          break;
 8008424:	e0ab      	b.n	800857e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0x1dc>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d032      	beq.n	800849c <USBD_StdEPReq+0x240>
 8008436:	e097      	b.n	8008568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <USBD_StdEPReq+0x1f2>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d004      	beq.n	800844e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fbed 	bl	8008c26 <USBD_CtlError>
                break;
 800844c:	e091      	b.n	8008572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	da0b      	bge.n	800846e <USBD_StdEPReq+0x212>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	3310      	adds	r3, #16
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	3304      	adds	r3, #4
 800846c:	e00b      	b.n	8008486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	3304      	adds	r3, #4
 8008486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2202      	movs	r2, #2
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc43 	bl	8008d20 <USBD_CtlSendData>
              break;
 800849a:	e06a      	b.n	8008572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800849c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da11      	bge.n	80084c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	f003 020f 	and.w	r2, r3, #15
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	3324      	adds	r3, #36	@ 0x24
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d117      	bne.n	80084ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbb0 	bl	8008c26 <USBD_CtlError>
                  break;
 80084c6:	e054      	b.n	8008572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f003 020f 	and.w	r2, r3, #15
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb9d 	bl	8008c26 <USBD_CtlError>
                  break;
 80084ec:	e041      	b.n	8008572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da0b      	bge.n	800850e <USBD_StdEPReq+0x2b2>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	3310      	adds	r3, #16
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	e00b      	b.n	8008526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	3304      	adds	r3, #4
 8008526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <USBD_StdEPReq+0x2d8>
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b80      	cmp	r3, #128	@ 0x80
 8008532:	d103      	bne.n	800853c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	e00e      	b.n	800855a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f8a3 	bl	800968c <USBD_LL_IsStallEP>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e002      	b.n	800855a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2202      	movs	r2, #2
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fbdd 	bl	8008d20 <USBD_CtlSendData>
              break;
 8008566:	e004      	b.n	8008572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fb5b 	bl	8008c26 <USBD_CtlError>
              break;
 8008570:	bf00      	nop
          }
          break;
 8008572:	e004      	b.n	800857e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb55 	bl	8008c26 <USBD_CtlError>
          break;
 800857c:	bf00      	nop
      }
      break;
 800857e:	e005      	b.n	800858c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fb4f 	bl	8008c26 <USBD_CtlError>
      break;
 8008588:	e000      	b.n	800858c <USBD_StdEPReq+0x330>
      break;
 800858a:	bf00      	nop
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	2b06      	cmp	r3, #6
 80085ba:	f200 8128 	bhi.w	800880e <USBD_GetDescriptor+0x276>
 80085be:	a201      	add	r2, pc, #4	@ (adr r2, 80085c4 <USBD_GetDescriptor+0x2c>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	08008639 	.word	0x08008639
 80085d0:	0800880f 	.word	0x0800880f
 80085d4:	0800880f 	.word	0x0800880f
 80085d8:	080087af 	.word	0x080087af
 80085dc:	080087db 	.word	0x080087db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
      break;
 80085f6:	e112      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7c1b      	ldrb	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008608:	f107 0208 	add.w	r2, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	2202      	movs	r2, #2
 8008618:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800861a:	e100      	b.n	800881e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	f107 0208 	add.w	r2, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	2202      	movs	r2, #2
 8008634:	701a      	strb	r2, [r3, #0]
      break;
 8008636:	e0f2      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b05      	cmp	r3, #5
 8008640:	f200 80ac 	bhi.w	800879c <USBD_GetDescriptor+0x204>
 8008644:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <USBD_GetDescriptor+0xb4>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008665 	.word	0x08008665
 8008650:	08008699 	.word	0x08008699
 8008654:	080086cd 	.word	0x080086cd
 8008658:	08008701 	.word	0x08008701
 800865c:	08008735 	.word	0x08008735
 8008660:	08008769 	.word	0x08008769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7c12      	ldrb	r2, [r2, #16]
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008686:	e091      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 facb 	bl	8008c26 <USBD_CtlError>
            err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
          break;
 8008696:	e089      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7c12      	ldrb	r2, [r2, #16]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
 80086b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ba:	e077      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fab1 	bl	8008c26 <USBD_CtlError>
            err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ca:	e06f      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ee:	e05d      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa97 	bl	8008c26 <USBD_CtlError>
            err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
          break;
 80086fe:	e055      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008722:	e043      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa7d 	bl	8008c26 <USBD_CtlError>
            err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
          break;
 8008732:	e03b      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	7c12      	ldrb	r2, [r2, #16]
 800874c:	f107 0108 	add.w	r1, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008756:	e029      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa63 	bl	8008c26 <USBD_CtlError>
            err++;
 8008760:	7afb      	ldrb	r3, [r7, #11]
 8008762:	3301      	adds	r3, #1
 8008764:	72fb      	strb	r3, [r7, #11]
          break;
 8008766:	e021      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7c12      	ldrb	r2, [r2, #16]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878a:	e00f      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa49 	bl	8008c26 <USBD_CtlError>
            err++;
 8008794:	7afb      	ldrb	r3, [r7, #11]
 8008796:	3301      	adds	r3, #1
 8008798:	72fb      	strb	r3, [r7, #11]
          break;
 800879a:	e007      	b.n	80087ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa41 	bl	8008c26 <USBD_CtlError>
          err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087aa:	bf00      	nop
      }
      break;
 80087ac:	e037      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087be:	f107 0208 	add.w	r2, r7, #8
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c8:	e029      	b.n	800881e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa2a 	bl	8008c26 <USBD_CtlError>
        err++;
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	3301      	adds	r3, #1
 80087d6:	72fb      	strb	r3, [r7, #11]
      break;
 80087d8:	e021      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7c1b      	ldrb	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10d      	bne.n	80087fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	f107 0208 	add.w	r2, r7, #8
 80087ee:	4610      	mov	r0, r2
 80087f0:	4798      	blx	r3
 80087f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	2207      	movs	r2, #7
 80087fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087fc:	e00f      	b.n	800881e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa10 	bl	8008c26 <USBD_CtlError>
        err++;
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	3301      	adds	r3, #1
 800880a:	72fb      	strb	r3, [r7, #11]
      break;
 800880c:	e007      	b.n	800881e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa08 	bl	8008c26 <USBD_CtlError>
      err++;
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	3301      	adds	r3, #1
 800881a:	72fb      	strb	r3, [r7, #11]
      break;
 800881c:	bf00      	nop
  }

  if (err != 0U)
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d11e      	bne.n	8008862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d016      	beq.n	800885a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88da      	ldrh	r2, [r3, #6]
 8008836:	893b      	ldrh	r3, [r7, #8]
 8008838:	4293      	cmp	r3, r2
 800883a:	bf28      	it	cs
 800883c:	4613      	movcs	r3, r2
 800883e:	b29b      	uxth	r3, r3
 8008840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008842:	893b      	ldrh	r3, [r7, #8]
 8008844:	461a      	mov	r2, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa69 	bl	8008d20 <USBD_CtlSendData>
 800884e:	e009      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9e7 	bl	8008c26 <USBD_CtlError>
 8008858:	e004      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 faba 	bl	8008dd4 <USBD_CtlSendStatus>
 8008860:	e000      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    return;
 8008862:	bf00      	nop
  }
}
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	889b      	ldrh	r3, [r3, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d131      	bne.n	80088e2 <USBD_SetAddress+0x76>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	88db      	ldrh	r3, [r3, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d12d      	bne.n	80088e2 <USBD_SetAddress+0x76>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	2b7f      	cmp	r3, #127	@ 0x7f
 800888c:	d829      	bhi.n	80088e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d104      	bne.n	80088b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f9bc 	bl	8008c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	e01d      	b.n	80088ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7bfa      	ldrb	r2, [r7, #15]
 80088b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 ff11 	bl	80096e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa86 	bl	8008dd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	e009      	b.n	80088ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e0:	e004      	b.n	80088ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f99e 	bl	8008c26 <USBD_CtlError>
  }
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	4b4e      	ldr	r3, [pc, #312]	@ (8008a44 <USBD_SetConfig+0x150>)
 800890a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800890c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a44 <USBD_SetConfig+0x150>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d905      	bls.n	8008920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f985 	bl	8008c26 <USBD_CtlError>
    return USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e08c      	b.n	8008a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d002      	beq.n	8008932 <USBD_SetConfig+0x3e>
 800892c:	2b03      	cmp	r3, #3
 800892e:	d029      	beq.n	8008984 <USBD_SetConfig+0x90>
 8008930:	e075      	b.n	8008a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008932:	4b44      	ldr	r3, [pc, #272]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d020      	beq.n	800897c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800893a:	4b42      	ldr	r3, [pc, #264]	@ (8008a44 <USBD_SetConfig+0x150>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008944:	4b3f      	ldr	r3, [pc, #252]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fe ffe3 	bl	8007916 <USBD_SetClassConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f962 	bl	8008c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800896a:	e065      	b.n	8008a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa31 	bl	8008dd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2203      	movs	r2, #3
 8008976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800897a:	e05d      	b.n	8008a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa29 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008982:	e059      	b.n	8008a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008984:	4b2f      	ldr	r3, [pc, #188]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d112      	bne.n	80089b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008994:	4b2b      	ldr	r3, [pc, #172]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800899e:	4b29      	ldr	r3, [pc, #164]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fe ffd2 	bl	800794e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa12 	bl	8008dd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089b0:	e042      	b.n	8008a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089b2:	4b24      	ldr	r3, [pc, #144]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d02a      	beq.n	8008a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fe ffc0 	bl	800794e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fe ff99 	bl	8007916 <USBD_SetClassConfig>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f918 	bl	8008c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fe ffa5 	bl	800794e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a0c:	e014      	b.n	8008a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9e0 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008a14:	e010      	b.n	8008a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9dc 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008a1c:	e00c      	b.n	8008a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f900 	bl	8008c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe ff8e 	bl	800794e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	73fb      	strb	r3, [r7, #15]
      break;
 8008a36:	bf00      	nop
  }

  return ret;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000314 	.word	0x20000314

08008a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d004      	beq.n	8008a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8e2 	bl	8008c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a62:	e023      	b.n	8008aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	dc02      	bgt.n	8008a76 <USBD_GetConfig+0x2e>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc03      	bgt.n	8008a7c <USBD_GetConfig+0x34>
 8008a74:	e015      	b.n	8008aa2 <USBD_GetConfig+0x5a>
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d00b      	beq.n	8008a92 <USBD_GetConfig+0x4a>
 8008a7a:	e012      	b.n	8008aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3308      	adds	r3, #8
 8008a86:	2201      	movs	r2, #1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f948 	bl	8008d20 <USBD_CtlSendData>
        break;
 8008a90:	e00c      	b.n	8008aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f940 	bl	8008d20 <USBD_CtlSendData>
        break;
 8008aa0:	e004      	b.n	8008aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f8be 	bl	8008c26 <USBD_CtlError>
        break;
 8008aaa:	bf00      	nop
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d81e      	bhi.n	8008b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	88db      	ldrh	r3, [r3, #6]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d004      	beq.n	8008ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8a5 	bl	8008c26 <USBD_CtlError>
        break;
 8008adc:	e01a      	b.n	8008b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d005      	beq.n	8008afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f043 0202 	orr.w	r2, r3, #2
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	330c      	adds	r3, #12
 8008afe:	2202      	movs	r2, #2
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f90c 	bl	8008d20 <USBD_CtlSendData>
      break;
 8008b08:	e004      	b.n	8008b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f88a 	bl	8008c26 <USBD_CtlError>
      break;
 8008b12:	bf00      	nop
  }
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d107      	bne.n	8008b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f94c 	bl	8008dd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b3c:	e013      	b.n	8008b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d10b      	bne.n	8008b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	889b      	ldrh	r3, [r3, #4]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f93c 	bl	8008dd4 <USBD_CtlSendStatus>
}
 8008b5c:	e003      	b.n	8008b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f860 	bl	8008c26 <USBD_CtlError>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d80b      	bhi.n	8008b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10c      	bne.n	8008ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f91c 	bl	8008dd4 <USBD_CtlSendStatus>
      }
      break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f840 	bl	8008c26 <USBD_CtlError>
      break;
 8008ba6:	e000      	b.n	8008baa <USBD_ClrFeature+0x3c>
      break;
 8008ba8:	bf00      	nop
  }
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fa40 	bl	8008062 <SWAPBYTE>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff fa33 	bl	8008062 <SWAPBYTE>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fa26 	bl	8008062 <SWAPBYTE>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	80da      	strh	r2, [r3, #6]
}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c30:	2180      	movs	r1, #128	@ 0x80
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fcec 	bl	8009610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fce8 	bl	8009610 <USBD_LL_StallEP>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d042      	beq.n	8008ce4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f000 f842 	bl	8008cec <USBD_GetLen>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c72:	d808      	bhi.n	8008c86 <USBD_GetString+0x3e>
 8008c74:	6938      	ldr	r0, [r7, #16]
 8008c76:	f000 f839 	bl	8008cec <USBD_GetLen>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	e001      	b.n	8008c8a <USBD_GetString+0x42>
 8008c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4413      	add	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	3301      	adds	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cb0:	e013      	b.n	8008cda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
    idx++;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	4413      	add	r3, r2
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e7      	bne.n	8008cb2 <USBD_GetString+0x6a>
 8008ce2:	e000      	b.n	8008ce6 <USBD_GetString+0x9e>
    return;
 8008ce4:	bf00      	nop
  }
}
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cfc:	e005      	b.n	8008d0a <USBD_GetLen+0x1e>
  {
    len++;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	3301      	adds	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f5      	bne.n	8008cfe <USBD_GetLen+0x12>
  }

  return len;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fceb 	bl	8009722 <USBD_LL_Transmit>

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	2100      	movs	r1, #0
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fcda 	bl	8009722 <USBD_LL_Transmit>

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fcde 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fccd 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2204      	movs	r2, #4
 8008de0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008de4:	2300      	movs	r3, #0
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fc99 	bl	8009722 <USBD_LL_Transmit>

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2205      	movs	r2, #5
 8008e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fca7 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4912      	ldr	r1, [pc, #72]	@ (8008e70 <MX_USB_DEVICE_Init+0x50>)
 8008e28:	4812      	ldr	r0, [pc, #72]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e2a:	f7fe fcf7 	bl	800781c <USBD_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e34:	f7f8 ffcc 	bl	8001dd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e38:	490f      	ldr	r1, [pc, #60]	@ (8008e78 <MX_USB_DEVICE_Init+0x58>)
 8008e3a:	480e      	ldr	r0, [pc, #56]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e3c:	f7fe fd1e 	bl	800787c <USBD_RegisterClass>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e46:	f7f8 ffc3 	bl	8001dd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e4a:	490c      	ldr	r1, [pc, #48]	@ (8008e7c <MX_USB_DEVICE_Init+0x5c>)
 8008e4c:	4809      	ldr	r0, [pc, #36]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e4e:	f7fe fc15 	bl	800767c <USBD_CDC_RegisterInterface>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e58:	f7f8 ffba 	bl	8001dd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e5c:	4805      	ldr	r0, [pc, #20]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e5e:	f7fe fd43 	bl	80078e8 <USBD_Start>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e68:	f7f8 ffb2 	bl	8001dd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200000ac 	.word	0x200000ac
 8008e74:	20000318 	.word	0x20000318
 8008e78:	20000018 	.word	0x20000018
 8008e7c:	20000098 	.word	0x20000098

08008e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e84:	2200      	movs	r2, #0
 8008e86:	4905      	ldr	r1, [pc, #20]	@ (8008e9c <CDC_Init_FS+0x1c>)
 8008e88:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <CDC_Init_FS+0x20>)
 8008e8a:	f7fe fc11 	bl	80076b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e8e:	4905      	ldr	r1, [pc, #20]	@ (8008ea4 <CDC_Init_FS+0x24>)
 8008e90:	4803      	ldr	r0, [pc, #12]	@ (8008ea0 <CDC_Init_FS+0x20>)
 8008e92:	f7fe fc2f 	bl	80076f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20000df4 	.word	0x20000df4
 8008ea0:	20000318 	.word	0x20000318
 8008ea4:	200005f4 	.word	0x200005f4

08008ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b23      	cmp	r3, #35	@ 0x23
 8008ecc:	d84a      	bhi.n	8008f64 <CDC_Control_FS+0xac>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <CDC_Control_FS+0x1c>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008f65 	.word	0x08008f65
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f65 	.word	0x08008f65
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008f65 	.word	0x08008f65
 8008ee8:	08008f65 	.word	0x08008f65
 8008eec:	08008f65 	.word	0x08008f65
 8008ef0:	08008f65 	.word	0x08008f65
 8008ef4:	08008f65 	.word	0x08008f65
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	08008f65 	.word	0x08008f65
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008f65 	.word	0x08008f65
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f65 	.word	0x08008f65
 8008f24:	08008f65 	.word	0x08008f65
 8008f28:	08008f65 	.word	0x08008f65
 8008f2c:	08008f65 	.word	0x08008f65
 8008f30:	08008f65 	.word	0x08008f65
 8008f34:	08008f65 	.word	0x08008f65
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f65 	.word	0x08008f65
 8008f48:	08008f65 	.word	0x08008f65
 8008f4c:	08008f65 	.word	0x08008f65
 8008f50:	08008f65 	.word	0x08008f65
 8008f54:	08008f65 	.word	0x08008f65
 8008f58:	08008f65 	.word	0x08008f65
 8008f5c:	08008f65 	.word	0x08008f65
 8008f60:	08008f65 	.word	0x08008f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f64:	bf00      	nop
  }

  return (USBD_OK);
 8008f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <CDC_Receive_FS+0x24>)
 8008f82:	f7fe fbb7 	bl	80076f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f86:	4804      	ldr	r0, [pc, #16]	@ (8008f98 <CDC_Receive_FS+0x24>)
 8008f88:	f7fe fc12 	bl	80077b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000318 	.word	0x20000318

08008f9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fac:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <CDC_Transmit_FS+0x48>)
 8008fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e00b      	b.n	8008fda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fc2:	887b      	ldrh	r3, [r7, #2]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4806      	ldr	r0, [pc, #24]	@ (8008fe4 <CDC_Transmit_FS+0x48>)
 8008fca:	f7fe fb71 	bl	80076b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fce:	4805      	ldr	r0, [pc, #20]	@ (8008fe4 <CDC_Transmit_FS+0x48>)
 8008fd0:	f7fe fbae 	bl	8007730 <USBD_CDC_TransmitPacket>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000318 	.word	0x20000318

08008fe8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2212      	movs	r2, #18
 800901c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800901e:	4b03      	ldr	r3, [pc, #12]	@ (800902c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	200000c8 	.word	0x200000c8

08009030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2204      	movs	r2, #4
 8009040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	@ (8009050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	200000dc 	.word	0x200000dc

08009054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d105      	bne.n	8009072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4907      	ldr	r1, [pc, #28]	@ (8009088 <USBD_FS_ProductStrDescriptor+0x34>)
 800906a:	4808      	ldr	r0, [pc, #32]	@ (800908c <USBD_FS_ProductStrDescriptor+0x38>)
 800906c:	f7ff fdec 	bl	8008c48 <USBD_GetString>
 8009070:	e004      	b.n	800907c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4904      	ldr	r1, [pc, #16]	@ (8009088 <USBD_FS_ProductStrDescriptor+0x34>)
 8009076:	4805      	ldr	r0, [pc, #20]	@ (800908c <USBD_FS_ProductStrDescriptor+0x38>)
 8009078:	f7ff fde6 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200015f4 	.word	0x200015f4
 800908c:	0800c204 	.word	0x0800c204

08009090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	4904      	ldr	r1, [pc, #16]	@ (80090b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090a0:	4804      	ldr	r0, [pc, #16]	@ (80090b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090a2:	f7ff fdd1 	bl	8008c48 <USBD_GetString>
  return USBD_StrDesc;
 80090a6:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200015f4 	.word	0x200015f4
 80090b4:	0800c21c 	.word	0x0800c21c

080090b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	221a      	movs	r2, #26
 80090c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090ca:	f000 f843 	bl	8009154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090ce:	4b02      	ldr	r3, [pc, #8]	@ (80090d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200000e0 	.word	0x200000e0

080090dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d105      	bne.n	80090fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4907      	ldr	r1, [pc, #28]	@ (8009110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090f2:	4808      	ldr	r0, [pc, #32]	@ (8009114 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090f4:	f7ff fda8 	bl	8008c48 <USBD_GetString>
 80090f8:	e004      	b.n	8009104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4904      	ldr	r1, [pc, #16]	@ (8009110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090fe:	4805      	ldr	r0, [pc, #20]	@ (8009114 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009100:	f7ff fda2 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009104:	4b02      	ldr	r3, [pc, #8]	@ (8009110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200015f4 	.word	0x200015f4
 8009114:	0800c230 	.word	0x0800c230

08009118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4907      	ldr	r1, [pc, #28]	@ (800914c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800912e:	4808      	ldr	r0, [pc, #32]	@ (8009150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009130:	f7ff fd8a 	bl	8008c48 <USBD_GetString>
 8009134:	e004      	b.n	8009140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4904      	ldr	r1, [pc, #16]	@ (800914c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800913a:	4805      	ldr	r0, [pc, #20]	@ (8009150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800913c:	f7ff fd84 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	@ (800914c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200015f4 	.word	0x200015f4
 8009150:	0800c23c 	.word	0x0800c23c

08009154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800915a:	4b0f      	ldr	r3, [pc, #60]	@ (8009198 <Get_SerialNum+0x44>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009160:	4b0e      	ldr	r3, [pc, #56]	@ (800919c <Get_SerialNum+0x48>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009166:	4b0e      	ldr	r3, [pc, #56]	@ (80091a0 <Get_SerialNum+0x4c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800917a:	2208      	movs	r2, #8
 800917c:	4909      	ldr	r1, [pc, #36]	@ (80091a4 <Get_SerialNum+0x50>)
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f814 	bl	80091ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009184:	2204      	movs	r2, #4
 8009186:	4908      	ldr	r1, [pc, #32]	@ (80091a8 <Get_SerialNum+0x54>)
 8009188:	68b8      	ldr	r0, [r7, #8]
 800918a:	f000 f80f 	bl	80091ac <IntToUnicode>
  }
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	1fff7a10 	.word	0x1fff7a10
 800919c:	1fff7a14 	.word	0x1fff7a14
 80091a0:	1fff7a18 	.word	0x1fff7a18
 80091a4:	200000e2 	.word	0x200000e2
 80091a8:	200000f2 	.word	0x200000f2

080091ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091be:	2300      	movs	r3, #0
 80091c0:	75fb      	strb	r3, [r7, #23]
 80091c2:	e027      	b.n	8009214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	0f1b      	lsrs	r3, r3, #28
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	d80b      	bhi.n	80091e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4619      	mov	r1, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	440b      	add	r3, r1
 80091dc:	3230      	adds	r2, #48	@ 0x30
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e00a      	b.n	80091fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0f1b      	lsrs	r3, r3, #28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4619      	mov	r1, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	440b      	add	r3, r1
 80091f4:	3237      	adds	r2, #55	@ 0x37
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	3301      	adds	r3, #1
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	4413      	add	r3, r2
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	3301      	adds	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	7dfa      	ldrb	r2, [r7, #23]
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	429a      	cmp	r2, r3
 800921a:	d3d3      	bcc.n	80091c4 <IntToUnicode+0x18>
  }
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	@ 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009234:	f107 0314 	add.w	r3, r7, #20
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	609a      	str	r2, [r3, #8]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800924c:	d13a      	bne.n	80092c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	4b1e      	ldr	r3, [pc, #120]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 8009254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009256:	4a1d      	ldr	r2, [pc, #116]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6313      	str	r3, [r2, #48]	@ 0x30
 800925e:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 8009260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800926a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800926e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009270:	2302      	movs	r3, #2
 8009272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009274:	2300      	movs	r3, #0
 8009276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009278:	2303      	movs	r3, #3
 800927a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800927c:	230a      	movs	r3, #10
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009280:	f107 0314 	add.w	r3, r7, #20
 8009284:	4619      	mov	r1, r3
 8009286:	4812      	ldr	r0, [pc, #72]	@ (80092d0 <HAL_PCD_MspInit+0xa4>)
 8009288:	f7f9 f902 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800928c:	4b0f      	ldr	r3, [pc, #60]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 800928e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009290:	4a0e      	ldr	r2, [pc, #56]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 8009292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009296:	6353      	str	r3, [r2, #52]	@ 0x34
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 800929e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a0:	4a0a      	ldr	r2, [pc, #40]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 80092a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80092a8:	4b08      	ldr	r3, [pc, #32]	@ (80092cc <HAL_PCD_MspInit+0xa0>)
 80092aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092b4:	2200      	movs	r2, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	2043      	movs	r0, #67	@ 0x43
 80092ba:	f7f9 f8b2 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092be:	2043      	movs	r0, #67	@ 0x43
 80092c0:	f7f9 f8cb 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092c4:	bf00      	nop
 80092c6:	3728      	adds	r7, #40	@ 0x28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40023800 	.word	0x40023800
 80092d0:	40020000 	.word	0x40020000

080092d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fe fb49 	bl	8007982 <USBD_LL_SetupStage>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	440b      	add	r3, r1
 8009318:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	4619      	mov	r1, r3
 8009322:	f7fe fb83 	bl	8007a2c <USBD_LL_DataOutStage>
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009340:	78fa      	ldrb	r2, [r7, #3]
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	3320      	adds	r3, #32
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	4619      	mov	r1, r3
 8009356:	f7fe fc1c 	bl	8007b92 <USBD_LL_DataInStage>
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fd56 	bl	8007e22 <USBD_LL_SOF>
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009386:	2301      	movs	r3, #1
 8009388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	79db      	ldrb	r3, [r3, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
 8009396:	e008      	b.n	80093aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	79db      	ldrb	r3, [r3, #7]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d102      	bne.n	80093a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80093a0:	2301      	movs	r3, #1
 80093a2:	73fb      	strb	r3, [r7, #15]
 80093a4:	e001      	b.n	80093aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80093a6:	f7f8 fd13 	bl	8001dd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093b0:	7bfa      	ldrb	r2, [r7, #15]
 80093b2:	4611      	mov	r1, r2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fcf0 	bl	8007d9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fc98 	bl	8007cf6 <USBD_LL_Reset>
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fceb 	bl	8007dba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7adb      	ldrb	r3, [r3, #11]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009404:	4b04      	ldr	r3, [pc, #16]	@ (8009418 <HAL_PCD_SuspendCallback+0x48>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	4a03      	ldr	r2, [pc, #12]	@ (8009418 <HAL_PCD_SuspendCallback+0x48>)
 800940a:	f043 0306 	orr.w	r3, r3, #6
 800940e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	e000ed00 	.word	0xe000ed00

0800941c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fce1 	bl	8007df2 <USBD_LL_Resume>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fd39 	bl	8007ec6 <USBD_LL_IsoOUTIncomplete>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fcf5 	bl	8007e62 <USBD_LL_IsoINIncomplete>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fd4b 	bl	8007f2a <USBD_LL_DevConnected>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fd48 	bl	8007f40 <USBD_LL_DevDisconnected>
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d13c      	bne.n	8009542 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094c8:	4a20      	ldr	r2, [pc, #128]	@ (800954c <USBD_LL_Init+0x94>)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	@ (800954c <USBD_LL_Init+0x94>)
 80094d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094d8:	4b1c      	ldr	r3, [pc, #112]	@ (800954c <USBD_LL_Init+0x94>)
 80094da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094e0:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <USBD_LL_Init+0x94>)
 80094e2:	2204      	movs	r2, #4
 80094e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094e6:	4b19      	ldr	r3, [pc, #100]	@ (800954c <USBD_LL_Init+0x94>)
 80094e8:	2202      	movs	r2, #2
 80094ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094ec:	4b17      	ldr	r3, [pc, #92]	@ (800954c <USBD_LL_Init+0x94>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094f2:	4b16      	ldr	r3, [pc, #88]	@ (800954c <USBD_LL_Init+0x94>)
 80094f4:	2202      	movs	r2, #2
 80094f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094f8:	4b14      	ldr	r3, [pc, #80]	@ (800954c <USBD_LL_Init+0x94>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094fe:	4b13      	ldr	r3, [pc, #76]	@ (800954c <USBD_LL_Init+0x94>)
 8009500:	2200      	movs	r2, #0
 8009502:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009504:	4b11      	ldr	r3, [pc, #68]	@ (800954c <USBD_LL_Init+0x94>)
 8009506:	2200      	movs	r2, #0
 8009508:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800950a:	4b10      	ldr	r3, [pc, #64]	@ (800954c <USBD_LL_Init+0x94>)
 800950c:	2200      	movs	r2, #0
 800950e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009510:	4b0e      	ldr	r3, [pc, #56]	@ (800954c <USBD_LL_Init+0x94>)
 8009512:	2200      	movs	r2, #0
 8009514:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009516:	480d      	ldr	r0, [pc, #52]	@ (800954c <USBD_LL_Init+0x94>)
 8009518:	f7f9 f956 	bl	80027c8 <HAL_PCD_Init>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009522:	f7f8 fc55 	bl	8001dd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009526:	2180      	movs	r1, #128	@ 0x80
 8009528:	4808      	ldr	r0, [pc, #32]	@ (800954c <USBD_LL_Init+0x94>)
 800952a:	f7fa fb82 	bl	8003c32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800952e:	2240      	movs	r2, #64	@ 0x40
 8009530:	2100      	movs	r1, #0
 8009532:	4806      	ldr	r0, [pc, #24]	@ (800954c <USBD_LL_Init+0x94>)
 8009534:	f7fa fb36 	bl	8003ba4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009538:	2280      	movs	r2, #128	@ 0x80
 800953a:	2101      	movs	r1, #1
 800953c:	4803      	ldr	r0, [pc, #12]	@ (800954c <USBD_LL_Init+0x94>)
 800953e:	f7fa fb31 	bl	8003ba4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200017f4 	.word	0x200017f4

08009550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009566:	4618      	mov	r0, r3
 8009568:	f7f9 fa3d 	bl	80029e6 <HAL_PCD_Start>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 f942 	bl	80097fc <USBD_Get_USB_Status>
 8009578:	4603      	mov	r3, r0
 800957a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957c:	7bbb      	ldrb	r3, [r7, #14]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	461a      	mov	r2, r3
 8009594:	4603      	mov	r3, r0
 8009596:	70fb      	strb	r3, [r7, #3]
 8009598:	460b      	mov	r3, r1
 800959a:	70bb      	strb	r3, [r7, #2]
 800959c:	4613      	mov	r3, r2
 800959e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095ae:	78bb      	ldrb	r3, [r7, #2]
 80095b0:	883a      	ldrh	r2, [r7, #0]
 80095b2:	78f9      	ldrb	r1, [r7, #3]
 80095b4:	f7f9 ff11 	bl	80033da <HAL_PCD_EP_Open>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f91c 	bl	80097fc <USBD_Get_USB_Status>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	4611      	mov	r1, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f9 ff5c 	bl	80034ae <HAL_PCD_EP_Close>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f8fd 	bl	80097fc <USBD_Get_USB_Status>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009606:	7bbb      	ldrb	r3, [r7, #14]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7fa f814 	bl	800365c <HAL_PCD_EP_SetStall>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f8de 	bl	80097fc <USBD_Get_USB_Status>
 8009640:	4603      	mov	r3, r0
 8009642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009644:	7bbb      	ldrb	r3, [r7, #14]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7fa f858 	bl	8003722 <HAL_PCD_EP_ClrStall>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f8bf 	bl	80097fc <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800969e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	da0b      	bge.n	80096c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	4613      	mov	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	3316      	adds	r3, #22
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	e00b      	b.n	80096d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80096d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7f9 fe45 	bl	8003392 <HAL_PCD_SetAddress>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f874 	bl	80097fc <USBD_Get_USB_Status>
 8009714:	4603      	mov	r3, r0
 8009716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009718:	7bbb      	ldrb	r3, [r7, #14]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
 800972e:	460b      	mov	r3, r1
 8009730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009740:	7af9      	ldrb	r1, [r7, #11]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	f7f9 ff4f 	bl	80035e8 <HAL_PCD_EP_Transmit>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f853 	bl	80097fc <USBD_Get_USB_Status>
 8009756:	4603      	mov	r3, r0
 8009758:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800975a:	7dbb      	ldrb	r3, [r7, #22]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	460b      	mov	r3, r1
 8009772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009782:	7af9      	ldrb	r1, [r7, #11]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	f7f9 fedb 	bl	8003542 <HAL_PCD_EP_Receive>
 800978c:	4603      	mov	r3, r0
 800978e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f832 	bl	80097fc <USBD_Get_USB_Status>
 8009798:	4603      	mov	r3, r0
 800979a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800979c:	7dbb      	ldrb	r3, [r7, #22]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f9 fefb 	bl	80035b8 <HAL_PCD_EP_GetRxCount>
 80097c2:	4603      	mov	r3, r0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097d4:	4b03      	ldr	r3, [pc, #12]	@ (80097e4 <USBD_static_malloc+0x18>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	20001cd8 	.word	0x20001cd8

080097e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b03      	cmp	r3, #3
 800980e:	d817      	bhi.n	8009840 <USBD_Get_USB_Status+0x44>
 8009810:	a201      	add	r2, pc, #4	@ (adr r2, 8009818 <USBD_Get_USB_Status+0x1c>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009829 	.word	0x08009829
 800981c:	0800982f 	.word	0x0800982f
 8009820:	08009835 	.word	0x08009835
 8009824:	0800983b 	.word	0x0800983b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e00b      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e008      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	e005      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	73fb      	strb	r3, [r7, #15]
    break;
 800983e:	e002      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	73fb      	strb	r3, [r7, #15]
    break;
 8009844:	bf00      	nop
  }
  return usb_status;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <__assert_func>:
 8009854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009856:	4614      	mov	r4, r2
 8009858:	461a      	mov	r2, r3
 800985a:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <__assert_func+0x2c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4605      	mov	r5, r0
 8009860:	68d8      	ldr	r0, [r3, #12]
 8009862:	b14c      	cbz	r4, 8009878 <__assert_func+0x24>
 8009864:	4b07      	ldr	r3, [pc, #28]	@ (8009884 <__assert_func+0x30>)
 8009866:	9100      	str	r1, [sp, #0]
 8009868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800986c:	4906      	ldr	r1, [pc, #24]	@ (8009888 <__assert_func+0x34>)
 800986e:	462b      	mov	r3, r5
 8009870:	f000 fdbe 	bl	800a3f0 <fiprintf>
 8009874:	f000 fed1 	bl	800a61a <abort>
 8009878:	4b04      	ldr	r3, [pc, #16]	@ (800988c <__assert_func+0x38>)
 800987a:	461c      	mov	r4, r3
 800987c:	e7f3      	b.n	8009866 <__assert_func+0x12>
 800987e:	bf00      	nop
 8009880:	20000108 	.word	0x20000108
 8009884:	0800c274 	.word	0x0800c274
 8009888:	0800c281 	.word	0x0800c281
 800988c:	0800c2af 	.word	0x0800c2af

08009890 <malloc>:
 8009890:	4b02      	ldr	r3, [pc, #8]	@ (800989c <malloc+0xc>)
 8009892:	4601      	mov	r1, r0
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	f000 b825 	b.w	80098e4 <_malloc_r>
 800989a:	bf00      	nop
 800989c:	20000108 	.word	0x20000108

080098a0 <sbrk_aligned>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	4e0f      	ldr	r6, [pc, #60]	@ (80098e0 <sbrk_aligned+0x40>)
 80098a4:	460c      	mov	r4, r1
 80098a6:	6831      	ldr	r1, [r6, #0]
 80098a8:	4605      	mov	r5, r0
 80098aa:	b911      	cbnz	r1, 80098b2 <sbrk_aligned+0x12>
 80098ac:	f000 fe66 	bl	800a57c <_sbrk_r>
 80098b0:	6030      	str	r0, [r6, #0]
 80098b2:	4621      	mov	r1, r4
 80098b4:	4628      	mov	r0, r5
 80098b6:	f000 fe61 	bl	800a57c <_sbrk_r>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d103      	bne.n	80098c6 <sbrk_aligned+0x26>
 80098be:	f04f 34ff 	mov.w	r4, #4294967295
 80098c2:	4620      	mov	r0, r4
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	1cc4      	adds	r4, r0, #3
 80098c8:	f024 0403 	bic.w	r4, r4, #3
 80098cc:	42a0      	cmp	r0, r4
 80098ce:	d0f8      	beq.n	80098c2 <sbrk_aligned+0x22>
 80098d0:	1a21      	subs	r1, r4, r0
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 fe52 	bl	800a57c <_sbrk_r>
 80098d8:	3001      	adds	r0, #1
 80098da:	d1f2      	bne.n	80098c2 <sbrk_aligned+0x22>
 80098dc:	e7ef      	b.n	80098be <sbrk_aligned+0x1e>
 80098de:	bf00      	nop
 80098e0:	20001ef8 	.word	0x20001ef8

080098e4 <_malloc_r>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	1ccd      	adds	r5, r1, #3
 80098ea:	f025 0503 	bic.w	r5, r5, #3
 80098ee:	3508      	adds	r5, #8
 80098f0:	2d0c      	cmp	r5, #12
 80098f2:	bf38      	it	cc
 80098f4:	250c      	movcc	r5, #12
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	4606      	mov	r6, r0
 80098fa:	db01      	blt.n	8009900 <_malloc_r+0x1c>
 80098fc:	42a9      	cmp	r1, r5
 80098fe:	d904      	bls.n	800990a <_malloc_r+0x26>
 8009900:	230c      	movs	r3, #12
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	2000      	movs	r0, #0
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099e0 <_malloc_r+0xfc>
 800990e:	f000 f869 	bl	80099e4 <__malloc_lock>
 8009912:	f8d8 3000 	ldr.w	r3, [r8]
 8009916:	461c      	mov	r4, r3
 8009918:	bb44      	cbnz	r4, 800996c <_malloc_r+0x88>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff ffbf 	bl	80098a0 <sbrk_aligned>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	4604      	mov	r4, r0
 8009926:	d158      	bne.n	80099da <_malloc_r+0xf6>
 8009928:	f8d8 4000 	ldr.w	r4, [r8]
 800992c:	4627      	mov	r7, r4
 800992e:	2f00      	cmp	r7, #0
 8009930:	d143      	bne.n	80099ba <_malloc_r+0xd6>
 8009932:	2c00      	cmp	r4, #0
 8009934:	d04b      	beq.n	80099ce <_malloc_r+0xea>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	4639      	mov	r1, r7
 800993a:	4630      	mov	r0, r6
 800993c:	eb04 0903 	add.w	r9, r4, r3
 8009940:	f000 fe1c 	bl	800a57c <_sbrk_r>
 8009944:	4581      	cmp	r9, r0
 8009946:	d142      	bne.n	80099ce <_malloc_r+0xea>
 8009948:	6821      	ldr	r1, [r4, #0]
 800994a:	1a6d      	subs	r5, r5, r1
 800994c:	4629      	mov	r1, r5
 800994e:	4630      	mov	r0, r6
 8009950:	f7ff ffa6 	bl	80098a0 <sbrk_aligned>
 8009954:	3001      	adds	r0, #1
 8009956:	d03a      	beq.n	80099ce <_malloc_r+0xea>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	442b      	add	r3, r5
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	f8d8 3000 	ldr.w	r3, [r8]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	bb62      	cbnz	r2, 80099c0 <_malloc_r+0xdc>
 8009966:	f8c8 7000 	str.w	r7, [r8]
 800996a:	e00f      	b.n	800998c <_malloc_r+0xa8>
 800996c:	6822      	ldr	r2, [r4, #0]
 800996e:	1b52      	subs	r2, r2, r5
 8009970:	d420      	bmi.n	80099b4 <_malloc_r+0xd0>
 8009972:	2a0b      	cmp	r2, #11
 8009974:	d917      	bls.n	80099a6 <_malloc_r+0xc2>
 8009976:	1961      	adds	r1, r4, r5
 8009978:	42a3      	cmp	r3, r4
 800997a:	6025      	str	r5, [r4, #0]
 800997c:	bf18      	it	ne
 800997e:	6059      	strne	r1, [r3, #4]
 8009980:	6863      	ldr	r3, [r4, #4]
 8009982:	bf08      	it	eq
 8009984:	f8c8 1000 	streq.w	r1, [r8]
 8009988:	5162      	str	r2, [r4, r5]
 800998a:	604b      	str	r3, [r1, #4]
 800998c:	4630      	mov	r0, r6
 800998e:	f000 f82f 	bl	80099f0 <__malloc_unlock>
 8009992:	f104 000b 	add.w	r0, r4, #11
 8009996:	1d23      	adds	r3, r4, #4
 8009998:	f020 0007 	bic.w	r0, r0, #7
 800999c:	1ac2      	subs	r2, r0, r3
 800999e:	bf1c      	itt	ne
 80099a0:	1a1b      	subne	r3, r3, r0
 80099a2:	50a3      	strne	r3, [r4, r2]
 80099a4:	e7af      	b.n	8009906 <_malloc_r+0x22>
 80099a6:	6862      	ldr	r2, [r4, #4]
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	bf0c      	ite	eq
 80099ac:	f8c8 2000 	streq.w	r2, [r8]
 80099b0:	605a      	strne	r2, [r3, #4]
 80099b2:	e7eb      	b.n	800998c <_malloc_r+0xa8>
 80099b4:	4623      	mov	r3, r4
 80099b6:	6864      	ldr	r4, [r4, #4]
 80099b8:	e7ae      	b.n	8009918 <_malloc_r+0x34>
 80099ba:	463c      	mov	r4, r7
 80099bc:	687f      	ldr	r7, [r7, #4]
 80099be:	e7b6      	b.n	800992e <_malloc_r+0x4a>
 80099c0:	461a      	mov	r2, r3
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d1fb      	bne.n	80099c0 <_malloc_r+0xdc>
 80099c8:	2300      	movs	r3, #0
 80099ca:	6053      	str	r3, [r2, #4]
 80099cc:	e7de      	b.n	800998c <_malloc_r+0xa8>
 80099ce:	230c      	movs	r3, #12
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	4630      	mov	r0, r6
 80099d4:	f000 f80c 	bl	80099f0 <__malloc_unlock>
 80099d8:	e794      	b.n	8009904 <_malloc_r+0x20>
 80099da:	6005      	str	r5, [r0, #0]
 80099dc:	e7d6      	b.n	800998c <_malloc_r+0xa8>
 80099de:	bf00      	nop
 80099e0:	20001efc 	.word	0x20001efc

080099e4 <__malloc_lock>:
 80099e4:	4801      	ldr	r0, [pc, #4]	@ (80099ec <__malloc_lock+0x8>)
 80099e6:	f000 be16 	b.w	800a616 <__retarget_lock_acquire_recursive>
 80099ea:	bf00      	nop
 80099ec:	20002040 	.word	0x20002040

080099f0 <__malloc_unlock>:
 80099f0:	4801      	ldr	r0, [pc, #4]	@ (80099f8 <__malloc_unlock+0x8>)
 80099f2:	f000 be11 	b.w	800a618 <__retarget_lock_release_recursive>
 80099f6:	bf00      	nop
 80099f8:	20002040 	.word	0x20002040

080099fc <__cvt>:
 80099fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	ec57 6b10 	vmov	r6, r7, d0
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4619      	mov	r1, r3
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	bfbb      	ittet	lt
 8009a0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a12:	461f      	movlt	r7, r3
 8009a14:	2300      	movge	r3, #0
 8009a16:	232d      	movlt	r3, #45	@ 0x2d
 8009a18:	700b      	strb	r3, [r1, #0]
 8009a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a20:	4691      	mov	r9, r2
 8009a22:	f023 0820 	bic.w	r8, r3, #32
 8009a26:	bfbc      	itt	lt
 8009a28:	4632      	movlt	r2, r6
 8009a2a:	4616      	movlt	r6, r2
 8009a2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a30:	d005      	beq.n	8009a3e <__cvt+0x42>
 8009a32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a36:	d100      	bne.n	8009a3a <__cvt+0x3e>
 8009a38:	3401      	adds	r4, #1
 8009a3a:	2102      	movs	r1, #2
 8009a3c:	e000      	b.n	8009a40 <__cvt+0x44>
 8009a3e:	2103      	movs	r1, #3
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	ab02      	add	r3, sp, #8
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	ec47 6b10 	vmov	d0, r6, r7
 8009a4c:	4653      	mov	r3, sl
 8009a4e:	4622      	mov	r2, r4
 8009a50:	f000 fe72 	bl	800a738 <_dtoa_r>
 8009a54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a58:	4605      	mov	r5, r0
 8009a5a:	d119      	bne.n	8009a90 <__cvt+0x94>
 8009a5c:	f019 0f01 	tst.w	r9, #1
 8009a60:	d00e      	beq.n	8009a80 <__cvt+0x84>
 8009a62:	eb00 0904 	add.w	r9, r0, r4
 8009a66:	2200      	movs	r2, #0
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f7 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a72:	b108      	cbz	r0, 8009a78 <__cvt+0x7c>
 8009a74:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a78:	2230      	movs	r2, #48	@ 0x30
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	454b      	cmp	r3, r9
 8009a7e:	d31e      	bcc.n	8009abe <__cvt+0xc2>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a84:	1b5b      	subs	r3, r3, r5
 8009a86:	4628      	mov	r0, r5
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	b004      	add	sp, #16
 8009a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a94:	eb00 0904 	add.w	r9, r0, r4
 8009a98:	d1e5      	bne.n	8009a66 <__cvt+0x6a>
 8009a9a:	7803      	ldrb	r3, [r0, #0]
 8009a9c:	2b30      	cmp	r3, #48	@ 0x30
 8009a9e:	d10a      	bne.n	8009ab6 <__cvt+0xba>
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	f7f7 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aac:	b918      	cbnz	r0, 8009ab6 <__cvt+0xba>
 8009aae:	f1c4 0401 	rsb	r4, r4, #1
 8009ab2:	f8ca 4000 	str.w	r4, [sl]
 8009ab6:	f8da 3000 	ldr.w	r3, [sl]
 8009aba:	4499      	add	r9, r3
 8009abc:	e7d3      	b.n	8009a66 <__cvt+0x6a>
 8009abe:	1c59      	adds	r1, r3, #1
 8009ac0:	9103      	str	r1, [sp, #12]
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e7d9      	b.n	8009a7a <__cvt+0x7e>

08009ac6 <__exponent>:
 8009ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	bfba      	itte	lt
 8009acc:	4249      	neglt	r1, r1
 8009ace:	232d      	movlt	r3, #45	@ 0x2d
 8009ad0:	232b      	movge	r3, #43	@ 0x2b
 8009ad2:	2909      	cmp	r1, #9
 8009ad4:	7002      	strb	r2, [r0, #0]
 8009ad6:	7043      	strb	r3, [r0, #1]
 8009ad8:	dd29      	ble.n	8009b2e <__exponent+0x68>
 8009ada:	f10d 0307 	add.w	r3, sp, #7
 8009ade:	461d      	mov	r5, r3
 8009ae0:	270a      	movs	r7, #10
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ae8:	fb07 1416 	mls	r4, r7, r6, r1
 8009aec:	3430      	adds	r4, #48	@ 0x30
 8009aee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009af2:	460c      	mov	r4, r1
 8009af4:	2c63      	cmp	r4, #99	@ 0x63
 8009af6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009afa:	4631      	mov	r1, r6
 8009afc:	dcf1      	bgt.n	8009ae2 <__exponent+0x1c>
 8009afe:	3130      	adds	r1, #48	@ 0x30
 8009b00:	1e94      	subs	r4, r2, #2
 8009b02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b06:	1c41      	adds	r1, r0, #1
 8009b08:	4623      	mov	r3, r4
 8009b0a:	42ab      	cmp	r3, r5
 8009b0c:	d30a      	bcc.n	8009b24 <__exponent+0x5e>
 8009b0e:	f10d 0309 	add.w	r3, sp, #9
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	42ac      	cmp	r4, r5
 8009b16:	bf88      	it	hi
 8009b18:	2300      	movhi	r3, #0
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	4403      	add	r3, r0
 8009b1e:	1a18      	subs	r0, r3, r0
 8009b20:	b003      	add	sp, #12
 8009b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b2c:	e7ed      	b.n	8009b0a <__exponent+0x44>
 8009b2e:	2330      	movs	r3, #48	@ 0x30
 8009b30:	3130      	adds	r1, #48	@ 0x30
 8009b32:	7083      	strb	r3, [r0, #2]
 8009b34:	70c1      	strb	r1, [r0, #3]
 8009b36:	1d03      	adds	r3, r0, #4
 8009b38:	e7f1      	b.n	8009b1e <__exponent+0x58>
	...

08009b3c <_printf_float>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	b08d      	sub	sp, #52	@ 0x34
 8009b42:	460c      	mov	r4, r1
 8009b44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b48:	4616      	mov	r6, r2
 8009b4a:	461f      	mov	r7, r3
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	f000 fcdd 	bl	800a50c <_localeconv_r>
 8009b52:	6803      	ldr	r3, [r0, #0]
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f6 fb8a 	bl	8000270 <strlen>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b60:	f8d8 3000 	ldr.w	r3, [r8]
 8009b64:	9005      	str	r0, [sp, #20]
 8009b66:	3307      	adds	r3, #7
 8009b68:	f023 0307 	bic.w	r3, r3, #7
 8009b6c:	f103 0208 	add.w	r2, r3, #8
 8009b70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b74:	f8d4 b000 	ldr.w	fp, [r4]
 8009b78:	f8c8 2000 	str.w	r2, [r8]
 8009b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b84:	9307      	str	r3, [sp, #28]
 8009b86:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b92:	4b9c      	ldr	r3, [pc, #624]	@ (8009e04 <_printf_float+0x2c8>)
 8009b94:	f04f 32ff 	mov.w	r2, #4294967295
 8009b98:	f7f6 ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8009b9c:	bb70      	cbnz	r0, 8009bfc <_printf_float+0xc0>
 8009b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ba2:	4b98      	ldr	r3, [pc, #608]	@ (8009e04 <_printf_float+0x2c8>)
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba8:	f7f6 ffa2 	bl	8000af0 <__aeabi_dcmple>
 8009bac:	bb30      	cbnz	r0, 8009bfc <_printf_float+0xc0>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 ff91 	bl	8000adc <__aeabi_dcmplt>
 8009bba:	b110      	cbz	r0, 8009bc2 <_printf_float+0x86>
 8009bbc:	232d      	movs	r3, #45	@ 0x2d
 8009bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc2:	4a91      	ldr	r2, [pc, #580]	@ (8009e08 <_printf_float+0x2cc>)
 8009bc4:	4b91      	ldr	r3, [pc, #580]	@ (8009e0c <_printf_float+0x2d0>)
 8009bc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bca:	bf8c      	ite	hi
 8009bcc:	4690      	movhi	r8, r2
 8009bce:	4698      	movls	r8, r3
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	f02b 0304 	bic.w	r3, fp, #4
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	f04f 0900 	mov.w	r9, #0
 8009bde:	9700      	str	r7, [sp, #0]
 8009be0:	4633      	mov	r3, r6
 8009be2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009be4:	4621      	mov	r1, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f9d2 	bl	8009f90 <_printf_common>
 8009bec:	3001      	adds	r0, #1
 8009bee:	f040 808d 	bne.w	8009d0c <_printf_float+0x1d0>
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	b00d      	add	sp, #52	@ 0x34
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	4640      	mov	r0, r8
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 ff92 	bl	8000b2c <__aeabi_dcmpun>
 8009c08:	b140      	cbz	r0, 8009c1c <_printf_float+0xe0>
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfbc      	itt	lt
 8009c10:	232d      	movlt	r3, #45	@ 0x2d
 8009c12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c16:	4a7e      	ldr	r2, [pc, #504]	@ (8009e10 <_printf_float+0x2d4>)
 8009c18:	4b7e      	ldr	r3, [pc, #504]	@ (8009e14 <_printf_float+0x2d8>)
 8009c1a:	e7d4      	b.n	8009bc6 <_printf_float+0x8a>
 8009c1c:	6863      	ldr	r3, [r4, #4]
 8009c1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c22:	9206      	str	r2, [sp, #24]
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	d13b      	bne.n	8009ca0 <_printf_float+0x164>
 8009c28:	2306      	movs	r3, #6
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c30:	2300      	movs	r3, #0
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c3c:	ab09      	add	r3, sp, #36	@ 0x24
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	6861      	ldr	r1, [r4, #4]
 8009c42:	ec49 8b10 	vmov	d0, r8, r9
 8009c46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f7ff fed6 	bl	80099fc <__cvt>
 8009c50:	9b06      	ldr	r3, [sp, #24]
 8009c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c54:	2b47      	cmp	r3, #71	@ 0x47
 8009c56:	4680      	mov	r8, r0
 8009c58:	d129      	bne.n	8009cae <_printf_float+0x172>
 8009c5a:	1cc8      	adds	r0, r1, #3
 8009c5c:	db02      	blt.n	8009c64 <_printf_float+0x128>
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	4299      	cmp	r1, r3
 8009c62:	dd41      	ble.n	8009ce8 <_printf_float+0x1ac>
 8009c64:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c68:	fa5f fa8a 	uxtb.w	sl, sl
 8009c6c:	3901      	subs	r1, #1
 8009c6e:	4652      	mov	r2, sl
 8009c70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c74:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c76:	f7ff ff26 	bl	8009ac6 <__exponent>
 8009c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c7c:	1813      	adds	r3, r2, r0
 8009c7e:	2a01      	cmp	r2, #1
 8009c80:	4681      	mov	r9, r0
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	dc02      	bgt.n	8009c8c <_printf_float+0x150>
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	07d2      	lsls	r2, r2, #31
 8009c8a:	d501      	bpl.n	8009c90 <_printf_float+0x154>
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	6123      	str	r3, [r4, #16]
 8009c90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0a2      	beq.n	8009bde <_printf_float+0xa2>
 8009c98:	232d      	movs	r3, #45	@ 0x2d
 8009c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c9e:	e79e      	b.n	8009bde <_printf_float+0xa2>
 8009ca0:	9a06      	ldr	r2, [sp, #24]
 8009ca2:	2a47      	cmp	r2, #71	@ 0x47
 8009ca4:	d1c2      	bne.n	8009c2c <_printf_float+0xf0>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1c0      	bne.n	8009c2c <_printf_float+0xf0>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e7bd      	b.n	8009c2a <_printf_float+0xee>
 8009cae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cb2:	d9db      	bls.n	8009c6c <_printf_float+0x130>
 8009cb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009cb8:	d118      	bne.n	8009cec <_printf_float+0x1b0>
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	dd0b      	ble.n	8009cd8 <_printf_float+0x19c>
 8009cc0:	6121      	str	r1, [r4, #16]
 8009cc2:	b913      	cbnz	r3, 8009cca <_printf_float+0x18e>
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	07d0      	lsls	r0, r2, #31
 8009cc8:	d502      	bpl.n	8009cd0 <_printf_float+0x194>
 8009cca:	3301      	adds	r3, #1
 8009ccc:	440b      	add	r3, r1
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cd2:	f04f 0900 	mov.w	r9, #0
 8009cd6:	e7db      	b.n	8009c90 <_printf_float+0x154>
 8009cd8:	b913      	cbnz	r3, 8009ce0 <_printf_float+0x1a4>
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	07d2      	lsls	r2, r2, #31
 8009cde:	d501      	bpl.n	8009ce4 <_printf_float+0x1a8>
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	e7f4      	b.n	8009cce <_printf_float+0x192>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e7f2      	b.n	8009cce <_printf_float+0x192>
 8009ce8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	db05      	blt.n	8009cfe <_printf_float+0x1c2>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	6121      	str	r1, [r4, #16]
 8009cf6:	07d8      	lsls	r0, r3, #31
 8009cf8:	d5ea      	bpl.n	8009cd0 <_printf_float+0x194>
 8009cfa:	1c4b      	adds	r3, r1, #1
 8009cfc:	e7e7      	b.n	8009cce <_printf_float+0x192>
 8009cfe:	2900      	cmp	r1, #0
 8009d00:	bfd4      	ite	le
 8009d02:	f1c1 0202 	rsble	r2, r1, #2
 8009d06:	2201      	movgt	r2, #1
 8009d08:	4413      	add	r3, r2
 8009d0a:	e7e0      	b.n	8009cce <_printf_float+0x192>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	055a      	lsls	r2, r3, #21
 8009d10:	d407      	bmi.n	8009d22 <_printf_float+0x1e6>
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	4642      	mov	r2, r8
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d12b      	bne.n	8009d78 <_printf_float+0x23c>
 8009d20:	e767      	b.n	8009bf2 <_printf_float+0xb6>
 8009d22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d26:	f240 80dd 	bls.w	8009ee4 <_printf_float+0x3a8>
 8009d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2300      	movs	r3, #0
 8009d32:	f7f6 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d033      	beq.n	8009da2 <_printf_float+0x266>
 8009d3a:	4a37      	ldr	r2, [pc, #220]	@ (8009e18 <_printf_float+0x2dc>)
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f af54 	beq.w	8009bf2 <_printf_float+0xb6>
 8009d4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d4e:	4543      	cmp	r3, r8
 8009d50:	db02      	blt.n	8009d58 <_printf_float+0x21c>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	07d8      	lsls	r0, r3, #31
 8009d56:	d50f      	bpl.n	8009d78 <_printf_float+0x23c>
 8009d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f af45 	beq.w	8009bf2 <_printf_float+0xb6>
 8009d68:	f04f 0900 	mov.w	r9, #0
 8009d6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d70:	f104 0a1a 	add.w	sl, r4, #26
 8009d74:	45c8      	cmp	r8, r9
 8009d76:	dc09      	bgt.n	8009d8c <_printf_float+0x250>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	079b      	lsls	r3, r3, #30
 8009d7c:	f100 8103 	bmi.w	8009f86 <_printf_float+0x44a>
 8009d80:	68e0      	ldr	r0, [r4, #12]
 8009d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d84:	4298      	cmp	r0, r3
 8009d86:	bfb8      	it	lt
 8009d88:	4618      	movlt	r0, r3
 8009d8a:	e734      	b.n	8009bf6 <_printf_float+0xba>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4652      	mov	r2, sl
 8009d90:	4631      	mov	r1, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b8      	blx	r7
 8009d96:	3001      	adds	r0, #1
 8009d98:	f43f af2b 	beq.w	8009bf2 <_printf_float+0xb6>
 8009d9c:	f109 0901 	add.w	r9, r9, #1
 8009da0:	e7e8      	b.n	8009d74 <_printf_float+0x238>
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dc39      	bgt.n	8009e1c <_printf_float+0x2e0>
 8009da8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e18 <_printf_float+0x2dc>)
 8009daa:	2301      	movs	r3, #1
 8009dac:	4631      	mov	r1, r6
 8009dae:	4628      	mov	r0, r5
 8009db0:	47b8      	blx	r7
 8009db2:	3001      	adds	r0, #1
 8009db4:	f43f af1d 	beq.w	8009bf2 <_printf_float+0xb6>
 8009db8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009dbc:	ea59 0303 	orrs.w	r3, r9, r3
 8009dc0:	d102      	bne.n	8009dc8 <_printf_float+0x28c>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	07d9      	lsls	r1, r3, #31
 8009dc6:	d5d7      	bpl.n	8009d78 <_printf_float+0x23c>
 8009dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f43f af0d 	beq.w	8009bf2 <_printf_float+0xb6>
 8009dd8:	f04f 0a00 	mov.w	sl, #0
 8009ddc:	f104 0b1a 	add.w	fp, r4, #26
 8009de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de2:	425b      	negs	r3, r3
 8009de4:	4553      	cmp	r3, sl
 8009de6:	dc01      	bgt.n	8009dec <_printf_float+0x2b0>
 8009de8:	464b      	mov	r3, r9
 8009dea:	e793      	b.n	8009d14 <_printf_float+0x1d8>
 8009dec:	2301      	movs	r3, #1
 8009dee:	465a      	mov	r2, fp
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	f43f aefb 	beq.w	8009bf2 <_printf_float+0xb6>
 8009dfc:	f10a 0a01 	add.w	sl, sl, #1
 8009e00:	e7ee      	b.n	8009de0 <_printf_float+0x2a4>
 8009e02:	bf00      	nop
 8009e04:	7fefffff 	.word	0x7fefffff
 8009e08:	0800c2b4 	.word	0x0800c2b4
 8009e0c:	0800c2b0 	.word	0x0800c2b0
 8009e10:	0800c2bc 	.word	0x0800c2bc
 8009e14:	0800c2b8 	.word	0x0800c2b8
 8009e18:	0800c2c0 	.word	0x0800c2c0
 8009e1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e22:	4553      	cmp	r3, sl
 8009e24:	bfa8      	it	ge
 8009e26:	4653      	movge	r3, sl
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	4699      	mov	r9, r3
 8009e2c:	dc36      	bgt.n	8009e9c <_printf_float+0x360>
 8009e2e:	f04f 0b00 	mov.w	fp, #0
 8009e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e36:	f104 021a 	add.w	r2, r4, #26
 8009e3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	eba3 0309 	sub.w	r3, r3, r9
 8009e42:	455b      	cmp	r3, fp
 8009e44:	dc31      	bgt.n	8009eaa <_printf_float+0x36e>
 8009e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e48:	459a      	cmp	sl, r3
 8009e4a:	dc3a      	bgt.n	8009ec2 <_printf_float+0x386>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	07da      	lsls	r2, r3, #31
 8009e50:	d437      	bmi.n	8009ec2 <_printf_float+0x386>
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	ebaa 0903 	sub.w	r9, sl, r3
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e5e:	4599      	cmp	r9, r3
 8009e60:	bfa8      	it	ge
 8009e62:	4699      	movge	r9, r3
 8009e64:	f1b9 0f00 	cmp.w	r9, #0
 8009e68:	dc33      	bgt.n	8009ed2 <_printf_float+0x396>
 8009e6a:	f04f 0800 	mov.w	r8, #0
 8009e6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e72:	f104 0b1a 	add.w	fp, r4, #26
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	ebaa 0303 	sub.w	r3, sl, r3
 8009e7c:	eba3 0309 	sub.w	r3, r3, r9
 8009e80:	4543      	cmp	r3, r8
 8009e82:	f77f af79 	ble.w	8009d78 <_printf_float+0x23c>
 8009e86:	2301      	movs	r3, #1
 8009e88:	465a      	mov	r2, fp
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	f43f aeae 	beq.w	8009bf2 <_printf_float+0xb6>
 8009e96:	f108 0801 	add.w	r8, r8, #1
 8009e9a:	e7ec      	b.n	8009e76 <_printf_float+0x33a>
 8009e9c:	4642      	mov	r2, r8
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d1c2      	bne.n	8009e2e <_printf_float+0x2f2>
 8009ea8:	e6a3      	b.n	8009bf2 <_printf_float+0xb6>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	9206      	str	r2, [sp, #24]
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f ae9c 	beq.w	8009bf2 <_printf_float+0xb6>
 8009eba:	9a06      	ldr	r2, [sp, #24]
 8009ebc:	f10b 0b01 	add.w	fp, fp, #1
 8009ec0:	e7bb      	b.n	8009e3a <_printf_float+0x2fe>
 8009ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	d1c0      	bne.n	8009e52 <_printf_float+0x316>
 8009ed0:	e68f      	b.n	8009bf2 <_printf_float+0xb6>
 8009ed2:	9a06      	ldr	r2, [sp, #24]
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	4442      	add	r2, r8
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d1c3      	bne.n	8009e6a <_printf_float+0x32e>
 8009ee2:	e686      	b.n	8009bf2 <_printf_float+0xb6>
 8009ee4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ee8:	f1ba 0f01 	cmp.w	sl, #1
 8009eec:	dc01      	bgt.n	8009ef2 <_printf_float+0x3b6>
 8009eee:	07db      	lsls	r3, r3, #31
 8009ef0:	d536      	bpl.n	8009f60 <_printf_float+0x424>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	f43f ae78 	beq.w	8009bf2 <_printf_float+0xb6>
 8009f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f ae70 	beq.w	8009bf2 <_printf_float+0xb6>
 8009f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f16:	2200      	movs	r2, #0
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f1e:	f7f6 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f22:	b9c0      	cbnz	r0, 8009f56 <_printf_float+0x41a>
 8009f24:	4653      	mov	r3, sl
 8009f26:	f108 0201 	add.w	r2, r8, #1
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	d10c      	bne.n	8009f4e <_printf_float+0x412>
 8009f34:	e65d      	b.n	8009bf2 <_printf_float+0xb6>
 8009f36:	2301      	movs	r3, #1
 8009f38:	465a      	mov	r2, fp
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	f43f ae56 	beq.w	8009bf2 <_printf_float+0xb6>
 8009f46:	f108 0801 	add.w	r8, r8, #1
 8009f4a:	45d0      	cmp	r8, sl
 8009f4c:	dbf3      	blt.n	8009f36 <_printf_float+0x3fa>
 8009f4e:	464b      	mov	r3, r9
 8009f50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f54:	e6df      	b.n	8009d16 <_printf_float+0x1da>
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	f104 0b1a 	add.w	fp, r4, #26
 8009f5e:	e7f4      	b.n	8009f4a <_printf_float+0x40e>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4642      	mov	r2, r8
 8009f64:	e7e1      	b.n	8009f2a <_printf_float+0x3ee>
 8009f66:	2301      	movs	r3, #1
 8009f68:	464a      	mov	r2, r9
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	f43f ae3e 	beq.w	8009bf2 <_printf_float+0xb6>
 8009f76:	f108 0801 	add.w	r8, r8, #1
 8009f7a:	68e3      	ldr	r3, [r4, #12]
 8009f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f7e:	1a5b      	subs	r3, r3, r1
 8009f80:	4543      	cmp	r3, r8
 8009f82:	dcf0      	bgt.n	8009f66 <_printf_float+0x42a>
 8009f84:	e6fc      	b.n	8009d80 <_printf_float+0x244>
 8009f86:	f04f 0800 	mov.w	r8, #0
 8009f8a:	f104 0919 	add.w	r9, r4, #25
 8009f8e:	e7f4      	b.n	8009f7a <_printf_float+0x43e>

08009f90 <_printf_common>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	4616      	mov	r6, r2
 8009f96:	4698      	mov	r8, r3
 8009f98:	688a      	ldr	r2, [r1, #8]
 8009f9a:	690b      	ldr	r3, [r1, #16]
 8009f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	bfb8      	it	lt
 8009fa4:	4613      	movlt	r3, r2
 8009fa6:	6033      	str	r3, [r6, #0]
 8009fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fac:	4607      	mov	r7, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	b10a      	cbz	r2, 8009fb6 <_printf_common+0x26>
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	6033      	str	r3, [r6, #0]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	0699      	lsls	r1, r3, #26
 8009fba:	bf42      	ittt	mi
 8009fbc:	6833      	ldrmi	r3, [r6, #0]
 8009fbe:	3302      	addmi	r3, #2
 8009fc0:	6033      	strmi	r3, [r6, #0]
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	f015 0506 	ands.w	r5, r5, #6
 8009fc8:	d106      	bne.n	8009fd8 <_printf_common+0x48>
 8009fca:	f104 0a19 	add.w	sl, r4, #25
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	6832      	ldr	r2, [r6, #0]
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dc26      	bgt.n	800a026 <_printf_common+0x96>
 8009fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	3b00      	subs	r3, #0
 8009fe0:	bf18      	it	ne
 8009fe2:	2301      	movne	r3, #1
 8009fe4:	0692      	lsls	r2, r2, #26
 8009fe6:	d42b      	bmi.n	800a040 <_printf_common+0xb0>
 8009fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fec:	4641      	mov	r1, r8
 8009fee:	4638      	mov	r0, r7
 8009ff0:	47c8      	blx	r9
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d01e      	beq.n	800a034 <_printf_common+0xa4>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	f003 0306 	and.w	r3, r3, #6
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	bf02      	ittt	eq
 800a002:	68e5      	ldreq	r5, [r4, #12]
 800a004:	6833      	ldreq	r3, [r6, #0]
 800a006:	1aed      	subeq	r5, r5, r3
 800a008:	68a3      	ldr	r3, [r4, #8]
 800a00a:	bf0c      	ite	eq
 800a00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a010:	2500      	movne	r5, #0
 800a012:	4293      	cmp	r3, r2
 800a014:	bfc4      	itt	gt
 800a016:	1a9b      	subgt	r3, r3, r2
 800a018:	18ed      	addgt	r5, r5, r3
 800a01a:	2600      	movs	r6, #0
 800a01c:	341a      	adds	r4, #26
 800a01e:	42b5      	cmp	r5, r6
 800a020:	d11a      	bne.n	800a058 <_printf_common+0xc8>
 800a022:	2000      	movs	r0, #0
 800a024:	e008      	b.n	800a038 <_printf_common+0xa8>
 800a026:	2301      	movs	r3, #1
 800a028:	4652      	mov	r2, sl
 800a02a:	4641      	mov	r1, r8
 800a02c:	4638      	mov	r0, r7
 800a02e:	47c8      	blx	r9
 800a030:	3001      	adds	r0, #1
 800a032:	d103      	bne.n	800a03c <_printf_common+0xac>
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03c:	3501      	adds	r5, #1
 800a03e:	e7c6      	b.n	8009fce <_printf_common+0x3e>
 800a040:	18e1      	adds	r1, r4, r3
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	2030      	movs	r0, #48	@ 0x30
 800a046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a04a:	4422      	add	r2, r4
 800a04c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a054:	3302      	adds	r3, #2
 800a056:	e7c7      	b.n	8009fe8 <_printf_common+0x58>
 800a058:	2301      	movs	r3, #1
 800a05a:	4622      	mov	r2, r4
 800a05c:	4641      	mov	r1, r8
 800a05e:	4638      	mov	r0, r7
 800a060:	47c8      	blx	r9
 800a062:	3001      	adds	r0, #1
 800a064:	d0e6      	beq.n	800a034 <_printf_common+0xa4>
 800a066:	3601      	adds	r6, #1
 800a068:	e7d9      	b.n	800a01e <_printf_common+0x8e>
	...

0800a06c <_printf_i>:
 800a06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	7e0f      	ldrb	r7, [r1, #24]
 800a072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a074:	2f78      	cmp	r7, #120	@ 0x78
 800a076:	4691      	mov	r9, r2
 800a078:	4680      	mov	r8, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	469a      	mov	sl, r3
 800a07e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a082:	d807      	bhi.n	800a094 <_printf_i+0x28>
 800a084:	2f62      	cmp	r7, #98	@ 0x62
 800a086:	d80a      	bhi.n	800a09e <_printf_i+0x32>
 800a088:	2f00      	cmp	r7, #0
 800a08a:	f000 80d1 	beq.w	800a230 <_printf_i+0x1c4>
 800a08e:	2f58      	cmp	r7, #88	@ 0x58
 800a090:	f000 80b8 	beq.w	800a204 <_printf_i+0x198>
 800a094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a09c:	e03a      	b.n	800a114 <_printf_i+0xa8>
 800a09e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0a2:	2b15      	cmp	r3, #21
 800a0a4:	d8f6      	bhi.n	800a094 <_printf_i+0x28>
 800a0a6:	a101      	add	r1, pc, #4	@ (adr r1, 800a0ac <_printf_i+0x40>)
 800a0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0ac:	0800a105 	.word	0x0800a105
 800a0b0:	0800a119 	.word	0x0800a119
 800a0b4:	0800a095 	.word	0x0800a095
 800a0b8:	0800a095 	.word	0x0800a095
 800a0bc:	0800a095 	.word	0x0800a095
 800a0c0:	0800a095 	.word	0x0800a095
 800a0c4:	0800a119 	.word	0x0800a119
 800a0c8:	0800a095 	.word	0x0800a095
 800a0cc:	0800a095 	.word	0x0800a095
 800a0d0:	0800a095 	.word	0x0800a095
 800a0d4:	0800a095 	.word	0x0800a095
 800a0d8:	0800a217 	.word	0x0800a217
 800a0dc:	0800a143 	.word	0x0800a143
 800a0e0:	0800a1d1 	.word	0x0800a1d1
 800a0e4:	0800a095 	.word	0x0800a095
 800a0e8:	0800a095 	.word	0x0800a095
 800a0ec:	0800a239 	.word	0x0800a239
 800a0f0:	0800a095 	.word	0x0800a095
 800a0f4:	0800a143 	.word	0x0800a143
 800a0f8:	0800a095 	.word	0x0800a095
 800a0fc:	0800a095 	.word	0x0800a095
 800a100:	0800a1d9 	.word	0x0800a1d9
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	1d1a      	adds	r2, r3, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6032      	str	r2, [r6, #0]
 800a10c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a114:	2301      	movs	r3, #1
 800a116:	e09c      	b.n	800a252 <_printf_i+0x1e6>
 800a118:	6833      	ldr	r3, [r6, #0]
 800a11a:	6820      	ldr	r0, [r4, #0]
 800a11c:	1d19      	adds	r1, r3, #4
 800a11e:	6031      	str	r1, [r6, #0]
 800a120:	0606      	lsls	r6, r0, #24
 800a122:	d501      	bpl.n	800a128 <_printf_i+0xbc>
 800a124:	681d      	ldr	r5, [r3, #0]
 800a126:	e003      	b.n	800a130 <_printf_i+0xc4>
 800a128:	0645      	lsls	r5, r0, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0xb8>
 800a12c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a130:	2d00      	cmp	r5, #0
 800a132:	da03      	bge.n	800a13c <_printf_i+0xd0>
 800a134:	232d      	movs	r3, #45	@ 0x2d
 800a136:	426d      	negs	r5, r5
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a13c:	4858      	ldr	r0, [pc, #352]	@ (800a2a0 <_printf_i+0x234>)
 800a13e:	230a      	movs	r3, #10
 800a140:	e011      	b.n	800a166 <_printf_i+0xfa>
 800a142:	6821      	ldr	r1, [r4, #0]
 800a144:	6833      	ldr	r3, [r6, #0]
 800a146:	0608      	lsls	r0, r1, #24
 800a148:	f853 5b04 	ldr.w	r5, [r3], #4
 800a14c:	d402      	bmi.n	800a154 <_printf_i+0xe8>
 800a14e:	0649      	lsls	r1, r1, #25
 800a150:	bf48      	it	mi
 800a152:	b2ad      	uxthmi	r5, r5
 800a154:	2f6f      	cmp	r7, #111	@ 0x6f
 800a156:	4852      	ldr	r0, [pc, #328]	@ (800a2a0 <_printf_i+0x234>)
 800a158:	6033      	str	r3, [r6, #0]
 800a15a:	bf14      	ite	ne
 800a15c:	230a      	movne	r3, #10
 800a15e:	2308      	moveq	r3, #8
 800a160:	2100      	movs	r1, #0
 800a162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a166:	6866      	ldr	r6, [r4, #4]
 800a168:	60a6      	str	r6, [r4, #8]
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	db05      	blt.n	800a17a <_printf_i+0x10e>
 800a16e:	6821      	ldr	r1, [r4, #0]
 800a170:	432e      	orrs	r6, r5
 800a172:	f021 0104 	bic.w	r1, r1, #4
 800a176:	6021      	str	r1, [r4, #0]
 800a178:	d04b      	beq.n	800a212 <_printf_i+0x1a6>
 800a17a:	4616      	mov	r6, r2
 800a17c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a180:	fb03 5711 	mls	r7, r3, r1, r5
 800a184:	5dc7      	ldrb	r7, [r0, r7]
 800a186:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a18a:	462f      	mov	r7, r5
 800a18c:	42bb      	cmp	r3, r7
 800a18e:	460d      	mov	r5, r1
 800a190:	d9f4      	bls.n	800a17c <_printf_i+0x110>
 800a192:	2b08      	cmp	r3, #8
 800a194:	d10b      	bne.n	800a1ae <_printf_i+0x142>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	07df      	lsls	r7, r3, #31
 800a19a:	d508      	bpl.n	800a1ae <_printf_i+0x142>
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	6861      	ldr	r1, [r4, #4]
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	bfde      	ittt	le
 800a1a4:	2330      	movle	r3, #48	@ 0x30
 800a1a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1ae:	1b92      	subs	r2, r2, r6
 800a1b0:	6122      	str	r2, [r4, #16]
 800a1b2:	f8cd a000 	str.w	sl, [sp]
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	aa03      	add	r2, sp, #12
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f7ff fee7 	bl	8009f90 <_printf_common>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d14a      	bne.n	800a25c <_printf_i+0x1f0>
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	b004      	add	sp, #16
 800a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	f043 0320 	orr.w	r3, r3, #32
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	4832      	ldr	r0, [pc, #200]	@ (800a2a4 <_printf_i+0x238>)
 800a1da:	2778      	movs	r7, #120	@ 0x78
 800a1dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	6831      	ldr	r1, [r6, #0]
 800a1e4:	061f      	lsls	r7, r3, #24
 800a1e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1ea:	d402      	bmi.n	800a1f2 <_printf_i+0x186>
 800a1ec:	065f      	lsls	r7, r3, #25
 800a1ee:	bf48      	it	mi
 800a1f0:	b2ad      	uxthmi	r5, r5
 800a1f2:	6031      	str	r1, [r6, #0]
 800a1f4:	07d9      	lsls	r1, r3, #31
 800a1f6:	bf44      	itt	mi
 800a1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800a1fc:	6023      	strmi	r3, [r4, #0]
 800a1fe:	b11d      	cbz	r5, 800a208 <_printf_i+0x19c>
 800a200:	2310      	movs	r3, #16
 800a202:	e7ad      	b.n	800a160 <_printf_i+0xf4>
 800a204:	4826      	ldr	r0, [pc, #152]	@ (800a2a0 <_printf_i+0x234>)
 800a206:	e7e9      	b.n	800a1dc <_printf_i+0x170>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	f023 0320 	bic.w	r3, r3, #32
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	e7f6      	b.n	800a200 <_printf_i+0x194>
 800a212:	4616      	mov	r6, r2
 800a214:	e7bd      	b.n	800a192 <_printf_i+0x126>
 800a216:	6833      	ldr	r3, [r6, #0]
 800a218:	6825      	ldr	r5, [r4, #0]
 800a21a:	6961      	ldr	r1, [r4, #20]
 800a21c:	1d18      	adds	r0, r3, #4
 800a21e:	6030      	str	r0, [r6, #0]
 800a220:	062e      	lsls	r6, r5, #24
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	d501      	bpl.n	800a22a <_printf_i+0x1be>
 800a226:	6019      	str	r1, [r3, #0]
 800a228:	e002      	b.n	800a230 <_printf_i+0x1c4>
 800a22a:	0668      	lsls	r0, r5, #25
 800a22c:	d5fb      	bpl.n	800a226 <_printf_i+0x1ba>
 800a22e:	8019      	strh	r1, [r3, #0]
 800a230:	2300      	movs	r3, #0
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	4616      	mov	r6, r2
 800a236:	e7bc      	b.n	800a1b2 <_printf_i+0x146>
 800a238:	6833      	ldr	r3, [r6, #0]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	6032      	str	r2, [r6, #0]
 800a23e:	681e      	ldr	r6, [r3, #0]
 800a240:	6862      	ldr	r2, [r4, #4]
 800a242:	2100      	movs	r1, #0
 800a244:	4630      	mov	r0, r6
 800a246:	f7f5 ffc3 	bl	80001d0 <memchr>
 800a24a:	b108      	cbz	r0, 800a250 <_printf_i+0x1e4>
 800a24c:	1b80      	subs	r0, r0, r6
 800a24e:	6060      	str	r0, [r4, #4]
 800a250:	6863      	ldr	r3, [r4, #4]
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	2300      	movs	r3, #0
 800a256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a25a:	e7aa      	b.n	800a1b2 <_printf_i+0x146>
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	4632      	mov	r2, r6
 800a260:	4649      	mov	r1, r9
 800a262:	4640      	mov	r0, r8
 800a264:	47d0      	blx	sl
 800a266:	3001      	adds	r0, #1
 800a268:	d0ad      	beq.n	800a1c6 <_printf_i+0x15a>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	079b      	lsls	r3, r3, #30
 800a26e:	d413      	bmi.n	800a298 <_printf_i+0x22c>
 800a270:	68e0      	ldr	r0, [r4, #12]
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	4298      	cmp	r0, r3
 800a276:	bfb8      	it	lt
 800a278:	4618      	movlt	r0, r3
 800a27a:	e7a6      	b.n	800a1ca <_printf_i+0x15e>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4632      	mov	r2, r6
 800a280:	4649      	mov	r1, r9
 800a282:	4640      	mov	r0, r8
 800a284:	47d0      	blx	sl
 800a286:	3001      	adds	r0, #1
 800a288:	d09d      	beq.n	800a1c6 <_printf_i+0x15a>
 800a28a:	3501      	adds	r5, #1
 800a28c:	68e3      	ldr	r3, [r4, #12]
 800a28e:	9903      	ldr	r1, [sp, #12]
 800a290:	1a5b      	subs	r3, r3, r1
 800a292:	42ab      	cmp	r3, r5
 800a294:	dcf2      	bgt.n	800a27c <_printf_i+0x210>
 800a296:	e7eb      	b.n	800a270 <_printf_i+0x204>
 800a298:	2500      	movs	r5, #0
 800a29a:	f104 0619 	add.w	r6, r4, #25
 800a29e:	e7f5      	b.n	800a28c <_printf_i+0x220>
 800a2a0:	0800c2c2 	.word	0x0800c2c2
 800a2a4:	0800c2d3 	.word	0x0800c2d3

0800a2a8 <std>:
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2b6:	6083      	str	r3, [r0, #8]
 800a2b8:	8181      	strh	r1, [r0, #12]
 800a2ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2bc:	81c2      	strh	r2, [r0, #14]
 800a2be:	6183      	str	r3, [r0, #24]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	2208      	movs	r2, #8
 800a2c4:	305c      	adds	r0, #92	@ 0x5c
 800a2c6:	f000 f918 	bl	800a4fa <memset>
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a300 <std+0x58>)
 800a2cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a304 <std+0x5c>)
 800a2d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <std+0x60>)
 800a2d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a30c <std+0x64>)
 800a2d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2da:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <std+0x68>)
 800a2dc:	6224      	str	r4, [r4, #32]
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d006      	beq.n	800a2f0 <std+0x48>
 800a2e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2e6:	4294      	cmp	r4, r2
 800a2e8:	d002      	beq.n	800a2f0 <std+0x48>
 800a2ea:	33d0      	adds	r3, #208	@ 0xd0
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d105      	bne.n	800a2fc <std+0x54>
 800a2f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f8:	f000 b98c 	b.w	800a614 <__retarget_lock_init_recursive>
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	bf00      	nop
 800a300:	0800a475 	.word	0x0800a475
 800a304:	0800a497 	.word	0x0800a497
 800a308:	0800a4cf 	.word	0x0800a4cf
 800a30c:	0800a4f3 	.word	0x0800a4f3
 800a310:	20001f00 	.word	0x20001f00

0800a314 <stdio_exit_handler>:
 800a314:	4a02      	ldr	r2, [pc, #8]	@ (800a320 <stdio_exit_handler+0xc>)
 800a316:	4903      	ldr	r1, [pc, #12]	@ (800a324 <stdio_exit_handler+0x10>)
 800a318:	4803      	ldr	r0, [pc, #12]	@ (800a328 <stdio_exit_handler+0x14>)
 800a31a:	f000 b87b 	b.w	800a414 <_fwalk_sglue>
 800a31e:	bf00      	nop
 800a320:	200000fc 	.word	0x200000fc
 800a324:	0800bded 	.word	0x0800bded
 800a328:	2000010c 	.word	0x2000010c

0800a32c <cleanup_stdio>:
 800a32c:	6841      	ldr	r1, [r0, #4]
 800a32e:	4b0c      	ldr	r3, [pc, #48]	@ (800a360 <cleanup_stdio+0x34>)
 800a330:	4299      	cmp	r1, r3
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	d001      	beq.n	800a33c <cleanup_stdio+0x10>
 800a338:	f001 fd58 	bl	800bdec <_fflush_r>
 800a33c:	68a1      	ldr	r1, [r4, #8]
 800a33e:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <cleanup_stdio+0x38>)
 800a340:	4299      	cmp	r1, r3
 800a342:	d002      	beq.n	800a34a <cleanup_stdio+0x1e>
 800a344:	4620      	mov	r0, r4
 800a346:	f001 fd51 	bl	800bdec <_fflush_r>
 800a34a:	68e1      	ldr	r1, [r4, #12]
 800a34c:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <cleanup_stdio+0x3c>)
 800a34e:	4299      	cmp	r1, r3
 800a350:	d004      	beq.n	800a35c <cleanup_stdio+0x30>
 800a352:	4620      	mov	r0, r4
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a358:	f001 bd48 	b.w	800bdec <_fflush_r>
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	bf00      	nop
 800a360:	20001f00 	.word	0x20001f00
 800a364:	20001f68 	.word	0x20001f68
 800a368:	20001fd0 	.word	0x20001fd0

0800a36c <global_stdio_init.part.0>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4b0b      	ldr	r3, [pc, #44]	@ (800a39c <global_stdio_init.part.0+0x30>)
 800a370:	4c0b      	ldr	r4, [pc, #44]	@ (800a3a0 <global_stdio_init.part.0+0x34>)
 800a372:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a4 <global_stdio_init.part.0+0x38>)
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	4620      	mov	r0, r4
 800a378:	2200      	movs	r2, #0
 800a37a:	2104      	movs	r1, #4
 800a37c:	f7ff ff94 	bl	800a2a8 <std>
 800a380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a384:	2201      	movs	r2, #1
 800a386:	2109      	movs	r1, #9
 800a388:	f7ff ff8e 	bl	800a2a8 <std>
 800a38c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a390:	2202      	movs	r2, #2
 800a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a396:	2112      	movs	r1, #18
 800a398:	f7ff bf86 	b.w	800a2a8 <std>
 800a39c:	20002038 	.word	0x20002038
 800a3a0:	20001f00 	.word	0x20001f00
 800a3a4:	0800a315 	.word	0x0800a315

0800a3a8 <__sfp_lock_acquire>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	@ (800a3b0 <__sfp_lock_acquire+0x8>)
 800a3aa:	f000 b934 	b.w	800a616 <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20002041 	.word	0x20002041

0800a3b4 <__sfp_lock_release>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	@ (800a3bc <__sfp_lock_release+0x8>)
 800a3b6:	f000 b92f 	b.w	800a618 <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	20002041 	.word	0x20002041

0800a3c0 <__sinit>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	f7ff fff0 	bl	800a3a8 <__sfp_lock_acquire>
 800a3c8:	6a23      	ldr	r3, [r4, #32]
 800a3ca:	b11b      	cbz	r3, 800a3d4 <__sinit+0x14>
 800a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d0:	f7ff bff0 	b.w	800a3b4 <__sfp_lock_release>
 800a3d4:	4b04      	ldr	r3, [pc, #16]	@ (800a3e8 <__sinit+0x28>)
 800a3d6:	6223      	str	r3, [r4, #32]
 800a3d8:	4b04      	ldr	r3, [pc, #16]	@ (800a3ec <__sinit+0x2c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1f5      	bne.n	800a3cc <__sinit+0xc>
 800a3e0:	f7ff ffc4 	bl	800a36c <global_stdio_init.part.0>
 800a3e4:	e7f2      	b.n	800a3cc <__sinit+0xc>
 800a3e6:	bf00      	nop
 800a3e8:	0800a32d 	.word	0x0800a32d
 800a3ec:	20002038 	.word	0x20002038

0800a3f0 <fiprintf>:
 800a3f0:	b40e      	push	{r1, r2, r3}
 800a3f2:	b503      	push	{r0, r1, lr}
 800a3f4:	4601      	mov	r1, r0
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	4805      	ldr	r0, [pc, #20]	@ (800a410 <fiprintf+0x20>)
 800a3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fe:	6800      	ldr	r0, [r0, #0]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	f001 fb57 	bl	800bab4 <_vfiprintf_r>
 800a406:	b002      	add	sp, #8
 800a408:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40c:	b003      	add	sp, #12
 800a40e:	4770      	bx	lr
 800a410:	20000108 	.word	0x20000108

0800a414 <_fwalk_sglue>:
 800a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a418:	4607      	mov	r7, r0
 800a41a:	4688      	mov	r8, r1
 800a41c:	4614      	mov	r4, r2
 800a41e:	2600      	movs	r6, #0
 800a420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a424:	f1b9 0901 	subs.w	r9, r9, #1
 800a428:	d505      	bpl.n	800a436 <_fwalk_sglue+0x22>
 800a42a:	6824      	ldr	r4, [r4, #0]
 800a42c:	2c00      	cmp	r4, #0
 800a42e:	d1f7      	bne.n	800a420 <_fwalk_sglue+0xc>
 800a430:	4630      	mov	r0, r6
 800a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a436:	89ab      	ldrh	r3, [r5, #12]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d907      	bls.n	800a44c <_fwalk_sglue+0x38>
 800a43c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a440:	3301      	adds	r3, #1
 800a442:	d003      	beq.n	800a44c <_fwalk_sglue+0x38>
 800a444:	4629      	mov	r1, r5
 800a446:	4638      	mov	r0, r7
 800a448:	47c0      	blx	r8
 800a44a:	4306      	orrs	r6, r0
 800a44c:	3568      	adds	r5, #104	@ 0x68
 800a44e:	e7e9      	b.n	800a424 <_fwalk_sglue+0x10>

0800a450 <iprintf>:
 800a450:	b40f      	push	{r0, r1, r2, r3}
 800a452:	b507      	push	{r0, r1, r2, lr}
 800a454:	4906      	ldr	r1, [pc, #24]	@ (800a470 <iprintf+0x20>)
 800a456:	ab04      	add	r3, sp, #16
 800a458:	6808      	ldr	r0, [r1, #0]
 800a45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45e:	6881      	ldr	r1, [r0, #8]
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f001 fb27 	bl	800bab4 <_vfiprintf_r>
 800a466:	b003      	add	sp, #12
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b004      	add	sp, #16
 800a46e:	4770      	bx	lr
 800a470:	20000108 	.word	0x20000108

0800a474 <__sread>:
 800a474:	b510      	push	{r4, lr}
 800a476:	460c      	mov	r4, r1
 800a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47c:	f000 f86c 	bl	800a558 <_read_r>
 800a480:	2800      	cmp	r0, #0
 800a482:	bfab      	itete	ge
 800a484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a486:	89a3      	ldrhlt	r3, [r4, #12]
 800a488:	181b      	addge	r3, r3, r0
 800a48a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a48e:	bfac      	ite	ge
 800a490:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a492:	81a3      	strhlt	r3, [r4, #12]
 800a494:	bd10      	pop	{r4, pc}

0800a496 <__swrite>:
 800a496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49a:	461f      	mov	r7, r3
 800a49c:	898b      	ldrh	r3, [r1, #12]
 800a49e:	05db      	lsls	r3, r3, #23
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	d505      	bpl.n	800a4b4 <__swrite+0x1e>
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f000 f840 	bl	800a534 <_lseek_r>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4be:	81a3      	strh	r3, [r4, #12]
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	f000 b867 	b.w	800a59c <_write_r>

0800a4ce <__sseek>:
 800a4ce:	b510      	push	{r4, lr}
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d6:	f000 f82d 	bl	800a534 <_lseek_r>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	bf15      	itete	ne
 800a4e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4ea:	81a3      	strheq	r3, [r4, #12]
 800a4ec:	bf18      	it	ne
 800a4ee:	81a3      	strhne	r3, [r4, #12]
 800a4f0:	bd10      	pop	{r4, pc}

0800a4f2 <__sclose>:
 800a4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f6:	f000 b80d 	b.w	800a514 <_close_r>

0800a4fa <memset>:
 800a4fa:	4402      	add	r2, r0
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d100      	bne.n	800a504 <memset+0xa>
 800a502:	4770      	bx	lr
 800a504:	f803 1b01 	strb.w	r1, [r3], #1
 800a508:	e7f9      	b.n	800a4fe <memset+0x4>
	...

0800a50c <_localeconv_r>:
 800a50c:	4800      	ldr	r0, [pc, #0]	@ (800a510 <_localeconv_r+0x4>)
 800a50e:	4770      	bx	lr
 800a510:	20000248 	.word	0x20000248

0800a514 <_close_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d06      	ldr	r5, [pc, #24]	@ (800a530 <_close_r+0x1c>)
 800a518:	2300      	movs	r3, #0
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f7 fd68 	bl	8001ff4 <_close>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_close_r+0x1a>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_close_r+0x1a>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	2000203c 	.word	0x2000203c

0800a534 <_lseek_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d07      	ldr	r5, [pc, #28]	@ (800a554 <_lseek_r+0x20>)
 800a538:	4604      	mov	r4, r0
 800a53a:	4608      	mov	r0, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	2200      	movs	r2, #0
 800a540:	602a      	str	r2, [r5, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f7f7 fd7d 	bl	8002042 <_lseek>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_lseek_r+0x1e>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_lseek_r+0x1e>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	2000203c 	.word	0x2000203c

0800a558 <_read_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d07      	ldr	r5, [pc, #28]	@ (800a578 <_read_r+0x20>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f7 fd27 	bl	8001fba <_read>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_read_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_read_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	2000203c 	.word	0x2000203c

0800a57c <_sbrk_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4d06      	ldr	r5, [pc, #24]	@ (800a598 <_sbrk_r+0x1c>)
 800a580:	2300      	movs	r3, #0
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	f7f7 fd68 	bl	800205c <_sbrk>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_sbrk_r+0x1a>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_sbrk_r+0x1a>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	2000203c 	.word	0x2000203c

0800a59c <_write_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	@ (800a5bc <_write_r+0x20>)
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7f7 f98c 	bl	80018c8 <_write>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_write_r+0x1e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_write_r+0x1e>
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	2000203c 	.word	0x2000203c

0800a5c0 <__errno>:
 800a5c0:	4b01      	ldr	r3, [pc, #4]	@ (800a5c8 <__errno+0x8>)
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	20000108 	.word	0x20000108

0800a5cc <__libc_init_array>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4d0d      	ldr	r5, [pc, #52]	@ (800a604 <__libc_init_array+0x38>)
 800a5d0:	4c0d      	ldr	r4, [pc, #52]	@ (800a608 <__libc_init_array+0x3c>)
 800a5d2:	1b64      	subs	r4, r4, r5
 800a5d4:	10a4      	asrs	r4, r4, #2
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	42a6      	cmp	r6, r4
 800a5da:	d109      	bne.n	800a5f0 <__libc_init_array+0x24>
 800a5dc:	4d0b      	ldr	r5, [pc, #44]	@ (800a60c <__libc_init_array+0x40>)
 800a5de:	4c0c      	ldr	r4, [pc, #48]	@ (800a610 <__libc_init_array+0x44>)
 800a5e0:	f001 fdca 	bl	800c178 <_init>
 800a5e4:	1b64      	subs	r4, r4, r5
 800a5e6:	10a4      	asrs	r4, r4, #2
 800a5e8:	2600      	movs	r6, #0
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	d105      	bne.n	800a5fa <__libc_init_array+0x2e>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f4:	4798      	blx	r3
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__libc_init_array+0xc>
 800a5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fe:	4798      	blx	r3
 800a600:	3601      	adds	r6, #1
 800a602:	e7f2      	b.n	800a5ea <__libc_init_array+0x1e>
 800a604:	0800c5f4 	.word	0x0800c5f4
 800a608:	0800c5f4 	.word	0x0800c5f4
 800a60c:	0800c5f4 	.word	0x0800c5f4
 800a610:	0800c5f8 	.word	0x0800c5f8

0800a614 <__retarget_lock_init_recursive>:
 800a614:	4770      	bx	lr

0800a616 <__retarget_lock_acquire_recursive>:
 800a616:	4770      	bx	lr

0800a618 <__retarget_lock_release_recursive>:
 800a618:	4770      	bx	lr

0800a61a <abort>:
 800a61a:	b508      	push	{r3, lr}
 800a61c:	2006      	movs	r0, #6
 800a61e:	f001 fcc9 	bl	800bfb4 <raise>
 800a622:	2001      	movs	r0, #1
 800a624:	f7f7 fcbe 	bl	8001fa4 <_exit>

0800a628 <quorem>:
 800a628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	6903      	ldr	r3, [r0, #16]
 800a62e:	690c      	ldr	r4, [r1, #16]
 800a630:	42a3      	cmp	r3, r4
 800a632:	4607      	mov	r7, r0
 800a634:	db7e      	blt.n	800a734 <quorem+0x10c>
 800a636:	3c01      	subs	r4, #1
 800a638:	f101 0814 	add.w	r8, r1, #20
 800a63c:	00a3      	lsls	r3, r4, #2
 800a63e:	f100 0514 	add.w	r5, r0, #20
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a64e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a652:	3301      	adds	r3, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a65a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a65e:	d32e      	bcc.n	800a6be <quorem+0x96>
 800a660:	f04f 0a00 	mov.w	sl, #0
 800a664:	46c4      	mov	ip, r8
 800a666:	46ae      	mov	lr, r5
 800a668:	46d3      	mov	fp, sl
 800a66a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a66e:	b298      	uxth	r0, r3
 800a670:	fb06 a000 	mla	r0, r6, r0, sl
 800a674:	0c02      	lsrs	r2, r0, #16
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	fb06 2303 	mla	r3, r6, r3, r2
 800a67c:	f8de 2000 	ldr.w	r2, [lr]
 800a680:	b280      	uxth	r0, r0
 800a682:	b292      	uxth	r2, r2
 800a684:	1a12      	subs	r2, r2, r0
 800a686:	445a      	add	r2, fp
 800a688:	f8de 0000 	ldr.w	r0, [lr]
 800a68c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a690:	b29b      	uxth	r3, r3
 800a692:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a696:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a69a:	b292      	uxth	r2, r2
 800a69c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6a0:	45e1      	cmp	r9, ip
 800a6a2:	f84e 2b04 	str.w	r2, [lr], #4
 800a6a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6aa:	d2de      	bcs.n	800a66a <quorem+0x42>
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	58eb      	ldr	r3, [r5, r3]
 800a6b0:	b92b      	cbnz	r3, 800a6be <quorem+0x96>
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	d32f      	bcc.n	800a71c <quorem+0xf4>
 800a6bc:	613c      	str	r4, [r7, #16]
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f001 f8c6 	bl	800b850 <__mcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	db25      	blt.n	800a714 <quorem+0xec>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6d0:	f8d1 c000 	ldr.w	ip, [r1]
 800a6d4:	fa1f fe82 	uxth.w	lr, r2
 800a6d8:	fa1f f38c 	uxth.w	r3, ip
 800a6dc:	eba3 030e 	sub.w	r3, r3, lr
 800a6e0:	4403      	add	r3, r0
 800a6e2:	0c12      	lsrs	r2, r2, #16
 800a6e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f2:	45c1      	cmp	r9, r8
 800a6f4:	f841 3b04 	str.w	r3, [r1], #4
 800a6f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6fc:	d2e6      	bcs.n	800a6cc <quorem+0xa4>
 800a6fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a706:	b922      	cbnz	r2, 800a712 <quorem+0xea>
 800a708:	3b04      	subs	r3, #4
 800a70a:	429d      	cmp	r5, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	d30b      	bcc.n	800a728 <quorem+0x100>
 800a710:	613c      	str	r4, [r7, #16]
 800a712:	3601      	adds	r6, #1
 800a714:	4630      	mov	r0, r6
 800a716:	b003      	add	sp, #12
 800a718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71c:	6812      	ldr	r2, [r2, #0]
 800a71e:	3b04      	subs	r3, #4
 800a720:	2a00      	cmp	r2, #0
 800a722:	d1cb      	bne.n	800a6bc <quorem+0x94>
 800a724:	3c01      	subs	r4, #1
 800a726:	e7c6      	b.n	800a6b6 <quorem+0x8e>
 800a728:	6812      	ldr	r2, [r2, #0]
 800a72a:	3b04      	subs	r3, #4
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	d1ef      	bne.n	800a710 <quorem+0xe8>
 800a730:	3c01      	subs	r4, #1
 800a732:	e7ea      	b.n	800a70a <quorem+0xe2>
 800a734:	2000      	movs	r0, #0
 800a736:	e7ee      	b.n	800a716 <quorem+0xee>

0800a738 <_dtoa_r>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	69c7      	ldr	r7, [r0, #28]
 800a73e:	b097      	sub	sp, #92	@ 0x5c
 800a740:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a744:	ec55 4b10 	vmov	r4, r5, d0
 800a748:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a74a:	9107      	str	r1, [sp, #28]
 800a74c:	4681      	mov	r9, r0
 800a74e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a750:	9311      	str	r3, [sp, #68]	@ 0x44
 800a752:	b97f      	cbnz	r7, 800a774 <_dtoa_r+0x3c>
 800a754:	2010      	movs	r0, #16
 800a756:	f7ff f89b 	bl	8009890 <malloc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a760:	b920      	cbnz	r0, 800a76c <_dtoa_r+0x34>
 800a762:	4ba9      	ldr	r3, [pc, #676]	@ (800aa08 <_dtoa_r+0x2d0>)
 800a764:	21ef      	movs	r1, #239	@ 0xef
 800a766:	48a9      	ldr	r0, [pc, #676]	@ (800aa0c <_dtoa_r+0x2d4>)
 800a768:	f7ff f874 	bl	8009854 <__assert_func>
 800a76c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a770:	6007      	str	r7, [r0, #0]
 800a772:	60c7      	str	r7, [r0, #12]
 800a774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	b159      	cbz	r1, 800a794 <_dtoa_r+0x5c>
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	604a      	str	r2, [r1, #4]
 800a780:	2301      	movs	r3, #1
 800a782:	4093      	lsls	r3, r2
 800a784:	608b      	str	r3, [r1, #8]
 800a786:	4648      	mov	r0, r9
 800a788:	f000 fe30 	bl	800b3ec <_Bfree>
 800a78c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	1e2b      	subs	r3, r5, #0
 800a796:	bfb9      	ittee	lt
 800a798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a79c:	9305      	strlt	r3, [sp, #20]
 800a79e:	2300      	movge	r3, #0
 800a7a0:	6033      	strge	r3, [r6, #0]
 800a7a2:	9f05      	ldr	r7, [sp, #20]
 800a7a4:	4b9a      	ldr	r3, [pc, #616]	@ (800aa10 <_dtoa_r+0x2d8>)
 800a7a6:	bfbc      	itt	lt
 800a7a8:	2201      	movlt	r2, #1
 800a7aa:	6032      	strlt	r2, [r6, #0]
 800a7ac:	43bb      	bics	r3, r7
 800a7ae:	d112      	bne.n	800a7d6 <_dtoa_r+0x9e>
 800a7b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7bc:	4323      	orrs	r3, r4
 800a7be:	f000 855a 	beq.w	800b276 <_dtoa_r+0xb3e>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa24 <_dtoa_r+0x2ec>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 855c 	beq.w	800b286 <_dtoa_r+0xb4e>
 800a7ce:	f10a 0303 	add.w	r3, sl, #3
 800a7d2:	f000 bd56 	b.w	800b282 <_dtoa_r+0xb4a>
 800a7d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	ec51 0b17 	vmov	r0, r1, d7
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a7e6:	f7f6 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	b158      	cbz	r0, 800a806 <_dtoa_r+0xce>
 800a7ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7f6:	b113      	cbz	r3, 800a7fe <_dtoa_r+0xc6>
 800a7f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7fa:	4b86      	ldr	r3, [pc, #536]	@ (800aa14 <_dtoa_r+0x2dc>)
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa28 <_dtoa_r+0x2f0>
 800a802:	f000 bd40 	b.w	800b286 <_dtoa_r+0xb4e>
 800a806:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a80a:	aa14      	add	r2, sp, #80	@ 0x50
 800a80c:	a915      	add	r1, sp, #84	@ 0x54
 800a80e:	4648      	mov	r0, r9
 800a810:	f001 f8ce 	bl	800b9b0 <__d2b>
 800a814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a818:	9002      	str	r0, [sp, #8]
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d078      	beq.n	800a910 <_dtoa_r+0x1d8>
 800a81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a820:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a82c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a838:	4619      	mov	r1, r3
 800a83a:	2200      	movs	r2, #0
 800a83c:	4b76      	ldr	r3, [pc, #472]	@ (800aa18 <_dtoa_r+0x2e0>)
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9f0 <_dtoa_r+0x2b8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fed6 	bl	80005f8 <__aeabi_dmul>
 800a84c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a9f8 <_dtoa_r+0x2c0>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 fd1b 	bl	800028c <__adddf3>
 800a856:	4604      	mov	r4, r0
 800a858:	4630      	mov	r0, r6
 800a85a:	460d      	mov	r5, r1
 800a85c:	f7f5 fe62 	bl	8000524 <__aeabi_i2d>
 800a860:	a367      	add	r3, pc, #412	@ (adr r3, 800aa00 <_dtoa_r+0x2c8>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fd0b 	bl	800028c <__adddf3>
 800a876:	4604      	mov	r4, r0
 800a878:	460d      	mov	r5, r1
 800a87a:	f7f6 f96d 	bl	8000b58 <__aeabi_d2iz>
 800a87e:	2200      	movs	r2, #0
 800a880:	4607      	mov	r7, r0
 800a882:	2300      	movs	r3, #0
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f6 f928 	bl	8000adc <__aeabi_dcmplt>
 800a88c:	b140      	cbz	r0, 800a8a0 <_dtoa_r+0x168>
 800a88e:	4638      	mov	r0, r7
 800a890:	f7f5 fe48 	bl	8000524 <__aeabi_i2d>
 800a894:	4622      	mov	r2, r4
 800a896:	462b      	mov	r3, r5
 800a898:	f7f6 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800a89c:	b900      	cbnz	r0, 800a8a0 <_dtoa_r+0x168>
 800a89e:	3f01      	subs	r7, #1
 800a8a0:	2f16      	cmp	r7, #22
 800a8a2:	d852      	bhi.n	800a94a <_dtoa_r+0x212>
 800a8a4:	4b5d      	ldr	r3, [pc, #372]	@ (800aa1c <_dtoa_r+0x2e4>)
 800a8a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8b2:	f7f6 f913 	bl	8000adc <__aeabi_dcmplt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d049      	beq.n	800a94e <_dtoa_r+0x216>
 800a8ba:	3f01      	subs	r7, #1
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8c2:	1b9b      	subs	r3, r3, r6
 800a8c4:	1e5a      	subs	r2, r3, #1
 800a8c6:	bf45      	ittet	mi
 800a8c8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8cc:	9300      	strmi	r3, [sp, #0]
 800a8ce:	2300      	movpl	r3, #0
 800a8d0:	2300      	movmi	r3, #0
 800a8d2:	9206      	str	r2, [sp, #24]
 800a8d4:	bf54      	ite	pl
 800a8d6:	9300      	strpl	r3, [sp, #0]
 800a8d8:	9306      	strmi	r3, [sp, #24]
 800a8da:	2f00      	cmp	r7, #0
 800a8dc:	db39      	blt.n	800a952 <_dtoa_r+0x21a>
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a8e2:	443b      	add	r3, r7
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	9b07      	ldr	r3, [sp, #28]
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	d863      	bhi.n	800a9b8 <_dtoa_r+0x280>
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	bfc4      	itt	gt
 800a8f4:	3b04      	subgt	r3, #4
 800a8f6:	9307      	strgt	r3, [sp, #28]
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a8fe:	bfcc      	ite	gt
 800a900:	2400      	movgt	r4, #0
 800a902:	2401      	movle	r4, #1
 800a904:	2b03      	cmp	r3, #3
 800a906:	d863      	bhi.n	800a9d0 <_dtoa_r+0x298>
 800a908:	e8df f003 	tbb	[pc, r3]
 800a90c:	2b375452 	.word	0x2b375452
 800a910:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a914:	441e      	add	r6, r3
 800a916:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	bfc1      	itttt	gt
 800a91e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a922:	409f      	lslgt	r7, r3
 800a924:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a928:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a92c:	bfd6      	itet	le
 800a92e:	f1c3 0320 	rsble	r3, r3, #32
 800a932:	ea47 0003 	orrgt.w	r0, r7, r3
 800a936:	fa04 f003 	lslle.w	r0, r4, r3
 800a93a:	f7f5 fde3 	bl	8000504 <__aeabi_ui2d>
 800a93e:	2201      	movs	r2, #1
 800a940:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a944:	3e01      	subs	r6, #1
 800a946:	9212      	str	r2, [sp, #72]	@ 0x48
 800a948:	e776      	b.n	800a838 <_dtoa_r+0x100>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e7b7      	b.n	800a8be <_dtoa_r+0x186>
 800a94e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a950:	e7b6      	b.n	800a8c0 <_dtoa_r+0x188>
 800a952:	9b00      	ldr	r3, [sp, #0]
 800a954:	1bdb      	subs	r3, r3, r7
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	427b      	negs	r3, r7
 800a95a:	9308      	str	r3, [sp, #32]
 800a95c:	2300      	movs	r3, #0
 800a95e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a960:	e7c3      	b.n	800a8ea <_dtoa_r+0x1b2>
 800a962:	2301      	movs	r3, #1
 800a964:	9309      	str	r3, [sp, #36]	@ 0x24
 800a966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a968:	eb07 0b03 	add.w	fp, r7, r3
 800a96c:	f10b 0301 	add.w	r3, fp, #1
 800a970:	2b01      	cmp	r3, #1
 800a972:	9303      	str	r3, [sp, #12]
 800a974:	bfb8      	it	lt
 800a976:	2301      	movlt	r3, #1
 800a978:	e006      	b.n	800a988 <_dtoa_r+0x250>
 800a97a:	2301      	movs	r3, #1
 800a97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd28      	ble.n	800a9d6 <_dtoa_r+0x29e>
 800a984:	469b      	mov	fp, r3
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a98c:	2100      	movs	r1, #0
 800a98e:	2204      	movs	r2, #4
 800a990:	f102 0514 	add.w	r5, r2, #20
 800a994:	429d      	cmp	r5, r3
 800a996:	d926      	bls.n	800a9e6 <_dtoa_r+0x2ae>
 800a998:	6041      	str	r1, [r0, #4]
 800a99a:	4648      	mov	r0, r9
 800a99c:	f000 fce6 	bl	800b36c <_Balloc>
 800a9a0:	4682      	mov	sl, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d142      	bne.n	800aa2c <_dtoa_r+0x2f4>
 800a9a6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa20 <_dtoa_r+0x2e8>)
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9ae:	e6da      	b.n	800a766 <_dtoa_r+0x2e>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e7e3      	b.n	800a97c <_dtoa_r+0x244>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e7d5      	b.n	800a964 <_dtoa_r+0x22c>
 800a9b8:	2401      	movs	r4, #1
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	9409      	str	r4, [sp, #36]	@ 0x24
 800a9c0:	f04f 3bff 	mov.w	fp, #4294967295
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9ca:	2312      	movs	r3, #18
 800a9cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9ce:	e7db      	b.n	800a988 <_dtoa_r+0x250>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	e7f4      	b.n	800a9c0 <_dtoa_r+0x288>
 800a9d6:	f04f 0b01 	mov.w	fp, #1
 800a9da:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9de:	465b      	mov	r3, fp
 800a9e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a9e4:	e7d0      	b.n	800a988 <_dtoa_r+0x250>
 800a9e6:	3101      	adds	r1, #1
 800a9e8:	0052      	lsls	r2, r2, #1
 800a9ea:	e7d1      	b.n	800a990 <_dtoa_r+0x258>
 800a9ec:	f3af 8000 	nop.w
 800a9f0:	636f4361 	.word	0x636f4361
 800a9f4:	3fd287a7 	.word	0x3fd287a7
 800a9f8:	8b60c8b3 	.word	0x8b60c8b3
 800a9fc:	3fc68a28 	.word	0x3fc68a28
 800aa00:	509f79fb 	.word	0x509f79fb
 800aa04:	3fd34413 	.word	0x3fd34413
 800aa08:	0800c2f1 	.word	0x0800c2f1
 800aa0c:	0800c308 	.word	0x0800c308
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	0800c2c1 	.word	0x0800c2c1
 800aa18:	3ff80000 	.word	0x3ff80000
 800aa1c:	0800c420 	.word	0x0800c420
 800aa20:	0800c360 	.word	0x0800c360
 800aa24:	0800c2ed 	.word	0x0800c2ed
 800aa28:	0800c2c0 	.word	0x0800c2c0
 800aa2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa30:	6018      	str	r0, [r3, #0]
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f200 80a1 	bhi.w	800ab7c <_dtoa_r+0x444>
 800aa3a:	2c00      	cmp	r4, #0
 800aa3c:	f000 809e 	beq.w	800ab7c <_dtoa_r+0x444>
 800aa40:	2f00      	cmp	r7, #0
 800aa42:	dd33      	ble.n	800aaac <_dtoa_r+0x374>
 800aa44:	4b9c      	ldr	r3, [pc, #624]	@ (800acb8 <_dtoa_r+0x580>)
 800aa46:	f007 020f 	and.w	r2, r7, #15
 800aa4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4e:	ed93 7b00 	vldr	d7, [r3]
 800aa52:	05f8      	lsls	r0, r7, #23
 800aa54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aa58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa5c:	d516      	bpl.n	800aa8c <_dtoa_r+0x354>
 800aa5e:	4b97      	ldr	r3, [pc, #604]	@ (800acbc <_dtoa_r+0x584>)
 800aa60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa68:	f7f5 fef0 	bl	800084c <__aeabi_ddiv>
 800aa6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa70:	f004 040f 	and.w	r4, r4, #15
 800aa74:	2603      	movs	r6, #3
 800aa76:	4d91      	ldr	r5, [pc, #580]	@ (800acbc <_dtoa_r+0x584>)
 800aa78:	b954      	cbnz	r4, 800aa90 <_dtoa_r+0x358>
 800aa7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa82:	f7f5 fee3 	bl	800084c <__aeabi_ddiv>
 800aa86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa8a:	e028      	b.n	800aade <_dtoa_r+0x3a6>
 800aa8c:	2602      	movs	r6, #2
 800aa8e:	e7f2      	b.n	800aa76 <_dtoa_r+0x33e>
 800aa90:	07e1      	lsls	r1, r4, #31
 800aa92:	d508      	bpl.n	800aaa6 <_dtoa_r+0x36e>
 800aa94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa9c:	f7f5 fdac 	bl	80005f8 <__aeabi_dmul>
 800aaa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	1064      	asrs	r4, r4, #1
 800aaa8:	3508      	adds	r5, #8
 800aaaa:	e7e5      	b.n	800aa78 <_dtoa_r+0x340>
 800aaac:	f000 80af 	beq.w	800ac0e <_dtoa_r+0x4d6>
 800aab0:	427c      	negs	r4, r7
 800aab2:	4b81      	ldr	r3, [pc, #516]	@ (800acb8 <_dtoa_r+0x580>)
 800aab4:	4d81      	ldr	r5, [pc, #516]	@ (800acbc <_dtoa_r+0x584>)
 800aab6:	f004 020f 	and.w	r2, r4, #15
 800aaba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aac6:	f7f5 fd97 	bl	80005f8 <__aeabi_dmul>
 800aaca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aace:	1124      	asrs	r4, r4, #4
 800aad0:	2300      	movs	r3, #0
 800aad2:	2602      	movs	r6, #2
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	f040 808f 	bne.w	800abf8 <_dtoa_r+0x4c0>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1d3      	bne.n	800aa86 <_dtoa_r+0x34e>
 800aade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aae0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8094 	beq.w	800ac12 <_dtoa_r+0x4da>
 800aaea:	4b75      	ldr	r3, [pc, #468]	@ (800acc0 <_dtoa_r+0x588>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 fff3 	bl	8000adc <__aeabi_dcmplt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f000 808b 	beq.w	800ac12 <_dtoa_r+0x4da>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 8087 	beq.w	800ac12 <_dtoa_r+0x4da>
 800ab04:	f1bb 0f00 	cmp.w	fp, #0
 800ab08:	dd34      	ble.n	800ab74 <_dtoa_r+0x43c>
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4b6d      	ldr	r3, [pc, #436]	@ (800acc4 <_dtoa_r+0x58c>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fd71 	bl	80005f8 <__aeabi_dmul>
 800ab16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab1a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab1e:	3601      	adds	r6, #1
 800ab20:	465c      	mov	r4, fp
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7f5 fcfe 	bl	8000524 <__aeabi_i2d>
 800ab28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2c:	f7f5 fd64 	bl	80005f8 <__aeabi_dmul>
 800ab30:	4b65      	ldr	r3, [pc, #404]	@ (800acc8 <_dtoa_r+0x590>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	f7f5 fbaa 	bl	800028c <__adddf3>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d16a      	bne.n	800ac18 <_dtoa_r+0x4e0>
 800ab42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab46:	4b61      	ldr	r3, [pc, #388]	@ (800accc <_dtoa_r+0x594>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f7f5 fb9d 	bl	8000288 <__aeabi_dsub>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4633      	mov	r3, r6
 800ab5a:	f7f5 ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f040 8298 	bne.w	800b094 <_dtoa_r+0x95c>
 800ab64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab68:	462a      	mov	r2, r5
 800ab6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab6e:	f7f5 ffb5 	bl	8000adc <__aeabi_dcmplt>
 800ab72:	bb38      	cbnz	r0, 800abc4 <_dtoa_r+0x48c>
 800ab74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ab78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f2c0 8157 	blt.w	800ae32 <_dtoa_r+0x6fa>
 800ab84:	2f0e      	cmp	r7, #14
 800ab86:	f300 8154 	bgt.w	800ae32 <_dtoa_r+0x6fa>
 800ab8a:	4b4b      	ldr	r3, [pc, #300]	@ (800acb8 <_dtoa_r+0x580>)
 800ab8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab90:	ed93 7b00 	vldr	d7, [r3]
 800ab94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	ed8d 7b00 	vstr	d7, [sp]
 800ab9c:	f280 80e5 	bge.w	800ad6a <_dtoa_r+0x632>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f300 80e1 	bgt.w	800ad6a <_dtoa_r+0x632>
 800aba8:	d10c      	bne.n	800abc4 <_dtoa_r+0x48c>
 800abaa:	4b48      	ldr	r3, [pc, #288]	@ (800accc <_dtoa_r+0x594>)
 800abac:	2200      	movs	r2, #0
 800abae:	ec51 0b17 	vmov	r0, r1, d7
 800abb2:	f7f5 fd21 	bl	80005f8 <__aeabi_dmul>
 800abb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abba:	f7f5 ffa3 	bl	8000b04 <__aeabi_dcmpge>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f000 8266 	beq.w	800b090 <_dtoa_r+0x958>
 800abc4:	2400      	movs	r4, #0
 800abc6:	4625      	mov	r5, r4
 800abc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abca:	4656      	mov	r6, sl
 800abcc:	ea6f 0803 	mvn.w	r8, r3
 800abd0:	2700      	movs	r7, #0
 800abd2:	4621      	mov	r1, r4
 800abd4:	4648      	mov	r0, r9
 800abd6:	f000 fc09 	bl	800b3ec <_Bfree>
 800abda:	2d00      	cmp	r5, #0
 800abdc:	f000 80bd 	beq.w	800ad5a <_dtoa_r+0x622>
 800abe0:	b12f      	cbz	r7, 800abee <_dtoa_r+0x4b6>
 800abe2:	42af      	cmp	r7, r5
 800abe4:	d003      	beq.n	800abee <_dtoa_r+0x4b6>
 800abe6:	4639      	mov	r1, r7
 800abe8:	4648      	mov	r0, r9
 800abea:	f000 fbff 	bl	800b3ec <_Bfree>
 800abee:	4629      	mov	r1, r5
 800abf0:	4648      	mov	r0, r9
 800abf2:	f000 fbfb 	bl	800b3ec <_Bfree>
 800abf6:	e0b0      	b.n	800ad5a <_dtoa_r+0x622>
 800abf8:	07e2      	lsls	r2, r4, #31
 800abfa:	d505      	bpl.n	800ac08 <_dtoa_r+0x4d0>
 800abfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	3601      	adds	r6, #1
 800ac06:	2301      	movs	r3, #1
 800ac08:	1064      	asrs	r4, r4, #1
 800ac0a:	3508      	adds	r5, #8
 800ac0c:	e762      	b.n	800aad4 <_dtoa_r+0x39c>
 800ac0e:	2602      	movs	r6, #2
 800ac10:	e765      	b.n	800aade <_dtoa_r+0x3a6>
 800ac12:	9c03      	ldr	r4, [sp, #12]
 800ac14:	46b8      	mov	r8, r7
 800ac16:	e784      	b.n	800ab22 <_dtoa_r+0x3ea>
 800ac18:	4b27      	ldr	r3, [pc, #156]	@ (800acb8 <_dtoa_r+0x580>)
 800ac1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac24:	4454      	add	r4, sl
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d054      	beq.n	800acd4 <_dtoa_r+0x59c>
 800ac2a:	4929      	ldr	r1, [pc, #164]	@ (800acd0 <_dtoa_r+0x598>)
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f7f5 fe0d 	bl	800084c <__aeabi_ddiv>
 800ac32:	4633      	mov	r3, r6
 800ac34:	462a      	mov	r2, r5
 800ac36:	f7f5 fb27 	bl	8000288 <__aeabi_dsub>
 800ac3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac3e:	4656      	mov	r6, sl
 800ac40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac44:	f7f5 ff88 	bl	8000b58 <__aeabi_d2iz>
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f7f5 fc6b 	bl	8000524 <__aeabi_i2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac56:	f7f5 fb17 	bl	8000288 <__aeabi_dsub>
 800ac5a:	3530      	adds	r5, #48	@ 0x30
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac64:	f806 5b01 	strb.w	r5, [r6], #1
 800ac68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac6c:	f7f5 ff36 	bl	8000adc <__aeabi_dcmplt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d172      	bne.n	800ad5a <_dtoa_r+0x622>
 800ac74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac78:	4911      	ldr	r1, [pc, #68]	@ (800acc0 <_dtoa_r+0x588>)
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f7f5 fb04 	bl	8000288 <__aeabi_dsub>
 800ac80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac84:	f7f5 ff2a 	bl	8000adc <__aeabi_dcmplt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f040 80b4 	bne.w	800adf6 <_dtoa_r+0x6be>
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	f43f af70 	beq.w	800ab74 <_dtoa_r+0x43c>
 800ac94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac98:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <_dtoa_r+0x58c>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7f5 fcac 	bl	80005f8 <__aeabi_dmul>
 800aca0:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <_dtoa_r+0x58c>)
 800aca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aca6:	2200      	movs	r2, #0
 800aca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acb4:	e7c4      	b.n	800ac40 <_dtoa_r+0x508>
 800acb6:	bf00      	nop
 800acb8:	0800c420 	.word	0x0800c420
 800acbc:	0800c3f8 	.word	0x0800c3f8
 800acc0:	3ff00000 	.word	0x3ff00000
 800acc4:	40240000 	.word	0x40240000
 800acc8:	401c0000 	.word	0x401c0000
 800accc:	40140000 	.word	0x40140000
 800acd0:	3fe00000 	.word	0x3fe00000
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	f7f5 fc8e 	bl	80005f8 <__aeabi_dmul>
 800acdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ace0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ace2:	4656      	mov	r6, sl
 800ace4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ace8:	f7f5 ff36 	bl	8000b58 <__aeabi_d2iz>
 800acec:	4605      	mov	r5, r0
 800acee:	f7f5 fc19 	bl	8000524 <__aeabi_i2d>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acfa:	f7f5 fac5 	bl	8000288 <__aeabi_dsub>
 800acfe:	3530      	adds	r5, #48	@ 0x30
 800ad00:	f806 5b01 	strb.w	r5, [r6], #1
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	42a6      	cmp	r6, r4
 800ad0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	d124      	bne.n	800ad5e <_dtoa_r+0x626>
 800ad14:	4baf      	ldr	r3, [pc, #700]	@ (800afd4 <_dtoa_r+0x89c>)
 800ad16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad1a:	f7f5 fab7 	bl	800028c <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad26:	f7f5 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d163      	bne.n	800adf6 <_dtoa_r+0x6be>
 800ad2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad32:	49a8      	ldr	r1, [pc, #672]	@ (800afd4 <_dtoa_r+0x89c>)
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7f5 faa7 	bl	8000288 <__aeabi_dsub>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad42:	f7f5 fecb 	bl	8000adc <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f43f af14 	beq.w	800ab74 <_dtoa_r+0x43c>
 800ad4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad4e:	1e73      	subs	r3, r6, #1
 800ad50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad56:	2b30      	cmp	r3, #48	@ 0x30
 800ad58:	d0f8      	beq.n	800ad4c <_dtoa_r+0x614>
 800ad5a:	4647      	mov	r7, r8
 800ad5c:	e03b      	b.n	800add6 <_dtoa_r+0x69e>
 800ad5e:	4b9e      	ldr	r3, [pc, #632]	@ (800afd8 <_dtoa_r+0x8a0>)
 800ad60:	f7f5 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ad64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad68:	e7bc      	b.n	800ace4 <_dtoa_r+0x5ac>
 800ad6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ad6e:	4656      	mov	r6, sl
 800ad70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fd68 	bl	800084c <__aeabi_ddiv>
 800ad7c:	f7f5 feec 	bl	8000b58 <__aeabi_d2iz>
 800ad80:	4680      	mov	r8, r0
 800ad82:	f7f5 fbcf 	bl	8000524 <__aeabi_i2d>
 800ad86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8a:	f7f5 fc35 	bl	80005f8 <__aeabi_dmul>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4620      	mov	r0, r4
 800ad94:	4629      	mov	r1, r5
 800ad96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad9a:	f7f5 fa75 	bl	8000288 <__aeabi_dsub>
 800ad9e:	f806 4b01 	strb.w	r4, [r6], #1
 800ada2:	9d03      	ldr	r5, [sp, #12]
 800ada4:	eba6 040a 	sub.w	r4, r6, sl
 800ada8:	42a5      	cmp	r5, r4
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	d133      	bne.n	800ae18 <_dtoa_r+0x6e0>
 800adb0:	f7f5 fa6c 	bl	800028c <__adddf3>
 800adb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adb8:	4604      	mov	r4, r0
 800adba:	460d      	mov	r5, r1
 800adbc:	f7f5 feac 	bl	8000b18 <__aeabi_dcmpgt>
 800adc0:	b9c0      	cbnz	r0, 800adf4 <_dtoa_r+0x6bc>
 800adc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc6:	4620      	mov	r0, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800adce:	b110      	cbz	r0, 800add6 <_dtoa_r+0x69e>
 800add0:	f018 0f01 	tst.w	r8, #1
 800add4:	d10e      	bne.n	800adf4 <_dtoa_r+0x6bc>
 800add6:	9902      	ldr	r1, [sp, #8]
 800add8:	4648      	mov	r0, r9
 800adda:	f000 fb07 	bl	800b3ec <_Bfree>
 800adde:	2300      	movs	r3, #0
 800ade0:	7033      	strb	r3, [r6, #0]
 800ade2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ade4:	3701      	adds	r7, #1
 800ade6:	601f      	str	r7, [r3, #0]
 800ade8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 824b 	beq.w	800b286 <_dtoa_r+0xb4e>
 800adf0:	601e      	str	r6, [r3, #0]
 800adf2:	e248      	b.n	800b286 <_dtoa_r+0xb4e>
 800adf4:	46b8      	mov	r8, r7
 800adf6:	4633      	mov	r3, r6
 800adf8:	461e      	mov	r6, r3
 800adfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adfe:	2a39      	cmp	r2, #57	@ 0x39
 800ae00:	d106      	bne.n	800ae10 <_dtoa_r+0x6d8>
 800ae02:	459a      	cmp	sl, r3
 800ae04:	d1f8      	bne.n	800adf8 <_dtoa_r+0x6c0>
 800ae06:	2230      	movs	r2, #48	@ 0x30
 800ae08:	f108 0801 	add.w	r8, r8, #1
 800ae0c:	f88a 2000 	strb.w	r2, [sl]
 800ae10:	781a      	ldrb	r2, [r3, #0]
 800ae12:	3201      	adds	r2, #1
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e7a0      	b.n	800ad5a <_dtoa_r+0x622>
 800ae18:	4b6f      	ldr	r3, [pc, #444]	@ (800afd8 <_dtoa_r+0x8a0>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fbec 	bl	80005f8 <__aeabi_dmul>
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	4604      	mov	r4, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	f7f5 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d09f      	beq.n	800ad70 <_dtoa_r+0x638>
 800ae30:	e7d1      	b.n	800add6 <_dtoa_r+0x69e>
 800ae32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	f000 80ea 	beq.w	800b00e <_dtoa_r+0x8d6>
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	2a01      	cmp	r2, #1
 800ae3e:	f300 80cd 	bgt.w	800afdc <_dtoa_r+0x8a4>
 800ae42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	f000 80c1 	beq.w	800afcc <_dtoa_r+0x894>
 800ae4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae4e:	9c08      	ldr	r4, [sp, #32]
 800ae50:	9e00      	ldr	r6, [sp, #0]
 800ae52:	9a00      	ldr	r2, [sp, #0]
 800ae54:	441a      	add	r2, r3
 800ae56:	9200      	str	r2, [sp, #0]
 800ae58:	9a06      	ldr	r2, [sp, #24]
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	441a      	add	r2, r3
 800ae5e:	4648      	mov	r0, r9
 800ae60:	9206      	str	r2, [sp, #24]
 800ae62:	f000 fb77 	bl	800b554 <__i2b>
 800ae66:	4605      	mov	r5, r0
 800ae68:	b166      	cbz	r6, 800ae84 <_dtoa_r+0x74c>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd09      	ble.n	800ae84 <_dtoa_r+0x74c>
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	9a00      	ldr	r2, [sp, #0]
 800ae74:	bfa8      	it	ge
 800ae76:	4633      	movge	r3, r6
 800ae78:	1ad2      	subs	r2, r2, r3
 800ae7a:	9200      	str	r2, [sp, #0]
 800ae7c:	9a06      	ldr	r2, [sp, #24]
 800ae7e:	1af6      	subs	r6, r6, r3
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	9b08      	ldr	r3, [sp, #32]
 800ae86:	b30b      	cbz	r3, 800aecc <_dtoa_r+0x794>
 800ae88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80c6 	beq.w	800b01c <_dtoa_r+0x8e4>
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	f000 80c0 	beq.w	800b016 <_dtoa_r+0x8de>
 800ae96:	4629      	mov	r1, r5
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	f000 fc12 	bl	800b6c4 <__pow5mult>
 800aea0:	9a02      	ldr	r2, [sp, #8]
 800aea2:	4601      	mov	r1, r0
 800aea4:	4605      	mov	r5, r0
 800aea6:	4648      	mov	r0, r9
 800aea8:	f000 fb6a 	bl	800b580 <__multiply>
 800aeac:	9902      	ldr	r1, [sp, #8]
 800aeae:	4680      	mov	r8, r0
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fa9b 	bl	800b3ec <_Bfree>
 800aeb6:	9b08      	ldr	r3, [sp, #32]
 800aeb8:	1b1b      	subs	r3, r3, r4
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	f000 80b1 	beq.w	800b022 <_dtoa_r+0x8ea>
 800aec0:	9a08      	ldr	r2, [sp, #32]
 800aec2:	4641      	mov	r1, r8
 800aec4:	4648      	mov	r0, r9
 800aec6:	f000 fbfd 	bl	800b6c4 <__pow5mult>
 800aeca:	9002      	str	r0, [sp, #8]
 800aecc:	2101      	movs	r1, #1
 800aece:	4648      	mov	r0, r9
 800aed0:	f000 fb40 	bl	800b554 <__i2b>
 800aed4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aed6:	4604      	mov	r4, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 81d8 	beq.w	800b28e <_dtoa_r+0xb56>
 800aede:	461a      	mov	r2, r3
 800aee0:	4601      	mov	r1, r0
 800aee2:	4648      	mov	r0, r9
 800aee4:	f000 fbee 	bl	800b6c4 <__pow5mult>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	4604      	mov	r4, r0
 800aeee:	f300 809f 	bgt.w	800b030 <_dtoa_r+0x8f8>
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f040 8097 	bne.w	800b028 <_dtoa_r+0x8f0>
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 8093 	bne.w	800b02c <_dtoa_r+0x8f4>
 800af06:	9b05      	ldr	r3, [sp, #20]
 800af08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af0c:	0d1b      	lsrs	r3, r3, #20
 800af0e:	051b      	lsls	r3, r3, #20
 800af10:	b133      	cbz	r3, 800af20 <_dtoa_r+0x7e8>
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	3301      	adds	r3, #1
 800af1c:	9306      	str	r3, [sp, #24]
 800af1e:	2301      	movs	r3, #1
 800af20:	9308      	str	r3, [sp, #32]
 800af22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 81b8 	beq.w	800b29a <_dtoa_r+0xb62>
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af30:	6918      	ldr	r0, [r3, #16]
 800af32:	f000 fac3 	bl	800b4bc <__hi0bits>
 800af36:	f1c0 0020 	rsb	r0, r0, #32
 800af3a:	9b06      	ldr	r3, [sp, #24]
 800af3c:	4418      	add	r0, r3
 800af3e:	f010 001f 	ands.w	r0, r0, #31
 800af42:	f000 8082 	beq.w	800b04a <_dtoa_r+0x912>
 800af46:	f1c0 0320 	rsb	r3, r0, #32
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	dd73      	ble.n	800b036 <_dtoa_r+0x8fe>
 800af4e:	9b00      	ldr	r3, [sp, #0]
 800af50:	f1c0 001c 	rsb	r0, r0, #28
 800af54:	4403      	add	r3, r0
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	4403      	add	r3, r0
 800af5c:	4406      	add	r6, r0
 800af5e:	9306      	str	r3, [sp, #24]
 800af60:	9b00      	ldr	r3, [sp, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	dd05      	ble.n	800af72 <_dtoa_r+0x83a>
 800af66:	9902      	ldr	r1, [sp, #8]
 800af68:	461a      	mov	r2, r3
 800af6a:	4648      	mov	r0, r9
 800af6c:	f000 fc04 	bl	800b778 <__lshift>
 800af70:	9002      	str	r0, [sp, #8]
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd05      	ble.n	800af84 <_dtoa_r+0x84c>
 800af78:	4621      	mov	r1, r4
 800af7a:	461a      	mov	r2, r3
 800af7c:	4648      	mov	r0, r9
 800af7e:	f000 fbfb 	bl	800b778 <__lshift>
 800af82:	4604      	mov	r4, r0
 800af84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af86:	2b00      	cmp	r3, #0
 800af88:	d061      	beq.n	800b04e <_dtoa_r+0x916>
 800af8a:	9802      	ldr	r0, [sp, #8]
 800af8c:	4621      	mov	r1, r4
 800af8e:	f000 fc5f 	bl	800b850 <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	da5b      	bge.n	800b04e <_dtoa_r+0x916>
 800af96:	2300      	movs	r3, #0
 800af98:	9902      	ldr	r1, [sp, #8]
 800af9a:	220a      	movs	r2, #10
 800af9c:	4648      	mov	r0, r9
 800af9e:	f000 fa47 	bl	800b430 <__multadd>
 800afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f107 38ff 	add.w	r8, r7, #4294967295
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8177 	beq.w	800b29e <_dtoa_r+0xb66>
 800afb0:	4629      	mov	r1, r5
 800afb2:	2300      	movs	r3, #0
 800afb4:	220a      	movs	r2, #10
 800afb6:	4648      	mov	r0, r9
 800afb8:	f000 fa3a 	bl	800b430 <__multadd>
 800afbc:	f1bb 0f00 	cmp.w	fp, #0
 800afc0:	4605      	mov	r5, r0
 800afc2:	dc6f      	bgt.n	800b0a4 <_dtoa_r+0x96c>
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	dc49      	bgt.n	800b05e <_dtoa_r+0x926>
 800afca:	e06b      	b.n	800b0a4 <_dtoa_r+0x96c>
 800afcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afd2:	e73c      	b.n	800ae4e <_dtoa_r+0x716>
 800afd4:	3fe00000 	.word	0x3fe00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	1e5c      	subs	r4, r3, #1
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	db09      	blt.n	800affa <_dtoa_r+0x8c2>
 800afe6:	1b1c      	subs	r4, r3, r4
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f6bf af30 	bge.w	800ae50 <_dtoa_r+0x718>
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	9a03      	ldr	r2, [sp, #12]
 800aff4:	1a9e      	subs	r6, r3, r2
 800aff6:	2300      	movs	r3, #0
 800aff8:	e72b      	b.n	800ae52 <_dtoa_r+0x71a>
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800affe:	9408      	str	r4, [sp, #32]
 800b000:	1ae3      	subs	r3, r4, r3
 800b002:	441a      	add	r2, r3
 800b004:	9e00      	ldr	r6, [sp, #0]
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	920d      	str	r2, [sp, #52]	@ 0x34
 800b00a:	2400      	movs	r4, #0
 800b00c:	e721      	b.n	800ae52 <_dtoa_r+0x71a>
 800b00e:	9c08      	ldr	r4, [sp, #32]
 800b010:	9e00      	ldr	r6, [sp, #0]
 800b012:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b014:	e728      	b.n	800ae68 <_dtoa_r+0x730>
 800b016:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b01a:	e751      	b.n	800aec0 <_dtoa_r+0x788>
 800b01c:	9a08      	ldr	r2, [sp, #32]
 800b01e:	9902      	ldr	r1, [sp, #8]
 800b020:	e750      	b.n	800aec4 <_dtoa_r+0x78c>
 800b022:	f8cd 8008 	str.w	r8, [sp, #8]
 800b026:	e751      	b.n	800aecc <_dtoa_r+0x794>
 800b028:	2300      	movs	r3, #0
 800b02a:	e779      	b.n	800af20 <_dtoa_r+0x7e8>
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	e777      	b.n	800af20 <_dtoa_r+0x7e8>
 800b030:	2300      	movs	r3, #0
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	e779      	b.n	800af2a <_dtoa_r+0x7f2>
 800b036:	d093      	beq.n	800af60 <_dtoa_r+0x828>
 800b038:	9a00      	ldr	r2, [sp, #0]
 800b03a:	331c      	adds	r3, #28
 800b03c:	441a      	add	r2, r3
 800b03e:	9200      	str	r2, [sp, #0]
 800b040:	9a06      	ldr	r2, [sp, #24]
 800b042:	441a      	add	r2, r3
 800b044:	441e      	add	r6, r3
 800b046:	9206      	str	r2, [sp, #24]
 800b048:	e78a      	b.n	800af60 <_dtoa_r+0x828>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e7f4      	b.n	800b038 <_dtoa_r+0x900>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	46b8      	mov	r8, r7
 800b054:	dc20      	bgt.n	800b098 <_dtoa_r+0x960>
 800b056:	469b      	mov	fp, r3
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	dd1e      	ble.n	800b09c <_dtoa_r+0x964>
 800b05e:	f1bb 0f00 	cmp.w	fp, #0
 800b062:	f47f adb1 	bne.w	800abc8 <_dtoa_r+0x490>
 800b066:	4621      	mov	r1, r4
 800b068:	465b      	mov	r3, fp
 800b06a:	2205      	movs	r2, #5
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 f9df 	bl	800b430 <__multadd>
 800b072:	4601      	mov	r1, r0
 800b074:	4604      	mov	r4, r0
 800b076:	9802      	ldr	r0, [sp, #8]
 800b078:	f000 fbea 	bl	800b850 <__mcmp>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f77f ada3 	ble.w	800abc8 <_dtoa_r+0x490>
 800b082:	4656      	mov	r6, sl
 800b084:	2331      	movs	r3, #49	@ 0x31
 800b086:	f806 3b01 	strb.w	r3, [r6], #1
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	e59f      	b.n	800abd0 <_dtoa_r+0x498>
 800b090:	9c03      	ldr	r4, [sp, #12]
 800b092:	46b8      	mov	r8, r7
 800b094:	4625      	mov	r5, r4
 800b096:	e7f4      	b.n	800b082 <_dtoa_r+0x94a>
 800b098:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8101 	beq.w	800b2a6 <_dtoa_r+0xb6e>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	dd05      	ble.n	800b0b4 <_dtoa_r+0x97c>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	4648      	mov	r0, r9
 800b0ae:	f000 fb63 	bl	800b778 <__lshift>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d05c      	beq.n	800b174 <_dtoa_r+0xa3c>
 800b0ba:	6869      	ldr	r1, [r5, #4]
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f000 f955 	bl	800b36c <_Balloc>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	b928      	cbnz	r0, 800b0d2 <_dtoa_r+0x99a>
 800b0c6:	4b82      	ldr	r3, [pc, #520]	@ (800b2d0 <_dtoa_r+0xb98>)
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0ce:	f7ff bb4a 	b.w	800a766 <_dtoa_r+0x2e>
 800b0d2:	692a      	ldr	r2, [r5, #16]
 800b0d4:	3202      	adds	r2, #2
 800b0d6:	0092      	lsls	r2, r2, #2
 800b0d8:	f105 010c 	add.w	r1, r5, #12
 800b0dc:	300c      	adds	r0, #12
 800b0de:	f000 ff85 	bl	800bfec <memcpy>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4648      	mov	r0, r9
 800b0e8:	f000 fb46 	bl	800b778 <__lshift>
 800b0ec:	f10a 0301 	add.w	r3, sl, #1
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	eb0a 030b 	add.w	r3, sl, fp
 800b0f6:	9308      	str	r3, [sp, #32]
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	462f      	mov	r7, r5
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	4605      	mov	r5, r0
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	9802      	ldr	r0, [sp, #8]
 800b108:	4621      	mov	r1, r4
 800b10a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b10e:	f7ff fa8b 	bl	800a628 <quorem>
 800b112:	4603      	mov	r3, r0
 800b114:	3330      	adds	r3, #48	@ 0x30
 800b116:	9003      	str	r0, [sp, #12]
 800b118:	4639      	mov	r1, r7
 800b11a:	9802      	ldr	r0, [sp, #8]
 800b11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b11e:	f000 fb97 	bl	800b850 <__mcmp>
 800b122:	462a      	mov	r2, r5
 800b124:	9004      	str	r0, [sp, #16]
 800b126:	4621      	mov	r1, r4
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fbad 	bl	800b888 <__mdiff>
 800b12e:	68c2      	ldr	r2, [r0, #12]
 800b130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b132:	4606      	mov	r6, r0
 800b134:	bb02      	cbnz	r2, 800b178 <_dtoa_r+0xa40>
 800b136:	4601      	mov	r1, r0
 800b138:	9802      	ldr	r0, [sp, #8]
 800b13a:	f000 fb89 	bl	800b850 <__mcmp>
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	4602      	mov	r2, r0
 800b142:	4631      	mov	r1, r6
 800b144:	4648      	mov	r0, r9
 800b146:	920c      	str	r2, [sp, #48]	@ 0x30
 800b148:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14a:	f000 f94f 	bl	800b3ec <_Bfree>
 800b14e:	9b07      	ldr	r3, [sp, #28]
 800b150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b152:	9e00      	ldr	r6, [sp, #0]
 800b154:	ea42 0103 	orr.w	r1, r2, r3
 800b158:	9b06      	ldr	r3, [sp, #24]
 800b15a:	4319      	orrs	r1, r3
 800b15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15e:	d10d      	bne.n	800b17c <_dtoa_r+0xa44>
 800b160:	2b39      	cmp	r3, #57	@ 0x39
 800b162:	d027      	beq.n	800b1b4 <_dtoa_r+0xa7c>
 800b164:	9a04      	ldr	r2, [sp, #16]
 800b166:	2a00      	cmp	r2, #0
 800b168:	dd01      	ble.n	800b16e <_dtoa_r+0xa36>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3331      	adds	r3, #49	@ 0x31
 800b16e:	f88b 3000 	strb.w	r3, [fp]
 800b172:	e52e      	b.n	800abd2 <_dtoa_r+0x49a>
 800b174:	4628      	mov	r0, r5
 800b176:	e7b9      	b.n	800b0ec <_dtoa_r+0x9b4>
 800b178:	2201      	movs	r2, #1
 800b17a:	e7e2      	b.n	800b142 <_dtoa_r+0xa0a>
 800b17c:	9904      	ldr	r1, [sp, #16]
 800b17e:	2900      	cmp	r1, #0
 800b180:	db04      	blt.n	800b18c <_dtoa_r+0xa54>
 800b182:	9807      	ldr	r0, [sp, #28]
 800b184:	4301      	orrs	r1, r0
 800b186:	9806      	ldr	r0, [sp, #24]
 800b188:	4301      	orrs	r1, r0
 800b18a:	d120      	bne.n	800b1ce <_dtoa_r+0xa96>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	ddee      	ble.n	800b16e <_dtoa_r+0xa36>
 800b190:	9902      	ldr	r1, [sp, #8]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2201      	movs	r2, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f000 faee 	bl	800b778 <__lshift>
 800b19c:	4621      	mov	r1, r4
 800b19e:	9002      	str	r0, [sp, #8]
 800b1a0:	f000 fb56 	bl	800b850 <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	dc02      	bgt.n	800b1b0 <_dtoa_r+0xa78>
 800b1aa:	d1e0      	bne.n	800b16e <_dtoa_r+0xa36>
 800b1ac:	07da      	lsls	r2, r3, #31
 800b1ae:	d5de      	bpl.n	800b16e <_dtoa_r+0xa36>
 800b1b0:	2b39      	cmp	r3, #57	@ 0x39
 800b1b2:	d1da      	bne.n	800b16a <_dtoa_r+0xa32>
 800b1b4:	2339      	movs	r3, #57	@ 0x39
 800b1b6:	f88b 3000 	strb.w	r3, [fp]
 800b1ba:	4633      	mov	r3, r6
 800b1bc:	461e      	mov	r6, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1c4:	2a39      	cmp	r2, #57	@ 0x39
 800b1c6:	d04e      	beq.n	800b266 <_dtoa_r+0xb2e>
 800b1c8:	3201      	adds	r2, #1
 800b1ca:	701a      	strb	r2, [r3, #0]
 800b1cc:	e501      	b.n	800abd2 <_dtoa_r+0x49a>
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	dd03      	ble.n	800b1da <_dtoa_r+0xaa2>
 800b1d2:	2b39      	cmp	r3, #57	@ 0x39
 800b1d4:	d0ee      	beq.n	800b1b4 <_dtoa_r+0xa7c>
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	e7c9      	b.n	800b16e <_dtoa_r+0xa36>
 800b1da:	9a00      	ldr	r2, [sp, #0]
 800b1dc:	9908      	ldr	r1, [sp, #32]
 800b1de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1e2:	428a      	cmp	r2, r1
 800b1e4:	d028      	beq.n	800b238 <_dtoa_r+0xb00>
 800b1e6:	9902      	ldr	r1, [sp, #8]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	220a      	movs	r2, #10
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f000 f91f 	bl	800b430 <__multadd>
 800b1f2:	42af      	cmp	r7, r5
 800b1f4:	9002      	str	r0, [sp, #8]
 800b1f6:	f04f 0300 	mov.w	r3, #0
 800b1fa:	f04f 020a 	mov.w	r2, #10
 800b1fe:	4639      	mov	r1, r7
 800b200:	4648      	mov	r0, r9
 800b202:	d107      	bne.n	800b214 <_dtoa_r+0xadc>
 800b204:	f000 f914 	bl	800b430 <__multadd>
 800b208:	4607      	mov	r7, r0
 800b20a:	4605      	mov	r5, r0
 800b20c:	9b00      	ldr	r3, [sp, #0]
 800b20e:	3301      	adds	r3, #1
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	e777      	b.n	800b104 <_dtoa_r+0x9cc>
 800b214:	f000 f90c 	bl	800b430 <__multadd>
 800b218:	4629      	mov	r1, r5
 800b21a:	4607      	mov	r7, r0
 800b21c:	2300      	movs	r3, #0
 800b21e:	220a      	movs	r2, #10
 800b220:	4648      	mov	r0, r9
 800b222:	f000 f905 	bl	800b430 <__multadd>
 800b226:	4605      	mov	r5, r0
 800b228:	e7f0      	b.n	800b20c <_dtoa_r+0xad4>
 800b22a:	f1bb 0f00 	cmp.w	fp, #0
 800b22e:	bfcc      	ite	gt
 800b230:	465e      	movgt	r6, fp
 800b232:	2601      	movle	r6, #1
 800b234:	4456      	add	r6, sl
 800b236:	2700      	movs	r7, #0
 800b238:	9902      	ldr	r1, [sp, #8]
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2201      	movs	r2, #1
 800b23e:	4648      	mov	r0, r9
 800b240:	f000 fa9a 	bl	800b778 <__lshift>
 800b244:	4621      	mov	r1, r4
 800b246:	9002      	str	r0, [sp, #8]
 800b248:	f000 fb02 	bl	800b850 <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dcb4      	bgt.n	800b1ba <_dtoa_r+0xa82>
 800b250:	d102      	bne.n	800b258 <_dtoa_r+0xb20>
 800b252:	9b00      	ldr	r3, [sp, #0]
 800b254:	07db      	lsls	r3, r3, #31
 800b256:	d4b0      	bmi.n	800b1ba <_dtoa_r+0xa82>
 800b258:	4633      	mov	r3, r6
 800b25a:	461e      	mov	r6, r3
 800b25c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b260:	2a30      	cmp	r2, #48	@ 0x30
 800b262:	d0fa      	beq.n	800b25a <_dtoa_r+0xb22>
 800b264:	e4b5      	b.n	800abd2 <_dtoa_r+0x49a>
 800b266:	459a      	cmp	sl, r3
 800b268:	d1a8      	bne.n	800b1bc <_dtoa_r+0xa84>
 800b26a:	2331      	movs	r3, #49	@ 0x31
 800b26c:	f108 0801 	add.w	r8, r8, #1
 800b270:	f88a 3000 	strb.w	r3, [sl]
 800b274:	e4ad      	b.n	800abd2 <_dtoa_r+0x49a>
 800b276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b278:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b2d4 <_dtoa_r+0xb9c>
 800b27c:	b11b      	cbz	r3, 800b286 <_dtoa_r+0xb4e>
 800b27e:	f10a 0308 	add.w	r3, sl, #8
 800b282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	4650      	mov	r0, sl
 800b288:	b017      	add	sp, #92	@ 0x5c
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	2b01      	cmp	r3, #1
 800b292:	f77f ae2e 	ble.w	800aef2 <_dtoa_r+0x7ba>
 800b296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b298:	9308      	str	r3, [sp, #32]
 800b29a:	2001      	movs	r0, #1
 800b29c:	e64d      	b.n	800af3a <_dtoa_r+0x802>
 800b29e:	f1bb 0f00 	cmp.w	fp, #0
 800b2a2:	f77f aed9 	ble.w	800b058 <_dtoa_r+0x920>
 800b2a6:	4656      	mov	r6, sl
 800b2a8:	9802      	ldr	r0, [sp, #8]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	f7ff f9bc 	bl	800a628 <quorem>
 800b2b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b2b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b2b8:	eba6 020a 	sub.w	r2, r6, sl
 800b2bc:	4593      	cmp	fp, r2
 800b2be:	ddb4      	ble.n	800b22a <_dtoa_r+0xaf2>
 800b2c0:	9902      	ldr	r1, [sp, #8]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	220a      	movs	r2, #10
 800b2c6:	4648      	mov	r0, r9
 800b2c8:	f000 f8b2 	bl	800b430 <__multadd>
 800b2cc:	9002      	str	r0, [sp, #8]
 800b2ce:	e7eb      	b.n	800b2a8 <_dtoa_r+0xb70>
 800b2d0:	0800c360 	.word	0x0800c360
 800b2d4:	0800c2e4 	.word	0x0800c2e4

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d041      	beq.n	800b364 <_free_r+0x8c>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f7fe fb7a 	bl	80099e4 <__malloc_lock>
 800b2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b368 <_free_r+0x90>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x2c>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f7fe bb76 	b.w	80099f0 <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x1e>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x4c>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x42>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1850      	adds	r0, r2, r1
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x6c>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	4401      	add	r1, r0
 800b330:	1850      	adds	r0, r2, r1
 800b332:	4283      	cmp	r3, r0
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x22>
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	4408      	add	r0, r1
 800b340:	6010      	str	r0, [r2, #0]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x22>
 800b344:	d902      	bls.n	800b34c <_free_r+0x74>
 800b346:	230c      	movs	r3, #12
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x22>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1809      	addeq	r1, r1, r0
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7ca      	b.n	800b2fa <_free_r+0x22>
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	20001efc 	.word	0x20001efc

0800b36c <_Balloc>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	69c6      	ldr	r6, [r0, #28]
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	b976      	cbnz	r6, 800b394 <_Balloc+0x28>
 800b376:	2010      	movs	r0, #16
 800b378:	f7fe fa8a 	bl	8009890 <malloc>
 800b37c:	4602      	mov	r2, r0
 800b37e:	61e0      	str	r0, [r4, #28]
 800b380:	b920      	cbnz	r0, 800b38c <_Balloc+0x20>
 800b382:	4b18      	ldr	r3, [pc, #96]	@ (800b3e4 <_Balloc+0x78>)
 800b384:	4818      	ldr	r0, [pc, #96]	@ (800b3e8 <_Balloc+0x7c>)
 800b386:	216b      	movs	r1, #107	@ 0x6b
 800b388:	f7fe fa64 	bl	8009854 <__assert_func>
 800b38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b390:	6006      	str	r6, [r0, #0]
 800b392:	60c6      	str	r6, [r0, #12]
 800b394:	69e6      	ldr	r6, [r4, #28]
 800b396:	68f3      	ldr	r3, [r6, #12]
 800b398:	b183      	cbz	r3, 800b3bc <_Balloc+0x50>
 800b39a:	69e3      	ldr	r3, [r4, #28]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3a2:	b9b8      	cbnz	r0, 800b3d4 <_Balloc+0x68>
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b3aa:	1d72      	adds	r2, r6, #5
 800b3ac:	0092      	lsls	r2, r2, #2
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 fe2a 	bl	800c008 <_calloc_r>
 800b3b4:	b160      	cbz	r0, 800b3d0 <_Balloc+0x64>
 800b3b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3ba:	e00e      	b.n	800b3da <_Balloc+0x6e>
 800b3bc:	2221      	movs	r2, #33	@ 0x21
 800b3be:	2104      	movs	r1, #4
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fe21 	bl	800c008 <_calloc_r>
 800b3c6:	69e3      	ldr	r3, [r4, #28]
 800b3c8:	60f0      	str	r0, [r6, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e4      	bne.n	800b39a <_Balloc+0x2e>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	6802      	ldr	r2, [r0, #0]
 800b3d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3e0:	e7f7      	b.n	800b3d2 <_Balloc+0x66>
 800b3e2:	bf00      	nop
 800b3e4:	0800c2f1 	.word	0x0800c2f1
 800b3e8:	0800c371 	.word	0x0800c371

0800b3ec <_Bfree>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	69c6      	ldr	r6, [r0, #28]
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	b976      	cbnz	r6, 800b414 <_Bfree+0x28>
 800b3f6:	2010      	movs	r0, #16
 800b3f8:	f7fe fa4a 	bl	8009890 <malloc>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	61e8      	str	r0, [r5, #28]
 800b400:	b920      	cbnz	r0, 800b40c <_Bfree+0x20>
 800b402:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <_Bfree+0x3c>)
 800b404:	4809      	ldr	r0, [pc, #36]	@ (800b42c <_Bfree+0x40>)
 800b406:	218f      	movs	r1, #143	@ 0x8f
 800b408:	f7fe fa24 	bl	8009854 <__assert_func>
 800b40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b410:	6006      	str	r6, [r0, #0]
 800b412:	60c6      	str	r6, [r0, #12]
 800b414:	b13c      	cbz	r4, 800b426 <_Bfree+0x3a>
 800b416:	69eb      	ldr	r3, [r5, #28]
 800b418:	6862      	ldr	r2, [r4, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b420:	6021      	str	r1, [r4, #0]
 800b422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	0800c2f1 	.word	0x0800c2f1
 800b42c:	0800c371 	.word	0x0800c371

0800b430 <__multadd>:
 800b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b434:	690d      	ldr	r5, [r1, #16]
 800b436:	4607      	mov	r7, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	461e      	mov	r6, r3
 800b43c:	f101 0c14 	add.w	ip, r1, #20
 800b440:	2000      	movs	r0, #0
 800b442:	f8dc 3000 	ldr.w	r3, [ip]
 800b446:	b299      	uxth	r1, r3
 800b448:	fb02 6101 	mla	r1, r2, r1, r6
 800b44c:	0c1e      	lsrs	r6, r3, #16
 800b44e:	0c0b      	lsrs	r3, r1, #16
 800b450:	fb02 3306 	mla	r3, r2, r6, r3
 800b454:	b289      	uxth	r1, r1
 800b456:	3001      	adds	r0, #1
 800b458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b45c:	4285      	cmp	r5, r0
 800b45e:	f84c 1b04 	str.w	r1, [ip], #4
 800b462:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b466:	dcec      	bgt.n	800b442 <__multadd+0x12>
 800b468:	b30e      	cbz	r6, 800b4ae <__multadd+0x7e>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	42ab      	cmp	r3, r5
 800b46e:	dc19      	bgt.n	800b4a4 <__multadd+0x74>
 800b470:	6861      	ldr	r1, [r4, #4]
 800b472:	4638      	mov	r0, r7
 800b474:	3101      	adds	r1, #1
 800b476:	f7ff ff79 	bl	800b36c <_Balloc>
 800b47a:	4680      	mov	r8, r0
 800b47c:	b928      	cbnz	r0, 800b48a <__multadd+0x5a>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <__multadd+0x84>)
 800b482:	480d      	ldr	r0, [pc, #52]	@ (800b4b8 <__multadd+0x88>)
 800b484:	21ba      	movs	r1, #186	@ 0xba
 800b486:	f7fe f9e5 	bl	8009854 <__assert_func>
 800b48a:	6922      	ldr	r2, [r4, #16]
 800b48c:	3202      	adds	r2, #2
 800b48e:	f104 010c 	add.w	r1, r4, #12
 800b492:	0092      	lsls	r2, r2, #2
 800b494:	300c      	adds	r0, #12
 800b496:	f000 fda9 	bl	800bfec <memcpy>
 800b49a:	4621      	mov	r1, r4
 800b49c:	4638      	mov	r0, r7
 800b49e:	f7ff ffa5 	bl	800b3ec <_Bfree>
 800b4a2:	4644      	mov	r4, r8
 800b4a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	615e      	str	r6, [r3, #20]
 800b4ac:	6125      	str	r5, [r4, #16]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	0800c360 	.word	0x0800c360
 800b4b8:	0800c371 	.word	0x0800c371

0800b4bc <__hi0bits>:
 800b4bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	bf36      	itet	cc
 800b4c4:	0403      	lslcc	r3, r0, #16
 800b4c6:	2000      	movcs	r0, #0
 800b4c8:	2010      	movcc	r0, #16
 800b4ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4ce:	bf3c      	itt	cc
 800b4d0:	021b      	lslcc	r3, r3, #8
 800b4d2:	3008      	addcc	r0, #8
 800b4d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4d8:	bf3c      	itt	cc
 800b4da:	011b      	lslcc	r3, r3, #4
 800b4dc:	3004      	addcc	r0, #4
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e2:	bf3c      	itt	cc
 800b4e4:	009b      	lslcc	r3, r3, #2
 800b4e6:	3002      	addcc	r0, #2
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	db05      	blt.n	800b4f8 <__hi0bits+0x3c>
 800b4ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4f0:	f100 0001 	add.w	r0, r0, #1
 800b4f4:	bf08      	it	eq
 800b4f6:	2020      	moveq	r0, #32
 800b4f8:	4770      	bx	lr

0800b4fa <__lo0bits>:
 800b4fa:	6803      	ldr	r3, [r0, #0]
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	f013 0007 	ands.w	r0, r3, #7
 800b502:	d00b      	beq.n	800b51c <__lo0bits+0x22>
 800b504:	07d9      	lsls	r1, r3, #31
 800b506:	d421      	bmi.n	800b54c <__lo0bits+0x52>
 800b508:	0798      	lsls	r0, r3, #30
 800b50a:	bf49      	itett	mi
 800b50c:	085b      	lsrmi	r3, r3, #1
 800b50e:	089b      	lsrpl	r3, r3, #2
 800b510:	2001      	movmi	r0, #1
 800b512:	6013      	strmi	r3, [r2, #0]
 800b514:	bf5c      	itt	pl
 800b516:	6013      	strpl	r3, [r2, #0]
 800b518:	2002      	movpl	r0, #2
 800b51a:	4770      	bx	lr
 800b51c:	b299      	uxth	r1, r3
 800b51e:	b909      	cbnz	r1, 800b524 <__lo0bits+0x2a>
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	2010      	movs	r0, #16
 800b524:	b2d9      	uxtb	r1, r3
 800b526:	b909      	cbnz	r1, 800b52c <__lo0bits+0x32>
 800b528:	3008      	adds	r0, #8
 800b52a:	0a1b      	lsrs	r3, r3, #8
 800b52c:	0719      	lsls	r1, r3, #28
 800b52e:	bf04      	itt	eq
 800b530:	091b      	lsreq	r3, r3, #4
 800b532:	3004      	addeq	r0, #4
 800b534:	0799      	lsls	r1, r3, #30
 800b536:	bf04      	itt	eq
 800b538:	089b      	lsreq	r3, r3, #2
 800b53a:	3002      	addeq	r0, #2
 800b53c:	07d9      	lsls	r1, r3, #31
 800b53e:	d403      	bmi.n	800b548 <__lo0bits+0x4e>
 800b540:	085b      	lsrs	r3, r3, #1
 800b542:	f100 0001 	add.w	r0, r0, #1
 800b546:	d003      	beq.n	800b550 <__lo0bits+0x56>
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4770      	bx	lr
 800b54c:	2000      	movs	r0, #0
 800b54e:	4770      	bx	lr
 800b550:	2020      	movs	r0, #32
 800b552:	4770      	bx	lr

0800b554 <__i2b>:
 800b554:	b510      	push	{r4, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	2101      	movs	r1, #1
 800b55a:	f7ff ff07 	bl	800b36c <_Balloc>
 800b55e:	4602      	mov	r2, r0
 800b560:	b928      	cbnz	r0, 800b56e <__i2b+0x1a>
 800b562:	4b05      	ldr	r3, [pc, #20]	@ (800b578 <__i2b+0x24>)
 800b564:	4805      	ldr	r0, [pc, #20]	@ (800b57c <__i2b+0x28>)
 800b566:	f240 1145 	movw	r1, #325	@ 0x145
 800b56a:	f7fe f973 	bl	8009854 <__assert_func>
 800b56e:	2301      	movs	r3, #1
 800b570:	6144      	str	r4, [r0, #20]
 800b572:	6103      	str	r3, [r0, #16]
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800c360 	.word	0x0800c360
 800b57c:	0800c371 	.word	0x0800c371

0800b580 <__multiply>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	4617      	mov	r7, r2
 800b586:	690a      	ldr	r2, [r1, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	bfa8      	it	ge
 800b58e:	463b      	movge	r3, r7
 800b590:	4689      	mov	r9, r1
 800b592:	bfa4      	itt	ge
 800b594:	460f      	movge	r7, r1
 800b596:	4699      	movge	r9, r3
 800b598:	693d      	ldr	r5, [r7, #16]
 800b59a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	eb05 060a 	add.w	r6, r5, sl
 800b5a6:	42b3      	cmp	r3, r6
 800b5a8:	b085      	sub	sp, #20
 800b5aa:	bfb8      	it	lt
 800b5ac:	3101      	addlt	r1, #1
 800b5ae:	f7ff fedd 	bl	800b36c <_Balloc>
 800b5b2:	b930      	cbnz	r0, 800b5c2 <__multiply+0x42>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	4b41      	ldr	r3, [pc, #260]	@ (800b6bc <__multiply+0x13c>)
 800b5b8:	4841      	ldr	r0, [pc, #260]	@ (800b6c0 <__multiply+0x140>)
 800b5ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5be:	f7fe f949 	bl	8009854 <__assert_func>
 800b5c2:	f100 0414 	add.w	r4, r0, #20
 800b5c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5ca:	4623      	mov	r3, r4
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4573      	cmp	r3, lr
 800b5d0:	d320      	bcc.n	800b614 <__multiply+0x94>
 800b5d2:	f107 0814 	add.w	r8, r7, #20
 800b5d6:	f109 0114 	add.w	r1, r9, #20
 800b5da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b5de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5e2:	9302      	str	r3, [sp, #8]
 800b5e4:	1beb      	subs	r3, r5, r7
 800b5e6:	3b15      	subs	r3, #21
 800b5e8:	f023 0303 	bic.w	r3, r3, #3
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	3715      	adds	r7, #21
 800b5f0:	42bd      	cmp	r5, r7
 800b5f2:	bf38      	it	cc
 800b5f4:	2304      	movcc	r3, #4
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	9103      	str	r1, [sp, #12]
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	d80c      	bhi.n	800b61a <__multiply+0x9a>
 800b600:	2e00      	cmp	r6, #0
 800b602:	dd03      	ble.n	800b60c <__multiply+0x8c>
 800b604:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d055      	beq.n	800b6b8 <__multiply+0x138>
 800b60c:	6106      	str	r6, [r0, #16]
 800b60e:	b005      	add	sp, #20
 800b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b614:	f843 2b04 	str.w	r2, [r3], #4
 800b618:	e7d9      	b.n	800b5ce <__multiply+0x4e>
 800b61a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b61e:	f1ba 0f00 	cmp.w	sl, #0
 800b622:	d01f      	beq.n	800b664 <__multiply+0xe4>
 800b624:	46c4      	mov	ip, r8
 800b626:	46a1      	mov	r9, r4
 800b628:	2700      	movs	r7, #0
 800b62a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b62e:	f8d9 3000 	ldr.w	r3, [r9]
 800b632:	fa1f fb82 	uxth.w	fp, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	fb0a 330b 	mla	r3, sl, fp, r3
 800b63c:	443b      	add	r3, r7
 800b63e:	f8d9 7000 	ldr.w	r7, [r9]
 800b642:	0c12      	lsrs	r2, r2, #16
 800b644:	0c3f      	lsrs	r7, r7, #16
 800b646:	fb0a 7202 	mla	r2, sl, r2, r7
 800b64a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b64e:	b29b      	uxth	r3, r3
 800b650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b654:	4565      	cmp	r5, ip
 800b656:	f849 3b04 	str.w	r3, [r9], #4
 800b65a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b65e:	d8e4      	bhi.n	800b62a <__multiply+0xaa>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	50e7      	str	r7, [r4, r3]
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b66a:	3104      	adds	r1, #4
 800b66c:	f1b9 0f00 	cmp.w	r9, #0
 800b670:	d020      	beq.n	800b6b4 <__multiply+0x134>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	4647      	mov	r7, r8
 800b676:	46a4      	mov	ip, r4
 800b678:	f04f 0a00 	mov.w	sl, #0
 800b67c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b680:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b684:	fb09 220b 	mla	r2, r9, fp, r2
 800b688:	4452      	add	r2, sl
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b690:	f84c 3b04 	str.w	r3, [ip], #4
 800b694:	f857 3b04 	ldr.w	r3, [r7], #4
 800b698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b69c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b6a0:	fb09 330a 	mla	r3, r9, sl, r3
 800b6a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b6a8:	42bd      	cmp	r5, r7
 800b6aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6ae:	d8e5      	bhi.n	800b67c <__multiply+0xfc>
 800b6b0:	9a01      	ldr	r2, [sp, #4]
 800b6b2:	50a3      	str	r3, [r4, r2]
 800b6b4:	3404      	adds	r4, #4
 800b6b6:	e79f      	b.n	800b5f8 <__multiply+0x78>
 800b6b8:	3e01      	subs	r6, #1
 800b6ba:	e7a1      	b.n	800b600 <__multiply+0x80>
 800b6bc:	0800c360 	.word	0x0800c360
 800b6c0:	0800c371 	.word	0x0800c371

0800b6c4 <__pow5mult>:
 800b6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	4615      	mov	r5, r2
 800b6ca:	f012 0203 	ands.w	r2, r2, #3
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	460e      	mov	r6, r1
 800b6d2:	d007      	beq.n	800b6e4 <__pow5mult+0x20>
 800b6d4:	4c25      	ldr	r4, [pc, #148]	@ (800b76c <__pow5mult+0xa8>)
 800b6d6:	3a01      	subs	r2, #1
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6de:	f7ff fea7 	bl	800b430 <__multadd>
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	10ad      	asrs	r5, r5, #2
 800b6e6:	d03d      	beq.n	800b764 <__pow5mult+0xa0>
 800b6e8:	69fc      	ldr	r4, [r7, #28]
 800b6ea:	b97c      	cbnz	r4, 800b70c <__pow5mult+0x48>
 800b6ec:	2010      	movs	r0, #16
 800b6ee:	f7fe f8cf 	bl	8009890 <malloc>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	61f8      	str	r0, [r7, #28]
 800b6f6:	b928      	cbnz	r0, 800b704 <__pow5mult+0x40>
 800b6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <__pow5mult+0xac>)
 800b6fa:	481e      	ldr	r0, [pc, #120]	@ (800b774 <__pow5mult+0xb0>)
 800b6fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b700:	f7fe f8a8 	bl	8009854 <__assert_func>
 800b704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b708:	6004      	str	r4, [r0, #0]
 800b70a:	60c4      	str	r4, [r0, #12]
 800b70c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b714:	b94c      	cbnz	r4, 800b72a <__pow5mult+0x66>
 800b716:	f240 2171 	movw	r1, #625	@ 0x271
 800b71a:	4638      	mov	r0, r7
 800b71c:	f7ff ff1a 	bl	800b554 <__i2b>
 800b720:	2300      	movs	r3, #0
 800b722:	f8c8 0008 	str.w	r0, [r8, #8]
 800b726:	4604      	mov	r4, r0
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	f04f 0900 	mov.w	r9, #0
 800b72e:	07eb      	lsls	r3, r5, #31
 800b730:	d50a      	bpl.n	800b748 <__pow5mult+0x84>
 800b732:	4631      	mov	r1, r6
 800b734:	4622      	mov	r2, r4
 800b736:	4638      	mov	r0, r7
 800b738:	f7ff ff22 	bl	800b580 <__multiply>
 800b73c:	4631      	mov	r1, r6
 800b73e:	4680      	mov	r8, r0
 800b740:	4638      	mov	r0, r7
 800b742:	f7ff fe53 	bl	800b3ec <_Bfree>
 800b746:	4646      	mov	r6, r8
 800b748:	106d      	asrs	r5, r5, #1
 800b74a:	d00b      	beq.n	800b764 <__pow5mult+0xa0>
 800b74c:	6820      	ldr	r0, [r4, #0]
 800b74e:	b938      	cbnz	r0, 800b760 <__pow5mult+0x9c>
 800b750:	4622      	mov	r2, r4
 800b752:	4621      	mov	r1, r4
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff ff13 	bl	800b580 <__multiply>
 800b75a:	6020      	str	r0, [r4, #0]
 800b75c:	f8c0 9000 	str.w	r9, [r0]
 800b760:	4604      	mov	r4, r0
 800b762:	e7e4      	b.n	800b72e <__pow5mult+0x6a>
 800b764:	4630      	mov	r0, r6
 800b766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76a:	bf00      	nop
 800b76c:	0800c3e8 	.word	0x0800c3e8
 800b770:	0800c2f1 	.word	0x0800c2f1
 800b774:	0800c371 	.word	0x0800c371

0800b778 <__lshift>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	460c      	mov	r4, r1
 800b77e:	6849      	ldr	r1, [r1, #4]
 800b780:	6923      	ldr	r3, [r4, #16]
 800b782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	4607      	mov	r7, r0
 800b78a:	4691      	mov	r9, r2
 800b78c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b790:	f108 0601 	add.w	r6, r8, #1
 800b794:	42b3      	cmp	r3, r6
 800b796:	db0b      	blt.n	800b7b0 <__lshift+0x38>
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff fde7 	bl	800b36c <_Balloc>
 800b79e:	4605      	mov	r5, r0
 800b7a0:	b948      	cbnz	r0, 800b7b6 <__lshift+0x3e>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	4b28      	ldr	r3, [pc, #160]	@ (800b848 <__lshift+0xd0>)
 800b7a6:	4829      	ldr	r0, [pc, #164]	@ (800b84c <__lshift+0xd4>)
 800b7a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7ac:	f7fe f852 	bl	8009854 <__assert_func>
 800b7b0:	3101      	adds	r1, #1
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	e7ee      	b.n	800b794 <__lshift+0x1c>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f100 0114 	add.w	r1, r0, #20
 800b7bc:	f100 0210 	add.w	r2, r0, #16
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	4553      	cmp	r3, sl
 800b7c4:	db33      	blt.n	800b82e <__lshift+0xb6>
 800b7c6:	6920      	ldr	r0, [r4, #16]
 800b7c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7cc:	f104 0314 	add.w	r3, r4, #20
 800b7d0:	f019 091f 	ands.w	r9, r9, #31
 800b7d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7dc:	d02b      	beq.n	800b836 <__lshift+0xbe>
 800b7de:	f1c9 0e20 	rsb	lr, r9, #32
 800b7e2:	468a      	mov	sl, r1
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b7ec:	4310      	orrs	r0, r2
 800b7ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f6:	459c      	cmp	ip, r3
 800b7f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7fc:	d8f3      	bhi.n	800b7e6 <__lshift+0x6e>
 800b7fe:	ebac 0304 	sub.w	r3, ip, r4
 800b802:	3b15      	subs	r3, #21
 800b804:	f023 0303 	bic.w	r3, r3, #3
 800b808:	3304      	adds	r3, #4
 800b80a:	f104 0015 	add.w	r0, r4, #21
 800b80e:	4560      	cmp	r0, ip
 800b810:	bf88      	it	hi
 800b812:	2304      	movhi	r3, #4
 800b814:	50ca      	str	r2, [r1, r3]
 800b816:	b10a      	cbz	r2, 800b81c <__lshift+0xa4>
 800b818:	f108 0602 	add.w	r6, r8, #2
 800b81c:	3e01      	subs	r6, #1
 800b81e:	4638      	mov	r0, r7
 800b820:	612e      	str	r6, [r5, #16]
 800b822:	4621      	mov	r1, r4
 800b824:	f7ff fde2 	bl	800b3ec <_Bfree>
 800b828:	4628      	mov	r0, r5
 800b82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b832:	3301      	adds	r3, #1
 800b834:	e7c5      	b.n	800b7c2 <__lshift+0x4a>
 800b836:	3904      	subs	r1, #4
 800b838:	f853 2b04 	ldr.w	r2, [r3], #4
 800b83c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b840:	459c      	cmp	ip, r3
 800b842:	d8f9      	bhi.n	800b838 <__lshift+0xc0>
 800b844:	e7ea      	b.n	800b81c <__lshift+0xa4>
 800b846:	bf00      	nop
 800b848:	0800c360 	.word	0x0800c360
 800b84c:	0800c371 	.word	0x0800c371

0800b850 <__mcmp>:
 800b850:	690a      	ldr	r2, [r1, #16]
 800b852:	4603      	mov	r3, r0
 800b854:	6900      	ldr	r0, [r0, #16]
 800b856:	1a80      	subs	r0, r0, r2
 800b858:	b530      	push	{r4, r5, lr}
 800b85a:	d10e      	bne.n	800b87a <__mcmp+0x2a>
 800b85c:	3314      	adds	r3, #20
 800b85e:	3114      	adds	r1, #20
 800b860:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b864:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b86c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b870:	4295      	cmp	r5, r2
 800b872:	d003      	beq.n	800b87c <__mcmp+0x2c>
 800b874:	d205      	bcs.n	800b882 <__mcmp+0x32>
 800b876:	f04f 30ff 	mov.w	r0, #4294967295
 800b87a:	bd30      	pop	{r4, r5, pc}
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	d3f3      	bcc.n	800b868 <__mcmp+0x18>
 800b880:	e7fb      	b.n	800b87a <__mcmp+0x2a>
 800b882:	2001      	movs	r0, #1
 800b884:	e7f9      	b.n	800b87a <__mcmp+0x2a>
	...

0800b888 <__mdiff>:
 800b888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	4689      	mov	r9, r1
 800b88e:	4606      	mov	r6, r0
 800b890:	4611      	mov	r1, r2
 800b892:	4648      	mov	r0, r9
 800b894:	4614      	mov	r4, r2
 800b896:	f7ff ffdb 	bl	800b850 <__mcmp>
 800b89a:	1e05      	subs	r5, r0, #0
 800b89c:	d112      	bne.n	800b8c4 <__mdiff+0x3c>
 800b89e:	4629      	mov	r1, r5
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7ff fd63 	bl	800b36c <_Balloc>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	b928      	cbnz	r0, 800b8b6 <__mdiff+0x2e>
 800b8aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b9a8 <__mdiff+0x120>)
 800b8ac:	f240 2137 	movw	r1, #567	@ 0x237
 800b8b0:	483e      	ldr	r0, [pc, #248]	@ (800b9ac <__mdiff+0x124>)
 800b8b2:	f7fd ffcf 	bl	8009854 <__assert_func>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8bc:	4610      	mov	r0, r2
 800b8be:	b003      	add	sp, #12
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c4:	bfbc      	itt	lt
 800b8c6:	464b      	movlt	r3, r9
 800b8c8:	46a1      	movlt	r9, r4
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8d0:	bfba      	itte	lt
 800b8d2:	461c      	movlt	r4, r3
 800b8d4:	2501      	movlt	r5, #1
 800b8d6:	2500      	movge	r5, #0
 800b8d8:	f7ff fd48 	bl	800b36c <_Balloc>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	b918      	cbnz	r0, 800b8e8 <__mdiff+0x60>
 800b8e0:	4b31      	ldr	r3, [pc, #196]	@ (800b9a8 <__mdiff+0x120>)
 800b8e2:	f240 2145 	movw	r1, #581	@ 0x245
 800b8e6:	e7e3      	b.n	800b8b0 <__mdiff+0x28>
 800b8e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8ec:	6926      	ldr	r6, [r4, #16]
 800b8ee:	60c5      	str	r5, [r0, #12]
 800b8f0:	f109 0310 	add.w	r3, r9, #16
 800b8f4:	f109 0514 	add.w	r5, r9, #20
 800b8f8:	f104 0e14 	add.w	lr, r4, #20
 800b8fc:	f100 0b14 	add.w	fp, r0, #20
 800b900:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b904:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b908:	9301      	str	r3, [sp, #4]
 800b90a:	46d9      	mov	r9, fp
 800b90c:	f04f 0c00 	mov.w	ip, #0
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b916:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	fa1f f38a 	uxth.w	r3, sl
 800b920:	4619      	mov	r1, r3
 800b922:	b283      	uxth	r3, r0
 800b924:	1acb      	subs	r3, r1, r3
 800b926:	0c00      	lsrs	r0, r0, #16
 800b928:	4463      	add	r3, ip
 800b92a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b92e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b932:	b29b      	uxth	r3, r3
 800b934:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b938:	4576      	cmp	r6, lr
 800b93a:	f849 3b04 	str.w	r3, [r9], #4
 800b93e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b942:	d8e5      	bhi.n	800b910 <__mdiff+0x88>
 800b944:	1b33      	subs	r3, r6, r4
 800b946:	3b15      	subs	r3, #21
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	3415      	adds	r4, #21
 800b94e:	3304      	adds	r3, #4
 800b950:	42a6      	cmp	r6, r4
 800b952:	bf38      	it	cc
 800b954:	2304      	movcc	r3, #4
 800b956:	441d      	add	r5, r3
 800b958:	445b      	add	r3, fp
 800b95a:	461e      	mov	r6, r3
 800b95c:	462c      	mov	r4, r5
 800b95e:	4544      	cmp	r4, r8
 800b960:	d30e      	bcc.n	800b980 <__mdiff+0xf8>
 800b962:	f108 0103 	add.w	r1, r8, #3
 800b966:	1b49      	subs	r1, r1, r5
 800b968:	f021 0103 	bic.w	r1, r1, #3
 800b96c:	3d03      	subs	r5, #3
 800b96e:	45a8      	cmp	r8, r5
 800b970:	bf38      	it	cc
 800b972:	2100      	movcc	r1, #0
 800b974:	440b      	add	r3, r1
 800b976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b97a:	b191      	cbz	r1, 800b9a2 <__mdiff+0x11a>
 800b97c:	6117      	str	r7, [r2, #16]
 800b97e:	e79d      	b.n	800b8bc <__mdiff+0x34>
 800b980:	f854 1b04 	ldr.w	r1, [r4], #4
 800b984:	46e6      	mov	lr, ip
 800b986:	0c08      	lsrs	r0, r1, #16
 800b988:	fa1c fc81 	uxtah	ip, ip, r1
 800b98c:	4471      	add	r1, lr
 800b98e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b992:	b289      	uxth	r1, r1
 800b994:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b998:	f846 1b04 	str.w	r1, [r6], #4
 800b99c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9a0:	e7dd      	b.n	800b95e <__mdiff+0xd6>
 800b9a2:	3f01      	subs	r7, #1
 800b9a4:	e7e7      	b.n	800b976 <__mdiff+0xee>
 800b9a6:	bf00      	nop
 800b9a8:	0800c360 	.word	0x0800c360
 800b9ac:	0800c371 	.word	0x0800c371

0800b9b0 <__d2b>:
 800b9b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	ec59 8b10 	vmov	r8, r9, d0
 800b9bc:	4616      	mov	r6, r2
 800b9be:	f7ff fcd5 	bl	800b36c <_Balloc>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	b930      	cbnz	r0, 800b9d4 <__d2b+0x24>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	4b23      	ldr	r3, [pc, #140]	@ (800ba58 <__d2b+0xa8>)
 800b9ca:	4824      	ldr	r0, [pc, #144]	@ (800ba5c <__d2b+0xac>)
 800b9cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9d0:	f7fd ff40 	bl	8009854 <__assert_func>
 800b9d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9dc:	b10d      	cbz	r5, 800b9e2 <__d2b+0x32>
 800b9de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b9e8:	d023      	beq.n	800ba32 <__d2b+0x82>
 800b9ea:	4668      	mov	r0, sp
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	f7ff fd84 	bl	800b4fa <__lo0bits>
 800b9f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9f6:	b1d0      	cbz	r0, 800ba2e <__d2b+0x7e>
 800b9f8:	f1c0 0320 	rsb	r3, r0, #32
 800b9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ba00:	430b      	orrs	r3, r1
 800ba02:	40c2      	lsrs	r2, r0
 800ba04:	6163      	str	r3, [r4, #20]
 800ba06:	9201      	str	r2, [sp, #4]
 800ba08:	9b01      	ldr	r3, [sp, #4]
 800ba0a:	61a3      	str	r3, [r4, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bf0c      	ite	eq
 800ba10:	2201      	moveq	r2, #1
 800ba12:	2202      	movne	r2, #2
 800ba14:	6122      	str	r2, [r4, #16]
 800ba16:	b1a5      	cbz	r5, 800ba42 <__d2b+0x92>
 800ba18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba1c:	4405      	add	r5, r0
 800ba1e:	603d      	str	r5, [r7, #0]
 800ba20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba24:	6030      	str	r0, [r6, #0]
 800ba26:	4620      	mov	r0, r4
 800ba28:	b003      	add	sp, #12
 800ba2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba2e:	6161      	str	r1, [r4, #20]
 800ba30:	e7ea      	b.n	800ba08 <__d2b+0x58>
 800ba32:	a801      	add	r0, sp, #4
 800ba34:	f7ff fd61 	bl	800b4fa <__lo0bits>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	6163      	str	r3, [r4, #20]
 800ba3c:	3020      	adds	r0, #32
 800ba3e:	2201      	movs	r2, #1
 800ba40:	e7e8      	b.n	800ba14 <__d2b+0x64>
 800ba42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba4a:	6038      	str	r0, [r7, #0]
 800ba4c:	6918      	ldr	r0, [r3, #16]
 800ba4e:	f7ff fd35 	bl	800b4bc <__hi0bits>
 800ba52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba56:	e7e5      	b.n	800ba24 <__d2b+0x74>
 800ba58:	0800c360 	.word	0x0800c360
 800ba5c:	0800c371 	.word	0x0800c371

0800ba60 <__sfputc_r>:
 800ba60:	6893      	ldr	r3, [r2, #8]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	b410      	push	{r4}
 800ba68:	6093      	str	r3, [r2, #8]
 800ba6a:	da08      	bge.n	800ba7e <__sfputc_r+0x1e>
 800ba6c:	6994      	ldr	r4, [r2, #24]
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	db01      	blt.n	800ba76 <__sfputc_r+0x16>
 800ba72:	290a      	cmp	r1, #10
 800ba74:	d103      	bne.n	800ba7e <__sfputc_r+0x1e>
 800ba76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7a:	f000 b9df 	b.w	800be3c <__swbuf_r>
 800ba7e:	6813      	ldr	r3, [r2, #0]
 800ba80:	1c58      	adds	r0, r3, #1
 800ba82:	6010      	str	r0, [r2, #0]
 800ba84:	7019      	strb	r1, [r3, #0]
 800ba86:	4608      	mov	r0, r1
 800ba88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <__sfputs_r>:
 800ba8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba90:	4606      	mov	r6, r0
 800ba92:	460f      	mov	r7, r1
 800ba94:	4614      	mov	r4, r2
 800ba96:	18d5      	adds	r5, r2, r3
 800ba98:	42ac      	cmp	r4, r5
 800ba9a:	d101      	bne.n	800baa0 <__sfputs_r+0x12>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e007      	b.n	800bab0 <__sfputs_r+0x22>
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	463a      	mov	r2, r7
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff ffda 	bl	800ba60 <__sfputc_r>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d1f3      	bne.n	800ba98 <__sfputs_r+0xa>
 800bab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bab4 <_vfiprintf_r>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	460d      	mov	r5, r1
 800baba:	b09d      	sub	sp, #116	@ 0x74
 800babc:	4614      	mov	r4, r2
 800babe:	4698      	mov	r8, r3
 800bac0:	4606      	mov	r6, r0
 800bac2:	b118      	cbz	r0, 800bacc <_vfiprintf_r+0x18>
 800bac4:	6a03      	ldr	r3, [r0, #32]
 800bac6:	b90b      	cbnz	r3, 800bacc <_vfiprintf_r+0x18>
 800bac8:	f7fe fc7a 	bl	800a3c0 <__sinit>
 800bacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bace:	07d9      	lsls	r1, r3, #31
 800bad0:	d405      	bmi.n	800bade <_vfiprintf_r+0x2a>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	059a      	lsls	r2, r3, #22
 800bad6:	d402      	bmi.n	800bade <_vfiprintf_r+0x2a>
 800bad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bada:	f7fe fd9c 	bl	800a616 <__retarget_lock_acquire_recursive>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	071b      	lsls	r3, r3, #28
 800bae2:	d501      	bpl.n	800bae8 <_vfiprintf_r+0x34>
 800bae4:	692b      	ldr	r3, [r5, #16]
 800bae6:	b99b      	cbnz	r3, 800bb10 <_vfiprintf_r+0x5c>
 800bae8:	4629      	mov	r1, r5
 800baea:	4630      	mov	r0, r6
 800baec:	f000 f9e4 	bl	800beb8 <__swsetup_r>
 800baf0:	b170      	cbz	r0, 800bb10 <_vfiprintf_r+0x5c>
 800baf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baf4:	07dc      	lsls	r4, r3, #31
 800baf6:	d504      	bpl.n	800bb02 <_vfiprintf_r+0x4e>
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	b01d      	add	sp, #116	@ 0x74
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	0598      	lsls	r0, r3, #22
 800bb06:	d4f7      	bmi.n	800baf8 <_vfiprintf_r+0x44>
 800bb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0a:	f7fe fd85 	bl	800a618 <__retarget_lock_release_recursive>
 800bb0e:	e7f3      	b.n	800baf8 <_vfiprintf_r+0x44>
 800bb10:	2300      	movs	r3, #0
 800bb12:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb14:	2320      	movs	r3, #32
 800bb16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb1e:	2330      	movs	r3, #48	@ 0x30
 800bb20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcd0 <_vfiprintf_r+0x21c>
 800bb24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb28:	f04f 0901 	mov.w	r9, #1
 800bb2c:	4623      	mov	r3, r4
 800bb2e:	469a      	mov	sl, r3
 800bb30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb34:	b10a      	cbz	r2, 800bb3a <_vfiprintf_r+0x86>
 800bb36:	2a25      	cmp	r2, #37	@ 0x25
 800bb38:	d1f9      	bne.n	800bb2e <_vfiprintf_r+0x7a>
 800bb3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb3e:	d00b      	beq.n	800bb58 <_vfiprintf_r+0xa4>
 800bb40:	465b      	mov	r3, fp
 800bb42:	4622      	mov	r2, r4
 800bb44:	4629      	mov	r1, r5
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ffa1 	bl	800ba8e <__sfputs_r>
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	f000 80a7 	beq.w	800bca0 <_vfiprintf_r+0x1ec>
 800bb52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb54:	445a      	add	r2, fp
 800bb56:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb58:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 809f 	beq.w	800bca0 <_vfiprintf_r+0x1ec>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f04f 32ff 	mov.w	r2, #4294967295
 800bb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb6c:	f10a 0a01 	add.w	sl, sl, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb78:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb7a:	4654      	mov	r4, sl
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4853      	ldr	r0, [pc, #332]	@ (800bcd0 <_vfiprintf_r+0x21c>)
 800bb84:	f7f4 fb24 	bl	80001d0 <memchr>
 800bb88:	9a04      	ldr	r2, [sp, #16]
 800bb8a:	b9d8      	cbnz	r0, 800bbc4 <_vfiprintf_r+0x110>
 800bb8c:	06d1      	lsls	r1, r2, #27
 800bb8e:	bf44      	itt	mi
 800bb90:	2320      	movmi	r3, #32
 800bb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb96:	0713      	lsls	r3, r2, #28
 800bb98:	bf44      	itt	mi
 800bb9a:	232b      	movmi	r3, #43	@ 0x2b
 800bb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bba0:	f89a 3000 	ldrb.w	r3, [sl]
 800bba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bba6:	d015      	beq.n	800bbd4 <_vfiprintf_r+0x120>
 800bba8:	9a07      	ldr	r2, [sp, #28]
 800bbaa:	4654      	mov	r4, sl
 800bbac:	2000      	movs	r0, #0
 800bbae:	f04f 0c0a 	mov.w	ip, #10
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb8:	3b30      	subs	r3, #48	@ 0x30
 800bbba:	2b09      	cmp	r3, #9
 800bbbc:	d94b      	bls.n	800bc56 <_vfiprintf_r+0x1a2>
 800bbbe:	b1b0      	cbz	r0, 800bbee <_vfiprintf_r+0x13a>
 800bbc0:	9207      	str	r2, [sp, #28]
 800bbc2:	e014      	b.n	800bbee <_vfiprintf_r+0x13a>
 800bbc4:	eba0 0308 	sub.w	r3, r0, r8
 800bbc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	46a2      	mov	sl, r4
 800bbd2:	e7d2      	b.n	800bb7a <_vfiprintf_r+0xc6>
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	1d19      	adds	r1, r3, #4
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	9103      	str	r1, [sp, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfbb      	ittet	lt
 800bbe0:	425b      	neglt	r3, r3
 800bbe2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbe6:	9307      	strge	r3, [sp, #28]
 800bbe8:	9307      	strlt	r3, [sp, #28]
 800bbea:	bfb8      	it	lt
 800bbec:	9204      	strlt	r2, [sp, #16]
 800bbee:	7823      	ldrb	r3, [r4, #0]
 800bbf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbf2:	d10a      	bne.n	800bc0a <_vfiprintf_r+0x156>
 800bbf4:	7863      	ldrb	r3, [r4, #1]
 800bbf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbf8:	d132      	bne.n	800bc60 <_vfiprintf_r+0x1ac>
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	1d1a      	adds	r2, r3, #4
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	9203      	str	r2, [sp, #12]
 800bc02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc06:	3402      	adds	r4, #2
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bce0 <_vfiprintf_r+0x22c>
 800bc0e:	7821      	ldrb	r1, [r4, #0]
 800bc10:	2203      	movs	r2, #3
 800bc12:	4650      	mov	r0, sl
 800bc14:	f7f4 fadc 	bl	80001d0 <memchr>
 800bc18:	b138      	cbz	r0, 800bc2a <_vfiprintf_r+0x176>
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	eba0 000a 	sub.w	r0, r0, sl
 800bc20:	2240      	movs	r2, #64	@ 0x40
 800bc22:	4082      	lsls	r2, r0
 800bc24:	4313      	orrs	r3, r2
 800bc26:	3401      	adds	r4, #1
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2e:	4829      	ldr	r0, [pc, #164]	@ (800bcd4 <_vfiprintf_r+0x220>)
 800bc30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc34:	2206      	movs	r2, #6
 800bc36:	f7f4 facb 	bl	80001d0 <memchr>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d03f      	beq.n	800bcbe <_vfiprintf_r+0x20a>
 800bc3e:	4b26      	ldr	r3, [pc, #152]	@ (800bcd8 <_vfiprintf_r+0x224>)
 800bc40:	bb1b      	cbnz	r3, 800bc8a <_vfiprintf_r+0x1d6>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	3307      	adds	r3, #7
 800bc46:	f023 0307 	bic.w	r3, r3, #7
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	9303      	str	r3, [sp, #12]
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	443b      	add	r3, r7
 800bc52:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc54:	e76a      	b.n	800bb2c <_vfiprintf_r+0x78>
 800bc56:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	e7a8      	b.n	800bbb2 <_vfiprintf_r+0xfe>
 800bc60:	2300      	movs	r3, #0
 800bc62:	3401      	adds	r4, #1
 800bc64:	9305      	str	r3, [sp, #20]
 800bc66:	4619      	mov	r1, r3
 800bc68:	f04f 0c0a 	mov.w	ip, #10
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc72:	3a30      	subs	r2, #48	@ 0x30
 800bc74:	2a09      	cmp	r2, #9
 800bc76:	d903      	bls.n	800bc80 <_vfiprintf_r+0x1cc>
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0c6      	beq.n	800bc0a <_vfiprintf_r+0x156>
 800bc7c:	9105      	str	r1, [sp, #20]
 800bc7e:	e7c4      	b.n	800bc0a <_vfiprintf_r+0x156>
 800bc80:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc84:	4604      	mov	r4, r0
 800bc86:	2301      	movs	r3, #1
 800bc88:	e7f0      	b.n	800bc6c <_vfiprintf_r+0x1b8>
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4b12      	ldr	r3, [pc, #72]	@ (800bcdc <_vfiprintf_r+0x228>)
 800bc92:	a904      	add	r1, sp, #16
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7fd ff51 	bl	8009b3c <_printf_float>
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	1c78      	adds	r0, r7, #1
 800bc9e:	d1d6      	bne.n	800bc4e <_vfiprintf_r+0x19a>
 800bca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bca2:	07d9      	lsls	r1, r3, #31
 800bca4:	d405      	bmi.n	800bcb2 <_vfiprintf_r+0x1fe>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	059a      	lsls	r2, r3, #22
 800bcaa:	d402      	bmi.n	800bcb2 <_vfiprintf_r+0x1fe>
 800bcac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcae:	f7fe fcb3 	bl	800a618 <__retarget_lock_release_recursive>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	065b      	lsls	r3, r3, #25
 800bcb6:	f53f af1f 	bmi.w	800baf8 <_vfiprintf_r+0x44>
 800bcba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcbc:	e71e      	b.n	800bafc <_vfiprintf_r+0x48>
 800bcbe:	ab03      	add	r3, sp, #12
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <_vfiprintf_r+0x228>)
 800bcc6:	a904      	add	r1, sp, #16
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7fe f9cf 	bl	800a06c <_printf_i>
 800bcce:	e7e4      	b.n	800bc9a <_vfiprintf_r+0x1e6>
 800bcd0:	0800c3ca 	.word	0x0800c3ca
 800bcd4:	0800c3d4 	.word	0x0800c3d4
 800bcd8:	08009b3d 	.word	0x08009b3d
 800bcdc:	0800ba8f 	.word	0x0800ba8f
 800bce0:	0800c3d0 	.word	0x0800c3d0

0800bce4 <__sflush_r>:
 800bce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcec:	0716      	lsls	r6, r2, #28
 800bcee:	4605      	mov	r5, r0
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	d454      	bmi.n	800bd9e <__sflush_r+0xba>
 800bcf4:	684b      	ldr	r3, [r1, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	dc02      	bgt.n	800bd00 <__sflush_r+0x1c>
 800bcfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd48      	ble.n	800bd92 <__sflush_r+0xae>
 800bd00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd02:	2e00      	cmp	r6, #0
 800bd04:	d045      	beq.n	800bd92 <__sflush_r+0xae>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd0c:	682f      	ldr	r7, [r5, #0]
 800bd0e:	6a21      	ldr	r1, [r4, #32]
 800bd10:	602b      	str	r3, [r5, #0]
 800bd12:	d030      	beq.n	800bd76 <__sflush_r+0x92>
 800bd14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	0759      	lsls	r1, r3, #29
 800bd1a:	d505      	bpl.n	800bd28 <__sflush_r+0x44>
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd22:	b10b      	cbz	r3, 800bd28 <__sflush_r+0x44>
 800bd24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd26:	1ad2      	subs	r2, r2, r3
 800bd28:	2300      	movs	r3, #0
 800bd2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd2c:	6a21      	ldr	r1, [r4, #32]
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b0      	blx	r6
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	d106      	bne.n	800bd46 <__sflush_r+0x62>
 800bd38:	6829      	ldr	r1, [r5, #0]
 800bd3a:	291d      	cmp	r1, #29
 800bd3c:	d82b      	bhi.n	800bd96 <__sflush_r+0xb2>
 800bd3e:	4a2a      	ldr	r2, [pc, #168]	@ (800bde8 <__sflush_r+0x104>)
 800bd40:	40ca      	lsrs	r2, r1
 800bd42:	07d6      	lsls	r6, r2, #31
 800bd44:	d527      	bpl.n	800bd96 <__sflush_r+0xb2>
 800bd46:	2200      	movs	r2, #0
 800bd48:	6062      	str	r2, [r4, #4]
 800bd4a:	04d9      	lsls	r1, r3, #19
 800bd4c:	6922      	ldr	r2, [r4, #16]
 800bd4e:	6022      	str	r2, [r4, #0]
 800bd50:	d504      	bpl.n	800bd5c <__sflush_r+0x78>
 800bd52:	1c42      	adds	r2, r0, #1
 800bd54:	d101      	bne.n	800bd5a <__sflush_r+0x76>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	b903      	cbnz	r3, 800bd5c <__sflush_r+0x78>
 800bd5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd5e:	602f      	str	r7, [r5, #0]
 800bd60:	b1b9      	cbz	r1, 800bd92 <__sflush_r+0xae>
 800bd62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d002      	beq.n	800bd70 <__sflush_r+0x8c>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f7ff fab4 	bl	800b2d8 <_free_r>
 800bd70:	2300      	movs	r3, #0
 800bd72:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd74:	e00d      	b.n	800bd92 <__sflush_r+0xae>
 800bd76:	2301      	movs	r3, #1
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b0      	blx	r6
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	1c50      	adds	r0, r2, #1
 800bd80:	d1c9      	bne.n	800bd16 <__sflush_r+0x32>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d0c6      	beq.n	800bd16 <__sflush_r+0x32>
 800bd88:	2b1d      	cmp	r3, #29
 800bd8a:	d001      	beq.n	800bd90 <__sflush_r+0xac>
 800bd8c:	2b16      	cmp	r3, #22
 800bd8e:	d11e      	bne.n	800bdce <__sflush_r+0xea>
 800bd90:	602f      	str	r7, [r5, #0]
 800bd92:	2000      	movs	r0, #0
 800bd94:	e022      	b.n	800bddc <__sflush_r+0xf8>
 800bd96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9a:	b21b      	sxth	r3, r3
 800bd9c:	e01b      	b.n	800bdd6 <__sflush_r+0xf2>
 800bd9e:	690f      	ldr	r7, [r1, #16]
 800bda0:	2f00      	cmp	r7, #0
 800bda2:	d0f6      	beq.n	800bd92 <__sflush_r+0xae>
 800bda4:	0793      	lsls	r3, r2, #30
 800bda6:	680e      	ldr	r6, [r1, #0]
 800bda8:	bf08      	it	eq
 800bdaa:	694b      	ldreq	r3, [r1, #20]
 800bdac:	600f      	str	r7, [r1, #0]
 800bdae:	bf18      	it	ne
 800bdb0:	2300      	movne	r3, #0
 800bdb2:	eba6 0807 	sub.w	r8, r6, r7
 800bdb6:	608b      	str	r3, [r1, #8]
 800bdb8:	f1b8 0f00 	cmp.w	r8, #0
 800bdbc:	dde9      	ble.n	800bd92 <__sflush_r+0xae>
 800bdbe:	6a21      	ldr	r1, [r4, #32]
 800bdc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdc2:	4643      	mov	r3, r8
 800bdc4:	463a      	mov	r2, r7
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	47b0      	blx	r6
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	dc08      	bgt.n	800bde0 <__sflush_r+0xfc>
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd6:	81a3      	strh	r3, [r4, #12]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde0:	4407      	add	r7, r0
 800bde2:	eba8 0800 	sub.w	r8, r8, r0
 800bde6:	e7e7      	b.n	800bdb8 <__sflush_r+0xd4>
 800bde8:	20400001 	.word	0x20400001

0800bdec <_fflush_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	690b      	ldr	r3, [r1, #16]
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b913      	cbnz	r3, 800bdfc <_fflush_r+0x10>
 800bdf6:	2500      	movs	r5, #0
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	b118      	cbz	r0, 800be06 <_fflush_r+0x1a>
 800bdfe:	6a03      	ldr	r3, [r0, #32]
 800be00:	b90b      	cbnz	r3, 800be06 <_fflush_r+0x1a>
 800be02:	f7fe fadd 	bl	800a3c0 <__sinit>
 800be06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0f3      	beq.n	800bdf6 <_fflush_r+0xa>
 800be0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be10:	07d0      	lsls	r0, r2, #31
 800be12:	d404      	bmi.n	800be1e <_fflush_r+0x32>
 800be14:	0599      	lsls	r1, r3, #22
 800be16:	d402      	bmi.n	800be1e <_fflush_r+0x32>
 800be18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be1a:	f7fe fbfc 	bl	800a616 <__retarget_lock_acquire_recursive>
 800be1e:	4628      	mov	r0, r5
 800be20:	4621      	mov	r1, r4
 800be22:	f7ff ff5f 	bl	800bce4 <__sflush_r>
 800be26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be28:	07da      	lsls	r2, r3, #31
 800be2a:	4605      	mov	r5, r0
 800be2c:	d4e4      	bmi.n	800bdf8 <_fflush_r+0xc>
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	059b      	lsls	r3, r3, #22
 800be32:	d4e1      	bmi.n	800bdf8 <_fflush_r+0xc>
 800be34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be36:	f7fe fbef 	bl	800a618 <__retarget_lock_release_recursive>
 800be3a:	e7dd      	b.n	800bdf8 <_fflush_r+0xc>

0800be3c <__swbuf_r>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	460e      	mov	r6, r1
 800be40:	4614      	mov	r4, r2
 800be42:	4605      	mov	r5, r0
 800be44:	b118      	cbz	r0, 800be4e <__swbuf_r+0x12>
 800be46:	6a03      	ldr	r3, [r0, #32]
 800be48:	b90b      	cbnz	r3, 800be4e <__swbuf_r+0x12>
 800be4a:	f7fe fab9 	bl	800a3c0 <__sinit>
 800be4e:	69a3      	ldr	r3, [r4, #24]
 800be50:	60a3      	str	r3, [r4, #8]
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	071a      	lsls	r2, r3, #28
 800be56:	d501      	bpl.n	800be5c <__swbuf_r+0x20>
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	b943      	cbnz	r3, 800be6e <__swbuf_r+0x32>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 f82a 	bl	800beb8 <__swsetup_r>
 800be64:	b118      	cbz	r0, 800be6e <__swbuf_r+0x32>
 800be66:	f04f 37ff 	mov.w	r7, #4294967295
 800be6a:	4638      	mov	r0, r7
 800be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	6922      	ldr	r2, [r4, #16]
 800be72:	1a98      	subs	r0, r3, r2
 800be74:	6963      	ldr	r3, [r4, #20]
 800be76:	b2f6      	uxtb	r6, r6
 800be78:	4283      	cmp	r3, r0
 800be7a:	4637      	mov	r7, r6
 800be7c:	dc05      	bgt.n	800be8a <__swbuf_r+0x4e>
 800be7e:	4621      	mov	r1, r4
 800be80:	4628      	mov	r0, r5
 800be82:	f7ff ffb3 	bl	800bdec <_fflush_r>
 800be86:	2800      	cmp	r0, #0
 800be88:	d1ed      	bne.n	800be66 <__swbuf_r+0x2a>
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	60a3      	str	r3, [r4, #8]
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	6022      	str	r2, [r4, #0]
 800be96:	701e      	strb	r6, [r3, #0]
 800be98:	6962      	ldr	r2, [r4, #20]
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d004      	beq.n	800beaa <__swbuf_r+0x6e>
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	07db      	lsls	r3, r3, #31
 800bea4:	d5e1      	bpl.n	800be6a <__swbuf_r+0x2e>
 800bea6:	2e0a      	cmp	r6, #10
 800bea8:	d1df      	bne.n	800be6a <__swbuf_r+0x2e>
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f7ff ff9d 	bl	800bdec <_fflush_r>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d0d9      	beq.n	800be6a <__swbuf_r+0x2e>
 800beb6:	e7d6      	b.n	800be66 <__swbuf_r+0x2a>

0800beb8 <__swsetup_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4b29      	ldr	r3, [pc, #164]	@ (800bf60 <__swsetup_r+0xa8>)
 800bebc:	4605      	mov	r5, r0
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	460c      	mov	r4, r1
 800bec2:	b118      	cbz	r0, 800becc <__swsetup_r+0x14>
 800bec4:	6a03      	ldr	r3, [r0, #32]
 800bec6:	b90b      	cbnz	r3, 800becc <__swsetup_r+0x14>
 800bec8:	f7fe fa7a 	bl	800a3c0 <__sinit>
 800becc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed0:	0719      	lsls	r1, r3, #28
 800bed2:	d422      	bmi.n	800bf1a <__swsetup_r+0x62>
 800bed4:	06da      	lsls	r2, r3, #27
 800bed6:	d407      	bmi.n	800bee8 <__swsetup_r+0x30>
 800bed8:	2209      	movs	r2, #9
 800beda:	602a      	str	r2, [r5, #0]
 800bedc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee0:	81a3      	strh	r3, [r4, #12]
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	e033      	b.n	800bf50 <__swsetup_r+0x98>
 800bee8:	0758      	lsls	r0, r3, #29
 800beea:	d512      	bpl.n	800bf12 <__swsetup_r+0x5a>
 800beec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beee:	b141      	cbz	r1, 800bf02 <__swsetup_r+0x4a>
 800bef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bef4:	4299      	cmp	r1, r3
 800bef6:	d002      	beq.n	800befe <__swsetup_r+0x46>
 800bef8:	4628      	mov	r0, r5
 800befa:	f7ff f9ed 	bl	800b2d8 <_free_r>
 800befe:	2300      	movs	r3, #0
 800bf00:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	f043 0308 	orr.w	r3, r3, #8
 800bf18:	81a3      	strh	r3, [r4, #12]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	b94b      	cbnz	r3, 800bf32 <__swsetup_r+0x7a>
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf28:	d003      	beq.n	800bf32 <__swsetup_r+0x7a>
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	f000 f8c4 	bl	800c0ba <__smakebuf_r>
 800bf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf36:	f013 0201 	ands.w	r2, r3, #1
 800bf3a:	d00a      	beq.n	800bf52 <__swsetup_r+0x9a>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	60a2      	str	r2, [r4, #8]
 800bf40:	6962      	ldr	r2, [r4, #20]
 800bf42:	4252      	negs	r2, r2
 800bf44:	61a2      	str	r2, [r4, #24]
 800bf46:	6922      	ldr	r2, [r4, #16]
 800bf48:	b942      	cbnz	r2, 800bf5c <__swsetup_r+0xa4>
 800bf4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf4e:	d1c5      	bne.n	800bedc <__swsetup_r+0x24>
 800bf50:	bd38      	pop	{r3, r4, r5, pc}
 800bf52:	0799      	lsls	r1, r3, #30
 800bf54:	bf58      	it	pl
 800bf56:	6962      	ldrpl	r2, [r4, #20]
 800bf58:	60a2      	str	r2, [r4, #8]
 800bf5a:	e7f4      	b.n	800bf46 <__swsetup_r+0x8e>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e7f7      	b.n	800bf50 <__swsetup_r+0x98>
 800bf60:	20000108 	.word	0x20000108

0800bf64 <_raise_r>:
 800bf64:	291f      	cmp	r1, #31
 800bf66:	b538      	push	{r3, r4, r5, lr}
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	d904      	bls.n	800bf78 <_raise_r+0x14>
 800bf6e:	2316      	movs	r3, #22
 800bf70:	6003      	str	r3, [r0, #0]
 800bf72:	f04f 30ff 	mov.w	r0, #4294967295
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf7a:	b112      	cbz	r2, 800bf82 <_raise_r+0x1e>
 800bf7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf80:	b94b      	cbnz	r3, 800bf96 <_raise_r+0x32>
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f830 	bl	800bfe8 <_getpid_r>
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf92:	f000 b817 	b.w	800bfc4 <_kill_r>
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d00a      	beq.n	800bfb0 <_raise_r+0x4c>
 800bf9a:	1c59      	adds	r1, r3, #1
 800bf9c:	d103      	bne.n	800bfa6 <_raise_r+0x42>
 800bf9e:	2316      	movs	r3, #22
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	e7e7      	b.n	800bf76 <_raise_r+0x12>
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bfac:	4620      	mov	r0, r4
 800bfae:	4798      	blx	r3
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	e7e0      	b.n	800bf76 <_raise_r+0x12>

0800bfb4 <raise>:
 800bfb4:	4b02      	ldr	r3, [pc, #8]	@ (800bfc0 <raise+0xc>)
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	f7ff bfd3 	b.w	800bf64 <_raise_r>
 800bfbe:	bf00      	nop
 800bfc0:	20000108 	.word	0x20000108

0800bfc4 <_kill_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4d07      	ldr	r5, [pc, #28]	@ (800bfe4 <_kill_r+0x20>)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4604      	mov	r4, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	4611      	mov	r1, r2
 800bfd0:	602b      	str	r3, [r5, #0]
 800bfd2:	f7f5 ffd7 	bl	8001f84 <_kill>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	d102      	bne.n	800bfe0 <_kill_r+0x1c>
 800bfda:	682b      	ldr	r3, [r5, #0]
 800bfdc:	b103      	cbz	r3, 800bfe0 <_kill_r+0x1c>
 800bfde:	6023      	str	r3, [r4, #0]
 800bfe0:	bd38      	pop	{r3, r4, r5, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000203c 	.word	0x2000203c

0800bfe8 <_getpid_r>:
 800bfe8:	f7f5 bfc4 	b.w	8001f74 <_getpid>

0800bfec <memcpy>:
 800bfec:	440a      	add	r2, r1
 800bfee:	4291      	cmp	r1, r2
 800bff0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bff4:	d100      	bne.n	800bff8 <memcpy+0xc>
 800bff6:	4770      	bx	lr
 800bff8:	b510      	push	{r4, lr}
 800bffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c002:	4291      	cmp	r1, r2
 800c004:	d1f9      	bne.n	800bffa <memcpy+0xe>
 800c006:	bd10      	pop	{r4, pc}

0800c008 <_calloc_r>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	fba1 5402 	umull	r5, r4, r1, r2
 800c00e:	b934      	cbnz	r4, 800c01e <_calloc_r+0x16>
 800c010:	4629      	mov	r1, r5
 800c012:	f7fd fc67 	bl	80098e4 <_malloc_r>
 800c016:	4606      	mov	r6, r0
 800c018:	b928      	cbnz	r0, 800c026 <_calloc_r+0x1e>
 800c01a:	4630      	mov	r0, r6
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
 800c01e:	220c      	movs	r2, #12
 800c020:	6002      	str	r2, [r0, #0]
 800c022:	2600      	movs	r6, #0
 800c024:	e7f9      	b.n	800c01a <_calloc_r+0x12>
 800c026:	462a      	mov	r2, r5
 800c028:	4621      	mov	r1, r4
 800c02a:	f7fe fa66 	bl	800a4fa <memset>
 800c02e:	e7f4      	b.n	800c01a <_calloc_r+0x12>

0800c030 <__ascii_mbtowc>:
 800c030:	b082      	sub	sp, #8
 800c032:	b901      	cbnz	r1, 800c036 <__ascii_mbtowc+0x6>
 800c034:	a901      	add	r1, sp, #4
 800c036:	b142      	cbz	r2, 800c04a <__ascii_mbtowc+0x1a>
 800c038:	b14b      	cbz	r3, 800c04e <__ascii_mbtowc+0x1e>
 800c03a:	7813      	ldrb	r3, [r2, #0]
 800c03c:	600b      	str	r3, [r1, #0]
 800c03e:	7812      	ldrb	r2, [r2, #0]
 800c040:	1e10      	subs	r0, r2, #0
 800c042:	bf18      	it	ne
 800c044:	2001      	movne	r0, #1
 800c046:	b002      	add	sp, #8
 800c048:	4770      	bx	lr
 800c04a:	4610      	mov	r0, r2
 800c04c:	e7fb      	b.n	800c046 <__ascii_mbtowc+0x16>
 800c04e:	f06f 0001 	mvn.w	r0, #1
 800c052:	e7f8      	b.n	800c046 <__ascii_mbtowc+0x16>

0800c054 <__ascii_wctomb>:
 800c054:	4603      	mov	r3, r0
 800c056:	4608      	mov	r0, r1
 800c058:	b141      	cbz	r1, 800c06c <__ascii_wctomb+0x18>
 800c05a:	2aff      	cmp	r2, #255	@ 0xff
 800c05c:	d904      	bls.n	800c068 <__ascii_wctomb+0x14>
 800c05e:	228a      	movs	r2, #138	@ 0x8a
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	4770      	bx	lr
 800c068:	700a      	strb	r2, [r1, #0]
 800c06a:	2001      	movs	r0, #1
 800c06c:	4770      	bx	lr

0800c06e <__swhatbuf_r>:
 800c06e:	b570      	push	{r4, r5, r6, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	2900      	cmp	r1, #0
 800c078:	b096      	sub	sp, #88	@ 0x58
 800c07a:	4615      	mov	r5, r2
 800c07c:	461e      	mov	r6, r3
 800c07e:	da0d      	bge.n	800c09c <__swhatbuf_r+0x2e>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c086:	f04f 0100 	mov.w	r1, #0
 800c08a:	bf14      	ite	ne
 800c08c:	2340      	movne	r3, #64	@ 0x40
 800c08e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c092:	2000      	movs	r0, #0
 800c094:	6031      	str	r1, [r6, #0]
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	b016      	add	sp, #88	@ 0x58
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	466a      	mov	r2, sp
 800c09e:	f000 f849 	bl	800c134 <_fstat_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	dbec      	blt.n	800c080 <__swhatbuf_r+0x12>
 800c0a6:	9901      	ldr	r1, [sp, #4]
 800c0a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0b0:	4259      	negs	r1, r3
 800c0b2:	4159      	adcs	r1, r3
 800c0b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0b8:	e7eb      	b.n	800c092 <__swhatbuf_r+0x24>

0800c0ba <__smakebuf_r>:
 800c0ba:	898b      	ldrh	r3, [r1, #12]
 800c0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0be:	079d      	lsls	r5, r3, #30
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	d507      	bpl.n	800c0d6 <__smakebuf_r+0x1c>
 800c0c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	6163      	str	r3, [r4, #20]
 800c0d2:	b003      	add	sp, #12
 800c0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d6:	ab01      	add	r3, sp, #4
 800c0d8:	466a      	mov	r2, sp
 800c0da:	f7ff ffc8 	bl	800c06e <__swhatbuf_r>
 800c0de:	9f00      	ldr	r7, [sp, #0]
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7fd fbfd 	bl	80098e4 <_malloc_r>
 800c0ea:	b948      	cbnz	r0, 800c100 <__smakebuf_r+0x46>
 800c0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f0:	059a      	lsls	r2, r3, #22
 800c0f2:	d4ee      	bmi.n	800c0d2 <__smakebuf_r+0x18>
 800c0f4:	f023 0303 	bic.w	r3, r3, #3
 800c0f8:	f043 0302 	orr.w	r3, r3, #2
 800c0fc:	81a3      	strh	r3, [r4, #12]
 800c0fe:	e7e2      	b.n	800c0c6 <__smakebuf_r+0xc>
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	6020      	str	r0, [r4, #0]
 800c104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c108:	81a3      	strh	r3, [r4, #12]
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c110:	b15b      	cbz	r3, 800c12a <__smakebuf_r+0x70>
 800c112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c116:	4630      	mov	r0, r6
 800c118:	f000 f81e 	bl	800c158 <_isatty_r>
 800c11c:	b128      	cbz	r0, 800c12a <__smakebuf_r+0x70>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f023 0303 	bic.w	r3, r3, #3
 800c124:	f043 0301 	orr.w	r3, r3, #1
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	431d      	orrs	r5, r3
 800c12e:	81a5      	strh	r5, [r4, #12]
 800c130:	e7cf      	b.n	800c0d2 <__smakebuf_r+0x18>
	...

0800c134 <_fstat_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4d07      	ldr	r5, [pc, #28]	@ (800c154 <_fstat_r+0x20>)
 800c138:	2300      	movs	r3, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4608      	mov	r0, r1
 800c13e:	4611      	mov	r1, r2
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	f7f5 ff63 	bl	800200c <_fstat>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	d102      	bne.n	800c150 <_fstat_r+0x1c>
 800c14a:	682b      	ldr	r3, [r5, #0]
 800c14c:	b103      	cbz	r3, 800c150 <_fstat_r+0x1c>
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	bd38      	pop	{r3, r4, r5, pc}
 800c152:	bf00      	nop
 800c154:	2000203c 	.word	0x2000203c

0800c158 <_isatty_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d06      	ldr	r5, [pc, #24]	@ (800c174 <_isatty_r+0x1c>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	602b      	str	r3, [r5, #0]
 800c164:	f7f5 ff62 	bl	800202c <_isatty>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_isatty_r+0x1a>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_isatty_r+0x1a>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	2000203c 	.word	0x2000203c

0800c178 <_init>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	bf00      	nop
 800c17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17e:	bc08      	pop	{r3}
 800c180:	469e      	mov	lr, r3
 800c182:	4770      	bx	lr

0800c184 <_fini>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	bf00      	nop
 800c188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18a:	bc08      	pop	{r3}
 800c18c:	469e      	mov	lr, r3
 800c18e:	4770      	bx	lr
