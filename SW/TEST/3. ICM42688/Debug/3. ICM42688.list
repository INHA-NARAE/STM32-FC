
3. ICM42688.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c108  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c298  0800c298  0000d298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6f4  0800c6f4  0000e2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c6f4  0800c6f4  0000d6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6fc  0800c6fc  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6fc  0800c6fc  0000d6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c700  0800c700  0000d700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c704  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001d84  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002048  20002048  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132fa  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dbc  00000000  00000000  000215ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000253b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  00026578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027461  00000000  00000000  00027297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162d6  00000000  00000000  0004e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d82b9  00000000  00000000  000649ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013cc87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005830  00000000  00000000  0013cccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001424fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c280 	.word	0x0800c280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c280 	.word	0x0800c280

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	621a      	str	r2, [r3, #32]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	621a      	str	r2, [r3, #32]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <BuzzerPlayInit>:
void BuzzerPlayNote(Note note){
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
	return;
}

void BuzzerPlayInit(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f26:	f7ff ffd5 	bl	8000ed4 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f2c:	2215      	movs	r2, #21
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	@ 0x64
 8000f44:	f001 f9f0 	bl	8002328 <HAL_Delay>
	TIM4->PSC = 1500;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f4a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f001 f9e9 	bl	8002328 <HAL_Delay>
	TIM4->PSC = 1000;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	@ 0x64
 8000f60:	f001 f9e2 	bl	8002328 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <BuzzerPlayInit+0x58>)
 8000f6a:	f7ff ffc4 	bl	8000ef6 <LL_TIM_CC_DisableChannel>
	return;
 8000f6e:	bf00      	nop
}
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40000800 	.word	0x40000800

08000f78 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f023 0210 	bic.w	r2, r3, #16
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d101      	bne.n	8000ffc <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	330c      	adds	r3, #12
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330c      	adds	r3, #12
 8001036:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	041a      	lsls	r2, r3, #16
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800

080010b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800

080010e4 <ICM42688_GPIO_SPI_Initialization>:
Struct_ICM42688 ICM42688;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	@ 0x40
 80010e8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2228      	movs	r2, #40	@ 0x28
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 fa83 	bl	800a5fe <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001108:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800110c:	f7ff ffd2 	bl	80010b4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ffb7 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001116:	2010      	movs	r0, #16
 8001118:	f7ff ffb4 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800111c:	23e0      	movs	r3, #224	@ 0xe0
 800111e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001130:	2305      	movs	r3, #5
 8001132:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4820      	ldr	r0, [pc, #128]	@ (80011bc <ICM42688_GPIO_SPI_Initialization+0xd8>)
 800113a:	f003 fbd2 	bl	80048e2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001142:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001146:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800115a:	2310      	movs	r3, #16
 800115c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001172:	f003 fd90 	bl	8004c96 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001176:	2100      	movs	r1, #0
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800117a:	f7ff ff0d 	bl	8000f98 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 800117e:	2120      	movs	r1, #32
 8001180:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 8001182:	f7ff ff70 	bl	8001066 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 8001186:	2320      	movs	r3, #32
 8001188:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80011a0:	f003 fb9f 	bl	80048e2 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80011a6:	f7ff fee7 	bl	8000f78 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80011aa:	2120      	movs	r1, #32
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80011ae:	f7ff ff4c 	bl	800104a <LL_GPIO_SetOutputPin>
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	@ 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40013000 	.word	0x40013000
 80011c4:	40021000 	.word	0x40021000

080011c8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80011d2:	bf00      	nop
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <SPI1_SendByte+0x40>)
 80011d6:	f7ff ff05 	bl	8000fe4 <LL_SPI_IsActiveFlag_TXE>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <SPI1_SendByte+0x40>)
 80011e6:	f7ff ff1e 	bl	8001026 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 80011ea:	bf00      	nop
 80011ec:	4806      	ldr	r0, [pc, #24]	@ (8001208 <SPI1_SendByte+0x40>)
 80011ee:	f7ff fee6 	bl	8000fbe <LL_SPI_IsActiveFlag_RXNE>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f9      	beq.n	80011ec <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <SPI1_SendByte+0x40>)
 80011fa:	f7ff ff06 	bl	800100a <LL_SPI_ReceiveData8>
 80011fe:	4603      	mov	r3, r0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013000 	.word	0x40013000

0800120c <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001216:	2120      	movs	r1, #32
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <ICM42688_Readbyte+0x3c>)
 800121a:	f7ff ff24 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffce 	bl	80011c8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffcb 	bl	80011c8 <SPI1_SendByte>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001236:	2120      	movs	r1, #32
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <ICM42688_Readbyte+0x3c>)
 800123a:	f7ff ff06 	bl	800104a <LL_GPIO_SetOutputPin>
	
	return val;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	603a      	str	r2, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 8001260:	2120      	movs	r1, #32
 8001262:	4810      	ldr	r0, [pc, #64]	@ (80012a4 <ICM42688_Readbytes+0x58>)
 8001264:	f7ff feff 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffa9 	bl	80011c8 <SPI1_SendByte>
	while(i < len)
 8001276:	e009      	b.n	800128c <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60fa      	str	r2, [r7, #12]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	18d4      	adds	r4, r2, r3
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ffa0 	bl	80011c8 <SPI1_SendByte>
 8001288:	4603      	mov	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f1      	bcc.n	8001278 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 8001294:	2120      	movs	r1, #32
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <ICM42688_Readbytes+0x58>)
 8001298:	f7ff fed7 	bl	800104a <LL_GPIO_SetOutputPin>
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40021000 	.word	0x40021000

080012a8 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80012b8:	2120      	movs	r1, #32
 80012ba:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <ICM42688_Writebyte+0x40>)
 80012bc:	f7ff fed3 	bl	8001066 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff7d 	bl	80011c8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff79 	bl	80011c8 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80012d6:	2120      	movs	r1, #32
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <ICM42688_Writebyte+0x40>)
 80012da:	f7ff feb6 	bl	800104a <LL_GPIO_SetOutputPin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 8001308:	f7ff feec 	bl	80010e4 <ICM42688_GPIO_SPI_Initialization>
	
	printf("Checking ICM42688...\n\r");
 800130c:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <ICM42688_Initialization+0xc8>)
 800130e:	f009 f921 	bl	800a554 <iprintf>
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 8001312:	2075      	movs	r0, #117	@ 0x75
 8001314:	f7ff ff7a 	bl	800120c <ICM42688_Readbyte>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b47      	cmp	r3, #71	@ 0x47
 8001320:	d105      	bne.n	800132e <ICM42688_Initialization+0x42>
	{
		printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	@ (80013b8 <ICM42688_Initialization+0xcc>)
 8001328:	f009 f914 	bl	800a554 <iprintf>
 800132c:	e012      	b.n	8001354 <ICM42688_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b47      	cmp	r3, #71	@ 0x47
 8001332:	d00f      	beq.n	8001354 <ICM42688_Initialization+0x68>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001334:	2075      	movs	r0, #117	@ 0x75
 8001336:	f7ff ff69 	bl	800120c <ICM42688_Readbyte>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d007      	beq.n	8001354 <ICM42688_Initialization+0x68>
			printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2212      	movs	r2, #18
 8001348:	4619      	mov	r1, r3
 800134a:	481c      	ldr	r0, [pc, #112]	@ (80013bc <ICM42688_Initialization+0xd0>)
 800134c:	f009 f902 	bl	800a554 <iprintf>
			return 1; //ERROR
 8001350:	2301      	movs	r3, #1
 8001352:	e02a      	b.n	80013aa <ICM42688_Initialization+0xbe>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001354:	210f      	movs	r1, #15
 8001356:	204e      	movs	r0, #78	@ 0x4e
 8001358:	f7ff ffa6 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800135c:	2032      	movs	r0, #50	@ 0x32
 800135e:	f000 ffe3 	bl	8002328 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001362:	2106      	movs	r1, #6
 8001364:	204f      	movs	r0, #79	@ 0x4f
 8001366:	f7ff ff9f 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800136a:	2032      	movs	r0, #50	@ 0x32
 800136c:	f000 ffdc 	bl	8002328 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 8001370:	2100      	movs	r1, #0
 8001372:	2051      	movs	r0, #81	@ 0x51
 8001374:	f7ff ff98 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f000 ffd5 	bl	8002328 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 800137e:	2106      	movs	r1, #6
 8001380:	2050      	movs	r0, #80	@ 0x50
 8001382:	f7ff ff91 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f000 ffce 	bl	8002328 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 800138c:	2100      	movs	r1, #0
 800138e:	2053      	movs	r0, #83	@ 0x53
 8001390:	f7ff ff8a 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f000 ffc7 	bl	8002328 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 800139a:	2111      	movs	r1, #17
 800139c:	2052      	movs	r0, #82	@ 0x52
 800139e:	f7ff ff83 	bl	80012a8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80013a2:	2032      	movs	r0, #50	@ 0x32
 80013a4:	f000 ffc0 	bl	8002328 <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	0800c298 	.word	0x0800c298
 80013b8:	0800c2b0 	.word	0x0800c2b0
 80013bc:	0800c2d4 	.word	0x0800c2d4

080013c0 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	unsigned char data[14];

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 80013c6:	463b      	mov	r3, r7
 80013c8:	461a      	mov	r2, r3
 80013ca:	210e      	movs	r1, #14
 80013cc:	201f      	movs	r0, #31
 80013ce:	f7ff ff3d 	bl	800124c <ICM42688_Readbytes>
	
	ICM42688.temperature_raw = (data[0] << 8) | data[1];
 80013d2:	783b      	ldrb	r3, [r7, #0]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 80013e4:	801a      	strh	r2, [r3, #0]
	ICM42688.acc_x_raw = (data[2] << 8) | data[3];
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 80013f8:	805a      	strh	r2, [r3, #2]
	ICM42688.acc_y_raw = (data[4] << 8) | data[5];
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 800140c:	809a      	strh	r2, [r3, #4]
	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	b21b      	sxth	r3, r3
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001420:	80da      	strh	r2, [r3, #6]
	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	b21b      	sxth	r3, r3
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	7a7b      	ldrb	r3, [r7, #9]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001434:	811a      	strh	r2, [r3, #8]
	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
 8001436:	7abb      	ldrb	r3, [r7, #10]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 8001448:	815a      	strh	r2, [r3, #10]
	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	b21b      	sxth	r3, r3
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <ICM42688_Get6AxisRawData+0xa8>)
 800145c:	819a      	strh	r2, [r3, #12]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002e0 	.word	0x200002e0

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_SPI_SetStandard>:
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 0210 	bic.w	r2, r3, #16
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_TIM_EnableCounter>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_TIM_DisableARRPreload>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d01c      	beq.n	800162e <LL_TIM_OC_DisableFast+0x4a>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d017      	beq.n	800162a <LL_TIM_OC_DisableFast+0x46>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d012      	beq.n	8001626 <LL_TIM_OC_DisableFast+0x42>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b40      	cmp	r3, #64	@ 0x40
 8001604:	d00d      	beq.n	8001622 <LL_TIM_OC_DisableFast+0x3e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800160c:	d007      	beq.n	800161e <LL_TIM_OC_DisableFast+0x3a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001614:	d101      	bne.n	800161a <LL_TIM_OC_DisableFast+0x36>
 8001616:	2305      	movs	r3, #5
 8001618:	e00a      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800161a:	2306      	movs	r3, #6
 800161c:	e008      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_TIM_OC_DisableFast+0x4c>
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3318      	adds	r3, #24
 8001636:	4619      	mov	r1, r3
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <LL_TIM_OC_DisableFast+0x84>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	440b      	add	r3, r1
 8001640:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4908      	ldr	r1, [pc, #32]	@ (800166c <LL_TIM_OC_DisableFast+0x88>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	4619      	mov	r1, r3
 800164e:	2304      	movs	r3, #4
 8001650:	408b      	lsls	r3, r1
 8001652:	43db      	mvns	r3, r3
 8001654:	401a      	ands	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	601a      	str	r2, [r3, #0]

}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	0800c354 	.word	0x0800c354
 800166c:	0800c35c 	.word	0x0800c35c

08001670 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d01c      	beq.n	80016ba <LL_TIM_OC_EnablePreload+0x4a>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d017      	beq.n	80016b6 <LL_TIM_OC_EnablePreload+0x46>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d012      	beq.n	80016b2 <LL_TIM_OC_EnablePreload+0x42>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b40      	cmp	r3, #64	@ 0x40
 8001690:	d00d      	beq.n	80016ae <LL_TIM_OC_EnablePreload+0x3e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001698:	d007      	beq.n	80016aa <LL_TIM_OC_EnablePreload+0x3a>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016a0:	d101      	bne.n	80016a6 <LL_TIM_OC_EnablePreload+0x36>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e00a      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e008      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_TIM_OC_EnablePreload+0x4c>
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3318      	adds	r3, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LL_TIM_OC_EnablePreload+0x80>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	440b      	add	r3, r1
 80016cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <LL_TIM_OC_EnablePreload+0x84>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	4619      	mov	r1, r3
 80016da:	2308      	movs	r3, #8
 80016dc:	408b      	lsls	r3, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	0800c354 	.word	0x0800c354
 80016f4:	0800c35c 	.word	0x0800c35c

080016f8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	615a      	str	r2, [r3, #20]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_USART_ConfigHalfDuplexMode>:
  *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* In Half Duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	615a      	str	r2, [r3, #20]
  /* set the UART/USART in Half Duplex mode */
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f043 0208 	orr.w	r2, r3, #8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	615a      	str	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	330c      	adds	r3, #12
 80017f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	e853 3f00 	ldrex	r3, [r3]
 8001800:	60bb      	str	r3, [r7, #8]
   return(result);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	330c      	adds	r3, #12
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	61ba      	str	r2, [r7, #24]
 8001812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001814:	6979      	ldr	r1, [r7, #20]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	e841 2300 	strex	r3, r2, [r1]
 800181c:	613b      	str	r3, [r7, #16]
   return(result);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e7      	bne.n	80017f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_GPIO_ResetOutputPin>:
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_AHB1_GRP1_EnableClock>:
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800185c:	4907      	ldr	r1, [pc, #28]	@ (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40023800 	.word	0x40023800

08001880 <LL_APB1_GRP1_EnableClock>:
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800188a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800188c:	4907      	ldr	r1, [pc, #28]	@ (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40023800 	.word	0x40023800

080018b0 <LL_APB2_GRP1_EnableClock>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018bc:	4907      	ldr	r1, [pc, #28]	@ (80018dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80018c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40023800 	.word	0x40023800

080018e0 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	{
		LL_USART_TransmitData8(USART2, *(p+i));
		HAL_Delay(1);
	}
	*/
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 80018ec:	bf00      	nop
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4619      	mov	r1, r3
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	f007 fbd3 	bl	80090a0 <CDC_Transmit_FS>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d0f6      	beq.n	80018ee <_write+0xe>
	return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001910:	f000 fc98 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001914:	f000 f840 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001918:	f000 fa8e 	bl	8001e38 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800191c:	f000 f96c 	bl	8001bf8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001920:	f007 fb00 	bl	8008f24 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8001924:	f000 f8f4 	bl	8001b10 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001928:	f000 f9c4 	bl	8001cb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800192c:	f000 fa22 	bl	8001d74 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001930:	f000 f89c 	bl	8001a6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8001934:	4812      	ldr	r0, [pc, #72]	@ (8001980 <main+0x74>)
 8001936:	f7ff fe35 	bl	80015a4 <LL_TIM_EnableCounter>
  BuzzerPlayInit();
 800193a:	f7ff faef 	bl	8000f1c <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <main+0x78>)
 8001940:	f7ff ff54 	bl	80017ec <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8001944:	4810      	ldr	r0, [pc, #64]	@ (8001988 <main+0x7c>)
 8001946:	f7ff ff51 	bl	80017ec <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 800194a:	4810      	ldr	r0, [pc, #64]	@ (800198c <main+0x80>)
 800194c:	f7ff ff4e 	bl	80017ec <LL_USART_EnableIT_RXNE>

  ICM42688_Initialization();
 8001950:	f7ff fccc 	bl	80012ec <ICM42688_Initialization>
		  CDC_Transmit_FS(uart1_rx_data, 1);
		  // LL_USART_TransmitData8(USART2, uart1_rx_data);
		  // LL_USART_TransmitData8(USART2, uart2_rx_data);
	  }
	  */
	  ICM42688_Get6AxisRawData();
 8001954:	f7ff fd34 	bl	80013c0 <ICM42688_Get6AxisRawData>

	  printf("%d %d %d\n\r", ICM42688.gyro_x_raw, ICM42688.gyro_y_raw, ICM42688.gyro_z_raw);
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <main+0x84>)
 800195a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800195e:	4619      	mov	r1, r3
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <main+0x84>)
 8001962:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001966:	461a      	mov	r2, r3
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <main+0x84>)
 800196a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800196e:	4809      	ldr	r0, [pc, #36]	@ (8001994 <main+0x88>)
 8001970:	f008 fdf0 	bl	800a554 <iprintf>
	  HAL_Delay(100);
 8001974:	2064      	movs	r0, #100	@ 0x64
 8001976:	f000 fcd7 	bl	8002328 <HAL_Delay>
	  ICM42688_Get6AxisRawData();
 800197a:	bf00      	nop
 800197c:	e7ea      	b.n	8001954 <main+0x48>
 800197e:	bf00      	nop
 8001980:	40000800 	.word	0x40000800
 8001984:	40011000 	.word	0x40011000
 8001988:	40004400 	.word	0x40004400
 800198c:	40004800 	.word	0x40004800
 8001990:	200002e0 	.word	0x200002e0
 8001994:	0800c300 	.word	0x0800c300

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	@ 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	@ 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f008 fe29 	bl	800a5fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <SystemClock_Config+0xcc>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <SystemClock_Config+0xcc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fe:	2302      	movs	r3, #2
 8001a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a0c:	23a8      	movs	r3, #168	@ 0xa8
 8001a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a14:	2307      	movs	r3, #7
 8001a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 f9a7 	bl	8003d70 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a28:	f000 fa36 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a30:	2302      	movs	r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fc08 	bl	8004260 <HAL_RCC_ClockConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a56:	f000 fa1f 	bl	8001e98 <Error_Handler>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3750      	adds	r7, #80	@ 0x50
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	@ 0x40
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	2228      	movs	r2, #40	@ 0x28
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f008 fdbf 	bl	800a5fe <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001a90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a94:	f7ff ff0c 	bl	80018b0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fed9 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001a9e:	23e0      	movs	r3, #224	@ 0xe0
 8001aa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <MX_SPI1_Init+0x9c>)
 8001abc:	f002 ff11 	bl	80048e2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ac4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001ac8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001adc:	2318      	movs	r3, #24
 8001ade:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001ae8:	230a      	movs	r3, #10
 8001aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <MX_SPI1_Init+0xa0>)
 8001af4:	f003 f8cf 	bl	8004c96 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <MX_SPI1_Init+0xa0>)
 8001afc:	f7ff fd3f 	bl	800157e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3740      	adds	r7, #64	@ 0x40
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40013000 	.word	0x40013000

08001b10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	@ 0x50
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f008 fd65 	bl	800a5fe <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001b44:	2004      	movs	r0, #4
 8001b46:	f7ff fe9b 	bl	8001880 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <MX_TIM4_Init+0xdc>)
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001b5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4823      	ldr	r0, [pc, #140]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001b62:	f003 f95d 	bl	8004e20 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001b66:	4822      	ldr	r0, [pc, #136]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001b68:	f7ff fd2c 	bl	80015c4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4820      	ldr	r0, [pc, #128]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001b70:	f7ff fdc2 	bl	80016f8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8001b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b78:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001b7a:	f7ff fd79 	bl	8001670 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001b7e:	2360      	movs	r3, #96	@ 0x60
 8001b80:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	461a      	mov	r2, r3
 8001b98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b9c:	4814      	ldr	r0, [pc, #80]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001b9e:	f003 f9d9 	bl	8004f54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8001ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba6:	4812      	ldr	r0, [pc, #72]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001ba8:	f7ff fd1c 	bl	80015e4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001bac:	2100      	movs	r1, #0
 8001bae:	4810      	ldr	r0, [pc, #64]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001bb0:	f7ff fdb7 	bl	8001722 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001bb4:	480e      	ldr	r0, [pc, #56]	@ (8001bf0 <MX_TIM4_Init+0xe0>)
 8001bb6:	f7ff fdc7 	bl	8001748 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001bba:	2008      	movs	r0, #8
 8001bbc:	f7ff fe48 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_TIM4_Init+0xe4>)
 8001be0:	f002 fe7f 	bl	80048e2 <LL_GPIO_Init>

}
 8001be4:	bf00      	nop
 8001be6:	3750      	adds	r7, #80	@ 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	fff0fadc 	.word	0xfff0fadc
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40020c00 	.word	0x40020c00

08001bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001c22:	2010      	movs	r0, #16
 8001c24:	f7ff fe44 	bl	80018b0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff fe11 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8001c2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c34:	2302      	movs	r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c44:	2307      	movs	r3, #7
 8001c46:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	@ (8001cac <MX_USART1_UART_Init+0xb4>)
 8001c4e:	f002 fe48 	bl	80048e2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c52:	f7ff fc0b 	bl	800146c <__NVIC_GetPriorityGrouping>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fc5b 	bl	8001518 <NVIC_EncodePriority>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4619      	mov	r1, r3
 8001c66:	2025      	movs	r0, #37	@ 0x25
 8001c68:	f7ff fc2c 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001c6c:	2025      	movs	r0, #37	@ 0x25
 8001c6e:	f7ff fc0b 	bl	8001488 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001c72:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001c76:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c84:	230c      	movs	r3, #12
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4807      	ldr	r0, [pc, #28]	@ (8001cb0 <MX_USART1_UART_Init+0xb8>)
 8001c94:	f003 fdac 	bl	80057f0 <LL_USART_Init>
  LL_USART_Enable(USART1);
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_USART1_UART_Init+0xb8>)
 8001c9a:	f7ff fd65 	bl	8001768 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <MX_USART1_UART_Init+0xb8>)
 8001ca0:	f7ff fd88 	bl	80017b4 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	@ 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40011000 	.word	0x40011000

08001cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	@ 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001cde:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ce2:	f7ff fdcd 	bl	8001880 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001ce6:	2008      	movs	r0, #8
 8001ce8:	f7ff fdb2 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8001cec:	2378      	movs	r3, #120	@ 0x78
 8001cee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d00:	2307      	movs	r3, #7
 8001d02:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <MX_USART2_UART_Init+0xb8>)
 8001d0a:	f002 fdea 	bl	80048e2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d0e:	f7ff fbad 	bl	800146c <__NVIC_GetPriorityGrouping>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fbfd 	bl	8001518 <NVIC_EncodePriority>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4619      	mov	r1, r3
 8001d22:	2026      	movs	r0, #38	@ 0x26
 8001d24:	f7ff fbce 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001d28:	2026      	movs	r0, #38	@ 0x26
 8001d2a:	f7ff fbad 	bl	8001488 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001d2e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001d32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d40:	230c      	movs	r3, #12
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4807      	ldr	r0, [pc, #28]	@ (8001d70 <MX_USART2_UART_Init+0xbc>)
 8001d54:	f003 fd4c 	bl	80057f0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_USART2_UART_Init+0xbc>)
 8001d5a:	f7ff fd15 	bl	8001788 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001d5e:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_USART2_UART_Init+0xbc>)
 8001d60:	f7ff fd02 	bl	8001768 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	3738      	adds	r7, #56	@ 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40004400 	.word	0x40004400

08001d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	@ 0x38
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001d9e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001da2:	f7ff fd6d 	bl	8001880 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7ff fd52 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001dac:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001db2:	2302      	movs	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4819      	ldr	r0, [pc, #100]	@ (8001e30 <MX_USART3_UART_Init+0xbc>)
 8001dcc:	f002 fd89 	bl	80048e2 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001dd0:	f7ff fb4c 	bl	800146c <__NVIC_GetPriorityGrouping>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fb9c 	bl	8001518 <NVIC_EncodePriority>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	2027      	movs	r0, #39	@ 0x27
 8001de6:	f7ff fb6d 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001dea:	2027      	movs	r0, #39	@ 0x27
 8001dec:	f7ff fb4c 	bl	8001488 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001df0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001df4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001e02:	230c      	movs	r3, #12
 8001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <MX_USART3_UART_Init+0xc0>)
 8001e16:	f003 fceb 	bl	80057f0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001e1a:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <MX_USART3_UART_Init+0xc0>)
 8001e1c:	f7ff fcb4 	bl	8001788 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <MX_USART3_UART_Init+0xc0>)
 8001e22:	f7ff fca1 	bl	8001768 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3738      	adds	r7, #56	@ 0x38
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40004800 	.word	0x40004800

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f7ff fcfe 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001e54:	2080      	movs	r0, #128	@ 0x80
 8001e56:	f7ff fcfb 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fcf8 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001e60:	2008      	movs	r0, #8
 8001e62:	f7ff fcf5 	bl	8001850 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin);
 8001e66:	2127      	movs	r1, #39	@ 0x27
 8001e68:	480a      	ldr	r0, [pc, #40]	@ (8001e94 <MX_GPIO_Init+0x5c>)
 8001e6a:	f7ff fce2 	bl	8001832 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LL_GPIO_PIN_5|LED_RED_Pin|LED_YELLOW_Pin;
 8001e6e:	2327      	movs	r3, #39	@ 0x27
 8001e70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e72:	2301      	movs	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e82:	463b      	mov	r3, r7
 8001e84:	4619      	mov	r1, r3
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_GPIO_Init+0x5c>)
 8001e88:	f002 fd2b 	bl	80048e2 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <Error_Handler+0x8>

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <LL_USART_IsActiveFlag_RXNE>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_ClearFlag_RXNE>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	b2db      	uxtb	r3, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f99f 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001fb4:	480a      	ldr	r0, [pc, #40]	@ (8001fe0 <USART1_IRQHandler+0x30>)
 8001fb6:	f7ff ff9d 	bl	8001ef4 <LL_USART_IsActiveFlag_RXNE>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <USART1_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <USART1_IRQHandler+0x30>)
 8001fc2:	f7ff ffaa 	bl	8001f1a <LL_USART_ClearFlag_RXNE>
		uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <USART1_IRQHandler+0x30>)
 8001fc8:	f7ff ffb5 	bl	8001f36 <LL_USART_ReceiveData8>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <USART1_IRQHandler+0x34>)
 8001fd2:	701a      	strb	r2, [r3, #0]
		uart1_rx_flag = 1;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <USART1_IRQHandler+0x38>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	20000309 	.word	0x20000309
 8001fe8:	20000308 	.word	0x20000308

08001fec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001ff0:	480a      	ldr	r0, [pc, #40]	@ (800201c <USART2_IRQHandler+0x30>)
 8001ff2:	f7ff ff7f 	bl	8001ef4 <LL_USART_IsActiveFlag_RXNE>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8001ffc:	4807      	ldr	r0, [pc, #28]	@ (800201c <USART2_IRQHandler+0x30>)
 8001ffe:	f7ff ff8c 	bl	8001f1a <LL_USART_ClearFlag_RXNE>
		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <USART2_IRQHandler+0x30>)
 8002004:	f7ff ff97 	bl	8001f36 <LL_USART_ReceiveData8>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <USART2_IRQHandler+0x34>)
 800200e:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <USART2_IRQHandler+0x38>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40004400 	.word	0x40004400
 8002020:	2000030b 	.word	0x2000030b
 8002024:	2000030a 	.word	0x2000030a

08002028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 800202c:	480a      	ldr	r0, [pc, #40]	@ (8002058 <USART3_IRQHandler+0x30>)
 800202e:	f7ff ff61 	bl	8001ef4 <LL_USART_IsActiveFlag_RXNE>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00c      	beq.n	8002052 <USART3_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8002038:	4807      	ldr	r0, [pc, #28]	@ (8002058 <USART3_IRQHandler+0x30>)
 800203a:	f7ff ff6e 	bl	8001f1a <LL_USART_ClearFlag_RXNE>
		uart3_rx_data = LL_USART_ReceiveData8(USART3);
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <USART3_IRQHandler+0x30>)
 8002040:	f7ff ff79 	bl	8001f36 <LL_USART_ReceiveData8>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <USART3_IRQHandler+0x34>)
 800204a:	701a      	strb	r2, [r3, #0]
		uart3_rx_flag = 1;
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <USART3_IRQHandler+0x38>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40004800 	.word	0x40004800
 800205c:	2000030d 	.word	0x2000030d
 8002060:	2000030c 	.word	0x2000030c

08002064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <OTG_FS_IRQHandler+0x10>)
 800206a:	f000 fd73 	bl	8002b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200017f8 	.word	0x200017f8

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002092:	f008 fb17 	bl	800a6c4 <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ba:	bf00      	nop
 80020bc:	e7fd      	b.n	80020ba <_exit+0x12>

080020be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e00a      	b.n	80020e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d0:	f3af 8000 	nop.w
 80020d4:	4601      	mov	r1, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbf0      	blt.n	80020d0 <_read+0x12>
  }

  return len;
 80020ee:	687b      	ldr	r3, [r7, #4]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002120:	605a      	str	r2, [r3, #4]
  return 0;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_isatty>:

int _isatty(int file)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f008 fa98 	bl	800a6c4 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20020000 	.word	0x20020000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000310 	.word	0x20000310
 80021c8:	20002048 	.word	0x20002048

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f4:	f7ff ffea 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f008 fa57 	bl	800a6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7ff fb73 	bl	800190c <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002234:	0800c704 	.word	0x0800c704
  ldr r2, =_sbss
 8002238:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 800223c:	20002048 	.word	0x20002048

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f94f 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	200f      	movs	r0, #15
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fe14 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f967 	bl	800257a <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 f92f 	bl	8002526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008
 800230c:	20000314 	.word	0x20000314

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000314 	.word	0x20000314

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000008 	.word	0x20000008

08002370 <__NVIC_SetPriorityGrouping>:
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	@ (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	@ (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	@ 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e16b      	b.n	8002888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 815a 	bne.w	8002882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d005      	beq.n	80025e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d130      	bne.n	8002648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d017      	beq.n	8002684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80b4 	beq.w	8002882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <HAL_GPIO_Init+0x30c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	4a5f      	ldr	r2, [pc, #380]	@ (80028a0 <HAL_GPIO_Init+0x30c>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002728:	6453      	str	r3, [r2, #68]	@ 0x44
 800272a:	4b5d      	ldr	r3, [pc, #372]	@ (80028a0 <HAL_GPIO_Init+0x30c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <HAL_GPIO_Init+0x310>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a52      	ldr	r2, [pc, #328]	@ (80028a8 <HAL_GPIO_Init+0x314>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02b      	beq.n	80027ba <HAL_GPIO_Init+0x226>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a51      	ldr	r2, [pc, #324]	@ (80028ac <HAL_GPIO_Init+0x318>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x222>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <HAL_GPIO_Init+0x31c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x21e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	@ (80028b4 <HAL_GPIO_Init+0x320>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x21a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4e      	ldr	r2, [pc, #312]	@ (80028b8 <HAL_GPIO_Init+0x324>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x216>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4d      	ldr	r2, [pc, #308]	@ (80028bc <HAL_GPIO_Init+0x328>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x212>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4c      	ldr	r2, [pc, #304]	@ (80028c0 <HAL_GPIO_Init+0x32c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4b      	ldr	r2, [pc, #300]	@ (80028c4 <HAL_GPIO_Init+0x330>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x20a>
 800279a:	2307      	movs	r3, #7
 800279c:	e00e      	b.n	80027bc <HAL_GPIO_Init+0x228>
 800279e:	2308      	movs	r3, #8
 80027a0:	e00c      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00a      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027a6:	2305      	movs	r3, #5
 80027a8:	e008      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027aa:	2304      	movs	r3, #4
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027ae:	2303      	movs	r3, #3
 80027b0:	e004      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x228>
 80027ba:	2300      	movs	r3, #0
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f002 0203 	and.w	r2, r2, #3
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4093      	lsls	r3, r2
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027cc:	4935      	ldr	r1, [pc, #212]	@ (80028a4 <HAL_GPIO_Init+0x310>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b3b      	ldr	r3, [pc, #236]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fe:	4a32      	ldr	r2, [pc, #200]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002804:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002828:	4a27      	ldr	r2, [pc, #156]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002852:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287c:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <HAL_GPIO_Init+0x334>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3301      	adds	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b0f      	cmp	r3, #15
 800288c:	f67f ae90 	bls.w	80025b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40021400 	.word	0x40021400
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40021c00 	.word	0x40021c00
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e101      	b.n	8002ae2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f006 fd19 	bl	8009330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2203      	movs	r2, #3
 8002902:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290c:	d102      	bne.n	8002914 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f900 	bl	8005b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7c1a      	ldrb	r2, [r3, #16]
 8002926:	f88d 2000 	strb.w	r2, [sp]
 800292a:	3304      	adds	r3, #4
 800292c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292e:	f002 ffdf 	bl	80058f0 <USB_CoreInit>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0ce      	b.n	8002ae2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f003 f8f8 	bl	8005b40 <USB_SetCurrentMode>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0bf      	b.n	8002ae2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e04a      	b.n	80029fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3315      	adds	r3, #21
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3314      	adds	r3, #20
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	b298      	uxth	r0, r3
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	332e      	adds	r3, #46	@ 0x2e
 80029a4:	4602      	mov	r2, r0
 80029a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3318      	adds	r3, #24
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	331c      	adds	r3, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3320      	adds	r3, #32
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3324      	adds	r3, #36	@ 0x24
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	3301      	adds	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3af      	bcc.n	8002968 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e044      	b.n	8002a98 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	3301      	adds	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3b5      	bcc.n	8002a0e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7c1a      	ldrb	r2, [r3, #16]
 8002aaa:	f88d 2000 	strb.w	r2, [sp]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab2:	f003 f891 	bl	8005bd8 <USB_DevInit>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e00c      	b.n	8002ae2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f8db 	bl	8006c96 <USB_DevDisconnect>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_Start+0x1c>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e022      	b.n	8002b4c <HAL_PCD_Start+0x62>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 ffe2 	bl	8005afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 f889 	bl	8006c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b08d      	sub	sp, #52	@ 0x34
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f947 	bl	8006dfe <USB_GetMode>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 848c 	bne.w	8003490 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 f8ab 	bl	8006cd8 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8482 	beq.w	800348e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 f898 	bl	8006cd8 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f002 0202 	and.w	r2, r2, #2
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 f886 	bl	8006cd8 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d161      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0210 	bic.w	r2, r2, #16
 8002be4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c10:	d124      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d035      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6a38      	ldr	r0, [r7, #32]
 8002c32:	f003 febd 	bl	80069b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c42:	441a      	add	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c54:	441a      	add	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	615a      	str	r2, [r3, #20]
 8002c5a:	e016      	b.n	8002c8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c66:	d110      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c6e:	2208      	movs	r2, #8
 8002c70:	4619      	mov	r1, r3
 8002c72:	6a38      	ldr	r0, [r7, #32]
 8002c74:	f003 fe9c 	bl	80069b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c84:	441a      	add	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0210 	orr.w	r2, r2, #16
 8002c98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f81a 	bl	8006cd8 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002caa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cae:	f040 80a7 	bne.w	8002e00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f81f 	bl	8006cfe <USB_ReadDevAllOutEpInterrupt>
 8002cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002cc2:	e099      	b.n	8002df8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 808e 	beq.w	8002dec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 f843 	bl	8006d66 <USB_ReadDevOutEPInterrupt>
 8002ce0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fea3 	bl	8003a4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2308      	movs	r3, #8
 8002d20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 ff79 	bl	8003c1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	2310      	movs	r3, #16
 8002d44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d030      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d58:	2b80      	cmp	r3, #128	@ 0x80
 8002d5a:	d109      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	78db      	ldrb	r3, [r3, #3]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f006 fbce 	bl	800953c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	2302      	movs	r3, #2
 8002db0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2320      	movs	r3, #32
 8002dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	3301      	adds	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f af62 	bne.w	8002cc4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 ff67 	bl	8006cd8 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e14:	f040 80db 	bne.w	8002fce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 ff88 	bl	8006d32 <USB_ReadDevAllInEpInterrupt>
 8002e22:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e28:	e0cd      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80c2 	beq.w	8002fba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 ffae 	bl	8006da2 <USB_ReadDevInEPInterrupt>
 8002e46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d057      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2201      	movs	r2, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69f9      	ldr	r1, [r7, #28]
 8002e6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e72:	4013      	ands	r3, r2
 8002e74:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e82:	461a      	mov	r2, r3
 8002e84:	2301      	movs	r3, #1
 8002e86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	799b      	ldrb	r3, [r3, #6]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d132      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3320      	adds	r3, #32
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4419      	add	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4403      	add	r3, r0
 8002ec4:	3320      	adds	r3, #32
 8002ec6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x3a2>
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3324      	adds	r3, #36	@ 0x24
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f003 ffb5 	bl	8006e60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f006 fa98 	bl	8009432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f34:	461a      	mov	r2, r3
 8002f36:	2310      	movs	r3, #16
 8002f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	2340      	movs	r3, #64	@ 0x40
 8002f54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f62:	6a38      	ldr	r0, [r7, #32]
 8002f64:	f002 ff9c 	bl	8005ea0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3310      	adds	r3, #16
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2200      	movs	r2, #0
 8002f88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f006 fae5 	bl	8009560 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fcbd 	bl	8003934 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f af2e 	bne.w	8002e2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 fe80 	bl	8006cd8 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fe2:	d122      	bne.n	800302a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d108      	bne.n	8003014 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800300a:	2100      	movs	r1, #0
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fea3 	bl	8003d58 <HAL_PCDEx_LPM_Callback>
 8003012:	e002      	b.n	800301a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f006 fa83 	bl	8009520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fe52 	bl	8006cd8 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800303a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800303e:	d112      	bne.n	8003066 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f006 fa3f 	bl	80094d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003064:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fe34 	bl	8006cd8 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307a:	f040 80b7 	bne.w	80031ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2110      	movs	r1, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f002 ff01 	bl	8005ea0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	e046      	b.n	8003132 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b0:	461a      	mov	r2, r3
 80030b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fc:	0151      	lsls	r1, r2, #5
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	440a      	add	r2, r1
 8003102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800310a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800310c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311c:	0151      	lsls	r1, r2, #5
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	440a      	add	r2, r1
 8003122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800312a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	3301      	adds	r3, #1
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	4293      	cmp	r3, r2
 800313c:	d3b2      	bcc.n	80030a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800314c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003150:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7bdb      	ldrb	r3, [r3, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316a:	f043 030b 	orr.w	r3, r3, #11
 800316e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003180:	f043 030b 	orr.w	r3, r3, #11
 8003184:	6453      	str	r3, [r2, #68]	@ 0x44
 8003186:	e015      	b.n	80031b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003196:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800319a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800319e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ae:	f043 030b 	orr.w	r3, r3, #11
 80031b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031d6:	461a      	mov	r2, r3
 80031d8:	f003 fe42 	bl	8006e60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80031ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fd71 	bl	8006cd8 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003200:	d123      	bne.n	800324a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fe07 	bl	8006e1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f002 febe 	bl	8005f92 <USB_GetDevSpeed>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681c      	ldr	r4, [r3, #0]
 8003222:	f001 fa07 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8003226:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800322c:	461a      	mov	r2, r3
 800322e:	4620      	mov	r0, r4
 8003230:	f002 fbc2 	bl	80059b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f006 f924 	bl	8009482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003248:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fd42 	bl	8006cd8 <USB_ReadInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d10a      	bne.n	8003274 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f006 f901 	bl	8009466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 0208 	and.w	r2, r2, #8
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fd2d 	bl	8006cd8 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d123      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003294:	2301      	movs	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
 8003298:	e014      	b.n	80032c4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb0a 	bl	80038d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	791b      	ldrb	r3, [r3, #4]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d3e4      	bcc.n	800329a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fcff 	bl	8006cd8 <USB_ReadInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e4:	d13c      	bne.n	8003360 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e6:	2301      	movs	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ea:	e02b      	b.n	8003344 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3318      	adds	r3, #24
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d115      	bne.n	800333e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003312:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	da12      	bge.n	800333e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3317      	adds	r3, #23
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003334:	b2db      	uxtb	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 faca 	bl	80038d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	461a      	mov	r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	4293      	cmp	r3, r2
 800334e:	d3cd      	bcc.n	80032ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fcb7 	bl	8006cd8 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003374:	d156      	bne.n	8003424 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003376:	2301      	movs	r3, #1
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
 800337a:	e045      	b.n	8003408 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d12e      	bne.n	8003402 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da2b      	bge.n	8003402 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d121      	bne.n	8003402 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033fe:	6053      	str	r3, [r2, #4]
            break;
 8003400:	e008      	b.n	8003414 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	3301      	adds	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	791b      	ldrb	r3, [r3, #4]
 800340c:	461a      	mov	r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	4293      	cmp	r3, r2
 8003412:	d3b3      	bcc.n	800337c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fc55 	bl	8006cd8 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d10a      	bne.n	8003450 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f006 f8a2 	bl	8009584 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800344e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fc3f 	bl	8006cd8 <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d115      	bne.n	8003490 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f006 f892 	bl	80095a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	e000      	b.n	8003490 <HAL_PCD_IRQHandler+0x93c>
      return;
 800348e:	bf00      	nop
    }
  }
}
 8003490:	3734      	adds	r7, #52	@ 0x34
 8003492:	46bd      	mov	sp, r7
 8003494:	bd90      	pop	{r4, r7, pc}

08003496 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_PCD_SetAddress+0x1a>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e012      	b.n	80034d6 <HAL_PCD_SetAddress+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fb9e 	bl	8006c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	4608      	mov	r0, r1
 80034e8:	4611      	mov	r1, r2
 80034ea:	461a      	mov	r2, r3
 80034ec:	4603      	mov	r3, r0
 80034ee:	70fb      	strb	r3, [r7, #3]
 80034f0:	460b      	mov	r3, r1
 80034f2:	803b      	strh	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3310      	adds	r3, #16
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00f      	b.n	8003544 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003550:	883b      	ldrh	r3, [r7, #0]
 8003552:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	78ba      	ldrb	r2, [r7, #2]
 800355e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d102      	bne.n	800357e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_Open+0xae>
 8003588:	2302      	movs	r3, #2
 800358a:	e00e      	b.n	80035aa <HAL_PCD_EP_Open+0xcc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f002 fd1e 	bl	8005fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035a8:	7afb      	ldrb	r3, [r7, #11]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0f      	bge.n	80035e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3310      	adds	r3, #16
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	705a      	strb	r2, [r3, #1]
 80035e4:	e00f      	b.n	8003606 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_Close+0x6e>
 800361c:	2302      	movs	r3, #2
 800361e:	e00e      	b.n	800363e <HAL_PCD_EP_Close+0x8c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fd5c 	bl	80060ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	799b      	ldrb	r3, [r3, #6]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d102      	bne.n	80036a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	799b      	ldrb	r3, [r3, #6]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	f002 fdf9 	bl	80062a4 <USB_EPStartXfer>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	3310      	adds	r3, #16
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2200      	movs	r2, #0
 8003724:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2201      	movs	r2, #1
 800372a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	b2da      	uxtb	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	799b      	ldrb	r3, [r3, #6]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d102      	bne.n	8003746 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	799b      	ldrb	r3, [r3, #6]
 800374e:	461a      	mov	r2, r3
 8003750:	6979      	ldr	r1, [r7, #20]
 8003752:	f002 fda7 	bl	80062a4 <USB_EPStartXfer>

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	7912      	ldrb	r2, [r2, #4]
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e04f      	b.n	800381e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800377e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da0f      	bge.n	80037a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3310      	adds	r3, #16
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	705a      	strb	r2, [r3, #1]
 80037a4:	e00d      	b.n	80037c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_SetStall+0x82>
 80037de:	2302      	movs	r3, #2
 80037e0:	e01d      	b.n	800381e <HAL_PCD_EP_SetStall+0xbe>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 f935 	bl	8006a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7999      	ldrb	r1, [r3, #6]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800380e:	461a      	mov	r2, r3
 8003810:	f003 fb26 	bl	8006e60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	7912      	ldrb	r2, [r2, #4]
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e042      	b.n	80038ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da0f      	bge.n	800386c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 020f 	and.w	r2, r3, #15
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	3310      	adds	r3, #16
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	705a      	strb	r2, [r3, #1]
 800386a:	e00f      	b.n	800388c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_PCD_EP_ClrStall+0x86>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e00e      	b.n	80038ca <HAL_PCD_EP_ClrStall+0xa4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 f93e 	bl	8006b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da0c      	bge.n	8003900 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	3310      	adds	r3, #16
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	3304      	adds	r3, #4
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e00c      	b.n	800391a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	4618      	mov	r0, r3
 8003922:	f002 ff5d 	bl	80067e0 <USB_EPStopXfer>
 8003926:	4603      	mov	r3, r0
 8003928:	72fb      	strb	r3, [r7, #11]

  return ret;
 800392a:	7afb      	ldrb	r3, [r7, #11]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	3310      	adds	r3, #16
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d901      	bls.n	800396c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e06b      	b.n	8003a44 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	429a      	cmp	r2, r3
 8003980:	d902      	bls.n	8003988 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	3303      	adds	r3, #3
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003990:	e02a      	b.n	80039e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d902      	bls.n	80039ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3303      	adds	r3, #3
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68d9      	ldr	r1, [r3, #12]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4603      	mov	r3, r0
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f002 ffb2 	bl	8006934 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	441a      	add	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	441a      	add	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d809      	bhi.n	8003a12 <PCD_WriteEmptyTxFifo+0xde>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d203      	bcs.n	8003a12 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1bf      	bne.n	8003992 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d811      	bhi.n	8003a42 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	2201      	movs	r2, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a3e:	4013      	ands	r3, r2
 8003a40:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	333c      	adds	r3, #60	@ 0x3c
 8003a64:	3304      	adds	r3, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	799b      	ldrb	r3, [r3, #6]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d17b      	bne.n	8003b7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4a61      	ldr	r2, [pc, #388]	@ (8003c14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	f240 80b9 	bls.w	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80b3 	beq.w	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	e0a7      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	e098      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 8093 	bne.w	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d90f      	bls.n	8003b0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b00:	461a      	mov	r2, r3
 8003b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b06:	6093      	str	r3, [r2, #8]
 8003b08:	e07e      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	0159      	lsls	r1, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	1ad2      	subs	r2, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	f003 f982 	bl	8006e60 <USB_EP0_OutStart>
 8003b5c:	e006      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f005 fc42 	bl	80093fc <HAL_PCD_DataOutStageCallback>
 8003b78:	e046      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d124      	bne.n	8003bcc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b9e:	6093      	str	r3, [r2, #8]
 8003ba0:	e032      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2320      	movs	r3, #32
 8003bbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f005 fc19 	bl	80093fc <HAL_PCD_DataOutStageCallback>
 8003bca:	e01d      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d114      	bne.n	8003bfc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	f003 f932 	bl	8006e60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f005 fbfa 	bl	80093fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	4f54300a 	.word	0x4f54300a
 8003c18:	4f54310a 	.word	0x4f54310a

08003c1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	333c      	adds	r3, #60	@ 0x3c
 8003c34:	3304      	adds	r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d90e      	bls.n	8003c70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f005 fbb1 	bl	80093d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90c      	bls.n	8003c98 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	799b      	ldrb	r3, [r3, #6]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d108      	bne.n	8003c98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c90:	461a      	mov	r2, r3
 8003c92:	2101      	movs	r1, #1
 8003c94:	f003 f8e4 	bl	8006e60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	4f54300a 	.word	0x4f54300a

08003ca8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cc6:	883b      	ldrh	r3, [r7, #0]
 8003cc8:	0419      	lsls	r1, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd4:	e028      	b.n	8003d28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e00d      	b.n	8003d06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	3340      	adds	r3, #64	@ 0x40
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	3301      	adds	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3ec      	bcc.n	8003cea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d10:	883b      	ldrh	r3, [r7, #0]
 8003d12:	0418      	lsls	r0, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	4302      	orrs	r2, r0
 8003d20:	3340      	adds	r3, #64	@ 0x40
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e267      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d075      	beq.n	8003e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d8e:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d00c      	beq.n	8003db4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9a:	4b85      	ldr	r3, [pc, #532]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d112      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d05b      	beq.n	8003e78 <HAL_RCC_OscConfig+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d157      	bne.n	8003e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e242      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0x74>
 8003dd6:	4b76      	ldr	r3, [pc, #472]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a75      	ldr	r2, [pc, #468]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003e08:	4b69      	ldr	r3, [pc, #420]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a68      	ldr	r2, [pc, #416]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b66      	ldr	r3, [pc, #408]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fa72 	bl	8002310 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fa6e 	bl	8002310 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e207      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xc0>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe fa5e 	bl	8002310 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe fa5a 	bl	8002310 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1f3      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b51      	ldr	r3, [pc, #324]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0xe8>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e86:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b44      	ldr	r3, [pc, #272]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1c7      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4937      	ldr	r1, [pc, #220]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <HAL_RCC_OscConfig+0x244>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fe fa13 	bl	8002310 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe fa0f 	bl	8002310 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1a8      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4925      	ldr	r1, [pc, #148]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <HAL_RCC_OscConfig+0x244>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe f9f2 	bl	8002310 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe f9ee 	bl	8002310 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e187      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d036      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_RCC_OscConfig+0x248>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fe f9d2 	bl	8002310 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe f9ce 	bl	8002310 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e167      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x200>
 8003f8e:	e01b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f90:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <HAL_RCC_OscConfig+0x248>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fe f9bb 	bl	8002310 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fe f9b7 	bl	8002310 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d907      	bls.n	8003fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e150      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470000 	.word	0x42470000
 8003fb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fbc:	4b88      	ldr	r3, [pc, #544]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ea      	bne.n	8003f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8097 	beq.w	8004104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b81      	ldr	r3, [pc, #516]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	4b7d      	ldr	r3, [pc, #500]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	4a7c      	ldr	r2, [pc, #496]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b77      	ldr	r3, [pc, #476]	@ (80041e4 <HAL_RCC_OscConfig+0x474>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004012:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_RCC_OscConfig+0x474>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a73      	ldr	r2, [pc, #460]	@ (80041e4 <HAL_RCC_OscConfig+0x474>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fe f977 	bl	8002310 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fe f973 	bl	8002310 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e10c      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	4b6a      	ldr	r3, [pc, #424]	@ (80041e4 <HAL_RCC_OscConfig+0x474>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x2ea>
 800404c:	4b64      	ldr	r3, [pc, #400]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004050:	4a63      	ldr	r2, [pc, #396]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6713      	str	r3, [r2, #112]	@ 0x70
 8004058:	e01c      	b.n	8004094 <HAL_RCC_OscConfig+0x324>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x30c>
 8004062:	4b5f      	ldr	r3, [pc, #380]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	4a5e      	ldr	r2, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	6713      	str	r3, [r2, #112]	@ 0x70
 800406e:	4b5c      	ldr	r3, [pc, #368]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004072:	4a5b      	ldr	r2, [pc, #364]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	@ 0x70
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0x324>
 800407c:	4b58      	ldr	r3, [pc, #352]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	4a57      	ldr	r2, [pc, #348]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	6713      	str	r3, [r2, #112]	@ 0x70
 8004088:	4b55      	ldr	r3, [pc, #340]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	4a54      	ldr	r2, [pc, #336]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 0304 	bic.w	r3, r3, #4
 8004092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe f938 	bl	8002310 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fe f934 	bl	8002310 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0cb      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ee      	beq.n	80040a4 <HAL_RCC_OscConfig+0x334>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7fe f922 	bl	8002310 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fe f91e 	bl	8002310 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0b5      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e6:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ee      	bne.n	80040d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f8:	4b39      	ldr	r3, [pc, #228]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	4a38      	ldr	r2, [pc, #224]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a1 	beq.w	8004250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800410e:	4b34      	ldr	r3, [pc, #208]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b08      	cmp	r3, #8
 8004118:	d05c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d141      	bne.n	80041a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004122:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_RCC_OscConfig+0x478>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe f8f2 	bl	8002310 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fe f8ee 	bl	8002310 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e087      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	491b      	ldr	r1, [pc, #108]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x478>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fe f8c7 	bl	8002310 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004186:	f7fe f8c3 	bl	8002310 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e05c      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x416>
 80041a4:	e054      	b.n	8004250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x478>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe f8b0 	bl	8002310 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fe f8ac 	bl	8002310 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e045      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x444>
 80041d2:	e03d      	b.n	8004250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e038      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <HAL_RCC_OscConfig+0x4ec>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d028      	beq.n	800424c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d121      	bne.n	800424c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d11a      	bne.n	800424c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	4293      	cmp	r3, r2
 8004226:	d111      	bne.n	800424c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	3b01      	subs	r3, #1
 8004236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0cc      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004274:	4b68      	ldr	r3, [pc, #416]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d90c      	bls.n	800429c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004282:	4b65      	ldr	r3, [pc, #404]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b8      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b4:	4b59      	ldr	r3, [pc, #356]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a58      	ldr	r2, [pc, #352]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042cc:	4b53      	ldr	r3, [pc, #332]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a52      	ldr	r2, [pc, #328]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b50      	ldr	r3, [pc, #320]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	494d      	ldr	r1, [pc, #308]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d044      	beq.n	8004380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d119      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d003      	beq.n	800431e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	2b03      	cmp	r3, #3
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b3f      	ldr	r3, [pc, #252]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e067      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433e:	4b37      	ldr	r3, [pc, #220]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4934      	ldr	r1, [pc, #208]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd ffde 	bl	8002310 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	e00a      	b.n	800436e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004358:	f7fd ffda 	bl	8002310 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e04f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 020c 	and.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	429a      	cmp	r2, r3
 800437e:	d1eb      	bne.n	8004358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d20c      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e032      	b.n	800440e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b4:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4916      	ldr	r1, [pc, #88]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490a      	ldr	r1, [pc, #40]	@ (8004420 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd ff3e 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023c00 	.word	0x40023c00
 800441c:	40023800 	.word	0x40023800
 8004420:	0800c364 	.word	0x0800c364
 8004424:	20000000 	.word	0x20000000
 8004428:	20000004 	.word	0x20000004

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b094      	sub	sp, #80	@ 0x50
 8004432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004444:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d00d      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x40>
 8004450:	2b08      	cmp	r3, #8
 8004452:	f200 80e1 	bhi.w	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x34>
 800445a:	2b04      	cmp	r3, #4
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0x3a>
 800445e:	e0db      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b73      	ldr	r3, [pc, #460]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004464:	e0db      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 8004468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800446a:	e0d8      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446c:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004474:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004476:	4b6d      	ldr	r3, [pc, #436]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4621      	mov	r1, r4
 80044b8:	1a51      	subs	r1, r2, r1
 80044ba:	6139      	str	r1, [r7, #16]
 80044bc:	4629      	mov	r1, r5
 80044be:	eb63 0301 	sbc.w	r3, r3, r1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d0:	4659      	mov	r1, fp
 80044d2:	018b      	lsls	r3, r1, #6
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044da:	4651      	mov	r1, sl
 80044dc:	018a      	lsls	r2, r1, #6
 80044de:	4651      	mov	r1, sl
 80044e0:	ebb2 0801 	subs.w	r8, r2, r1
 80044e4:	4659      	mov	r1, fp
 80044e6:	eb63 0901 	sbc.w	r9, r3, r1
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fe:	4690      	mov	r8, r2
 8004500:	4699      	mov	r9, r3
 8004502:	4623      	mov	r3, r4
 8004504:	eb18 0303 	adds.w	r3, r8, r3
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	462b      	mov	r3, r5
 800450c:	eb49 0303 	adc.w	r3, r9, r3
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800451e:	4629      	mov	r1, r5
 8004520:	028b      	lsls	r3, r1, #10
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004528:	4621      	mov	r1, r4
 800452a:	028a      	lsls	r2, r1, #10
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800453c:	f7fc fb34 	bl	8000ba8 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	e058      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b38      	ldr	r3, [pc, #224]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	4618      	mov	r0, r3
 8004554:	4611      	mov	r1, r2
 8004556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	f04f 0000 	mov.w	r0, #0
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	0159      	lsls	r1, r3, #5
 8004572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004576:	0150      	lsls	r0, r2, #5
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4641      	mov	r1, r8
 800457e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb63 0b01 	sbc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800459c:	ebb2 040a 	subs.w	r4, r2, sl
 80045a0:	eb63 050b 	sbc.w	r5, r3, fp
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	00eb      	lsls	r3, r5, #3
 80045ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b2:	00e2      	lsls	r2, r4, #3
 80045b4:	4614      	mov	r4, r2
 80045b6:	461d      	mov	r5, r3
 80045b8:	4643      	mov	r3, r8
 80045ba:	18e3      	adds	r3, r4, r3
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	464b      	mov	r3, r9
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045d2:	4629      	mov	r1, r5
 80045d4:	028b      	lsls	r3, r1, #10
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045dc:	4621      	mov	r1, r4
 80045de:	028a      	lsls	r2, r1, #10
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	f7fc fada 	bl	8000ba8 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004620:	4618      	mov	r0, r3
 8004622:	3750      	adds	r7, #80	@ 0x50
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400

08004634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004638:	4b03      	ldr	r3, [pc, #12]	@ (8004648 <HAL_RCC_GetHCLKFreq+0x14>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000000 	.word	0x20000000

0800464c <LL_GPIO_SetPinMode>:
{
 800464c:	b480      	push	{r7}
 800464e:	b08b      	sub	sp, #44	@ 0x2c
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	613b      	str	r3, [r7, #16]
  return result;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e003      	b.n	800467e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2103      	movs	r1, #3
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	401a      	ands	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	61fb      	str	r3, [r7, #28]
  return result;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	372c      	adds	r7, #44	@ 0x2c
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_GPIO_SetPinOutputType>:
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_GPIO_SetPinSpeed>:
{
 80046f6:	b480      	push	{r7}
 80046f8:	b08b      	sub	sp, #44	@ 0x2c
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	613b      	str	r3, [r7, #16]
  return result;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2103      	movs	r1, #3
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	61fb      	str	r3, [r7, #28]
  return result;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800474a:	2320      	movs	r3, #32
 800474c:	e003      	b.n	8004756 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	431a      	orrs	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	372c      	adds	r7, #44	@ 0x2c
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_GPIO_SetPinPull>:
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	@ 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	613b      	str	r3, [r7, #16]
  return result;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004796:	2320      	movs	r3, #32
 8004798:	e003      	b.n	80047a2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2103      	movs	r1, #3
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	401a      	ands	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	61fb      	str	r3, [r7, #28]
  return result;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80047c4:	2320      	movs	r3, #32
 80047c6:	e003      	b.n	80047d0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	60da      	str	r2, [r3, #12]
}
 80047de:	bf00      	nop
 80047e0:	372c      	adds	r7, #44	@ 0x2c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_GPIO_SetAFPin_0_7>:
{
 80047ea:	b480      	push	{r7}
 80047ec:	b08b      	sub	sp, #44	@ 0x2c
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	613b      	str	r3, [r7, #16]
  return result;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	210f      	movs	r1, #15
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	61fb      	str	r3, [r7, #28]
  return result;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800483e:	2320      	movs	r3, #32
 8004840:	e003      	b.n	800484a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	372c      	adds	r7, #44	@ 0x2c
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_GPIO_SetAFPin_8_15>:
{
 8004864:	b480      	push	{r7}
 8004866:	b08b      	sub	sp, #44	@ 0x2c
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	613b      	str	r3, [r7, #16]
  return result;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800488c:	2320      	movs	r3, #32
 800488e:	e003      	b.n	8004898 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	210f      	movs	r1, #15
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	61fb      	str	r3, [r7, #28]
  return result;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e003      	b.n	80048c8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80048d6:	bf00      	nop
 80048d8:	372c      	adds	r7, #44	@ 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b08a      	sub	sp, #40	@ 0x28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	617b      	str	r3, [r7, #20]
  return result;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <LL_GPIO_Init+0x2e>
    return 32U;
 800490c:	2320      	movs	r3, #32
 800490e:	e003      	b.n	8004918 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800491a:	e057      	b.n	80049cc <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	4013      	ands	r3, r2
 800492a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d049      	beq.n	80049c6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d003      	beq.n	8004942 <LL_GPIO_Init+0x60>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d10d      	bne.n	800495e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	461a      	mov	r2, r3
 8004948:	6a39      	ldr	r1, [r7, #32]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fed3 	bl	80046f6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	461a      	mov	r2, r3
 8004956:	6a39      	ldr	r1, [r7, #32]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff feb4 	bl	80046c6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	461a      	mov	r2, r3
 8004964:	6a39      	ldr	r1, [r7, #32]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ff02 	bl	8004770 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d121      	bne.n	80049b8 <LL_GPIO_Init+0xd6>
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	60bb      	str	r3, [r7, #8]
  return result;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <LL_GPIO_Init+0xac>
    return 32U;
 800498a:	2320      	movs	r3, #32
 800498c:	e003      	b.n	8004996 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	fab3 f383 	clz	r3, r3
 8004994:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004996:	2b07      	cmp	r3, #7
 8004998:	d807      	bhi.n	80049aa <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	461a      	mov	r2, r3
 80049a0:	6a39      	ldr	r1, [r7, #32]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff21 	bl	80047ea <LL_GPIO_SetAFPin_0_7>
 80049a8:	e006      	b.n	80049b8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff56 	bl	8004864 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	461a      	mov	r2, r3
 80049be:	6a39      	ldr	r1, [r7, #32]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fe43 	bl	800464c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	3301      	adds	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1a0      	bne.n	800491c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3728      	adds	r7, #40	@ 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <LL_RCC_GetSysClkSource+0x18>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800

08004a00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a04:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <LL_RCC_GetAHBPrescaler+0x18>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800

08004a1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a20:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a3c:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <LL_RCC_PLL_GetMainSource+0x18>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800

08004a70 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <LL_RCC_PLL_GetN+0x18>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40023800 	.word	0x40023800

08004a8c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004a90:	4b04      	ldr	r3, [pc, #16]	@ (8004aa4 <LL_RCC_PLL_GetP+0x18>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <LL_RCC_PLL_GetDivider+0x18>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800

08004ac4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004acc:	f000 f820 	bl	8004b10 <RCC_GetSystemClockFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f83e 	bl	8004b5c <RCC_GetHCLKClockFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f84c 	bl	8004b88 <RCC_GetPCLK1ClockFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f858 	bl	8004bb0 <RCC_GetPCLK2ClockFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60da      	str	r2, [r3, #12]
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004b1a:	f7ff ff63 	bl	80049e4 <LL_RCC_GetSysClkSource>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d00c      	beq.n	8004b3e <RCC_GetSystemClockFreq+0x2e>
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d80f      	bhi.n	8004b48 <RCC_GetSystemClockFreq+0x38>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <RCC_GetSystemClockFreq+0x22>
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d003      	beq.n	8004b38 <RCC_GetSystemClockFreq+0x28>
 8004b30:	e00a      	b.n	8004b48 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <RCC_GetSystemClockFreq+0x48>)
 8004b34:	607b      	str	r3, [r7, #4]
      break;
 8004b36:	e00a      	b.n	8004b4e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <RCC_GetSystemClockFreq+0x48>)
 8004b3a:	607b      	str	r3, [r7, #4]
      break;
 8004b3c:	e007      	b.n	8004b4e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004b3e:	2008      	movs	r0, #8
 8004b40:	f000 f84a 	bl	8004bd8 <RCC_PLL_GetFreqDomain_SYS>
 8004b44:	6078      	str	r0, [r7, #4]
      break;
 8004b46:	e002      	b.n	8004b4e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <RCC_GetSystemClockFreq+0x48>)
 8004b4a:	607b      	str	r3, [r7, #4]
      break;
 8004b4c:	bf00      	nop
  }

  return frequency;
 8004b4e:	687b      	ldr	r3, [r7, #4]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	00f42400 	.word	0x00f42400

08004b5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004b64:	f7ff ff4c 	bl	8004a00 <LL_RCC_GetAHBPrescaler>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <RCC_GetHCLKClockFreq+0x28>)
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	40d3      	lsrs	r3, r2
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	0800c364 	.word	0x0800c364

08004b88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004b90:	f7ff ff44 	bl	8004a1c <LL_RCC_GetAPB1Prescaler>
 8004b94:	4603      	mov	r3, r0
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <RCC_GetPCLK1ClockFreq+0x24>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	40d3      	lsrs	r3, r2
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	0800c374 	.word	0x0800c374

08004bb0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004bb8:	f7ff ff3e 	bl	8004a38 <LL_RCC_GetAPB2Prescaler>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	40d3      	lsrs	r3, r2
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	0800c374 	.word	0x0800c374

08004bd8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004bec:	f7ff ff32 	bl	8004a54 <LL_RCC_PLL_GetMainSource>
 8004bf0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bfe:	d003      	beq.n	8004c08 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004c00:	e005      	b.n	8004c0e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004c04:	617b      	str	r3, [r7, #20]
      break;
 8004c06:	e005      	b.n	8004c14 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004c0a:	617b      	str	r3, [r7, #20]
      break;
 8004c0c:	e002      	b.n	8004c14 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004c10:	617b      	str	r3, [r7, #20]
      break;
 8004c12:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d113      	bne.n	8004c42 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c1a:	f7ff ff45 	bl	8004aa8 <LL_RCC_PLL_GetDivider>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fbb3 f4f2 	udiv	r4, r3, r2
 8004c26:	f7ff ff23 	bl	8004a70 <LL_RCC_PLL_GetN>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	fb03 f404 	mul.w	r4, r3, r4
 8004c30:	f7ff ff2c 	bl	8004a8c <LL_RCC_PLL_GetP>
 8004c34:	4603      	mov	r3, r0
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	3301      	adds	r3, #1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c40:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004c42:	693b      	ldr	r3, [r7, #16]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}
 8004c4c:	00f42400 	.word	0x00f42400

08004c50 <LL_SPI_IsEnabled>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b40      	cmp	r3, #64	@ 0x40
 8004c62:	d101      	bne.n	8004c68 <LL_SPI_IsEnabled+0x18>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <LL_SPI_IsEnabled+0x1a>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_SPI_SetCRCPolynomial>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffd3 	bl	8004c50 <LL_SPI_IsEnabled>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d139      	bne.n	8004d24 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cb8:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	6811      	ldr	r1, [r2, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	4311      	orrs	r1, r2
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	68d2      	ldr	r2, [r2, #12]
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	6912      	ldr	r2, [r2, #16]
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	6952      	ldr	r2, [r2, #20]
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6992      	ldr	r2, [r2, #24]
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	69d2      	ldr	r2, [r2, #28]
 8004ce8:	4311      	orrs	r1, r2
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	6a12      	ldr	r2, [r2, #32]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f023 0204 	bic.w	r2, r3, #4
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d12:	d105      	bne.n	8004d20 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffab 	bl	8004c76 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	61da      	str	r2, [r3, #28]
  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <LL_TIM_SetPrescaler>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_TIM_SetAutoReload>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <LL_TIM_SetRepetitionCounter>:
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_TIM_OC_SetCompareCH1>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <LL_TIM_OC_SetCompareCH2>:
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_TIM_OC_SetCompareCH3>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_TIM_OC_SetCompareCH4>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3d      	ldr	r2, [pc, #244]	@ (8004f28 <LL_TIM_Init+0x108>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <LL_TIM_Init+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <LL_TIM_Init+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3a      	ldr	r2, [pc, #232]	@ (8004f2c <LL_TIM_Init+0x10c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <LL_TIM_Init+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a39      	ldr	r2, [pc, #228]	@ (8004f30 <LL_TIM_Init+0x110>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <LL_TIM_Init+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a38      	ldr	r2, [pc, #224]	@ (8004f34 <LL_TIM_Init+0x114>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <LL_TIM_Init+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a37      	ldr	r2, [pc, #220]	@ (8004f38 <LL_TIM_Init+0x118>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d106      	bne.n	8004e6e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <LL_TIM_Init+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d027      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	@ (8004f2c <LL_TIM_Init+0x10c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d023      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a29      	ldr	r2, [pc, #164]	@ (8004f30 <LL_TIM_Init+0x110>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a28      	ldr	r2, [pc, #160]	@ (8004f34 <LL_TIM_Init+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <LL_TIM_Init+0x118>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <LL_TIM_Init+0x11c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	@ (8004f40 <LL_TIM_Init+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <LL_TIM_Init+0x124>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	@ (8004f48 <LL_TIM_Init+0x128>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	@ (8004f4c <LL_TIM_Init+0x12c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <LL_TIM_Init+0xae>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	@ (8004f50 <LL_TIM_Init+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d106      	bne.n	8004edc <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff34 	bl	8004d56 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff20 	bl	8004d3a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a0a      	ldr	r2, [pc, #40]	@ (8004f28 <LL_TIM_Init+0x108>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <LL_TIM_Init+0xea>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a0c      	ldr	r2, [pc, #48]	@ (8004f38 <LL_TIM_Init+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d105      	bne.n	8004f16 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff2e 	bl	8004d72 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ff71 	bl	8004dfe <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	40001800 	.word	0x40001800
 8004f4c:	40001c00 	.word	0x40001c00
 8004f50:	40002000 	.word	0x40002000

08004f54 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	d027      	beq.n	8004fbc <LL_TIM_OC_Init+0x68>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	d82a      	bhi.n	8004fca <LL_TIM_OC_Init+0x76>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7a:	d018      	beq.n	8004fae <LL_TIM_OC_Init+0x5a>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f82:	d822      	bhi.n	8004fca <LL_TIM_OC_Init+0x76>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d003      	beq.n	8004f92 <LL_TIM_OC_Init+0x3e>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d007      	beq.n	8004fa0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004f90:	e01b      	b.n	8004fca <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f81f 	bl	8004fd8 <OC1Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9e:	e015      	b.n	8004fcc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f884 	bl	80050b0 <OC2Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e00e      	b.n	8004fcc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f8ed 	bl	8005190 <OC3Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fba:	e007      	b.n	8004fcc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f956 	bl	8005270 <OC4Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc8:	e000      	b.n	8004fcc <LL_TIM_OC_Init+0x78>
      break;
 8004fca:	bf00      	nop
  }

  return result;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0202 	bic.w	r2, r3, #2
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <OC1Config+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <OC1Config+0x6a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <OC1Config+0xd4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d11e      	bne.n	8005080 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0208 	bic.w	r2, r3, #8
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0204 	bic.w	r2, r3, #4
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fe7b 	bl	8004d8e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40010400 	.word	0x40010400

080050b0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0220 	bic.w	r2, r3, #32
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1d      	ldr	r2, [pc, #116]	@ (8005188 <OC2Config+0xd8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <OC2Config+0x70>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <OC2Config+0xdc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d11f      	bne.n	8005160 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	019b      	lsls	r3, r3, #6
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	019b      	lsls	r3, r3, #6
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe19 	bl	8004daa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400

08005190 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <OC3Config+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <OC3Config+0x6e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	@ (800526c <OC3Config+0xdc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d11f      	bne.n	800523e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fdb8 	bl	8004dc6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	031b      	lsls	r3, r3, #12
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a11      	ldr	r2, [pc, #68]	@ (8005318 <OC4Config+0xa8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <OC4Config+0x70>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a10      	ldr	r2, [pc, #64]	@ (800531c <OC4Config+0xac>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d107      	bne.n	80052f0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	019b      	lsls	r3, r3, #6
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fd6d 	bl	8004de2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <LL_USART_IsEnabled>:
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_USART_SetStopBitsLength>:
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_USART_SetHWFlowCtrl>:
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	615a      	str	r2, [r3, #20]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LL_USART_SetBaudRate>:
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b0c0      	sub	sp, #256	@ 0x100
 800539a:	af00      	add	r7, sp, #0
 800539c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053a0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80053a4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80053a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b4:	f040 810c 	bne.w	80055d0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80053b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	6639      	str	r1, [r7, #96]	@ 0x60
 80053d2:	415b      	adcs	r3, r3
 80053d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80053da:	4621      	mov	r1, r4
 80053dc:	eb12 0801 	adds.w	r8, r2, r1
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb43 0901 	adc.w	r9, r3, r1
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053fa:	4690      	mov	r8, r2
 80053fc:	4699      	mov	r9, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	eb18 0303 	adds.w	r3, r8, r3
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005408:	462b      	mov	r3, r5
 800540a:	eb49 0303 	adc.w	r3, r9, r3
 800540e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005412:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005416:	2200      	movs	r2, #0
 8005418:	469a      	mov	sl, r3
 800541a:	4693      	mov	fp, r2
 800541c:	eb1a 030a 	adds.w	r3, sl, sl
 8005420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005422:	eb4b 030b 	adc.w	r3, fp, fp
 8005426:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800542c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005430:	f7fb fbba 	bl	8000ba8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b64      	ldr	r3, [pc, #400]	@ (80055cc <LL_USART_SetBaudRate+0x238>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	b29b      	uxth	r3, r3
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	b29c      	uxth	r4, r3
 8005446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005450:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005454:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	6539      	str	r1, [r7, #80]	@ 0x50
 8005460:	415b      	adcs	r3, r3
 8005462:	657b      	str	r3, [r7, #84]	@ 0x54
 8005464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005468:	4641      	mov	r1, r8
 800546a:	1851      	adds	r1, r2, r1
 800546c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800546e:	4649      	mov	r1, r9
 8005470:	414b      	adcs	r3, r1
 8005472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005480:	4659      	mov	r1, fp
 8005482:	00cb      	lsls	r3, r1, #3
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548a:	4651      	mov	r1, sl
 800548c:	00ca      	lsls	r2, r1, #3
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	4603      	mov	r3, r0
 8005494:	4642      	mov	r2, r8
 8005496:	189b      	adds	r3, r3, r2
 8005498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800549c:	464b      	mov	r3, r9
 800549e:	460a      	mov	r2, r1
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80054b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80054ba:	460b      	mov	r3, r1
 80054bc:	18db      	adds	r3, r3, r3
 80054be:	643b      	str	r3, [r7, #64]	@ 0x40
 80054c0:	4613      	mov	r3, r2
 80054c2:	eb42 0303 	adc.w	r3, r2, r3
 80054c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80054d0:	f7fb fb6a 	bl	8000ba8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	4b3c      	ldr	r3, [pc, #240]	@ (80055cc <LL_USART_SetBaudRate+0x238>)
 80054dc:	fba3 2301 	umull	r2, r3, r3, r1
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	2264      	movs	r2, #100	@ 0x64
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	1acb      	subs	r3, r1, r3
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054f0:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <LL_USART_SetBaudRate+0x238>)
 80054f2:	fba3 2302 	umull	r2, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005502:	b29b      	uxth	r3, r3
 8005504:	4423      	add	r3, r4
 8005506:	b29c      	uxth	r4, r3
 8005508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005512:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005516:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800551a:	4642      	mov	r2, r8
 800551c:	464b      	mov	r3, r9
 800551e:	1891      	adds	r1, r2, r2
 8005520:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005522:	415b      	adcs	r3, r3
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005526:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800552a:	4641      	mov	r1, r8
 800552c:	1851      	adds	r1, r2, r1
 800552e:	6339      	str	r1, [r7, #48]	@ 0x30
 8005530:	4649      	mov	r1, r9
 8005532:	414b      	adcs	r3, r1
 8005534:	637b      	str	r3, [r7, #52]	@ 0x34
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005542:	4659      	mov	r1, fp
 8005544:	00cb      	lsls	r3, r1, #3
 8005546:	4651      	mov	r1, sl
 8005548:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554c:	4651      	mov	r1, sl
 800554e:	00ca      	lsls	r2, r1, #3
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	4603      	mov	r3, r0
 8005556:	4642      	mov	r2, r8
 8005558:	189b      	adds	r3, r3, r2
 800555a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800555e:	464b      	mov	r3, r9
 8005560:	460a      	mov	r2, r1
 8005562:	eb42 0303 	adc.w	r3, r2, r3
 8005566:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800556a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005574:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005578:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800557c:	460b      	mov	r3, r1
 800557e:	18db      	adds	r3, r3, r3
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005582:	4613      	mov	r3, r2
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800558e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005592:	f7fb fb09 	bl	8000ba8 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <LL_USART_SetBaudRate+0x238>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	@ 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	3332      	adds	r3, #50	@ 0x32
 80055ae:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <LL_USART_SetBaudRate+0x238>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	b29b      	uxth	r3, r3
 80055be:	4423      	add	r3, r4
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c8:	609a      	str	r2, [r3, #8]
}
 80055ca:	e108      	b.n	80057de <LL_USART_SetBaudRate+0x44a>
 80055cc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80055d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055da:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055de:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80055e2:	4642      	mov	r2, r8
 80055e4:	464b      	mov	r3, r9
 80055e6:	1891      	adds	r1, r2, r2
 80055e8:	6239      	str	r1, [r7, #32]
 80055ea:	415b      	adcs	r3, r3
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f2:	4641      	mov	r1, r8
 80055f4:	1854      	adds	r4, r2, r1
 80055f6:	4649      	mov	r1, r9
 80055f8:	eb43 0501 	adc.w	r5, r3, r1
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005618:	464b      	mov	r3, r9
 800561a:	eb45 0303 	adc.w	r3, r5, r3
 800561e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005622:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800562c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800563c:	4629      	mov	r1, r5
 800563e:	008b      	lsls	r3, r1, #2
 8005640:	4621      	mov	r1, r4
 8005642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005646:	4621      	mov	r1, r4
 8005648:	008a      	lsls	r2, r1, #2
 800564a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800564e:	f7fb faab 	bl	8000ba8 <__aeabi_uldivmod>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4b65      	ldr	r3, [pc, #404]	@ (80057ec <LL_USART_SetBaudRate+0x458>)
 8005658:	fba3 2302 	umull	r2, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	b29b      	uxth	r3, r3
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	b29c      	uxth	r4, r3
 8005664:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800566e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005672:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005676:	4642      	mov	r2, r8
 8005678:	464b      	mov	r3, r9
 800567a:	1891      	adds	r1, r2, r2
 800567c:	61b9      	str	r1, [r7, #24]
 800567e:	415b      	adcs	r3, r3
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005686:	4641      	mov	r1, r8
 8005688:	1851      	adds	r1, r2, r1
 800568a:	6139      	str	r1, [r7, #16]
 800568c:	4649      	mov	r1, r9
 800568e:	414b      	adcs	r3, r1
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800569e:	4659      	mov	r1, fp
 80056a0:	00cb      	lsls	r3, r1, #3
 80056a2:	4651      	mov	r1, sl
 80056a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a8:	4651      	mov	r1, sl
 80056aa:	00ca      	lsls	r2, r1, #3
 80056ac:	4610      	mov	r0, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	4603      	mov	r3, r0
 80056b2:	4642      	mov	r2, r8
 80056b4:	189b      	adds	r3, r3, r2
 80056b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ba:	464b      	mov	r3, r9
 80056bc:	460a      	mov	r2, r1
 80056be:	eb42 0303 	adc.w	r3, r2, r3
 80056c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80056e0:	4649      	mov	r1, r9
 80056e2:	008b      	lsls	r3, r1, #2
 80056e4:	4641      	mov	r1, r8
 80056e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ea:	4641      	mov	r1, r8
 80056ec:	008a      	lsls	r2, r1, #2
 80056ee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80056f2:	f7fb fa59 	bl	8000ba8 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ec <LL_USART_SetBaudRate+0x458>)
 80056fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2264      	movs	r2, #100	@ 0x64
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	3332      	adds	r3, #50	@ 0x32
 8005710:	4a36      	ldr	r2, [pc, #216]	@ (80057ec <LL_USART_SetBaudRate+0x458>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	b29b      	uxth	r3, r3
 800571a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800571e:	b29b      	uxth	r3, r3
 8005720:	4423      	add	r3, r4
 8005722:	b29c      	uxth	r4, r3
 8005724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005728:	2200      	movs	r2, #0
 800572a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800572c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800572e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005732:	4642      	mov	r2, r8
 8005734:	464b      	mov	r3, r9
 8005736:	1891      	adds	r1, r2, r2
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	415b      	adcs	r3, r3
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005742:	4641      	mov	r1, r8
 8005744:	1851      	adds	r1, r2, r1
 8005746:	6039      	str	r1, [r7, #0]
 8005748:	4649      	mov	r1, r9
 800574a:	414b      	adcs	r3, r1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800575a:	4659      	mov	r1, fp
 800575c:	00cb      	lsls	r3, r1, #3
 800575e:	4651      	mov	r1, sl
 8005760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005764:	4651      	mov	r1, sl
 8005766:	00ca      	lsls	r2, r1, #3
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	4603      	mov	r3, r0
 800576e:	4642      	mov	r2, r8
 8005770:	189b      	adds	r3, r3, r2
 8005772:	673b      	str	r3, [r7, #112]	@ 0x70
 8005774:	464b      	mov	r3, r9
 8005776:	460a      	mov	r2, r1
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	677b      	str	r3, [r7, #116]	@ 0x74
 800577e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005782:	2200      	movs	r2, #0
 8005784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8005794:	4649      	mov	r1, r9
 8005796:	008b      	lsls	r3, r1, #2
 8005798:	4641      	mov	r1, r8
 800579a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579e:	4641      	mov	r1, r8
 80057a0:	008a      	lsls	r2, r1, #2
 80057a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80057a6:	f7fb f9ff 	bl	8000ba8 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <LL_USART_SetBaudRate+0x458>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	@ 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	@ 0x32
 80057c2:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <LL_USART_SetBaudRate+0x458>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4423      	add	r3, r4
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	bf00      	nop
 80057e0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057e4:	46bd      	mov	sp, r7
 80057e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ea:	bf00      	nop
 80057ec:	51eb851f 	.word	0x51eb851f

080057f0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fd8c 	bl	8005320 <LL_USART_IsEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d15e      	bne.n	80058cc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005816:	f023 030c 	bic.w	r3, r3, #12
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	6851      	ldr	r1, [r2, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	68d2      	ldr	r2, [r2, #12]
 8005822:	4311      	orrs	r1, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	6912      	ldr	r2, [r2, #16]
 8005828:	4311      	orrs	r1, r2
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	6992      	ldr	r2, [r2, #24]
 800582e:	430a      	orrs	r2, r1
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fd83 	bl	8005348 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff fd90 	bl	800536e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f936 	bl	8004ac4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1f      	ldr	r2, [pc, #124]	@ (80058d8 <LL_USART_Init+0xe8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d102      	bne.n	8005866 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e021      	b.n	80058aa <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <LL_USART_Init+0xec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d102      	bne.n	8005874 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e01a      	b.n	80058aa <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <LL_USART_Init+0xf0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d102      	bne.n	8005882 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e013      	b.n	80058aa <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <LL_USART_Init+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d102      	bne.n	8005890 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e00c      	b.n	80058aa <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <LL_USART_Init+0xf8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d102      	bne.n	800589e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	e005      	b.n	80058aa <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a12      	ldr	r2, [pc, #72]	@ (80058ec <LL_USART_Init+0xfc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fd64 	bl	8005394 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80058cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40011000 	.word	0x40011000
 80058dc:	40004400 	.word	0x40004400
 80058e0:	40004800 	.word	0x40004800
 80058e4:	40011400 	.word	0x40011400
 80058e8:	40004c00 	.word	0x40004c00
 80058ec:	40005000 	.word	0x40005000

080058f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f0:	b084      	sub	sp, #16
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	f107 001c 	add.w	r0, r7, #28
 80058fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005902:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005906:	2b01      	cmp	r3, #1
 8005908:	d123      	bne.n	8005952 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800591e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005932:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fae8 	bl	8006f1c <USB_CoreReset>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e01b      	b.n	800598a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 fadc 	bl	8006f1c <USB_CoreReset>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005968:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38
 800597c:	e005      	b.n	800598a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800598a:	7fbb      	ldrb	r3, [r7, #30]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10b      	bne.n	80059a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f043 0206 	orr.w	r2, r3, #6
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr

080059b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d165      	bne.n	8005a98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a41      	ldr	r2, [pc, #260]	@ (8005ad4 <USB_SetTurnaroundTime+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d906      	bls.n	80059e2 <USB_SetTurnaroundTime+0x2a>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4a40      	ldr	r2, [pc, #256]	@ (8005ad8 <USB_SetTurnaroundTime+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d202      	bcs.n	80059e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059dc:	230f      	movs	r3, #15
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e062      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad8 <USB_SetTurnaroundTime+0x120>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d306      	bcc.n	80059f8 <USB_SetTurnaroundTime+0x40>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a3b      	ldr	r2, [pc, #236]	@ (8005adc <USB_SetTurnaroundTime+0x124>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d202      	bcs.n	80059f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059f2:	230e      	movs	r3, #14
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e057      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a38      	ldr	r2, [pc, #224]	@ (8005adc <USB_SetTurnaroundTime+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d306      	bcc.n	8005a0e <USB_SetTurnaroundTime+0x56>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a37      	ldr	r2, [pc, #220]	@ (8005ae0 <USB_SetTurnaroundTime+0x128>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d202      	bcs.n	8005a0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a08:	230d      	movs	r3, #13
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e04c      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4a33      	ldr	r2, [pc, #204]	@ (8005ae0 <USB_SetTurnaroundTime+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d306      	bcc.n	8005a24 <USB_SetTurnaroundTime+0x6c>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4a32      	ldr	r2, [pc, #200]	@ (8005ae4 <USB_SetTurnaroundTime+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d802      	bhi.n	8005a24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a1e:	230c      	movs	r3, #12
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e041      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <USB_SetTurnaroundTime+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d906      	bls.n	8005a3a <USB_SetTurnaroundTime+0x82>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae8 <USB_SetTurnaroundTime+0x130>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d802      	bhi.n	8005a3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a34:	230b      	movs	r3, #11
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e036      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <USB_SetTurnaroundTime+0x130>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d906      	bls.n	8005a50 <USB_SetTurnaroundTime+0x98>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <USB_SetTurnaroundTime+0x134>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d802      	bhi.n	8005a50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e02b      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4a26      	ldr	r2, [pc, #152]	@ (8005aec <USB_SetTurnaroundTime+0x134>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d906      	bls.n	8005a66 <USB_SetTurnaroundTime+0xae>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a25      	ldr	r2, [pc, #148]	@ (8005af0 <USB_SetTurnaroundTime+0x138>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d202      	bcs.n	8005a66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a60:	2309      	movs	r3, #9
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e020      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4a21      	ldr	r2, [pc, #132]	@ (8005af0 <USB_SetTurnaroundTime+0x138>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d306      	bcc.n	8005a7c <USB_SetTurnaroundTime+0xc4>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a20      	ldr	r2, [pc, #128]	@ (8005af4 <USB_SetTurnaroundTime+0x13c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d802      	bhi.n	8005a7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a76:	2308      	movs	r3, #8
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e015      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005af4 <USB_SetTurnaroundTime+0x13c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d906      	bls.n	8005a92 <USB_SetTurnaroundTime+0xda>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	@ (8005af8 <USB_SetTurnaroundTime+0x140>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d202      	bcs.n	8005a92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a8c:	2307      	movs	r3, #7
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e00a      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a92:	2306      	movs	r3, #6
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e007      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a9e:	2309      	movs	r3, #9
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e001      	b.n	8005aa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005aa4:	2309      	movs	r3, #9
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	029b      	lsls	r3, r3, #10
 8005abc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	00d8acbf 	.word	0x00d8acbf
 8005ad8:	00e4e1c0 	.word	0x00e4e1c0
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	01067380 	.word	0x01067380
 8005ae4:	011a499f 	.word	0x011a499f
 8005ae8:	01312cff 	.word	0x01312cff
 8005aec:	014ca43f 	.word	0x014ca43f
 8005af0:	016e3600 	.word	0x016e3600
 8005af4:	01a6ab1f 	.word	0x01a6ab1f
 8005af8:	01e84800 	.word	0x01e84800

08005afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f043 0201 	orr.w	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d115      	bne.n	8005b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b6e:	200a      	movs	r0, #10
 8005b70:	f7fc fbda 	bl	8002328 <HAL_Delay>
      ms += 10U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	330a      	adds	r3, #10
 8005b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 f93f 	bl	8006dfe <USB_GetMode>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d01e      	beq.n	8005bc4 <USB_SetCurrentMode+0x84>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b8a:	d9f0      	bls.n	8005b6e <USB_SetCurrentMode+0x2e>
 8005b8c:	e01a      	b.n	8005bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d115      	bne.n	8005bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	f7fc fbc1 	bl	8002328 <HAL_Delay>
      ms += 10U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	330a      	adds	r3, #10
 8005baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f926 	bl	8006dfe <USB_GetMode>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USB_SetCurrentMode+0x84>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bbc:	d9f0      	bls.n	8005ba0 <USB_SetCurrentMode+0x60>
 8005bbe:	e001      	b.n	8005bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e005      	b.n	8005bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bc8:	d101      	bne.n	8005bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd8:	b084      	sub	sp, #16
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	e009      	b.n	8005c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3340      	adds	r3, #64	@ 0x40
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b0e      	cmp	r3, #14
 8005c10:	d9f2      	bls.n	8005bf8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11c      	bne.n	8005c54 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c52:	e00b      	b.n	8005c6c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c72:	461a      	mov	r2, r3
 8005c74:	2300      	movs	r3, #0
 8005c76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10d      	bne.n	8005c9c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f968 	bl	8005f60 <USB_SetDevSpeed>
 8005c90:	e008      	b.n	8005ca4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c92:	2101      	movs	r1, #1
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f963 	bl	8005f60 <USB_SetDevSpeed>
 8005c9a:	e003      	b.n	8005ca4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c9c:	2103      	movs	r1, #3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f95e 	bl	8005f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ca4:	2110      	movs	r1, #16
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8fa 	bl	8005ea0 <USB_FlushTxFifo>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f924 	bl	8005f04 <USB_FlushRxFifo>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	e043      	b.n	8005d78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d06:	d118      	bne.n	8005d3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e013      	b.n	8005d4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d30:	461a      	mov	r2, r3
 8005d32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e008      	b.n	8005d4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3301      	adds	r3, #1
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d3b5      	bcc.n	8005cf0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	e043      	b.n	8005e12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da0:	d118      	bne.n	8005dd4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e013      	b.n	8005de6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e008      	b.n	8005de6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de0:	461a      	mov	r2, r3
 8005de2:	2300      	movs	r3, #0
 8005de4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df2:	461a      	mov	r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e04:	461a      	mov	r2, r3
 8005e06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e16:	461a      	mov	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d3b5      	bcc.n	8005d8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f043 0210 	orr.w	r2, r3, #16
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	4b10      	ldr	r3, [pc, #64]	@ (8005e9c <USB_DevInit+0x2c4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f043 0208 	orr.w	r2, r3, #8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d107      	bne.n	8005e8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e98:	b004      	add	sp, #16
 8005e9a:	4770      	bx	lr
 8005e9c:	803c3800 	.word	0x803c3800

08005ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eba:	d901      	bls.n	8005ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e01b      	b.n	8005ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	daf2      	bge.n	8005eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	019b      	lsls	r3, r3, #6
 8005ed0:	f043 0220 	orr.w	r2, r3, #32
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ee4:	d901      	bls.n	8005eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d0f0      	beq.n	8005ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f1c:	d901      	bls.n	8005f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e018      	b.n	8005f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	daf2      	bge.n	8005f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2210      	movs	r2, #16
 8005f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f40:	d901      	bls.n	8005f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e006      	b.n	8005f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d0f0      	beq.n	8005f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]
 8005fb6:	e00a      	b.n	8005fce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d002      	beq.n	8005fc4 <USB_GetDevSpeed+0x32>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d102      	bne.n	8005fca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	75fb      	strb	r3, [r7, #23]
 8005fc8:	e001      	b.n	8005fce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fca:	230f      	movs	r3, #15
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d13a      	bne.n	800606e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006016:	4313      	orrs	r3, r2
 8006018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d155      	bne.n	80060dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800604c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	059b      	lsls	r3, r3, #22
 8006052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006054:	4313      	orrs	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e036      	b.n	80060dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800608c:	4313      	orrs	r3, r2
 800608e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11a      	bne.n	80060dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	791b      	ldrb	r3, [r3, #4]
 80060c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060c2:	430b      	orrs	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d161      	bne.n	80061cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800611e:	d11f      	bne.n	8006160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	b29b      	uxth	r3, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b35      	ldr	r3, [pc, #212]	@ (800629c <USB_DeactivateEndpoint+0x1b0>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
 80061ca:	e060      	b.n	800628e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061e2:	d11f      	bne.n	8006224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800621e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	041b      	lsls	r3, r3, #16
 800623c:	43db      	mvns	r3, r3
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006244:	4013      	ands	r3, r2
 8006246:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	2101      	movs	r1, #1
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	43db      	mvns	r3, r3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006268:	4013      	ands	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	0159      	lsls	r1, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	440b      	add	r3, r1
 8006282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006286:	4619      	mov	r1, r3
 8006288:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <USB_DeactivateEndpoint+0x1b4>)
 800628a:	4013      	ands	r3, r2
 800628c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	ec337800 	.word	0xec337800
 80062a0:	eff37800 	.word	0xeff37800

080062a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 817f 	bne.w	80065c4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d132      	bne.n	8006334 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632c:	0cdb      	lsrs	r3, r3, #19
 800632e:	04db      	lsls	r3, r3, #19
 8006330:	6113      	str	r3, [r2, #16]
 8006332:	e097      	b.n	8006464 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800634e:	0cdb      	lsrs	r3, r3, #19
 8006350:	04db      	lsls	r3, r3, #19
 8006352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006372:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006376:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11a      	bne.n	80063b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b0:	6113      	str	r3, [r2, #16]
 80063b2:	e044      	b.n	800643e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4413      	add	r3, r2
 80063be:	1e5a      	subs	r2, r3, #1
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	8afb      	ldrh	r3, [r7, #22]
 80063da:	04d9      	lsls	r1, r3, #19
 80063dc:	4ba4      	ldr	r3, [pc, #656]	@ (8006670 <USB_EPStartXfer+0x3cc>)
 80063de:	400b      	ands	r3, r1
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	0148      	lsls	r0, r1, #5
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	4401      	add	r1, r0
 80063e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	791b      	ldrb	r3, [r3, #4]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d122      	bne.n	800643e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006412:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006416:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	8afb      	ldrh	r3, [r7, #22]
 8006428:	075b      	lsls	r3, r3, #29
 800642a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	0148      	lsls	r0, r1, #5
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	4401      	add	r1, r0
 8006436:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	0148      	lsls	r0, r1, #5
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	4401      	add	r1, r0
 800645c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d14b      	bne.n	8006502 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	791b      	ldrb	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d128      	bne.n	80064e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d110      	bne.n	80064c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e00f      	b.n	80064e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e166      	b.n	80067d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800651c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006520:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d015      	beq.n	8006556 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 814e 	beq.w	80067d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f303 	lsl.w	r3, r1, r3
 800654a:	69f9      	ldr	r1, [r7, #28]
 800654c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006550:	4313      	orrs	r3, r2
 8006552:	634b      	str	r3, [r1, #52]	@ 0x34
 8006554:	e13c      	b.n	80067d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d110      	bne.n	8006588 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006580:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e00f      	b.n	80065a8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	68d9      	ldr	r1, [r3, #12]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	b298      	uxth	r0, r3
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4603      	mov	r3, r0
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f9b9 	bl	8006934 <USB_WritePacket>
 80065c2:	e105      	b.n	80067d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065de:	0cdb      	lsrs	r3, r3, #19
 80065e0:	04db      	lsls	r3, r3, #19
 80065e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006602:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006606:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d132      	bne.n	8006674 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	0148      	lsls	r0, r1, #5
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	4401      	add	r1, r0
 8006644:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006648:	4313      	orrs	r3, r2
 800664a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006666:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800666a:	6113      	str	r3, [r2, #16]
 800666c:	e062      	b.n	8006734 <USB_EPStartXfer+0x490>
 800666e:	bf00      	nop
 8006670:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d123      	bne.n	80066c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	0148      	lsls	r0, r1, #5
 8006696:	69f9      	ldr	r1, [r7, #28]
 8006698:	4401      	add	r1, r0
 800669a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800669e:	4313      	orrs	r3, r2
 80066a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066c0:	6113      	str	r3, [r2, #16]
 80066c2:	e037      	b.n	8006734 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	8afa      	ldrh	r2, [r7, #22]
 80066e0:	fb03 f202 	mul.w	r2, r3, r2
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	8afb      	ldrh	r3, [r7, #22]
 80066f8:	04d9      	lsls	r1, r3, #19
 80066fa:	4b38      	ldr	r3, [pc, #224]	@ (80067dc <USB_EPStartXfer+0x538>)
 80066fc:	400b      	ands	r3, r1
 80066fe:	69b9      	ldr	r1, [r7, #24]
 8006700:	0148      	lsls	r0, r1, #5
 8006702:	69f9      	ldr	r1, [r7, #28]
 8006704:	4401      	add	r1, r0
 8006706:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006724:	69b9      	ldr	r1, [r7, #24]
 8006726:	0148      	lsls	r0, r1, #5
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	4401      	add	r1, r0
 800672c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006730:	4313      	orrs	r3, r2
 8006732:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10d      	bne.n	8006756 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68d9      	ldr	r1, [r3, #12]
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006752:	460a      	mov	r2, r1
 8006754:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	791b      	ldrb	r3, [r3, #4]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d128      	bne.n	80067b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d110      	bne.n	8006790 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006788:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e00f      	b.n	80067b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	1ff80000 	.word	0x1ff80000

080067e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d14a      	bne.n	8006894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006816:	f040 8086 	bne.w	8006926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	7812      	ldrb	r2, [r2, #0]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006838:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800683c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800686e:	4293      	cmp	r3, r2
 8006870:	d902      	bls.n	8006878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
          break;
 8006876:	e056      	b.n	8006926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800688c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006890:	d0e7      	beq.n	8006862 <USB_EPStopXfer+0x82>
 8006892:	e048      	b.n	8006926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ac:	d13b      	bne.n	8006926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006902:	4293      	cmp	r3, r2
 8006904:	d902      	bls.n	800690c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
          break;
 800690a:	e00c      	b.n	8006926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006924:	d0e7      	beq.n	80068f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
}
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006934:	b480      	push	{r7}
 8006936:	b089      	sub	sp, #36	@ 0x24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	460b      	mov	r3, r1
 8006944:	71fb      	strb	r3, [r7, #7]
 8006946:	4613      	mov	r3, r2
 8006948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d123      	bne.n	80069a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800695a:	88bb      	ldrh	r3, [r7, #4]
 800695c:	3303      	adds	r3, #3
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e018      	b.n	800699a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	031a      	lsls	r2, r3, #12
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4413      	add	r3, r2
 8006970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006974:	461a      	mov	r2, r3
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3301      	adds	r3, #1
 800698c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3301      	adds	r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3301      	adds	r3, #1
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d3e2      	bcc.n	8006968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3724      	adds	r7, #36	@ 0x24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b08b      	sub	sp, #44	@ 0x2c
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e014      	b.n	8006a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	3301      	adds	r3, #1
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	3301      	adds	r3, #1
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	3301      	adds	r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	3301      	adds	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	3301      	adds	r3, #1
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d3e6      	bcc.n	80069dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a0e:	8bfb      	ldrh	r3, [r7, #30]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01e      	beq.n	8006a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f107 0310 	add.w	r3, r7, #16
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	701a      	strb	r2, [r3, #0]
      i++;
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	3301      	adds	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a46:	8bfb      	ldrh	r3, [r7, #30]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a4c:	8bfb      	ldrh	r3, [r7, #30]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ea      	bne.n	8006a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	372c      	adds	r7, #44	@ 0x2c
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d12c      	bne.n	8006ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	db12      	blt.n	8006ab4 <USB_EPSetStall+0x54>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e02b      	b.n	8006b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db12      	blt.n	8006b0e <USB_EPSetStall+0xae>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d128      	bne.n	8006baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	791b      	ldrb	r3, [r3, #4]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d003      	beq.n	8006b88 <USB_EPClearStall+0x4c>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d138      	bne.n	8006bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e027      	b.n	8006bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d003      	beq.n	8006bda <USB_EPClearStall+0x9e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d10f      	bne.n	8006bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c82:	f023 0302 	bic.w	r3, r3, #2
 8006c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cb0:	f023 0303 	bic.w	r3, r3, #3
 8006cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	0c1b      	lsrs	r3, r3, #16
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	b29b      	uxth	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4013      	ands	r3, r2
 8006d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d94:	68bb      	ldr	r3, [r7, #8]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b087      	sub	sp, #28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	01db      	lsls	r3, r3, #7
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006df0:	68bb      	ldr	r3, [r7, #8]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006e38:	f023 0307 	bic.w	r3, r3, #7
 8006e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	333c      	adds	r3, #60	@ 0x3c
 8006e76:	3304      	adds	r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4a26      	ldr	r2, [pc, #152]	@ (8006f18 <USB_EP0_OutStart+0xb8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d90a      	bls.n	8006e9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e94:	d101      	bne.n	8006e9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e037      	b.n	8006f0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ec8:	f043 0318 	orr.w	r3, r3, #24
 8006ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006edc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10f      	bne.n	8006f08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	4f54300a 	.word	0x4f54300a

08006f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f34:	d901      	bls.n	8006f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e01b      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	daf2      	bge.n	8006f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f5e:	d901      	bls.n	8006f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e006      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d0f0      	beq.n	8006f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f90:	f002 fc9e 	bl	80098d0 <USBD_static_malloc>
 8006f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32b0      	adds	r2, #176	@ 0xb0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0d4      	b.n	800715a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f003 fb21 	bl	800a5fe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32b0      	adds	r2, #176	@ 0xb0
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32b0      	adds	r2, #176	@ 0xb0
 8006fd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d138      	bne.n	800705a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8007164 <USBD_CDC_Init+0x1e4>)
 8006fea:	7819      	ldrb	r1, [r3, #0]
 8006fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f002 fb49 	bl	800968a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8007164 <USBD_CDC_Init+0x1e4>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3324      	adds	r3, #36	@ 0x24
 800700e:	2201      	movs	r2, #1
 8007010:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007012:	4b55      	ldr	r3, [pc, #340]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007014:	7819      	ldrb	r1, [r3, #0]
 8007016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800701a:	2202      	movs	r2, #2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 fb34 	bl	800968a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007022:	4b51      	ldr	r3, [pc, #324]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 020f 	and.w	r2, r3, #15
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800703a:	2201      	movs	r2, #1
 800703c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800703e:	4b4b      	ldr	r3, [pc, #300]	@ (800716c <USBD_CDC_Init+0x1ec>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 020f 	and.w	r2, r3, #15
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	3326      	adds	r3, #38	@ 0x26
 8007054:	2210      	movs	r2, #16
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e035      	b.n	80070c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800705a:	4b42      	ldr	r3, [pc, #264]	@ (8007164 <USBD_CDC_Init+0x1e4>)
 800705c:	7819      	ldrb	r1, [r3, #0]
 800705e:	2340      	movs	r3, #64	@ 0x40
 8007060:	2202      	movs	r2, #2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f002 fb11 	bl	800968a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007068:	4b3e      	ldr	r3, [pc, #248]	@ (8007164 <USBD_CDC_Init+0x1e4>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3324      	adds	r3, #36	@ 0x24
 800707e:	2201      	movs	r2, #1
 8007080:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007082:	4b39      	ldr	r3, [pc, #228]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007084:	7819      	ldrb	r1, [r3, #0]
 8007086:	2340      	movs	r3, #64	@ 0x40
 8007088:	2202      	movs	r2, #2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f002 fafd 	bl	800968a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007090:	4b35      	ldr	r3, [pc, #212]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070a8:	2201      	movs	r2, #1
 80070aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070ac:	4b2f      	ldr	r3, [pc, #188]	@ (800716c <USBD_CDC_Init+0x1ec>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3326      	adds	r3, #38	@ 0x26
 80070c2:	2210      	movs	r2, #16
 80070c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070c6:	4b29      	ldr	r3, [pc, #164]	@ (800716c <USBD_CDC_Init+0x1ec>)
 80070c8:	7819      	ldrb	r1, [r3, #0]
 80070ca:	2308      	movs	r3, #8
 80070cc:	2203      	movs	r2, #3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f002 fadb 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070d4:	4b25      	ldr	r3, [pc, #148]	@ (800716c <USBD_CDC_Init+0x1ec>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3324      	adds	r3, #36	@ 0x24
 80070ea:	2201      	movs	r2, #1
 80070ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	33b0      	adds	r3, #176	@ 0xb0
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007124:	2302      	movs	r3, #2
 8007126:	e018      	b.n	800715a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	7c1b      	ldrb	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007130:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007132:	7819      	ldrb	r1, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800713a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f002 fb92 	bl	8009868 <USBD_LL_PrepareReceive>
 8007144:	e008      	b.n	8007158 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <USBD_CDC_Init+0x1e8>)
 8007148:	7819      	ldrb	r1, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007150:	2340      	movs	r3, #64	@ 0x40
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f002 fb88 	bl	8009868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000093 	.word	0x20000093
 8007168:	20000094 	.word	0x20000094
 800716c:	20000095 	.word	0x20000095

08007170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800717c:	4b3a      	ldr	r3, [pc, #232]	@ (8007268 <USBD_CDC_DeInit+0xf8>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 faa7 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007188:	4b37      	ldr	r3, [pc, #220]	@ (8007268 <USBD_CDC_DeInit+0xf8>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3324      	adds	r3, #36	@ 0x24
 800719e:	2200      	movs	r2, #0
 80071a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071a2:	4b32      	ldr	r3, [pc, #200]	@ (800726c <USBD_CDC_DeInit+0xfc>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 fa94 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071ae:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <USBD_CDC_DeInit+0xfc>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071c6:	2200      	movs	r2, #0
 80071c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <USBD_CDC_DeInit+0x100>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f002 fa80 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071d6:	4b26      	ldr	r3, [pc, #152]	@ (8007270 <USBD_CDC_DeInit+0x100>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	3324      	adds	r3, #36	@ 0x24
 80071ec:	2200      	movs	r2, #0
 80071ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007270 <USBD_CDC_DeInit+0x100>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3326      	adds	r3, #38	@ 0x26
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	@ 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01f      	beq.n	800725c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	33b0      	adds	r3, #176	@ 0xb0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32b0      	adds	r2, #176	@ 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	4618      	mov	r0, r3
 8007240:	f002 fb54 	bl	80098ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32b0      	adds	r2, #176	@ 0xb0
 800724e:	2100      	movs	r1, #0
 8007250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000093 	.word	0x20000093
 800726c:	20000094 	.word	0x20000094
 8007270:	20000095 	.word	0x20000095

08007274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	32b0      	adds	r2, #176	@ 0xb0
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e0bf      	b.n	8007424 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d050      	beq.n	8007352 <USBD_CDC_Setup+0xde>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	f040 80af 	bne.w	8007414 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03a      	beq.n	8007334 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da1b      	bge.n	8007300 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	33b0      	adds	r3, #176	@ 0xb0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	88d2      	ldrh	r2, [r2, #6]
 80072e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88db      	ldrh	r3, [r3, #6]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	bf28      	it	cs
 80072ee:	2307      	movcs	r3, #7
 80072f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	89fa      	ldrh	r2, [r7, #14]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd93 	bl	8008e24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80072fe:	e090      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	785a      	ldrb	r2, [r3, #1]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007310:	d803      	bhi.n	800731a <USBD_CDC_Setup+0xa6>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	e000      	b.n	800731c <USBD_CDC_Setup+0xa8>
 800731a:	2240      	movs	r2, #64	@ 0x40
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007322:	6939      	ldr	r1, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800732a:	461a      	mov	r2, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 fda5 	bl	8008e7c <USBD_CtlPrepareRx>
      break;
 8007332:	e076      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	33b0      	adds	r3, #176	@ 0xb0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7850      	ldrb	r0, [r2, #1]
 800734a:	2200      	movs	r2, #0
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	4798      	blx	r3
      break;
 8007350:	e067      	b.n	8007422 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b0b      	cmp	r3, #11
 8007358:	d851      	bhi.n	80073fe <USBD_CDC_Setup+0x18a>
 800735a:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <USBD_CDC_Setup+0xec>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007391 	.word	0x08007391
 8007364:	0800740d 	.word	0x0800740d
 8007368:	080073ff 	.word	0x080073ff
 800736c:	080073ff 	.word	0x080073ff
 8007370:	080073ff 	.word	0x080073ff
 8007374:	080073ff 	.word	0x080073ff
 8007378:	080073ff 	.word	0x080073ff
 800737c:	080073ff 	.word	0x080073ff
 8007380:	080073ff 	.word	0x080073ff
 8007384:	080073ff 	.word	0x080073ff
 8007388:	080073bb 	.word	0x080073bb
 800738c:	080073e5 	.word	0x080073e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b03      	cmp	r3, #3
 800739a:	d107      	bne.n	80073ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800739c:	f107 030a 	add.w	r3, r7, #10
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fd3d 	bl	8008e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073aa:	e032      	b.n	8007412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fcbb 	bl	8008d2a <USBD_CtlError>
            ret = USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	75fb      	strb	r3, [r7, #23]
          break;
 80073b8:	e02b      	b.n	8007412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d107      	bne.n	80073d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073c6:	f107 030d 	add.w	r3, r7, #13
 80073ca:	2201      	movs	r2, #1
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 fd28 	bl	8008e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d4:	e01d      	b.n	8007412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fca6 	bl	8008d2a <USBD_CtlError>
            ret = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
          break;
 80073e2:	e016      	b.n	8007412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d00f      	beq.n	8007410 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fc99 	bl	8008d2a <USBD_CtlError>
            ret = USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073fc:	e008      	b.n	8007410 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fc92 	bl	8008d2a <USBD_CtlError>
          ret = USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
          break;
 800740a:	e002      	b.n	8007412 <USBD_CDC_Setup+0x19e>
          break;
 800740c:	bf00      	nop
 800740e:	e008      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
          break;
 8007410:	bf00      	nop
      }
      break;
 8007412:	e006      	b.n	8007422 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fc87 	bl	8008d2a <USBD_CtlError>
      ret = USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	bf00      	nop
  }

  return (uint8_t)ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800743e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	@ 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007452:	2303      	movs	r3, #3
 8007454:	e065      	b.n	8007522 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	32b0      	adds	r2, #176	@ 0xb0
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	3318      	adds	r3, #24
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02f      	beq.n	80074e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	f003 020f 	and.w	r2, r3, #15
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	3318      	adds	r3, #24
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	f003 010f 	and.w	r1, r3, #15
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	460b      	mov	r3, r1
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4403      	add	r3, r0
 80074a8:	331c      	adds	r3, #28
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d112      	bne.n	80074e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	f003 020f 	and.w	r2, r3, #15
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3318      	adds	r3, #24
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074d2:	78f9      	ldrb	r1, [r7, #3]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f9a4 	bl	8009826 <USBD_LL_Transmit>
 80074de:	e01f      	b.n	8007520 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	33b0      	adds	r3, #176	@ 0xb0
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	33b0      	adds	r3, #176	@ 0xb0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32b0      	adds	r2, #176	@ 0xb0
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32b0      	adds	r2, #176	@ 0xb0
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007558:	2303      	movs	r3, #3
 800755a:	e01a      	b.n	8007592 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 f9a2 	bl	80098aa <USBD_LL_GetRxDataSize>
 8007566:	4602      	mov	r2, r0
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	33b0      	adds	r3, #176	@ 0xb0
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800758c:	4611      	mov	r1, r2
 800758e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	@ 0xb0
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e024      	b.n	8007606 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	33b0      	adds	r3, #176	@ 0xb0
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d019      	beq.n	8007604 <USBD_CDC_EP0_RxReady+0x6a>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075d6:	2bff      	cmp	r3, #255	@ 0xff
 80075d8:	d014      	beq.n	8007604 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	33b0      	adds	r3, #176	@ 0xb0
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80075f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	22ff      	movs	r2, #255	@ 0xff
 8007600:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007618:	2182      	movs	r1, #130	@ 0x82
 800761a:	4818      	ldr	r0, [pc, #96]	@ (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800761c:	f000 fd4f 	bl	80080be <USBD_GetEpDesc>
 8007620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007622:	2101      	movs	r1, #1
 8007624:	4815      	ldr	r0, [pc, #84]	@ (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007626:	f000 fd4a 	bl	80080be <USBD_GetEpDesc>
 800762a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800762c:	2181      	movs	r1, #129	@ 0x81
 800762e:	4813      	ldr	r0, [pc, #76]	@ (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007630:	f000 fd45 	bl	80080be <USBD_GetEpDesc>
 8007634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2210      	movs	r2, #16
 8007640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2200      	movs	r2, #0
 800764c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007650:	711a      	strb	r2, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007664:	711a      	strb	r2, [r3, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2243      	movs	r2, #67	@ 0x43
 800766e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000050 	.word	0x20000050

08007680 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007688:	2182      	movs	r1, #130	@ 0x82
 800768a:	4818      	ldr	r0, [pc, #96]	@ (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800768c:	f000 fd17 	bl	80080be <USBD_GetEpDesc>
 8007690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007692:	2101      	movs	r1, #1
 8007694:	4815      	ldr	r0, [pc, #84]	@ (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007696:	f000 fd12 	bl	80080be <USBD_GetEpDesc>
 800769a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800769c:	2181      	movs	r1, #129	@ 0x81
 800769e:	4813      	ldr	r0, [pc, #76]	@ (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076a0:	f000 fd0d 	bl	80080be <USBD_GetEpDesc>
 80076a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2210      	movs	r2, #16
 80076b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2200      	movs	r2, #0
 80076bc:	711a      	strb	r2, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f042 0202 	orr.w	r2, r2, #2
 80076c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	711a      	strb	r2, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f042 0202 	orr.w	r2, r2, #2
 80076d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2243      	movs	r2, #67	@ 0x43
 80076de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076e0:	4b02      	ldr	r3, [pc, #8]	@ (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000050 	.word	0x20000050

080076f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076f8:	2182      	movs	r1, #130	@ 0x82
 80076fa:	4818      	ldr	r0, [pc, #96]	@ (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076fc:	f000 fcdf 	bl	80080be <USBD_GetEpDesc>
 8007700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007702:	2101      	movs	r1, #1
 8007704:	4815      	ldr	r0, [pc, #84]	@ (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007706:	f000 fcda 	bl	80080be <USBD_GetEpDesc>
 800770a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800770c:	2181      	movs	r1, #129	@ 0x81
 800770e:	4813      	ldr	r0, [pc, #76]	@ (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007710:	f000 fcd5 	bl	80080be <USBD_GetEpDesc>
 8007714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2210      	movs	r2, #16
 8007720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2200      	movs	r2, #0
 800772c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007730:	711a      	strb	r2, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d006      	beq.n	800774a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007744:	711a      	strb	r2, [r3, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2243      	movs	r2, #67	@ 0x43
 800774e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007750:	4b02      	ldr	r3, [pc, #8]	@ (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000050 	.word	0x20000050

08007760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	220a      	movs	r2, #10
 800776c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	@ (800777c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	2000000c 	.word	0x2000000c

08007780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	e009      	b.n	80077a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	33b0      	adds	r3, #176	@ 0xb0
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	32b0      	adds	r2, #176	@ 0xb0
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e008      	b.n	80077ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	32b0      	adds	r2, #176	@ 0xb0
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e004      	b.n	8007826 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32b0      	adds	r2, #176	@ 0xb0
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	e025      	b.n	80078a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11f      	bne.n	80078a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2201      	movs	r2, #1
 8007868:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800786c:	4b10      	ldr	r3, [pc, #64]	@ (80078b0 <USBD_CDC_TransmitPacket+0x7c>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4403      	add	r3, r0
 8007886:	3318      	adds	r3, #24
 8007888:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800788a:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <USBD_CDC_TransmitPacket+0x7c>)
 800788c:	7819      	ldrb	r1, [r3, #0]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 ffc3 	bl	8009826 <USBD_LL_Transmit>

    ret = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000093 	.word	0x20000093

080078b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32b0      	adds	r2, #176	@ 0xb0
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32b0      	adds	r2, #176	@ 0xb0
 80078d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80078de:	2303      	movs	r3, #3
 80078e0:	e018      	b.n	8007914 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7c1b      	ldrb	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078ea:	4b0c      	ldr	r3, [pc, #48]	@ (800791c <USBD_CDC_ReceivePacket+0x68>)
 80078ec:	7819      	ldrb	r1, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 ffb5 	bl	8009868 <USBD_LL_PrepareReceive>
 80078fe:	e008      	b.n	8007912 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <USBD_CDC_ReceivePacket+0x68>)
 8007902:	7819      	ldrb	r1, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800790a:	2340      	movs	r3, #64	@ 0x40
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 ffab 	bl	8009868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000094 	.word	0x20000094

08007920 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	e01f      	b.n	8007978 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	79fa      	ldrb	r2, [r7, #7]
 800796a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f001 fe25 	bl	80095bc <USBD_LL_Init>
 8007972:	4603      	mov	r3, r0
 8007974:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	e025      	b.n	80079e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	@ 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00f      	beq.n	80079d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	@ 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	f107 020e 	add.w	r2, r7, #14
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 fe2d 	bl	8009654 <USBD_LL_Start>
 80079fa:	4603      	mov	r3, r0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 f90c 	bl	8008cb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007aac:	461a      	mov	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d01a      	beq.n	8007af8 <USBD_LL_SetupStage+0x72>
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d822      	bhi.n	8007b0c <USBD_LL_SetupStage+0x86>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <USBD_LL_SetupStage+0x4a>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d00a      	beq.n	8007ae4 <USBD_LL_SetupStage+0x5e>
 8007ace:	e01d      	b.n	8007b0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb63 	bl	80081a4 <USBD_StdDevReq>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae2:	e020      	b.n	8007b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fbcb 	bl	8008288 <USBD_StdItfReq>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
      break;
 8007af6:	e016      	b.n	8007b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc2d 	bl	8008360 <USBD_StdEPReq>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0a:	e00c      	b.n	8007b26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fdfa 	bl	8009714 <USBD_LL_StallEP>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
      break;
 8007b24:	bf00      	nop
  }

  return ret;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d16e      	bne.n	8007c26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	f040 8098 	bne.w	8007c8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d913      	bls.n	8007b90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bf28      	it	cs
 8007b82:	4613      	movcs	r3, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 f994 	bl	8008eb6 <USBD_CtlContinueRx>
 8007b8e:	e07d      	b.n	8007c8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d014      	beq.n	8007bc8 <USBD_LL_DataOutStage+0x98>
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d81d      	bhi.n	8007bde <USBD_LL_DataOutStage+0xae>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <USBD_LL_DataOutStage+0x7c>
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d003      	beq.n	8007bb2 <USBD_LL_DataOutStage+0x82>
 8007baa:	e018      	b.n	8007bde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	75bb      	strb	r3, [r7, #22]
            break;
 8007bb0:	e018      	b.n	8007be4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fa64 	bl	800808a <USBD_CoreFindIF>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75bb      	strb	r3, [r7, #22]
            break;
 8007bc6:	e00d      	b.n	8007be4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa66 	bl	80080a4 <USBD_CoreFindEP>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75bb      	strb	r3, [r7, #22]
            break;
 8007bdc:	e002      	b.n	8007be4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	75bb      	strb	r3, [r7, #22]
            break;
 8007be2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d119      	bne.n	8007c1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d113      	bne.n	8007c1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007bf6:	7dba      	ldrb	r2, [r7, #22]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	32ae      	adds	r2, #174	@ 0xae
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c06:	7dba      	ldrb	r2, [r7, #22]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c0e:	7dba      	ldrb	r2, [r7, #22]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	32ae      	adds	r2, #174	@ 0xae
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f001 f95a 	bl	8008ed8 <USBD_CtlSendStatus>
 8007c24:	e032      	b.n	8007c8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fa37 	bl	80080a4 <USBD_CoreFindEP>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c3a:	7dbb      	ldrb	r3, [r7, #22]
 8007c3c:	2bff      	cmp	r3, #255	@ 0xff
 8007c3e:	d025      	beq.n	8007c8c <USBD_LL_DataOutStage+0x15c>
 8007c40:	7dbb      	ldrb	r3, [r7, #22]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d122      	bne.n	8007c8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d117      	bne.n	8007c82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c52:	7dba      	ldrb	r2, [r7, #22]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	32ae      	adds	r2, #174	@ 0xae
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00f      	beq.n	8007c82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c62:	7dba      	ldrb	r2, [r7, #22]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c6a:	7dba      	ldrb	r2, [r7, #22]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	32ae      	adds	r2, #174	@ 0xae
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	7afa      	ldrb	r2, [r7, #11]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	e000      	b.n	8007c8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d16f      	bne.n	8007d8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3314      	adds	r3, #20
 8007cae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d15a      	bne.n	8007d70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d914      	bls.n	8007cf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f001 f8bc 	bl	8008e5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 fdbd 	bl	8009868 <USBD_LL_PrepareReceive>
 8007cee:	e03f      	b.n	8007d70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d11c      	bne.n	8007d36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d316      	bcc.n	8007d36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d20f      	bcs.n	8007d36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 f89d 	bl	8008e5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f001 fd9a 	bl	8009868 <USBD_LL_PrepareReceive>
 8007d34:	e01c      	b.n	8007d70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d10f      	bne.n	8007d62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d62:	2180      	movs	r1, #128	@ 0x80
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 fcd5 	bl	8009714 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f001 f8c7 	bl	8008efe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d03a      	beq.n	8007df0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff fe42 	bl	8007a04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d88:	e032      	b.n	8007df0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	4619      	mov	r1, r3
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f985 	bl	80080a4 <USBD_CoreFindEP>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2bff      	cmp	r3, #255	@ 0xff
 8007da2:	d025      	beq.n	8007df0 <USBD_LL_DataInStage+0x15a>
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d122      	bne.n	8007df0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d11c      	bne.n	8007df0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007db6:	7dfa      	ldrb	r2, [r7, #23]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	32ae      	adds	r2, #174	@ 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d014      	beq.n	8007df0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007dc6:	7dfa      	ldrb	r2, [r7, #23]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dce:	7dfa      	ldrb	r2, [r7, #23]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	@ 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	7afa      	ldrb	r2, [r7, #11]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	4798      	blx	r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007de6:	7dbb      	ldrb	r3, [r7, #22]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007dec:	7dbb      	ldrb	r3, [r7, #22]
 8007dee:	e000      	b.n	8007df2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d014      	beq.n	8007e60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00e      	beq.n	8007e60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6852      	ldr	r2, [r2, #4]
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	4611      	mov	r1, r2
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e60:	2340      	movs	r3, #64	@ 0x40
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fc0f 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2240      	movs	r2, #64	@ 0x40
 8007e78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e7c:	2340      	movs	r3, #64	@ 0x40
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2180      	movs	r1, #128	@ 0x80
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fc01 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	@ 0x40
 8007e92:	621a      	str	r2, [r3, #32]

  return ret;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d006      	beq.n	8007ee0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d106      	bne.n	8007f18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d110      	bne.n	8007f5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	32ae      	adds	r2, #174	@ 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e01c      	b.n	8007fc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d115      	bne.n	8007fc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32ae      	adds	r2, #174	@ 0xae
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	32ae      	adds	r2, #174	@ 0xae
 8007fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	32ae      	adds	r2, #174	@ 0xae
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e01c      	b.n	8008026 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d115      	bne.n	8008024 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32ae      	adds	r2, #174	@ 0xae
 8008002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	32ae      	adds	r2, #174	@ 0xae
 8008016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	4611      	mov	r1, r2
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00e      	beq.n	8008080 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6852      	ldr	r2, [r2, #4]
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	4611      	mov	r1, r2
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008096:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	885b      	ldrh	r3, [r3, #2]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	7812      	ldrb	r2, [r2, #0]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d91f      	bls.n	8008124 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80080ea:	e013      	b.n	8008114 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080ec:	f107 030a 	add.w	r3, r7, #10
 80080f0:	4619      	mov	r1, r3
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	f000 f81b 	bl	800812e <USBD_GetNextDesc>
 80080f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d108      	bne.n	8008114 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	789b      	ldrb	r3, [r3, #2]
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	429a      	cmp	r2, r3
 800810e:	d008      	beq.n	8008122 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	885b      	ldrh	r3, [r3, #2]
 8008118:	b29a      	uxth	r2, r3
 800811a:	897b      	ldrh	r3, [r7, #10]
 800811c:	429a      	cmp	r2, r3
 800811e:	d8e5      	bhi.n	80080ec <USBD_GetEpDesc+0x2e>
 8008120:	e000      	b.n	8008124 <USBD_GetEpDesc+0x66>
          break;
 8008122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008124:	693b      	ldr	r3, [r7, #16]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	7812      	ldrb	r2, [r2, #0]
 8008144:	4413      	add	r3, r2
 8008146:	b29a      	uxth	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008158:	68fb      	ldr	r3, [r7, #12]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008184:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b21a      	sxth	r2, r3
 800818c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008190:	4313      	orrs	r3, r2
 8008192:	b21b      	sxth	r3, r3
 8008194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008196:	89fb      	ldrh	r3, [r7, #14]
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081ba:	2b40      	cmp	r3, #64	@ 0x40
 80081bc:	d005      	beq.n	80081ca <USBD_StdDevReq+0x26>
 80081be:	2b40      	cmp	r3, #64	@ 0x40
 80081c0:	d857      	bhi.n	8008272 <USBD_StdDevReq+0xce>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00f      	beq.n	80081e6 <USBD_StdDevReq+0x42>
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d153      	bne.n	8008272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	32ae      	adds	r2, #174	@ 0xae
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]
      break;
 80081e4:	e04a      	b.n	800827c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d83b      	bhi.n	8008266 <USBD_StdDevReq+0xc2>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <USBD_StdDevReq+0x50>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008249 	.word	0x08008249
 80081f8:	0800825d 	.word	0x0800825d
 80081fc:	08008267 	.word	0x08008267
 8008200:	08008253 	.word	0x08008253
 8008204:	08008267 	.word	0x08008267
 8008208:	08008227 	.word	0x08008227
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008267 	.word	0x08008267
 8008214:	0800823f 	.word	0x0800823f
 8008218:	08008231 	.word	0x08008231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa3c 	bl	800869c <USBD_GetDescriptor>
          break;
 8008224:	e024      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fba1 	bl	8008970 <USBD_SetAddress>
          break;
 800822e:	e01f      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fbe0 	bl	80089f8 <USBD_SetConfig>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
          break;
 800823c:	e018      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc83 	bl	8008b4c <USBD_GetConfig>
          break;
 8008246:	e013      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fcb4 	bl	8008bb8 <USBD_GetStatus>
          break;
 8008250:	e00e      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fce3 	bl	8008c20 <USBD_SetFeature>
          break;
 800825a:	e009      	b.n	8008270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fd07 	bl	8008c72 <USBD_ClrFeature>
          break;
 8008264:	e004      	b.n	8008270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fd5e 	bl	8008d2a <USBD_CtlError>
          break;
 800826e:	bf00      	nop
      }
      break;
 8008270:	e004      	b.n	800827c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fd58 	bl	8008d2a <USBD_CtlError>
      break;
 800827a:	bf00      	nop
  }

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop

08008288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800829e:	2b40      	cmp	r3, #64	@ 0x40
 80082a0:	d005      	beq.n	80082ae <USBD_StdItfReq+0x26>
 80082a2:	2b40      	cmp	r3, #64	@ 0x40
 80082a4:	d852      	bhi.n	800834c <USBD_StdItfReq+0xc4>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USBD_StdItfReq+0x26>
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d14e      	bne.n	800834c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d840      	bhi.n	800833e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	889b      	ldrh	r3, [r3, #4]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d836      	bhi.n	8008334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	889b      	ldrh	r3, [r3, #4]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff fedb 	bl	800808a <USBD_CoreFindIF>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2bff      	cmp	r3, #255	@ 0xff
 80082dc:	d01d      	beq.n	800831a <USBD_StdItfReq+0x92>
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11a      	bne.n	800831a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082e4:	7bba      	ldrb	r2, [r7, #14]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32ae      	adds	r2, #174	@ 0xae
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00f      	beq.n	8008314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082f4:	7bba      	ldrb	r2, [r7, #14]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082fc:	7bba      	ldrb	r2, [r7, #14]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32ae      	adds	r2, #174	@ 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008312:	e004      	b.n	800831e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008318:	e001      	b.n	800831e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d110      	bne.n	8008348 <USBD_StdItfReq+0xc0>
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10d      	bne.n	8008348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fdd3 	bl	8008ed8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008332:	e009      	b.n	8008348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fcf7 	bl	8008d2a <USBD_CtlError>
          break;
 800833c:	e004      	b.n	8008348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fcf2 	bl	8008d2a <USBD_CtlError>
          break;
 8008346:	e000      	b.n	800834a <USBD_StdItfReq+0xc2>
          break;
 8008348:	bf00      	nop
      }
      break;
 800834a:	e004      	b.n	8008356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fceb 	bl	8008d2a <USBD_CtlError>
      break;
 8008354:	bf00      	nop
  }

  return ret;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	889b      	ldrh	r3, [r3, #4]
 8008372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	d007      	beq.n	8008390 <USBD_StdEPReq+0x30>
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	f200 817f 	bhi.w	8008684 <USBD_StdEPReq+0x324>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d02a      	beq.n	80083e0 <USBD_StdEPReq+0x80>
 800838a:	2b20      	cmp	r3, #32
 800838c:	f040 817a 	bne.w	8008684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff fe85 	bl	80080a4 <USBD_CoreFindEP>
 800839a:	4603      	mov	r3, r0
 800839c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800839e:	7b7b      	ldrb	r3, [r7, #13]
 80083a0:	2bff      	cmp	r3, #255	@ 0xff
 80083a2:	f000 8174 	beq.w	800868e <USBD_StdEPReq+0x32e>
 80083a6:	7b7b      	ldrb	r3, [r7, #13]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 8170 	bne.w	800868e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083ae:	7b7a      	ldrb	r2, [r7, #13]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083b6:	7b7a      	ldrb	r2, [r7, #13]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	32ae      	adds	r2, #174	@ 0xae
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 8163 	beq.w	800868e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083c8:	7b7a      	ldrb	r2, [r7, #13]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	@ 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083de:	e156      	b.n	800868e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d008      	beq.n	80083fa <USBD_StdEPReq+0x9a>
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	f300 8145 	bgt.w	8008678 <USBD_StdEPReq+0x318>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 809b 	beq.w	800852a <USBD_StdEPReq+0x1ca>
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d03c      	beq.n	8008472 <USBD_StdEPReq+0x112>
 80083f8:	e13e      	b.n	8008678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d002      	beq.n	800840c <USBD_StdEPReq+0xac>
 8008406:	2b03      	cmp	r3, #3
 8008408:	d016      	beq.n	8008438 <USBD_StdEPReq+0xd8>
 800840a:	e02c      	b.n	8008466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00d      	beq.n	800842e <USBD_StdEPReq+0xce>
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b80      	cmp	r3, #128	@ 0x80
 8008416:	d00a      	beq.n	800842e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 f979 	bl	8009714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008422:	2180      	movs	r1, #128	@ 0x80
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 f975 	bl	8009714 <USBD_LL_StallEP>
 800842a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800842c:	e020      	b.n	8008470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fc7a 	bl	8008d2a <USBD_CtlError>
              break;
 8008436:	e01b      	b.n	8008470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	885b      	ldrh	r3, [r3, #2]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10e      	bne.n	800845e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <USBD_StdEPReq+0xfe>
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b80      	cmp	r3, #128	@ 0x80
 800844a:	d008      	beq.n	800845e <USBD_StdEPReq+0xfe>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	88db      	ldrh	r3, [r3, #6]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f95b 	bl	8009714 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fd3a 	bl	8008ed8 <USBD_CtlSendStatus>

              break;
 8008464:	e004      	b.n	8008470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fc5e 	bl	8008d2a <USBD_CtlError>
              break;
 800846e:	bf00      	nop
          }
          break;
 8008470:	e107      	b.n	8008682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d002      	beq.n	8008484 <USBD_StdEPReq+0x124>
 800847e:	2b03      	cmp	r3, #3
 8008480:	d016      	beq.n	80084b0 <USBD_StdEPReq+0x150>
 8008482:	e04b      	b.n	800851c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00d      	beq.n	80084a6 <USBD_StdEPReq+0x146>
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b80      	cmp	r3, #128	@ 0x80
 800848e:	d00a      	beq.n	80084a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f93d 	bl	8009714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800849a:	2180      	movs	r1, #128	@ 0x80
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f939 	bl	8009714 <USBD_LL_StallEP>
 80084a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084a4:	e040      	b.n	8008528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc3e 	bl	8008d2a <USBD_CtlError>
              break;
 80084ae:	e03b      	b.n	8008528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	885b      	ldrh	r3, [r3, #2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d136      	bne.n	8008526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f943 	bl	8009752 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fd03 	bl	8008ed8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff fde4 	bl	80080a4 <USBD_CoreFindEP>
 80084dc:	4603      	mov	r3, r0
 80084de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084e0:	7b7b      	ldrb	r3, [r7, #13]
 80084e2:	2bff      	cmp	r3, #255	@ 0xff
 80084e4:	d01f      	beq.n	8008526 <USBD_StdEPReq+0x1c6>
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d11c      	bne.n	8008526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084ec:	7b7a      	ldrb	r2, [r7, #13]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084f4:	7b7a      	ldrb	r2, [r7, #13]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32ae      	adds	r2, #174	@ 0xae
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d010      	beq.n	8008526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008504:	7b7a      	ldrb	r2, [r7, #13]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	@ 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800851a:	e004      	b.n	8008526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc03 	bl	8008d2a <USBD_CtlError>
              break;
 8008524:	e000      	b.n	8008528 <USBD_StdEPReq+0x1c8>
              break;
 8008526:	bf00      	nop
          }
          break;
 8008528:	e0ab      	b.n	8008682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d002      	beq.n	800853c <USBD_StdEPReq+0x1dc>
 8008536:	2b03      	cmp	r3, #3
 8008538:	d032      	beq.n	80085a0 <USBD_StdEPReq+0x240>
 800853a:	e097      	b.n	800866c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <USBD_StdEPReq+0x1f2>
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b80      	cmp	r3, #128	@ 0x80
 8008546:	d004      	beq.n	8008552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fbed 	bl	8008d2a <USBD_CtlError>
                break;
 8008550:	e091      	b.n	8008676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	da0b      	bge.n	8008572 <USBD_StdEPReq+0x212>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008560:	4613      	mov	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	3310      	adds	r3, #16
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	3304      	adds	r3, #4
 8008570:	e00b      	b.n	800858a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	3304      	adds	r3, #4
 800858a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2202      	movs	r2, #2
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc43 	bl	8008e24 <USBD_CtlSendData>
              break;
 800859e:	e06a      	b.n	8008676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da11      	bge.n	80085cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 020f 	and.w	r2, r3, #15
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	3324      	adds	r3, #36	@ 0x24
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d117      	bne.n	80085f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fbb0 	bl	8008d2a <USBD_CtlError>
                  break;
 80085ca:	e054      	b.n	8008676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	f003 020f 	and.w	r2, r3, #15
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb9d 	bl	8008d2a <USBD_CtlError>
                  break;
 80085f0:	e041      	b.n	8008676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da0b      	bge.n	8008612 <USBD_StdEPReq+0x2b2>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	3310      	adds	r3, #16
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	3304      	adds	r3, #4
 8008610:	e00b      	b.n	800862a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USBD_StdEPReq+0x2d8>
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b80      	cmp	r3, #128	@ 0x80
 8008636:	d103      	bne.n	8008640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e00e      	b.n	800865e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 f8a3 	bl	8009790 <USBD_LL_IsStallEP>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e002      	b.n	800865e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2202      	movs	r2, #2
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fbdd 	bl	8008e24 <USBD_CtlSendData>
              break;
 800866a:	e004      	b.n	8008676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb5b 	bl	8008d2a <USBD_CtlError>
              break;
 8008674:	bf00      	nop
          }
          break;
 8008676:	e004      	b.n	8008682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb55 	bl	8008d2a <USBD_CtlError>
          break;
 8008680:	bf00      	nop
      }
      break;
 8008682:	e005      	b.n	8008690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fb4f 	bl	8008d2a <USBD_CtlError>
      break;
 800868c:	e000      	b.n	8008690 <USBD_StdEPReq+0x330>
      break;
 800868e:	bf00      	nop
  }

  return ret;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b06      	cmp	r3, #6
 80086be:	f200 8128 	bhi.w	8008912 <USBD_GetDescriptor+0x276>
 80086c2:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <USBD_GetDescriptor+0x2c>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086fd 	.word	0x080086fd
 80086d0:	0800873d 	.word	0x0800873d
 80086d4:	08008913 	.word	0x08008913
 80086d8:	08008913 	.word	0x08008913
 80086dc:	080088b3 	.word	0x080088b3
 80086e0:	080088df 	.word	0x080088df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7c12      	ldrb	r2, [r2, #16]
 80086f0:	f107 0108 	add.w	r1, r7, #8
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
      break;
 80086fa:	e112      	b.n	8008922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7c1b      	ldrb	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870c:	f107 0208 	add.w	r2, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	2202      	movs	r2, #2
 800871c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800871e:	e100      	b.n	8008922 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	f107 0208 	add.w	r2, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
      break;
 800873a:	e0f2      	b.n	8008922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b05      	cmp	r3, #5
 8008744:	f200 80ac 	bhi.w	80088a0 <USBD_GetDescriptor+0x204>
 8008748:	a201      	add	r2, pc, #4	@ (adr r2, 8008750 <USBD_GetDescriptor+0xb4>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008769 	.word	0x08008769
 8008754:	0800879d 	.word	0x0800879d
 8008758:	080087d1 	.word	0x080087d1
 800875c:	08008805 	.word	0x08008805
 8008760:	08008839 	.word	0x08008839
 8008764:	0800886d 	.word	0x0800886d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7c12      	ldrb	r2, [r2, #16]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878a:	e091      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 facb 	bl	8008d2a <USBD_CtlError>
            err++;
 8008794:	7afb      	ldrb	r3, [r7, #11]
 8008796:	3301      	adds	r3, #1
 8008798:	72fb      	strb	r3, [r7, #11]
          break;
 800879a:	e089      	b.n	80088b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	7c12      	ldrb	r2, [r2, #16]
 80087b4:	f107 0108 	add.w	r1, r7, #8
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087be:	e077      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fab1 	bl	8008d2a <USBD_CtlError>
            err++;
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	3301      	adds	r3, #1
 80087cc:	72fb      	strb	r3, [r7, #11]
          break;
 80087ce:	e06f      	b.n	80088b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	7c12      	ldrb	r2, [r2, #16]
 80087e8:	f107 0108 	add.w	r1, r7, #8
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f2:	e05d      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa97 	bl	8008d2a <USBD_CtlError>
            err++;
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	3301      	adds	r3, #1
 8008800:	72fb      	strb	r3, [r7, #11]
          break;
 8008802:	e055      	b.n	80088b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	7c12      	ldrb	r2, [r2, #16]
 800881c:	f107 0108 	add.w	r1, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008826:	e043      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa7d 	bl	8008d2a <USBD_CtlError>
            err++;
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	3301      	adds	r3, #1
 8008834:	72fb      	strb	r3, [r7, #11]
          break;
 8008836:	e03b      	b.n	80088b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	7c12      	ldrb	r2, [r2, #16]
 8008850:	f107 0108 	add.w	r1, r7, #8
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
 8008858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885a:	e029      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa63 	bl	8008d2a <USBD_CtlError>
            err++;
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	3301      	adds	r3, #1
 8008868:	72fb      	strb	r3, [r7, #11]
          break;
 800886a:	e021      	b.n	80088b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7c12      	ldrb	r2, [r2, #16]
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888e:	e00f      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa49 	bl	8008d2a <USBD_CtlError>
            err++;
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	3301      	adds	r3, #1
 800889c:	72fb      	strb	r3, [r7, #11]
          break;
 800889e:	e007      	b.n	80088b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa41 	bl	8008d2a <USBD_CtlError>
          err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088ae:	bf00      	nop
      }
      break;
 80088b0:	e037      	b.n	8008922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7c1b      	ldrb	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	f107 0208 	add.w	r2, r7, #8
 80088c6:	4610      	mov	r0, r2
 80088c8:	4798      	blx	r3
 80088ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088cc:	e029      	b.n	8008922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa2a 	bl	8008d2a <USBD_CtlError>
        err++;
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	3301      	adds	r3, #1
 80088da:	72fb      	strb	r3, [r7, #11]
      break;
 80088dc:	e021      	b.n	8008922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7c1b      	ldrb	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10d      	bne.n	8008902 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ee:	f107 0208 	add.w	r2, r7, #8
 80088f2:	4610      	mov	r0, r2
 80088f4:	4798      	blx	r3
 80088f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	2207      	movs	r2, #7
 80088fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008900:	e00f      	b.n	8008922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa10 	bl	8008d2a <USBD_CtlError>
        err++;
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	3301      	adds	r3, #1
 800890e:	72fb      	strb	r3, [r7, #11]
      break;
 8008910:	e007      	b.n	8008922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa08 	bl	8008d2a <USBD_CtlError>
      err++;
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	3301      	adds	r3, #1
 800891e:	72fb      	strb	r3, [r7, #11]
      break;
 8008920:	bf00      	nop
  }

  if (err != 0U)
 8008922:	7afb      	ldrb	r3, [r7, #11]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11e      	bne.n	8008966 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	88db      	ldrh	r3, [r3, #6]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d016      	beq.n	800895e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008930:	893b      	ldrh	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00e      	beq.n	8008954 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88da      	ldrh	r2, [r3, #6]
 800893a:	893b      	ldrh	r3, [r7, #8]
 800893c:	4293      	cmp	r3, r2
 800893e:	bf28      	it	cs
 8008940:	4613      	movcs	r3, r2
 8008942:	b29b      	uxth	r3, r3
 8008944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008946:	893b      	ldrh	r3, [r7, #8]
 8008948:	461a      	mov	r2, r3
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa69 	bl	8008e24 <USBD_CtlSendData>
 8008952:	e009      	b.n	8008968 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9e7 	bl	8008d2a <USBD_CtlError>
 800895c:	e004      	b.n	8008968 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 faba 	bl	8008ed8 <USBD_CtlSendStatus>
 8008964:	e000      	b.n	8008968 <USBD_GetDescriptor+0x2cc>
    return;
 8008966:	bf00      	nop
  }
}
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d131      	bne.n	80089e6 <USBD_SetAddress+0x76>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d12d      	bne.n	80089e6 <USBD_SetAddress+0x76>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008990:	d829      	bhi.n	80089e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800899c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d104      	bne.n	80089b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f9bc 	bl	8008d2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b2:	e01d      	b.n	80089f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7bfa      	ldrb	r2, [r7, #15]
 80089b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 ff11 	bl	80097e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa86 	bl	8008ed8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089da:	e009      	b.n	80089f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e4:	e004      	b.n	80089f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f99e 	bl	8008d2a <USBD_CtlError>
  }
}
 80089ee:	bf00      	nop
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a10:	4b4d      	ldr	r3, [pc, #308]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d905      	bls.n	8008a24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f985 	bl	8008d2a <USBD_CtlError>
    return USBD_FAIL;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e08c      	b.n	8008b3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d002      	beq.n	8008a36 <USBD_SetConfig+0x3e>
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d029      	beq.n	8008a88 <USBD_SetConfig+0x90>
 8008a34:	e075      	b.n	8008b22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a36:	4b44      	ldr	r3, [pc, #272]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d020      	beq.n	8008a80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a3e:	4b42      	ldr	r3, [pc, #264]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a48:	4b3f      	ldr	r3, [pc, #252]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fe ffe3 	bl	8007a1a <USBD_SetClassConfig>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f962 	bl	8008d2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a6e:	e065      	b.n	8008b3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fa31 	bl	8008ed8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a7e:	e05d      	b.n	8008b3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa29 	bl	8008ed8 <USBD_CtlSendStatus>
      break;
 8008a86:	e059      	b.n	8008b3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a88:	4b2f      	ldr	r3, [pc, #188]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d112      	bne.n	8008ab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a98:	4b2b      	ldr	r3, [pc, #172]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aa2:	4b29      	ldr	r3, [pc, #164]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe ffd2 	bl	8007a52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa12 	bl	8008ed8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ab4:	e042      	b.n	8008b3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ab6:	4b24      	ldr	r3, [pc, #144]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d02a      	beq.n	8008b1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fe ffc0 	bl	8007a52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008adc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7fe ff99 	bl	8007a1a <USBD_SetClassConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00f      	beq.n	8008b12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f918 	bl	8008d2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fe ffa5 	bl	8007a52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b10:	e014      	b.n	8008b3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9e0 	bl	8008ed8 <USBD_CtlSendStatus>
      break;
 8008b18:	e010      	b.n	8008b3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9dc 	bl	8008ed8 <USBD_CtlSendStatus>
      break;
 8008b20:	e00c      	b.n	8008b3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f900 	bl	8008d2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b2a:	4b07      	ldr	r3, [pc, #28]	@ (8008b48 <USBD_SetConfig+0x150>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7fe ff8e 	bl	8007a52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3a:	bf00      	nop
  }

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000318 	.word	0x20000318

08008b4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d004      	beq.n	8008b68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f8e2 	bl	8008d2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b66:	e023      	b.n	8008bb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	dc02      	bgt.n	8008b7a <USBD_GetConfig+0x2e>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc03      	bgt.n	8008b80 <USBD_GetConfig+0x34>
 8008b78:	e015      	b.n	8008ba6 <USBD_GetConfig+0x5a>
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d00b      	beq.n	8008b96 <USBD_GetConfig+0x4a>
 8008b7e:	e012      	b.n	8008ba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f948 	bl	8008e24 <USBD_CtlSendData>
        break;
 8008b94:	e00c      	b.n	8008bb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f940 	bl	8008e24 <USBD_CtlSendData>
        break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8be 	bl	8008d2a <USBD_CtlError>
        break;
 8008bae:	bf00      	nop
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d81e      	bhi.n	8008c0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	88db      	ldrh	r3, [r3, #6]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d004      	beq.n	8008be2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f8a5 	bl	8008d2a <USBD_CtlError>
        break;
 8008be0:	e01a      	b.n	8008c18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f043 0202 	orr.w	r2, r3, #2
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	330c      	adds	r3, #12
 8008c02:	2202      	movs	r2, #2
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f90c 	bl	8008e24 <USBD_CtlSendData>
      break;
 8008c0c:	e004      	b.n	8008c18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f88a 	bl	8008d2a <USBD_CtlError>
      break;
 8008c16:	bf00      	nop
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d107      	bne.n	8008c42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f94c 	bl	8008ed8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c40:	e013      	b.n	8008c6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d10b      	bne.n	8008c62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f93c 	bl	8008ed8 <USBD_CtlSendStatus>
}
 8008c60:	e003      	b.n	8008c6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f860 	bl	8008d2a <USBD_CtlError>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d80b      	bhi.n	8008ca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	885b      	ldrh	r3, [r3, #2]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10c      	bne.n	8008cac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f91c 	bl	8008ed8 <USBD_CtlSendStatus>
      }
      break;
 8008ca0:	e004      	b.n	8008cac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f840 	bl	8008d2a <USBD_CtlError>
      break;
 8008caa:	e000      	b.n	8008cae <USBD_ClrFeature+0x3c>
      break;
 8008cac:	bf00      	nop
  }
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	781a      	ldrb	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff fa40 	bl	8008166 <SWAPBYTE>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fa33 	bl	8008166 <SWAPBYTE>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fa26 	bl	8008166 <SWAPBYTE>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	80da      	strh	r2, [r3, #6]
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d34:	2180      	movs	r1, #128	@ 0x80
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fcec 	bl	8009714 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fce8 	bl	8009714 <USBD_LL_StallEP>
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d042      	beq.n	8008de8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d66:	6938      	ldr	r0, [r7, #16]
 8008d68:	f000 f842 	bl	8008df0 <USBD_GetLen>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	3301      	adds	r3, #1
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d76:	d808      	bhi.n	8008d8a <USBD_GetString+0x3e>
 8008d78:	6938      	ldr	r0, [r7, #16]
 8008d7a:	f000 f839 	bl	8008df0 <USBD_GetLen>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	3301      	adds	r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	e001      	b.n	8008d8e <USBD_GetString+0x42>
 8008d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	4413      	add	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7812      	ldrb	r2, [r2, #0]
 8008d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	3301      	adds	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4413      	add	r3, r2
 8008daa:	2203      	movs	r2, #3
 8008dac:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	3301      	adds	r3, #1
 8008db2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008db4:	e013      	b.n	8008dde <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4413      	add	r3, r2
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	613b      	str	r3, [r7, #16]
    idx++;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e7      	bne.n	8008db6 <USBD_GetString+0x6a>
 8008de6:	e000      	b.n	8008dea <USBD_GetString+0x9e>
    return;
 8008de8:	bf00      	nop
  }
}
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e00:	e005      	b.n	8008e0e <USBD_GetLen+0x1e>
  {
    len++;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	3301      	adds	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f5      	bne.n	8008e02 <USBD_GetLen+0x12>
  }

  return len;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	2100      	movs	r1, #0
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fceb 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fcda 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 fcde 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 fccd 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2200      	movs	r2, #0
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc99 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2205      	movs	r2, #5
 8008f0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fca7 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4912      	ldr	r1, [pc, #72]	@ (8008f74 <MX_USB_DEVICE_Init+0x50>)
 8008f2c:	4812      	ldr	r0, [pc, #72]	@ (8008f78 <MX_USB_DEVICE_Init+0x54>)
 8008f2e:	f7fe fcf7 	bl	8007920 <USBD_Init>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f38:	f7f8 ffae 	bl	8001e98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f3c:	490f      	ldr	r1, [pc, #60]	@ (8008f7c <MX_USB_DEVICE_Init+0x58>)
 8008f3e:	480e      	ldr	r0, [pc, #56]	@ (8008f78 <MX_USB_DEVICE_Init+0x54>)
 8008f40:	f7fe fd1e 	bl	8007980 <USBD_RegisterClass>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f4a:	f7f8 ffa5 	bl	8001e98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f4e:	490c      	ldr	r1, [pc, #48]	@ (8008f80 <MX_USB_DEVICE_Init+0x5c>)
 8008f50:	4809      	ldr	r0, [pc, #36]	@ (8008f78 <MX_USB_DEVICE_Init+0x54>)
 8008f52:	f7fe fc15 	bl	8007780 <USBD_CDC_RegisterInterface>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f5c:	f7f8 ff9c 	bl	8001e98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f60:	4805      	ldr	r0, [pc, #20]	@ (8008f78 <MX_USB_DEVICE_Init+0x54>)
 8008f62:	f7fe fd43 	bl	80079ec <USBD_Start>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f6c:	f7f8 ff94 	bl	8001e98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f70:	bf00      	nop
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	200000ac 	.word	0x200000ac
 8008f78:	2000031c 	.word	0x2000031c
 8008f7c:	20000018 	.word	0x20000018
 8008f80:	20000098 	.word	0x20000098

08008f84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4905      	ldr	r1, [pc, #20]	@ (8008fa0 <CDC_Init_FS+0x1c>)
 8008f8c:	4805      	ldr	r0, [pc, #20]	@ (8008fa4 <CDC_Init_FS+0x20>)
 8008f8e:	f7fe fc11 	bl	80077b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f92:	4905      	ldr	r1, [pc, #20]	@ (8008fa8 <CDC_Init_FS+0x24>)
 8008f94:	4803      	ldr	r0, [pc, #12]	@ (8008fa4 <CDC_Init_FS+0x20>)
 8008f96:	f7fe fc2f 	bl	80077f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000df8 	.word	0x20000df8
 8008fa4:	2000031c 	.word	0x2000031c
 8008fa8:	200005f8 	.word	0x200005f8

08008fac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b23      	cmp	r3, #35	@ 0x23
 8008fd0:	d84a      	bhi.n	8009068 <CDC_Control_FS+0xac>
 8008fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <CDC_Control_FS+0x1c>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08009069 	.word	0x08009069
 8008fdc:	08009069 	.word	0x08009069
 8008fe0:	08009069 	.word	0x08009069
 8008fe4:	08009069 	.word	0x08009069
 8008fe8:	08009069 	.word	0x08009069
 8008fec:	08009069 	.word	0x08009069
 8008ff0:	08009069 	.word	0x08009069
 8008ff4:	08009069 	.word	0x08009069
 8008ff8:	08009069 	.word	0x08009069
 8008ffc:	08009069 	.word	0x08009069
 8009000:	08009069 	.word	0x08009069
 8009004:	08009069 	.word	0x08009069
 8009008:	08009069 	.word	0x08009069
 800900c:	08009069 	.word	0x08009069
 8009010:	08009069 	.word	0x08009069
 8009014:	08009069 	.word	0x08009069
 8009018:	08009069 	.word	0x08009069
 800901c:	08009069 	.word	0x08009069
 8009020:	08009069 	.word	0x08009069
 8009024:	08009069 	.word	0x08009069
 8009028:	08009069 	.word	0x08009069
 800902c:	08009069 	.word	0x08009069
 8009030:	08009069 	.word	0x08009069
 8009034:	08009069 	.word	0x08009069
 8009038:	08009069 	.word	0x08009069
 800903c:	08009069 	.word	0x08009069
 8009040:	08009069 	.word	0x08009069
 8009044:	08009069 	.word	0x08009069
 8009048:	08009069 	.word	0x08009069
 800904c:	08009069 	.word	0x08009069
 8009050:	08009069 	.word	0x08009069
 8009054:	08009069 	.word	0x08009069
 8009058:	08009069 	.word	0x08009069
 800905c:	08009069 	.word	0x08009069
 8009060:	08009069 	.word	0x08009069
 8009064:	08009069 	.word	0x08009069
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009068:	bf00      	nop
  }

  return (USBD_OK);
 800906a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4805      	ldr	r0, [pc, #20]	@ (800909c <CDC_Receive_FS+0x24>)
 8009086:	f7fe fbb7 	bl	80077f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800908a:	4804      	ldr	r0, [pc, #16]	@ (800909c <CDC_Receive_FS+0x24>)
 800908c:	f7fe fc12 	bl	80078b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009090:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2000031c 	.word	0x2000031c

080090a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090b0:	4b0d      	ldr	r3, [pc, #52]	@ (80090e8 <CDC_Transmit_FS+0x48>)
 80090b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e00b      	b.n	80090de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090c6:	887b      	ldrh	r3, [r7, #2]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4806      	ldr	r0, [pc, #24]	@ (80090e8 <CDC_Transmit_FS+0x48>)
 80090ce:	f7fe fb71 	bl	80077b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090d2:	4805      	ldr	r0, [pc, #20]	@ (80090e8 <CDC_Transmit_FS+0x48>)
 80090d4:	f7fe fbae 	bl	8007834 <USBD_CDC_TransmitPacket>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	2000031c 	.word	0x2000031c

080090ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2212      	movs	r2, #18
 8009120:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009122:	4b03      	ldr	r3, [pc, #12]	@ (8009130 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	200000c8 	.word	0x200000c8

08009134 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2204      	movs	r2, #4
 8009144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009146:	4b03      	ldr	r3, [pc, #12]	@ (8009154 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	200000dc 	.word	0x200000dc

08009158 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4907      	ldr	r1, [pc, #28]	@ (800918c <USBD_FS_ProductStrDescriptor+0x34>)
 800916e:	4808      	ldr	r0, [pc, #32]	@ (8009190 <USBD_FS_ProductStrDescriptor+0x38>)
 8009170:	f7ff fdec 	bl	8008d4c <USBD_GetString>
 8009174:	e004      	b.n	8009180 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4904      	ldr	r1, [pc, #16]	@ (800918c <USBD_FS_ProductStrDescriptor+0x34>)
 800917a:	4805      	ldr	r0, [pc, #20]	@ (8009190 <USBD_FS_ProductStrDescriptor+0x38>)
 800917c:	f7ff fde6 	bl	8008d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009180:	4b02      	ldr	r3, [pc, #8]	@ (800918c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	200015f8 	.word	0x200015f8
 8009190:	0800c30c 	.word	0x0800c30c

08009194 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	4904      	ldr	r1, [pc, #16]	@ (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091a4:	4804      	ldr	r0, [pc, #16]	@ (80091b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091a6:	f7ff fdd1 	bl	8008d4c <USBD_GetString>
  return USBD_StrDesc;
 80091aa:	4b02      	ldr	r3, [pc, #8]	@ (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	200015f8 	.word	0x200015f8
 80091b8:	0800c324 	.word	0x0800c324

080091bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	221a      	movs	r2, #26
 80091cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091ce:	f000 f843 	bl	8009258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091d2:	4b02      	ldr	r3, [pc, #8]	@ (80091dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200000e0 	.word	0x200000e0

080091e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4907      	ldr	r1, [pc, #28]	@ (8009214 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091f6:	4808      	ldr	r0, [pc, #32]	@ (8009218 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091f8:	f7ff fda8 	bl	8008d4c <USBD_GetString>
 80091fc:	e004      	b.n	8009208 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4904      	ldr	r1, [pc, #16]	@ (8009214 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009202:	4805      	ldr	r0, [pc, #20]	@ (8009218 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009204:	f7ff fda2 	bl	8008d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009208:	4b02      	ldr	r3, [pc, #8]	@ (8009214 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	200015f8 	.word	0x200015f8
 8009218:	0800c338 	.word	0x0800c338

0800921c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	4907      	ldr	r1, [pc, #28]	@ (8009250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009232:	4808      	ldr	r0, [pc, #32]	@ (8009254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009234:	f7ff fd8a 	bl	8008d4c <USBD_GetString>
 8009238:	e004      	b.n	8009244 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4904      	ldr	r1, [pc, #16]	@ (8009250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800923e:	4805      	ldr	r0, [pc, #20]	@ (8009254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009240:	f7ff fd84 	bl	8008d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009244:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200015f8 	.word	0x200015f8
 8009254:	0800c344 	.word	0x0800c344

08009258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800925e:	4b0f      	ldr	r3, [pc, #60]	@ (800929c <Get_SerialNum+0x44>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009264:	4b0e      	ldr	r3, [pc, #56]	@ (80092a0 <Get_SerialNum+0x48>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800926a:	4b0e      	ldr	r3, [pc, #56]	@ (80092a4 <Get_SerialNum+0x4c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800927e:	2208      	movs	r2, #8
 8009280:	4909      	ldr	r1, [pc, #36]	@ (80092a8 <Get_SerialNum+0x50>)
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f814 	bl	80092b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009288:	2204      	movs	r2, #4
 800928a:	4908      	ldr	r1, [pc, #32]	@ (80092ac <Get_SerialNum+0x54>)
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f000 f80f 	bl	80092b0 <IntToUnicode>
  }
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	1fff7a10 	.word	0x1fff7a10
 80092a0:	1fff7a14 	.word	0x1fff7a14
 80092a4:	1fff7a18 	.word	0x1fff7a18
 80092a8:	200000e2 	.word	0x200000e2
 80092ac:	200000f2 	.word	0x200000f2

080092b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
 80092c6:	e027      	b.n	8009318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	0f1b      	lsrs	r3, r3, #28
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d80b      	bhi.n	80092e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	0f1b      	lsrs	r3, r3, #28
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4619      	mov	r1, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	440b      	add	r3, r1
 80092e0:	3230      	adds	r2, #48	@ 0x30
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	e00a      	b.n	80092fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	0f1b      	lsrs	r3, r3, #28
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4619      	mov	r1, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	440b      	add	r3, r1
 80092f8:	3237      	adds	r2, #55	@ 0x37
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	3301      	adds	r3, #1
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	3301      	adds	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]
 8009318:	7dfa      	ldrb	r2, [r7, #23]
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3d3      	bcc.n	80092c8 <IntToUnicode+0x18>
  }
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
	...

08009330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	@ 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	609a      	str	r2, [r3, #8]
 8009344:	60da      	str	r2, [r3, #12]
 8009346:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009350:	d13a      	bne.n	80093c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	4b1e      	ldr	r3, [pc, #120]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935a:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	6313      	str	r3, [r2, #48]	@ 0x30
 8009362:	4b1b      	ldr	r3, [pc, #108]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 8009364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800936e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009374:	2302      	movs	r3, #2
 8009376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009378:	2300      	movs	r3, #0
 800937a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800937c:	2303      	movs	r3, #3
 800937e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009380:	230a      	movs	r3, #10
 8009382:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	4619      	mov	r1, r3
 800938a:	4812      	ldr	r0, [pc, #72]	@ (80093d4 <HAL_PCD_MspInit+0xa4>)
 800938c:	f7f9 f902 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009390:	4b0f      	ldr	r3, [pc, #60]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 8009392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009394:	4a0e      	ldr	r2, [pc, #56]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 8009396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939a:	6353      	str	r3, [r2, #52]	@ 0x34
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	4b0b      	ldr	r3, [pc, #44]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 80093a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a4:	4a0a      	ldr	r2, [pc, #40]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 80093a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80093ac:	4b08      	ldr	r3, [pc, #32]	@ (80093d0 <HAL_PCD_MspInit+0xa0>)
 80093ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	2043      	movs	r0, #67	@ 0x43
 80093be:	f7f9 f8b2 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093c2:	2043      	movs	r0, #67	@ 0x43
 80093c4:	f7f9 f8cb 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093c8:	bf00      	nop
 80093ca:	3728      	adds	r7, #40	@ 0x28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40023800 	.word	0x40023800
 80093d4:	40020000 	.word	0x40020000

080093d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fe fb49 	bl	8007a86 <USBD_LL_SetupStage>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	4619      	mov	r1, r3
 8009426:	f7fe fb83 	bl	8007b30 <USBD_LL_DataOutStage>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4613      	mov	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	440b      	add	r3, r1
 8009452:	3320      	adds	r3, #32
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	4619      	mov	r1, r3
 800945a:	f7fe fc1c 	bl	8007c96 <USBD_LL_DataInStage>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fd56 	bl	8007f26 <USBD_LL_SOF>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800948a:	2301      	movs	r3, #1
 800948c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	79db      	ldrb	r3, [r3, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
 800949a:	e008      	b.n	80094ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	79db      	ldrb	r3, [r3, #7]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d102      	bne.n	80094aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
 80094a8:	e001      	b.n	80094ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80094aa:	f7f8 fcf5 	bl	8001e98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094b4:	7bfa      	ldrb	r2, [r7, #15]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fcf0 	bl	8007e9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fc98 	bl	8007dfa <USBD_LL_Reset>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fceb 	bl	8007ebe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7adb      	ldrb	r3, [r3, #11]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009508:	4b04      	ldr	r3, [pc, #16]	@ (800951c <HAL_PCD_SuspendCallback+0x48>)
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	4a03      	ldr	r2, [pc, #12]	@ (800951c <HAL_PCD_SuspendCallback+0x48>)
 800950e:	f043 0306 	orr.w	r3, r3, #6
 8009512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	e000ed00 	.word	0xe000ed00

08009520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fce1 	bl	8007ef6 <USBD_LL_Resume>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fd39 	bl	8007fca <USBD_LL_IsoOUTIncomplete>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fcf5 	bl	8007f66 <USBD_LL_IsoINIncomplete>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fd4b 	bl	800802e <USBD_LL_DevConnected>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe fd48 	bl	8008044 <USBD_LL_DevDisconnected>
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d13c      	bne.n	8009646 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095cc:	4a20      	ldr	r2, [pc, #128]	@ (8009650 <USBD_LL_Init+0x94>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009650 <USBD_LL_Init+0x94>)
 80095d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009650 <USBD_LL_Init+0x94>)
 80095de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009650 <USBD_LL_Init+0x94>)
 80095e6:	2204      	movs	r2, #4
 80095e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095ea:	4b19      	ldr	r3, [pc, #100]	@ (8009650 <USBD_LL_Init+0x94>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095f0:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <USBD_LL_Init+0x94>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095f6:	4b16      	ldr	r3, [pc, #88]	@ (8009650 <USBD_LL_Init+0x94>)
 80095f8:	2202      	movs	r2, #2
 80095fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095fc:	4b14      	ldr	r3, [pc, #80]	@ (8009650 <USBD_LL_Init+0x94>)
 80095fe:	2200      	movs	r2, #0
 8009600:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009602:	4b13      	ldr	r3, [pc, #76]	@ (8009650 <USBD_LL_Init+0x94>)
 8009604:	2200      	movs	r2, #0
 8009606:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009608:	4b11      	ldr	r3, [pc, #68]	@ (8009650 <USBD_LL_Init+0x94>)
 800960a:	2200      	movs	r2, #0
 800960c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800960e:	4b10      	ldr	r3, [pc, #64]	@ (8009650 <USBD_LL_Init+0x94>)
 8009610:	2200      	movs	r2, #0
 8009612:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009614:	4b0e      	ldr	r3, [pc, #56]	@ (8009650 <USBD_LL_Init+0x94>)
 8009616:	2200      	movs	r2, #0
 8009618:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800961a:	480d      	ldr	r0, [pc, #52]	@ (8009650 <USBD_LL_Init+0x94>)
 800961c:	f7f9 f956 	bl	80028cc <HAL_PCD_Init>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009626:	f7f8 fc37 	bl	8001e98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800962a:	2180      	movs	r1, #128	@ 0x80
 800962c:	4808      	ldr	r0, [pc, #32]	@ (8009650 <USBD_LL_Init+0x94>)
 800962e:	f7fa fb82 	bl	8003d36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009632:	2240      	movs	r2, #64	@ 0x40
 8009634:	2100      	movs	r1, #0
 8009636:	4806      	ldr	r0, [pc, #24]	@ (8009650 <USBD_LL_Init+0x94>)
 8009638:	f7fa fb36 	bl	8003ca8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800963c:	2280      	movs	r2, #128	@ 0x80
 800963e:	2101      	movs	r1, #1
 8009640:	4803      	ldr	r0, [pc, #12]	@ (8009650 <USBD_LL_Init+0x94>)
 8009642:	f7fa fb31 	bl	8003ca8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200017f8 	.word	0x200017f8

08009654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800966a:	4618      	mov	r0, r3
 800966c:	f7f9 fa3d 	bl	8002aea <HAL_PCD_Start>
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f942 	bl	8009900 <USBD_Get_USB_Status>
 800967c:	4603      	mov	r3, r0
 800967e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009680:	7bbb      	ldrb	r3, [r7, #14]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	461a      	mov	r2, r3
 8009698:	4603      	mov	r3, r0
 800969a:	70fb      	strb	r3, [r7, #3]
 800969c:	460b      	mov	r3, r1
 800969e:	70bb      	strb	r3, [r7, #2]
 80096a0:	4613      	mov	r3, r2
 80096a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096b2:	78bb      	ldrb	r3, [r7, #2]
 80096b4:	883a      	ldrh	r2, [r7, #0]
 80096b6:	78f9      	ldrb	r1, [r7, #3]
 80096b8:	f7f9 ff11 	bl	80034de <HAL_PCD_EP_Open>
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f91c 	bl	8009900 <USBD_Get_USB_Status>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 ff5c 	bl	80035b2 <HAL_PCD_EP_Close>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f8fd 	bl	8009900 <USBD_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970a:	7bbb      	ldrb	r3, [r7, #14]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	4611      	mov	r1, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7fa f814 	bl	8003760 <HAL_PCD_EP_SetStall>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f8de 	bl	8009900 <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7fa f858 	bl	8003826 <HAL_PCD_EP_ClrStall>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f8bf 	bl	8009900 <USBD_Get_USB_Status>
 8009782:	4603      	mov	r3, r0
 8009784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009786:	7bbb      	ldrb	r3, [r7, #14]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da0b      	bge.n	80097c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	4613      	mov	r3, r2
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	3316      	adds	r3, #22
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	e00b      	b.n	80097dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80097da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7f9 fe45 	bl	8003496 <HAL_PCD_SetAddress>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f874 	bl	8009900 <USBD_Get_USB_Status>
 8009818:	4603      	mov	r3, r0
 800981a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981c:	7bbb      	ldrb	r3, [r7, #14]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b086      	sub	sp, #24
 800982a:	af00      	add	r7, sp, #0
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
 8009832:	460b      	mov	r3, r1
 8009834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009844:	7af9      	ldrb	r1, [r7, #11]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	f7f9 ff4f 	bl	80036ec <HAL_PCD_EP_Transmit>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f853 	bl	8009900 <USBD_Get_USB_Status>
 800985a:	4603      	mov	r3, r0
 800985c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	460b      	mov	r3, r1
 8009876:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009886:	7af9      	ldrb	r1, [r7, #11]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	f7f9 fedb 	bl	8003646 <HAL_PCD_EP_Receive>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f832 	bl	8009900 <USBD_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f9 fefb 	bl	80036bc <HAL_PCD_EP_GetRxCount>
 80098c6:	4603      	mov	r3, r0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098d8:	4b03      	ldr	r3, [pc, #12]	@ (80098e8 <USBD_static_malloc+0x18>)
}
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	20001cdc 	.word	0x20001cdc

080098ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]

}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d817      	bhi.n	8009944 <USBD_Get_USB_Status+0x44>
 8009914:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <USBD_Get_USB_Status+0x1c>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009933 	.word	0x08009933
 8009924:	08009939 	.word	0x08009939
 8009928:	0800993f 	.word	0x0800993f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
    break;
 8009930:	e00b      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009932:	2303      	movs	r3, #3
 8009934:	73fb      	strb	r3, [r7, #15]
    break;
 8009936:	e008      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e005      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e002      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009944:	2303      	movs	r3, #3
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	bf00      	nop
  }
  return usb_status;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <__assert_func>:
 8009958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800995a:	4614      	mov	r4, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4b09      	ldr	r3, [pc, #36]	@ (8009984 <__assert_func+0x2c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4605      	mov	r5, r0
 8009964:	68d8      	ldr	r0, [r3, #12]
 8009966:	b14c      	cbz	r4, 800997c <__assert_func+0x24>
 8009968:	4b07      	ldr	r3, [pc, #28]	@ (8009988 <__assert_func+0x30>)
 800996a:	9100      	str	r1, [sp, #0]
 800996c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009970:	4906      	ldr	r1, [pc, #24]	@ (800998c <__assert_func+0x34>)
 8009972:	462b      	mov	r3, r5
 8009974:	f000 fdbe 	bl	800a4f4 <fiprintf>
 8009978:	f000 fed1 	bl	800a71e <abort>
 800997c:	4b04      	ldr	r3, [pc, #16]	@ (8009990 <__assert_func+0x38>)
 800997e:	461c      	mov	r4, r3
 8009980:	e7f3      	b.n	800996a <__assert_func+0x12>
 8009982:	bf00      	nop
 8009984:	20000108 	.word	0x20000108
 8009988:	0800c37c 	.word	0x0800c37c
 800998c:	0800c389 	.word	0x0800c389
 8009990:	0800c3b7 	.word	0x0800c3b7

08009994 <malloc>:
 8009994:	4b02      	ldr	r3, [pc, #8]	@ (80099a0 <malloc+0xc>)
 8009996:	4601      	mov	r1, r0
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f000 b825 	b.w	80099e8 <_malloc_r>
 800999e:	bf00      	nop
 80099a0:	20000108 	.word	0x20000108

080099a4 <sbrk_aligned>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	4e0f      	ldr	r6, [pc, #60]	@ (80099e4 <sbrk_aligned+0x40>)
 80099a8:	460c      	mov	r4, r1
 80099aa:	6831      	ldr	r1, [r6, #0]
 80099ac:	4605      	mov	r5, r0
 80099ae:	b911      	cbnz	r1, 80099b6 <sbrk_aligned+0x12>
 80099b0:	f000 fe66 	bl	800a680 <_sbrk_r>
 80099b4:	6030      	str	r0, [r6, #0]
 80099b6:	4621      	mov	r1, r4
 80099b8:	4628      	mov	r0, r5
 80099ba:	f000 fe61 	bl	800a680 <_sbrk_r>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d103      	bne.n	80099ca <sbrk_aligned+0x26>
 80099c2:	f04f 34ff 	mov.w	r4, #4294967295
 80099c6:	4620      	mov	r0, r4
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	1cc4      	adds	r4, r0, #3
 80099cc:	f024 0403 	bic.w	r4, r4, #3
 80099d0:	42a0      	cmp	r0, r4
 80099d2:	d0f8      	beq.n	80099c6 <sbrk_aligned+0x22>
 80099d4:	1a21      	subs	r1, r4, r0
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 fe52 	bl	800a680 <_sbrk_r>
 80099dc:	3001      	adds	r0, #1
 80099de:	d1f2      	bne.n	80099c6 <sbrk_aligned+0x22>
 80099e0:	e7ef      	b.n	80099c2 <sbrk_aligned+0x1e>
 80099e2:	bf00      	nop
 80099e4:	20001efc 	.word	0x20001efc

080099e8 <_malloc_r>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	1ccd      	adds	r5, r1, #3
 80099ee:	f025 0503 	bic.w	r5, r5, #3
 80099f2:	3508      	adds	r5, #8
 80099f4:	2d0c      	cmp	r5, #12
 80099f6:	bf38      	it	cc
 80099f8:	250c      	movcc	r5, #12
 80099fa:	2d00      	cmp	r5, #0
 80099fc:	4606      	mov	r6, r0
 80099fe:	db01      	blt.n	8009a04 <_malloc_r+0x1c>
 8009a00:	42a9      	cmp	r1, r5
 8009a02:	d904      	bls.n	8009a0e <_malloc_r+0x26>
 8009a04:	230c      	movs	r3, #12
 8009a06:	6033      	str	r3, [r6, #0]
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ae4 <_malloc_r+0xfc>
 8009a12:	f000 f869 	bl	8009ae8 <__malloc_lock>
 8009a16:	f8d8 3000 	ldr.w	r3, [r8]
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	bb44      	cbnz	r4, 8009a70 <_malloc_r+0x88>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff ffbf 	bl	80099a4 <sbrk_aligned>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	4604      	mov	r4, r0
 8009a2a:	d158      	bne.n	8009ade <_malloc_r+0xf6>
 8009a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a30:	4627      	mov	r7, r4
 8009a32:	2f00      	cmp	r7, #0
 8009a34:	d143      	bne.n	8009abe <_malloc_r+0xd6>
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	d04b      	beq.n	8009ad2 <_malloc_r+0xea>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4630      	mov	r0, r6
 8009a40:	eb04 0903 	add.w	r9, r4, r3
 8009a44:	f000 fe1c 	bl	800a680 <_sbrk_r>
 8009a48:	4581      	cmp	r9, r0
 8009a4a:	d142      	bne.n	8009ad2 <_malloc_r+0xea>
 8009a4c:	6821      	ldr	r1, [r4, #0]
 8009a4e:	1a6d      	subs	r5, r5, r1
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ffa6 	bl	80099a4 <sbrk_aligned>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d03a      	beq.n	8009ad2 <_malloc_r+0xea>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	442b      	add	r3, r5
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	f8d8 3000 	ldr.w	r3, [r8]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	bb62      	cbnz	r2, 8009ac4 <_malloc_r+0xdc>
 8009a6a:	f8c8 7000 	str.w	r7, [r8]
 8009a6e:	e00f      	b.n	8009a90 <_malloc_r+0xa8>
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	1b52      	subs	r2, r2, r5
 8009a74:	d420      	bmi.n	8009ab8 <_malloc_r+0xd0>
 8009a76:	2a0b      	cmp	r2, #11
 8009a78:	d917      	bls.n	8009aaa <_malloc_r+0xc2>
 8009a7a:	1961      	adds	r1, r4, r5
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	6025      	str	r5, [r4, #0]
 8009a80:	bf18      	it	ne
 8009a82:	6059      	strne	r1, [r3, #4]
 8009a84:	6863      	ldr	r3, [r4, #4]
 8009a86:	bf08      	it	eq
 8009a88:	f8c8 1000 	streq.w	r1, [r8]
 8009a8c:	5162      	str	r2, [r4, r5]
 8009a8e:	604b      	str	r3, [r1, #4]
 8009a90:	4630      	mov	r0, r6
 8009a92:	f000 f82f 	bl	8009af4 <__malloc_unlock>
 8009a96:	f104 000b 	add.w	r0, r4, #11
 8009a9a:	1d23      	adds	r3, r4, #4
 8009a9c:	f020 0007 	bic.w	r0, r0, #7
 8009aa0:	1ac2      	subs	r2, r0, r3
 8009aa2:	bf1c      	itt	ne
 8009aa4:	1a1b      	subne	r3, r3, r0
 8009aa6:	50a3      	strne	r3, [r4, r2]
 8009aa8:	e7af      	b.n	8009a0a <_malloc_r+0x22>
 8009aaa:	6862      	ldr	r2, [r4, #4]
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	bf0c      	ite	eq
 8009ab0:	f8c8 2000 	streq.w	r2, [r8]
 8009ab4:	605a      	strne	r2, [r3, #4]
 8009ab6:	e7eb      	b.n	8009a90 <_malloc_r+0xa8>
 8009ab8:	4623      	mov	r3, r4
 8009aba:	6864      	ldr	r4, [r4, #4]
 8009abc:	e7ae      	b.n	8009a1c <_malloc_r+0x34>
 8009abe:	463c      	mov	r4, r7
 8009ac0:	687f      	ldr	r7, [r7, #4]
 8009ac2:	e7b6      	b.n	8009a32 <_malloc_r+0x4a>
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	d1fb      	bne.n	8009ac4 <_malloc_r+0xdc>
 8009acc:	2300      	movs	r3, #0
 8009ace:	6053      	str	r3, [r2, #4]
 8009ad0:	e7de      	b.n	8009a90 <_malloc_r+0xa8>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f000 f80c 	bl	8009af4 <__malloc_unlock>
 8009adc:	e794      	b.n	8009a08 <_malloc_r+0x20>
 8009ade:	6005      	str	r5, [r0, #0]
 8009ae0:	e7d6      	b.n	8009a90 <_malloc_r+0xa8>
 8009ae2:	bf00      	nop
 8009ae4:	20001f00 	.word	0x20001f00

08009ae8 <__malloc_lock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	@ (8009af0 <__malloc_lock+0x8>)
 8009aea:	f000 be16 	b.w	800a71a <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	20002044 	.word	0x20002044

08009af4 <__malloc_unlock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	@ (8009afc <__malloc_unlock+0x8>)
 8009af6:	f000 be11 	b.w	800a71c <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	20002044 	.word	0x20002044

08009b00 <__cvt>:
 8009b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	ec57 6b10 	vmov	r6, r7, d0
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	463b      	mov	r3, r7
 8009b10:	bfbb      	ittet	lt
 8009b12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b16:	461f      	movlt	r7, r3
 8009b18:	2300      	movge	r3, #0
 8009b1a:	232d      	movlt	r3, #45	@ 0x2d
 8009b1c:	700b      	strb	r3, [r1, #0]
 8009b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b24:	4691      	mov	r9, r2
 8009b26:	f023 0820 	bic.w	r8, r3, #32
 8009b2a:	bfbc      	itt	lt
 8009b2c:	4632      	movlt	r2, r6
 8009b2e:	4616      	movlt	r6, r2
 8009b30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b34:	d005      	beq.n	8009b42 <__cvt+0x42>
 8009b36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b3a:	d100      	bne.n	8009b3e <__cvt+0x3e>
 8009b3c:	3401      	adds	r4, #1
 8009b3e:	2102      	movs	r1, #2
 8009b40:	e000      	b.n	8009b44 <__cvt+0x44>
 8009b42:	2103      	movs	r1, #3
 8009b44:	ab03      	add	r3, sp, #12
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	ab02      	add	r3, sp, #8
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	ec47 6b10 	vmov	d0, r6, r7
 8009b50:	4653      	mov	r3, sl
 8009b52:	4622      	mov	r2, r4
 8009b54:	f000 fe74 	bl	800a840 <_dtoa_r>
 8009b58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	d119      	bne.n	8009b94 <__cvt+0x94>
 8009b60:	f019 0f01 	tst.w	r9, #1
 8009b64:	d00e      	beq.n	8009b84 <__cvt+0x84>
 8009b66:	eb00 0904 	add.w	r9, r0, r4
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	f7f6 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b76:	b108      	cbz	r0, 8009b7c <__cvt+0x7c>
 8009b78:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b7c:	2230      	movs	r2, #48	@ 0x30
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	454b      	cmp	r3, r9
 8009b82:	d31e      	bcc.n	8009bc2 <__cvt+0xc2>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b88:	1b5b      	subs	r3, r3, r5
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	b004      	add	sp, #16
 8009b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b98:	eb00 0904 	add.w	r9, r0, r4
 8009b9c:	d1e5      	bne.n	8009b6a <__cvt+0x6a>
 8009b9e:	7803      	ldrb	r3, [r0, #0]
 8009ba0:	2b30      	cmp	r3, #48	@ 0x30
 8009ba2:	d10a      	bne.n	8009bba <__cvt+0xba>
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f6 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb0:	b918      	cbnz	r0, 8009bba <__cvt+0xba>
 8009bb2:	f1c4 0401 	rsb	r4, r4, #1
 8009bb6:	f8ca 4000 	str.w	r4, [sl]
 8009bba:	f8da 3000 	ldr.w	r3, [sl]
 8009bbe:	4499      	add	r9, r3
 8009bc0:	e7d3      	b.n	8009b6a <__cvt+0x6a>
 8009bc2:	1c59      	adds	r1, r3, #1
 8009bc4:	9103      	str	r1, [sp, #12]
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e7d9      	b.n	8009b7e <__cvt+0x7e>

08009bca <__exponent>:
 8009bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	bfba      	itte	lt
 8009bd0:	4249      	neglt	r1, r1
 8009bd2:	232d      	movlt	r3, #45	@ 0x2d
 8009bd4:	232b      	movge	r3, #43	@ 0x2b
 8009bd6:	2909      	cmp	r1, #9
 8009bd8:	7002      	strb	r2, [r0, #0]
 8009bda:	7043      	strb	r3, [r0, #1]
 8009bdc:	dd29      	ble.n	8009c32 <__exponent+0x68>
 8009bde:	f10d 0307 	add.w	r3, sp, #7
 8009be2:	461d      	mov	r5, r3
 8009be4:	270a      	movs	r7, #10
 8009be6:	461a      	mov	r2, r3
 8009be8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bec:	fb07 1416 	mls	r4, r7, r6, r1
 8009bf0:	3430      	adds	r4, #48	@ 0x30
 8009bf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2c63      	cmp	r4, #99	@ 0x63
 8009bfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bfe:	4631      	mov	r1, r6
 8009c00:	dcf1      	bgt.n	8009be6 <__exponent+0x1c>
 8009c02:	3130      	adds	r1, #48	@ 0x30
 8009c04:	1e94      	subs	r4, r2, #2
 8009c06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c0a:	1c41      	adds	r1, r0, #1
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	42ab      	cmp	r3, r5
 8009c10:	d30a      	bcc.n	8009c28 <__exponent+0x5e>
 8009c12:	f10d 0309 	add.w	r3, sp, #9
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	42ac      	cmp	r4, r5
 8009c1a:	bf88      	it	hi
 8009c1c:	2300      	movhi	r3, #0
 8009c1e:	3302      	adds	r3, #2
 8009c20:	4403      	add	r3, r0
 8009c22:	1a18      	subs	r0, r3, r0
 8009c24:	b003      	add	sp, #12
 8009c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c30:	e7ed      	b.n	8009c0e <__exponent+0x44>
 8009c32:	2330      	movs	r3, #48	@ 0x30
 8009c34:	3130      	adds	r1, #48	@ 0x30
 8009c36:	7083      	strb	r3, [r0, #2]
 8009c38:	70c1      	strb	r1, [r0, #3]
 8009c3a:	1d03      	adds	r3, r0, #4
 8009c3c:	e7f1      	b.n	8009c22 <__exponent+0x58>
	...

08009c40 <_printf_float>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	b08d      	sub	sp, #52	@ 0x34
 8009c46:	460c      	mov	r4, r1
 8009c48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	461f      	mov	r7, r3
 8009c50:	4605      	mov	r5, r0
 8009c52:	f000 fcdd 	bl	800a610 <_localeconv_r>
 8009c56:	6803      	ldr	r3, [r0, #0]
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7f6 fb08 	bl	8000270 <strlen>
 8009c60:	2300      	movs	r3, #0
 8009c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c64:	f8d8 3000 	ldr.w	r3, [r8]
 8009c68:	9005      	str	r0, [sp, #20]
 8009c6a:	3307      	adds	r3, #7
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	f103 0208 	add.w	r2, r3, #8
 8009c74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c78:	f8d4 b000 	ldr.w	fp, [r4]
 8009c7c:	f8c8 2000 	str.w	r2, [r8]
 8009c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c96:	4b9c      	ldr	r3, [pc, #624]	@ (8009f08 <_printf_float+0x2c8>)
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9c:	f7f6 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8009ca0:	bb70      	cbnz	r0, 8009d00 <_printf_float+0xc0>
 8009ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca6:	4b98      	ldr	r3, [pc, #608]	@ (8009f08 <_printf_float+0x2c8>)
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cac:	f7f6 ff20 	bl	8000af0 <__aeabi_dcmple>
 8009cb0:	bb30      	cbnz	r0, 8009d00 <_printf_float+0xc0>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8009cbe:	b110      	cbz	r0, 8009cc6 <_printf_float+0x86>
 8009cc0:	232d      	movs	r3, #45	@ 0x2d
 8009cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cc6:	4a91      	ldr	r2, [pc, #580]	@ (8009f0c <_printf_float+0x2cc>)
 8009cc8:	4b91      	ldr	r3, [pc, #580]	@ (8009f10 <_printf_float+0x2d0>)
 8009cca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009cce:	bf8c      	ite	hi
 8009cd0:	4690      	movhi	r8, r2
 8009cd2:	4698      	movls	r8, r3
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	f02b 0304 	bic.w	r3, fp, #4
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	f04f 0900 	mov.w	r9, #0
 8009ce2:	9700      	str	r7, [sp, #0]
 8009ce4:	4633      	mov	r3, r6
 8009ce6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f9d2 	bl	800a094 <_printf_common>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f040 808d 	bne.w	8009e10 <_printf_float+0x1d0>
 8009cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfa:	b00d      	add	sp, #52	@ 0x34
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	4642      	mov	r2, r8
 8009d02:	464b      	mov	r3, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	4649      	mov	r1, r9
 8009d08:	f7f6 ff10 	bl	8000b2c <__aeabi_dcmpun>
 8009d0c:	b140      	cbz	r0, 8009d20 <_printf_float+0xe0>
 8009d0e:	464b      	mov	r3, r9
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfbc      	itt	lt
 8009d14:	232d      	movlt	r3, #45	@ 0x2d
 8009d16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8009f14 <_printf_float+0x2d4>)
 8009d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f18 <_printf_float+0x2d8>)
 8009d1e:	e7d4      	b.n	8009cca <_printf_float+0x8a>
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d26:	9206      	str	r2, [sp, #24]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	d13b      	bne.n	8009da4 <_printf_float+0x164>
 8009d2c:	2306      	movs	r3, #6
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d34:	2300      	movs	r3, #0
 8009d36:	6022      	str	r2, [r4, #0]
 8009d38:	9303      	str	r3, [sp, #12]
 8009d3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d40:	ab09      	add	r3, sp, #36	@ 0x24
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	6861      	ldr	r1, [r4, #4]
 8009d46:	ec49 8b10 	vmov	d0, r8, r9
 8009d4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7ff fed6 	bl	8009b00 <__cvt>
 8009d54:	9b06      	ldr	r3, [sp, #24]
 8009d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d58:	2b47      	cmp	r3, #71	@ 0x47
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	d129      	bne.n	8009db2 <_printf_float+0x172>
 8009d5e:	1cc8      	adds	r0, r1, #3
 8009d60:	db02      	blt.n	8009d68 <_printf_float+0x128>
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	4299      	cmp	r1, r3
 8009d66:	dd41      	ble.n	8009dec <_printf_float+0x1ac>
 8009d68:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d6c:	fa5f fa8a 	uxtb.w	sl, sl
 8009d70:	3901      	subs	r1, #1
 8009d72:	4652      	mov	r2, sl
 8009d74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d78:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d7a:	f7ff ff26 	bl	8009bca <__exponent>
 8009d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d80:	1813      	adds	r3, r2, r0
 8009d82:	2a01      	cmp	r2, #1
 8009d84:	4681      	mov	r9, r0
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	dc02      	bgt.n	8009d90 <_printf_float+0x150>
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	07d2      	lsls	r2, r2, #31
 8009d8e:	d501      	bpl.n	8009d94 <_printf_float+0x154>
 8009d90:	3301      	adds	r3, #1
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0a2      	beq.n	8009ce2 <_printf_float+0xa2>
 8009d9c:	232d      	movs	r3, #45	@ 0x2d
 8009d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009da2:	e79e      	b.n	8009ce2 <_printf_float+0xa2>
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	2a47      	cmp	r2, #71	@ 0x47
 8009da8:	d1c2      	bne.n	8009d30 <_printf_float+0xf0>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1c0      	bne.n	8009d30 <_printf_float+0xf0>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e7bd      	b.n	8009d2e <_printf_float+0xee>
 8009db2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009db6:	d9db      	bls.n	8009d70 <_printf_float+0x130>
 8009db8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009dbc:	d118      	bne.n	8009df0 <_printf_float+0x1b0>
 8009dbe:	2900      	cmp	r1, #0
 8009dc0:	6863      	ldr	r3, [r4, #4]
 8009dc2:	dd0b      	ble.n	8009ddc <_printf_float+0x19c>
 8009dc4:	6121      	str	r1, [r4, #16]
 8009dc6:	b913      	cbnz	r3, 8009dce <_printf_float+0x18e>
 8009dc8:	6822      	ldr	r2, [r4, #0]
 8009dca:	07d0      	lsls	r0, r2, #31
 8009dcc:	d502      	bpl.n	8009dd4 <_printf_float+0x194>
 8009dce:	3301      	adds	r3, #1
 8009dd0:	440b      	add	r3, r1
 8009dd2:	6123      	str	r3, [r4, #16]
 8009dd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009dd6:	f04f 0900 	mov.w	r9, #0
 8009dda:	e7db      	b.n	8009d94 <_printf_float+0x154>
 8009ddc:	b913      	cbnz	r3, 8009de4 <_printf_float+0x1a4>
 8009dde:	6822      	ldr	r2, [r4, #0]
 8009de0:	07d2      	lsls	r2, r2, #31
 8009de2:	d501      	bpl.n	8009de8 <_printf_float+0x1a8>
 8009de4:	3302      	adds	r3, #2
 8009de6:	e7f4      	b.n	8009dd2 <_printf_float+0x192>
 8009de8:	2301      	movs	r3, #1
 8009dea:	e7f2      	b.n	8009dd2 <_printf_float+0x192>
 8009dec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df2:	4299      	cmp	r1, r3
 8009df4:	db05      	blt.n	8009e02 <_printf_float+0x1c2>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	6121      	str	r1, [r4, #16]
 8009dfa:	07d8      	lsls	r0, r3, #31
 8009dfc:	d5ea      	bpl.n	8009dd4 <_printf_float+0x194>
 8009dfe:	1c4b      	adds	r3, r1, #1
 8009e00:	e7e7      	b.n	8009dd2 <_printf_float+0x192>
 8009e02:	2900      	cmp	r1, #0
 8009e04:	bfd4      	ite	le
 8009e06:	f1c1 0202 	rsble	r2, r1, #2
 8009e0a:	2201      	movgt	r2, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	e7e0      	b.n	8009dd2 <_printf_float+0x192>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	055a      	lsls	r2, r3, #21
 8009e14:	d407      	bmi.n	8009e26 <_printf_float+0x1e6>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	4642      	mov	r2, r8
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	d12b      	bne.n	8009e7c <_printf_float+0x23c>
 8009e24:	e767      	b.n	8009cf6 <_printf_float+0xb6>
 8009e26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e2a:	f240 80dd 	bls.w	8009fe8 <_printf_float+0x3a8>
 8009e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e32:	2200      	movs	r2, #0
 8009e34:	2300      	movs	r3, #0
 8009e36:	f7f6 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d033      	beq.n	8009ea6 <_printf_float+0x266>
 8009e3e:	4a37      	ldr	r2, [pc, #220]	@ (8009f1c <_printf_float+0x2dc>)
 8009e40:	2301      	movs	r3, #1
 8009e42:	4631      	mov	r1, r6
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b8      	blx	r7
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f43f af54 	beq.w	8009cf6 <_printf_float+0xb6>
 8009e4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e52:	4543      	cmp	r3, r8
 8009e54:	db02      	blt.n	8009e5c <_printf_float+0x21c>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	07d8      	lsls	r0, r3, #31
 8009e5a:	d50f      	bpl.n	8009e7c <_printf_float+0x23c>
 8009e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	47b8      	blx	r7
 8009e66:	3001      	adds	r0, #1
 8009e68:	f43f af45 	beq.w	8009cf6 <_printf_float+0xb6>
 8009e6c:	f04f 0900 	mov.w	r9, #0
 8009e70:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e74:	f104 0a1a 	add.w	sl, r4, #26
 8009e78:	45c8      	cmp	r8, r9
 8009e7a:	dc09      	bgt.n	8009e90 <_printf_float+0x250>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	079b      	lsls	r3, r3, #30
 8009e80:	f100 8103 	bmi.w	800a08a <_printf_float+0x44a>
 8009e84:	68e0      	ldr	r0, [r4, #12]
 8009e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e88:	4298      	cmp	r0, r3
 8009e8a:	bfb8      	it	lt
 8009e8c:	4618      	movlt	r0, r3
 8009e8e:	e734      	b.n	8009cfa <_printf_float+0xba>
 8009e90:	2301      	movs	r3, #1
 8009e92:	4652      	mov	r2, sl
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f af2b 	beq.w	8009cf6 <_printf_float+0xb6>
 8009ea0:	f109 0901 	add.w	r9, r9, #1
 8009ea4:	e7e8      	b.n	8009e78 <_printf_float+0x238>
 8009ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc39      	bgt.n	8009f20 <_printf_float+0x2e0>
 8009eac:	4a1b      	ldr	r2, [pc, #108]	@ (8009f1c <_printf_float+0x2dc>)
 8009eae:	2301      	movs	r3, #1
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b8      	blx	r7
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	f43f af1d 	beq.w	8009cf6 <_printf_float+0xb6>
 8009ebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ec0:	ea59 0303 	orrs.w	r3, r9, r3
 8009ec4:	d102      	bne.n	8009ecc <_printf_float+0x28c>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	07d9      	lsls	r1, r3, #31
 8009eca:	d5d7      	bpl.n	8009e7c <_printf_float+0x23c>
 8009ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f af0d 	beq.w	8009cf6 <_printf_float+0xb6>
 8009edc:	f04f 0a00 	mov.w	sl, #0
 8009ee0:	f104 0b1a 	add.w	fp, r4, #26
 8009ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee6:	425b      	negs	r3, r3
 8009ee8:	4553      	cmp	r3, sl
 8009eea:	dc01      	bgt.n	8009ef0 <_printf_float+0x2b0>
 8009eec:	464b      	mov	r3, r9
 8009eee:	e793      	b.n	8009e18 <_printf_float+0x1d8>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	465a      	mov	r2, fp
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f aefb 	beq.w	8009cf6 <_printf_float+0xb6>
 8009f00:	f10a 0a01 	add.w	sl, sl, #1
 8009f04:	e7ee      	b.n	8009ee4 <_printf_float+0x2a4>
 8009f06:	bf00      	nop
 8009f08:	7fefffff 	.word	0x7fefffff
 8009f0c:	0800c3bc 	.word	0x0800c3bc
 8009f10:	0800c3b8 	.word	0x0800c3b8
 8009f14:	0800c3c4 	.word	0x0800c3c4
 8009f18:	0800c3c0 	.word	0x0800c3c0
 8009f1c:	0800c3c8 	.word	0x0800c3c8
 8009f20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f26:	4553      	cmp	r3, sl
 8009f28:	bfa8      	it	ge
 8009f2a:	4653      	movge	r3, sl
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	4699      	mov	r9, r3
 8009f30:	dc36      	bgt.n	8009fa0 <_printf_float+0x360>
 8009f32:	f04f 0b00 	mov.w	fp, #0
 8009f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f3a:	f104 021a 	add.w	r2, r4, #26
 8009f3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f40:	9306      	str	r3, [sp, #24]
 8009f42:	eba3 0309 	sub.w	r3, r3, r9
 8009f46:	455b      	cmp	r3, fp
 8009f48:	dc31      	bgt.n	8009fae <_printf_float+0x36e>
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	459a      	cmp	sl, r3
 8009f4e:	dc3a      	bgt.n	8009fc6 <_printf_float+0x386>
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	07da      	lsls	r2, r3, #31
 8009f54:	d437      	bmi.n	8009fc6 <_printf_float+0x386>
 8009f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f58:	ebaa 0903 	sub.w	r9, sl, r3
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	ebaa 0303 	sub.w	r3, sl, r3
 8009f62:	4599      	cmp	r9, r3
 8009f64:	bfa8      	it	ge
 8009f66:	4699      	movge	r9, r3
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	dc33      	bgt.n	8009fd6 <_printf_float+0x396>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f76:	f104 0b1a 	add.w	fp, r4, #26
 8009f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f80:	eba3 0309 	sub.w	r3, r3, r9
 8009f84:	4543      	cmp	r3, r8
 8009f86:	f77f af79 	ble.w	8009e7c <_printf_float+0x23c>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	465a      	mov	r2, fp
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4628      	mov	r0, r5
 8009f92:	47b8      	blx	r7
 8009f94:	3001      	adds	r0, #1
 8009f96:	f43f aeae 	beq.w	8009cf6 <_printf_float+0xb6>
 8009f9a:	f108 0801 	add.w	r8, r8, #1
 8009f9e:	e7ec      	b.n	8009f7a <_printf_float+0x33a>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d1c2      	bne.n	8009f32 <_printf_float+0x2f2>
 8009fac:	e6a3      	b.n	8009cf6 <_printf_float+0xb6>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	9206      	str	r2, [sp, #24]
 8009fb6:	47b8      	blx	r7
 8009fb8:	3001      	adds	r0, #1
 8009fba:	f43f ae9c 	beq.w	8009cf6 <_printf_float+0xb6>
 8009fbe:	9a06      	ldr	r2, [sp, #24]
 8009fc0:	f10b 0b01 	add.w	fp, fp, #1
 8009fc4:	e7bb      	b.n	8009f3e <_printf_float+0x2fe>
 8009fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1c0      	bne.n	8009f56 <_printf_float+0x316>
 8009fd4:	e68f      	b.n	8009cf6 <_printf_float+0xb6>
 8009fd6:	9a06      	ldr	r2, [sp, #24]
 8009fd8:	464b      	mov	r3, r9
 8009fda:	4442      	add	r2, r8
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d1c3      	bne.n	8009f6e <_printf_float+0x32e>
 8009fe6:	e686      	b.n	8009cf6 <_printf_float+0xb6>
 8009fe8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fec:	f1ba 0f01 	cmp.w	sl, #1
 8009ff0:	dc01      	bgt.n	8009ff6 <_printf_float+0x3b6>
 8009ff2:	07db      	lsls	r3, r3, #31
 8009ff4:	d536      	bpl.n	800a064 <_printf_float+0x424>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	f43f ae78 	beq.w	8009cf6 <_printf_float+0xb6>
 800a006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae70 	beq.w	8009cf6 <_printf_float+0xb6>
 800a016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a022:	f7f6 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800a026:	b9c0      	cbnz	r0, 800a05a <_printf_float+0x41a>
 800a028:	4653      	mov	r3, sl
 800a02a:	f108 0201 	add.w	r2, r8, #1
 800a02e:	4631      	mov	r1, r6
 800a030:	4628      	mov	r0, r5
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	d10c      	bne.n	800a052 <_printf_float+0x412>
 800a038:	e65d      	b.n	8009cf6 <_printf_float+0xb6>
 800a03a:	2301      	movs	r3, #1
 800a03c:	465a      	mov	r2, fp
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	f43f ae56 	beq.w	8009cf6 <_printf_float+0xb6>
 800a04a:	f108 0801 	add.w	r8, r8, #1
 800a04e:	45d0      	cmp	r8, sl
 800a050:	dbf3      	blt.n	800a03a <_printf_float+0x3fa>
 800a052:	464b      	mov	r3, r9
 800a054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a058:	e6df      	b.n	8009e1a <_printf_float+0x1da>
 800a05a:	f04f 0800 	mov.w	r8, #0
 800a05e:	f104 0b1a 	add.w	fp, r4, #26
 800a062:	e7f4      	b.n	800a04e <_printf_float+0x40e>
 800a064:	2301      	movs	r3, #1
 800a066:	4642      	mov	r2, r8
 800a068:	e7e1      	b.n	800a02e <_printf_float+0x3ee>
 800a06a:	2301      	movs	r3, #1
 800a06c:	464a      	mov	r2, r9
 800a06e:	4631      	mov	r1, r6
 800a070:	4628      	mov	r0, r5
 800a072:	47b8      	blx	r7
 800a074:	3001      	adds	r0, #1
 800a076:	f43f ae3e 	beq.w	8009cf6 <_printf_float+0xb6>
 800a07a:	f108 0801 	add.w	r8, r8, #1
 800a07e:	68e3      	ldr	r3, [r4, #12]
 800a080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a082:	1a5b      	subs	r3, r3, r1
 800a084:	4543      	cmp	r3, r8
 800a086:	dcf0      	bgt.n	800a06a <_printf_float+0x42a>
 800a088:	e6fc      	b.n	8009e84 <_printf_float+0x244>
 800a08a:	f04f 0800 	mov.w	r8, #0
 800a08e:	f104 0919 	add.w	r9, r4, #25
 800a092:	e7f4      	b.n	800a07e <_printf_float+0x43e>

0800a094 <_printf_common>:
 800a094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	4616      	mov	r6, r2
 800a09a:	4698      	mov	r8, r3
 800a09c:	688a      	ldr	r2, [r1, #8]
 800a09e:	690b      	ldr	r3, [r1, #16]
 800a0a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bfb8      	it	lt
 800a0a8:	4613      	movlt	r3, r2
 800a0aa:	6033      	str	r3, [r6, #0]
 800a0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b10a      	cbz	r2, 800a0ba <_printf_common+0x26>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	0699      	lsls	r1, r3, #26
 800a0be:	bf42      	ittt	mi
 800a0c0:	6833      	ldrmi	r3, [r6, #0]
 800a0c2:	3302      	addmi	r3, #2
 800a0c4:	6033      	strmi	r3, [r6, #0]
 800a0c6:	6825      	ldr	r5, [r4, #0]
 800a0c8:	f015 0506 	ands.w	r5, r5, #6
 800a0cc:	d106      	bne.n	800a0dc <_printf_common+0x48>
 800a0ce:	f104 0a19 	add.w	sl, r4, #25
 800a0d2:	68e3      	ldr	r3, [r4, #12]
 800a0d4:	6832      	ldr	r2, [r6, #0]
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc26      	bgt.n	800a12a <_printf_common+0x96>
 800a0dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0e0:	6822      	ldr	r2, [r4, #0]
 800a0e2:	3b00      	subs	r3, #0
 800a0e4:	bf18      	it	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	0692      	lsls	r2, r2, #26
 800a0ea:	d42b      	bmi.n	800a144 <_printf_common+0xb0>
 800a0ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c8      	blx	r9
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d01e      	beq.n	800a138 <_printf_common+0xa4>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	6922      	ldr	r2, [r4, #16]
 800a0fe:	f003 0306 	and.w	r3, r3, #6
 800a102:	2b04      	cmp	r3, #4
 800a104:	bf02      	ittt	eq
 800a106:	68e5      	ldreq	r5, [r4, #12]
 800a108:	6833      	ldreq	r3, [r6, #0]
 800a10a:	1aed      	subeq	r5, r5, r3
 800a10c:	68a3      	ldr	r3, [r4, #8]
 800a10e:	bf0c      	ite	eq
 800a110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a114:	2500      	movne	r5, #0
 800a116:	4293      	cmp	r3, r2
 800a118:	bfc4      	itt	gt
 800a11a:	1a9b      	subgt	r3, r3, r2
 800a11c:	18ed      	addgt	r5, r5, r3
 800a11e:	2600      	movs	r6, #0
 800a120:	341a      	adds	r4, #26
 800a122:	42b5      	cmp	r5, r6
 800a124:	d11a      	bne.n	800a15c <_printf_common+0xc8>
 800a126:	2000      	movs	r0, #0
 800a128:	e008      	b.n	800a13c <_printf_common+0xa8>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4652      	mov	r2, sl
 800a12e:	4641      	mov	r1, r8
 800a130:	4638      	mov	r0, r7
 800a132:	47c8      	blx	r9
 800a134:	3001      	adds	r0, #1
 800a136:	d103      	bne.n	800a140 <_printf_common+0xac>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a140:	3501      	adds	r5, #1
 800a142:	e7c6      	b.n	800a0d2 <_printf_common+0x3e>
 800a144:	18e1      	adds	r1, r4, r3
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	2030      	movs	r0, #48	@ 0x30
 800a14a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a14e:	4422      	add	r2, r4
 800a150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a158:	3302      	adds	r3, #2
 800a15a:	e7c7      	b.n	800a0ec <_printf_common+0x58>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4622      	mov	r2, r4
 800a160:	4641      	mov	r1, r8
 800a162:	4638      	mov	r0, r7
 800a164:	47c8      	blx	r9
 800a166:	3001      	adds	r0, #1
 800a168:	d0e6      	beq.n	800a138 <_printf_common+0xa4>
 800a16a:	3601      	adds	r6, #1
 800a16c:	e7d9      	b.n	800a122 <_printf_common+0x8e>
	...

0800a170 <_printf_i>:
 800a170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	7e0f      	ldrb	r7, [r1, #24]
 800a176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a178:	2f78      	cmp	r7, #120	@ 0x78
 800a17a:	4691      	mov	r9, r2
 800a17c:	4680      	mov	r8, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	469a      	mov	sl, r3
 800a182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a186:	d807      	bhi.n	800a198 <_printf_i+0x28>
 800a188:	2f62      	cmp	r7, #98	@ 0x62
 800a18a:	d80a      	bhi.n	800a1a2 <_printf_i+0x32>
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	f000 80d1 	beq.w	800a334 <_printf_i+0x1c4>
 800a192:	2f58      	cmp	r7, #88	@ 0x58
 800a194:	f000 80b8 	beq.w	800a308 <_printf_i+0x198>
 800a198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a19c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1a0:	e03a      	b.n	800a218 <_printf_i+0xa8>
 800a1a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1a6:	2b15      	cmp	r3, #21
 800a1a8:	d8f6      	bhi.n	800a198 <_printf_i+0x28>
 800a1aa:	a101      	add	r1, pc, #4	@ (adr r1, 800a1b0 <_printf_i+0x40>)
 800a1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a199 	.word	0x0800a199
 800a1bc:	0800a199 	.word	0x0800a199
 800a1c0:	0800a199 	.word	0x0800a199
 800a1c4:	0800a199 	.word	0x0800a199
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a199 	.word	0x0800a199
 800a1d0:	0800a199 	.word	0x0800a199
 800a1d4:	0800a199 	.word	0x0800a199
 800a1d8:	0800a199 	.word	0x0800a199
 800a1dc:	0800a31b 	.word	0x0800a31b
 800a1e0:	0800a247 	.word	0x0800a247
 800a1e4:	0800a2d5 	.word	0x0800a2d5
 800a1e8:	0800a199 	.word	0x0800a199
 800a1ec:	0800a199 	.word	0x0800a199
 800a1f0:	0800a33d 	.word	0x0800a33d
 800a1f4:	0800a199 	.word	0x0800a199
 800a1f8:	0800a247 	.word	0x0800a247
 800a1fc:	0800a199 	.word	0x0800a199
 800a200:	0800a199 	.word	0x0800a199
 800a204:	0800a2dd 	.word	0x0800a2dd
 800a208:	6833      	ldr	r3, [r6, #0]
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6032      	str	r2, [r6, #0]
 800a210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a218:	2301      	movs	r3, #1
 800a21a:	e09c      	b.n	800a356 <_printf_i+0x1e6>
 800a21c:	6833      	ldr	r3, [r6, #0]
 800a21e:	6820      	ldr	r0, [r4, #0]
 800a220:	1d19      	adds	r1, r3, #4
 800a222:	6031      	str	r1, [r6, #0]
 800a224:	0606      	lsls	r6, r0, #24
 800a226:	d501      	bpl.n	800a22c <_printf_i+0xbc>
 800a228:	681d      	ldr	r5, [r3, #0]
 800a22a:	e003      	b.n	800a234 <_printf_i+0xc4>
 800a22c:	0645      	lsls	r5, r0, #25
 800a22e:	d5fb      	bpl.n	800a228 <_printf_i+0xb8>
 800a230:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a234:	2d00      	cmp	r5, #0
 800a236:	da03      	bge.n	800a240 <_printf_i+0xd0>
 800a238:	232d      	movs	r3, #45	@ 0x2d
 800a23a:	426d      	negs	r5, r5
 800a23c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a240:	4858      	ldr	r0, [pc, #352]	@ (800a3a4 <_printf_i+0x234>)
 800a242:	230a      	movs	r3, #10
 800a244:	e011      	b.n	800a26a <_printf_i+0xfa>
 800a246:	6821      	ldr	r1, [r4, #0]
 800a248:	6833      	ldr	r3, [r6, #0]
 800a24a:	0608      	lsls	r0, r1, #24
 800a24c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a250:	d402      	bmi.n	800a258 <_printf_i+0xe8>
 800a252:	0649      	lsls	r1, r1, #25
 800a254:	bf48      	it	mi
 800a256:	b2ad      	uxthmi	r5, r5
 800a258:	2f6f      	cmp	r7, #111	@ 0x6f
 800a25a:	4852      	ldr	r0, [pc, #328]	@ (800a3a4 <_printf_i+0x234>)
 800a25c:	6033      	str	r3, [r6, #0]
 800a25e:	bf14      	ite	ne
 800a260:	230a      	movne	r3, #10
 800a262:	2308      	moveq	r3, #8
 800a264:	2100      	movs	r1, #0
 800a266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a26a:	6866      	ldr	r6, [r4, #4]
 800a26c:	60a6      	str	r6, [r4, #8]
 800a26e:	2e00      	cmp	r6, #0
 800a270:	db05      	blt.n	800a27e <_printf_i+0x10e>
 800a272:	6821      	ldr	r1, [r4, #0]
 800a274:	432e      	orrs	r6, r5
 800a276:	f021 0104 	bic.w	r1, r1, #4
 800a27a:	6021      	str	r1, [r4, #0]
 800a27c:	d04b      	beq.n	800a316 <_printf_i+0x1a6>
 800a27e:	4616      	mov	r6, r2
 800a280:	fbb5 f1f3 	udiv	r1, r5, r3
 800a284:	fb03 5711 	mls	r7, r3, r1, r5
 800a288:	5dc7      	ldrb	r7, [r0, r7]
 800a28a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a28e:	462f      	mov	r7, r5
 800a290:	42bb      	cmp	r3, r7
 800a292:	460d      	mov	r5, r1
 800a294:	d9f4      	bls.n	800a280 <_printf_i+0x110>
 800a296:	2b08      	cmp	r3, #8
 800a298:	d10b      	bne.n	800a2b2 <_printf_i+0x142>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	07df      	lsls	r7, r3, #31
 800a29e:	d508      	bpl.n	800a2b2 <_printf_i+0x142>
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	6861      	ldr	r1, [r4, #4]
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	bfde      	ittt	le
 800a2a8:	2330      	movle	r3, #48	@ 0x30
 800a2aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2b2:	1b92      	subs	r2, r2, r6
 800a2b4:	6122      	str	r2, [r4, #16]
 800a2b6:	f8cd a000 	str.w	sl, [sp]
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	aa03      	add	r2, sp, #12
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	f7ff fee7 	bl	800a094 <_printf_common>
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d14a      	bne.n	800a360 <_printf_i+0x1f0>
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ce:	b004      	add	sp, #16
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	f043 0320 	orr.w	r3, r3, #32
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	4832      	ldr	r0, [pc, #200]	@ (800a3a8 <_printf_i+0x238>)
 800a2de:	2778      	movs	r7, #120	@ 0x78
 800a2e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	6831      	ldr	r1, [r6, #0]
 800a2e8:	061f      	lsls	r7, r3, #24
 800a2ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2ee:	d402      	bmi.n	800a2f6 <_printf_i+0x186>
 800a2f0:	065f      	lsls	r7, r3, #25
 800a2f2:	bf48      	it	mi
 800a2f4:	b2ad      	uxthmi	r5, r5
 800a2f6:	6031      	str	r1, [r6, #0]
 800a2f8:	07d9      	lsls	r1, r3, #31
 800a2fa:	bf44      	itt	mi
 800a2fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a300:	6023      	strmi	r3, [r4, #0]
 800a302:	b11d      	cbz	r5, 800a30c <_printf_i+0x19c>
 800a304:	2310      	movs	r3, #16
 800a306:	e7ad      	b.n	800a264 <_printf_i+0xf4>
 800a308:	4826      	ldr	r0, [pc, #152]	@ (800a3a4 <_printf_i+0x234>)
 800a30a:	e7e9      	b.n	800a2e0 <_printf_i+0x170>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	f023 0320 	bic.w	r3, r3, #32
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	e7f6      	b.n	800a304 <_printf_i+0x194>
 800a316:	4616      	mov	r6, r2
 800a318:	e7bd      	b.n	800a296 <_printf_i+0x126>
 800a31a:	6833      	ldr	r3, [r6, #0]
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	6961      	ldr	r1, [r4, #20]
 800a320:	1d18      	adds	r0, r3, #4
 800a322:	6030      	str	r0, [r6, #0]
 800a324:	062e      	lsls	r6, r5, #24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	d501      	bpl.n	800a32e <_printf_i+0x1be>
 800a32a:	6019      	str	r1, [r3, #0]
 800a32c:	e002      	b.n	800a334 <_printf_i+0x1c4>
 800a32e:	0668      	lsls	r0, r5, #25
 800a330:	d5fb      	bpl.n	800a32a <_printf_i+0x1ba>
 800a332:	8019      	strh	r1, [r3, #0]
 800a334:	2300      	movs	r3, #0
 800a336:	6123      	str	r3, [r4, #16]
 800a338:	4616      	mov	r6, r2
 800a33a:	e7bc      	b.n	800a2b6 <_printf_i+0x146>
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	6032      	str	r2, [r6, #0]
 800a342:	681e      	ldr	r6, [r3, #0]
 800a344:	6862      	ldr	r2, [r4, #4]
 800a346:	2100      	movs	r1, #0
 800a348:	4630      	mov	r0, r6
 800a34a:	f7f5 ff41 	bl	80001d0 <memchr>
 800a34e:	b108      	cbz	r0, 800a354 <_printf_i+0x1e4>
 800a350:	1b80      	subs	r0, r0, r6
 800a352:	6060      	str	r0, [r4, #4]
 800a354:	6863      	ldr	r3, [r4, #4]
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	2300      	movs	r3, #0
 800a35a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a35e:	e7aa      	b.n	800a2b6 <_printf_i+0x146>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	4632      	mov	r2, r6
 800a364:	4649      	mov	r1, r9
 800a366:	4640      	mov	r0, r8
 800a368:	47d0      	blx	sl
 800a36a:	3001      	adds	r0, #1
 800a36c:	d0ad      	beq.n	800a2ca <_printf_i+0x15a>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	079b      	lsls	r3, r3, #30
 800a372:	d413      	bmi.n	800a39c <_printf_i+0x22c>
 800a374:	68e0      	ldr	r0, [r4, #12]
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	4298      	cmp	r0, r3
 800a37a:	bfb8      	it	lt
 800a37c:	4618      	movlt	r0, r3
 800a37e:	e7a6      	b.n	800a2ce <_printf_i+0x15e>
 800a380:	2301      	movs	r3, #1
 800a382:	4632      	mov	r2, r6
 800a384:	4649      	mov	r1, r9
 800a386:	4640      	mov	r0, r8
 800a388:	47d0      	blx	sl
 800a38a:	3001      	adds	r0, #1
 800a38c:	d09d      	beq.n	800a2ca <_printf_i+0x15a>
 800a38e:	3501      	adds	r5, #1
 800a390:	68e3      	ldr	r3, [r4, #12]
 800a392:	9903      	ldr	r1, [sp, #12]
 800a394:	1a5b      	subs	r3, r3, r1
 800a396:	42ab      	cmp	r3, r5
 800a398:	dcf2      	bgt.n	800a380 <_printf_i+0x210>
 800a39a:	e7eb      	b.n	800a374 <_printf_i+0x204>
 800a39c:	2500      	movs	r5, #0
 800a39e:	f104 0619 	add.w	r6, r4, #25
 800a3a2:	e7f5      	b.n	800a390 <_printf_i+0x220>
 800a3a4:	0800c3ca 	.word	0x0800c3ca
 800a3a8:	0800c3db 	.word	0x0800c3db

0800a3ac <std>:
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ba:	6083      	str	r3, [r0, #8]
 800a3bc:	8181      	strh	r1, [r0, #12]
 800a3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a3c0:	81c2      	strh	r2, [r0, #14]
 800a3c2:	6183      	str	r3, [r0, #24]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	305c      	adds	r0, #92	@ 0x5c
 800a3ca:	f000 f918 	bl	800a5fe <memset>
 800a3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a404 <std+0x58>)
 800a3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a408 <std+0x5c>)
 800a3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a40c <std+0x60>)
 800a3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3da:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <std+0x64>)
 800a3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3de:	4b0d      	ldr	r3, [pc, #52]	@ (800a414 <std+0x68>)
 800a3e0:	6224      	str	r4, [r4, #32]
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	d006      	beq.n	800a3f4 <std+0x48>
 800a3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3ea:	4294      	cmp	r4, r2
 800a3ec:	d002      	beq.n	800a3f4 <std+0x48>
 800a3ee:	33d0      	adds	r3, #208	@ 0xd0
 800a3f0:	429c      	cmp	r4, r3
 800a3f2:	d105      	bne.n	800a400 <std+0x54>
 800a3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	f000 b98c 	b.w	800a718 <__retarget_lock_init_recursive>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	0800a579 	.word	0x0800a579
 800a408:	0800a59b 	.word	0x0800a59b
 800a40c:	0800a5d3 	.word	0x0800a5d3
 800a410:	0800a5f7 	.word	0x0800a5f7
 800a414:	20001f04 	.word	0x20001f04

0800a418 <stdio_exit_handler>:
 800a418:	4a02      	ldr	r2, [pc, #8]	@ (800a424 <stdio_exit_handler+0xc>)
 800a41a:	4903      	ldr	r1, [pc, #12]	@ (800a428 <stdio_exit_handler+0x10>)
 800a41c:	4803      	ldr	r0, [pc, #12]	@ (800a42c <stdio_exit_handler+0x14>)
 800a41e:	f000 b87b 	b.w	800a518 <_fwalk_sglue>
 800a422:	bf00      	nop
 800a424:	200000fc 	.word	0x200000fc
 800a428:	0800bef5 	.word	0x0800bef5
 800a42c:	2000010c 	.word	0x2000010c

0800a430 <cleanup_stdio>:
 800a430:	6841      	ldr	r1, [r0, #4]
 800a432:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <cleanup_stdio+0x34>)
 800a434:	4299      	cmp	r1, r3
 800a436:	b510      	push	{r4, lr}
 800a438:	4604      	mov	r4, r0
 800a43a:	d001      	beq.n	800a440 <cleanup_stdio+0x10>
 800a43c:	f001 fd5a 	bl	800bef4 <_fflush_r>
 800a440:	68a1      	ldr	r1, [r4, #8]
 800a442:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <cleanup_stdio+0x38>)
 800a444:	4299      	cmp	r1, r3
 800a446:	d002      	beq.n	800a44e <cleanup_stdio+0x1e>
 800a448:	4620      	mov	r0, r4
 800a44a:	f001 fd53 	bl	800bef4 <_fflush_r>
 800a44e:	68e1      	ldr	r1, [r4, #12]
 800a450:	4b06      	ldr	r3, [pc, #24]	@ (800a46c <cleanup_stdio+0x3c>)
 800a452:	4299      	cmp	r1, r3
 800a454:	d004      	beq.n	800a460 <cleanup_stdio+0x30>
 800a456:	4620      	mov	r0, r4
 800a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45c:	f001 bd4a 	b.w	800bef4 <_fflush_r>
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	20001f04 	.word	0x20001f04
 800a468:	20001f6c 	.word	0x20001f6c
 800a46c:	20001fd4 	.word	0x20001fd4

0800a470 <global_stdio_init.part.0>:
 800a470:	b510      	push	{r4, lr}
 800a472:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a0 <global_stdio_init.part.0+0x30>)
 800a474:	4c0b      	ldr	r4, [pc, #44]	@ (800a4a4 <global_stdio_init.part.0+0x34>)
 800a476:	4a0c      	ldr	r2, [pc, #48]	@ (800a4a8 <global_stdio_init.part.0+0x38>)
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	4620      	mov	r0, r4
 800a47c:	2200      	movs	r2, #0
 800a47e:	2104      	movs	r1, #4
 800a480:	f7ff ff94 	bl	800a3ac <std>
 800a484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a488:	2201      	movs	r2, #1
 800a48a:	2109      	movs	r1, #9
 800a48c:	f7ff ff8e 	bl	800a3ac <std>
 800a490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a494:	2202      	movs	r2, #2
 800a496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49a:	2112      	movs	r1, #18
 800a49c:	f7ff bf86 	b.w	800a3ac <std>
 800a4a0:	2000203c 	.word	0x2000203c
 800a4a4:	20001f04 	.word	0x20001f04
 800a4a8:	0800a419 	.word	0x0800a419

0800a4ac <__sfp_lock_acquire>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	@ (800a4b4 <__sfp_lock_acquire+0x8>)
 800a4ae:	f000 b934 	b.w	800a71a <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	20002045 	.word	0x20002045

0800a4b8 <__sfp_lock_release>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	@ (800a4c0 <__sfp_lock_release+0x8>)
 800a4ba:	f000 b92f 	b.w	800a71c <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	20002045 	.word	0x20002045

0800a4c4 <__sinit>:
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	f7ff fff0 	bl	800a4ac <__sfp_lock_acquire>
 800a4cc:	6a23      	ldr	r3, [r4, #32]
 800a4ce:	b11b      	cbz	r3, 800a4d8 <__sinit+0x14>
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	f7ff bff0 	b.w	800a4b8 <__sfp_lock_release>
 800a4d8:	4b04      	ldr	r3, [pc, #16]	@ (800a4ec <__sinit+0x28>)
 800a4da:	6223      	str	r3, [r4, #32]
 800a4dc:	4b04      	ldr	r3, [pc, #16]	@ (800a4f0 <__sinit+0x2c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f5      	bne.n	800a4d0 <__sinit+0xc>
 800a4e4:	f7ff ffc4 	bl	800a470 <global_stdio_init.part.0>
 800a4e8:	e7f2      	b.n	800a4d0 <__sinit+0xc>
 800a4ea:	bf00      	nop
 800a4ec:	0800a431 	.word	0x0800a431
 800a4f0:	2000203c 	.word	0x2000203c

0800a4f4 <fiprintf>:
 800a4f4:	b40e      	push	{r1, r2, r3}
 800a4f6:	b503      	push	{r0, r1, lr}
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	4805      	ldr	r0, [pc, #20]	@ (800a514 <fiprintf+0x20>)
 800a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a502:	6800      	ldr	r0, [r0, #0]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	f001 fb59 	bl	800bbbc <_vfiprintf_r>
 800a50a:	b002      	add	sp, #8
 800a50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a510:	b003      	add	sp, #12
 800a512:	4770      	bx	lr
 800a514:	20000108 	.word	0x20000108

0800a518 <_fwalk_sglue>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4607      	mov	r7, r0
 800a51e:	4688      	mov	r8, r1
 800a520:	4614      	mov	r4, r2
 800a522:	2600      	movs	r6, #0
 800a524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a528:	f1b9 0901 	subs.w	r9, r9, #1
 800a52c:	d505      	bpl.n	800a53a <_fwalk_sglue+0x22>
 800a52e:	6824      	ldr	r4, [r4, #0]
 800a530:	2c00      	cmp	r4, #0
 800a532:	d1f7      	bne.n	800a524 <_fwalk_sglue+0xc>
 800a534:	4630      	mov	r0, r6
 800a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d907      	bls.n	800a550 <_fwalk_sglue+0x38>
 800a540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a544:	3301      	adds	r3, #1
 800a546:	d003      	beq.n	800a550 <_fwalk_sglue+0x38>
 800a548:	4629      	mov	r1, r5
 800a54a:	4638      	mov	r0, r7
 800a54c:	47c0      	blx	r8
 800a54e:	4306      	orrs	r6, r0
 800a550:	3568      	adds	r5, #104	@ 0x68
 800a552:	e7e9      	b.n	800a528 <_fwalk_sglue+0x10>

0800a554 <iprintf>:
 800a554:	b40f      	push	{r0, r1, r2, r3}
 800a556:	b507      	push	{r0, r1, r2, lr}
 800a558:	4906      	ldr	r1, [pc, #24]	@ (800a574 <iprintf+0x20>)
 800a55a:	ab04      	add	r3, sp, #16
 800a55c:	6808      	ldr	r0, [r1, #0]
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	6881      	ldr	r1, [r0, #8]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f001 fb29 	bl	800bbbc <_vfiprintf_r>
 800a56a:	b003      	add	sp, #12
 800a56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a570:	b004      	add	sp, #16
 800a572:	4770      	bx	lr
 800a574:	20000108 	.word	0x20000108

0800a578 <__sread>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	460c      	mov	r4, r1
 800a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a580:	f000 f86c 	bl	800a65c <_read_r>
 800a584:	2800      	cmp	r0, #0
 800a586:	bfab      	itete	ge
 800a588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a58a:	89a3      	ldrhlt	r3, [r4, #12]
 800a58c:	181b      	addge	r3, r3, r0
 800a58e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a592:	bfac      	ite	ge
 800a594:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a596:	81a3      	strhlt	r3, [r4, #12]
 800a598:	bd10      	pop	{r4, pc}

0800a59a <__swrite>:
 800a59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59e:	461f      	mov	r7, r3
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	05db      	lsls	r3, r3, #23
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	d505      	bpl.n	800a5b8 <__swrite+0x1e>
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f000 f840 	bl	800a638 <_lseek_r>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	4632      	mov	r2, r6
 800a5c6:	463b      	mov	r3, r7
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	f000 b867 	b.w	800a6a0 <_write_r>

0800a5d2 <__sseek>:
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5da:	f000 f82d 	bl	800a638 <_lseek_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	bf15      	itete	ne
 800a5e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5ee:	81a3      	strheq	r3, [r4, #12]
 800a5f0:	bf18      	it	ne
 800a5f2:	81a3      	strhne	r3, [r4, #12]
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <__sclose>:
 800a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fa:	f000 b80d 	b.w	800a618 <_close_r>

0800a5fe <memset>:
 800a5fe:	4402      	add	r2, r0
 800a600:	4603      	mov	r3, r0
 800a602:	4293      	cmp	r3, r2
 800a604:	d100      	bne.n	800a608 <memset+0xa>
 800a606:	4770      	bx	lr
 800a608:	f803 1b01 	strb.w	r1, [r3], #1
 800a60c:	e7f9      	b.n	800a602 <memset+0x4>
	...

0800a610 <_localeconv_r>:
 800a610:	4800      	ldr	r0, [pc, #0]	@ (800a614 <_localeconv_r+0x4>)
 800a612:	4770      	bx	lr
 800a614:	20000248 	.word	0x20000248

0800a618 <_close_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_close_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f7 fd68 	bl	80020f8 <_close>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_close_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_close_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20002040 	.word	0x20002040

0800a638 <_lseek_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	@ (800a658 <_lseek_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f7 fd7d 	bl	8002146 <_lseek>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_lseek_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_lseek_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20002040 	.word	0x20002040

0800a65c <_read_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	@ (800a67c <_read_r+0x20>)
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f7 fd27 	bl	80020be <_read>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_read_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_read_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20002040 	.word	0x20002040

0800a680 <_sbrk_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d06      	ldr	r5, [pc, #24]	@ (800a69c <_sbrk_r+0x1c>)
 800a684:	2300      	movs	r3, #0
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	f7f7 fd68 	bl	8002160 <_sbrk>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_sbrk_r+0x1a>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_sbrk_r+0x1a>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20002040 	.word	0x20002040

0800a6a0 <_write_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d07      	ldr	r5, [pc, #28]	@ (800a6c0 <_write_r+0x20>)
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	602a      	str	r2, [r5, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f7f7 f916 	bl	80018e0 <_write>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_write_r+0x1e>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_write_r+0x1e>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20002040 	.word	0x20002040

0800a6c4 <__errno>:
 800a6c4:	4b01      	ldr	r3, [pc, #4]	@ (800a6cc <__errno+0x8>)
 800a6c6:	6818      	ldr	r0, [r3, #0]
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	20000108 	.word	0x20000108

0800a6d0 <__libc_init_array>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a708 <__libc_init_array+0x38>)
 800a6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a70c <__libc_init_array+0x3c>)
 800a6d6:	1b64      	subs	r4, r4, r5
 800a6d8:	10a4      	asrs	r4, r4, #2
 800a6da:	2600      	movs	r6, #0
 800a6dc:	42a6      	cmp	r6, r4
 800a6de:	d109      	bne.n	800a6f4 <__libc_init_array+0x24>
 800a6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a710 <__libc_init_array+0x40>)
 800a6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a714 <__libc_init_array+0x44>)
 800a6e4:	f001 fdcc 	bl	800c280 <_init>
 800a6e8:	1b64      	subs	r4, r4, r5
 800a6ea:	10a4      	asrs	r4, r4, #2
 800a6ec:	2600      	movs	r6, #0
 800a6ee:	42a6      	cmp	r6, r4
 800a6f0:	d105      	bne.n	800a6fe <__libc_init_array+0x2e>
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f8:	4798      	blx	r3
 800a6fa:	3601      	adds	r6, #1
 800a6fc:	e7ee      	b.n	800a6dc <__libc_init_array+0xc>
 800a6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a702:	4798      	blx	r3
 800a704:	3601      	adds	r6, #1
 800a706:	e7f2      	b.n	800a6ee <__libc_init_array+0x1e>
 800a708:	0800c6fc 	.word	0x0800c6fc
 800a70c:	0800c6fc 	.word	0x0800c6fc
 800a710:	0800c6fc 	.word	0x0800c6fc
 800a714:	0800c700 	.word	0x0800c700

0800a718 <__retarget_lock_init_recursive>:
 800a718:	4770      	bx	lr

0800a71a <__retarget_lock_acquire_recursive>:
 800a71a:	4770      	bx	lr

0800a71c <__retarget_lock_release_recursive>:
 800a71c:	4770      	bx	lr

0800a71e <abort>:
 800a71e:	b508      	push	{r3, lr}
 800a720:	2006      	movs	r0, #6
 800a722:	f001 fccb 	bl	800c0bc <raise>
 800a726:	2001      	movs	r0, #1
 800a728:	f7f7 fcbe 	bl	80020a8 <_exit>

0800a72c <quorem>:
 800a72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	6903      	ldr	r3, [r0, #16]
 800a732:	690c      	ldr	r4, [r1, #16]
 800a734:	42a3      	cmp	r3, r4
 800a736:	4607      	mov	r7, r0
 800a738:	db7e      	blt.n	800a838 <quorem+0x10c>
 800a73a:	3c01      	subs	r4, #1
 800a73c:	f101 0814 	add.w	r8, r1, #20
 800a740:	00a3      	lsls	r3, r4, #2
 800a742:	f100 0514 	add.w	r5, r0, #20
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a756:	3301      	adds	r3, #1
 800a758:	429a      	cmp	r2, r3
 800a75a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a75e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a762:	d32e      	bcc.n	800a7c2 <quorem+0x96>
 800a764:	f04f 0a00 	mov.w	sl, #0
 800a768:	46c4      	mov	ip, r8
 800a76a:	46ae      	mov	lr, r5
 800a76c:	46d3      	mov	fp, sl
 800a76e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a772:	b298      	uxth	r0, r3
 800a774:	fb06 a000 	mla	r0, r6, r0, sl
 800a778:	0c02      	lsrs	r2, r0, #16
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	fb06 2303 	mla	r3, r6, r3, r2
 800a780:	f8de 2000 	ldr.w	r2, [lr]
 800a784:	b280      	uxth	r0, r0
 800a786:	b292      	uxth	r2, r2
 800a788:	1a12      	subs	r2, r2, r0
 800a78a:	445a      	add	r2, fp
 800a78c:	f8de 0000 	ldr.w	r0, [lr]
 800a790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a794:	b29b      	uxth	r3, r3
 800a796:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a79a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a79e:	b292      	uxth	r2, r2
 800a7a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7a4:	45e1      	cmp	r9, ip
 800a7a6:	f84e 2b04 	str.w	r2, [lr], #4
 800a7aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7ae:	d2de      	bcs.n	800a76e <quorem+0x42>
 800a7b0:	9b00      	ldr	r3, [sp, #0]
 800a7b2:	58eb      	ldr	r3, [r5, r3]
 800a7b4:	b92b      	cbnz	r3, 800a7c2 <quorem+0x96>
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	429d      	cmp	r5, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	d32f      	bcc.n	800a820 <quorem+0xf4>
 800a7c0:	613c      	str	r4, [r7, #16]
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f001 f8c8 	bl	800b958 <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	db25      	blt.n	800a818 <quorem+0xec>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7d4:	f8d1 c000 	ldr.w	ip, [r1]
 800a7d8:	fa1f fe82 	uxth.w	lr, r2
 800a7dc:	fa1f f38c 	uxth.w	r3, ip
 800a7e0:	eba3 030e 	sub.w	r3, r3, lr
 800a7e4:	4403      	add	r3, r0
 800a7e6:	0c12      	lsrs	r2, r2, #16
 800a7e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7f6:	45c1      	cmp	r9, r8
 800a7f8:	f841 3b04 	str.w	r3, [r1], #4
 800a7fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a800:	d2e6      	bcs.n	800a7d0 <quorem+0xa4>
 800a802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a80a:	b922      	cbnz	r2, 800a816 <quorem+0xea>
 800a80c:	3b04      	subs	r3, #4
 800a80e:	429d      	cmp	r5, r3
 800a810:	461a      	mov	r2, r3
 800a812:	d30b      	bcc.n	800a82c <quorem+0x100>
 800a814:	613c      	str	r4, [r7, #16]
 800a816:	3601      	adds	r6, #1
 800a818:	4630      	mov	r0, r6
 800a81a:	b003      	add	sp, #12
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	3b04      	subs	r3, #4
 800a824:	2a00      	cmp	r2, #0
 800a826:	d1cb      	bne.n	800a7c0 <quorem+0x94>
 800a828:	3c01      	subs	r4, #1
 800a82a:	e7c6      	b.n	800a7ba <quorem+0x8e>
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	3b04      	subs	r3, #4
 800a830:	2a00      	cmp	r2, #0
 800a832:	d1ef      	bne.n	800a814 <quorem+0xe8>
 800a834:	3c01      	subs	r4, #1
 800a836:	e7ea      	b.n	800a80e <quorem+0xe2>
 800a838:	2000      	movs	r0, #0
 800a83a:	e7ee      	b.n	800a81a <quorem+0xee>
 800a83c:	0000      	movs	r0, r0
	...

0800a840 <_dtoa_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	69c7      	ldr	r7, [r0, #28]
 800a846:	b097      	sub	sp, #92	@ 0x5c
 800a848:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a84c:	ec55 4b10 	vmov	r4, r5, d0
 800a850:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a852:	9107      	str	r1, [sp, #28]
 800a854:	4681      	mov	r9, r0
 800a856:	920c      	str	r2, [sp, #48]	@ 0x30
 800a858:	9311      	str	r3, [sp, #68]	@ 0x44
 800a85a:	b97f      	cbnz	r7, 800a87c <_dtoa_r+0x3c>
 800a85c:	2010      	movs	r0, #16
 800a85e:	f7ff f899 	bl	8009994 <malloc>
 800a862:	4602      	mov	r2, r0
 800a864:	f8c9 001c 	str.w	r0, [r9, #28]
 800a868:	b920      	cbnz	r0, 800a874 <_dtoa_r+0x34>
 800a86a:	4ba9      	ldr	r3, [pc, #676]	@ (800ab10 <_dtoa_r+0x2d0>)
 800a86c:	21ef      	movs	r1, #239	@ 0xef
 800a86e:	48a9      	ldr	r0, [pc, #676]	@ (800ab14 <_dtoa_r+0x2d4>)
 800a870:	f7ff f872 	bl	8009958 <__assert_func>
 800a874:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a878:	6007      	str	r7, [r0, #0]
 800a87a:	60c7      	str	r7, [r0, #12]
 800a87c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	b159      	cbz	r1, 800a89c <_dtoa_r+0x5c>
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	604a      	str	r2, [r1, #4]
 800a888:	2301      	movs	r3, #1
 800a88a:	4093      	lsls	r3, r2
 800a88c:	608b      	str	r3, [r1, #8]
 800a88e:	4648      	mov	r0, r9
 800a890:	f000 fe30 	bl	800b4f4 <_Bfree>
 800a894:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	1e2b      	subs	r3, r5, #0
 800a89e:	bfb9      	ittee	lt
 800a8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8a4:	9305      	strlt	r3, [sp, #20]
 800a8a6:	2300      	movge	r3, #0
 800a8a8:	6033      	strge	r3, [r6, #0]
 800a8aa:	9f05      	ldr	r7, [sp, #20]
 800a8ac:	4b9a      	ldr	r3, [pc, #616]	@ (800ab18 <_dtoa_r+0x2d8>)
 800a8ae:	bfbc      	itt	lt
 800a8b0:	2201      	movlt	r2, #1
 800a8b2:	6032      	strlt	r2, [r6, #0]
 800a8b4:	43bb      	bics	r3, r7
 800a8b6:	d112      	bne.n	800a8de <_dtoa_r+0x9e>
 800a8b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8c4:	4323      	orrs	r3, r4
 800a8c6:	f000 855a 	beq.w	800b37e <_dtoa_r+0xb3e>
 800a8ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ab2c <_dtoa_r+0x2ec>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 855c 	beq.w	800b38e <_dtoa_r+0xb4e>
 800a8d6:	f10a 0303 	add.w	r3, sl, #3
 800a8da:	f000 bd56 	b.w	800b38a <_dtoa_r+0xb4a>
 800a8de:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	ec51 0b17 	vmov	r0, r1, d7
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a8ee:	f7f6 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	b158      	cbz	r0, 800a90e <_dtoa_r+0xce>
 800a8f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8fe:	b113      	cbz	r3, 800a906 <_dtoa_r+0xc6>
 800a900:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a902:	4b86      	ldr	r3, [pc, #536]	@ (800ab1c <_dtoa_r+0x2dc>)
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ab30 <_dtoa_r+0x2f0>
 800a90a:	f000 bd40 	b.w	800b38e <_dtoa_r+0xb4e>
 800a90e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a912:	aa14      	add	r2, sp, #80	@ 0x50
 800a914:	a915      	add	r1, sp, #84	@ 0x54
 800a916:	4648      	mov	r0, r9
 800a918:	f001 f8ce 	bl	800bab8 <__d2b>
 800a91c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a920:	9002      	str	r0, [sp, #8]
 800a922:	2e00      	cmp	r6, #0
 800a924:	d078      	beq.n	800aa18 <_dtoa_r+0x1d8>
 800a926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a928:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a934:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a938:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a93c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a940:	4619      	mov	r1, r3
 800a942:	2200      	movs	r2, #0
 800a944:	4b76      	ldr	r3, [pc, #472]	@ (800ab20 <_dtoa_r+0x2e0>)
 800a946:	f7f5 fc9f 	bl	8000288 <__aeabi_dsub>
 800a94a:	a36b      	add	r3, pc, #428	@ (adr r3, 800aaf8 <_dtoa_r+0x2b8>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fe52 	bl	80005f8 <__aeabi_dmul>
 800a954:	a36a      	add	r3, pc, #424	@ (adr r3, 800ab00 <_dtoa_r+0x2c0>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc97 	bl	800028c <__adddf3>
 800a95e:	4604      	mov	r4, r0
 800a960:	4630      	mov	r0, r6
 800a962:	460d      	mov	r5, r1
 800a964:	f7f5 fdde 	bl	8000524 <__aeabi_i2d>
 800a968:	a367      	add	r3, pc, #412	@ (adr r3, 800ab08 <_dtoa_r+0x2c8>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f5 fc87 	bl	800028c <__adddf3>
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	f7f6 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800a986:	2200      	movs	r2, #0
 800a988:	4607      	mov	r7, r0
 800a98a:	2300      	movs	r3, #0
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f6 f8a4 	bl	8000adc <__aeabi_dcmplt>
 800a994:	b140      	cbz	r0, 800a9a8 <_dtoa_r+0x168>
 800a996:	4638      	mov	r0, r7
 800a998:	f7f5 fdc4 	bl	8000524 <__aeabi_i2d>
 800a99c:	4622      	mov	r2, r4
 800a99e:	462b      	mov	r3, r5
 800a9a0:	f7f6 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a4:	b900      	cbnz	r0, 800a9a8 <_dtoa_r+0x168>
 800a9a6:	3f01      	subs	r7, #1
 800a9a8:	2f16      	cmp	r7, #22
 800a9aa:	d852      	bhi.n	800aa52 <_dtoa_r+0x212>
 800a9ac:	4b5d      	ldr	r3, [pc, #372]	@ (800ab24 <_dtoa_r+0x2e4>)
 800a9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9ba:	f7f6 f88f 	bl	8000adc <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d049      	beq.n	800aa56 <_dtoa_r+0x216>
 800a9c2:	3f01      	subs	r7, #1
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a9ca:	1b9b      	subs	r3, r3, r6
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	bf45      	ittet	mi
 800a9d0:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9d4:	9300      	strmi	r3, [sp, #0]
 800a9d6:	2300      	movpl	r3, #0
 800a9d8:	2300      	movmi	r3, #0
 800a9da:	9206      	str	r2, [sp, #24]
 800a9dc:	bf54      	ite	pl
 800a9de:	9300      	strpl	r3, [sp, #0]
 800a9e0:	9306      	strmi	r3, [sp, #24]
 800a9e2:	2f00      	cmp	r7, #0
 800a9e4:	db39      	blt.n	800aa5a <_dtoa_r+0x21a>
 800a9e6:	9b06      	ldr	r3, [sp, #24]
 800a9e8:	970d      	str	r7, [sp, #52]	@ 0x34
 800a9ea:	443b      	add	r3, r7
 800a9ec:	9306      	str	r3, [sp, #24]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d863      	bhi.n	800aac0 <_dtoa_r+0x280>
 800a9f8:	2b05      	cmp	r3, #5
 800a9fa:	bfc4      	itt	gt
 800a9fc:	3b04      	subgt	r3, #4
 800a9fe:	9307      	strgt	r3, [sp, #28]
 800aa00:	9b07      	ldr	r3, [sp, #28]
 800aa02:	f1a3 0302 	sub.w	r3, r3, #2
 800aa06:	bfcc      	ite	gt
 800aa08:	2400      	movgt	r4, #0
 800aa0a:	2401      	movle	r4, #1
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d863      	bhi.n	800aad8 <_dtoa_r+0x298>
 800aa10:	e8df f003 	tbb	[pc, r3]
 800aa14:	2b375452 	.word	0x2b375452
 800aa18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aa1c:	441e      	add	r6, r3
 800aa1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	bfc1      	itttt	gt
 800aa26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa2a:	409f      	lslgt	r7, r3
 800aa2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa30:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa34:	bfd6      	itet	le
 800aa36:	f1c3 0320 	rsble	r3, r3, #32
 800aa3a:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa3e:	fa04 f003 	lslle.w	r0, r4, r3
 800aa42:	f7f5 fd5f 	bl	8000504 <__aeabi_ui2d>
 800aa46:	2201      	movs	r2, #1
 800aa48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa4c:	3e01      	subs	r6, #1
 800aa4e:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa50:	e776      	b.n	800a940 <_dtoa_r+0x100>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e7b7      	b.n	800a9c6 <_dtoa_r+0x186>
 800aa56:	9010      	str	r0, [sp, #64]	@ 0x40
 800aa58:	e7b6      	b.n	800a9c8 <_dtoa_r+0x188>
 800aa5a:	9b00      	ldr	r3, [sp, #0]
 800aa5c:	1bdb      	subs	r3, r3, r7
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	427b      	negs	r3, r7
 800aa62:	9308      	str	r3, [sp, #32]
 800aa64:	2300      	movs	r3, #0
 800aa66:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa68:	e7c3      	b.n	800a9f2 <_dtoa_r+0x1b2>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa70:	eb07 0b03 	add.w	fp, r7, r3
 800aa74:	f10b 0301 	add.w	r3, fp, #1
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	bfb8      	it	lt
 800aa7e:	2301      	movlt	r3, #1
 800aa80:	e006      	b.n	800aa90 <_dtoa_r+0x250>
 800aa82:	2301      	movs	r3, #1
 800aa84:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dd28      	ble.n	800aade <_dtoa_r+0x29e>
 800aa8c:	469b      	mov	fp, r3
 800aa8e:	9303      	str	r3, [sp, #12]
 800aa90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aa94:	2100      	movs	r1, #0
 800aa96:	2204      	movs	r2, #4
 800aa98:	f102 0514 	add.w	r5, r2, #20
 800aa9c:	429d      	cmp	r5, r3
 800aa9e:	d926      	bls.n	800aaee <_dtoa_r+0x2ae>
 800aaa0:	6041      	str	r1, [r0, #4]
 800aaa2:	4648      	mov	r0, r9
 800aaa4:	f000 fce6 	bl	800b474 <_Balloc>
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d142      	bne.n	800ab34 <_dtoa_r+0x2f4>
 800aaae:	4b1e      	ldr	r3, [pc, #120]	@ (800ab28 <_dtoa_r+0x2e8>)
 800aab0:	4602      	mov	r2, r0
 800aab2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aab6:	e6da      	b.n	800a86e <_dtoa_r+0x2e>
 800aab8:	2300      	movs	r3, #0
 800aaba:	e7e3      	b.n	800aa84 <_dtoa_r+0x244>
 800aabc:	2300      	movs	r3, #0
 800aabe:	e7d5      	b.n	800aa6c <_dtoa_r+0x22c>
 800aac0:	2401      	movs	r4, #1
 800aac2:	2300      	movs	r3, #0
 800aac4:	9307      	str	r3, [sp, #28]
 800aac6:	9409      	str	r4, [sp, #36]	@ 0x24
 800aac8:	f04f 3bff 	mov.w	fp, #4294967295
 800aacc:	2200      	movs	r2, #0
 800aace:	f8cd b00c 	str.w	fp, [sp, #12]
 800aad2:	2312      	movs	r3, #18
 800aad4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aad6:	e7db      	b.n	800aa90 <_dtoa_r+0x250>
 800aad8:	2301      	movs	r3, #1
 800aada:	9309      	str	r3, [sp, #36]	@ 0x24
 800aadc:	e7f4      	b.n	800aac8 <_dtoa_r+0x288>
 800aade:	f04f 0b01 	mov.w	fp, #1
 800aae2:	f8cd b00c 	str.w	fp, [sp, #12]
 800aae6:	465b      	mov	r3, fp
 800aae8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aaec:	e7d0      	b.n	800aa90 <_dtoa_r+0x250>
 800aaee:	3101      	adds	r1, #1
 800aaf0:	0052      	lsls	r2, r2, #1
 800aaf2:	e7d1      	b.n	800aa98 <_dtoa_r+0x258>
 800aaf4:	f3af 8000 	nop.w
 800aaf8:	636f4361 	.word	0x636f4361
 800aafc:	3fd287a7 	.word	0x3fd287a7
 800ab00:	8b60c8b3 	.word	0x8b60c8b3
 800ab04:	3fc68a28 	.word	0x3fc68a28
 800ab08:	509f79fb 	.word	0x509f79fb
 800ab0c:	3fd34413 	.word	0x3fd34413
 800ab10:	0800c3f9 	.word	0x0800c3f9
 800ab14:	0800c410 	.word	0x0800c410
 800ab18:	7ff00000 	.word	0x7ff00000
 800ab1c:	0800c3c9 	.word	0x0800c3c9
 800ab20:	3ff80000 	.word	0x3ff80000
 800ab24:	0800c528 	.word	0x0800c528
 800ab28:	0800c468 	.word	0x0800c468
 800ab2c:	0800c3f5 	.word	0x0800c3f5
 800ab30:	0800c3c8 	.word	0x0800c3c8
 800ab34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab38:	6018      	str	r0, [r3, #0]
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	2b0e      	cmp	r3, #14
 800ab3e:	f200 80a1 	bhi.w	800ac84 <_dtoa_r+0x444>
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	f000 809e 	beq.w	800ac84 <_dtoa_r+0x444>
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	dd33      	ble.n	800abb4 <_dtoa_r+0x374>
 800ab4c:	4b9c      	ldr	r3, [pc, #624]	@ (800adc0 <_dtoa_r+0x580>)
 800ab4e:	f007 020f 	and.w	r2, r7, #15
 800ab52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab56:	ed93 7b00 	vldr	d7, [r3]
 800ab5a:	05f8      	lsls	r0, r7, #23
 800ab5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ab60:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab64:	d516      	bpl.n	800ab94 <_dtoa_r+0x354>
 800ab66:	4b97      	ldr	r3, [pc, #604]	@ (800adc4 <_dtoa_r+0x584>)
 800ab68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab70:	f7f5 fe6c 	bl	800084c <__aeabi_ddiv>
 800ab74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab78:	f004 040f 	and.w	r4, r4, #15
 800ab7c:	2603      	movs	r6, #3
 800ab7e:	4d91      	ldr	r5, [pc, #580]	@ (800adc4 <_dtoa_r+0x584>)
 800ab80:	b954      	cbnz	r4, 800ab98 <_dtoa_r+0x358>
 800ab82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab8a:	f7f5 fe5f 	bl	800084c <__aeabi_ddiv>
 800ab8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab92:	e028      	b.n	800abe6 <_dtoa_r+0x3a6>
 800ab94:	2602      	movs	r6, #2
 800ab96:	e7f2      	b.n	800ab7e <_dtoa_r+0x33e>
 800ab98:	07e1      	lsls	r1, r4, #31
 800ab9a:	d508      	bpl.n	800abae <_dtoa_r+0x36e>
 800ab9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aba4:	f7f5 fd28 	bl	80005f8 <__aeabi_dmul>
 800aba8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800abac:	3601      	adds	r6, #1
 800abae:	1064      	asrs	r4, r4, #1
 800abb0:	3508      	adds	r5, #8
 800abb2:	e7e5      	b.n	800ab80 <_dtoa_r+0x340>
 800abb4:	f000 80af 	beq.w	800ad16 <_dtoa_r+0x4d6>
 800abb8:	427c      	negs	r4, r7
 800abba:	4b81      	ldr	r3, [pc, #516]	@ (800adc0 <_dtoa_r+0x580>)
 800abbc:	4d81      	ldr	r5, [pc, #516]	@ (800adc4 <_dtoa_r+0x584>)
 800abbe:	f004 020f 	and.w	r2, r4, #15
 800abc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abd6:	1124      	asrs	r4, r4, #4
 800abd8:	2300      	movs	r3, #0
 800abda:	2602      	movs	r6, #2
 800abdc:	2c00      	cmp	r4, #0
 800abde:	f040 808f 	bne.w	800ad00 <_dtoa_r+0x4c0>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1d3      	bne.n	800ab8e <_dtoa_r+0x34e>
 800abe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8094 	beq.w	800ad1a <_dtoa_r+0x4da>
 800abf2:	4b75      	ldr	r3, [pc, #468]	@ (800adc8 <_dtoa_r+0x588>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 ff6f 	bl	8000adc <__aeabi_dcmplt>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f000 808b 	beq.w	800ad1a <_dtoa_r+0x4da>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 8087 	beq.w	800ad1a <_dtoa_r+0x4da>
 800ac0c:	f1bb 0f00 	cmp.w	fp, #0
 800ac10:	dd34      	ble.n	800ac7c <_dtoa_r+0x43c>
 800ac12:	4620      	mov	r0, r4
 800ac14:	4b6d      	ldr	r3, [pc, #436]	@ (800adcc <_dtoa_r+0x58c>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f5 fced 	bl	80005f8 <__aeabi_dmul>
 800ac1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac22:	f107 38ff 	add.w	r8, r7, #4294967295
 800ac26:	3601      	adds	r6, #1
 800ac28:	465c      	mov	r4, fp
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f7f5 fc7a 	bl	8000524 <__aeabi_i2d>
 800ac30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	4b65      	ldr	r3, [pc, #404]	@ (800add0 <_dtoa_r+0x590>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f7f5 fb26 	bl	800028c <__adddf3>
 800ac40:	4605      	mov	r5, r0
 800ac42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d16a      	bne.n	800ad20 <_dtoa_r+0x4e0>
 800ac4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac4e:	4b61      	ldr	r3, [pc, #388]	@ (800add4 <_dtoa_r+0x594>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	f7f5 fb19 	bl	8000288 <__aeabi_dsub>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4633      	mov	r3, r6
 800ac62:	f7f5 ff59 	bl	8000b18 <__aeabi_dcmpgt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f040 8298 	bne.w	800b19c <_dtoa_r+0x95c>
 800ac6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac70:	462a      	mov	r2, r5
 800ac72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac76:	f7f5 ff31 	bl	8000adc <__aeabi_dcmplt>
 800ac7a:	bb38      	cbnz	r0, 800accc <_dtoa_r+0x48c>
 800ac7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ac80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f2c0 8157 	blt.w	800af3a <_dtoa_r+0x6fa>
 800ac8c:	2f0e      	cmp	r7, #14
 800ac8e:	f300 8154 	bgt.w	800af3a <_dtoa_r+0x6fa>
 800ac92:	4b4b      	ldr	r3, [pc, #300]	@ (800adc0 <_dtoa_r+0x580>)
 800ac94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac98:	ed93 7b00 	vldr	d7, [r3]
 800ac9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	ed8d 7b00 	vstr	d7, [sp]
 800aca4:	f280 80e5 	bge.w	800ae72 <_dtoa_r+0x632>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f300 80e1 	bgt.w	800ae72 <_dtoa_r+0x632>
 800acb0:	d10c      	bne.n	800accc <_dtoa_r+0x48c>
 800acb2:	4b48      	ldr	r3, [pc, #288]	@ (800add4 <_dtoa_r+0x594>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	ec51 0b17 	vmov	r0, r1, d7
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc2:	f7f5 ff1f 	bl	8000b04 <__aeabi_dcmpge>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f000 8266 	beq.w	800b198 <_dtoa_r+0x958>
 800accc:	2400      	movs	r4, #0
 800acce:	4625      	mov	r5, r4
 800acd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acd2:	4656      	mov	r6, sl
 800acd4:	ea6f 0803 	mvn.w	r8, r3
 800acd8:	2700      	movs	r7, #0
 800acda:	4621      	mov	r1, r4
 800acdc:	4648      	mov	r0, r9
 800acde:	f000 fc09 	bl	800b4f4 <_Bfree>
 800ace2:	2d00      	cmp	r5, #0
 800ace4:	f000 80bd 	beq.w	800ae62 <_dtoa_r+0x622>
 800ace8:	b12f      	cbz	r7, 800acf6 <_dtoa_r+0x4b6>
 800acea:	42af      	cmp	r7, r5
 800acec:	d003      	beq.n	800acf6 <_dtoa_r+0x4b6>
 800acee:	4639      	mov	r1, r7
 800acf0:	4648      	mov	r0, r9
 800acf2:	f000 fbff 	bl	800b4f4 <_Bfree>
 800acf6:	4629      	mov	r1, r5
 800acf8:	4648      	mov	r0, r9
 800acfa:	f000 fbfb 	bl	800b4f4 <_Bfree>
 800acfe:	e0b0      	b.n	800ae62 <_dtoa_r+0x622>
 800ad00:	07e2      	lsls	r2, r4, #31
 800ad02:	d505      	bpl.n	800ad10 <_dtoa_r+0x4d0>
 800ad04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad08:	f7f5 fc76 	bl	80005f8 <__aeabi_dmul>
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	2301      	movs	r3, #1
 800ad10:	1064      	asrs	r4, r4, #1
 800ad12:	3508      	adds	r5, #8
 800ad14:	e762      	b.n	800abdc <_dtoa_r+0x39c>
 800ad16:	2602      	movs	r6, #2
 800ad18:	e765      	b.n	800abe6 <_dtoa_r+0x3a6>
 800ad1a:	9c03      	ldr	r4, [sp, #12]
 800ad1c:	46b8      	mov	r8, r7
 800ad1e:	e784      	b.n	800ac2a <_dtoa_r+0x3ea>
 800ad20:	4b27      	ldr	r3, [pc, #156]	@ (800adc0 <_dtoa_r+0x580>)
 800ad22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad2c:	4454      	add	r4, sl
 800ad2e:	2900      	cmp	r1, #0
 800ad30:	d054      	beq.n	800addc <_dtoa_r+0x59c>
 800ad32:	4929      	ldr	r1, [pc, #164]	@ (800add8 <_dtoa_r+0x598>)
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7f5 fd89 	bl	800084c <__aeabi_ddiv>
 800ad3a:	4633      	mov	r3, r6
 800ad3c:	462a      	mov	r2, r5
 800ad3e:	f7f5 faa3 	bl	8000288 <__aeabi_dsub>
 800ad42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad46:	4656      	mov	r6, sl
 800ad48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad4c:	f7f5 ff04 	bl	8000b58 <__aeabi_d2iz>
 800ad50:	4605      	mov	r5, r0
 800ad52:	f7f5 fbe7 	bl	8000524 <__aeabi_i2d>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad5e:	f7f5 fa93 	bl	8000288 <__aeabi_dsub>
 800ad62:	3530      	adds	r5, #48	@ 0x30
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad6c:	f806 5b01 	strb.w	r5, [r6], #1
 800ad70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad74:	f7f5 feb2 	bl	8000adc <__aeabi_dcmplt>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d172      	bne.n	800ae62 <_dtoa_r+0x622>
 800ad7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad80:	4911      	ldr	r1, [pc, #68]	@ (800adc8 <_dtoa_r+0x588>)
 800ad82:	2000      	movs	r0, #0
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad8c:	f7f5 fea6 	bl	8000adc <__aeabi_dcmplt>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f040 80b4 	bne.w	800aefe <_dtoa_r+0x6be>
 800ad96:	42a6      	cmp	r6, r4
 800ad98:	f43f af70 	beq.w	800ac7c <_dtoa_r+0x43c>
 800ad9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ada0:	4b0a      	ldr	r3, [pc, #40]	@ (800adcc <_dtoa_r+0x58c>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	f7f5 fc28 	bl	80005f8 <__aeabi_dmul>
 800ada8:	4b08      	ldr	r3, [pc, #32]	@ (800adcc <_dtoa_r+0x58c>)
 800adaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800adae:	2200      	movs	r2, #0
 800adb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adb4:	f7f5 fc20 	bl	80005f8 <__aeabi_dmul>
 800adb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adbc:	e7c4      	b.n	800ad48 <_dtoa_r+0x508>
 800adbe:	bf00      	nop
 800adc0:	0800c528 	.word	0x0800c528
 800adc4:	0800c500 	.word	0x0800c500
 800adc8:	3ff00000 	.word	0x3ff00000
 800adcc:	40240000 	.word	0x40240000
 800add0:	401c0000 	.word	0x401c0000
 800add4:	40140000 	.word	0x40140000
 800add8:	3fe00000 	.word	0x3fe00000
 800addc:	4631      	mov	r1, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	f7f5 fc0a 	bl	80005f8 <__aeabi_dmul>
 800ade4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ade8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800adea:	4656      	mov	r6, sl
 800adec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adf0:	f7f5 feb2 	bl	8000b58 <__aeabi_d2iz>
 800adf4:	4605      	mov	r5, r0
 800adf6:	f7f5 fb95 	bl	8000524 <__aeabi_i2d>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae02:	f7f5 fa41 	bl	8000288 <__aeabi_dsub>
 800ae06:	3530      	adds	r5, #48	@ 0x30
 800ae08:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	42a6      	cmp	r6, r4
 800ae12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	d124      	bne.n	800ae66 <_dtoa_r+0x626>
 800ae1c:	4baf      	ldr	r3, [pc, #700]	@ (800b0dc <_dtoa_r+0x89c>)
 800ae1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae22:	f7f5 fa33 	bl	800028c <__adddf3>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae2e:	f7f5 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d163      	bne.n	800aefe <_dtoa_r+0x6be>
 800ae36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae3a:	49a8      	ldr	r1, [pc, #672]	@ (800b0dc <_dtoa_r+0x89c>)
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	f7f5 fa23 	bl	8000288 <__aeabi_dsub>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4a:	f7f5 fe47 	bl	8000adc <__aeabi_dcmplt>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f af14 	beq.w	800ac7c <_dtoa_r+0x43c>
 800ae54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae56:	1e73      	subs	r3, r6, #1
 800ae58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae5e:	2b30      	cmp	r3, #48	@ 0x30
 800ae60:	d0f8      	beq.n	800ae54 <_dtoa_r+0x614>
 800ae62:	4647      	mov	r7, r8
 800ae64:	e03b      	b.n	800aede <_dtoa_r+0x69e>
 800ae66:	4b9e      	ldr	r3, [pc, #632]	@ (800b0e0 <_dtoa_r+0x8a0>)
 800ae68:	f7f5 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ae6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae70:	e7bc      	b.n	800adec <_dtoa_r+0x5ac>
 800ae72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae76:	4656      	mov	r6, sl
 800ae78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7f5 fce4 	bl	800084c <__aeabi_ddiv>
 800ae84:	f7f5 fe68 	bl	8000b58 <__aeabi_d2iz>
 800ae88:	4680      	mov	r8, r0
 800ae8a:	f7f5 fb4b 	bl	8000524 <__aeabi_i2d>
 800ae8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae92:	f7f5 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aea2:	f7f5 f9f1 	bl	8000288 <__aeabi_dsub>
 800aea6:	f806 4b01 	strb.w	r4, [r6], #1
 800aeaa:	9d03      	ldr	r5, [sp, #12]
 800aeac:	eba6 040a 	sub.w	r4, r6, sl
 800aeb0:	42a5      	cmp	r5, r4
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	d133      	bne.n	800af20 <_dtoa_r+0x6e0>
 800aeb8:	f7f5 f9e8 	bl	800028c <__adddf3>
 800aebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aec0:	4604      	mov	r4, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	f7f5 fe28 	bl	8000b18 <__aeabi_dcmpgt>
 800aec8:	b9c0      	cbnz	r0, 800aefc <_dtoa_r+0x6bc>
 800aeca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed6:	b110      	cbz	r0, 800aede <_dtoa_r+0x69e>
 800aed8:	f018 0f01 	tst.w	r8, #1
 800aedc:	d10e      	bne.n	800aefc <_dtoa_r+0x6bc>
 800aede:	9902      	ldr	r1, [sp, #8]
 800aee0:	4648      	mov	r0, r9
 800aee2:	f000 fb07 	bl	800b4f4 <_Bfree>
 800aee6:	2300      	movs	r3, #0
 800aee8:	7033      	strb	r3, [r6, #0]
 800aeea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aeec:	3701      	adds	r7, #1
 800aeee:	601f      	str	r7, [r3, #0]
 800aef0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 824b 	beq.w	800b38e <_dtoa_r+0xb4e>
 800aef8:	601e      	str	r6, [r3, #0]
 800aefa:	e248      	b.n	800b38e <_dtoa_r+0xb4e>
 800aefc:	46b8      	mov	r8, r7
 800aefe:	4633      	mov	r3, r6
 800af00:	461e      	mov	r6, r3
 800af02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af06:	2a39      	cmp	r2, #57	@ 0x39
 800af08:	d106      	bne.n	800af18 <_dtoa_r+0x6d8>
 800af0a:	459a      	cmp	sl, r3
 800af0c:	d1f8      	bne.n	800af00 <_dtoa_r+0x6c0>
 800af0e:	2230      	movs	r2, #48	@ 0x30
 800af10:	f108 0801 	add.w	r8, r8, #1
 800af14:	f88a 2000 	strb.w	r2, [sl]
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	3201      	adds	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
 800af1e:	e7a0      	b.n	800ae62 <_dtoa_r+0x622>
 800af20:	4b6f      	ldr	r3, [pc, #444]	@ (800b0e0 <_dtoa_r+0x8a0>)
 800af22:	2200      	movs	r2, #0
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	2200      	movs	r2, #0
 800af2a:	2300      	movs	r3, #0
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	f7f5 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	d09f      	beq.n	800ae78 <_dtoa_r+0x638>
 800af38:	e7d1      	b.n	800aede <_dtoa_r+0x69e>
 800af3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	f000 80ea 	beq.w	800b116 <_dtoa_r+0x8d6>
 800af42:	9a07      	ldr	r2, [sp, #28]
 800af44:	2a01      	cmp	r2, #1
 800af46:	f300 80cd 	bgt.w	800b0e4 <_dtoa_r+0x8a4>
 800af4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	f000 80c1 	beq.w	800b0d4 <_dtoa_r+0x894>
 800af52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af56:	9c08      	ldr	r4, [sp, #32]
 800af58:	9e00      	ldr	r6, [sp, #0]
 800af5a:	9a00      	ldr	r2, [sp, #0]
 800af5c:	441a      	add	r2, r3
 800af5e:	9200      	str	r2, [sp, #0]
 800af60:	9a06      	ldr	r2, [sp, #24]
 800af62:	2101      	movs	r1, #1
 800af64:	441a      	add	r2, r3
 800af66:	4648      	mov	r0, r9
 800af68:	9206      	str	r2, [sp, #24]
 800af6a:	f000 fb77 	bl	800b65c <__i2b>
 800af6e:	4605      	mov	r5, r0
 800af70:	b166      	cbz	r6, 800af8c <_dtoa_r+0x74c>
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd09      	ble.n	800af8c <_dtoa_r+0x74c>
 800af78:	42b3      	cmp	r3, r6
 800af7a:	9a00      	ldr	r2, [sp, #0]
 800af7c:	bfa8      	it	ge
 800af7e:	4633      	movge	r3, r6
 800af80:	1ad2      	subs	r2, r2, r3
 800af82:	9200      	str	r2, [sp, #0]
 800af84:	9a06      	ldr	r2, [sp, #24]
 800af86:	1af6      	subs	r6, r6, r3
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	9306      	str	r3, [sp, #24]
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	b30b      	cbz	r3, 800afd4 <_dtoa_r+0x794>
 800af90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 80c6 	beq.w	800b124 <_dtoa_r+0x8e4>
 800af98:	2c00      	cmp	r4, #0
 800af9a:	f000 80c0 	beq.w	800b11e <_dtoa_r+0x8de>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4622      	mov	r2, r4
 800afa2:	4648      	mov	r0, r9
 800afa4:	f000 fc12 	bl	800b7cc <__pow5mult>
 800afa8:	9a02      	ldr	r2, [sp, #8]
 800afaa:	4601      	mov	r1, r0
 800afac:	4605      	mov	r5, r0
 800afae:	4648      	mov	r0, r9
 800afb0:	f000 fb6a 	bl	800b688 <__multiply>
 800afb4:	9902      	ldr	r1, [sp, #8]
 800afb6:	4680      	mov	r8, r0
 800afb8:	4648      	mov	r0, r9
 800afba:	f000 fa9b 	bl	800b4f4 <_Bfree>
 800afbe:	9b08      	ldr	r3, [sp, #32]
 800afc0:	1b1b      	subs	r3, r3, r4
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	f000 80b1 	beq.w	800b12a <_dtoa_r+0x8ea>
 800afc8:	9a08      	ldr	r2, [sp, #32]
 800afca:	4641      	mov	r1, r8
 800afcc:	4648      	mov	r0, r9
 800afce:	f000 fbfd 	bl	800b7cc <__pow5mult>
 800afd2:	9002      	str	r0, [sp, #8]
 800afd4:	2101      	movs	r1, #1
 800afd6:	4648      	mov	r0, r9
 800afd8:	f000 fb40 	bl	800b65c <__i2b>
 800afdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afde:	4604      	mov	r4, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 81d8 	beq.w	800b396 <_dtoa_r+0xb56>
 800afe6:	461a      	mov	r2, r3
 800afe8:	4601      	mov	r1, r0
 800afea:	4648      	mov	r0, r9
 800afec:	f000 fbee 	bl	800b7cc <__pow5mult>
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	4604      	mov	r4, r0
 800aff6:	f300 809f 	bgt.w	800b138 <_dtoa_r+0x8f8>
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8097 	bne.w	800b130 <_dtoa_r+0x8f0>
 800b002:	9b05      	ldr	r3, [sp, #20]
 800b004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f040 8093 	bne.w	800b134 <_dtoa_r+0x8f4>
 800b00e:	9b05      	ldr	r3, [sp, #20]
 800b010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b014:	0d1b      	lsrs	r3, r3, #20
 800b016:	051b      	lsls	r3, r3, #20
 800b018:	b133      	cbz	r3, 800b028 <_dtoa_r+0x7e8>
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	3301      	adds	r3, #1
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	9b06      	ldr	r3, [sp, #24]
 800b022:	3301      	adds	r3, #1
 800b024:	9306      	str	r3, [sp, #24]
 800b026:	2301      	movs	r3, #1
 800b028:	9308      	str	r3, [sp, #32]
 800b02a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 81b8 	beq.w	800b3a2 <_dtoa_r+0xb62>
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b038:	6918      	ldr	r0, [r3, #16]
 800b03a:	f000 fac3 	bl	800b5c4 <__hi0bits>
 800b03e:	f1c0 0020 	rsb	r0, r0, #32
 800b042:	9b06      	ldr	r3, [sp, #24]
 800b044:	4418      	add	r0, r3
 800b046:	f010 001f 	ands.w	r0, r0, #31
 800b04a:	f000 8082 	beq.w	800b152 <_dtoa_r+0x912>
 800b04e:	f1c0 0320 	rsb	r3, r0, #32
 800b052:	2b04      	cmp	r3, #4
 800b054:	dd73      	ble.n	800b13e <_dtoa_r+0x8fe>
 800b056:	9b00      	ldr	r3, [sp, #0]
 800b058:	f1c0 001c 	rsb	r0, r0, #28
 800b05c:	4403      	add	r3, r0
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	9b06      	ldr	r3, [sp, #24]
 800b062:	4403      	add	r3, r0
 800b064:	4406      	add	r6, r0
 800b066:	9306      	str	r3, [sp, #24]
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd05      	ble.n	800b07a <_dtoa_r+0x83a>
 800b06e:	9902      	ldr	r1, [sp, #8]
 800b070:	461a      	mov	r2, r3
 800b072:	4648      	mov	r0, r9
 800b074:	f000 fc04 	bl	800b880 <__lshift>
 800b078:	9002      	str	r0, [sp, #8]
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd05      	ble.n	800b08c <_dtoa_r+0x84c>
 800b080:	4621      	mov	r1, r4
 800b082:	461a      	mov	r2, r3
 800b084:	4648      	mov	r0, r9
 800b086:	f000 fbfb 	bl	800b880 <__lshift>
 800b08a:	4604      	mov	r4, r0
 800b08c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d061      	beq.n	800b156 <_dtoa_r+0x916>
 800b092:	9802      	ldr	r0, [sp, #8]
 800b094:	4621      	mov	r1, r4
 800b096:	f000 fc5f 	bl	800b958 <__mcmp>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	da5b      	bge.n	800b156 <_dtoa_r+0x916>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9902      	ldr	r1, [sp, #8]
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	f000 fa47 	bl	800b538 <__multadd>
 800b0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ac:	9002      	str	r0, [sp, #8]
 800b0ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 8177 	beq.w	800b3a6 <_dtoa_r+0xb66>
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4648      	mov	r0, r9
 800b0c0:	f000 fa3a 	bl	800b538 <__multadd>
 800b0c4:	f1bb 0f00 	cmp.w	fp, #0
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	dc6f      	bgt.n	800b1ac <_dtoa_r+0x96c>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	dc49      	bgt.n	800b166 <_dtoa_r+0x926>
 800b0d2:	e06b      	b.n	800b1ac <_dtoa_r+0x96c>
 800b0d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0da:	e73c      	b.n	800af56 <_dtoa_r+0x716>
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	40240000 	.word	0x40240000
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	1e5c      	subs	r4, r3, #1
 800b0e8:	9b08      	ldr	r3, [sp, #32]
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	db09      	blt.n	800b102 <_dtoa_r+0x8c2>
 800b0ee:	1b1c      	subs	r4, r3, r4
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f6bf af30 	bge.w	800af58 <_dtoa_r+0x718>
 800b0f8:	9b00      	ldr	r3, [sp, #0]
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	1a9e      	subs	r6, r3, r2
 800b0fe:	2300      	movs	r3, #0
 800b100:	e72b      	b.n	800af5a <_dtoa_r+0x71a>
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b106:	9408      	str	r4, [sp, #32]
 800b108:	1ae3      	subs	r3, r4, r3
 800b10a:	441a      	add	r2, r3
 800b10c:	9e00      	ldr	r6, [sp, #0]
 800b10e:	9b03      	ldr	r3, [sp, #12]
 800b110:	920d      	str	r2, [sp, #52]	@ 0x34
 800b112:	2400      	movs	r4, #0
 800b114:	e721      	b.n	800af5a <_dtoa_r+0x71a>
 800b116:	9c08      	ldr	r4, [sp, #32]
 800b118:	9e00      	ldr	r6, [sp, #0]
 800b11a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b11c:	e728      	b.n	800af70 <_dtoa_r+0x730>
 800b11e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b122:	e751      	b.n	800afc8 <_dtoa_r+0x788>
 800b124:	9a08      	ldr	r2, [sp, #32]
 800b126:	9902      	ldr	r1, [sp, #8]
 800b128:	e750      	b.n	800afcc <_dtoa_r+0x78c>
 800b12a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b12e:	e751      	b.n	800afd4 <_dtoa_r+0x794>
 800b130:	2300      	movs	r3, #0
 800b132:	e779      	b.n	800b028 <_dtoa_r+0x7e8>
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	e777      	b.n	800b028 <_dtoa_r+0x7e8>
 800b138:	2300      	movs	r3, #0
 800b13a:	9308      	str	r3, [sp, #32]
 800b13c:	e779      	b.n	800b032 <_dtoa_r+0x7f2>
 800b13e:	d093      	beq.n	800b068 <_dtoa_r+0x828>
 800b140:	9a00      	ldr	r2, [sp, #0]
 800b142:	331c      	adds	r3, #28
 800b144:	441a      	add	r2, r3
 800b146:	9200      	str	r2, [sp, #0]
 800b148:	9a06      	ldr	r2, [sp, #24]
 800b14a:	441a      	add	r2, r3
 800b14c:	441e      	add	r6, r3
 800b14e:	9206      	str	r2, [sp, #24]
 800b150:	e78a      	b.n	800b068 <_dtoa_r+0x828>
 800b152:	4603      	mov	r3, r0
 800b154:	e7f4      	b.n	800b140 <_dtoa_r+0x900>
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	46b8      	mov	r8, r7
 800b15c:	dc20      	bgt.n	800b1a0 <_dtoa_r+0x960>
 800b15e:	469b      	mov	fp, r3
 800b160:	9b07      	ldr	r3, [sp, #28]
 800b162:	2b02      	cmp	r3, #2
 800b164:	dd1e      	ble.n	800b1a4 <_dtoa_r+0x964>
 800b166:	f1bb 0f00 	cmp.w	fp, #0
 800b16a:	f47f adb1 	bne.w	800acd0 <_dtoa_r+0x490>
 800b16e:	4621      	mov	r1, r4
 800b170:	465b      	mov	r3, fp
 800b172:	2205      	movs	r2, #5
 800b174:	4648      	mov	r0, r9
 800b176:	f000 f9df 	bl	800b538 <__multadd>
 800b17a:	4601      	mov	r1, r0
 800b17c:	4604      	mov	r4, r0
 800b17e:	9802      	ldr	r0, [sp, #8]
 800b180:	f000 fbea 	bl	800b958 <__mcmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	f77f ada3 	ble.w	800acd0 <_dtoa_r+0x490>
 800b18a:	4656      	mov	r6, sl
 800b18c:	2331      	movs	r3, #49	@ 0x31
 800b18e:	f806 3b01 	strb.w	r3, [r6], #1
 800b192:	f108 0801 	add.w	r8, r8, #1
 800b196:	e59f      	b.n	800acd8 <_dtoa_r+0x498>
 800b198:	9c03      	ldr	r4, [sp, #12]
 800b19a:	46b8      	mov	r8, r7
 800b19c:	4625      	mov	r5, r4
 800b19e:	e7f4      	b.n	800b18a <_dtoa_r+0x94a>
 800b1a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 8101 	beq.w	800b3ae <_dtoa_r+0xb6e>
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	dd05      	ble.n	800b1bc <_dtoa_r+0x97c>
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	4648      	mov	r0, r9
 800b1b6:	f000 fb63 	bl	800b880 <__lshift>
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	9b08      	ldr	r3, [sp, #32]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d05c      	beq.n	800b27c <_dtoa_r+0xa3c>
 800b1c2:	6869      	ldr	r1, [r5, #4]
 800b1c4:	4648      	mov	r0, r9
 800b1c6:	f000 f955 	bl	800b474 <_Balloc>
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	b928      	cbnz	r0, 800b1da <_dtoa_r+0x99a>
 800b1ce:	4b82      	ldr	r3, [pc, #520]	@ (800b3d8 <_dtoa_r+0xb98>)
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1d6:	f7ff bb4a 	b.w	800a86e <_dtoa_r+0x2e>
 800b1da:	692a      	ldr	r2, [r5, #16]
 800b1dc:	3202      	adds	r2, #2
 800b1de:	0092      	lsls	r2, r2, #2
 800b1e0:	f105 010c 	add.w	r1, r5, #12
 800b1e4:	300c      	adds	r0, #12
 800b1e6:	f000 ff85 	bl	800c0f4 <memcpy>
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4648      	mov	r0, r9
 800b1f0:	f000 fb46 	bl	800b880 <__lshift>
 800b1f4:	f10a 0301 	add.w	r3, sl, #1
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	eb0a 030b 	add.w	r3, sl, fp
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	462f      	mov	r7, r5
 800b208:	9306      	str	r3, [sp, #24]
 800b20a:	4605      	mov	r5, r0
 800b20c:	9b00      	ldr	r3, [sp, #0]
 800b20e:	9802      	ldr	r0, [sp, #8]
 800b210:	4621      	mov	r1, r4
 800b212:	f103 3bff 	add.w	fp, r3, #4294967295
 800b216:	f7ff fa89 	bl	800a72c <quorem>
 800b21a:	4603      	mov	r3, r0
 800b21c:	3330      	adds	r3, #48	@ 0x30
 800b21e:	9003      	str	r0, [sp, #12]
 800b220:	4639      	mov	r1, r7
 800b222:	9802      	ldr	r0, [sp, #8]
 800b224:	9309      	str	r3, [sp, #36]	@ 0x24
 800b226:	f000 fb97 	bl	800b958 <__mcmp>
 800b22a:	462a      	mov	r2, r5
 800b22c:	9004      	str	r0, [sp, #16]
 800b22e:	4621      	mov	r1, r4
 800b230:	4648      	mov	r0, r9
 800b232:	f000 fbad 	bl	800b990 <__mdiff>
 800b236:	68c2      	ldr	r2, [r0, #12]
 800b238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23a:	4606      	mov	r6, r0
 800b23c:	bb02      	cbnz	r2, 800b280 <_dtoa_r+0xa40>
 800b23e:	4601      	mov	r1, r0
 800b240:	9802      	ldr	r0, [sp, #8]
 800b242:	f000 fb89 	bl	800b958 <__mcmp>
 800b246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b248:	4602      	mov	r2, r0
 800b24a:	4631      	mov	r1, r6
 800b24c:	4648      	mov	r0, r9
 800b24e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b250:	9309      	str	r3, [sp, #36]	@ 0x24
 800b252:	f000 f94f 	bl	800b4f4 <_Bfree>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b25a:	9e00      	ldr	r6, [sp, #0]
 800b25c:	ea42 0103 	orr.w	r1, r2, r3
 800b260:	9b06      	ldr	r3, [sp, #24]
 800b262:	4319      	orrs	r1, r3
 800b264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b266:	d10d      	bne.n	800b284 <_dtoa_r+0xa44>
 800b268:	2b39      	cmp	r3, #57	@ 0x39
 800b26a:	d027      	beq.n	800b2bc <_dtoa_r+0xa7c>
 800b26c:	9a04      	ldr	r2, [sp, #16]
 800b26e:	2a00      	cmp	r2, #0
 800b270:	dd01      	ble.n	800b276 <_dtoa_r+0xa36>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	3331      	adds	r3, #49	@ 0x31
 800b276:	f88b 3000 	strb.w	r3, [fp]
 800b27a:	e52e      	b.n	800acda <_dtoa_r+0x49a>
 800b27c:	4628      	mov	r0, r5
 800b27e:	e7b9      	b.n	800b1f4 <_dtoa_r+0x9b4>
 800b280:	2201      	movs	r2, #1
 800b282:	e7e2      	b.n	800b24a <_dtoa_r+0xa0a>
 800b284:	9904      	ldr	r1, [sp, #16]
 800b286:	2900      	cmp	r1, #0
 800b288:	db04      	blt.n	800b294 <_dtoa_r+0xa54>
 800b28a:	9807      	ldr	r0, [sp, #28]
 800b28c:	4301      	orrs	r1, r0
 800b28e:	9806      	ldr	r0, [sp, #24]
 800b290:	4301      	orrs	r1, r0
 800b292:	d120      	bne.n	800b2d6 <_dtoa_r+0xa96>
 800b294:	2a00      	cmp	r2, #0
 800b296:	ddee      	ble.n	800b276 <_dtoa_r+0xa36>
 800b298:	9902      	ldr	r1, [sp, #8]
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	2201      	movs	r2, #1
 800b29e:	4648      	mov	r0, r9
 800b2a0:	f000 faee 	bl	800b880 <__lshift>
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	9002      	str	r0, [sp, #8]
 800b2a8:	f000 fb56 	bl	800b958 <__mcmp>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	dc02      	bgt.n	800b2b8 <_dtoa_r+0xa78>
 800b2b2:	d1e0      	bne.n	800b276 <_dtoa_r+0xa36>
 800b2b4:	07da      	lsls	r2, r3, #31
 800b2b6:	d5de      	bpl.n	800b276 <_dtoa_r+0xa36>
 800b2b8:	2b39      	cmp	r3, #57	@ 0x39
 800b2ba:	d1da      	bne.n	800b272 <_dtoa_r+0xa32>
 800b2bc:	2339      	movs	r3, #57	@ 0x39
 800b2be:	f88b 3000 	strb.w	r3, [fp]
 800b2c2:	4633      	mov	r3, r6
 800b2c4:	461e      	mov	r6, r3
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2cc:	2a39      	cmp	r2, #57	@ 0x39
 800b2ce:	d04e      	beq.n	800b36e <_dtoa_r+0xb2e>
 800b2d0:	3201      	adds	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	e501      	b.n	800acda <_dtoa_r+0x49a>
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	dd03      	ble.n	800b2e2 <_dtoa_r+0xaa2>
 800b2da:	2b39      	cmp	r3, #57	@ 0x39
 800b2dc:	d0ee      	beq.n	800b2bc <_dtoa_r+0xa7c>
 800b2de:	3301      	adds	r3, #1
 800b2e0:	e7c9      	b.n	800b276 <_dtoa_r+0xa36>
 800b2e2:	9a00      	ldr	r2, [sp, #0]
 800b2e4:	9908      	ldr	r1, [sp, #32]
 800b2e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b2ea:	428a      	cmp	r2, r1
 800b2ec:	d028      	beq.n	800b340 <_dtoa_r+0xb00>
 800b2ee:	9902      	ldr	r1, [sp, #8]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	220a      	movs	r2, #10
 800b2f4:	4648      	mov	r0, r9
 800b2f6:	f000 f91f 	bl	800b538 <__multadd>
 800b2fa:	42af      	cmp	r7, r5
 800b2fc:	9002      	str	r0, [sp, #8]
 800b2fe:	f04f 0300 	mov.w	r3, #0
 800b302:	f04f 020a 	mov.w	r2, #10
 800b306:	4639      	mov	r1, r7
 800b308:	4648      	mov	r0, r9
 800b30a:	d107      	bne.n	800b31c <_dtoa_r+0xadc>
 800b30c:	f000 f914 	bl	800b538 <__multadd>
 800b310:	4607      	mov	r7, r0
 800b312:	4605      	mov	r5, r0
 800b314:	9b00      	ldr	r3, [sp, #0]
 800b316:	3301      	adds	r3, #1
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	e777      	b.n	800b20c <_dtoa_r+0x9cc>
 800b31c:	f000 f90c 	bl	800b538 <__multadd>
 800b320:	4629      	mov	r1, r5
 800b322:	4607      	mov	r7, r0
 800b324:	2300      	movs	r3, #0
 800b326:	220a      	movs	r2, #10
 800b328:	4648      	mov	r0, r9
 800b32a:	f000 f905 	bl	800b538 <__multadd>
 800b32e:	4605      	mov	r5, r0
 800b330:	e7f0      	b.n	800b314 <_dtoa_r+0xad4>
 800b332:	f1bb 0f00 	cmp.w	fp, #0
 800b336:	bfcc      	ite	gt
 800b338:	465e      	movgt	r6, fp
 800b33a:	2601      	movle	r6, #1
 800b33c:	4456      	add	r6, sl
 800b33e:	2700      	movs	r7, #0
 800b340:	9902      	ldr	r1, [sp, #8]
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	2201      	movs	r2, #1
 800b346:	4648      	mov	r0, r9
 800b348:	f000 fa9a 	bl	800b880 <__lshift>
 800b34c:	4621      	mov	r1, r4
 800b34e:	9002      	str	r0, [sp, #8]
 800b350:	f000 fb02 	bl	800b958 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	dcb4      	bgt.n	800b2c2 <_dtoa_r+0xa82>
 800b358:	d102      	bne.n	800b360 <_dtoa_r+0xb20>
 800b35a:	9b00      	ldr	r3, [sp, #0]
 800b35c:	07db      	lsls	r3, r3, #31
 800b35e:	d4b0      	bmi.n	800b2c2 <_dtoa_r+0xa82>
 800b360:	4633      	mov	r3, r6
 800b362:	461e      	mov	r6, r3
 800b364:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b368:	2a30      	cmp	r2, #48	@ 0x30
 800b36a:	d0fa      	beq.n	800b362 <_dtoa_r+0xb22>
 800b36c:	e4b5      	b.n	800acda <_dtoa_r+0x49a>
 800b36e:	459a      	cmp	sl, r3
 800b370:	d1a8      	bne.n	800b2c4 <_dtoa_r+0xa84>
 800b372:	2331      	movs	r3, #49	@ 0x31
 800b374:	f108 0801 	add.w	r8, r8, #1
 800b378:	f88a 3000 	strb.w	r3, [sl]
 800b37c:	e4ad      	b.n	800acda <_dtoa_r+0x49a>
 800b37e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b380:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b3dc <_dtoa_r+0xb9c>
 800b384:	b11b      	cbz	r3, 800b38e <_dtoa_r+0xb4e>
 800b386:	f10a 0308 	add.w	r3, sl, #8
 800b38a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4650      	mov	r0, sl
 800b390:	b017      	add	sp, #92	@ 0x5c
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b396:	9b07      	ldr	r3, [sp, #28]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	f77f ae2e 	ble.w	800affa <_dtoa_r+0x7ba>
 800b39e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3a0:	9308      	str	r3, [sp, #32]
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	e64d      	b.n	800b042 <_dtoa_r+0x802>
 800b3a6:	f1bb 0f00 	cmp.w	fp, #0
 800b3aa:	f77f aed9 	ble.w	800b160 <_dtoa_r+0x920>
 800b3ae:	4656      	mov	r6, sl
 800b3b0:	9802      	ldr	r0, [sp, #8]
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	f7ff f9ba 	bl	800a72c <quorem>
 800b3b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b3c0:	eba6 020a 	sub.w	r2, r6, sl
 800b3c4:	4593      	cmp	fp, r2
 800b3c6:	ddb4      	ble.n	800b332 <_dtoa_r+0xaf2>
 800b3c8:	9902      	ldr	r1, [sp, #8]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	220a      	movs	r2, #10
 800b3ce:	4648      	mov	r0, r9
 800b3d0:	f000 f8b2 	bl	800b538 <__multadd>
 800b3d4:	9002      	str	r0, [sp, #8]
 800b3d6:	e7eb      	b.n	800b3b0 <_dtoa_r+0xb70>
 800b3d8:	0800c468 	.word	0x0800c468
 800b3dc:	0800c3ec 	.word	0x0800c3ec

0800b3e0 <_free_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	d041      	beq.n	800b46c <_free_r+0x8c>
 800b3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ec:	1f0c      	subs	r4, r1, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	bfb8      	it	lt
 800b3f2:	18e4      	addlt	r4, r4, r3
 800b3f4:	f7fe fb78 	bl	8009ae8 <__malloc_lock>
 800b3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b470 <_free_r+0x90>)
 800b3fa:	6813      	ldr	r3, [r2, #0]
 800b3fc:	b933      	cbnz	r3, 800b40c <_free_r+0x2c>
 800b3fe:	6063      	str	r3, [r4, #4]
 800b400:	6014      	str	r4, [r2, #0]
 800b402:	4628      	mov	r0, r5
 800b404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b408:	f7fe bb74 	b.w	8009af4 <__malloc_unlock>
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d908      	bls.n	800b422 <_free_r+0x42>
 800b410:	6820      	ldr	r0, [r4, #0]
 800b412:	1821      	adds	r1, r4, r0
 800b414:	428b      	cmp	r3, r1
 800b416:	bf01      	itttt	eq
 800b418:	6819      	ldreq	r1, [r3, #0]
 800b41a:	685b      	ldreq	r3, [r3, #4]
 800b41c:	1809      	addeq	r1, r1, r0
 800b41e:	6021      	streq	r1, [r4, #0]
 800b420:	e7ed      	b.n	800b3fe <_free_r+0x1e>
 800b422:	461a      	mov	r2, r3
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	b10b      	cbz	r3, 800b42c <_free_r+0x4c>
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d9fa      	bls.n	800b422 <_free_r+0x42>
 800b42c:	6811      	ldr	r1, [r2, #0]
 800b42e:	1850      	adds	r0, r2, r1
 800b430:	42a0      	cmp	r0, r4
 800b432:	d10b      	bne.n	800b44c <_free_r+0x6c>
 800b434:	6820      	ldr	r0, [r4, #0]
 800b436:	4401      	add	r1, r0
 800b438:	1850      	adds	r0, r2, r1
 800b43a:	4283      	cmp	r3, r0
 800b43c:	6011      	str	r1, [r2, #0]
 800b43e:	d1e0      	bne.n	800b402 <_free_r+0x22>
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	6053      	str	r3, [r2, #4]
 800b446:	4408      	add	r0, r1
 800b448:	6010      	str	r0, [r2, #0]
 800b44a:	e7da      	b.n	800b402 <_free_r+0x22>
 800b44c:	d902      	bls.n	800b454 <_free_r+0x74>
 800b44e:	230c      	movs	r3, #12
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	e7d6      	b.n	800b402 <_free_r+0x22>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	1821      	adds	r1, r4, r0
 800b458:	428b      	cmp	r3, r1
 800b45a:	bf04      	itt	eq
 800b45c:	6819      	ldreq	r1, [r3, #0]
 800b45e:	685b      	ldreq	r3, [r3, #4]
 800b460:	6063      	str	r3, [r4, #4]
 800b462:	bf04      	itt	eq
 800b464:	1809      	addeq	r1, r1, r0
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	6054      	str	r4, [r2, #4]
 800b46a:	e7ca      	b.n	800b402 <_free_r+0x22>
 800b46c:	bd38      	pop	{r3, r4, r5, pc}
 800b46e:	bf00      	nop
 800b470:	20001f00 	.word	0x20001f00

0800b474 <_Balloc>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	69c6      	ldr	r6, [r0, #28]
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	b976      	cbnz	r6, 800b49c <_Balloc+0x28>
 800b47e:	2010      	movs	r0, #16
 800b480:	f7fe fa88 	bl	8009994 <malloc>
 800b484:	4602      	mov	r2, r0
 800b486:	61e0      	str	r0, [r4, #28]
 800b488:	b920      	cbnz	r0, 800b494 <_Balloc+0x20>
 800b48a:	4b18      	ldr	r3, [pc, #96]	@ (800b4ec <_Balloc+0x78>)
 800b48c:	4818      	ldr	r0, [pc, #96]	@ (800b4f0 <_Balloc+0x7c>)
 800b48e:	216b      	movs	r1, #107	@ 0x6b
 800b490:	f7fe fa62 	bl	8009958 <__assert_func>
 800b494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b498:	6006      	str	r6, [r0, #0]
 800b49a:	60c6      	str	r6, [r0, #12]
 800b49c:	69e6      	ldr	r6, [r4, #28]
 800b49e:	68f3      	ldr	r3, [r6, #12]
 800b4a0:	b183      	cbz	r3, 800b4c4 <_Balloc+0x50>
 800b4a2:	69e3      	ldr	r3, [r4, #28]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4aa:	b9b8      	cbnz	r0, 800b4dc <_Balloc+0x68>
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b4b2:	1d72      	adds	r2, r6, #5
 800b4b4:	0092      	lsls	r2, r2, #2
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f000 fe2a 	bl	800c110 <_calloc_r>
 800b4bc:	b160      	cbz	r0, 800b4d8 <_Balloc+0x64>
 800b4be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4c2:	e00e      	b.n	800b4e2 <_Balloc+0x6e>
 800b4c4:	2221      	movs	r2, #33	@ 0x21
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fe21 	bl	800c110 <_calloc_r>
 800b4ce:	69e3      	ldr	r3, [r4, #28]
 800b4d0:	60f0      	str	r0, [r6, #12]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e4      	bne.n	800b4a2 <_Balloc+0x2e>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	6802      	ldr	r2, [r0, #0]
 800b4de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4e8:	e7f7      	b.n	800b4da <_Balloc+0x66>
 800b4ea:	bf00      	nop
 800b4ec:	0800c3f9 	.word	0x0800c3f9
 800b4f0:	0800c479 	.word	0x0800c479

0800b4f4 <_Bfree>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	69c6      	ldr	r6, [r0, #28]
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	b976      	cbnz	r6, 800b51c <_Bfree+0x28>
 800b4fe:	2010      	movs	r0, #16
 800b500:	f7fe fa48 	bl	8009994 <malloc>
 800b504:	4602      	mov	r2, r0
 800b506:	61e8      	str	r0, [r5, #28]
 800b508:	b920      	cbnz	r0, 800b514 <_Bfree+0x20>
 800b50a:	4b09      	ldr	r3, [pc, #36]	@ (800b530 <_Bfree+0x3c>)
 800b50c:	4809      	ldr	r0, [pc, #36]	@ (800b534 <_Bfree+0x40>)
 800b50e:	218f      	movs	r1, #143	@ 0x8f
 800b510:	f7fe fa22 	bl	8009958 <__assert_func>
 800b514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b518:	6006      	str	r6, [r0, #0]
 800b51a:	60c6      	str	r6, [r0, #12]
 800b51c:	b13c      	cbz	r4, 800b52e <_Bfree+0x3a>
 800b51e:	69eb      	ldr	r3, [r5, #28]
 800b520:	6862      	ldr	r2, [r4, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b528:	6021      	str	r1, [r4, #0]
 800b52a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	0800c3f9 	.word	0x0800c3f9
 800b534:	0800c479 	.word	0x0800c479

0800b538 <__multadd>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	690d      	ldr	r5, [r1, #16]
 800b53e:	4607      	mov	r7, r0
 800b540:	460c      	mov	r4, r1
 800b542:	461e      	mov	r6, r3
 800b544:	f101 0c14 	add.w	ip, r1, #20
 800b548:	2000      	movs	r0, #0
 800b54a:	f8dc 3000 	ldr.w	r3, [ip]
 800b54e:	b299      	uxth	r1, r3
 800b550:	fb02 6101 	mla	r1, r2, r1, r6
 800b554:	0c1e      	lsrs	r6, r3, #16
 800b556:	0c0b      	lsrs	r3, r1, #16
 800b558:	fb02 3306 	mla	r3, r2, r6, r3
 800b55c:	b289      	uxth	r1, r1
 800b55e:	3001      	adds	r0, #1
 800b560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b564:	4285      	cmp	r5, r0
 800b566:	f84c 1b04 	str.w	r1, [ip], #4
 800b56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b56e:	dcec      	bgt.n	800b54a <__multadd+0x12>
 800b570:	b30e      	cbz	r6, 800b5b6 <__multadd+0x7e>
 800b572:	68a3      	ldr	r3, [r4, #8]
 800b574:	42ab      	cmp	r3, r5
 800b576:	dc19      	bgt.n	800b5ac <__multadd+0x74>
 800b578:	6861      	ldr	r1, [r4, #4]
 800b57a:	4638      	mov	r0, r7
 800b57c:	3101      	adds	r1, #1
 800b57e:	f7ff ff79 	bl	800b474 <_Balloc>
 800b582:	4680      	mov	r8, r0
 800b584:	b928      	cbnz	r0, 800b592 <__multadd+0x5a>
 800b586:	4602      	mov	r2, r0
 800b588:	4b0c      	ldr	r3, [pc, #48]	@ (800b5bc <__multadd+0x84>)
 800b58a:	480d      	ldr	r0, [pc, #52]	@ (800b5c0 <__multadd+0x88>)
 800b58c:	21ba      	movs	r1, #186	@ 0xba
 800b58e:	f7fe f9e3 	bl	8009958 <__assert_func>
 800b592:	6922      	ldr	r2, [r4, #16]
 800b594:	3202      	adds	r2, #2
 800b596:	f104 010c 	add.w	r1, r4, #12
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	300c      	adds	r0, #12
 800b59e:	f000 fda9 	bl	800c0f4 <memcpy>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff ffa5 	bl	800b4f4 <_Bfree>
 800b5aa:	4644      	mov	r4, r8
 800b5ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5b0:	3501      	adds	r5, #1
 800b5b2:	615e      	str	r6, [r3, #20]
 800b5b4:	6125      	str	r5, [r4, #16]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	0800c468 	.word	0x0800c468
 800b5c0:	0800c479 	.word	0x0800c479

0800b5c4 <__hi0bits>:
 800b5c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	bf36      	itet	cc
 800b5cc:	0403      	lslcc	r3, r0, #16
 800b5ce:	2000      	movcs	r0, #0
 800b5d0:	2010      	movcc	r0, #16
 800b5d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5d6:	bf3c      	itt	cc
 800b5d8:	021b      	lslcc	r3, r3, #8
 800b5da:	3008      	addcc	r0, #8
 800b5dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5e0:	bf3c      	itt	cc
 800b5e2:	011b      	lslcc	r3, r3, #4
 800b5e4:	3004      	addcc	r0, #4
 800b5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ea:	bf3c      	itt	cc
 800b5ec:	009b      	lslcc	r3, r3, #2
 800b5ee:	3002      	addcc	r0, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	db05      	blt.n	800b600 <__hi0bits+0x3c>
 800b5f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5f8:	f100 0001 	add.w	r0, r0, #1
 800b5fc:	bf08      	it	eq
 800b5fe:	2020      	moveq	r0, #32
 800b600:	4770      	bx	lr

0800b602 <__lo0bits>:
 800b602:	6803      	ldr	r3, [r0, #0]
 800b604:	4602      	mov	r2, r0
 800b606:	f013 0007 	ands.w	r0, r3, #7
 800b60a:	d00b      	beq.n	800b624 <__lo0bits+0x22>
 800b60c:	07d9      	lsls	r1, r3, #31
 800b60e:	d421      	bmi.n	800b654 <__lo0bits+0x52>
 800b610:	0798      	lsls	r0, r3, #30
 800b612:	bf49      	itett	mi
 800b614:	085b      	lsrmi	r3, r3, #1
 800b616:	089b      	lsrpl	r3, r3, #2
 800b618:	2001      	movmi	r0, #1
 800b61a:	6013      	strmi	r3, [r2, #0]
 800b61c:	bf5c      	itt	pl
 800b61e:	6013      	strpl	r3, [r2, #0]
 800b620:	2002      	movpl	r0, #2
 800b622:	4770      	bx	lr
 800b624:	b299      	uxth	r1, r3
 800b626:	b909      	cbnz	r1, 800b62c <__lo0bits+0x2a>
 800b628:	0c1b      	lsrs	r3, r3, #16
 800b62a:	2010      	movs	r0, #16
 800b62c:	b2d9      	uxtb	r1, r3
 800b62e:	b909      	cbnz	r1, 800b634 <__lo0bits+0x32>
 800b630:	3008      	adds	r0, #8
 800b632:	0a1b      	lsrs	r3, r3, #8
 800b634:	0719      	lsls	r1, r3, #28
 800b636:	bf04      	itt	eq
 800b638:	091b      	lsreq	r3, r3, #4
 800b63a:	3004      	addeq	r0, #4
 800b63c:	0799      	lsls	r1, r3, #30
 800b63e:	bf04      	itt	eq
 800b640:	089b      	lsreq	r3, r3, #2
 800b642:	3002      	addeq	r0, #2
 800b644:	07d9      	lsls	r1, r3, #31
 800b646:	d403      	bmi.n	800b650 <__lo0bits+0x4e>
 800b648:	085b      	lsrs	r3, r3, #1
 800b64a:	f100 0001 	add.w	r0, r0, #1
 800b64e:	d003      	beq.n	800b658 <__lo0bits+0x56>
 800b650:	6013      	str	r3, [r2, #0]
 800b652:	4770      	bx	lr
 800b654:	2000      	movs	r0, #0
 800b656:	4770      	bx	lr
 800b658:	2020      	movs	r0, #32
 800b65a:	4770      	bx	lr

0800b65c <__i2b>:
 800b65c:	b510      	push	{r4, lr}
 800b65e:	460c      	mov	r4, r1
 800b660:	2101      	movs	r1, #1
 800b662:	f7ff ff07 	bl	800b474 <_Balloc>
 800b666:	4602      	mov	r2, r0
 800b668:	b928      	cbnz	r0, 800b676 <__i2b+0x1a>
 800b66a:	4b05      	ldr	r3, [pc, #20]	@ (800b680 <__i2b+0x24>)
 800b66c:	4805      	ldr	r0, [pc, #20]	@ (800b684 <__i2b+0x28>)
 800b66e:	f240 1145 	movw	r1, #325	@ 0x145
 800b672:	f7fe f971 	bl	8009958 <__assert_func>
 800b676:	2301      	movs	r3, #1
 800b678:	6144      	str	r4, [r0, #20]
 800b67a:	6103      	str	r3, [r0, #16]
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	bf00      	nop
 800b680:	0800c468 	.word	0x0800c468
 800b684:	0800c479 	.word	0x0800c479

0800b688 <__multiply>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	4617      	mov	r7, r2
 800b68e:	690a      	ldr	r2, [r1, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	429a      	cmp	r2, r3
 800b694:	bfa8      	it	ge
 800b696:	463b      	movge	r3, r7
 800b698:	4689      	mov	r9, r1
 800b69a:	bfa4      	itt	ge
 800b69c:	460f      	movge	r7, r1
 800b69e:	4699      	movge	r9, r3
 800b6a0:	693d      	ldr	r5, [r7, #16]
 800b6a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	eb05 060a 	add.w	r6, r5, sl
 800b6ae:	42b3      	cmp	r3, r6
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	bfb8      	it	lt
 800b6b4:	3101      	addlt	r1, #1
 800b6b6:	f7ff fedd 	bl	800b474 <_Balloc>
 800b6ba:	b930      	cbnz	r0, 800b6ca <__multiply+0x42>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	4b41      	ldr	r3, [pc, #260]	@ (800b7c4 <__multiply+0x13c>)
 800b6c0:	4841      	ldr	r0, [pc, #260]	@ (800b7c8 <__multiply+0x140>)
 800b6c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6c6:	f7fe f947 	bl	8009958 <__assert_func>
 800b6ca:	f100 0414 	add.w	r4, r0, #20
 800b6ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6d2:	4623      	mov	r3, r4
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4573      	cmp	r3, lr
 800b6d8:	d320      	bcc.n	800b71c <__multiply+0x94>
 800b6da:	f107 0814 	add.w	r8, r7, #20
 800b6de:	f109 0114 	add.w	r1, r9, #20
 800b6e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6ea:	9302      	str	r3, [sp, #8]
 800b6ec:	1beb      	subs	r3, r5, r7
 800b6ee:	3b15      	subs	r3, #21
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	3715      	adds	r7, #21
 800b6f8:	42bd      	cmp	r5, r7
 800b6fa:	bf38      	it	cc
 800b6fc:	2304      	movcc	r3, #4
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	9b02      	ldr	r3, [sp, #8]
 800b702:	9103      	str	r1, [sp, #12]
 800b704:	428b      	cmp	r3, r1
 800b706:	d80c      	bhi.n	800b722 <__multiply+0x9a>
 800b708:	2e00      	cmp	r6, #0
 800b70a:	dd03      	ble.n	800b714 <__multiply+0x8c>
 800b70c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b710:	2b00      	cmp	r3, #0
 800b712:	d055      	beq.n	800b7c0 <__multiply+0x138>
 800b714:	6106      	str	r6, [r0, #16]
 800b716:	b005      	add	sp, #20
 800b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	f843 2b04 	str.w	r2, [r3], #4
 800b720:	e7d9      	b.n	800b6d6 <__multiply+0x4e>
 800b722:	f8b1 a000 	ldrh.w	sl, [r1]
 800b726:	f1ba 0f00 	cmp.w	sl, #0
 800b72a:	d01f      	beq.n	800b76c <__multiply+0xe4>
 800b72c:	46c4      	mov	ip, r8
 800b72e:	46a1      	mov	r9, r4
 800b730:	2700      	movs	r7, #0
 800b732:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b736:	f8d9 3000 	ldr.w	r3, [r9]
 800b73a:	fa1f fb82 	uxth.w	fp, r2
 800b73e:	b29b      	uxth	r3, r3
 800b740:	fb0a 330b 	mla	r3, sl, fp, r3
 800b744:	443b      	add	r3, r7
 800b746:	f8d9 7000 	ldr.w	r7, [r9]
 800b74a:	0c12      	lsrs	r2, r2, #16
 800b74c:	0c3f      	lsrs	r7, r7, #16
 800b74e:	fb0a 7202 	mla	r2, sl, r2, r7
 800b752:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b756:	b29b      	uxth	r3, r3
 800b758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b75c:	4565      	cmp	r5, ip
 800b75e:	f849 3b04 	str.w	r3, [r9], #4
 800b762:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b766:	d8e4      	bhi.n	800b732 <__multiply+0xaa>
 800b768:	9b01      	ldr	r3, [sp, #4]
 800b76a:	50e7      	str	r7, [r4, r3]
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b772:	3104      	adds	r1, #4
 800b774:	f1b9 0f00 	cmp.w	r9, #0
 800b778:	d020      	beq.n	800b7bc <__multiply+0x134>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	4647      	mov	r7, r8
 800b77e:	46a4      	mov	ip, r4
 800b780:	f04f 0a00 	mov.w	sl, #0
 800b784:	f8b7 b000 	ldrh.w	fp, [r7]
 800b788:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b78c:	fb09 220b 	mla	r2, r9, fp, r2
 800b790:	4452      	add	r2, sl
 800b792:	b29b      	uxth	r3, r3
 800b794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b798:	f84c 3b04 	str.w	r3, [ip], #4
 800b79c:	f857 3b04 	ldr.w	r3, [r7], #4
 800b7a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7a4:	f8bc 3000 	ldrh.w	r3, [ip]
 800b7a8:	fb09 330a 	mla	r3, r9, sl, r3
 800b7ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b7b0:	42bd      	cmp	r5, r7
 800b7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7b6:	d8e5      	bhi.n	800b784 <__multiply+0xfc>
 800b7b8:	9a01      	ldr	r2, [sp, #4]
 800b7ba:	50a3      	str	r3, [r4, r2]
 800b7bc:	3404      	adds	r4, #4
 800b7be:	e79f      	b.n	800b700 <__multiply+0x78>
 800b7c0:	3e01      	subs	r6, #1
 800b7c2:	e7a1      	b.n	800b708 <__multiply+0x80>
 800b7c4:	0800c468 	.word	0x0800c468
 800b7c8:	0800c479 	.word	0x0800c479

0800b7cc <__pow5mult>:
 800b7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d0:	4615      	mov	r5, r2
 800b7d2:	f012 0203 	ands.w	r2, r2, #3
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	460e      	mov	r6, r1
 800b7da:	d007      	beq.n	800b7ec <__pow5mult+0x20>
 800b7dc:	4c25      	ldr	r4, [pc, #148]	@ (800b874 <__pow5mult+0xa8>)
 800b7de:	3a01      	subs	r2, #1
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7e6:	f7ff fea7 	bl	800b538 <__multadd>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	10ad      	asrs	r5, r5, #2
 800b7ee:	d03d      	beq.n	800b86c <__pow5mult+0xa0>
 800b7f0:	69fc      	ldr	r4, [r7, #28]
 800b7f2:	b97c      	cbnz	r4, 800b814 <__pow5mult+0x48>
 800b7f4:	2010      	movs	r0, #16
 800b7f6:	f7fe f8cd 	bl	8009994 <malloc>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	61f8      	str	r0, [r7, #28]
 800b7fe:	b928      	cbnz	r0, 800b80c <__pow5mult+0x40>
 800b800:	4b1d      	ldr	r3, [pc, #116]	@ (800b878 <__pow5mult+0xac>)
 800b802:	481e      	ldr	r0, [pc, #120]	@ (800b87c <__pow5mult+0xb0>)
 800b804:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b808:	f7fe f8a6 	bl	8009958 <__assert_func>
 800b80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b810:	6004      	str	r4, [r0, #0]
 800b812:	60c4      	str	r4, [r0, #12]
 800b814:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b81c:	b94c      	cbnz	r4, 800b832 <__pow5mult+0x66>
 800b81e:	f240 2171 	movw	r1, #625	@ 0x271
 800b822:	4638      	mov	r0, r7
 800b824:	f7ff ff1a 	bl	800b65c <__i2b>
 800b828:	2300      	movs	r3, #0
 800b82a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b82e:	4604      	mov	r4, r0
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	f04f 0900 	mov.w	r9, #0
 800b836:	07eb      	lsls	r3, r5, #31
 800b838:	d50a      	bpl.n	800b850 <__pow5mult+0x84>
 800b83a:	4631      	mov	r1, r6
 800b83c:	4622      	mov	r2, r4
 800b83e:	4638      	mov	r0, r7
 800b840:	f7ff ff22 	bl	800b688 <__multiply>
 800b844:	4631      	mov	r1, r6
 800b846:	4680      	mov	r8, r0
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff fe53 	bl	800b4f4 <_Bfree>
 800b84e:	4646      	mov	r6, r8
 800b850:	106d      	asrs	r5, r5, #1
 800b852:	d00b      	beq.n	800b86c <__pow5mult+0xa0>
 800b854:	6820      	ldr	r0, [r4, #0]
 800b856:	b938      	cbnz	r0, 800b868 <__pow5mult+0x9c>
 800b858:	4622      	mov	r2, r4
 800b85a:	4621      	mov	r1, r4
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff ff13 	bl	800b688 <__multiply>
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	f8c0 9000 	str.w	r9, [r0]
 800b868:	4604      	mov	r4, r0
 800b86a:	e7e4      	b.n	800b836 <__pow5mult+0x6a>
 800b86c:	4630      	mov	r0, r6
 800b86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b872:	bf00      	nop
 800b874:	0800c4f0 	.word	0x0800c4f0
 800b878:	0800c3f9 	.word	0x0800c3f9
 800b87c:	0800c479 	.word	0x0800c479

0800b880 <__lshift>:
 800b880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	6849      	ldr	r1, [r1, #4]
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b88e:	68a3      	ldr	r3, [r4, #8]
 800b890:	4607      	mov	r7, r0
 800b892:	4691      	mov	r9, r2
 800b894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b898:	f108 0601 	add.w	r6, r8, #1
 800b89c:	42b3      	cmp	r3, r6
 800b89e:	db0b      	blt.n	800b8b8 <__lshift+0x38>
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	f7ff fde7 	bl	800b474 <_Balloc>
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	b948      	cbnz	r0, 800b8be <__lshift+0x3e>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4b28      	ldr	r3, [pc, #160]	@ (800b950 <__lshift+0xd0>)
 800b8ae:	4829      	ldr	r0, [pc, #164]	@ (800b954 <__lshift+0xd4>)
 800b8b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8b4:	f7fe f850 	bl	8009958 <__assert_func>
 800b8b8:	3101      	adds	r1, #1
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	e7ee      	b.n	800b89c <__lshift+0x1c>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f100 0114 	add.w	r1, r0, #20
 800b8c4:	f100 0210 	add.w	r2, r0, #16
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	4553      	cmp	r3, sl
 800b8cc:	db33      	blt.n	800b936 <__lshift+0xb6>
 800b8ce:	6920      	ldr	r0, [r4, #16]
 800b8d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8d4:	f104 0314 	add.w	r3, r4, #20
 800b8d8:	f019 091f 	ands.w	r9, r9, #31
 800b8dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8e4:	d02b      	beq.n	800b93e <__lshift+0xbe>
 800b8e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ea:	468a      	mov	sl, r1
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	fa00 f009 	lsl.w	r0, r0, r9
 800b8f4:	4310      	orrs	r0, r2
 800b8f6:	f84a 0b04 	str.w	r0, [sl], #4
 800b8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8fe:	459c      	cmp	ip, r3
 800b900:	fa22 f20e 	lsr.w	r2, r2, lr
 800b904:	d8f3      	bhi.n	800b8ee <__lshift+0x6e>
 800b906:	ebac 0304 	sub.w	r3, ip, r4
 800b90a:	3b15      	subs	r3, #21
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	3304      	adds	r3, #4
 800b912:	f104 0015 	add.w	r0, r4, #21
 800b916:	4560      	cmp	r0, ip
 800b918:	bf88      	it	hi
 800b91a:	2304      	movhi	r3, #4
 800b91c:	50ca      	str	r2, [r1, r3]
 800b91e:	b10a      	cbz	r2, 800b924 <__lshift+0xa4>
 800b920:	f108 0602 	add.w	r6, r8, #2
 800b924:	3e01      	subs	r6, #1
 800b926:	4638      	mov	r0, r7
 800b928:	612e      	str	r6, [r5, #16]
 800b92a:	4621      	mov	r1, r4
 800b92c:	f7ff fde2 	bl	800b4f4 <_Bfree>
 800b930:	4628      	mov	r0, r5
 800b932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b936:	f842 0f04 	str.w	r0, [r2, #4]!
 800b93a:	3301      	adds	r3, #1
 800b93c:	e7c5      	b.n	800b8ca <__lshift+0x4a>
 800b93e:	3904      	subs	r1, #4
 800b940:	f853 2b04 	ldr.w	r2, [r3], #4
 800b944:	f841 2f04 	str.w	r2, [r1, #4]!
 800b948:	459c      	cmp	ip, r3
 800b94a:	d8f9      	bhi.n	800b940 <__lshift+0xc0>
 800b94c:	e7ea      	b.n	800b924 <__lshift+0xa4>
 800b94e:	bf00      	nop
 800b950:	0800c468 	.word	0x0800c468
 800b954:	0800c479 	.word	0x0800c479

0800b958 <__mcmp>:
 800b958:	690a      	ldr	r2, [r1, #16]
 800b95a:	4603      	mov	r3, r0
 800b95c:	6900      	ldr	r0, [r0, #16]
 800b95e:	1a80      	subs	r0, r0, r2
 800b960:	b530      	push	{r4, r5, lr}
 800b962:	d10e      	bne.n	800b982 <__mcmp+0x2a>
 800b964:	3314      	adds	r3, #20
 800b966:	3114      	adds	r1, #20
 800b968:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b96c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b970:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b974:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b978:	4295      	cmp	r5, r2
 800b97a:	d003      	beq.n	800b984 <__mcmp+0x2c>
 800b97c:	d205      	bcs.n	800b98a <__mcmp+0x32>
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	bd30      	pop	{r4, r5, pc}
 800b984:	42a3      	cmp	r3, r4
 800b986:	d3f3      	bcc.n	800b970 <__mcmp+0x18>
 800b988:	e7fb      	b.n	800b982 <__mcmp+0x2a>
 800b98a:	2001      	movs	r0, #1
 800b98c:	e7f9      	b.n	800b982 <__mcmp+0x2a>
	...

0800b990 <__mdiff>:
 800b990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	4689      	mov	r9, r1
 800b996:	4606      	mov	r6, r0
 800b998:	4611      	mov	r1, r2
 800b99a:	4648      	mov	r0, r9
 800b99c:	4614      	mov	r4, r2
 800b99e:	f7ff ffdb 	bl	800b958 <__mcmp>
 800b9a2:	1e05      	subs	r5, r0, #0
 800b9a4:	d112      	bne.n	800b9cc <__mdiff+0x3c>
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff fd63 	bl	800b474 <_Balloc>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <__mdiff+0x2e>
 800b9b2:	4b3f      	ldr	r3, [pc, #252]	@ (800bab0 <__mdiff+0x120>)
 800b9b4:	f240 2137 	movw	r1, #567	@ 0x237
 800b9b8:	483e      	ldr	r0, [pc, #248]	@ (800bab4 <__mdiff+0x124>)
 800b9ba:	f7fd ffcd 	bl	8009958 <__assert_func>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	b003      	add	sp, #12
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	bfbc      	itt	lt
 800b9ce:	464b      	movlt	r3, r9
 800b9d0:	46a1      	movlt	r9, r4
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9d8:	bfba      	itte	lt
 800b9da:	461c      	movlt	r4, r3
 800b9dc:	2501      	movlt	r5, #1
 800b9de:	2500      	movge	r5, #0
 800b9e0:	f7ff fd48 	bl	800b474 <_Balloc>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	b918      	cbnz	r0, 800b9f0 <__mdiff+0x60>
 800b9e8:	4b31      	ldr	r3, [pc, #196]	@ (800bab0 <__mdiff+0x120>)
 800b9ea:	f240 2145 	movw	r1, #581	@ 0x245
 800b9ee:	e7e3      	b.n	800b9b8 <__mdiff+0x28>
 800b9f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9f4:	6926      	ldr	r6, [r4, #16]
 800b9f6:	60c5      	str	r5, [r0, #12]
 800b9f8:	f109 0310 	add.w	r3, r9, #16
 800b9fc:	f109 0514 	add.w	r5, r9, #20
 800ba00:	f104 0e14 	add.w	lr, r4, #20
 800ba04:	f100 0b14 	add.w	fp, r0, #20
 800ba08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba10:	9301      	str	r3, [sp, #4]
 800ba12:	46d9      	mov	r9, fp
 800ba14:	f04f 0c00 	mov.w	ip, #0
 800ba18:	9b01      	ldr	r3, [sp, #4]
 800ba1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	fa1f f38a 	uxth.w	r3, sl
 800ba28:	4619      	mov	r1, r3
 800ba2a:	b283      	uxth	r3, r0
 800ba2c:	1acb      	subs	r3, r1, r3
 800ba2e:	0c00      	lsrs	r0, r0, #16
 800ba30:	4463      	add	r3, ip
 800ba32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba40:	4576      	cmp	r6, lr
 800ba42:	f849 3b04 	str.w	r3, [r9], #4
 800ba46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba4a:	d8e5      	bhi.n	800ba18 <__mdiff+0x88>
 800ba4c:	1b33      	subs	r3, r6, r4
 800ba4e:	3b15      	subs	r3, #21
 800ba50:	f023 0303 	bic.w	r3, r3, #3
 800ba54:	3415      	adds	r4, #21
 800ba56:	3304      	adds	r3, #4
 800ba58:	42a6      	cmp	r6, r4
 800ba5a:	bf38      	it	cc
 800ba5c:	2304      	movcc	r3, #4
 800ba5e:	441d      	add	r5, r3
 800ba60:	445b      	add	r3, fp
 800ba62:	461e      	mov	r6, r3
 800ba64:	462c      	mov	r4, r5
 800ba66:	4544      	cmp	r4, r8
 800ba68:	d30e      	bcc.n	800ba88 <__mdiff+0xf8>
 800ba6a:	f108 0103 	add.w	r1, r8, #3
 800ba6e:	1b49      	subs	r1, r1, r5
 800ba70:	f021 0103 	bic.w	r1, r1, #3
 800ba74:	3d03      	subs	r5, #3
 800ba76:	45a8      	cmp	r8, r5
 800ba78:	bf38      	it	cc
 800ba7a:	2100      	movcc	r1, #0
 800ba7c:	440b      	add	r3, r1
 800ba7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba82:	b191      	cbz	r1, 800baaa <__mdiff+0x11a>
 800ba84:	6117      	str	r7, [r2, #16]
 800ba86:	e79d      	b.n	800b9c4 <__mdiff+0x34>
 800ba88:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba8c:	46e6      	mov	lr, ip
 800ba8e:	0c08      	lsrs	r0, r1, #16
 800ba90:	fa1c fc81 	uxtah	ip, ip, r1
 800ba94:	4471      	add	r1, lr
 800ba96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba9a:	b289      	uxth	r1, r1
 800ba9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800baa0:	f846 1b04 	str.w	r1, [r6], #4
 800baa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baa8:	e7dd      	b.n	800ba66 <__mdiff+0xd6>
 800baaa:	3f01      	subs	r7, #1
 800baac:	e7e7      	b.n	800ba7e <__mdiff+0xee>
 800baae:	bf00      	nop
 800bab0:	0800c468 	.word	0x0800c468
 800bab4:	0800c479 	.word	0x0800c479

0800bab8 <__d2b>:
 800bab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800babc:	460f      	mov	r7, r1
 800babe:	2101      	movs	r1, #1
 800bac0:	ec59 8b10 	vmov	r8, r9, d0
 800bac4:	4616      	mov	r6, r2
 800bac6:	f7ff fcd5 	bl	800b474 <_Balloc>
 800baca:	4604      	mov	r4, r0
 800bacc:	b930      	cbnz	r0, 800badc <__d2b+0x24>
 800bace:	4602      	mov	r2, r0
 800bad0:	4b23      	ldr	r3, [pc, #140]	@ (800bb60 <__d2b+0xa8>)
 800bad2:	4824      	ldr	r0, [pc, #144]	@ (800bb64 <__d2b+0xac>)
 800bad4:	f240 310f 	movw	r1, #783	@ 0x30f
 800bad8:	f7fd ff3e 	bl	8009958 <__assert_func>
 800badc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bae4:	b10d      	cbz	r5, 800baea <__d2b+0x32>
 800bae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	f1b8 0300 	subs.w	r3, r8, #0
 800baf0:	d023      	beq.n	800bb3a <__d2b+0x82>
 800baf2:	4668      	mov	r0, sp
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	f7ff fd84 	bl	800b602 <__lo0bits>
 800bafa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bafe:	b1d0      	cbz	r0, 800bb36 <__d2b+0x7e>
 800bb00:	f1c0 0320 	rsb	r3, r0, #32
 800bb04:	fa02 f303 	lsl.w	r3, r2, r3
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	40c2      	lsrs	r2, r0
 800bb0c:	6163      	str	r3, [r4, #20]
 800bb0e:	9201      	str	r2, [sp, #4]
 800bb10:	9b01      	ldr	r3, [sp, #4]
 800bb12:	61a3      	str	r3, [r4, #24]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	bf0c      	ite	eq
 800bb18:	2201      	moveq	r2, #1
 800bb1a:	2202      	movne	r2, #2
 800bb1c:	6122      	str	r2, [r4, #16]
 800bb1e:	b1a5      	cbz	r5, 800bb4a <__d2b+0x92>
 800bb20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb24:	4405      	add	r5, r0
 800bb26:	603d      	str	r5, [r7, #0]
 800bb28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb2c:	6030      	str	r0, [r6, #0]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	b003      	add	sp, #12
 800bb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb36:	6161      	str	r1, [r4, #20]
 800bb38:	e7ea      	b.n	800bb10 <__d2b+0x58>
 800bb3a:	a801      	add	r0, sp, #4
 800bb3c:	f7ff fd61 	bl	800b602 <__lo0bits>
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	6163      	str	r3, [r4, #20]
 800bb44:	3020      	adds	r0, #32
 800bb46:	2201      	movs	r2, #1
 800bb48:	e7e8      	b.n	800bb1c <__d2b+0x64>
 800bb4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb52:	6038      	str	r0, [r7, #0]
 800bb54:	6918      	ldr	r0, [r3, #16]
 800bb56:	f7ff fd35 	bl	800b5c4 <__hi0bits>
 800bb5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb5e:	e7e5      	b.n	800bb2c <__d2b+0x74>
 800bb60:	0800c468 	.word	0x0800c468
 800bb64:	0800c479 	.word	0x0800c479

0800bb68 <__sfputc_r>:
 800bb68:	6893      	ldr	r3, [r2, #8]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	b410      	push	{r4}
 800bb70:	6093      	str	r3, [r2, #8]
 800bb72:	da08      	bge.n	800bb86 <__sfputc_r+0x1e>
 800bb74:	6994      	ldr	r4, [r2, #24]
 800bb76:	42a3      	cmp	r3, r4
 800bb78:	db01      	blt.n	800bb7e <__sfputc_r+0x16>
 800bb7a:	290a      	cmp	r1, #10
 800bb7c:	d103      	bne.n	800bb86 <__sfputc_r+0x1e>
 800bb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb82:	f000 b9df 	b.w	800bf44 <__swbuf_r>
 800bb86:	6813      	ldr	r3, [r2, #0]
 800bb88:	1c58      	adds	r0, r3, #1
 800bb8a:	6010      	str	r0, [r2, #0]
 800bb8c:	7019      	strb	r1, [r3, #0]
 800bb8e:	4608      	mov	r0, r1
 800bb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <__sfputs_r>:
 800bb96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb98:	4606      	mov	r6, r0
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	4614      	mov	r4, r2
 800bb9e:	18d5      	adds	r5, r2, r3
 800bba0:	42ac      	cmp	r4, r5
 800bba2:	d101      	bne.n	800bba8 <__sfputs_r+0x12>
 800bba4:	2000      	movs	r0, #0
 800bba6:	e007      	b.n	800bbb8 <__sfputs_r+0x22>
 800bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbac:	463a      	mov	r2, r7
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ffda 	bl	800bb68 <__sfputc_r>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d1f3      	bne.n	800bba0 <__sfputs_r+0xa>
 800bbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbbc <_vfiprintf_r>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	b09d      	sub	sp, #116	@ 0x74
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	4698      	mov	r8, r3
 800bbc8:	4606      	mov	r6, r0
 800bbca:	b118      	cbz	r0, 800bbd4 <_vfiprintf_r+0x18>
 800bbcc:	6a03      	ldr	r3, [r0, #32]
 800bbce:	b90b      	cbnz	r3, 800bbd4 <_vfiprintf_r+0x18>
 800bbd0:	f7fe fc78 	bl	800a4c4 <__sinit>
 800bbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbd6:	07d9      	lsls	r1, r3, #31
 800bbd8:	d405      	bmi.n	800bbe6 <_vfiprintf_r+0x2a>
 800bbda:	89ab      	ldrh	r3, [r5, #12]
 800bbdc:	059a      	lsls	r2, r3, #22
 800bbde:	d402      	bmi.n	800bbe6 <_vfiprintf_r+0x2a>
 800bbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbe2:	f7fe fd9a 	bl	800a71a <__retarget_lock_acquire_recursive>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	071b      	lsls	r3, r3, #28
 800bbea:	d501      	bpl.n	800bbf0 <_vfiprintf_r+0x34>
 800bbec:	692b      	ldr	r3, [r5, #16]
 800bbee:	b99b      	cbnz	r3, 800bc18 <_vfiprintf_r+0x5c>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f000 f9e4 	bl	800bfc0 <__swsetup_r>
 800bbf8:	b170      	cbz	r0, 800bc18 <_vfiprintf_r+0x5c>
 800bbfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbfc:	07dc      	lsls	r4, r3, #31
 800bbfe:	d504      	bpl.n	800bc0a <_vfiprintf_r+0x4e>
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295
 800bc04:	b01d      	add	sp, #116	@ 0x74
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	0598      	lsls	r0, r3, #22
 800bc0e:	d4f7      	bmi.n	800bc00 <_vfiprintf_r+0x44>
 800bc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc12:	f7fe fd83 	bl	800a71c <__retarget_lock_release_recursive>
 800bc16:	e7f3      	b.n	800bc00 <_vfiprintf_r+0x44>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1c:	2320      	movs	r3, #32
 800bc1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc22:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc26:	2330      	movs	r3, #48	@ 0x30
 800bc28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdd8 <_vfiprintf_r+0x21c>
 800bc2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc30:	f04f 0901 	mov.w	r9, #1
 800bc34:	4623      	mov	r3, r4
 800bc36:	469a      	mov	sl, r3
 800bc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc3c:	b10a      	cbz	r2, 800bc42 <_vfiprintf_r+0x86>
 800bc3e:	2a25      	cmp	r2, #37	@ 0x25
 800bc40:	d1f9      	bne.n	800bc36 <_vfiprintf_r+0x7a>
 800bc42:	ebba 0b04 	subs.w	fp, sl, r4
 800bc46:	d00b      	beq.n	800bc60 <_vfiprintf_r+0xa4>
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f7ff ffa1 	bl	800bb96 <__sfputs_r>
 800bc54:	3001      	adds	r0, #1
 800bc56:	f000 80a7 	beq.w	800bda8 <_vfiprintf_r+0x1ec>
 800bc5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc5c:	445a      	add	r2, fp
 800bc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc60:	f89a 3000 	ldrb.w	r3, [sl]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 809f 	beq.w	800bda8 <_vfiprintf_r+0x1ec>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc74:	f10a 0a01 	add.w	sl, sl, #1
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	9307      	str	r3, [sp, #28]
 800bc7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc80:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc82:	4654      	mov	r4, sl
 800bc84:	2205      	movs	r2, #5
 800bc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8a:	4853      	ldr	r0, [pc, #332]	@ (800bdd8 <_vfiprintf_r+0x21c>)
 800bc8c:	f7f4 faa0 	bl	80001d0 <memchr>
 800bc90:	9a04      	ldr	r2, [sp, #16]
 800bc92:	b9d8      	cbnz	r0, 800bccc <_vfiprintf_r+0x110>
 800bc94:	06d1      	lsls	r1, r2, #27
 800bc96:	bf44      	itt	mi
 800bc98:	2320      	movmi	r3, #32
 800bc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc9e:	0713      	lsls	r3, r2, #28
 800bca0:	bf44      	itt	mi
 800bca2:	232b      	movmi	r3, #43	@ 0x2b
 800bca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bca8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcae:	d015      	beq.n	800bcdc <_vfiprintf_r+0x120>
 800bcb0:	9a07      	ldr	r2, [sp, #28]
 800bcb2:	4654      	mov	r4, sl
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f04f 0c0a 	mov.w	ip, #10
 800bcba:	4621      	mov	r1, r4
 800bcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc0:	3b30      	subs	r3, #48	@ 0x30
 800bcc2:	2b09      	cmp	r3, #9
 800bcc4:	d94b      	bls.n	800bd5e <_vfiprintf_r+0x1a2>
 800bcc6:	b1b0      	cbz	r0, 800bcf6 <_vfiprintf_r+0x13a>
 800bcc8:	9207      	str	r2, [sp, #28]
 800bcca:	e014      	b.n	800bcf6 <_vfiprintf_r+0x13a>
 800bccc:	eba0 0308 	sub.w	r3, r0, r8
 800bcd0:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	9304      	str	r3, [sp, #16]
 800bcd8:	46a2      	mov	sl, r4
 800bcda:	e7d2      	b.n	800bc82 <_vfiprintf_r+0xc6>
 800bcdc:	9b03      	ldr	r3, [sp, #12]
 800bcde:	1d19      	adds	r1, r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	9103      	str	r1, [sp, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	bfbb      	ittet	lt
 800bce8:	425b      	neglt	r3, r3
 800bcea:	f042 0202 	orrlt.w	r2, r2, #2
 800bcee:	9307      	strge	r3, [sp, #28]
 800bcf0:	9307      	strlt	r3, [sp, #28]
 800bcf2:	bfb8      	it	lt
 800bcf4:	9204      	strlt	r2, [sp, #16]
 800bcf6:	7823      	ldrb	r3, [r4, #0]
 800bcf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcfa:	d10a      	bne.n	800bd12 <_vfiprintf_r+0x156>
 800bcfc:	7863      	ldrb	r3, [r4, #1]
 800bcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd00:	d132      	bne.n	800bd68 <_vfiprintf_r+0x1ac>
 800bd02:	9b03      	ldr	r3, [sp, #12]
 800bd04:	1d1a      	adds	r2, r3, #4
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	9203      	str	r2, [sp, #12]
 800bd0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd0e:	3402      	adds	r4, #2
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bde8 <_vfiprintf_r+0x22c>
 800bd16:	7821      	ldrb	r1, [r4, #0]
 800bd18:	2203      	movs	r2, #3
 800bd1a:	4650      	mov	r0, sl
 800bd1c:	f7f4 fa58 	bl	80001d0 <memchr>
 800bd20:	b138      	cbz	r0, 800bd32 <_vfiprintf_r+0x176>
 800bd22:	9b04      	ldr	r3, [sp, #16]
 800bd24:	eba0 000a 	sub.w	r0, r0, sl
 800bd28:	2240      	movs	r2, #64	@ 0x40
 800bd2a:	4082      	lsls	r2, r0
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	3401      	adds	r4, #1
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd36:	4829      	ldr	r0, [pc, #164]	@ (800bddc <_vfiprintf_r+0x220>)
 800bd38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd3c:	2206      	movs	r2, #6
 800bd3e:	f7f4 fa47 	bl	80001d0 <memchr>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d03f      	beq.n	800bdc6 <_vfiprintf_r+0x20a>
 800bd46:	4b26      	ldr	r3, [pc, #152]	@ (800bde0 <_vfiprintf_r+0x224>)
 800bd48:	bb1b      	cbnz	r3, 800bd92 <_vfiprintf_r+0x1d6>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	3307      	adds	r3, #7
 800bd4e:	f023 0307 	bic.w	r3, r3, #7
 800bd52:	3308      	adds	r3, #8
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd58:	443b      	add	r3, r7
 800bd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5c:	e76a      	b.n	800bc34 <_vfiprintf_r+0x78>
 800bd5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd62:	460c      	mov	r4, r1
 800bd64:	2001      	movs	r0, #1
 800bd66:	e7a8      	b.n	800bcba <_vfiprintf_r+0xfe>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	3401      	adds	r4, #1
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	f04f 0c0a 	mov.w	ip, #10
 800bd74:	4620      	mov	r0, r4
 800bd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7a:	3a30      	subs	r2, #48	@ 0x30
 800bd7c:	2a09      	cmp	r2, #9
 800bd7e:	d903      	bls.n	800bd88 <_vfiprintf_r+0x1cc>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0c6      	beq.n	800bd12 <_vfiprintf_r+0x156>
 800bd84:	9105      	str	r1, [sp, #20]
 800bd86:	e7c4      	b.n	800bd12 <_vfiprintf_r+0x156>
 800bd88:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e7f0      	b.n	800bd74 <_vfiprintf_r+0x1b8>
 800bd92:	ab03      	add	r3, sp, #12
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	462a      	mov	r2, r5
 800bd98:	4b12      	ldr	r3, [pc, #72]	@ (800bde4 <_vfiprintf_r+0x228>)
 800bd9a:	a904      	add	r1, sp, #16
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f7fd ff4f 	bl	8009c40 <_printf_float>
 800bda2:	4607      	mov	r7, r0
 800bda4:	1c78      	adds	r0, r7, #1
 800bda6:	d1d6      	bne.n	800bd56 <_vfiprintf_r+0x19a>
 800bda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdaa:	07d9      	lsls	r1, r3, #31
 800bdac:	d405      	bmi.n	800bdba <_vfiprintf_r+0x1fe>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	059a      	lsls	r2, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_vfiprintf_r+0x1fe>
 800bdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdb6:	f7fe fcb1 	bl	800a71c <__retarget_lock_release_recursive>
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	065b      	lsls	r3, r3, #25
 800bdbe:	f53f af1f 	bmi.w	800bc00 <_vfiprintf_r+0x44>
 800bdc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdc4:	e71e      	b.n	800bc04 <_vfiprintf_r+0x48>
 800bdc6:	ab03      	add	r3, sp, #12
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	462a      	mov	r2, r5
 800bdcc:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <_vfiprintf_r+0x228>)
 800bdce:	a904      	add	r1, sp, #16
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f7fe f9cd 	bl	800a170 <_printf_i>
 800bdd6:	e7e4      	b.n	800bda2 <_vfiprintf_r+0x1e6>
 800bdd8:	0800c4d2 	.word	0x0800c4d2
 800bddc:	0800c4dc 	.word	0x0800c4dc
 800bde0:	08009c41 	.word	0x08009c41
 800bde4:	0800bb97 	.word	0x0800bb97
 800bde8:	0800c4d8 	.word	0x0800c4d8

0800bdec <__sflush_r>:
 800bdec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	0716      	lsls	r6, r2, #28
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	d454      	bmi.n	800bea6 <__sflush_r+0xba>
 800bdfc:	684b      	ldr	r3, [r1, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dc02      	bgt.n	800be08 <__sflush_r+0x1c>
 800be02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd48      	ble.n	800be9a <__sflush_r+0xae>
 800be08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be0a:	2e00      	cmp	r6, #0
 800be0c:	d045      	beq.n	800be9a <__sflush_r+0xae>
 800be0e:	2300      	movs	r3, #0
 800be10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be14:	682f      	ldr	r7, [r5, #0]
 800be16:	6a21      	ldr	r1, [r4, #32]
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	d030      	beq.n	800be7e <__sflush_r+0x92>
 800be1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	0759      	lsls	r1, r3, #29
 800be22:	d505      	bpl.n	800be30 <__sflush_r+0x44>
 800be24:	6863      	ldr	r3, [r4, #4]
 800be26:	1ad2      	subs	r2, r2, r3
 800be28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be2a:	b10b      	cbz	r3, 800be30 <__sflush_r+0x44>
 800be2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	2300      	movs	r3, #0
 800be32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be34:	6a21      	ldr	r1, [r4, #32]
 800be36:	4628      	mov	r0, r5
 800be38:	47b0      	blx	r6
 800be3a:	1c43      	adds	r3, r0, #1
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	d106      	bne.n	800be4e <__sflush_r+0x62>
 800be40:	6829      	ldr	r1, [r5, #0]
 800be42:	291d      	cmp	r1, #29
 800be44:	d82b      	bhi.n	800be9e <__sflush_r+0xb2>
 800be46:	4a2a      	ldr	r2, [pc, #168]	@ (800bef0 <__sflush_r+0x104>)
 800be48:	40ca      	lsrs	r2, r1
 800be4a:	07d6      	lsls	r6, r2, #31
 800be4c:	d527      	bpl.n	800be9e <__sflush_r+0xb2>
 800be4e:	2200      	movs	r2, #0
 800be50:	6062      	str	r2, [r4, #4]
 800be52:	04d9      	lsls	r1, r3, #19
 800be54:	6922      	ldr	r2, [r4, #16]
 800be56:	6022      	str	r2, [r4, #0]
 800be58:	d504      	bpl.n	800be64 <__sflush_r+0x78>
 800be5a:	1c42      	adds	r2, r0, #1
 800be5c:	d101      	bne.n	800be62 <__sflush_r+0x76>
 800be5e:	682b      	ldr	r3, [r5, #0]
 800be60:	b903      	cbnz	r3, 800be64 <__sflush_r+0x78>
 800be62:	6560      	str	r0, [r4, #84]	@ 0x54
 800be64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be66:	602f      	str	r7, [r5, #0]
 800be68:	b1b9      	cbz	r1, 800be9a <__sflush_r+0xae>
 800be6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be6e:	4299      	cmp	r1, r3
 800be70:	d002      	beq.n	800be78 <__sflush_r+0x8c>
 800be72:	4628      	mov	r0, r5
 800be74:	f7ff fab4 	bl	800b3e0 <_free_r>
 800be78:	2300      	movs	r3, #0
 800be7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800be7c:	e00d      	b.n	800be9a <__sflush_r+0xae>
 800be7e:	2301      	movs	r3, #1
 800be80:	4628      	mov	r0, r5
 800be82:	47b0      	blx	r6
 800be84:	4602      	mov	r2, r0
 800be86:	1c50      	adds	r0, r2, #1
 800be88:	d1c9      	bne.n	800be1e <__sflush_r+0x32>
 800be8a:	682b      	ldr	r3, [r5, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0c6      	beq.n	800be1e <__sflush_r+0x32>
 800be90:	2b1d      	cmp	r3, #29
 800be92:	d001      	beq.n	800be98 <__sflush_r+0xac>
 800be94:	2b16      	cmp	r3, #22
 800be96:	d11e      	bne.n	800bed6 <__sflush_r+0xea>
 800be98:	602f      	str	r7, [r5, #0]
 800be9a:	2000      	movs	r0, #0
 800be9c:	e022      	b.n	800bee4 <__sflush_r+0xf8>
 800be9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bea2:	b21b      	sxth	r3, r3
 800bea4:	e01b      	b.n	800bede <__sflush_r+0xf2>
 800bea6:	690f      	ldr	r7, [r1, #16]
 800bea8:	2f00      	cmp	r7, #0
 800beaa:	d0f6      	beq.n	800be9a <__sflush_r+0xae>
 800beac:	0793      	lsls	r3, r2, #30
 800beae:	680e      	ldr	r6, [r1, #0]
 800beb0:	bf08      	it	eq
 800beb2:	694b      	ldreq	r3, [r1, #20]
 800beb4:	600f      	str	r7, [r1, #0]
 800beb6:	bf18      	it	ne
 800beb8:	2300      	movne	r3, #0
 800beba:	eba6 0807 	sub.w	r8, r6, r7
 800bebe:	608b      	str	r3, [r1, #8]
 800bec0:	f1b8 0f00 	cmp.w	r8, #0
 800bec4:	dde9      	ble.n	800be9a <__sflush_r+0xae>
 800bec6:	6a21      	ldr	r1, [r4, #32]
 800bec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beca:	4643      	mov	r3, r8
 800becc:	463a      	mov	r2, r7
 800bece:	4628      	mov	r0, r5
 800bed0:	47b0      	blx	r6
 800bed2:	2800      	cmp	r0, #0
 800bed4:	dc08      	bgt.n	800bee8 <__sflush_r+0xfc>
 800bed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bede:	81a3      	strh	r3, [r4, #12]
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295
 800bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee8:	4407      	add	r7, r0
 800beea:	eba8 0800 	sub.w	r8, r8, r0
 800beee:	e7e7      	b.n	800bec0 <__sflush_r+0xd4>
 800bef0:	20400001 	.word	0x20400001

0800bef4 <_fflush_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	690b      	ldr	r3, [r1, #16]
 800bef8:	4605      	mov	r5, r0
 800befa:	460c      	mov	r4, r1
 800befc:	b913      	cbnz	r3, 800bf04 <_fflush_r+0x10>
 800befe:	2500      	movs	r5, #0
 800bf00:	4628      	mov	r0, r5
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	b118      	cbz	r0, 800bf0e <_fflush_r+0x1a>
 800bf06:	6a03      	ldr	r3, [r0, #32]
 800bf08:	b90b      	cbnz	r3, 800bf0e <_fflush_r+0x1a>
 800bf0a:	f7fe fadb 	bl	800a4c4 <__sinit>
 800bf0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0f3      	beq.n	800befe <_fflush_r+0xa>
 800bf16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf18:	07d0      	lsls	r0, r2, #31
 800bf1a:	d404      	bmi.n	800bf26 <_fflush_r+0x32>
 800bf1c:	0599      	lsls	r1, r3, #22
 800bf1e:	d402      	bmi.n	800bf26 <_fflush_r+0x32>
 800bf20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf22:	f7fe fbfa 	bl	800a71a <__retarget_lock_acquire_recursive>
 800bf26:	4628      	mov	r0, r5
 800bf28:	4621      	mov	r1, r4
 800bf2a:	f7ff ff5f 	bl	800bdec <__sflush_r>
 800bf2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf30:	07da      	lsls	r2, r3, #31
 800bf32:	4605      	mov	r5, r0
 800bf34:	d4e4      	bmi.n	800bf00 <_fflush_r+0xc>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	059b      	lsls	r3, r3, #22
 800bf3a:	d4e1      	bmi.n	800bf00 <_fflush_r+0xc>
 800bf3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf3e:	f7fe fbed 	bl	800a71c <__retarget_lock_release_recursive>
 800bf42:	e7dd      	b.n	800bf00 <_fflush_r+0xc>

0800bf44 <__swbuf_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	460e      	mov	r6, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b118      	cbz	r0, 800bf56 <__swbuf_r+0x12>
 800bf4e:	6a03      	ldr	r3, [r0, #32]
 800bf50:	b90b      	cbnz	r3, 800bf56 <__swbuf_r+0x12>
 800bf52:	f7fe fab7 	bl	800a4c4 <__sinit>
 800bf56:	69a3      	ldr	r3, [r4, #24]
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	071a      	lsls	r2, r3, #28
 800bf5e:	d501      	bpl.n	800bf64 <__swbuf_r+0x20>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b943      	cbnz	r3, 800bf76 <__swbuf_r+0x32>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f82a 	bl	800bfc0 <__swsetup_r>
 800bf6c:	b118      	cbz	r0, 800bf76 <__swbuf_r+0x32>
 800bf6e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf72:	4638      	mov	r0, r7
 800bf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	1a98      	subs	r0, r3, r2
 800bf7c:	6963      	ldr	r3, [r4, #20]
 800bf7e:	b2f6      	uxtb	r6, r6
 800bf80:	4283      	cmp	r3, r0
 800bf82:	4637      	mov	r7, r6
 800bf84:	dc05      	bgt.n	800bf92 <__swbuf_r+0x4e>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f7ff ffb3 	bl	800bef4 <_fflush_r>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d1ed      	bne.n	800bf6e <__swbuf_r+0x2a>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	60a3      	str	r3, [r4, #8]
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	701e      	strb	r6, [r3, #0]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d004      	beq.n	800bfb2 <__swbuf_r+0x6e>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	07db      	lsls	r3, r3, #31
 800bfac:	d5e1      	bpl.n	800bf72 <__swbuf_r+0x2e>
 800bfae:	2e0a      	cmp	r6, #10
 800bfb0:	d1df      	bne.n	800bf72 <__swbuf_r+0x2e>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f7ff ff9d 	bl	800bef4 <_fflush_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0d9      	beq.n	800bf72 <__swbuf_r+0x2e>
 800bfbe:	e7d6      	b.n	800bf6e <__swbuf_r+0x2a>

0800bfc0 <__swsetup_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4b29      	ldr	r3, [pc, #164]	@ (800c068 <__swsetup_r+0xa8>)
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	460c      	mov	r4, r1
 800bfca:	b118      	cbz	r0, 800bfd4 <__swsetup_r+0x14>
 800bfcc:	6a03      	ldr	r3, [r0, #32]
 800bfce:	b90b      	cbnz	r3, 800bfd4 <__swsetup_r+0x14>
 800bfd0:	f7fe fa78 	bl	800a4c4 <__sinit>
 800bfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd8:	0719      	lsls	r1, r3, #28
 800bfda:	d422      	bmi.n	800c022 <__swsetup_r+0x62>
 800bfdc:	06da      	lsls	r2, r3, #27
 800bfde:	d407      	bmi.n	800bff0 <__swsetup_r+0x30>
 800bfe0:	2209      	movs	r2, #9
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	f04f 30ff 	mov.w	r0, #4294967295
 800bfee:	e033      	b.n	800c058 <__swsetup_r+0x98>
 800bff0:	0758      	lsls	r0, r3, #29
 800bff2:	d512      	bpl.n	800c01a <__swsetup_r+0x5a>
 800bff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bff6:	b141      	cbz	r1, 800c00a <__swsetup_r+0x4a>
 800bff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <__swsetup_r+0x46>
 800c000:	4628      	mov	r0, r5
 800c002:	f7ff f9ed 	bl	800b3e0 <_free_r>
 800c006:	2300      	movs	r3, #0
 800c008:	6363      	str	r3, [r4, #52]	@ 0x34
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f043 0308 	orr.w	r3, r3, #8
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	b94b      	cbnz	r3, 800c03a <__swsetup_r+0x7a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c030:	d003      	beq.n	800c03a <__swsetup_r+0x7a>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f8c4 	bl	800c1c2 <__smakebuf_r>
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	f013 0201 	ands.w	r2, r3, #1
 800c042:	d00a      	beq.n	800c05a <__swsetup_r+0x9a>
 800c044:	2200      	movs	r2, #0
 800c046:	60a2      	str	r2, [r4, #8]
 800c048:	6962      	ldr	r2, [r4, #20]
 800c04a:	4252      	negs	r2, r2
 800c04c:	61a2      	str	r2, [r4, #24]
 800c04e:	6922      	ldr	r2, [r4, #16]
 800c050:	b942      	cbnz	r2, 800c064 <__swsetup_r+0xa4>
 800c052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c056:	d1c5      	bne.n	800bfe4 <__swsetup_r+0x24>
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	0799      	lsls	r1, r3, #30
 800c05c:	bf58      	it	pl
 800c05e:	6962      	ldrpl	r2, [r4, #20]
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	e7f4      	b.n	800c04e <__swsetup_r+0x8e>
 800c064:	2000      	movs	r0, #0
 800c066:	e7f7      	b.n	800c058 <__swsetup_r+0x98>
 800c068:	20000108 	.word	0x20000108

0800c06c <_raise_r>:
 800c06c:	291f      	cmp	r1, #31
 800c06e:	b538      	push	{r3, r4, r5, lr}
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	d904      	bls.n	800c080 <_raise_r+0x14>
 800c076:	2316      	movs	r3, #22
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	f04f 30ff 	mov.w	r0, #4294967295
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c082:	b112      	cbz	r2, 800c08a <_raise_r+0x1e>
 800c084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c088:	b94b      	cbnz	r3, 800c09e <_raise_r+0x32>
 800c08a:	4628      	mov	r0, r5
 800c08c:	f000 f830 	bl	800c0f0 <_getpid_r>
 800c090:	4622      	mov	r2, r4
 800c092:	4601      	mov	r1, r0
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09a:	f000 b817 	b.w	800c0cc <_kill_r>
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d00a      	beq.n	800c0b8 <_raise_r+0x4c>
 800c0a2:	1c59      	adds	r1, r3, #1
 800c0a4:	d103      	bne.n	800c0ae <_raise_r+0x42>
 800c0a6:	2316      	movs	r3, #22
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	2001      	movs	r0, #1
 800c0ac:	e7e7      	b.n	800c07e <_raise_r+0x12>
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4798      	blx	r3
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e7e0      	b.n	800c07e <_raise_r+0x12>

0800c0bc <raise>:
 800c0bc:	4b02      	ldr	r3, [pc, #8]	@ (800c0c8 <raise+0xc>)
 800c0be:	4601      	mov	r1, r0
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	f7ff bfd3 	b.w	800c06c <_raise_r>
 800c0c6:	bf00      	nop
 800c0c8:	20000108 	.word	0x20000108

0800c0cc <_kill_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	@ (800c0ec <_kill_r+0x20>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f7f5 ffd5 	bl	8002088 <_kill>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <_kill_r+0x1c>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b103      	cbz	r3, 800c0e8 <_kill_r+0x1c>
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20002040 	.word	0x20002040

0800c0f0 <_getpid_r>:
 800c0f0:	f7f5 bfc2 	b.w	8002078 <_getpid>

0800c0f4 <memcpy>:
 800c0f4:	440a      	add	r2, r1
 800c0f6:	4291      	cmp	r1, r2
 800c0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fc:	d100      	bne.n	800c100 <memcpy+0xc>
 800c0fe:	4770      	bx	lr
 800c100:	b510      	push	{r4, lr}
 800c102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c10a:	4291      	cmp	r1, r2
 800c10c:	d1f9      	bne.n	800c102 <memcpy+0xe>
 800c10e:	bd10      	pop	{r4, pc}

0800c110 <_calloc_r>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	fba1 5402 	umull	r5, r4, r1, r2
 800c116:	b934      	cbnz	r4, 800c126 <_calloc_r+0x16>
 800c118:	4629      	mov	r1, r5
 800c11a:	f7fd fc65 	bl	80099e8 <_malloc_r>
 800c11e:	4606      	mov	r6, r0
 800c120:	b928      	cbnz	r0, 800c12e <_calloc_r+0x1e>
 800c122:	4630      	mov	r0, r6
 800c124:	bd70      	pop	{r4, r5, r6, pc}
 800c126:	220c      	movs	r2, #12
 800c128:	6002      	str	r2, [r0, #0]
 800c12a:	2600      	movs	r6, #0
 800c12c:	e7f9      	b.n	800c122 <_calloc_r+0x12>
 800c12e:	462a      	mov	r2, r5
 800c130:	4621      	mov	r1, r4
 800c132:	f7fe fa64 	bl	800a5fe <memset>
 800c136:	e7f4      	b.n	800c122 <_calloc_r+0x12>

0800c138 <__ascii_mbtowc>:
 800c138:	b082      	sub	sp, #8
 800c13a:	b901      	cbnz	r1, 800c13e <__ascii_mbtowc+0x6>
 800c13c:	a901      	add	r1, sp, #4
 800c13e:	b142      	cbz	r2, 800c152 <__ascii_mbtowc+0x1a>
 800c140:	b14b      	cbz	r3, 800c156 <__ascii_mbtowc+0x1e>
 800c142:	7813      	ldrb	r3, [r2, #0]
 800c144:	600b      	str	r3, [r1, #0]
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	1e10      	subs	r0, r2, #0
 800c14a:	bf18      	it	ne
 800c14c:	2001      	movne	r0, #1
 800c14e:	b002      	add	sp, #8
 800c150:	4770      	bx	lr
 800c152:	4610      	mov	r0, r2
 800c154:	e7fb      	b.n	800c14e <__ascii_mbtowc+0x16>
 800c156:	f06f 0001 	mvn.w	r0, #1
 800c15a:	e7f8      	b.n	800c14e <__ascii_mbtowc+0x16>

0800c15c <__ascii_wctomb>:
 800c15c:	4603      	mov	r3, r0
 800c15e:	4608      	mov	r0, r1
 800c160:	b141      	cbz	r1, 800c174 <__ascii_wctomb+0x18>
 800c162:	2aff      	cmp	r2, #255	@ 0xff
 800c164:	d904      	bls.n	800c170 <__ascii_wctomb+0x14>
 800c166:	228a      	movs	r2, #138	@ 0x8a
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	4770      	bx	lr
 800c170:	700a      	strb	r2, [r1, #0]
 800c172:	2001      	movs	r0, #1
 800c174:	4770      	bx	lr

0800c176 <__swhatbuf_r>:
 800c176:	b570      	push	{r4, r5, r6, lr}
 800c178:	460c      	mov	r4, r1
 800c17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17e:	2900      	cmp	r1, #0
 800c180:	b096      	sub	sp, #88	@ 0x58
 800c182:	4615      	mov	r5, r2
 800c184:	461e      	mov	r6, r3
 800c186:	da0d      	bge.n	800c1a4 <__swhatbuf_r+0x2e>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c18e:	f04f 0100 	mov.w	r1, #0
 800c192:	bf14      	ite	ne
 800c194:	2340      	movne	r3, #64	@ 0x40
 800c196:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c19a:	2000      	movs	r0, #0
 800c19c:	6031      	str	r1, [r6, #0]
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	b016      	add	sp, #88	@ 0x58
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	466a      	mov	r2, sp
 800c1a6:	f000 f849 	bl	800c23c <_fstat_r>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	dbec      	blt.n	800c188 <__swhatbuf_r+0x12>
 800c1ae:	9901      	ldr	r1, [sp, #4]
 800c1b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1b8:	4259      	negs	r1, r3
 800c1ba:	4159      	adcs	r1, r3
 800c1bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1c0:	e7eb      	b.n	800c19a <__swhatbuf_r+0x24>

0800c1c2 <__smakebuf_r>:
 800c1c2:	898b      	ldrh	r3, [r1, #12]
 800c1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c6:	079d      	lsls	r5, r3, #30
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	d507      	bpl.n	800c1de <__smakebuf_r+0x1c>
 800c1ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	6123      	str	r3, [r4, #16]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6163      	str	r3, [r4, #20]
 800c1da:	b003      	add	sp, #12
 800c1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1de:	ab01      	add	r3, sp, #4
 800c1e0:	466a      	mov	r2, sp
 800c1e2:	f7ff ffc8 	bl	800c176 <__swhatbuf_r>
 800c1e6:	9f00      	ldr	r7, [sp, #0]
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7fd fbfb 	bl	80099e8 <_malloc_r>
 800c1f2:	b948      	cbnz	r0, 800c208 <__smakebuf_r+0x46>
 800c1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d4ee      	bmi.n	800c1da <__smakebuf_r+0x18>
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	f043 0302 	orr.w	r3, r3, #2
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	e7e2      	b.n	800c1ce <__smakebuf_r+0xc>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	6020      	str	r0, [r4, #0]
 800c20c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	9b01      	ldr	r3, [sp, #4]
 800c214:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c218:	b15b      	cbz	r3, 800c232 <__smakebuf_r+0x70>
 800c21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c21e:	4630      	mov	r0, r6
 800c220:	f000 f81e 	bl	800c260 <_isatty_r>
 800c224:	b128      	cbz	r0, 800c232 <__smakebuf_r+0x70>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f023 0303 	bic.w	r3, r3, #3
 800c22c:	f043 0301 	orr.w	r3, r3, #1
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	431d      	orrs	r5, r3
 800c236:	81a5      	strh	r5, [r4, #12]
 800c238:	e7cf      	b.n	800c1da <__smakebuf_r+0x18>
	...

0800c23c <_fstat_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	@ (800c25c <_fstat_r+0x20>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	4611      	mov	r1, r2
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	f7f5 ff61 	bl	8002110 <_fstat>
 800c24e:	1c43      	adds	r3, r0, #1
 800c250:	d102      	bne.n	800c258 <_fstat_r+0x1c>
 800c252:	682b      	ldr	r3, [r5, #0]
 800c254:	b103      	cbz	r3, 800c258 <_fstat_r+0x1c>
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	20002040 	.word	0x20002040

0800c260 <_isatty_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d06      	ldr	r5, [pc, #24]	@ (800c27c <_isatty_r+0x1c>)
 800c264:	2300      	movs	r3, #0
 800c266:	4604      	mov	r4, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	602b      	str	r3, [r5, #0]
 800c26c:	f7f5 ff60 	bl	8002130 <_isatty>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_isatty_r+0x1a>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_isatty_r+0x1a>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20002040 	.word	0x20002040

0800c280 <_init>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr

0800c28c <_fini>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	bf00      	nop
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr
