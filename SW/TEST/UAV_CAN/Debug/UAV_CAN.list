
UAV_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a38  08009a38  0000b14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a38  08009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a40  08009a40  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a44  08009a44  0000aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08009a48  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001e54  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fa0  20001fa0  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140a5  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d5  00000000  00000000  0001f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  000226f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcf  00000000  00000000  00023698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002384d  00000000  00000000  00024267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016157  00000000  00000000  00047ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9e06  00000000  00000000  0005dc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127a11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004500  00000000  00000000  00127a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0012bf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009974 	.word	0x08009974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009974 	.word	0x08009974

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b09b      	sub	sp, #108	@ 0x6c
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc81 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f881 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9b9 	bl	8000920 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005ae:	f008 f827 	bl	8008600 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80005b2:	f000 f8e5 	bl	8000780 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005b6:	f000 f943 	bl	8000840 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f987 	bl	80008cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80005be:	4833      	ldr	r0, [pc, #204]	@ (800068c <main+0xf0>)
 80005c0:	f000 fee4 	bl	800138c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80005c4:	4832      	ldr	r0, [pc, #200]	@ (8000690 <main+0xf4>)
 80005c6:	f000 fee1 	bl	800138c <HAL_CAN_Start>

  // ATA6561 CAN Chip, Normal mode
  HAL_GPIO_WritePin(CAN1_STBY_GPIO_Port, CAN1_STBY_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2110      	movs	r1, #16
 80005ce:	4831      	ldr	r0, [pc, #196]	@ (8000694 <main+0xf8>)
 80005d0:	f001 fedc 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN2_STBY_GPIO_Port, CAN2_STBY_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	482e      	ldr	r0, [pc, #184]	@ (8000694 <main+0xf8>)
 80005da:	f001 fed7 	bl	800238c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // HAL_GPIO_WritePin(CAN1_STBY_GPIO_Port, CAN1_STBY_Pin, 1);

	  uint8_t txData[8] = {0x44, 0x33, 0x22, 0x11, 0x55, 0x66, 0x77, 0x88};
 80005de:	4a2e      	ldr	r2, [pc, #184]	@ (8000698 <main+0xfc>)
 80005e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e8:	e883 0003 	stmia.w	r3, {r0, r1}

	  /* CAN Tx Header 설정 */
	  txHeader.StdId = 0x102;                 // Standard Identifier, 0 ~ 0x7FF
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <main+0x100>)
 80005ee:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80005f2:	601a      	str	r2, [r3, #0]
	  txHeader.RTR = CAN_RTR_DATA;            // 전송하는 메세지의 프레임 타입, DATA or REMOTE
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <main+0x100>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	  txHeader.IDE = CAN_ID_STD;              // 전송하는 메세지의 식별자 타입, STD or EXT
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <main+0x100>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
	  txHeader.DLC = 8;                       // 송신 프레임 길이, 0 ~ 8 byte
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <main+0x100>)
 8000602:	2208      	movs	r2, #8
 8000604:	611a      	str	r2, [r3, #16]

	  uint32_t txMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000606:	4821      	ldr	r0, [pc, #132]	@ (800068c <main+0xf0>)
 8000608:	f000 ffd4 	bl	80015b4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800060c:	4603      	mov	r3, r0
 800060e:	653b      	str	r3, [r7, #80]	@ 0x50
	  HAL_CAN_AddTxMessage(&hcan1, &txHeader, &txData[0], &txMailbox);
 8000610:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000614:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000618:	4920      	ldr	r1, [pc, #128]	@ (800069c <main+0x100>)
 800061a:	481c      	ldr	r0, [pc, #112]	@ (800068c <main+0xf0>)
 800061c:	f000 fefa 	bl	8001414 <HAL_CAN_AddTxMessage>
	  txMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8000620:	481b      	ldr	r0, [pc, #108]	@ (8000690 <main+0xf4>)
 8000622:	f000 ffc7 	bl	80015b4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000626:	4603      	mov	r3, r0
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
	  HAL_CAN_AddTxMessage(&hcan2, &txHeader, &txData[0], &txMailbox);
 800062a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800062e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000632:	491a      	ldr	r1, [pc, #104]	@ (800069c <main+0x100>)
 8000634:	4816      	ldr	r0, [pc, #88]	@ (8000690 <main+0xf4>)
 8000636:	f000 feed 	bl	8001414 <HAL_CAN_AddTxMessage>

	  if (can2_rx_flag)
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <main+0x104>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01f      	beq.n	8000682 <main+0xe6>
	  {
		  can2_rx_flag = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <main+0x104>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]

		  uint8_t Msg[80];
		  uint8_t len;
		  len = sprintf((char*)(&Msg[0]), "%x %x %x %x\n\r", rxData[0], rxData[1], rxData[2], rxData[3]);
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <main+0x108>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <main+0x108>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	461c      	mov	r4, r3
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <main+0x108>)
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	461a      	mov	r2, r3
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <main+0x108>)
 800065c:	78db      	ldrb	r3, [r3, #3]
 800065e:	4638      	mov	r0, r7
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	4623      	mov	r3, r4
 8000666:	460a      	mov	r2, r1
 8000668:	490f      	ldr	r1, [pc, #60]	@ (80006a8 <main+0x10c>)
 800066a:	f008 fce3 	bl	8009034 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		  CDC_Transmit_FS(Msg, len);
 8000674:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000678:	463b      	mov	r3, r7
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f008 f87d 	bl	800877c <CDC_Transmit_FS>
	  }
	  HAL_Delay(100);
 8000682:	2064      	movs	r0, #100	@ 0x64
 8000684:	f000 fc82 	bl	8000f8c <HAL_Delay>
  {
 8000688:	e7a9      	b.n	80005de <main+0x42>
 800068a:	bf00      	nop
 800068c:	20000168 	.word	0x20000168
 8000690:	20000190 	.word	0x20000190
 8000694:	40020800 	.word	0x40020800
 8000698:	0800999c 	.word	0x0800999c
 800069c:	20000204 	.word	0x20000204
 80006a0:	20000200 	.word	0x20000200
 80006a4:	20000260 	.word	0x20000260
 80006a8:	0800998c 	.word	0x0800998c

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	@ 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fcdc 	bl	8009078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000720:	23a8      	movs	r3, #168	@ 0xa8
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f003 f897 	bl	8003864 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800073c:	f000 f9aa 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2105      	movs	r1, #5
 800075e:	4618      	mov	r0, r3
 8000760:	f003 faf8 	bl	8003d54 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f993 	bl	8000a94 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <MX_CAN1_Init+0xb4>)
 8000786:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <MX_CAN1_Init+0xb8>)
 8000788:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_CAN1_Init+0xb4>)
 800078c:	2215      	movs	r2, #21
 800078e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <MX_CAN1_Init+0xb4>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_CAN1_Init+0xb4>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <MX_CAN1_Init+0xb4>)
 800079e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 80007a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007d0:	4818      	ldr	r0, [pc, #96]	@ (8000834 <MX_CAN1_Init+0xb4>)
 80007d2:	f000 fbff 	bl	8000fd4 <HAL_CAN_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f95a 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* CAN Filter 설정 */
  sFilterConfig.FilterMaskIdHigh = 0x07F3 << 5;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_CAN1_Init+0xbc>)
 80007e2:	f64f 6260 	movw	r2, #65120	@ 0xfe60
 80007e6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterIdHigh = 0x106 << 5;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_CAN1_Init+0xbc>)
 80007ea:	f44f 5203 	mov.w	r2, #8384	@ 0x20c0
 80007ee:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterMaskIdLow = 0x07F3 << 5;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_CAN1_Init+0xbc>)
 80007f2:	f64f 6260 	movw	r2, #65120	@ 0xfe60
 80007f6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterIdLow = 0x106 << 5;
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_CAN1_Init+0xbc>)
 80007fa:	f44f 5203 	mov.w	r2, #8384	@ 0x20c0
 80007fe:	605a      	str	r2, [r3, #4]

  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_CAN1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_CAN1_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_CAN1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterBank = 0;						// 필터쌍의 갯수
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_CAN1_Init+0xbc>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterActivation = ENABLE;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_CAN1_Init+0xbc>)
 800081a:	2201      	movs	r2, #1
 800081c:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800081e:	4907      	ldr	r1, [pc, #28]	@ (800083c <MX_CAN1_Init+0xbc>)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_CAN1_Init+0xb4>)
 8000822:	f000 fcd3 	bl	80011cc <HAL_CAN_ConfigFilter>

  /* CAN 인터럽트 설정 */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING );
 8000826:	2102      	movs	r1, #2
 8000828:	4802      	ldr	r0, [pc, #8]	@ (8000834 <MX_CAN1_Init+0xb4>)
 800082a:	f001 f81a 	bl	8001862 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000168 	.word	0x20000168
 8000838:	40006400 	.word	0x40006400
 800083c:	20000238 	.word	0x20000238

08000840 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000846:	4a1f      	ldr	r2, [pc, #124]	@ (80008c4 <MX_CAN2_Init+0x84>)
 8000848:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_CAN2_Init+0x80>)
 800084c:	2215      	movs	r2, #21
 800084e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_CAN2_Init+0x80>)
 800085e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000862:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000866:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800086a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_CAN2_Init+0x80>)
 800086e:	2200      	movs	r2, #0
 8000870:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000874:	2200      	movs	r2, #0
 8000876:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_CAN2_Init+0x80>)
 800087a:	2200      	movs	r2, #0
 800087c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000880:	2200      	movs	r2, #0
 8000882:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000886:	2200      	movs	r2, #0
 8000888:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_CAN2_Init+0x80>)
 800088c:	2200      	movs	r2, #0
 800088e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000890:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <MX_CAN2_Init+0x80>)
 8000892:	f000 fb9f 	bl	8000fd4 <HAL_CAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f8fa 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  sFilterConfig.FilterBank = 14;						// 필터 번호
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_CAN2_Init+0x88>)
 80008a2:	220e      	movs	r2, #14
 80008a4:	615a      	str	r2, [r3, #20]
  sFilterConfig.SlaveStartFilterBank = 14;              // CAN2의 FilterBank시작 위치, CAN2를 사용한다면 FilterBank를 SlaveStartFilterBank보다 크게 설정해야 함.
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_CAN2_Init+0x88>)
 80008a8:	220e      	movs	r2, #14
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 80008ac:	4906      	ldr	r1, [pc, #24]	@ (80008c8 <MX_CAN2_Init+0x88>)
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_CAN2_Init+0x80>)
 80008b0:	f000 fc8c 	bl	80011cc <HAL_CAN_ConfigFilter>
  // CAN 인터럽트 설정
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008b4:	2102      	movs	r1, #2
 80008b6:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <MX_CAN2_Init+0x80>)
 80008b8:	f000 ffd3 	bl	8001862 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000190 	.word	0x20000190
 80008c4:	40006800 	.word	0x40006800
 80008c8:	20000238 	.word	0x20000238

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008fc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 8000906:	f003 fc43 	bl	8004190 <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000910:	f000 f8c0 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200001b8 	.word	0x200001b8
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a36      	ldr	r2, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a28      	ldr	r2, [pc, #160]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a21      	ldr	r2, [pc, #132]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN1_STBY_Pin|CAN2_STBY_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2130      	movs	r1, #48	@ 0x30
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0xfc>)
 80009c8:	f001 fce0 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	4813      	ldr	r0, [pc, #76]	@ (8000a20 <MX_GPIO_Init+0x100>)
 80009d2:	f001 fcdb 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_STBY_Pin CAN2_STBY_Pin */
  GPIO_InitStruct.Pin = CAN1_STBY_Pin|CAN2_STBY_Pin;
 80009d6:	2330      	movs	r3, #48	@ 0x30
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <MX_GPIO_Init+0xfc>)
 80009ee:	f001 fb31 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_GPIO_Init+0x100>)
 8000a0a:	f001 fb23 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020400 	.word	0x40020400

08000a24 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10b      	bne.n	8000a4e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	{

		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, &rxData[0]) == HAL_OK)
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000a3e:	f000 fdee 	bl	800161e <HAL_CAN_GetRxMessage>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			can2_rx_flag = 1;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(hcan->Instance == CAN2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d10b      	bne.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
	{

		if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, &rxData[0]) == HAL_OK)
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000a60:	f000 fddd 	bl	800161e <HAL_CAN_GetRxMessage>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		{
			can2_rx_flag = 1;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40006400 	.word	0x40006400
 8000a7c:	20000260 	.word	0x20000260
 8000a80:	2000021c 	.word	0x2000021c
 8000a84:	20000168 	.word	0x20000168
 8000a88:	20000200 	.word	0x20000200
 8000a8c:	40006800 	.word	0x40006800
 8000a90:	20000190 	.word	0x20000190

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8000c48 <HAL_CAN_MspInit+0x158>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d145      	bne.n	8000b9e <HAL_CAN_MspInit+0xae>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b12:	4b4e      	ldr	r3, [pc, #312]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a4c      	ldr	r2, [pc, #304]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000b1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10d      	bne.n	8000b40 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	4b49      	ldr	r3, [pc, #292]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a48      	ldr	r2, [pc, #288]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b46      	ldr	r3, [pc, #280]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a41      	ldr	r2, [pc, #260]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b3f      	ldr	r3, [pc, #252]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4837      	ldr	r0, [pc, #220]	@ (8000c54 <HAL_CAN_MspInit+0x164>)
 8000b78:	f001 fa6c 	bl	8002054 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2013      	movs	r0, #19
 8000b82:	f001 f99e 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b86:	2013      	movs	r0, #19
 8000b88:	f001 f9b7 	bl	8001efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2014      	movs	r0, #20
 8000b92:	f001 f996 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b96:	2014      	movs	r0, #20
 8000b98:	f001 f9af 	bl	8001efa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b9c:	e050      	b.n	8000c40 <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c58 <HAL_CAN_MspInit+0x168>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d14b      	bne.n	8000c40 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a20      	ldr	r2, [pc, #128]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000bcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bce:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <HAL_CAN_MspInit+0x15c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10d      	bne.n	8000bf2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a1c      	ldr	r2, [pc, #112]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_CAN_MspInit+0x160>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000c0e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c20:	2309      	movs	r3, #9
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_CAN_MspInit+0x16c>)
 8000c2c:	f001 fa12 	bl	8002054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2040      	movs	r0, #64	@ 0x40
 8000c36:	f001 f944 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000c3a:	2040      	movs	r0, #64	@ 0x40
 8000c3c:	f001 f95d 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3730      	adds	r7, #48	@ 0x30
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40006400 	.word	0x40006400
 8000c4c:	20000268 	.word	0x20000268
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40006800 	.word	0x40006800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_UART_MspInit+0x94>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d133      	bne.n	8000cea <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_UART_MspInit+0x98>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cba:	2378      	movs	r3, #120	@ 0x78
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <HAL_UART_MspInit+0x9c>)
 8000cd6:	f001 f9bd 	bl	8002054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2026      	movs	r0, #38	@ 0x26
 8000ce0:	f001 f8ef 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce4:	2026      	movs	r0, #38	@ 0x26
 8000ce6:	f001 f908 	bl	8001efa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	@ 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 f8f9 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <CAN1_TX_IRQHandler+0x10>)
 8000d66:	f000 fda2 	bl	80018ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000168 	.word	0x20000168

08000d74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <CAN1_RX0_IRQHandler+0x10>)
 8000d7a:	f000 fd98 	bl	80018ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000168 	.word	0x20000168

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f003 fa4f 	bl	8004230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <CAN2_RX0_IRQHandler+0x10>)
 8000da2:	f000 fd84 	bl	80018ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000190 	.word	0x20000190

08000db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <OTG_FS_IRQHandler+0x10>)
 8000db6:	f001 fc46 	bl	8002646 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001754 	.word	0x20001754

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f008 f948 	bl	8009088 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	2000026c 	.word	0x2000026c
 8000e2c:	20001fa0 	.word	0x20001fa0

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f008 f907 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb89 	bl	800059c <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000e98:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 8000e9c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ea0:	20001fa0 	.word	0x20001fa0

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 ffeb 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fde0 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f803 	bl	8001f16 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 ffcb 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000270 	.word	0x20000270

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000270 	.word	0x20000270

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0ed      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fd7c 	bl	8000af0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001008:	f7ff ffb4 	bl	8000f74 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100e:	e012      	b.n	8001036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001010:	f7ff ffb0 	bl	8000f74 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d90b      	bls.n	8001036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2205      	movs	r2, #5
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0c5      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0e5      	beq.n	8001010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0202 	bic.w	r2, r2, #2
 8001052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff ff8e 	bl	8000f74 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105a:	e012      	b.n	8001082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105c:	f7ff ff8a 	bl	8000f74 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d90b      	bls.n	8001082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2205      	movs	r2, #5
 800107a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e09f      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e5      	bne.n	800105c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d108      	bne.n	80010aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e5b      	ldrb	r3, [r3, #25]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d108      	bne.n	80010d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e9b      	ldrb	r3, [r3, #26]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0220 	bic.w	r2, r2, #32
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7edb      	ldrb	r3, [r3, #27]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0210 	orr.w	r2, r2, #16
 8001136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0208 	bic.w	r2, r2, #8
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f5b      	ldrb	r3, [r3, #29]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0204 	orr.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	ea42 0103 	orr.w	r1, r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011e4:	7cfb      	ldrb	r3, [r7, #19]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_ConfigFilter+0x26>
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	f040 80be 	bne.w	800136e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011f2:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <HAL_CAN_ConfigFilter+0x1bc>)
 80011f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2201      	movs	r2, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d123      	bne.n	800129c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001276:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3248      	adds	r2, #72	@ 0x48
 800127c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001290:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001292:	6979      	ldr	r1, [r7, #20]
 8001294:	3348      	adds	r3, #72	@ 0x48
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d122      	bne.n	80012ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3248      	adds	r2, #72	@ 0x48
 80012ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e0:	6979      	ldr	r1, [r7, #20]
 80012e2:	3348      	adds	r3, #72	@ 0x48
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001304:	e007      	b.n	8001316 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	401a      	ands	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001330:	e007      	b.n	8001342 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001360:	f023 0201 	bic.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40006400 	.word	0x40006400

0800138c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d12e      	bne.n	80013fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fddc 	bl	8000f74 <HAL_GetTick>
 80013bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013be:	e012      	b.n	80013e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c0:	f7ff fdd8 	bl	8000f74 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d90b      	bls.n	80013e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e012      	b.n	800140c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e5      	bne.n	80013c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e006      	b.n	800140c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d003      	beq.n	8001440 <HAL_CAN_AddTxMessage+0x2c>
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	2b02      	cmp	r3, #2
 800143c:	f040 80ad 	bne.w	800159a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8095 	beq.w	800158a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	0e1b      	lsrs	r3, r3, #24
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800146a:	2201      	movs	r2, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10d      	bne.n	8001498 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001486:	68f9      	ldr	r1, [r7, #12]
 8001488:	6809      	ldr	r1, [r1, #0]
 800148a:	431a      	orrs	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3318      	adds	r3, #24
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	440b      	add	r3, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e00f      	b.n	80014b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3318      	adds	r3, #24
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	440b      	add	r3, r1
 80014b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3318      	adds	r3, #24
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	7d1b      	ldrb	r3, [r3, #20]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d111      	bne.n	80014f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4413      	add	r3, r2
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	6811      	ldr	r1, [r2, #0]
 80014e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3318      	adds	r3, #24
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	440b      	add	r3, r1
 80014f4:	3304      	adds	r3, #4
 80014f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3307      	adds	r3, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	061a      	lsls	r2, r3, #24
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3306      	adds	r3, #6
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	041b      	lsls	r3, r3, #16
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3305      	adds	r3, #5
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	4313      	orrs	r3, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	3204      	adds	r2, #4
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	4610      	mov	r0, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	6811      	ldr	r1, [r2, #0]
 8001520:	ea43 0200 	orr.w	r2, r3, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800152e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3303      	adds	r3, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	061a      	lsls	r2, r3, #24
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	4313      	orrs	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	4610      	mov	r0, r2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	ea43 0200 	orr.w	r2, r3, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	440b      	add	r3, r1
 8001560:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001564:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3318      	adds	r3, #24
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	6811      	ldr	r1, [r2, #0]
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3318      	adds	r3, #24
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	440b      	add	r3, r1
 8001584:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e00e      	b.n	80015a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e006      	b.n	80015a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
  }
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3724      	adds	r7, #36	@ 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d11d      	bne.n	8001610 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d003      	beq.n	8001642 <HAL_CAN_GetRxMessage+0x24>
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b02      	cmp	r3, #2
 800163e:	f040 8103 	bne.w	8001848 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10e      	bne.n	8001666 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0f7      	b.n	8001856 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0e8      	b.n	8001856 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	331b      	adds	r3, #27
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0204 	and.w	r2, r3, #4
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	331b      	adds	r3, #27
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0d5b      	lsrs	r3, r3, #21
 80016b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	331b      	adds	r3, #27
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	331b      	adds	r3, #27
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0202 	and.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2208      	movs	r2, #8
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	e00b      	b.n	8001722 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	3304      	adds	r3, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 020f 	and.w	r2, r3, #15
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	331b      	adds	r3, #27
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	4413      	add	r3, r2
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b2da      	uxtb	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	331b      	adds	r3, #27
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0a1a      	lsrs	r2, r3, #8
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0c1a      	lsrs	r2, r3, #16
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3302      	adds	r3, #2
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e1a      	lsrs	r2, r3, #24
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	3303      	adds	r3, #3
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3304      	adds	r3, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0a1a      	lsrs	r2, r3, #8
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3305      	adds	r3, #5
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0c1a      	lsrs	r2, r3, #16
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3306      	adds	r3, #6
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0e1a      	lsrs	r2, r3, #24
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3307      	adds	r3, #7
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0220 	orr.w	r2, r2, #32
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	e007      	b.n	8001844 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e006      	b.n	8001856 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d002      	beq.n	8001880 <HAL_CAN_ActivateNotification+0x1e>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d109      	bne.n	8001894 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6959      	ldr	r1, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e006      	b.n	80018a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
  }
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08a      	sub	sp, #40	@ 0x28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d07c      	beq.n	80019ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f983 	bl	8001c1c <HAL_CAN_TxMailbox0CompleteCallback>
 8001916:	e016      	b.n	8001946 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	e00c      	b.n	8001946 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	e002      	b.n	8001946 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f989 	bl	8001c58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d024      	beq.n	800199a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001958:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f963 	bl	8001c30 <HAL_CAN_TxMailbox1CompleteCallback>
 800196a:	e016      	b.n	800199a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
 800197e:	e00c      	b.n	800199a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
 8001992:	e002      	b.n	800199a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f969 	bl	8001c6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d024      	beq.n	80019ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f943 	bl	8001c44 <HAL_CAN_TxMailbox2CompleteCallback>
 80019be:	e016      	b.n	80019ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	e00c      	b.n	80019ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e6:	e002      	b.n	80019ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f949 	bl	8001c80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f930 	bl	8001c94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe ffe9 	bl	8000a24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2210      	movs	r2, #16
 8001a74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f912 	bl	8001cbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8f9 	bl	8001ca8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8fc 	bl	8001cd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8f5 	bl	8001ce4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d07b      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d072      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03e      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b7c:	2b60      	cmp	r3, #96	@ 0x60
 8001b7e:	d02b      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x32a>
 8001b80:	2b60      	cmp	r3, #96	@ 0x60
 8001b82:	d82e      	bhi.n	8001be2 <HAL_CAN_IRQHandler+0x334>
 8001b84:	2b50      	cmp	r3, #80	@ 0x50
 8001b86:	d022      	beq.n	8001bce <HAL_CAN_IRQHandler+0x320>
 8001b88:	2b50      	cmp	r3, #80	@ 0x50
 8001b8a:	d82a      	bhi.n	8001be2 <HAL_CAN_IRQHandler+0x334>
 8001b8c:	2b40      	cmp	r3, #64	@ 0x40
 8001b8e:	d019      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x316>
 8001b90:	2b40      	cmp	r3, #64	@ 0x40
 8001b92:	d826      	bhi.n	8001be2 <HAL_CAN_IRQHandler+0x334>
 8001b94:	2b30      	cmp	r3, #48	@ 0x30
 8001b96:	d010      	beq.n	8001bba <HAL_CAN_IRQHandler+0x30c>
 8001b98:	2b30      	cmp	r3, #48	@ 0x30
 8001b9a:	d822      	bhi.n	8001be2 <HAL_CAN_IRQHandler+0x334>
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d002      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2f8>
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d005      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ba4:	e01d      	b.n	8001be2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bae:	e019      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bb8:	e014      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bc2:	e00f      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bcc:	e00a      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd6:	e005      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be0:	e000      	b.n	8001be4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001be2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bf2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f872 	bl	8001cf8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff f81a 	bl	8000f74 <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d008      	beq.n	8001f60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e052      	b.n	8002006 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0216 	bic.w	r2, r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_DMA_Abort+0x62>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0208 	bic.w	r2, r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e013      	b.n	8001fda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7fe ffdf 	bl	8000f74 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d90c      	bls.n	8001fda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e015      	b.n	8002006 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e4      	bne.n	8001fb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fec:	223f      	movs	r2, #63	@ 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d004      	beq.n	800202c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2280      	movs	r2, #128	@ 0x80
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00c      	b.n	8002046 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e16b      	b.n	8002348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 815a 	bne.w	8002342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b4 	beq.w	8002342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002364 <HAL_GPIO_Init+0x310>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_GPIO_Init+0x314>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <HAL_GPIO_Init+0x226>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a51      	ldr	r2, [pc, #324]	@ (800236c <HAL_GPIO_Init+0x318>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_GPIO_Init+0x31c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x320>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	@ (8002378 <HAL_GPIO_Init+0x324>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_GPIO_Init+0x328>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x20a>
 800225a:	2307      	movs	r3, #7
 800225c:	e00e      	b.n	800227c <HAL_GPIO_Init+0x228>
 800225e:	2308      	movs	r3, #8
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002262:	2306      	movs	r3, #6
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x228>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x310>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b3b      	ldr	r3, [pc, #236]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a32      	ldr	r2, [pc, #200]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <HAL_GPIO_Init+0x334>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f ae90 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af02      	add	r7, sp, #8
 80023c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e101      	b.n	80025d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f006 fb0e 	bl	8008a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fef5 	bl	80051fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7c1a      	ldrb	r2, [r3, #16]
 8002418:	f88d 2000 	strb.w	r2, [sp]
 800241c:	3304      	adds	r3, #4
 800241e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002420:	f002 fdd4 	bl	8004fcc <USB_CoreInit>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0ce      	b.n	80025d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f002 feed 	bl	800521c <USB_SetCurrentMode>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0bf      	b.n	80025d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e04a      	b.n	80024f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3315      	adds	r3, #21
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3314      	adds	r3, #20
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	b298      	uxth	r0, r3
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	332e      	adds	r3, #46	@ 0x2e
 8002496:	4602      	mov	r2, r0
 8002498:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	3318      	adds	r3, #24
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	331c      	adds	r3, #28
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3320      	adds	r3, #32
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3324      	adds	r3, #36	@ 0x24
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	3301      	adds	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3af      	bcc.n	800245a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e044      	b.n	800258a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	3301      	adds	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3b5      	bcc.n	8002500 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7c1a      	ldrb	r2, [r3, #16]
 800259c:	f88d 2000 	strb.w	r2, [sp]
 80025a0:	3304      	adds	r3, #4
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	f002 fe86 	bl	80052b4 <USB_DevInit>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00c      	b.n	80025d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fed0 	bl	8006372 <USB_DevDisconnect>

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_PCD_Start+0x1c>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e022      	b.n	800263e <HAL_PCD_Start+0x62>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fdd7 	bl	80051d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fe7e 	bl	8006330 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b08d      	sub	sp, #52	@ 0x34
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 ff3c 	bl	80064da <USB_GetMode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 848c 	bne.w	8002f82 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fea0 	bl	80063b4 <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8482 	beq.w	8002f80 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f003 fe8d 	bl	80063b4 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d107      	bne.n	80026b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f002 0202 	and.w	r2, r2, #2
 80026b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fe7b 	bl	80063b4 <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d161      	bne.n	800278c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0210 	bic.w	r2, r2, #16
 80026d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80026fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002702:	d124      	bne.n	800274e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d035      	beq.n	800277c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800271a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	6a38      	ldr	r0, [r7, #32]
 8002724:	f003 fcb2 	bl	800608c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002734:	441a      	add	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002746:	441a      	add	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	e016      	b.n	800277c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002754:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002758:	d110      	bne.n	800277c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002760:	2208      	movs	r2, #8
 8002762:	4619      	mov	r1, r3
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	f003 fc91 	bl	800608c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002776:	441a      	add	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0210 	orr.w	r2, r2, #16
 800278a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fe0f 	bl	80063b4 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800279c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027a0:	f040 80a7 	bne.w	80028f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fe14 	bl	80063da <USB_ReadDevAllOutEpInterrupt>
 80027b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027b4:	e099      	b.n	80028ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 808e 	beq.w	80028de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fe38 	bl	8006442 <USB_ReadDevOutEPInterrupt>
 80027d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00c      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	2301      	movs	r3, #1
 80027ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fea4 	bl	8003540 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280e:	461a      	mov	r2, r3
 8002810:	2308      	movs	r3, #8
 8002812:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002814:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 ff7a 	bl	8003710 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002832:	461a      	mov	r2, r3
 8002834:	2310      	movs	r3, #16
 8002836:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d030      	beq.n	80028a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284a:	2b80      	cmp	r3, #128	@ 0x80
 800284c:	d109      	bne.n	8002862 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800285c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002860:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	3304      	adds	r3, #4
 8002876:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d108      	bne.n	8002892 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f006 f9c3 	bl	8008c18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800289e:	461a      	mov	r2, r3
 80028a0:	2302      	movs	r3, #2
 80028a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	2320      	movs	r3, #32
 80028be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af62 	bne.w	80027b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fd5c 	bl	80063b4 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002902:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002906:	f040 80db 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fd7d 	bl	800640e <USB_ReadDevAllInEpInterrupt>
 8002914:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800291a:	e0cd      	b.n	8002ab8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80c2 	beq.w	8002aac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fda3 	bl	800647e <USB_ReadDevInEPInterrupt>
 8002938:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d057      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	2201      	movs	r2, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	69f9      	ldr	r1, [r7, #28]
 8002960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002964:	4013      	ands	r3, r2
 8002966:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	2301      	movs	r3, #1
 8002978:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	799b      	ldrb	r3, [r3, #6]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d132      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3320      	adds	r3, #32
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	331c      	adds	r3, #28
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4419      	add	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4403      	add	r3, r0
 80029b6:	3320      	adds	r3, #32
 80029b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d113      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x3a2>
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3324      	adds	r3, #36	@ 0x24
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029e0:	461a      	mov	r2, r3
 80029e2:	2101      	movs	r1, #1
 80029e4:	f003 fdaa 	bl	800653c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 f88d 	bl	8008b0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a26:	461a      	mov	r2, r3
 8002a28:	2310      	movs	r3, #16
 8002a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a42:	461a      	mov	r2, r3
 8002a44:	2340      	movs	r3, #64	@ 0x40
 8002a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d023      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a54:	6a38      	ldr	r0, [r7, #32]
 8002a56:	f002 fd91 	bl	800557c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	3310      	adds	r3, #16
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	78db      	ldrb	r3, [r3, #3]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d108      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f006 f8da 	bl	8008c3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	2302      	movs	r3, #2
 8002a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fcbd 	bl	8003426 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	3301      	adds	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f47f af2e 	bne.w	800291c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fc75 	bl	80063b4 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ad4:	d122      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002afc:	2100      	movs	r1, #0
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fea4 	bl	800384c <HAL_PCDEx_LPM_Callback>
 8002b04:	e002      	b.n	8002b0c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f006 f878 	bl	8008bfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fc47 	bl	80063b4 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b30:	d112      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f006 f834 	bl	8008bb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b56:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fc29 	bl	80063b4 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6c:	f040 80b7 	bne.w	8002cde <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fcf6 	bl	800557c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b94:	e046      	b.n	8002c24 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ba8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bee:	0151      	lsls	r1, r2, #5
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	440a      	add	r2, r1
 8002bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bf8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c0e:	0151      	lsls	r1, r2, #5
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	440a      	add	r2, r1
 8002c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c20:	3301      	adds	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	791b      	ldrb	r3, [r3, #4]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d3b2      	bcc.n	8002b96 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c3e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7bdb      	ldrb	r3, [r3, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c5c:	f043 030b 	orr.w	r3, r3, #11
 8002c60:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c72:	f043 030b 	orr.w	r3, r3, #11
 8002c76:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c78:	e015      	b.n	8002ca6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c8c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ca0:	f043 030b 	orr.w	r3, r3, #11
 8002ca4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cb8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f003 fc37 	bl	800653c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fb66 	bl	80063b4 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf2:	d123      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fbfc 	bl	80064f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fcb3 	bl	800566e <USB_GetDevSpeed>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681c      	ldr	r4, [r3, #0]
 8002d14:	f001 fa08 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8002d18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4620      	mov	r0, r4
 8002d22:	f002 f9b7 	bl	8005094 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f005 ff19 	bl	8008b5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fb37 	bl	80063b4 <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d10a      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 fef6 	bl	8008b42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 0208 	and.w	r2, r2, #8
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 fb22 	bl	80063b4 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b80      	cmp	r3, #128	@ 0x80
 8002d78:	d123      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d86:	2301      	movs	r3, #1
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8a:	e014      	b.n	8002db6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fb0a 	bl	80033c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d3e4      	bcc.n	8002d8c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 faf4 	bl	80063b4 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dd6:	d13c      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd8:	2301      	movs	r3, #1
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ddc:	e02b      	b.n	8002e36 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d115      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da12      	bge.n	8002e30 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3317      	adds	r3, #23
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 faca 	bl	80033c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	791b      	ldrb	r3, [r3, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d3cd      	bcc.n	8002dde <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 faac 	bl	80063b4 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e66:	d156      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	e045      	b.n	8002efa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d12e      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da2b      	bge.n	8002ef4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ea8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d121      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef0:	6053      	str	r3, [r2, #4]
            break;
 8002ef2:	e008      	b.n	8002f06 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d3b3      	bcc.n	8002e6e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fa4a 	bl	80063b4 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2a:	d10a      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f005 fe97 	bl	8008c60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fa34 	bl	80063b4 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d115      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f005 fe87 	bl	8008c7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e000      	b.n	8002f82 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f80:	bf00      	nop
    }
  }
}
 8002f82:	3734      	adds	r7, #52	@ 0x34
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}

08002f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_SetAddress+0x1a>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e012      	b.n	8002fc8 <HAL_PCD_SetAddress+0x40>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f993 	bl	80062e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	70fb      	strb	r3, [r7, #3]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	803b      	strh	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da0f      	bge.n	8003016 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3310      	adds	r3, #16
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00f      	b.n	8003036 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 020f 	and.w	r2, r3, #15
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	3304      	adds	r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003042:	883b      	ldrh	r3, [r7, #0]
 8003044:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	78ba      	ldrb	r2, [r7, #2]
 8003050:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003064:	78bb      	ldrb	r3, [r7, #2]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d102      	bne.n	8003070 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_PCD_EP_Open+0xae>
 800307a:	2302      	movs	r3, #2
 800307c:	e00e      	b.n	800309c <HAL_PCD_EP_Open+0xcc>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fb13 	bl	80056b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800309a:	7afb      	ldrb	r3, [r7, #11]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0f      	bge.n	80030d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3310      	adds	r3, #16
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
 80030d6:	e00f      	b.n	80030f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_EP_Close+0x6e>
 800310e:	2302      	movs	r3, #2
 8003110:	e00e      	b.n	8003130 <HAL_PCD_EP_Close+0x8c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fb51 	bl	80057c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	460b      	mov	r3, r1
 8003146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d102      	bne.n	8003194 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	461a      	mov	r2, r3
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	f002 fbee 	bl	8005980 <USB_EPStartXfer>

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80031d0:	681b      	ldr	r3, [r3, #0]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	460b      	mov	r3, r1
 80031ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3310      	adds	r3, #16
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2201      	movs	r2, #1
 800321c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321e:	7afb      	ldrb	r3, [r7, #11]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	b2da      	uxtb	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	799b      	ldrb	r3, [r3, #6]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	799b      	ldrb	r3, [r3, #6]
 8003240:	461a      	mov	r2, r3
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	f002 fb9c 	bl	8005980 <USB_EPStartXfer>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	7912      	ldrb	r2, [r2, #4]
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e04f      	b.n	8003310 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0f      	bge.n	8003298 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3310      	adds	r3, #16
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	705a      	strb	r2, [r3, #1]
 8003296:	e00d      	b.n	80032b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_EP_SetStall+0x82>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e01d      	b.n	8003310 <HAL_PCD_EP_SetStall+0xbe>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 ff2a 	bl	800613c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7999      	ldrb	r1, [r3, #6]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003300:	461a      	mov	r2, r3
 8003302:	f003 f91b 	bl	800653c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	7912      	ldrb	r2, [r2, #4]
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e042      	b.n	80033bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0f      	bge.n	800335e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3310      	adds	r3, #16
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
 800335c:	e00f      	b.n	800337e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_EP_ClrStall+0x86>
 800339a:	2302      	movs	r3, #2
 800339c:	e00e      	b.n	80033bc <HAL_PCD_EP_ClrStall+0xa4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 ff33 	bl	8006218 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da0c      	bge.n	80033f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3310      	adds	r3, #16
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e00c      	b.n	800340c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fd52 	bl	8005ebc <USB_EPStopXfer>
 8003418:	4603      	mov	r3, r0
 800341a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800341c:	7afb      	ldrb	r3, [r7, #11]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	@ 0x28
 800342a:	af02      	add	r7, sp, #8
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3310      	adds	r3, #16
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d901      	bls.n	800345e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3303      	adds	r3, #3
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003482:	e02a      	b.n	80034da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d902      	bls.n	80034a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3303      	adds	r3, #3
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68d9      	ldr	r1, [r3, #12]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	4603      	mov	r3, r0
 80034bc:	6978      	ldr	r0, [r7, #20]
 80034be:	f002 fda7 	bl	8006010 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	441a      	add	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d809      	bhi.n	8003504 <PCD_WriteEmptyTxFifo+0xde>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d203      	bcs.n	8003504 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1bf      	bne.n	8003484 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d811      	bhi.n	8003534 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	43db      	mvns	r3, r3
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	333c      	adds	r3, #60	@ 0x3c
 8003558:	3304      	adds	r3, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	799b      	ldrb	r3, [r3, #6]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d17b      	bne.n	800366e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4a61      	ldr	r2, [pc, #388]	@ (8003708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	f240 80b9 	bls.w	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80b3 	beq.w	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a2:	461a      	mov	r2, r3
 80035a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a8:	6093      	str	r3, [r2, #8]
 80035aa:	e0a7      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c2:	461a      	mov	r2, r3
 80035c4:	2320      	movs	r3, #32
 80035c6:	6093      	str	r3, [r2, #8]
 80035c8:	e098      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8093 	bne.w	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d90f      	bls.n	80035fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	e07e      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1a      	ldr	r2, [r3, #32]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	0159      	lsls	r1, r3, #5
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	440b      	add	r3, r1
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	1ad2      	subs	r2, r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d114      	bne.n	8003660 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003648:	461a      	mov	r2, r3
 800364a:	2101      	movs	r1, #1
 800364c:	f002 ff76 	bl	800653c <USB_EP0_OutStart>
 8003650:	e006      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f005 fa36 	bl	8008ad8 <HAL_PCD_DataOutStageCallback>
 800366c:	e046      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4a26      	ldr	r2, [pc, #152]	@ (800370c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d124      	bne.n	80036c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003692:	6093      	str	r3, [r2, #8]
 8003694:	e032      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ac:	461a      	mov	r2, r3
 80036ae:	2320      	movs	r3, #32
 80036b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f005 fa0d 	bl	8008ad8 <HAL_PCD_DataOutStageCallback>
 80036be:	e01d      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d114      	bne.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e8:	461a      	mov	r2, r3
 80036ea:	2100      	movs	r1, #0
 80036ec:	f002 ff26 	bl	800653c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f005 f9ee 	bl	8008ad8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	4f54300a 	.word	0x4f54300a
 800370c:	4f54310a 	.word	0x4f54310a

08003710 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	333c      	adds	r3, #60	@ 0x3c
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <PCD_EP_OutSetupPacket_int+0x88>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d90e      	bls.n	8003764 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003762:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f005 f9a5 	bl	8008ab4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <PCD_EP_OutSetupPacket_int+0x88>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d90c      	bls.n	800378c <PCD_EP_OutSetupPacket_int+0x7c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	799b      	ldrb	r3, [r3, #6]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d108      	bne.n	800378c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2101      	movs	r1, #1
 8003788:	f002 fed8 	bl	800653c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	4f54300a 	.word	0x4f54300a

0800379c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
 80037a8:	4613      	mov	r3, r2
 80037aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ba:	883b      	ldrh	r3, [r7, #0]
 80037bc:	0419      	lsls	r1, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80037c8:	e028      	b.n	800381c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e00d      	b.n	80037fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3340      	adds	r3, #64	@ 0x40
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4413      	add	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	3301      	adds	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	3b01      	subs	r3, #1
 8003800:	429a      	cmp	r2, r3
 8003802:	d3ec      	bcc.n	80037de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003804:	883b      	ldrh	r3, [r7, #0]
 8003806:	0418      	lsls	r0, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	3b01      	subs	r3, #1
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	4302      	orrs	r2, r0
 8003814:	3340      	adds	r3, #64	@ 0x40
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e267      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d075      	beq.n	800396e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003882:	4b88      	ldr	r3, [pc, #544]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d00c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b85      	ldr	r3, [pc, #532]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003896:	2b08      	cmp	r3, #8
 8003898:	d112      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b82      	ldr	r3, [pc, #520]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <HAL_RCC_OscConfig+0x108>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d157      	bne.n	800396c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e242      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x74>
 80038ca:	4b76      	ldr	r3, [pc, #472]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a75      	ldr	r2, [pc, #468]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xb0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x98>
 80038e2:	4b70      	ldr	r3, [pc, #448]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xb0>
 80038fc:	4b69      	ldr	r3, [pc, #420]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a68      	ldr	r2, [pc, #416]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b66      	ldr	r3, [pc, #408]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a65      	ldr	r2, [pc, #404]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd fb2a 	bl	8000f74 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd fb26 	bl	8000f74 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e207      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xc0>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd fb16 	bl	8000f74 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fd fb12 	bl	8000f74 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1f3      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0xe8>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800397a:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003992:	4b44      	ldr	r3, [pc, #272]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x152>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1c7      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4937      	ldr	r1, [pc, #220]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_OscConfig+0x244>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd facb 	bl	8000f74 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fd fac7 	bl	8000f74 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a8      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4925      	ldr	r1, [pc, #148]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_RCC_OscConfig+0x244>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd faaa 	bl	8000f74 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fd faa6 	bl	8000f74 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e187      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d036      	beq.n	8003abc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_RCC_OscConfig+0x248>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fa8a 	bl	8000f74 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fd fa86 	bl	8000f74 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e167      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x200>
 8003a82:	e01b      	b.n	8003abc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a84:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_OscConfig+0x248>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fa73 	bl	8000f74 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fd fa6f 	bl	8000f74 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d907      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e150      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	42470000 	.word	0x42470000
 8003aac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b88      	ldr	r3, [pc, #544]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ea      	bne.n	8003a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8097 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b81      	ldr	r3, [pc, #516]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aea:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b77      	ldr	r3, [pc, #476]	@ (8003cd8 <HAL_RCC_OscConfig+0x474>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b74      	ldr	r3, [pc, #464]	@ (8003cd8 <HAL_RCC_OscConfig+0x474>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a73      	ldr	r2, [pc, #460]	@ (8003cd8 <HAL_RCC_OscConfig+0x474>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fa2f 	bl	8000f74 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fd fa2b 	bl	8000f74 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e10c      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd8 <HAL_RCC_OscConfig+0x474>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2ea>
 8003b40:	4b64      	ldr	r3, [pc, #400]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a63      	ldr	r2, [pc, #396]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	e01c      	b.n	8003b88 <HAL_RCC_OscConfig+0x324>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x30c>
 8003b56:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	4b5c      	ldr	r3, [pc, #368]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0x324>
 8003b70:	4b58      	ldr	r3, [pc, #352]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a57      	ldr	r2, [pc, #348]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	4b55      	ldr	r3, [pc, #340]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	4a54      	ldr	r2, [pc, #336]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003b82:	f023 0304 	bic.w	r3, r3, #4
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd f9f0 	bl	8000f74 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd f9ec 	bl	8000f74 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0cb      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	4b49      	ldr	r3, [pc, #292]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ee      	beq.n	8003b98 <HAL_RCC_OscConfig+0x334>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbc:	f7fd f9da 	bl	8000f74 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd f9d6 	bl	8000f74 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e0b5      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bda:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1ee      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bec:	4b39      	ldr	r3, [pc, #228]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	4a38      	ldr	r2, [pc, #224]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a1 	beq.w	8003d44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c02:	4b34      	ldr	r3, [pc, #208]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d05c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d141      	bne.n	8003c9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b31      	ldr	r3, [pc, #196]	@ (8003cdc <HAL_RCC_OscConfig+0x478>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd f9aa 	bl	8000f74 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd f9a6 	bl	8000f74 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e087      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	4b27      	ldr	r3, [pc, #156]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	491b      	ldr	r1, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_RCC_OscConfig+0x478>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd f97f 	bl	8000f74 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd f97b 	bl	8000f74 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e05c      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x416>
 8003c98:	e054      	b.n	8003d44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCC_OscConfig+0x478>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd f968 	bl	8000f74 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd f964 	bl	8000f74 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e045      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x444>
 8003cc6:	e03d      	b.n	8003d44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e038      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x4ec>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d028      	beq.n	8003d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d121      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11a      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fd f896 	bl	8000f74 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd f892 	bl	8000f74 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	@ (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fff6 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	080099ec 	.word	0x080099ec
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000004 	.word	0x20000004

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b094      	sub	sp, #80	@ 0x50
 8003f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f38:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d00d      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x40>
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	f200 80e1 	bhi.w	800410c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x34>
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f52:	e0db      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b73      	ldr	r3, [pc, #460]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f58:	e0db      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5a:	4b72      	ldr	r3, [pc, #456]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f5e:	e0d8      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f60:	4b6f      	ldr	r3, [pc, #444]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f76:	4b6a      	ldr	r3, [pc, #424]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	0159      	lsls	r1, r3, #5
 8003fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa4:	0150      	lsls	r0, r2, #5
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4621      	mov	r1, r4
 8003fac:	1a51      	subs	r1, r2, r1
 8003fae:	6139      	str	r1, [r7, #16]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	018b      	lsls	r3, r1, #6
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fce:	4651      	mov	r1, sl
 8003fd0:	018a      	lsls	r2, r1, #6
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd8:	4659      	mov	r1, fp
 8003fda:	eb63 0901 	sbc.w	r9, r3, r1
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff2:	4690      	mov	r8, r2
 8003ff4:	4699      	mov	r9, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	eb18 0303 	adds.w	r3, r8, r3
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	462b      	mov	r3, r5
 8004000:	eb49 0303 	adc.w	r3, r9, r3
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004012:	4629      	mov	r1, r5
 8004014:	028b      	lsls	r3, r1, #10
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800401c:	4621      	mov	r1, r4
 800401e:	028a      	lsls	r2, r1, #10
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800402c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004030:	f7fc f91e 	bl	8000270 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800403c:	e058      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b38      	ldr	r3, [pc, #224]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	2200      	movs	r2, #0
 8004046:	4618      	mov	r0, r3
 8004048:	4611      	mov	r1, r2
 800404a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	0159      	lsls	r1, r3, #5
 8004066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406a:	0150      	lsls	r0, r2, #5
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4641      	mov	r1, r8
 8004072:	ebb2 0a01 	subs.w	sl, r2, r1
 8004076:	4649      	mov	r1, r9
 8004078:	eb63 0b01 	sbc.w	fp, r3, r1
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800408c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004090:	ebb2 040a 	subs.w	r4, r2, sl
 8004094:	eb63 050b 	sbc.w	r5, r3, fp
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	00eb      	lsls	r3, r5, #3
 80040a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	464b      	mov	r3, r9
 80040b4:	eb45 0303 	adc.w	r3, r5, r3
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040c6:	4629      	mov	r1, r5
 80040c8:	028b      	lsls	r3, r1, #10
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d0:	4621      	mov	r1, r4
 80040d2:	028a      	lsls	r2, r1, #10
 80040d4:	4610      	mov	r0, r2
 80040d6:	4619      	mov	r1, r3
 80040d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040da:	2200      	movs	r2, #0
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	61fa      	str	r2, [r7, #28]
 80040e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e4:	f7fc f8c4 	bl	8000270 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4613      	mov	r3, r2
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004100:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x204>)
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004114:	4618      	mov	r0, r3
 8004116:	3750      	adds	r7, #80	@ 0x50
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff0 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	080099fc 	.word	0x080099fc

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800416c:	f7ff ffdc 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0b5b      	lsrs	r3, r3, #13
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	080099fc 	.word	0x080099fc

08004190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e042      	b.n	8004228 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fc fd52 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	@ 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fc85 	bl	8004ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0ba      	sub	sp, #232	@ 0xe8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800426e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fb69 	bl	8004966 <UART_Receive_IT>
      return;
 8004294:	e25b      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80de 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80d1 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
 80042ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f043 0202 	orr.w	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 81f2 	beq.w	8004744 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 faf4 	bl	8004966 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b40      	cmp	r3, #64	@ 0x40
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_UART_IRQHandler+0x17a>
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04f      	beq.n	800444a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9fc 	bl	80047a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d141      	bne.n	8004442 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d9      	bne.n	80043be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d013      	beq.n	800443a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	4a7e      	ldr	r2, [pc, #504]	@ (8004610 <HAL_UART_IRQHandler+0x3e0>)
 8004418:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fdf5 	bl	800200e <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00e      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f99e 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00a      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f99a 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e006      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f996 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004456:	e175      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	bf00      	nop
    return;
 800445a:	e173      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 814f 	bne.w	8004704 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8148 	beq.w	8004704 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8141 	beq.w	8004704 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	f040 80b6 	bne.w	8004614 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8145 	beq.w	8004748 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f080 813e 	bcs.w	8004748 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	f000 8088 	beq.w	80045f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800450e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800451a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800453e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800455a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e1      	bne.n	800452e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800457a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800457c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800458e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800459c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e3      	bne.n	80045b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fc9e 	bl	8001f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8c1 	bl	8004790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800460e:	e09b      	b.n	8004748 <HAL_UART_IRQHandler+0x518>
 8004610:	0800486f 	.word	0x0800486f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800461c:	b29b      	uxth	r3, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 808e 	beq.w	800474c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8089 	beq.w	800474c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800464a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800465e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004660:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800466c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	623b      	str	r3, [r7, #32]
   return(result);
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004696:	633a      	str	r2, [r7, #48]	@ 0x30
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800469c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e3      	bne.n	8004672 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e3      	bne.n	80046b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f847 	bl	8004790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004702:	e023      	b.n	800474c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <HAL_UART_IRQHandler+0x4f4>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8ba 	bl	8004896 <UART_Transmit_IT>
    return;
 8004722:	e014      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00e      	beq.n	800474e <HAL_UART_IRQHandler+0x51e>
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8fa 	bl	8004936 <UART_EndTransmit_IT>
    return;
 8004742:	e004      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
    return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
      return;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
      return;
 800474c:	bf00      	nop
  }
}
 800474e:	37e8      	adds	r7, #232	@ 0xe8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b095      	sub	sp, #84	@ 0x54
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800480a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	2b01      	cmp	r3, #1
 800481e:	d119      	bne.n	8004854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	647b      	str	r3, [r7, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004840:	61ba      	str	r2, [r7, #24]
 8004842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004862:	bf00      	nop
 8004864:	3754      	adds	r7, #84	@ 0x54
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff77 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b21      	cmp	r3, #33	@ 0x21
 80048a8:	d13e      	bne.n	8004928 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b2:	d114      	bne.n	80048de <UART_Transmit_IT+0x48>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d110      	bne.n	80048de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]
 80048dc:	e008      	b.n	80048f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6211      	str	r1, [r2, #32]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4619      	mov	r1, r3
 80048fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10f      	bne.n	8004924 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004912:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004922:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800494c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fefc 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b08c      	sub	sp, #48	@ 0x30
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b22      	cmp	r3, #34	@ 0x22
 8004978:	f040 80ae 	bne.w	8004ad8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d117      	bne.n	80049b6 <UART_Receive_IT+0x50>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d113      	bne.n	80049b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049b4:	e026      	b.n	8004a04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c8:	d007      	beq.n	80049da <UART_Receive_IT+0x74>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <UART_Receive_IT+0x82>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e008      	b.n	80049fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4619      	mov	r1, r3
 8004a12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d15d      	bne.n	8004ad4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0220 	bic.w	r2, r2, #32
 8004a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d135      	bne.n	8004aca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	613b      	str	r3, [r7, #16]
   return(result);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 0310 	bic.w	r3, r3, #16
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a84:	623a      	str	r2, [r7, #32]
 8004a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d10a      	bne.n	8004abc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fe64 	bl	8004790 <HAL_UARTEx_RxEventCallback>
 8004ac8:	e002      	b.n	8004ad0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fe4c 	bl	8004768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e002      	b.n	8004ada <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3730      	adds	r7, #48	@ 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae8:	b0c0      	sub	sp, #256	@ 0x100
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	68d9      	ldr	r1, [r3, #12]
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	ea40 0301 	orr.w	r3, r0, r1
 8004b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b3c:	f021 010c 	bic.w	r1, r1, #12
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5e:	6999      	ldr	r1, [r3, #24]
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	ea40 0301 	orr.w	r3, r0, r1
 8004b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8f      	ldr	r3, [pc, #572]	@ (8004db0 <UART_SetConfig+0x2cc>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d005      	beq.n	8004b84 <UART_SetConfig+0xa0>
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004db4 <UART_SetConfig+0x2d0>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d104      	bne.n	8004b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7ff faf0 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8004b88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b8c:	e003      	b.n	8004b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7ff fad7 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8004b92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba0:	f040 810c 	bne.w	8004dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	462b      	mov	r3, r5
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	eb12 0801 	adds.w	r8, r2, r1
 8004bcc:	4629      	mov	r1, r5
 8004bce:	eb43 0901 	adc.w	r9, r3, r1
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be6:	4690      	mov	r8, r2
 8004be8:	4699      	mov	r9, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	eb18 0303 	adds.w	r3, r8, r3
 8004bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	eb49 0303 	adc.w	r3, r9, r3
 8004bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c12:	460b      	mov	r3, r1
 8004c14:	18db      	adds	r3, r3, r3
 8004c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c18:	4613      	mov	r3, r2
 8004c1a:	eb42 0303 	adc.w	r3, r2, r3
 8004c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c28:	f7fb fb22 	bl	8000270 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4b61      	ldr	r3, [pc, #388]	@ (8004db8 <UART_SetConfig+0x2d4>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	011c      	lsls	r4, r3, #4
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c54:	415b      	adcs	r3, r3
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c62:	4649      	mov	r1, r9
 8004c64:	eb43 0b01 	adc.w	fp, r3, r1
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c7c:	4692      	mov	sl, r2
 8004c7e:	469b      	mov	fp, r3
 8004c80:	4643      	mov	r3, r8
 8004c82:	eb1a 0303 	adds.w	r3, sl, r3
 8004c86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	18db      	adds	r3, r3, r3
 8004cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cae:	4613      	mov	r3, r2
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cbe:	f7fb fad7 	bl	8000270 <__aeabi_uldivmod>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004db8 <UART_SetConfig+0x2d4>)
 8004cca:	fba3 2301 	umull	r2, r3, r3, r1
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2264      	movs	r2, #100	@ 0x64
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	1acb      	subs	r3, r1, r3
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cde:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <UART_SetConfig+0x2d4>)
 8004ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cec:	441c      	add	r4, r3
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d64:	460b      	mov	r3, r1
 8004d66:	18db      	adds	r3, r3, r3
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d7a:	f7fb fa79 	bl	8000270 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <UART_SetConfig+0x2d4>)
 8004d84:	fba3 1302 	umull	r1, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	2164      	movs	r1, #100	@ 0x64
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	3332      	adds	r3, #50	@ 0x32
 8004d96:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <UART_SetConfig+0x2d4>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	f003 0207 	and.w	r2, r3, #7
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4422      	add	r2, r4
 8004daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dac:	e106      	b.n	8004fbc <UART_SetConfig+0x4d8>
 8004dae:	bf00      	nop
 8004db0:	40011000 	.word	0x40011000
 8004db4:	40011400 	.word	0x40011400
 8004db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dce:	4642      	mov	r2, r8
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	1891      	adds	r1, r2, r2
 8004dd4:	6239      	str	r1, [r7, #32]
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dde:	4641      	mov	r1, r8
 8004de0:	1854      	adds	r4, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb43 0501 	adc.w	r5, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	00eb      	lsls	r3, r5, #3
 8004df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df6:	00e2      	lsls	r2, r4, #3
 8004df8:	4614      	mov	r4, r2
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	18e3      	adds	r3, r4, r3
 8004e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e04:	464b      	mov	r3, r9
 8004e06:	eb45 0303 	adc.w	r3, r5, r3
 8004e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	008b      	lsls	r3, r1, #2
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e34:	4621      	mov	r1, r4
 8004e36:	008a      	lsls	r2, r1, #2
 8004e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e3c:	f7fb fa18 	bl	8000270 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4b60      	ldr	r3, [pc, #384]	@ (8004fc8 <UART_SetConfig+0x4e4>)
 8004e46:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	011c      	lsls	r4, r3, #4
 8004e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	61b9      	str	r1, [r7, #24]
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e70:	4641      	mov	r1, r8
 8004e72:	1851      	adds	r1, r2, r1
 8004e74:	6139      	str	r1, [r7, #16]
 8004e76:	4649      	mov	r1, r9
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e88:	4659      	mov	r1, fp
 8004e8a:	00cb      	lsls	r3, r1, #3
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e92:	4651      	mov	r1, sl
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ec8:	4649      	mov	r1, r9
 8004eca:	008b      	lsls	r3, r1, #2
 8004ecc:	4641      	mov	r1, r8
 8004ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	008a      	lsls	r2, r1, #2
 8004ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004eda:	f7fb f9c9 	bl	8000270 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4b38      	ldr	r3, [pc, #224]	@ (8004fc8 <UART_SetConfig+0x4e4>)
 8004ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2264      	movs	r2, #100	@ 0x64
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	1acb      	subs	r3, r1, r3
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	3332      	adds	r3, #50	@ 0x32
 8004ef8:	4a33      	ldr	r2, [pc, #204]	@ (8004fc8 <UART_SetConfig+0x4e4>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f04:	441c      	add	r4, r3
 8004f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f24:	4641      	mov	r1, r8
 8004f26:	1851      	adds	r1, r2, r1
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	414b      	adcs	r3, r1
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	00cb      	lsls	r3, r1, #3
 8004f40:	4651      	mov	r1, sl
 8004f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f46:	4651      	mov	r1, sl
 8004f48:	00ca      	lsls	r2, r1, #3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4642      	mov	r2, r8
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f56:	464b      	mov	r3, r9
 8004f58:	460a      	mov	r2, r1
 8004f5a:	eb42 0303 	adc.w	r3, r2, r3
 8004f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f78:	4649      	mov	r1, r9
 8004f7a:	008b      	lsls	r3, r1, #2
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f82:	4641      	mov	r1, r8
 8004f84:	008a      	lsls	r2, r1, #2
 8004f86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f8a:	f7fb f971 	bl	8000270 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <UART_SetConfig+0x4e4>)
 8004f94:	fba3 1302 	umull	r1, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	2164      	movs	r1, #100	@ 0x64
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	3332      	adds	r3, #50	@ 0x32
 8004fa6:	4a08      	ldr	r2, [pc, #32]	@ (8004fc8 <UART_SetConfig+0x4e4>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4422      	add	r2, r4
 8004fba:	609a      	str	r2, [r3, #8]
}
 8004fbc:	bf00      	nop
 8004fbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc8:	51eb851f 	.word	0x51eb851f

08004fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fcc:	b084      	sub	sp, #16
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	f107 001c 	add.w	r0, r7, #28
 8004fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d123      	bne.n	800502e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800500e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fae8 	bl	80065f8 <USB_CoreReset>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e01b      	b.n	8005066 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 fadc 	bl	80065f8 <USB_CoreReset>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005044:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
 8005058:	e005      	b.n	8005066 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005066:	7fbb      	ldrb	r3, [r7, #30]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10b      	bne.n	8005084 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f043 0206 	orr.w	r2, r3, #6
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr

08005094 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d165      	bne.n	8005174 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a41      	ldr	r2, [pc, #260]	@ (80051b0 <USB_SetTurnaroundTime+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d906      	bls.n	80050be <USB_SetTurnaroundTime+0x2a>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a40      	ldr	r2, [pc, #256]	@ (80051b4 <USB_SetTurnaroundTime+0x120>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d202      	bcs.n	80050be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050b8:	230f      	movs	r3, #15
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e062      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a3c      	ldr	r2, [pc, #240]	@ (80051b4 <USB_SetTurnaroundTime+0x120>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d306      	bcc.n	80050d4 <USB_SetTurnaroundTime+0x40>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a3b      	ldr	r2, [pc, #236]	@ (80051b8 <USB_SetTurnaroundTime+0x124>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d202      	bcs.n	80050d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050ce:	230e      	movs	r3, #14
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e057      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a38      	ldr	r2, [pc, #224]	@ (80051b8 <USB_SetTurnaroundTime+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d306      	bcc.n	80050ea <USB_SetTurnaroundTime+0x56>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a37      	ldr	r2, [pc, #220]	@ (80051bc <USB_SetTurnaroundTime+0x128>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d202      	bcs.n	80050ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050e4:	230d      	movs	r3, #13
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e04c      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a33      	ldr	r2, [pc, #204]	@ (80051bc <USB_SetTurnaroundTime+0x128>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d306      	bcc.n	8005100 <USB_SetTurnaroundTime+0x6c>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a32      	ldr	r2, [pc, #200]	@ (80051c0 <USB_SetTurnaroundTime+0x12c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050fa:	230c      	movs	r3, #12
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e041      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a2f      	ldr	r2, [pc, #188]	@ (80051c0 <USB_SetTurnaroundTime+0x12c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d906      	bls.n	8005116 <USB_SetTurnaroundTime+0x82>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <USB_SetTurnaroundTime+0x130>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d802      	bhi.n	8005116 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005110:	230b      	movs	r3, #11
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e036      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a2a      	ldr	r2, [pc, #168]	@ (80051c4 <USB_SetTurnaroundTime+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d906      	bls.n	800512c <USB_SetTurnaroundTime+0x98>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <USB_SetTurnaroundTime+0x134>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d802      	bhi.n	800512c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005126:	230a      	movs	r3, #10
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e02b      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a26      	ldr	r2, [pc, #152]	@ (80051c8 <USB_SetTurnaroundTime+0x134>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d906      	bls.n	8005142 <USB_SetTurnaroundTime+0xae>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a25      	ldr	r2, [pc, #148]	@ (80051cc <USB_SetTurnaroundTime+0x138>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d202      	bcs.n	8005142 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800513c:	2309      	movs	r3, #9
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e020      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <USB_SetTurnaroundTime+0x138>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d306      	bcc.n	8005158 <USB_SetTurnaroundTime+0xc4>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a20      	ldr	r2, [pc, #128]	@ (80051d0 <USB_SetTurnaroundTime+0x13c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d802      	bhi.n	8005158 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005152:	2308      	movs	r3, #8
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e015      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <USB_SetTurnaroundTime+0x13c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d906      	bls.n	800516e <USB_SetTurnaroundTime+0xda>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <USB_SetTurnaroundTime+0x140>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d202      	bcs.n	800516e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005168:	2307      	movs	r3, #7
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e00a      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800516e:	2306      	movs	r3, #6
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e007      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800517a:	2309      	movs	r3, #9
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e001      	b.n	8005184 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005180:	2309      	movs	r3, #9
 8005182:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	00d8acbf 	.word	0x00d8acbf
 80051b4:	00e4e1c0 	.word	0x00e4e1c0
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	01067380 	.word	0x01067380
 80051c0:	011a499f 	.word	0x011a499f
 80051c4:	01312cff 	.word	0x01312cff
 80051c8:	014ca43f 	.word	0x014ca43f
 80051cc:	016e3600 	.word	0x016e3600
 80051d0:	01a6ab1f 	.word	0x01a6ab1f
 80051d4:	01e84800 	.word	0x01e84800

080051d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f043 0201 	orr.w	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d115      	bne.n	800526a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800524a:	200a      	movs	r0, #10
 800524c:	f7fb fe9e 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	330a      	adds	r3, #10
 8005254:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 f93f 	bl	80064da <USB_GetMode>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d01e      	beq.n	80052a0 <USB_SetCurrentMode+0x84>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2bc7      	cmp	r3, #199	@ 0xc7
 8005266:	d9f0      	bls.n	800524a <USB_SetCurrentMode+0x2e>
 8005268:	e01a      	b.n	80052a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d115      	bne.n	800529c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800527c:	200a      	movs	r0, #10
 800527e:	f7fb fe85 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	330a      	adds	r3, #10
 8005286:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 f926 	bl	80064da <USB_GetMode>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <USB_SetCurrentMode+0x84>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2bc7      	cmp	r3, #199	@ 0xc7
 8005298:	d9f0      	bls.n	800527c <USB_SetCurrentMode+0x60>
 800529a:	e001      	b.n	80052a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e005      	b.n	80052ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80052a4:	d101      	bne.n	80052aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b4:	b084      	sub	sp, #16
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e009      	b.n	80052e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3340      	adds	r3, #64	@ 0x40
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0e      	cmp	r3, #14
 80052ec:	d9f2      	bls.n	80052d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11c      	bne.n	8005330 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005304:	f043 0302 	orr.w	r3, r3, #2
 8005308:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	@ 0x38
 800532e:	e00b      	b.n	8005348 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800534e:	461a      	mov	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005354:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10d      	bne.n	8005378 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800535c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005364:	2100      	movs	r1, #0
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f968 	bl	800563c <USB_SetDevSpeed>
 800536c:	e008      	b.n	8005380 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800536e:	2101      	movs	r1, #1
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f963 	bl	800563c <USB_SetDevSpeed>
 8005376:	e003      	b.n	8005380 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005378:	2103      	movs	r1, #3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f95e 	bl	800563c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005380:	2110      	movs	r1, #16
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8fa 	bl	800557c <USB_FlushTxFifo>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f924 	bl	80055e0 <USB_FlushRxFifo>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a8:	461a      	mov	r2, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e043      	b.n	8005454 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e2:	d118      	bne.n	8005416 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e013      	b.n	8005428 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e008      	b.n	8005428 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	461a      	mov	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005446:	461a      	mov	r2, r3
 8005448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800544c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3301      	adds	r3, #1
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005458:	461a      	mov	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4293      	cmp	r3, r2
 800545e:	d3b5      	bcc.n	80053cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e043      	b.n	80054ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800547c:	d118      	bne.n	80054b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005490:	461a      	mov	r2, r3
 8005492:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e013      	b.n	80054c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e008      	b.n	80054c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e0:	461a      	mov	r2, r3
 80054e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3301      	adds	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054f2:	461a      	mov	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d3b5      	bcc.n	8005466 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800551a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800551c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f043 0210 	orr.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	4b10      	ldr	r3, [pc, #64]	@ (8005578 <USB_DevInit+0x2c4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800553c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0208 	orr.w	r2, r3, #8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005550:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005554:	2b01      	cmp	r3, #1
 8005556:	d107      	bne.n	8005568 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005574:	b004      	add	sp, #16
 8005576:	4770      	bx	lr
 8005578:	803c3800 	.word	0x803c3800

0800557c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005596:	d901      	bls.n	800559c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e01b      	b.n	80055d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	daf2      	bge.n	800558a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	019b      	lsls	r3, r3, #6
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055c0:	d901      	bls.n	80055c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e006      	b.n	80055d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d0f0      	beq.n	80055b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055f8:	d901      	bls.n	80055fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e018      	b.n	8005630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	daf2      	bge.n	80055ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2210      	movs	r2, #16
 800560e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800561c:	d901      	bls.n	8005622 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e006      	b.n	8005630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b10      	cmp	r3, #16
 800562c:	d0f0      	beq.n	8005610 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
 8005692:	e00a      	b.n	80056aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d002      	beq.n	80056a0 <USB_GetDevSpeed+0x32>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b06      	cmp	r3, #6
 800569e:	d102      	bne.n	80056a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056a0:	2302      	movs	r3, #2
 80056a2:	75fb      	strb	r3, [r7, #23]
 80056a4:	e001      	b.n	80056aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056a6:	230f      	movs	r3, #15
 80056a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d13a      	bne.n	800574a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	68f9      	ldr	r1, [r7, #12]
 80056ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d155      	bne.n	80057b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	059b      	lsls	r3, r3, #22
 800572e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e036      	b.n	80057b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	2101      	movs	r1, #1
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005768:	4313      	orrs	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11a      	bne.n	80057b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800579e:	430b      	orrs	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d161      	bne.n	80058a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057fa:	d11f      	bne.n	800583c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005816:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800581a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005836:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800583a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	b29b      	uxth	r3, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800585c:	4013      	ands	r3, r2
 800585e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005880:	4013      	ands	r3, r2
 8005882:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	0159      	lsls	r1, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	440b      	add	r3, r1
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	4619      	mov	r1, r3
 80058a0:	4b35      	ldr	r3, [pc, #212]	@ (8005978 <USB_DeactivateEndpoint+0x1b0>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
 80058a6:	e060      	b.n	800596a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058be:	d11f      	bne.n	8005900 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	43db      	mvns	r3, r3
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005920:	4013      	ands	r3, r2
 8005922:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0159      	lsls	r1, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	440b      	add	r3, r1
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	4619      	mov	r1, r3
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <USB_DeactivateEndpoint+0x1b4>)
 8005966:	4013      	ands	r3, r2
 8005968:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	ec337800 	.word	0xec337800
 800597c:	eff37800 	.word	0xeff37800

08005980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	@ 0x28
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	f040 817f 	bne.w	8005ca0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d132      	bne.n	8005a10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a08:	0cdb      	lsrs	r3, r3, #19
 8005a0a:	04db      	lsls	r3, r3, #19
 8005a0c:	6113      	str	r3, [r2, #16]
 8005a0e:	e097      	b.n	8005b40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2a:	0cdb      	lsrs	r3, r3, #19
 8005a2c:	04db      	lsls	r3, r3, #19
 8005a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11a      	bne.n	8005a90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d903      	bls.n	8005a6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a8c:	6113      	str	r3, [r2, #16]
 8005a8e:	e044      	b.n	8005b1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4413      	add	r3, r2
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	8afb      	ldrh	r3, [r7, #22]
 8005ab6:	04d9      	lsls	r1, r3, #19
 8005ab8:	4ba4      	ldr	r3, [pc, #656]	@ (8005d4c <USB_EPStartXfer+0x3cc>)
 8005aba:	400b      	ands	r3, r1
 8005abc:	69b9      	ldr	r1, [r7, #24]
 8005abe:	0148      	lsls	r0, r1, #5
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	4401      	add	r1, r0
 8005ac4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d122      	bne.n	8005b1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005af2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	8afb      	ldrh	r3, [r7, #22]
 8005b04:	075b      	lsls	r3, r3, #29
 8005b06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005b0a:	69b9      	ldr	r1, [r7, #24]
 8005b0c:	0148      	lsls	r0, r1, #5
 8005b0e:	69f9      	ldr	r1, [r7, #28]
 8005b10:	4401      	add	r1, r0
 8005b12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b16:	4313      	orrs	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	0148      	lsls	r0, r1, #5
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	4401      	add	r1, r0
 8005b38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d14b      	bne.n	8005bde <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	791b      	ldrb	r3, [r3, #4]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d128      	bne.n	8005bbc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e00f      	b.n	8005bbc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	e166      	b.n	8005eac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bfc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	791b      	ldrb	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d015      	beq.n	8005c32 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 814e 	beq.w	8005eac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	69f9      	ldr	r1, [r7, #28]
 8005c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005c30:	e13c      	b.n	8005eac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d110      	bne.n	8005c64 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e00f      	b.n	8005c84 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68d9      	ldr	r1, [r3, #12]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	b298      	uxth	r0, r3
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4603      	mov	r3, r0
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f9b9 	bl	8006010 <USB_WritePacket>
 8005c9e:	e105      	b.n	8005eac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cba:	0cdb      	lsrs	r3, r3, #19
 8005cbc:	04db      	lsls	r3, r3, #19
 8005cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ce2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d132      	bne.n	8005d50 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	0148      	lsls	r0, r1, #5
 8005d1c:	69f9      	ldr	r1, [r7, #28]
 8005d1e:	4401      	add	r1, r0
 8005d20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d24:	4313      	orrs	r3, r2
 8005d26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d46:	6113      	str	r3, [r2, #16]
 8005d48:	e062      	b.n	8005e10 <USB_EPStartXfer+0x490>
 8005d4a:	bf00      	nop
 8005d4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d123      	bne.n	8005da0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6e:	69b9      	ldr	r1, [r7, #24]
 8005d70:	0148      	lsls	r0, r1, #5
 8005d72:	69f9      	ldr	r1, [r7, #28]
 8005d74:	4401      	add	r1, r0
 8005d76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d9c:	6113      	str	r3, [r2, #16]
 8005d9e:	e037      	b.n	8005e10 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	8afa      	ldrh	r2, [r7, #22]
 8005dbc:	fb03 f202 	mul.w	r2, r3, r2
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	8afb      	ldrh	r3, [r7, #22]
 8005dd4:	04d9      	lsls	r1, r3, #19
 8005dd6:	4b38      	ldr	r3, [pc, #224]	@ (8005eb8 <USB_EPStartXfer+0x538>)
 8005dd8:	400b      	ands	r3, r1
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	0148      	lsls	r0, r1, #5
 8005dde:	69f9      	ldr	r1, [r7, #28]
 8005de0:	4401      	add	r1, r0
 8005de2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005de6:	4313      	orrs	r3, r2
 8005de8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d10d      	bne.n	8005e32 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68d9      	ldr	r1, [r3, #12]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	460a      	mov	r2, r1
 8005e30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	791b      	ldrb	r3, [r3, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d128      	bne.n	8005e8c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e00f      	b.n	8005e8c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	1ff80000 	.word	0x1ff80000

08005ebc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d14a      	bne.n	8005f70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ef2:	f040 8086 	bne.w	8006002 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d902      	bls.n	8005f54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
          break;
 8005f52:	e056      	b.n	8006002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f6c:	d0e7      	beq.n	8005f3e <USB_EPStopXfer+0x82>
 8005f6e:	e048      	b.n	8006002 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f88:	d13b      	bne.n	8006002 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d902      	bls.n	8005fe8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe6:	e00c      	b.n	8006002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006000:	d0e7      	beq.n	8005fd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
}
 8006004:	4618      	mov	r0, r3
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	@ 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	460b      	mov	r3, r1
 8006020:	71fb      	strb	r3, [r7, #7]
 8006022:	4613      	mov	r3, r2
 8006024:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800602e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d123      	bne.n	800607e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006036:	88bb      	ldrh	r3, [r7, #4]
 8006038:	3303      	adds	r3, #3
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	e018      	b.n	8006076 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	031a      	lsls	r2, r3, #12
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006050:	461a      	mov	r2, r3
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3301      	adds	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3301      	adds	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	3301      	adds	r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3e2      	bcc.n	8006044 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3724      	adds	r7, #36	@ 0x24
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800608c:	b480      	push	{r7}
 800608e:	b08b      	sub	sp, #44	@ 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	e014      	b.n	80060e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	3301      	adds	r3, #1
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	3301      	adds	r3, #1
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	3301      	adds	r3, #1
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	3301      	adds	r3, #1
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3e6      	bcc.n	80060b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ea:	8bfb      	ldrh	r3, [r7, #30]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fa:	461a      	mov	r2, r3
 80060fc:	f107 0310 	add.w	r3, r7, #16
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	701a      	strb	r2, [r3, #0]
      i++;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	3301      	adds	r3, #1
 800611a:	623b      	str	r3, [r7, #32]
      pDest++;
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	3301      	adds	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006122:	8bfb      	ldrh	r3, [r7, #30]
 8006124:	3b01      	subs	r3, #1
 8006126:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ea      	bne.n	8006104 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006130:	4618      	mov	r0, r3
 8006132:	372c      	adds	r7, #44	@ 0x2c
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d12c      	bne.n	80061b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	db12      	blt.n	8006190 <USB_EPSetStall+0x54>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00f      	beq.n	8006190 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800618e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	e02b      	b.n	800620a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db12      	blt.n	80061ea <USB_EPSetStall+0xae>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00f      	beq.n	80061ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d128      	bne.n	8006286 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800624e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	791b      	ldrb	r3, [r3, #4]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d003      	beq.n	8006264 <USB_EPClearStall+0x4c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d138      	bne.n	80062d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800627e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e027      	b.n	80062d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d003      	beq.n	80062b6 <USB_EPClearStall+0x9e>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	791b      	ldrb	r3, [r3, #4]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d10f      	bne.n	80062d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006302:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006306:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800635e:	f023 0302 	bic.w	r3, r3, #2
 8006362:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0c1b      	lsrs	r3, r3, #16
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006470:	68bb      	ldr	r3, [r7, #8]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064cc:	68bb      	ldr	r3, [r7, #8]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0301 	and.w	r3, r3, #1
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006510:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006514:	f023 0307 	bic.w	r3, r3, #7
 8006518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800652c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	460b      	mov	r3, r1
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	333c      	adds	r3, #60	@ 0x3c
 8006552:	3304      	adds	r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4a26      	ldr	r2, [pc, #152]	@ (80065f4 <USB_EP0_OutStart+0xb8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d90a      	bls.n	8006576 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006570:	d101      	bne.n	8006576 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e037      	b.n	80065e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a4:	f043 0318 	orr.w	r3, r3, #24
 80065a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80065bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10f      	bne.n	80065e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80065e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	4f54300a 	.word	0x4f54300a

080065f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006610:	d901      	bls.n	8006616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e01b      	b.n	800664e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	daf2      	bge.n	8006604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f043 0201 	orr.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800663a:	d901      	bls.n	8006640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e006      	b.n	800664e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d0f0      	beq.n	800662e <USB_CoreReset+0x36>

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006668:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800666c:	f002 fc9e 	bl	8008fac <USBD_static_malloc>
 8006670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32b0      	adds	r2, #176	@ 0xb0
 8006682:	2100      	movs	r1, #0
 8006684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006688:	2302      	movs	r3, #2
 800668a:	e0d4      	b.n	8006836 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800668c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006690:	2100      	movs	r1, #0
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f002 fcf0 	bl	8009078 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	@ 0xb0
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	32b0      	adds	r2, #176	@ 0xb0
 80066b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d138      	bne.n	8006736 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006840 <USBD_CDC_Init+0x1e4>)
 80066c6:	7819      	ldrb	r1, [r3, #0]
 80066c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066cc:	2202      	movs	r2, #2
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f002 fb49 	bl	8008d66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006840 <USBD_CDC_Init+0x1e4>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3324      	adds	r3, #36	@ 0x24
 80066ea:	2201      	movs	r2, #1
 80066ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066ee:	4b55      	ldr	r3, [pc, #340]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066f6:	2202      	movs	r2, #2
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fb34 	bl	8008d66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066fe:	4b51      	ldr	r3, [pc, #324]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006716:	2201      	movs	r2, #1
 8006718:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800671a:	4b4b      	ldr	r3, [pc, #300]	@ (8006848 <USBD_CDC_Init+0x1ec>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 020f 	and.w	r2, r3, #15
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3326      	adds	r3, #38	@ 0x26
 8006730:	2210      	movs	r2, #16
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e035      	b.n	80067a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006736:	4b42      	ldr	r3, [pc, #264]	@ (8006840 <USBD_CDC_Init+0x1e4>)
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	2340      	movs	r3, #64	@ 0x40
 800673c:	2202      	movs	r2, #2
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f002 fb11 	bl	8008d66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006744:	4b3e      	ldr	r3, [pc, #248]	@ (8006840 <USBD_CDC_Init+0x1e4>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3324      	adds	r3, #36	@ 0x24
 800675a:	2201      	movs	r2, #1
 800675c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800675e:	4b39      	ldr	r3, [pc, #228]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	2340      	movs	r3, #64	@ 0x40
 8006764:	2202      	movs	r2, #2
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 fafd 	bl	8008d66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800676c:	4b35      	ldr	r3, [pc, #212]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006784:	2201      	movs	r2, #1
 8006786:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006788:	4b2f      	ldr	r3, [pc, #188]	@ (8006848 <USBD_CDC_Init+0x1ec>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	3326      	adds	r3, #38	@ 0x26
 800679e:	2210      	movs	r2, #16
 80067a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067a2:	4b29      	ldr	r3, [pc, #164]	@ (8006848 <USBD_CDC_Init+0x1ec>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	2308      	movs	r3, #8
 80067a8:	2203      	movs	r2, #3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f002 fadb 	bl	8008d66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <USBD_CDC_Init+0x1ec>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3324      	adds	r3, #36	@ 0x24
 80067c6:	2201      	movs	r2, #1
 80067c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	33b0      	adds	r3, #176	@ 0xb0
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006800:	2302      	movs	r3, #2
 8006802:	e018      	b.n	8006836 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7c1b      	ldrb	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800680c:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 800680e:	7819      	ldrb	r1, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 fb92 	bl	8008f44 <USBD_LL_PrepareReceive>
 8006820:	e008      	b.n	8006834 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006822:	4b08      	ldr	r3, [pc, #32]	@ (8006844 <USBD_CDC_Init+0x1e8>)
 8006824:	7819      	ldrb	r1, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 fb88 	bl	8008f44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000093 	.word	0x20000093
 8006844:	20000094 	.word	0x20000094
 8006848:	20000095 	.word	0x20000095

0800684c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006858:	4b3a      	ldr	r3, [pc, #232]	@ (8006944 <USBD_CDC_DeInit+0xf8>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 faa7 	bl	8008db2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006864:	4b37      	ldr	r3, [pc, #220]	@ (8006944 <USBD_CDC_DeInit+0xf8>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3324      	adds	r3, #36	@ 0x24
 800687a:	2200      	movs	r2, #0
 800687c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800687e:	4b32      	ldr	r3, [pc, #200]	@ (8006948 <USBD_CDC_DeInit+0xfc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 fa94 	bl	8008db2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800688a:	4b2f      	ldr	r3, [pc, #188]	@ (8006948 <USBD_CDC_DeInit+0xfc>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f003 020f 	and.w	r2, r3, #15
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068a6:	4b29      	ldr	r3, [pc, #164]	@ (800694c <USBD_CDC_DeInit+0x100>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f002 fa80 	bl	8008db2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068b2:	4b26      	ldr	r3, [pc, #152]	@ (800694c <USBD_CDC_DeInit+0x100>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	3324      	adds	r3, #36	@ 0x24
 80068c8:	2200      	movs	r2, #0
 80068ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068cc:	4b1f      	ldr	r3, [pc, #124]	@ (800694c <USBD_CDC_DeInit+0x100>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3326      	adds	r3, #38	@ 0x26
 80068e2:	2200      	movs	r2, #0
 80068e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	32b0      	adds	r2, #176	@ 0xb0
 80068f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01f      	beq.n	8006938 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	33b0      	adds	r3, #176	@ 0xb0
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32b0      	adds	r2, #176	@ 0xb0
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	4618      	mov	r0, r3
 800691c:	f002 fb54 	bl	8008fc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32b0      	adds	r2, #176	@ 0xb0
 800692a:	2100      	movs	r1, #0
 800692c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000093 	.word	0x20000093
 8006948:	20000094 	.word	0x20000094
 800694c:	20000095 	.word	0x20000095

08006950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32b0      	adds	r2, #176	@ 0xb0
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	e0bf      	b.n	8006b00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006988:	2b00      	cmp	r3, #0
 800698a:	d050      	beq.n	8006a2e <USBD_CDC_Setup+0xde>
 800698c:	2b20      	cmp	r3, #32
 800698e:	f040 80af 	bne.w	8006af0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d03a      	beq.n	8006a10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da1b      	bge.n	80069dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	33b0      	adds	r3, #176	@ 0xb0
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	88d2      	ldrh	r2, [r2, #6]
 80069c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	88db      	ldrh	r3, [r3, #6]
 80069c6:	2b07      	cmp	r3, #7
 80069c8:	bf28      	it	cs
 80069ca:	2307      	movcs	r3, #7
 80069cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	89fa      	ldrh	r2, [r7, #14]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fd93 	bl	8008500 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069da:	e090      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785a      	ldrb	r2, [r3, #1]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	88db      	ldrh	r3, [r3, #6]
 80069ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80069ec:	d803      	bhi.n	80069f6 <USBD_CDC_Setup+0xa6>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	e000      	b.n	80069f8 <USBD_CDC_Setup+0xa8>
 80069f6:	2240      	movs	r2, #64	@ 0x40
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006a06:	461a      	mov	r2, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fda5 	bl	8008558 <USBD_CtlPrepareRx>
      break;
 8006a0e:	e076      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	@ 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	7850      	ldrb	r0, [r2, #1]
 8006a26:	2200      	movs	r2, #0
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4798      	blx	r3
      break;
 8006a2c:	e067      	b.n	8006afe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b0b      	cmp	r3, #11
 8006a34:	d851      	bhi.n	8006ada <USBD_CDC_Setup+0x18a>
 8006a36:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <USBD_CDC_Setup+0xec>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006adb 	.word	0x08006adb
 8006a4c:	08006adb 	.word	0x08006adb
 8006a50:	08006adb 	.word	0x08006adb
 8006a54:	08006adb 	.word	0x08006adb
 8006a58:	08006adb 	.word	0x08006adb
 8006a5c:	08006adb 	.word	0x08006adb
 8006a60:	08006adb 	.word	0x08006adb
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006ac1 	.word	0x08006ac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d107      	bne.n	8006a88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a78:	f107 030a 	add.w	r3, r7, #10
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fd3d 	bl	8008500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a86:	e032      	b.n	8006aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fcbb 	bl	8008406 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
          break;
 8006a94:	e02b      	b.n	8006aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d107      	bne.n	8006ab2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa2:	f107 030d 	add.w	r3, r7, #13
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fd28 	bl	8008500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab0:	e01d      	b.n	8006aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fca6 	bl	8008406 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aba:	2303      	movs	r3, #3
 8006abc:	75fb      	strb	r3, [r7, #23]
          break;
 8006abe:	e016      	b.n	8006aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d00f      	beq.n	8006aec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fc99 	bl	8008406 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ad8:	e008      	b.n	8006aec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fc92 	bl	8008406 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae6:	e002      	b.n	8006aee <USBD_CDC_Setup+0x19e>
          break;
 8006ae8:	bf00      	nop
 8006aea:	e008      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
          break;
 8006aec:	bf00      	nop
      }
      break;
 8006aee:	e006      	b.n	8006afe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fc87 	bl	8008406 <USBD_CtlError>
      ret = USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	32b0      	adds	r2, #176	@ 0xb0
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e065      	b.n	8006bfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32b0      	adds	r2, #176	@ 0xb0
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 020f 	and.w	r2, r3, #15
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	3318      	adds	r3, #24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02f      	beq.n	8006bbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f003 020f 	and.w	r2, r3, #15
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3318      	adds	r3, #24
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	f003 010f 	and.w	r1, r3, #15
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	440b      	add	r3, r1
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	331c      	adds	r3, #28
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d112      	bne.n	8006bbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3318      	adds	r3, #24
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bae:	78f9      	ldrb	r1, [r7, #3]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f002 f9a4 	bl	8008f02 <USBD_LL_Transmit>
 8006bba:	e01f      	b.n	8006bfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33b0      	adds	r3, #176	@ 0xb0
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d010      	beq.n	8006bfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	33b0      	adds	r3, #176	@ 0xb0
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32b0      	adds	r2, #176	@ 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32b0      	adds	r2, #176	@ 0xb0
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e01a      	b.n	8006c6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 f9a2 	bl	8008f86 <USBD_LL_GetRxDataSize>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	33b0      	adds	r3, #176	@ 0xb0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	32b0      	adds	r2, #176	@ 0xb0
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e024      	b.n	8006ce2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	33b0      	adds	r3, #176	@ 0xb0
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d019      	beq.n	8006ce0 <USBD_CDC_EP0_RxReady+0x6a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cb2:	2bff      	cmp	r3, #255	@ 0xff
 8006cb4:	d014      	beq.n	8006ce0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	33b0      	adds	r3, #176	@ 0xb0
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	22ff      	movs	r2, #255	@ 0xff
 8006cdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cf4:	2182      	movs	r1, #130	@ 0x82
 8006cf6:	4818      	ldr	r0, [pc, #96]	@ (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cf8:	f000 fd4f 	bl	800779a <USBD_GetEpDesc>
 8006cfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4815      	ldr	r0, [pc, #84]	@ (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d02:	f000 fd4a 	bl	800779a <USBD_GetEpDesc>
 8006d06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d08:	2181      	movs	r1, #129	@ 0x81
 8006d0a:	4813      	ldr	r0, [pc, #76]	@ (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d0c:	f000 fd45 	bl	800779a <USBD_GetEpDesc>
 8006d10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d2c:	711a      	strb	r2, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d40:	711a      	strb	r2, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2243      	movs	r2, #67	@ 0x43
 8006d4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000050 	.word	0x20000050

08006d5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d64:	2182      	movs	r1, #130	@ 0x82
 8006d66:	4818      	ldr	r0, [pc, #96]	@ (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d68:	f000 fd17 	bl	800779a <USBD_GetEpDesc>
 8006d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4815      	ldr	r0, [pc, #84]	@ (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d72:	f000 fd12 	bl	800779a <USBD_GetEpDesc>
 8006d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d78:	2181      	movs	r1, #129	@ 0x81
 8006d7a:	4813      	ldr	r0, [pc, #76]	@ (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d7c:	f000 fd0d 	bl	800779a <USBD_GetEpDesc>
 8006d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d006      	beq.n	8006da2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2200      	movs	r2, #0
 8006d98:	711a      	strb	r2, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f042 0202 	orr.w	r2, r2, #2
 8006da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	711a      	strb	r2, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f042 0202 	orr.w	r2, r2, #2
 8006db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2243      	movs	r2, #67	@ 0x43
 8006dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dbc:	4b02      	ldr	r3, [pc, #8]	@ (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000050 	.word	0x20000050

08006dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dd4:	2182      	movs	r1, #130	@ 0x82
 8006dd6:	4818      	ldr	r0, [pc, #96]	@ (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dd8:	f000 fcdf 	bl	800779a <USBD_GetEpDesc>
 8006ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dde:	2101      	movs	r1, #1
 8006de0:	4815      	ldr	r0, [pc, #84]	@ (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006de2:	f000 fcda 	bl	800779a <USBD_GetEpDesc>
 8006de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006de8:	2181      	movs	r1, #129	@ 0x81
 8006dea:	4813      	ldr	r0, [pc, #76]	@ (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dec:	f000 fcd5 	bl	800779a <USBD_GetEpDesc>
 8006df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d006      	beq.n	8006e12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e20:	711a      	strb	r2, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2243      	movs	r2, #67	@ 0x43
 8006e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e2c:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000050 	.word	0x20000050

08006e3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	220a      	movs	r2, #10
 8006e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	2000000c 	.word	0x2000000c

08006e5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e009      	b.n	8006e84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	33b0      	adds	r3, #176	@ 0xb0
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	32b0      	adds	r2, #176	@ 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e008      	b.n	8006ec8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	32b0      	adds	r2, #176	@ 0xb0
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e004      	b.n	8006f02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32b0      	adds	r2, #176	@ 0xb0
 8006f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e025      	b.n	8006f82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11f      	bne.n	8006f80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f48:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <USBD_CDC_TransmitPacket+0x7c>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4403      	add	r3, r0
 8006f62:	3318      	adds	r3, #24
 8006f64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f66:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <USBD_CDC_TransmitPacket+0x7c>)
 8006f68:	7819      	ldrb	r1, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 ffc3 	bl	8008f02 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000093 	.word	0x20000093

08006f90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32b0      	adds	r2, #176	@ 0xb0
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32b0      	adds	r2, #176	@ 0xb0
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e018      	b.n	8006ff0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7c1b      	ldrb	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <USBD_CDC_ReceivePacket+0x68>)
 8006fc8:	7819      	ldrb	r1, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 ffb5 	bl	8008f44 <USBD_LL_PrepareReceive>
 8006fda:	e008      	b.n	8006fee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <USBD_CDC_ReceivePacket+0x68>)
 8006fde:	7819      	ldrb	r1, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fe6:	2340      	movs	r3, #64	@ 0x40
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 ffab 	bl	8008f44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000094 	.word	0x20000094

08006ffc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e01f      	b.n	8007054 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	79fa      	ldrb	r2, [r7, #7]
 8007046:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f001 fe25 	bl	8008c98 <USBD_LL_Init>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e025      	b.n	80070c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32ae      	adds	r2, #174	@ 0xae
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00f      	beq.n	80070b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	@ 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	f107 020e 	add.w	r2, r7, #14
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fe2d 	bl	8008d30 <USBD_LL_Start>
 80070d6:	4603      	mov	r3, r0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4611      	mov	r1, r2
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f90c 	bl	8008392 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2b02      	cmp	r3, #2
 800719c:	d01a      	beq.n	80071d4 <USBD_LL_SetupStage+0x72>
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d822      	bhi.n	80071e8 <USBD_LL_SetupStage+0x86>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <USBD_LL_SetupStage+0x4a>
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d00a      	beq.n	80071c0 <USBD_LL_SetupStage+0x5e>
 80071aa:	e01d      	b.n	80071e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb63 	bl	8007880 <USBD_StdDevReq>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e020      	b.n	8007202 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fbcb 	bl	8007964 <USBD_StdItfReq>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
      break;
 80071d2:	e016      	b.n	8007202 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc2d 	bl	8007a3c <USBD_StdEPReq>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
      break;
 80071e6:	e00c      	b.n	8007202 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fdfa 	bl	8008df0 <USBD_LL_StallEP>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	bf00      	nop
  }

  return ret;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	460b      	mov	r3, r1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d16e      	bne.n	8007302 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800722a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007232:	2b03      	cmp	r3, #3
 8007234:	f040 8098 	bne.w	8007368 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	429a      	cmp	r2, r3
 8007242:	d913      	bls.n	800726c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	4293      	cmp	r3, r2
 800725c:	bf28      	it	cs
 800725e:	4613      	movcs	r3, r2
 8007260:	461a      	mov	r2, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f001 f994 	bl	8008592 <USBD_CtlContinueRx>
 800726a:	e07d      	b.n	8007368 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	2b02      	cmp	r3, #2
 8007278:	d014      	beq.n	80072a4 <USBD_LL_DataOutStage+0x98>
 800727a:	2b02      	cmp	r3, #2
 800727c:	d81d      	bhi.n	80072ba <USBD_LL_DataOutStage+0xae>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <USBD_LL_DataOutStage+0x7c>
 8007282:	2b01      	cmp	r3, #1
 8007284:	d003      	beq.n	800728e <USBD_LL_DataOutStage+0x82>
 8007286:	e018      	b.n	80072ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	75bb      	strb	r3, [r7, #22]
            break;
 800728c:	e018      	b.n	80072c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007294:	b2db      	uxtb	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa64 	bl	8007766 <USBD_CoreFindIF>
 800729e:	4603      	mov	r3, r0
 80072a0:	75bb      	strb	r3, [r7, #22]
            break;
 80072a2:	e00d      	b.n	80072c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4619      	mov	r1, r3
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fa66 	bl	8007780 <USBD_CoreFindEP>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75bb      	strb	r3, [r7, #22]
            break;
 80072b8:	e002      	b.n	80072c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75bb      	strb	r3, [r7, #22]
            break;
 80072be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072c0:	7dbb      	ldrb	r3, [r7, #22]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d119      	bne.n	80072fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d113      	bne.n	80072fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072d2:	7dba      	ldrb	r2, [r7, #22]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	32ae      	adds	r2, #174	@ 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072e2:	7dba      	ldrb	r2, [r7, #22]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072ea:	7dba      	ldrb	r2, [r7, #22]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	32ae      	adds	r2, #174	@ 0xae
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 f95a 	bl	80085b4 <USBD_CtlSendStatus>
 8007300:	e032      	b.n	8007368 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	b2db      	uxtb	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fa37 	bl	8007780 <USBD_CoreFindEP>
 8007312:	4603      	mov	r3, r0
 8007314:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	2bff      	cmp	r3, #255	@ 0xff
 800731a:	d025      	beq.n	8007368 <USBD_LL_DataOutStage+0x15c>
 800731c:	7dbb      	ldrb	r3, [r7, #22]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d122      	bne.n	8007368 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d117      	bne.n	800735e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800732e:	7dba      	ldrb	r2, [r7, #22]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	32ae      	adds	r2, #174	@ 0xae
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800733e:	7dba      	ldrb	r2, [r7, #22]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007346:	7dba      	ldrb	r2, [r7, #22]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	32ae      	adds	r2, #174	@ 0xae
 800734c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	7afa      	ldrb	r2, [r7, #11]
 8007354:	4611      	mov	r1, r2
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	4798      	blx	r3
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	e000      	b.n	800736a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	460b      	mov	r3, r1
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d16f      	bne.n	8007466 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3314      	adds	r3, #20
 800738a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007392:	2b02      	cmp	r3, #2
 8007394:	d15a      	bne.n	800744c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d914      	bls.n	80073cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 f8bc 	bl	8008536 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f001 fdbd 	bl	8008f44 <USBD_LL_PrepareReceive>
 80073ca:	e03f      	b.n	800744c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d11c      	bne.n	8007412 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d316      	bcc.n	8007412 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d20f      	bcs.n	8007412 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073f2:	2200      	movs	r2, #0
 80073f4:	2100      	movs	r1, #0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f001 f89d 	bl	8008536 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007404:	2300      	movs	r3, #0
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fd9a 	bl	8008f44 <USBD_LL_PrepareReceive>
 8007410:	e01c      	b.n	800744c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d10f      	bne.n	800743e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d009      	beq.n	800743e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800743e:	2180      	movs	r1, #128	@ 0x80
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 fcd5 	bl	8008df0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 f8c7 	bl	80085da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d03a      	beq.n	80074cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff fe42 	bl	80070e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007464:	e032      	b.n	80074cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007466:	7afb      	ldrb	r3, [r7, #11]
 8007468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f985 	bl	8007780 <USBD_CoreFindEP>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2bff      	cmp	r3, #255	@ 0xff
 800747e:	d025      	beq.n	80074cc <USBD_LL_DataInStage+0x15a>
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d122      	bne.n	80074cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b03      	cmp	r3, #3
 8007490:	d11c      	bne.n	80074cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007492:	7dfa      	ldrb	r2, [r7, #23]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	32ae      	adds	r2, #174	@ 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d014      	beq.n	80074cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074aa:	7dfa      	ldrb	r2, [r7, #23]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	32ae      	adds	r2, #174	@ 0xae
 80074b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	7afa      	ldrb	r2, [r7, #11]
 80074b8:	4611      	mov	r1, r2
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074c2:	7dbb      	ldrb	r3, [r7, #22]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074c8:	7dbb      	ldrb	r3, [r7, #22]
 80074ca:	e000      	b.n	80074ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d014      	beq.n	800753c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00e      	beq.n	800753c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6852      	ldr	r2, [r2, #4]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	4611      	mov	r1, r2
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800753c:	2340      	movs	r3, #64	@ 0x40
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fc0f 	bl	8008d66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2240      	movs	r2, #64	@ 0x40
 8007554:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007558:	2340      	movs	r3, #64	@ 0x40
 800755a:	2200      	movs	r2, #0
 800755c:	2180      	movs	r1, #128	@ 0x80
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fc01 	bl	8008d66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2240      	movs	r2, #64	@ 0x40
 800756e:	621a      	str	r2, [r3, #32]

  return ret;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d006      	beq.n	80075bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2204      	movs	r2, #4
 80075c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d106      	bne.n	80075f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b03      	cmp	r3, #3
 8007614:	d110      	bne.n	8007638 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32ae      	adds	r2, #174	@ 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007660:	2303      	movs	r3, #3
 8007662:	e01c      	b.n	800769e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b03      	cmp	r3, #3
 800766e:	d115      	bne.n	800769c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	32ae      	adds	r2, #174	@ 0xae
 800767a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	@ 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	78fa      	ldrb	r2, [r7, #3]
 8007696:	4611      	mov	r1, r2
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	32ae      	adds	r2, #174	@ 0xae
 80076bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e01c      	b.n	8007702 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d115      	bne.n	8007700 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32ae      	adds	r2, #174	@ 0xae
 80076de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32ae      	adds	r2, #174	@ 0xae
 80076f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	4611      	mov	r1, r2
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6852      	ldr	r2, [r2, #4]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	4611      	mov	r1, r2
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007772:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800778c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	7812      	ldrb	r2, [r2, #0]
 80077bc:	4293      	cmp	r3, r2
 80077be:	d91f      	bls.n	8007800 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077c6:	e013      	b.n	80077f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077c8:	f107 030a 	add.w	r3, r7, #10
 80077cc:	4619      	mov	r1, r3
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f000 f81b 	bl	800780a <USBD_GetNextDesc>
 80077d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b05      	cmp	r3, #5
 80077dc:	d108      	bne.n	80077f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	789b      	ldrb	r3, [r3, #2]
 80077e6:	78fa      	ldrb	r2, [r7, #3]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d008      	beq.n	80077fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	885b      	ldrh	r3, [r3, #2]
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	897b      	ldrh	r3, [r7, #10]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d8e5      	bhi.n	80077c8 <USBD_GetEpDesc+0x2e>
 80077fc:	e000      	b.n	8007800 <USBD_GetEpDesc+0x66>
          break;
 80077fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007800:	693b      	ldr	r3, [r7, #16]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	4413      	add	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007834:	68fb      	ldr	r3, [r7, #12]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	3301      	adds	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007860:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b21a      	sxth	r2, r3
 8007868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800786c:	4313      	orrs	r3, r2
 800786e:	b21b      	sxth	r3, r3
 8007870:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007872:	89fb      	ldrh	r3, [r7, #14]
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007896:	2b40      	cmp	r3, #64	@ 0x40
 8007898:	d005      	beq.n	80078a6 <USBD_StdDevReq+0x26>
 800789a:	2b40      	cmp	r3, #64	@ 0x40
 800789c:	d857      	bhi.n	800794e <USBD_StdDevReq+0xce>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <USBD_StdDevReq+0x42>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d153      	bne.n	800794e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	32ae      	adds	r2, #174	@ 0xae
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	e04a      	b.n	8007958 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b09      	cmp	r3, #9
 80078c8:	d83b      	bhi.n	8007942 <USBD_StdDevReq+0xc2>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <USBD_StdDevReq+0x50>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007925 	.word	0x08007925
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007943 	.word	0x08007943
 80078dc:	0800792f 	.word	0x0800792f
 80078e0:	08007943 	.word	0x08007943
 80078e4:	08007903 	.word	0x08007903
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	08007943 	.word	0x08007943
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800790d 	.word	0x0800790d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa3c 	bl	8007d78 <USBD_GetDescriptor>
          break;
 8007900:	e024      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fba1 	bl	800804c <USBD_SetAddress>
          break;
 800790a:	e01f      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fbe0 	bl	80080d4 <USBD_SetConfig>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
          break;
 8007918:	e018      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc83 	bl	8008228 <USBD_GetConfig>
          break;
 8007922:	e013      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fcb4 	bl	8008294 <USBD_GetStatus>
          break;
 800792c:	e00e      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fce3 	bl	80082fc <USBD_SetFeature>
          break;
 8007936:	e009      	b.n	800794c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fd07 	bl	800834e <USBD_ClrFeature>
          break;
 8007940:	e004      	b.n	800794c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fd5e 	bl	8008406 <USBD_CtlError>
          break;
 800794a:	bf00      	nop
      }
      break;
 800794c:	e004      	b.n	8007958 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fd58 	bl	8008406 <USBD_CtlError>
      break;
 8007956:	bf00      	nop
  }

  return ret;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop

08007964 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800797a:	2b40      	cmp	r3, #64	@ 0x40
 800797c:	d005      	beq.n	800798a <USBD_StdItfReq+0x26>
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d852      	bhi.n	8007a28 <USBD_StdItfReq+0xc4>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <USBD_StdItfReq+0x26>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d14e      	bne.n	8007a28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	2b02      	cmp	r3, #2
 8007996:	d840      	bhi.n	8007a1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	889b      	ldrh	r3, [r3, #4]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d836      	bhi.n	8007a10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	889b      	ldrh	r3, [r3, #4]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fedb 	bl	8007766 <USBD_CoreFindIF>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2bff      	cmp	r3, #255	@ 0xff
 80079b8:	d01d      	beq.n	80079f6 <USBD_StdItfReq+0x92>
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11a      	bne.n	80079f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079c0:	7bba      	ldrb	r2, [r7, #14]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32ae      	adds	r2, #174	@ 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00f      	beq.n	80079f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079d0:	7bba      	ldrb	r2, [r7, #14]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079d8:	7bba      	ldrb	r2, [r7, #14]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	32ae      	adds	r2, #174	@ 0xae
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ee:	e004      	b.n	80079fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079f4:	e001      	b.n	80079fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079f6:	2303      	movs	r3, #3
 80079f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	88db      	ldrh	r3, [r3, #6]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d110      	bne.n	8007a24 <USBD_StdItfReq+0xc0>
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10d      	bne.n	8007a24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fdd3 	bl	80085b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a0e:	e009      	b.n	8007a24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fcf7 	bl	8008406 <USBD_CtlError>
          break;
 8007a18:	e004      	b.n	8007a24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fcf2 	bl	8008406 <USBD_CtlError>
          break;
 8007a22:	e000      	b.n	8007a26 <USBD_StdItfReq+0xc2>
          break;
 8007a24:	bf00      	nop
      }
      break;
 8007a26:	e004      	b.n	8007a32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fceb 	bl	8008406 <USBD_CtlError>
      break;
 8007a30:	bf00      	nop
  }

  return ret;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	d007      	beq.n	8007a6c <USBD_StdEPReq+0x30>
 8007a5c:	2b40      	cmp	r3, #64	@ 0x40
 8007a5e:	f200 817f 	bhi.w	8007d60 <USBD_StdEPReq+0x324>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02a      	beq.n	8007abc <USBD_StdEPReq+0x80>
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	f040 817a 	bne.w	8007d60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff fe85 	bl	8007780 <USBD_CoreFindEP>
 8007a76:	4603      	mov	r3, r0
 8007a78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	2bff      	cmp	r3, #255	@ 0xff
 8007a7e:	f000 8174 	beq.w	8007d6a <USBD_StdEPReq+0x32e>
 8007a82:	7b7b      	ldrb	r3, [r7, #13]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8170 	bne.w	8007d6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a8a:	7b7a      	ldrb	r2, [r7, #13]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a92:	7b7a      	ldrb	r2, [r7, #13]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	32ae      	adds	r2, #174	@ 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8163 	beq.w	8007d6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007aa4:	7b7a      	ldrb	r2, [r7, #13]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32ae      	adds	r2, #174	@ 0xae
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	4798      	blx	r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aba:	e156      	b.n	8007d6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d008      	beq.n	8007ad6 <USBD_StdEPReq+0x9a>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	f300 8145 	bgt.w	8007d54 <USBD_StdEPReq+0x318>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 809b 	beq.w	8007c06 <USBD_StdEPReq+0x1ca>
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d03c      	beq.n	8007b4e <USBD_StdEPReq+0x112>
 8007ad4:	e13e      	b.n	8007d54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d002      	beq.n	8007ae8 <USBD_StdEPReq+0xac>
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d016      	beq.n	8007b14 <USBD_StdEPReq+0xd8>
 8007ae6:	e02c      	b.n	8007b42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <USBD_StdEPReq+0xce>
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b80      	cmp	r3, #128	@ 0x80
 8007af2:	d00a      	beq.n	8007b0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f979 	bl	8008df0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afe:	2180      	movs	r1, #128	@ 0x80
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f975 	bl	8008df0 <USBD_LL_StallEP>
 8007b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b08:	e020      	b.n	8007b4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fc7a 	bl	8008406 <USBD_CtlError>
              break;
 8007b12:	e01b      	b.n	8007b4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	885b      	ldrh	r3, [r3, #2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10e      	bne.n	8007b3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <USBD_StdEPReq+0xfe>
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b80      	cmp	r3, #128	@ 0x80
 8007b26:	d008      	beq.n	8007b3a <USBD_StdEPReq+0xfe>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f95b 	bl	8008df0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fd3a 	bl	80085b4 <USBD_CtlSendStatus>

              break;
 8007b40:	e004      	b.n	8007b4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc5e 	bl	8008406 <USBD_CtlError>
              break;
 8007b4a:	bf00      	nop
          }
          break;
 8007b4c:	e107      	b.n	8007d5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d002      	beq.n	8007b60 <USBD_StdEPReq+0x124>
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d016      	beq.n	8007b8c <USBD_StdEPReq+0x150>
 8007b5e:	e04b      	b.n	8007bf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00d      	beq.n	8007b82 <USBD_StdEPReq+0x146>
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b80      	cmp	r3, #128	@ 0x80
 8007b6a:	d00a      	beq.n	8007b82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f93d 	bl	8008df0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b76:	2180      	movs	r1, #128	@ 0x80
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f939 	bl	8008df0 <USBD_LL_StallEP>
 8007b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b80:	e040      	b.n	8007c04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fc3e 	bl	8008406 <USBD_CtlError>
              break;
 8007b8a:	e03b      	b.n	8007c04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d136      	bne.n	8007c02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 f943 	bl	8008e2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fd03 	bl	80085b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fde4 	bl	8007780 <USBD_CoreFindEP>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bbc:	7b7b      	ldrb	r3, [r7, #13]
 8007bbe:	2bff      	cmp	r3, #255	@ 0xff
 8007bc0:	d01f      	beq.n	8007c02 <USBD_StdEPReq+0x1c6>
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11c      	bne.n	8007c02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bc8:	7b7a      	ldrb	r2, [r7, #13]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bd0:	7b7a      	ldrb	r2, [r7, #13]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32ae      	adds	r2, #174	@ 0xae
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007be0:	7b7a      	ldrb	r2, [r7, #13]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	32ae      	adds	r2, #174	@ 0xae
 8007be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bf6:	e004      	b.n	8007c02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fc03 	bl	8008406 <USBD_CtlError>
              break;
 8007c00:	e000      	b.n	8007c04 <USBD_StdEPReq+0x1c8>
              break;
 8007c02:	bf00      	nop
          }
          break;
 8007c04:	e0ab      	b.n	8007d5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d002      	beq.n	8007c18 <USBD_StdEPReq+0x1dc>
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d032      	beq.n	8007c7c <USBD_StdEPReq+0x240>
 8007c16:	e097      	b.n	8007d48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <USBD_StdEPReq+0x1f2>
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b80      	cmp	r3, #128	@ 0x80
 8007c22:	d004      	beq.n	8007c2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fbed 	bl	8008406 <USBD_CtlError>
                break;
 8007c2c:	e091      	b.n	8007d52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da0b      	bge.n	8007c4e <USBD_StdEPReq+0x212>
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	3310      	adds	r3, #16
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	e00b      	b.n	8007c66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	3304      	adds	r3, #4
 8007c66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2202      	movs	r2, #2
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fc43 	bl	8008500 <USBD_CtlSendData>
              break;
 8007c7a:	e06a      	b.n	8007d52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da11      	bge.n	8007ca8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	3324      	adds	r3, #36	@ 0x24
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d117      	bne.n	8007cce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fbb0 	bl	8008406 <USBD_CtlError>
                  break;
 8007ca6:	e054      	b.n	8007d52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb9d 	bl	8008406 <USBD_CtlError>
                  break;
 8007ccc:	e041      	b.n	8007d52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da0b      	bge.n	8007cee <USBD_StdEPReq+0x2b2>
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	3310      	adds	r3, #16
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	4413      	add	r3, r2
 8007cea:	3304      	adds	r3, #4
 8007cec:	e00b      	b.n	8007d06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <USBD_StdEPReq+0x2d8>
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b80      	cmp	r3, #128	@ 0x80
 8007d12:	d103      	bne.n	8007d1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e00e      	b.n	8007d3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f8a3 	bl	8008e6c <USBD_LL_IsStallEP>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fbdd 	bl	8008500 <USBD_CtlSendData>
              break;
 8007d46:	e004      	b.n	8007d52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb5b 	bl	8008406 <USBD_CtlError>
              break;
 8007d50:	bf00      	nop
          }
          break;
 8007d52:	e004      	b.n	8007d5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb55 	bl	8008406 <USBD_CtlError>
          break;
 8007d5c:	bf00      	nop
      }
      break;
 8007d5e:	e005      	b.n	8007d6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fb4f 	bl	8008406 <USBD_CtlError>
      break;
 8007d68:	e000      	b.n	8007d6c <USBD_StdEPReq+0x330>
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	885b      	ldrh	r3, [r3, #2]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	f200 8128 	bhi.w	8007fee <USBD_GetDescriptor+0x276>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <USBD_GetDescriptor+0x2c>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007e19 	.word	0x08007e19
 8007db0:	08007fef 	.word	0x08007fef
 8007db4:	08007fef 	.word	0x08007fef
 8007db8:	08007f8f 	.word	0x08007f8f
 8007dbc:	08007fbb 	.word	0x08007fbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
      break;
 8007dd6:	e112      	b.n	8007ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7c1b      	ldrb	r3, [r3, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10d      	bne.n	8007dfc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	f107 0208 	add.w	r2, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	2202      	movs	r2, #2
 8007df8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dfa:	e100      	b.n	8007ffe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e04:	f107 0208 	add.w	r2, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3301      	adds	r3, #1
 8007e12:	2202      	movs	r2, #2
 8007e14:	701a      	strb	r2, [r3, #0]
      break;
 8007e16:	e0f2      	b.n	8007ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	885b      	ldrh	r3, [r3, #2]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	f200 80ac 	bhi.w	8007f7c <USBD_GetDescriptor+0x204>
 8007e24:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <USBD_GetDescriptor+0xb4>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e79 	.word	0x08007e79
 8007e34:	08007ead 	.word	0x08007ead
 8007e38:	08007ee1 	.word	0x08007ee1
 8007e3c:	08007f15 	.word	0x08007f15
 8007e40:	08007f49 	.word	0x08007f49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e091      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 facb 	bl	8008406 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e089      	b.n	8007f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e077      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fab1 	bl	8008406 <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e06f      	b.n	8007f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7c12      	ldrb	r2, [r2, #16]
 8007ec4:	f107 0108 	add.w	r1, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ece:	e05d      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa97 	bl	8008406 <USBD_CtlError>
            err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ede:	e055      	b.n	8007f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7c12      	ldrb	r2, [r2, #16]
 8007ef8:	f107 0108 	add.w	r1, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f02:	e043      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa7d 	bl	8008406 <USBD_CtlError>
            err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
          break;
 8007f12:	e03b      	b.n	8007f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7c12      	ldrb	r2, [r2, #16]
 8007f2c:	f107 0108 	add.w	r1, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f36:	e029      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa63 	bl	8008406 <USBD_CtlError>
            err++;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	3301      	adds	r3, #1
 8007f44:	72fb      	strb	r3, [r7, #11]
          break;
 8007f46:	e021      	b.n	8007f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00b      	beq.n	8007f6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7c12      	ldrb	r2, [r2, #16]
 8007f60:	f107 0108 	add.w	r1, r7, #8
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f6a:	e00f      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa49 	bl	8008406 <USBD_CtlError>
            err++;
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	3301      	adds	r3, #1
 8007f78:	72fb      	strb	r3, [r7, #11]
          break;
 8007f7a:	e007      	b.n	8007f8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa41 	bl	8008406 <USBD_CtlError>
          err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f8a:	bf00      	nop
      }
      break;
 8007f8c:	e037      	b.n	8007ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7c1b      	ldrb	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9e:	f107 0208 	add.w	r2, r7, #8
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4798      	blx	r3
 8007fa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fa8:	e029      	b.n	8007ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa2a 	bl	8008406 <USBD_CtlError>
        err++;
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fb8:	e021      	b.n	8007ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7c1b      	ldrb	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fca:	f107 0208 	add.w	r2, r7, #8
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4798      	blx	r3
 8007fd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	2207      	movs	r2, #7
 8007fda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fdc:	e00f      	b.n	8007ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fa10 	bl	8008406 <USBD_CtlError>
        err++;
 8007fe6:	7afb      	ldrb	r3, [r7, #11]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	72fb      	strb	r3, [r7, #11]
      break;
 8007fec:	e007      	b.n	8007ffe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa08 	bl	8008406 <USBD_CtlError>
      err++;
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8007ffc:	bf00      	nop
  }

  if (err != 0U)
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11e      	bne.n	8008042 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	88db      	ldrh	r3, [r3, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d016      	beq.n	800803a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800800c:	893b      	ldrh	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00e      	beq.n	8008030 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88da      	ldrh	r2, [r3, #6]
 8008016:	893b      	ldrh	r3, [r7, #8]
 8008018:	4293      	cmp	r3, r2
 800801a:	bf28      	it	cs
 800801c:	4613      	movcs	r3, r2
 800801e:	b29b      	uxth	r3, r3
 8008020:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008022:	893b      	ldrh	r3, [r7, #8]
 8008024:	461a      	mov	r2, r3
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa69 	bl	8008500 <USBD_CtlSendData>
 800802e:	e009      	b.n	8008044 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9e7 	bl	8008406 <USBD_CtlError>
 8008038:	e004      	b.n	8008044 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 faba 	bl	80085b4 <USBD_CtlSendStatus>
 8008040:	e000      	b.n	8008044 <USBD_GetDescriptor+0x2cc>
    return;
 8008042:	bf00      	nop
  }
}
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop

0800804c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	889b      	ldrh	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d131      	bne.n	80080c2 <USBD_SetAddress+0x76>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	88db      	ldrh	r3, [r3, #6]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d12d      	bne.n	80080c2 <USBD_SetAddress+0x76>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	2b7f      	cmp	r3, #127	@ 0x7f
 800806c:	d829      	bhi.n	80080c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d104      	bne.n	8008090 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9bc 	bl	8008406 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	e01d      	b.n	80080cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7bfa      	ldrb	r2, [r7, #15]
 8008094:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 ff11 	bl	8008ec4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa86 	bl	80085b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b6:	e009      	b.n	80080cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c0:	e004      	b.n	80080cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f99e 	bl	8008406 <USBD_CtlError>
  }
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008224 <USBD_SetConfig+0x150>)
 80080ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008224 <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d905      	bls.n	8008100 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f985 	bl	8008406 <USBD_CtlError>
    return USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e08c      	b.n	800821a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d002      	beq.n	8008112 <USBD_SetConfig+0x3e>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d029      	beq.n	8008164 <USBD_SetConfig+0x90>
 8008110:	e075      	b.n	80081fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008112:	4b44      	ldr	r3, [pc, #272]	@ (8008224 <USBD_SetConfig+0x150>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d020      	beq.n	800815c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800811a:	4b42      	ldr	r3, [pc, #264]	@ (8008224 <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008124:	4b3f      	ldr	r3, [pc, #252]	@ (8008224 <USBD_SetConfig+0x150>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fe ffe3 	bl	80070f6 <USBD_SetClassConfig>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d008      	beq.n	800814c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f962 	bl	8008406 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800814a:	e065      	b.n	8008218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fa31 	bl	80085b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2203      	movs	r2, #3
 8008156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800815a:	e05d      	b.n	8008218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fa29 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 8008162:	e059      	b.n	8008218 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008164:	4b2f      	ldr	r3, [pc, #188]	@ (8008224 <USBD_SetConfig+0x150>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d112      	bne.n	8008192 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008174:	4b2b      	ldr	r3, [pc, #172]	@ (8008224 <USBD_SetConfig+0x150>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800817e:	4b29      	ldr	r3, [pc, #164]	@ (8008224 <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fe ffd2 	bl	800712e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa12 	bl	80085b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008190:	e042      	b.n	8008218 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008192:	4b24      	ldr	r3, [pc, #144]	@ (8008224 <USBD_SetConfig+0x150>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d02a      	beq.n	80081f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe ffc0 	bl	800712e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008224 <USBD_SetConfig+0x150>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <USBD_SetConfig+0x150>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fe ff99 	bl	80070f6 <USBD_SetClassConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f918 	bl	8008406 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7fe ffa5 	bl	800712e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081ec:	e014      	b.n	8008218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f9e0 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 80081f4:	e010      	b.n	8008218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f9dc 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 80081fc:	e00c      	b.n	8008218 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f900 	bl	8008406 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008206:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <USBD_SetConfig+0x150>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fe ff8e 	bl	800712e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
      break;
 8008216:	bf00      	nop
  }

  return ret;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000274 	.word	0x20000274

08008228 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	88db      	ldrh	r3, [r3, #6]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d004      	beq.n	8008244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8e2 	bl	8008406 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008242:	e023      	b.n	800828c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	dc02      	bgt.n	8008256 <USBD_GetConfig+0x2e>
 8008250:	2b00      	cmp	r3, #0
 8008252:	dc03      	bgt.n	800825c <USBD_GetConfig+0x34>
 8008254:	e015      	b.n	8008282 <USBD_GetConfig+0x5a>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d00b      	beq.n	8008272 <USBD_GetConfig+0x4a>
 800825a:	e012      	b.n	8008282 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3308      	adds	r3, #8
 8008266:	2201      	movs	r2, #1
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f948 	bl	8008500 <USBD_CtlSendData>
        break;
 8008270:	e00c      	b.n	800828c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3304      	adds	r3, #4
 8008276:	2201      	movs	r2, #1
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f940 	bl	8008500 <USBD_CtlSendData>
        break;
 8008280:	e004      	b.n	800828c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f8be 	bl	8008406 <USBD_CtlError>
        break;
 800828a:	bf00      	nop
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d81e      	bhi.n	80082ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	88db      	ldrh	r3, [r3, #6]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d004      	beq.n	80082be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8a5 	bl	8008406 <USBD_CtlError>
        break;
 80082bc:	e01a      	b.n	80082f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f043 0202 	orr.w	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	330c      	adds	r3, #12
 80082de:	2202      	movs	r2, #2
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f90c 	bl	8008500 <USBD_CtlSendData>
      break;
 80082e8:	e004      	b.n	80082f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f88a 	bl	8008406 <USBD_CtlError>
      break;
 80082f2:	bf00      	nop
  }
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d107      	bne.n	800831e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f94c 	bl	80085b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800831c:	e013      	b.n	8008346 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	885b      	ldrh	r3, [r3, #2]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d10b      	bne.n	800833e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	889b      	ldrh	r3, [r3, #4]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b29b      	uxth	r3, r3
 800832e:	b2da      	uxtb	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f93c 	bl	80085b4 <USBD_CtlSendStatus>
}
 800833c:	e003      	b.n	8008346 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f860 	bl	8008406 <USBD_CtlError>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800835e:	b2db      	uxtb	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	2b02      	cmp	r3, #2
 8008364:	d80b      	bhi.n	800837e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d10c      	bne.n	8008388 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f91c 	bl	80085b4 <USBD_CtlSendStatus>
      }
      break;
 800837c:	e004      	b.n	8008388 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f840 	bl	8008406 <USBD_CtlError>
      break;
 8008386:	e000      	b.n	800838a <USBD_ClrFeature+0x3c>
      break;
 8008388:	bf00      	nop
  }
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fa40 	bl	8007842 <SWAPBYTE>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff fa33 	bl	8007842 <SWAPBYTE>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fa26 	bl	8007842 <SWAPBYTE>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	80da      	strh	r2, [r3, #6]
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fcec 	bl	8008df0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008418:	2100      	movs	r1, #0
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fce8 	bl	8008df0 <USBD_LL_StallEP>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d042      	beq.n	80084c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008442:	6938      	ldr	r0, [r7, #16]
 8008444:	f000 f842 	bl	80084cc <USBD_GetLen>
 8008448:	4603      	mov	r3, r0
 800844a:	3301      	adds	r3, #1
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008452:	d808      	bhi.n	8008466 <USBD_GetString+0x3e>
 8008454:	6938      	ldr	r0, [r7, #16]
 8008456:	f000 f839 	bl	80084cc <USBD_GetLen>
 800845a:	4603      	mov	r3, r0
 800845c:	3301      	adds	r3, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	e001      	b.n	800846a <USBD_GetString+0x42>
 8008466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4413      	add	r3, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	701a      	strb	r2, [r3, #0]
  idx++;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	4413      	add	r3, r2
 8008486:	2203      	movs	r2, #3
 8008488:	701a      	strb	r2, [r3, #0]
  idx++;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	3301      	adds	r3, #1
 800848e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008490:	e013      	b.n	80084ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	4413      	add	r3, r2
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3301      	adds	r3, #1
 80084a2:	613b      	str	r3, [r7, #16]
    idx++;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	3301      	adds	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	3301      	adds	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e7      	bne.n	8008492 <USBD_GetString+0x6a>
 80084c2:	e000      	b.n	80084c6 <USBD_GetString+0x9e>
    return;
 80084c4:	bf00      	nop
  }
}
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084dc:	e005      	b.n	80084ea <USBD_GetLen+0x1e>
  {
    len++;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3301      	adds	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f5      	bne.n	80084de <USBD_GetLen+0x12>
  }

  return len;
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2202      	movs	r2, #2
 8008510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	2100      	movs	r1, #0
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fceb 	bl	8008f02 <USBD_LL_Transmit>

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	2100      	movs	r1, #0
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fcda 	bl	8008f02 <USBD_LL_Transmit>

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2203      	movs	r2, #3
 8008568:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	2100      	movs	r1, #0
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fcde 	bl	8008f44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	2100      	movs	r1, #0
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fccd 	bl	8008f44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085c4:	2300      	movs	r3, #0
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fc99 	bl	8008f02 <USBD_LL_Transmit>

  return USBD_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2205      	movs	r2, #5
 80085e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085ea:	2300      	movs	r3, #0
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fca7 	bl	8008f44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008604:	2200      	movs	r2, #0
 8008606:	4912      	ldr	r1, [pc, #72]	@ (8008650 <MX_USB_DEVICE_Init+0x50>)
 8008608:	4812      	ldr	r0, [pc, #72]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800860a:	f7fe fcf7 	bl	8006ffc <USBD_Init>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008614:	f7f8 fa3e 	bl	8000a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008618:	490f      	ldr	r1, [pc, #60]	@ (8008658 <MX_USB_DEVICE_Init+0x58>)
 800861a:	480e      	ldr	r0, [pc, #56]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800861c:	f7fe fd1e 	bl	800705c <USBD_RegisterClass>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008626:	f7f8 fa35 	bl	8000a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800862a:	490c      	ldr	r1, [pc, #48]	@ (800865c <MX_USB_DEVICE_Init+0x5c>)
 800862c:	4809      	ldr	r0, [pc, #36]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800862e:	f7fe fc15 	bl	8006e5c <USBD_CDC_RegisterInterface>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008638:	f7f8 fa2c 	bl	8000a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800863c:	4805      	ldr	r0, [pc, #20]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800863e:	f7fe fd43 	bl	80070c8 <USBD_Start>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008648:	f7f8 fa24 	bl	8000a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}
 8008650:	200000ac 	.word	0x200000ac
 8008654:	20000278 	.word	0x20000278
 8008658:	20000018 	.word	0x20000018
 800865c:	20000098 	.word	0x20000098

08008660 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008664:	2200      	movs	r2, #0
 8008666:	4905      	ldr	r1, [pc, #20]	@ (800867c <CDC_Init_FS+0x1c>)
 8008668:	4805      	ldr	r0, [pc, #20]	@ (8008680 <CDC_Init_FS+0x20>)
 800866a:	f7fe fc11 	bl	8006e90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800866e:	4905      	ldr	r1, [pc, #20]	@ (8008684 <CDC_Init_FS+0x24>)
 8008670:	4803      	ldr	r0, [pc, #12]	@ (8008680 <CDC_Init_FS+0x20>)
 8008672:	f7fe fc2f 	bl	8006ed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008676:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008678:	4618      	mov	r0, r3
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000d54 	.word	0x20000d54
 8008680:	20000278 	.word	0x20000278
 8008684:	20000554 	.word	0x20000554

08008688 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800868c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800868e:	4618      	mov	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	4613      	mov	r3, r2
 80086a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b23      	cmp	r3, #35	@ 0x23
 80086ac:	d84a      	bhi.n	8008744 <CDC_Control_FS+0xac>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <CDC_Control_FS+0x1c>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008745 	.word	0x08008745
 80086b8:	08008745 	.word	0x08008745
 80086bc:	08008745 	.word	0x08008745
 80086c0:	08008745 	.word	0x08008745
 80086c4:	08008745 	.word	0x08008745
 80086c8:	08008745 	.word	0x08008745
 80086cc:	08008745 	.word	0x08008745
 80086d0:	08008745 	.word	0x08008745
 80086d4:	08008745 	.word	0x08008745
 80086d8:	08008745 	.word	0x08008745
 80086dc:	08008745 	.word	0x08008745
 80086e0:	08008745 	.word	0x08008745
 80086e4:	08008745 	.word	0x08008745
 80086e8:	08008745 	.word	0x08008745
 80086ec:	08008745 	.word	0x08008745
 80086f0:	08008745 	.word	0x08008745
 80086f4:	08008745 	.word	0x08008745
 80086f8:	08008745 	.word	0x08008745
 80086fc:	08008745 	.word	0x08008745
 8008700:	08008745 	.word	0x08008745
 8008704:	08008745 	.word	0x08008745
 8008708:	08008745 	.word	0x08008745
 800870c:	08008745 	.word	0x08008745
 8008710:	08008745 	.word	0x08008745
 8008714:	08008745 	.word	0x08008745
 8008718:	08008745 	.word	0x08008745
 800871c:	08008745 	.word	0x08008745
 8008720:	08008745 	.word	0x08008745
 8008724:	08008745 	.word	0x08008745
 8008728:	08008745 	.word	0x08008745
 800872c:	08008745 	.word	0x08008745
 8008730:	08008745 	.word	0x08008745
 8008734:	08008745 	.word	0x08008745
 8008738:	08008745 	.word	0x08008745
 800873c:	08008745 	.word	0x08008745
 8008740:	08008745 	.word	0x08008745
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008744:	bf00      	nop
  }

  return (USBD_OK);
 8008746:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <CDC_Receive_FS+0x24>)
 8008762:	f7fe fbb7 	bl	8006ed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008766:	4804      	ldr	r0, [pc, #16]	@ (8008778 <CDC_Receive_FS+0x24>)
 8008768:	f7fe fc12 	bl	8006f90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800876c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000278 	.word	0x20000278

0800877c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800878c:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 800878e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008792:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800879e:	2301      	movs	r3, #1
 80087a0:	e00b      	b.n	80087ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087a2:	887b      	ldrh	r3, [r7, #2]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4806      	ldr	r0, [pc, #24]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 80087aa:	f7fe fb71 	bl	8006e90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087ae:	4805      	ldr	r0, [pc, #20]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 80087b0:	f7fe fbae 	bl	8006f10 <USBD_CDC_TransmitPacket>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000278 	.word	0x20000278

080087c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2212      	movs	r2, #18
 80087fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087fe:	4b03      	ldr	r3, [pc, #12]	@ (800880c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200000c8 	.word	0x200000c8

08008810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2204      	movs	r2, #4
 8008820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008822:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	200000dc 	.word	0x200000dc

08008834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4907      	ldr	r1, [pc, #28]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
 800884a:	4808      	ldr	r0, [pc, #32]	@ (800886c <USBD_FS_ProductStrDescriptor+0x38>)
 800884c:	f7ff fdec 	bl	8008428 <USBD_GetString>
 8008850:	e004      	b.n	800885c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4904      	ldr	r1, [pc, #16]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <USBD_FS_ProductStrDescriptor+0x38>)
 8008858:	f7ff fde6 	bl	8008428 <USBD_GetString>
  }
  return USBD_StrDesc;
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20001554 	.word	0x20001554
 800886c:	080099a4 	.word	0x080099a4

08008870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	4904      	ldr	r1, [pc, #16]	@ (8008890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008880:	4804      	ldr	r0, [pc, #16]	@ (8008894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008882:	f7ff fdd1 	bl	8008428 <USBD_GetString>
  return USBD_StrDesc;
 8008886:	4b02      	ldr	r3, [pc, #8]	@ (8008890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20001554 	.word	0x20001554
 8008894:	080099bc 	.word	0x080099bc

08008898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	221a      	movs	r2, #26
 80088a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088aa:	f000 f843 	bl	8008934 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088ae:	4b02      	ldr	r3, [pc, #8]	@ (80088b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200000e0 	.word	0x200000e0

080088bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d105      	bne.n	80088da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4907      	ldr	r1, [pc, #28]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088d2:	4808      	ldr	r0, [pc, #32]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088d4:	f7ff fda8 	bl	8008428 <USBD_GetString>
 80088d8:	e004      	b.n	80088e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4904      	ldr	r1, [pc, #16]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088de:	4805      	ldr	r0, [pc, #20]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088e0:	f7ff fda2 	bl	8008428 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e4:	4b02      	ldr	r3, [pc, #8]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20001554 	.word	0x20001554
 80088f4:	080099d0 	.word	0x080099d0

080088f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4907      	ldr	r1, [pc, #28]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800890e:	4808      	ldr	r0, [pc, #32]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008910:	f7ff fd8a 	bl	8008428 <USBD_GetString>
 8008914:	e004      	b.n	8008920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4904      	ldr	r1, [pc, #16]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800891a:	4805      	ldr	r0, [pc, #20]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800891c:	f7ff fd84 	bl	8008428 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001554 	.word	0x20001554
 8008930:	080099dc 	.word	0x080099dc

08008934 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800893a:	4b0f      	ldr	r3, [pc, #60]	@ (8008978 <Get_SerialNum+0x44>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008940:	4b0e      	ldr	r3, [pc, #56]	@ (800897c <Get_SerialNum+0x48>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008946:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <Get_SerialNum+0x4c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800895a:	2208      	movs	r2, #8
 800895c:	4909      	ldr	r1, [pc, #36]	@ (8008984 <Get_SerialNum+0x50>)
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f814 	bl	800898c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008964:	2204      	movs	r2, #4
 8008966:	4908      	ldr	r1, [pc, #32]	@ (8008988 <Get_SerialNum+0x54>)
 8008968:	68b8      	ldr	r0, [r7, #8]
 800896a:	f000 f80f 	bl	800898c <IntToUnicode>
  }
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	1fff7a10 	.word	0x1fff7a10
 800897c:	1fff7a14 	.word	0x1fff7a14
 8008980:	1fff7a18 	.word	0x1fff7a18
 8008984:	200000e2 	.word	0x200000e2
 8008988:	200000f2 	.word	0x200000f2

0800898c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4613      	mov	r3, r2
 8008998:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e027      	b.n	80089f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	0f1b      	lsrs	r3, r3, #28
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	d80b      	bhi.n	80089c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	0f1b      	lsrs	r3, r3, #28
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	4619      	mov	r1, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	440b      	add	r3, r1
 80089bc:	3230      	adds	r2, #48	@ 0x30
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	e00a      	b.n	80089da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	0f1b      	lsrs	r3, r3, #28
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	4619      	mov	r1, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	440b      	add	r3, r1
 80089d4:	3237      	adds	r2, #55	@ 0x37
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	3301      	adds	r3, #1
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	4413      	add	r3, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	3301      	adds	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
 80089f4:	7dfa      	ldrb	r2, [r7, #23]
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d3d3      	bcc.n	80089a4 <IntToUnicode+0x18>
  }
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	@ 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a2c:	d13a      	bne.n	8008aa4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	4b1e      	ldr	r3, [pc, #120]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a36:	4a1d      	ldr	r2, [pc, #116]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
 8008a48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a50:	2302      	movs	r3, #2
 8008a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a5c:	230a      	movs	r3, #10
 8008a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a60:	f107 0314 	add.w	r3, r7, #20
 8008a64:	4619      	mov	r1, r3
 8008a66:	4812      	ldr	r0, [pc, #72]	@ (8008ab0 <HAL_PCD_MspInit+0xa4>)
 8008a68:	f7f9 faf4 	bl	8002054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a70:	4a0e      	ldr	r2, [pc, #56]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a76:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a80:	4a0a      	ldr	r2, [pc, #40]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a86:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a88:	4b08      	ldr	r3, [pc, #32]	@ (8008aac <HAL_PCD_MspInit+0xa0>)
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a94:	2200      	movs	r2, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	2043      	movs	r0, #67	@ 0x43
 8008a9a:	f7f9 fa12 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a9e:	2043      	movs	r0, #67	@ 0x43
 8008aa0:	f7f9 fa2b 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aa4:	bf00      	nop
 8008aa6:	3728      	adds	r7, #40	@ 0x28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	40023800 	.word	0x40023800
 8008ab0:	40020000 	.word	0x40020000

08008ab4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe fb49 	bl	8007162 <USBD_LL_SetupStage>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	4619      	mov	r1, r3
 8008b02:	f7fe fb83 	bl	800720c <USBD_LL_DataOutStage>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3320      	adds	r3, #32
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7fe fc1c 	bl	8007372 <USBD_LL_DataInStage>
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fd56 	bl	8007602 <USBD_LL_SOF>
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	79db      	ldrb	r3, [r3, #7]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
 8008b76:	e008      	b.n	8008b8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	79db      	ldrb	r3, [r3, #7]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d102      	bne.n	8008b86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
 8008b84:	e001      	b.n	8008b8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b86:	f7f7 ff85 	bl	8000a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b90:	7bfa      	ldrb	r2, [r7, #15]
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fcf0 	bl	800757a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fc98 	bl	80074d6 <USBD_LL_Reset>
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe fceb 	bl	800759a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7adb      	ldrb	r3, [r3, #11]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008be4:	4b04      	ldr	r3, [pc, #16]	@ (8008bf8 <HAL_PCD_SuspendCallback+0x48>)
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	4a03      	ldr	r2, [pc, #12]	@ (8008bf8 <HAL_PCD_SuspendCallback+0x48>)
 8008bea:	f043 0306 	orr.w	r3, r3, #6
 8008bee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed00 	.word	0xe000ed00

08008bfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fce1 	bl	80075d2 <USBD_LL_Resume>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fd39 	bl	80076a6 <USBD_LL_IsoOUTIncomplete>
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fcf5 	bl	8007642 <USBD_LL_IsoINIncomplete>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fd4b 	bl	800770a <USBD_LL_DevConnected>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fd48 	bl	8007720 <USBD_LL_DevDisconnected>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d13c      	bne.n	8008d22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ca8:	4a20      	ldr	r2, [pc, #128]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cc6:	4b19      	ldr	r3, [pc, #100]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cc8:	2202      	movs	r2, #2
 8008cca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ccc:	4b17      	ldr	r3, [pc, #92]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cd2:	4b16      	ldr	r3, [pc, #88]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cd8:	4b14      	ldr	r3, [pc, #80]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cde:	4b13      	ldr	r3, [pc, #76]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ce4:	4b11      	ldr	r3, [pc, #68]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cea:	4b10      	ldr	r3, [pc, #64]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cf6:	480d      	ldr	r0, [pc, #52]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008cf8:	f7f9 fb61 	bl	80023be <HAL_PCD_Init>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d02:	f7f7 fec7 	bl	8000a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	4808      	ldr	r0, [pc, #32]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008d0a:	f7fa fd8e 	bl	800382a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d0e:	2240      	movs	r2, #64	@ 0x40
 8008d10:	2100      	movs	r1, #0
 8008d12:	4806      	ldr	r0, [pc, #24]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008d14:	f7fa fd42 	bl	800379c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d18:	2280      	movs	r2, #128	@ 0x80
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4803      	ldr	r0, [pc, #12]	@ (8008d2c <USBD_LL_Init+0x94>)
 8008d1e:	f7fa fd3d 	bl	800379c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20001754 	.word	0x20001754

08008d30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f9 fc48 	bl	80025dc <HAL_PCD_Start>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f942 	bl	8008fdc <USBD_Get_USB_Status>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	461a      	mov	r2, r3
 8008d74:	4603      	mov	r3, r0
 8008d76:	70fb      	strb	r3, [r7, #3]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70bb      	strb	r3, [r7, #2]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d8e:	78bb      	ldrb	r3, [r7, #2]
 8008d90:	883a      	ldrh	r2, [r7, #0]
 8008d92:	78f9      	ldrb	r1, [r7, #3]
 8008d94:	f7fa f91c 	bl	8002fd0 <HAL_PCD_EP_Open>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f91c 	bl	8008fdc <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa f967 	bl	80030a4 <HAL_PCD_EP_Close>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f8fd 	bl	8008fdc <USBD_Get_USB_Status>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fa fa1f 	bl	8003252 <HAL_PCD_EP_SetStall>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f8de 	bl	8008fdc <USBD_Get_USB_Status>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fa fa63 	bl	8003318 <HAL_PCD_EP_ClrStall>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f8bf 	bl	8008fdc <USBD_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da0b      	bge.n	8008ea0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	3316      	adds	r3, #22
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	e00b      	b.n	8008eb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ea6:	68f9      	ldr	r1, [r7, #12]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008eb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fa f850 	bl	8002f88 <HAL_PCD_SetAddress>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f874 	bl	8008fdc <USBD_Get_USB_Status>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f20:	7af9      	ldrb	r1, [r7, #11]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	f7fa f95a 	bl	80031de <HAL_PCD_EP_Transmit>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f853 	bl	8008fdc <USBD_Get_USB_Status>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	460b      	mov	r3, r1
 8008f52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f62:	7af9      	ldrb	r1, [r7, #11]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	f7fa f8e6 	bl	8003138 <HAL_PCD_EP_Receive>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f832 	bl	8008fdc <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fa f906 	bl	80031ae <HAL_PCD_EP_GetRxCount>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fb4:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <USBD_static_malloc+0x18>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20001c38 	.word	0x20001c38

08008fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]

}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d817      	bhi.n	8009020 <USBD_Get_USB_Status+0x44>
 8008ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <USBD_Get_USB_Status+0x1c>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009009 	.word	0x08009009
 8008ffc:	0800900f 	.word	0x0800900f
 8009000:	08009015 	.word	0x08009015
 8009004:	0800901b 	.word	0x0800901b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	e00b      	b.n	8009026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	73fb      	strb	r3, [r7, #15]
    break;
 8009012:	e008      	b.n	8009026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009014:	2301      	movs	r3, #1
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	e005      	b.n	8009026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	73fb      	strb	r3, [r7, #15]
    break;
 800901e:	e002      	b.n	8009026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	73fb      	strb	r3, [r7, #15]
    break;
 8009024:	bf00      	nop
  }
  return usb_status;
 8009026:	7bfb      	ldrb	r3, [r7, #15]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <siprintf>:
 8009034:	b40e      	push	{r1, r2, r3}
 8009036:	b510      	push	{r4, lr}
 8009038:	b09d      	sub	sp, #116	@ 0x74
 800903a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800903c:	9002      	str	r0, [sp, #8]
 800903e:	9006      	str	r0, [sp, #24]
 8009040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009044:	480a      	ldr	r0, [pc, #40]	@ (8009070 <siprintf+0x3c>)
 8009046:	9107      	str	r1, [sp, #28]
 8009048:	9104      	str	r1, [sp, #16]
 800904a:	490a      	ldr	r1, [pc, #40]	@ (8009074 <siprintf+0x40>)
 800904c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009050:	9105      	str	r1, [sp, #20]
 8009052:	2400      	movs	r4, #0
 8009054:	a902      	add	r1, sp, #8
 8009056:	6800      	ldr	r0, [r0, #0]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800905c:	f000 f994 	bl	8009388 <_svfiprintf_r>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	701c      	strb	r4, [r3, #0]
 8009064:	b01d      	add	sp, #116	@ 0x74
 8009066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906a:	b003      	add	sp, #12
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	200000fc 	.word	0x200000fc
 8009074:	ffff0208 	.word	0xffff0208

08009078 <memset>:
 8009078:	4402      	add	r2, r0
 800907a:	4603      	mov	r3, r0
 800907c:	4293      	cmp	r3, r2
 800907e:	d100      	bne.n	8009082 <memset+0xa>
 8009080:	4770      	bx	lr
 8009082:	f803 1b01 	strb.w	r1, [r3], #1
 8009086:	e7f9      	b.n	800907c <memset+0x4>

08009088 <__errno>:
 8009088:	4b01      	ldr	r3, [pc, #4]	@ (8009090 <__errno+0x8>)
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	200000fc 	.word	0x200000fc

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4d0d      	ldr	r5, [pc, #52]	@ (80090cc <__libc_init_array+0x38>)
 8009098:	4c0d      	ldr	r4, [pc, #52]	@ (80090d0 <__libc_init_array+0x3c>)
 800909a:	1b64      	subs	r4, r4, r5
 800909c:	10a4      	asrs	r4, r4, #2
 800909e:	2600      	movs	r6, #0
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	4d0b      	ldr	r5, [pc, #44]	@ (80090d4 <__libc_init_array+0x40>)
 80090a6:	4c0c      	ldr	r4, [pc, #48]	@ (80090d8 <__libc_init_array+0x44>)
 80090a8:	f000 fc64 	bl	8009974 <_init>
 80090ac:	1b64      	subs	r4, r4, r5
 80090ae:	10a4      	asrs	r4, r4, #2
 80090b0:	2600      	movs	r6, #0
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	08009a40 	.word	0x08009a40
 80090d0:	08009a40 	.word	0x08009a40
 80090d4:	08009a40 	.word	0x08009a40
 80090d8:	08009a44 	.word	0x08009a44

080090dc <__retarget_lock_acquire_recursive>:
 80090dc:	4770      	bx	lr

080090de <__retarget_lock_release_recursive>:
 80090de:	4770      	bx	lr

080090e0 <_free_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	2900      	cmp	r1, #0
 80090e6:	d041      	beq.n	800916c <_free_r+0x8c>
 80090e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ec:	1f0c      	subs	r4, r1, #4
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfb8      	it	lt
 80090f2:	18e4      	addlt	r4, r4, r3
 80090f4:	f000 f8e0 	bl	80092b8 <__malloc_lock>
 80090f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009170 <_free_r+0x90>)
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	b933      	cbnz	r3, 800910c <_free_r+0x2c>
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6014      	str	r4, [r2, #0]
 8009102:	4628      	mov	r0, r5
 8009104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009108:	f000 b8dc 	b.w	80092c4 <__malloc_unlock>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d908      	bls.n	8009122 <_free_r+0x42>
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	1821      	adds	r1, r4, r0
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1809      	addeq	r1, r1, r0
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	e7ed      	b.n	80090fe <_free_r+0x1e>
 8009122:	461a      	mov	r2, r3
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b10b      	cbz	r3, 800912c <_free_r+0x4c>
 8009128:	42a3      	cmp	r3, r4
 800912a:	d9fa      	bls.n	8009122 <_free_r+0x42>
 800912c:	6811      	ldr	r1, [r2, #0]
 800912e:	1850      	adds	r0, r2, r1
 8009130:	42a0      	cmp	r0, r4
 8009132:	d10b      	bne.n	800914c <_free_r+0x6c>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	4401      	add	r1, r0
 8009138:	1850      	adds	r0, r2, r1
 800913a:	4283      	cmp	r3, r0
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	d1e0      	bne.n	8009102 <_free_r+0x22>
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	4408      	add	r0, r1
 8009148:	6010      	str	r0, [r2, #0]
 800914a:	e7da      	b.n	8009102 <_free_r+0x22>
 800914c:	d902      	bls.n	8009154 <_free_r+0x74>
 800914e:	230c      	movs	r3, #12
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	e7d6      	b.n	8009102 <_free_r+0x22>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	1821      	adds	r1, r4, r0
 8009158:	428b      	cmp	r3, r1
 800915a:	bf04      	itt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	bf04      	itt	eq
 8009164:	1809      	addeq	r1, r1, r0
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	6054      	str	r4, [r2, #4]
 800916a:	e7ca      	b.n	8009102 <_free_r+0x22>
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	20001f9c 	.word	0x20001f9c

08009174 <sbrk_aligned>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4e0f      	ldr	r6, [pc, #60]	@ (80091b4 <sbrk_aligned+0x40>)
 8009178:	460c      	mov	r4, r1
 800917a:	6831      	ldr	r1, [r6, #0]
 800917c:	4605      	mov	r5, r0
 800917e:	b911      	cbnz	r1, 8009186 <sbrk_aligned+0x12>
 8009180:	f000 fba4 	bl	80098cc <_sbrk_r>
 8009184:	6030      	str	r0, [r6, #0]
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 fb9f 	bl	80098cc <_sbrk_r>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d103      	bne.n	800919a <sbrk_aligned+0x26>
 8009192:	f04f 34ff 	mov.w	r4, #4294967295
 8009196:	4620      	mov	r0, r4
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	1cc4      	adds	r4, r0, #3
 800919c:	f024 0403 	bic.w	r4, r4, #3
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d0f8      	beq.n	8009196 <sbrk_aligned+0x22>
 80091a4:	1a21      	subs	r1, r4, r0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 fb90 	bl	80098cc <_sbrk_r>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d1f2      	bne.n	8009196 <sbrk_aligned+0x22>
 80091b0:	e7ef      	b.n	8009192 <sbrk_aligned+0x1e>
 80091b2:	bf00      	nop
 80091b4:	20001f98 	.word	0x20001f98

080091b8 <_malloc_r>:
 80091b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091bc:	1ccd      	adds	r5, r1, #3
 80091be:	f025 0503 	bic.w	r5, r5, #3
 80091c2:	3508      	adds	r5, #8
 80091c4:	2d0c      	cmp	r5, #12
 80091c6:	bf38      	it	cc
 80091c8:	250c      	movcc	r5, #12
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	4606      	mov	r6, r0
 80091ce:	db01      	blt.n	80091d4 <_malloc_r+0x1c>
 80091d0:	42a9      	cmp	r1, r5
 80091d2:	d904      	bls.n	80091de <_malloc_r+0x26>
 80091d4:	230c      	movs	r3, #12
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	2000      	movs	r0, #0
 80091da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092b4 <_malloc_r+0xfc>
 80091e2:	f000 f869 	bl	80092b8 <__malloc_lock>
 80091e6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ea:	461c      	mov	r4, r3
 80091ec:	bb44      	cbnz	r4, 8009240 <_malloc_r+0x88>
 80091ee:	4629      	mov	r1, r5
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7ff ffbf 	bl	8009174 <sbrk_aligned>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	4604      	mov	r4, r0
 80091fa:	d158      	bne.n	80092ae <_malloc_r+0xf6>
 80091fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009200:	4627      	mov	r7, r4
 8009202:	2f00      	cmp	r7, #0
 8009204:	d143      	bne.n	800928e <_malloc_r+0xd6>
 8009206:	2c00      	cmp	r4, #0
 8009208:	d04b      	beq.n	80092a2 <_malloc_r+0xea>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	4639      	mov	r1, r7
 800920e:	4630      	mov	r0, r6
 8009210:	eb04 0903 	add.w	r9, r4, r3
 8009214:	f000 fb5a 	bl	80098cc <_sbrk_r>
 8009218:	4581      	cmp	r9, r0
 800921a:	d142      	bne.n	80092a2 <_malloc_r+0xea>
 800921c:	6821      	ldr	r1, [r4, #0]
 800921e:	1a6d      	subs	r5, r5, r1
 8009220:	4629      	mov	r1, r5
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ffa6 	bl	8009174 <sbrk_aligned>
 8009228:	3001      	adds	r0, #1
 800922a:	d03a      	beq.n	80092a2 <_malloc_r+0xea>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	442b      	add	r3, r5
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	f8d8 3000 	ldr.w	r3, [r8]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	bb62      	cbnz	r2, 8009294 <_malloc_r+0xdc>
 800923a:	f8c8 7000 	str.w	r7, [r8]
 800923e:	e00f      	b.n	8009260 <_malloc_r+0xa8>
 8009240:	6822      	ldr	r2, [r4, #0]
 8009242:	1b52      	subs	r2, r2, r5
 8009244:	d420      	bmi.n	8009288 <_malloc_r+0xd0>
 8009246:	2a0b      	cmp	r2, #11
 8009248:	d917      	bls.n	800927a <_malloc_r+0xc2>
 800924a:	1961      	adds	r1, r4, r5
 800924c:	42a3      	cmp	r3, r4
 800924e:	6025      	str	r5, [r4, #0]
 8009250:	bf18      	it	ne
 8009252:	6059      	strne	r1, [r3, #4]
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	bf08      	it	eq
 8009258:	f8c8 1000 	streq.w	r1, [r8]
 800925c:	5162      	str	r2, [r4, r5]
 800925e:	604b      	str	r3, [r1, #4]
 8009260:	4630      	mov	r0, r6
 8009262:	f000 f82f 	bl	80092c4 <__malloc_unlock>
 8009266:	f104 000b 	add.w	r0, r4, #11
 800926a:	1d23      	adds	r3, r4, #4
 800926c:	f020 0007 	bic.w	r0, r0, #7
 8009270:	1ac2      	subs	r2, r0, r3
 8009272:	bf1c      	itt	ne
 8009274:	1a1b      	subne	r3, r3, r0
 8009276:	50a3      	strne	r3, [r4, r2]
 8009278:	e7af      	b.n	80091da <_malloc_r+0x22>
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	42a3      	cmp	r3, r4
 800927e:	bf0c      	ite	eq
 8009280:	f8c8 2000 	streq.w	r2, [r8]
 8009284:	605a      	strne	r2, [r3, #4]
 8009286:	e7eb      	b.n	8009260 <_malloc_r+0xa8>
 8009288:	4623      	mov	r3, r4
 800928a:	6864      	ldr	r4, [r4, #4]
 800928c:	e7ae      	b.n	80091ec <_malloc_r+0x34>
 800928e:	463c      	mov	r4, r7
 8009290:	687f      	ldr	r7, [r7, #4]
 8009292:	e7b6      	b.n	8009202 <_malloc_r+0x4a>
 8009294:	461a      	mov	r2, r3
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	42a3      	cmp	r3, r4
 800929a:	d1fb      	bne.n	8009294 <_malloc_r+0xdc>
 800929c:	2300      	movs	r3, #0
 800929e:	6053      	str	r3, [r2, #4]
 80092a0:	e7de      	b.n	8009260 <_malloc_r+0xa8>
 80092a2:	230c      	movs	r3, #12
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 f80c 	bl	80092c4 <__malloc_unlock>
 80092ac:	e794      	b.n	80091d8 <_malloc_r+0x20>
 80092ae:	6005      	str	r5, [r0, #0]
 80092b0:	e7d6      	b.n	8009260 <_malloc_r+0xa8>
 80092b2:	bf00      	nop
 80092b4:	20001f9c 	.word	0x20001f9c

080092b8 <__malloc_lock>:
 80092b8:	4801      	ldr	r0, [pc, #4]	@ (80092c0 <__malloc_lock+0x8>)
 80092ba:	f7ff bf0f 	b.w	80090dc <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	20001f94 	.word	0x20001f94

080092c4 <__malloc_unlock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	@ (80092cc <__malloc_unlock+0x8>)
 80092c6:	f7ff bf0a 	b.w	80090de <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	20001f94 	.word	0x20001f94

080092d0 <__ssputs_r>:
 80092d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	688e      	ldr	r6, [r1, #8]
 80092d6:	461f      	mov	r7, r3
 80092d8:	42be      	cmp	r6, r7
 80092da:	680b      	ldr	r3, [r1, #0]
 80092dc:	4682      	mov	sl, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	4690      	mov	r8, r2
 80092e2:	d82d      	bhi.n	8009340 <__ssputs_r+0x70>
 80092e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092ec:	d026      	beq.n	800933c <__ssputs_r+0x6c>
 80092ee:	6965      	ldr	r5, [r4, #20]
 80092f0:	6909      	ldr	r1, [r1, #16]
 80092f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092f6:	eba3 0901 	sub.w	r9, r3, r1
 80092fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092fe:	1c7b      	adds	r3, r7, #1
 8009300:	444b      	add	r3, r9
 8009302:	106d      	asrs	r5, r5, #1
 8009304:	429d      	cmp	r5, r3
 8009306:	bf38      	it	cc
 8009308:	461d      	movcc	r5, r3
 800930a:	0553      	lsls	r3, r2, #21
 800930c:	d527      	bpl.n	800935e <__ssputs_r+0x8e>
 800930e:	4629      	mov	r1, r5
 8009310:	f7ff ff52 	bl	80091b8 <_malloc_r>
 8009314:	4606      	mov	r6, r0
 8009316:	b360      	cbz	r0, 8009372 <__ssputs_r+0xa2>
 8009318:	6921      	ldr	r1, [r4, #16]
 800931a:	464a      	mov	r2, r9
 800931c:	f000 fae6 	bl	80098ec <memcpy>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	6126      	str	r6, [r4, #16]
 800932e:	6165      	str	r5, [r4, #20]
 8009330:	444e      	add	r6, r9
 8009332:	eba5 0509 	sub.w	r5, r5, r9
 8009336:	6026      	str	r6, [r4, #0]
 8009338:	60a5      	str	r5, [r4, #8]
 800933a:	463e      	mov	r6, r7
 800933c:	42be      	cmp	r6, r7
 800933e:	d900      	bls.n	8009342 <__ssputs_r+0x72>
 8009340:	463e      	mov	r6, r7
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	4632      	mov	r2, r6
 8009346:	4641      	mov	r1, r8
 8009348:	f000 faa6 	bl	8009898 <memmove>
 800934c:	68a3      	ldr	r3, [r4, #8]
 800934e:	1b9b      	subs	r3, r3, r6
 8009350:	60a3      	str	r3, [r4, #8]
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	4433      	add	r3, r6
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	2000      	movs	r0, #0
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	462a      	mov	r2, r5
 8009360:	f000 fad2 	bl	8009908 <_realloc_r>
 8009364:	4606      	mov	r6, r0
 8009366:	2800      	cmp	r0, #0
 8009368:	d1e0      	bne.n	800932c <__ssputs_r+0x5c>
 800936a:	6921      	ldr	r1, [r4, #16]
 800936c:	4650      	mov	r0, sl
 800936e:	f7ff feb7 	bl	80090e0 <_free_r>
 8009372:	230c      	movs	r3, #12
 8009374:	f8ca 3000 	str.w	r3, [sl]
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e7e9      	b.n	800935a <__ssputs_r+0x8a>
	...

08009388 <_svfiprintf_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	4698      	mov	r8, r3
 800938e:	898b      	ldrh	r3, [r1, #12]
 8009390:	061b      	lsls	r3, r3, #24
 8009392:	b09d      	sub	sp, #116	@ 0x74
 8009394:	4607      	mov	r7, r0
 8009396:	460d      	mov	r5, r1
 8009398:	4614      	mov	r4, r2
 800939a:	d510      	bpl.n	80093be <_svfiprintf_r+0x36>
 800939c:	690b      	ldr	r3, [r1, #16]
 800939e:	b973      	cbnz	r3, 80093be <_svfiprintf_r+0x36>
 80093a0:	2140      	movs	r1, #64	@ 0x40
 80093a2:	f7ff ff09 	bl	80091b8 <_malloc_r>
 80093a6:	6028      	str	r0, [r5, #0]
 80093a8:	6128      	str	r0, [r5, #16]
 80093aa:	b930      	cbnz	r0, 80093ba <_svfiprintf_r+0x32>
 80093ac:	230c      	movs	r3, #12
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	b01d      	add	sp, #116	@ 0x74
 80093b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ba:	2340      	movs	r3, #64	@ 0x40
 80093bc:	616b      	str	r3, [r5, #20]
 80093be:	2300      	movs	r3, #0
 80093c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c2:	2320      	movs	r3, #32
 80093c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093cc:	2330      	movs	r3, #48	@ 0x30
 80093ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800956c <_svfiprintf_r+0x1e4>
 80093d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093d6:	f04f 0901 	mov.w	r9, #1
 80093da:	4623      	mov	r3, r4
 80093dc:	469a      	mov	sl, r3
 80093de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e2:	b10a      	cbz	r2, 80093e8 <_svfiprintf_r+0x60>
 80093e4:	2a25      	cmp	r2, #37	@ 0x25
 80093e6:	d1f9      	bne.n	80093dc <_svfiprintf_r+0x54>
 80093e8:	ebba 0b04 	subs.w	fp, sl, r4
 80093ec:	d00b      	beq.n	8009406 <_svfiprintf_r+0x7e>
 80093ee:	465b      	mov	r3, fp
 80093f0:	4622      	mov	r2, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff ff6b 	bl	80092d0 <__ssputs_r>
 80093fa:	3001      	adds	r0, #1
 80093fc:	f000 80a7 	beq.w	800954e <_svfiprintf_r+0x1c6>
 8009400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009402:	445a      	add	r2, fp
 8009404:	9209      	str	r2, [sp, #36]	@ 0x24
 8009406:	f89a 3000 	ldrb.w	r3, [sl]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 809f 	beq.w	800954e <_svfiprintf_r+0x1c6>
 8009410:	2300      	movs	r3, #0
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800941a:	f10a 0a01 	add.w	sl, sl, #1
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	9307      	str	r3, [sp, #28]
 8009422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009426:	931a      	str	r3, [sp, #104]	@ 0x68
 8009428:	4654      	mov	r4, sl
 800942a:	2205      	movs	r2, #5
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	484e      	ldr	r0, [pc, #312]	@ (800956c <_svfiprintf_r+0x1e4>)
 8009432:	f7f6 fecd 	bl	80001d0 <memchr>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	b9d8      	cbnz	r0, 8009472 <_svfiprintf_r+0xea>
 800943a:	06d0      	lsls	r0, r2, #27
 800943c:	bf44      	itt	mi
 800943e:	2320      	movmi	r3, #32
 8009440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009444:	0711      	lsls	r1, r2, #28
 8009446:	bf44      	itt	mi
 8009448:	232b      	movmi	r3, #43	@ 0x2b
 800944a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800944e:	f89a 3000 	ldrb.w	r3, [sl]
 8009452:	2b2a      	cmp	r3, #42	@ 0x2a
 8009454:	d015      	beq.n	8009482 <_svfiprintf_r+0xfa>
 8009456:	9a07      	ldr	r2, [sp, #28]
 8009458:	4654      	mov	r4, sl
 800945a:	2000      	movs	r0, #0
 800945c:	f04f 0c0a 	mov.w	ip, #10
 8009460:	4621      	mov	r1, r4
 8009462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009466:	3b30      	subs	r3, #48	@ 0x30
 8009468:	2b09      	cmp	r3, #9
 800946a:	d94b      	bls.n	8009504 <_svfiprintf_r+0x17c>
 800946c:	b1b0      	cbz	r0, 800949c <_svfiprintf_r+0x114>
 800946e:	9207      	str	r2, [sp, #28]
 8009470:	e014      	b.n	800949c <_svfiprintf_r+0x114>
 8009472:	eba0 0308 	sub.w	r3, r0, r8
 8009476:	fa09 f303 	lsl.w	r3, r9, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	46a2      	mov	sl, r4
 8009480:	e7d2      	b.n	8009428 <_svfiprintf_r+0xa0>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	1d19      	adds	r1, r3, #4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	9103      	str	r1, [sp, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfbb      	ittet	lt
 800948e:	425b      	neglt	r3, r3
 8009490:	f042 0202 	orrlt.w	r2, r2, #2
 8009494:	9307      	strge	r3, [sp, #28]
 8009496:	9307      	strlt	r3, [sp, #28]
 8009498:	bfb8      	it	lt
 800949a:	9204      	strlt	r2, [sp, #16]
 800949c:	7823      	ldrb	r3, [r4, #0]
 800949e:	2b2e      	cmp	r3, #46	@ 0x2e
 80094a0:	d10a      	bne.n	80094b8 <_svfiprintf_r+0x130>
 80094a2:	7863      	ldrb	r3, [r4, #1]
 80094a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a6:	d132      	bne.n	800950e <_svfiprintf_r+0x186>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9203      	str	r2, [sp, #12]
 80094b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094b4:	3402      	adds	r4, #2
 80094b6:	9305      	str	r3, [sp, #20]
 80094b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800957c <_svfiprintf_r+0x1f4>
 80094bc:	7821      	ldrb	r1, [r4, #0]
 80094be:	2203      	movs	r2, #3
 80094c0:	4650      	mov	r0, sl
 80094c2:	f7f6 fe85 	bl	80001d0 <memchr>
 80094c6:	b138      	cbz	r0, 80094d8 <_svfiprintf_r+0x150>
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	eba0 000a 	sub.w	r0, r0, sl
 80094ce:	2240      	movs	r2, #64	@ 0x40
 80094d0:	4082      	lsls	r2, r0
 80094d2:	4313      	orrs	r3, r2
 80094d4:	3401      	adds	r4, #1
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094dc:	4824      	ldr	r0, [pc, #144]	@ (8009570 <_svfiprintf_r+0x1e8>)
 80094de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094e2:	2206      	movs	r2, #6
 80094e4:	f7f6 fe74 	bl	80001d0 <memchr>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d036      	beq.n	800955a <_svfiprintf_r+0x1d2>
 80094ec:	4b21      	ldr	r3, [pc, #132]	@ (8009574 <_svfiprintf_r+0x1ec>)
 80094ee:	bb1b      	cbnz	r3, 8009538 <_svfiprintf_r+0x1b0>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	3307      	adds	r3, #7
 80094f4:	f023 0307 	bic.w	r3, r3, #7
 80094f8:	3308      	adds	r3, #8
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fe:	4433      	add	r3, r6
 8009500:	9309      	str	r3, [sp, #36]	@ 0x24
 8009502:	e76a      	b.n	80093da <_svfiprintf_r+0x52>
 8009504:	fb0c 3202 	mla	r2, ip, r2, r3
 8009508:	460c      	mov	r4, r1
 800950a:	2001      	movs	r0, #1
 800950c:	e7a8      	b.n	8009460 <_svfiprintf_r+0xd8>
 800950e:	2300      	movs	r3, #0
 8009510:	3401      	adds	r4, #1
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	4619      	mov	r1, r3
 8009516:	f04f 0c0a 	mov.w	ip, #10
 800951a:	4620      	mov	r0, r4
 800951c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009520:	3a30      	subs	r2, #48	@ 0x30
 8009522:	2a09      	cmp	r2, #9
 8009524:	d903      	bls.n	800952e <_svfiprintf_r+0x1a6>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0c6      	beq.n	80094b8 <_svfiprintf_r+0x130>
 800952a:	9105      	str	r1, [sp, #20]
 800952c:	e7c4      	b.n	80094b8 <_svfiprintf_r+0x130>
 800952e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009532:	4604      	mov	r4, r0
 8009534:	2301      	movs	r3, #1
 8009536:	e7f0      	b.n	800951a <_svfiprintf_r+0x192>
 8009538:	ab03      	add	r3, sp, #12
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	462a      	mov	r2, r5
 800953e:	4b0e      	ldr	r3, [pc, #56]	@ (8009578 <_svfiprintf_r+0x1f0>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	4638      	mov	r0, r7
 8009544:	f3af 8000 	nop.w
 8009548:	1c42      	adds	r2, r0, #1
 800954a:	4606      	mov	r6, r0
 800954c:	d1d6      	bne.n	80094fc <_svfiprintf_r+0x174>
 800954e:	89ab      	ldrh	r3, [r5, #12]
 8009550:	065b      	lsls	r3, r3, #25
 8009552:	f53f af2d 	bmi.w	80093b0 <_svfiprintf_r+0x28>
 8009556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009558:	e72c      	b.n	80093b4 <_svfiprintf_r+0x2c>
 800955a:	ab03      	add	r3, sp, #12
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	462a      	mov	r2, r5
 8009560:	4b05      	ldr	r3, [pc, #20]	@ (8009578 <_svfiprintf_r+0x1f0>)
 8009562:	a904      	add	r1, sp, #16
 8009564:	4638      	mov	r0, r7
 8009566:	f000 f879 	bl	800965c <_printf_i>
 800956a:	e7ed      	b.n	8009548 <_svfiprintf_r+0x1c0>
 800956c:	08009a04 	.word	0x08009a04
 8009570:	08009a0e 	.word	0x08009a0e
 8009574:	00000000 	.word	0x00000000
 8009578:	080092d1 	.word	0x080092d1
 800957c:	08009a0a 	.word	0x08009a0a

08009580 <_printf_common>:
 8009580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009584:	4616      	mov	r6, r2
 8009586:	4698      	mov	r8, r3
 8009588:	688a      	ldr	r2, [r1, #8]
 800958a:	690b      	ldr	r3, [r1, #16]
 800958c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009590:	4293      	cmp	r3, r2
 8009592:	bfb8      	it	lt
 8009594:	4613      	movlt	r3, r2
 8009596:	6033      	str	r3, [r6, #0]
 8009598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800959c:	4607      	mov	r7, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	b10a      	cbz	r2, 80095a6 <_printf_common+0x26>
 80095a2:	3301      	adds	r3, #1
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	0699      	lsls	r1, r3, #26
 80095aa:	bf42      	ittt	mi
 80095ac:	6833      	ldrmi	r3, [r6, #0]
 80095ae:	3302      	addmi	r3, #2
 80095b0:	6033      	strmi	r3, [r6, #0]
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	f015 0506 	ands.w	r5, r5, #6
 80095b8:	d106      	bne.n	80095c8 <_printf_common+0x48>
 80095ba:	f104 0a19 	add.w	sl, r4, #25
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	6832      	ldr	r2, [r6, #0]
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	42ab      	cmp	r3, r5
 80095c6:	dc26      	bgt.n	8009616 <_printf_common+0x96>
 80095c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	3b00      	subs	r3, #0
 80095d0:	bf18      	it	ne
 80095d2:	2301      	movne	r3, #1
 80095d4:	0692      	lsls	r2, r2, #26
 80095d6:	d42b      	bmi.n	8009630 <_printf_common+0xb0>
 80095d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095dc:	4641      	mov	r1, r8
 80095de:	4638      	mov	r0, r7
 80095e0:	47c8      	blx	r9
 80095e2:	3001      	adds	r0, #1
 80095e4:	d01e      	beq.n	8009624 <_printf_common+0xa4>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	f003 0306 	and.w	r3, r3, #6
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	bf02      	ittt	eq
 80095f2:	68e5      	ldreq	r5, [r4, #12]
 80095f4:	6833      	ldreq	r3, [r6, #0]
 80095f6:	1aed      	subeq	r5, r5, r3
 80095f8:	68a3      	ldr	r3, [r4, #8]
 80095fa:	bf0c      	ite	eq
 80095fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009600:	2500      	movne	r5, #0
 8009602:	4293      	cmp	r3, r2
 8009604:	bfc4      	itt	gt
 8009606:	1a9b      	subgt	r3, r3, r2
 8009608:	18ed      	addgt	r5, r5, r3
 800960a:	2600      	movs	r6, #0
 800960c:	341a      	adds	r4, #26
 800960e:	42b5      	cmp	r5, r6
 8009610:	d11a      	bne.n	8009648 <_printf_common+0xc8>
 8009612:	2000      	movs	r0, #0
 8009614:	e008      	b.n	8009628 <_printf_common+0xa8>
 8009616:	2301      	movs	r3, #1
 8009618:	4652      	mov	r2, sl
 800961a:	4641      	mov	r1, r8
 800961c:	4638      	mov	r0, r7
 800961e:	47c8      	blx	r9
 8009620:	3001      	adds	r0, #1
 8009622:	d103      	bne.n	800962c <_printf_common+0xac>
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962c:	3501      	adds	r5, #1
 800962e:	e7c6      	b.n	80095be <_printf_common+0x3e>
 8009630:	18e1      	adds	r1, r4, r3
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	2030      	movs	r0, #48	@ 0x30
 8009636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800963a:	4422      	add	r2, r4
 800963c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009644:	3302      	adds	r3, #2
 8009646:	e7c7      	b.n	80095d8 <_printf_common+0x58>
 8009648:	2301      	movs	r3, #1
 800964a:	4622      	mov	r2, r4
 800964c:	4641      	mov	r1, r8
 800964e:	4638      	mov	r0, r7
 8009650:	47c8      	blx	r9
 8009652:	3001      	adds	r0, #1
 8009654:	d0e6      	beq.n	8009624 <_printf_common+0xa4>
 8009656:	3601      	adds	r6, #1
 8009658:	e7d9      	b.n	800960e <_printf_common+0x8e>
	...

0800965c <_printf_i>:
 800965c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	7e0f      	ldrb	r7, [r1, #24]
 8009662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009664:	2f78      	cmp	r7, #120	@ 0x78
 8009666:	4691      	mov	r9, r2
 8009668:	4680      	mov	r8, r0
 800966a:	460c      	mov	r4, r1
 800966c:	469a      	mov	sl, r3
 800966e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009672:	d807      	bhi.n	8009684 <_printf_i+0x28>
 8009674:	2f62      	cmp	r7, #98	@ 0x62
 8009676:	d80a      	bhi.n	800968e <_printf_i+0x32>
 8009678:	2f00      	cmp	r7, #0
 800967a:	f000 80d1 	beq.w	8009820 <_printf_i+0x1c4>
 800967e:	2f58      	cmp	r7, #88	@ 0x58
 8009680:	f000 80b8 	beq.w	80097f4 <_printf_i+0x198>
 8009684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800968c:	e03a      	b.n	8009704 <_printf_i+0xa8>
 800968e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009692:	2b15      	cmp	r3, #21
 8009694:	d8f6      	bhi.n	8009684 <_printf_i+0x28>
 8009696:	a101      	add	r1, pc, #4	@ (adr r1, 800969c <_printf_i+0x40>)
 8009698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	08009709 	.word	0x08009709
 80096a4:	08009685 	.word	0x08009685
 80096a8:	08009685 	.word	0x08009685
 80096ac:	08009685 	.word	0x08009685
 80096b0:	08009685 	.word	0x08009685
 80096b4:	08009709 	.word	0x08009709
 80096b8:	08009685 	.word	0x08009685
 80096bc:	08009685 	.word	0x08009685
 80096c0:	08009685 	.word	0x08009685
 80096c4:	08009685 	.word	0x08009685
 80096c8:	08009807 	.word	0x08009807
 80096cc:	08009733 	.word	0x08009733
 80096d0:	080097c1 	.word	0x080097c1
 80096d4:	08009685 	.word	0x08009685
 80096d8:	08009685 	.word	0x08009685
 80096dc:	08009829 	.word	0x08009829
 80096e0:	08009685 	.word	0x08009685
 80096e4:	08009733 	.word	0x08009733
 80096e8:	08009685 	.word	0x08009685
 80096ec:	08009685 	.word	0x08009685
 80096f0:	080097c9 	.word	0x080097c9
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	1d1a      	adds	r2, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6032      	str	r2, [r6, #0]
 80096fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009704:	2301      	movs	r3, #1
 8009706:	e09c      	b.n	8009842 <_printf_i+0x1e6>
 8009708:	6833      	ldr	r3, [r6, #0]
 800970a:	6820      	ldr	r0, [r4, #0]
 800970c:	1d19      	adds	r1, r3, #4
 800970e:	6031      	str	r1, [r6, #0]
 8009710:	0606      	lsls	r6, r0, #24
 8009712:	d501      	bpl.n	8009718 <_printf_i+0xbc>
 8009714:	681d      	ldr	r5, [r3, #0]
 8009716:	e003      	b.n	8009720 <_printf_i+0xc4>
 8009718:	0645      	lsls	r5, r0, #25
 800971a:	d5fb      	bpl.n	8009714 <_printf_i+0xb8>
 800971c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009720:	2d00      	cmp	r5, #0
 8009722:	da03      	bge.n	800972c <_printf_i+0xd0>
 8009724:	232d      	movs	r3, #45	@ 0x2d
 8009726:	426d      	negs	r5, r5
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800972c:	4858      	ldr	r0, [pc, #352]	@ (8009890 <_printf_i+0x234>)
 800972e:	230a      	movs	r3, #10
 8009730:	e011      	b.n	8009756 <_printf_i+0xfa>
 8009732:	6821      	ldr	r1, [r4, #0]
 8009734:	6833      	ldr	r3, [r6, #0]
 8009736:	0608      	lsls	r0, r1, #24
 8009738:	f853 5b04 	ldr.w	r5, [r3], #4
 800973c:	d402      	bmi.n	8009744 <_printf_i+0xe8>
 800973e:	0649      	lsls	r1, r1, #25
 8009740:	bf48      	it	mi
 8009742:	b2ad      	uxthmi	r5, r5
 8009744:	2f6f      	cmp	r7, #111	@ 0x6f
 8009746:	4852      	ldr	r0, [pc, #328]	@ (8009890 <_printf_i+0x234>)
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	bf14      	ite	ne
 800974c:	230a      	movne	r3, #10
 800974e:	2308      	moveq	r3, #8
 8009750:	2100      	movs	r1, #0
 8009752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009756:	6866      	ldr	r6, [r4, #4]
 8009758:	60a6      	str	r6, [r4, #8]
 800975a:	2e00      	cmp	r6, #0
 800975c:	db05      	blt.n	800976a <_printf_i+0x10e>
 800975e:	6821      	ldr	r1, [r4, #0]
 8009760:	432e      	orrs	r6, r5
 8009762:	f021 0104 	bic.w	r1, r1, #4
 8009766:	6021      	str	r1, [r4, #0]
 8009768:	d04b      	beq.n	8009802 <_printf_i+0x1a6>
 800976a:	4616      	mov	r6, r2
 800976c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009770:	fb03 5711 	mls	r7, r3, r1, r5
 8009774:	5dc7      	ldrb	r7, [r0, r7]
 8009776:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800977a:	462f      	mov	r7, r5
 800977c:	42bb      	cmp	r3, r7
 800977e:	460d      	mov	r5, r1
 8009780:	d9f4      	bls.n	800976c <_printf_i+0x110>
 8009782:	2b08      	cmp	r3, #8
 8009784:	d10b      	bne.n	800979e <_printf_i+0x142>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	07df      	lsls	r7, r3, #31
 800978a:	d508      	bpl.n	800979e <_printf_i+0x142>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	6861      	ldr	r1, [r4, #4]
 8009790:	4299      	cmp	r1, r3
 8009792:	bfde      	ittt	le
 8009794:	2330      	movle	r3, #48	@ 0x30
 8009796:	f806 3c01 	strble.w	r3, [r6, #-1]
 800979a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800979e:	1b92      	subs	r2, r2, r6
 80097a0:	6122      	str	r2, [r4, #16]
 80097a2:	f8cd a000 	str.w	sl, [sp]
 80097a6:	464b      	mov	r3, r9
 80097a8:	aa03      	add	r2, sp, #12
 80097aa:	4621      	mov	r1, r4
 80097ac:	4640      	mov	r0, r8
 80097ae:	f7ff fee7 	bl	8009580 <_printf_common>
 80097b2:	3001      	adds	r0, #1
 80097b4:	d14a      	bne.n	800984c <_printf_i+0x1f0>
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	b004      	add	sp, #16
 80097bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	f043 0320 	orr.w	r3, r3, #32
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	4832      	ldr	r0, [pc, #200]	@ (8009894 <_printf_i+0x238>)
 80097ca:	2778      	movs	r7, #120	@ 0x78
 80097cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	6831      	ldr	r1, [r6, #0]
 80097d4:	061f      	lsls	r7, r3, #24
 80097d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80097da:	d402      	bmi.n	80097e2 <_printf_i+0x186>
 80097dc:	065f      	lsls	r7, r3, #25
 80097de:	bf48      	it	mi
 80097e0:	b2ad      	uxthmi	r5, r5
 80097e2:	6031      	str	r1, [r6, #0]
 80097e4:	07d9      	lsls	r1, r3, #31
 80097e6:	bf44      	itt	mi
 80097e8:	f043 0320 	orrmi.w	r3, r3, #32
 80097ec:	6023      	strmi	r3, [r4, #0]
 80097ee:	b11d      	cbz	r5, 80097f8 <_printf_i+0x19c>
 80097f0:	2310      	movs	r3, #16
 80097f2:	e7ad      	b.n	8009750 <_printf_i+0xf4>
 80097f4:	4826      	ldr	r0, [pc, #152]	@ (8009890 <_printf_i+0x234>)
 80097f6:	e7e9      	b.n	80097cc <_printf_i+0x170>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	f023 0320 	bic.w	r3, r3, #32
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	e7f6      	b.n	80097f0 <_printf_i+0x194>
 8009802:	4616      	mov	r6, r2
 8009804:	e7bd      	b.n	8009782 <_printf_i+0x126>
 8009806:	6833      	ldr	r3, [r6, #0]
 8009808:	6825      	ldr	r5, [r4, #0]
 800980a:	6961      	ldr	r1, [r4, #20]
 800980c:	1d18      	adds	r0, r3, #4
 800980e:	6030      	str	r0, [r6, #0]
 8009810:	062e      	lsls	r6, r5, #24
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	d501      	bpl.n	800981a <_printf_i+0x1be>
 8009816:	6019      	str	r1, [r3, #0]
 8009818:	e002      	b.n	8009820 <_printf_i+0x1c4>
 800981a:	0668      	lsls	r0, r5, #25
 800981c:	d5fb      	bpl.n	8009816 <_printf_i+0x1ba>
 800981e:	8019      	strh	r1, [r3, #0]
 8009820:	2300      	movs	r3, #0
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	4616      	mov	r6, r2
 8009826:	e7bc      	b.n	80097a2 <_printf_i+0x146>
 8009828:	6833      	ldr	r3, [r6, #0]
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	6032      	str	r2, [r6, #0]
 800982e:	681e      	ldr	r6, [r3, #0]
 8009830:	6862      	ldr	r2, [r4, #4]
 8009832:	2100      	movs	r1, #0
 8009834:	4630      	mov	r0, r6
 8009836:	f7f6 fccb 	bl	80001d0 <memchr>
 800983a:	b108      	cbz	r0, 8009840 <_printf_i+0x1e4>
 800983c:	1b80      	subs	r0, r0, r6
 800983e:	6060      	str	r0, [r4, #4]
 8009840:	6863      	ldr	r3, [r4, #4]
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	2300      	movs	r3, #0
 8009846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800984a:	e7aa      	b.n	80097a2 <_printf_i+0x146>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	4632      	mov	r2, r6
 8009850:	4649      	mov	r1, r9
 8009852:	4640      	mov	r0, r8
 8009854:	47d0      	blx	sl
 8009856:	3001      	adds	r0, #1
 8009858:	d0ad      	beq.n	80097b6 <_printf_i+0x15a>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	079b      	lsls	r3, r3, #30
 800985e:	d413      	bmi.n	8009888 <_printf_i+0x22c>
 8009860:	68e0      	ldr	r0, [r4, #12]
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	4298      	cmp	r0, r3
 8009866:	bfb8      	it	lt
 8009868:	4618      	movlt	r0, r3
 800986a:	e7a6      	b.n	80097ba <_printf_i+0x15e>
 800986c:	2301      	movs	r3, #1
 800986e:	4632      	mov	r2, r6
 8009870:	4649      	mov	r1, r9
 8009872:	4640      	mov	r0, r8
 8009874:	47d0      	blx	sl
 8009876:	3001      	adds	r0, #1
 8009878:	d09d      	beq.n	80097b6 <_printf_i+0x15a>
 800987a:	3501      	adds	r5, #1
 800987c:	68e3      	ldr	r3, [r4, #12]
 800987e:	9903      	ldr	r1, [sp, #12]
 8009880:	1a5b      	subs	r3, r3, r1
 8009882:	42ab      	cmp	r3, r5
 8009884:	dcf2      	bgt.n	800986c <_printf_i+0x210>
 8009886:	e7eb      	b.n	8009860 <_printf_i+0x204>
 8009888:	2500      	movs	r5, #0
 800988a:	f104 0619 	add.w	r6, r4, #25
 800988e:	e7f5      	b.n	800987c <_printf_i+0x220>
 8009890:	08009a15 	.word	0x08009a15
 8009894:	08009a26 	.word	0x08009a26

08009898 <memmove>:
 8009898:	4288      	cmp	r0, r1
 800989a:	b510      	push	{r4, lr}
 800989c:	eb01 0402 	add.w	r4, r1, r2
 80098a0:	d902      	bls.n	80098a8 <memmove+0x10>
 80098a2:	4284      	cmp	r4, r0
 80098a4:	4623      	mov	r3, r4
 80098a6:	d807      	bhi.n	80098b8 <memmove+0x20>
 80098a8:	1e43      	subs	r3, r0, #1
 80098aa:	42a1      	cmp	r1, r4
 80098ac:	d008      	beq.n	80098c0 <memmove+0x28>
 80098ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098b6:	e7f8      	b.n	80098aa <memmove+0x12>
 80098b8:	4402      	add	r2, r0
 80098ba:	4601      	mov	r1, r0
 80098bc:	428a      	cmp	r2, r1
 80098be:	d100      	bne.n	80098c2 <memmove+0x2a>
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ca:	e7f7      	b.n	80098bc <memmove+0x24>

080098cc <_sbrk_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d06      	ldr	r5, [pc, #24]	@ (80098e8 <_sbrk_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f7 fa74 	bl	8000dc4 <_sbrk>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_sbrk_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_sbrk_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20001f90 	.word	0x20001f90

080098ec <memcpy>:
 80098ec:	440a      	add	r2, r1
 80098ee:	4291      	cmp	r1, r2
 80098f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098f4:	d100      	bne.n	80098f8 <memcpy+0xc>
 80098f6:	4770      	bx	lr
 80098f8:	b510      	push	{r4, lr}
 80098fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009902:	4291      	cmp	r1, r2
 8009904:	d1f9      	bne.n	80098fa <memcpy+0xe>
 8009906:	bd10      	pop	{r4, pc}

08009908 <_realloc_r>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4607      	mov	r7, r0
 800990e:	4614      	mov	r4, r2
 8009910:	460d      	mov	r5, r1
 8009912:	b921      	cbnz	r1, 800991e <_realloc_r+0x16>
 8009914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	4611      	mov	r1, r2
 800991a:	f7ff bc4d 	b.w	80091b8 <_malloc_r>
 800991e:	b92a      	cbnz	r2, 800992c <_realloc_r+0x24>
 8009920:	f7ff fbde 	bl	80090e0 <_free_r>
 8009924:	4625      	mov	r5, r4
 8009926:	4628      	mov	r0, r5
 8009928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992c:	f000 f81a 	bl	8009964 <_malloc_usable_size_r>
 8009930:	4284      	cmp	r4, r0
 8009932:	4606      	mov	r6, r0
 8009934:	d802      	bhi.n	800993c <_realloc_r+0x34>
 8009936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800993a:	d8f4      	bhi.n	8009926 <_realloc_r+0x1e>
 800993c:	4621      	mov	r1, r4
 800993e:	4638      	mov	r0, r7
 8009940:	f7ff fc3a 	bl	80091b8 <_malloc_r>
 8009944:	4680      	mov	r8, r0
 8009946:	b908      	cbnz	r0, 800994c <_realloc_r+0x44>
 8009948:	4645      	mov	r5, r8
 800994a:	e7ec      	b.n	8009926 <_realloc_r+0x1e>
 800994c:	42b4      	cmp	r4, r6
 800994e:	4622      	mov	r2, r4
 8009950:	4629      	mov	r1, r5
 8009952:	bf28      	it	cs
 8009954:	4632      	movcs	r2, r6
 8009956:	f7ff ffc9 	bl	80098ec <memcpy>
 800995a:	4629      	mov	r1, r5
 800995c:	4638      	mov	r0, r7
 800995e:	f7ff fbbf 	bl	80090e0 <_free_r>
 8009962:	e7f1      	b.n	8009948 <_realloc_r+0x40>

08009964 <_malloc_usable_size_r>:
 8009964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009968:	1f18      	subs	r0, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	bfbc      	itt	lt
 800996e:	580b      	ldrlt	r3, [r1, r0]
 8009970:	18c0      	addlt	r0, r0, r3
 8009972:	4770      	bx	lr

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
