
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800eec8  0800eec8  0000fec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2fc  0800f2fc  000112c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f2fc  0800f2fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f304  0800f304  000112c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f304  0800f304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f308  0800f308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800f30c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112c4  2**0
                  CONTENTS
 10 .bss          00001f64  200002c4  200002c4  000112c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002228  20002228  000112c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001843c  00000000  00000000  000112f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051fd  00000000  00000000  00029730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106f  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b7e5  00000000  00000000  00030fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb79  00000000  00000000  0005c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3fac  00000000  00000000  0007c35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160309  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000688c  00000000  00000000  0016034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00166bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eeac 	.word	0x0800eeac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800eeac 	.word	0x0800eeac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:
#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note, uint16_t time)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f72:	f7ff ffcf 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <BuzzerPlayNote+0x7c>)
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	@ (8000fdc <BuzzerPlayNote+0x80>)
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fc58 	bl	800084c <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4c0c      	ldr	r4, [pc, #48]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fdff 	bl	8000ba8 <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	63d3      	str	r3, [r2, #60]	@ 0x3c

	HAL_Delay(time);
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fd90 	bl	8004ae0 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fc6:	f7ff ffb6 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8000fca:	bf00      	nop
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	0501bd00 	.word	0x0501bd00
 8000fdc:	0800ef10 	.word	0x0800ef10

08000fe0 <BuzzerPlayInit>:

void BuzzerPlayInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000fea:	f7ff ff93 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff0:	2215      	movs	r2, #21
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <BuzzerPlayInit+0x58>)
 8001000:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	@ 0x64
 8001008:	f003 fd6a 	bl	8004ae0 <HAL_Delay>
	TIM4->PSC = 1500;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <BuzzerPlayInit+0x58>)
 800100e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	@ 0x64
 8001016:	f003 fd63 	bl	8004ae0 <HAL_Delay>
	TIM4->PSC = 1000;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <BuzzerPlayInit+0x58>)
 800101c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f003 fd5c 	bl	8004ae0 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <BuzzerPlayInit+0x58>)
 800102e:	f7ff ff82 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000800 	.word	0x40000800

0800103c <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	e008      	b.n	800105a <BuzzerPlayOneCycle+0x1e>
		BuzzerPlayNote(i, 150);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2196      	movs	r1, #150	@ 0x96
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff84 	bl	8000f5c <BuzzerPlayNote>
	for (int i=0; i<8; i++){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b07      	cmp	r3, #7
 800105e:	ddf3      	ble.n	8001048 <BuzzerPlayOneCycle+0xc>
	}
	return;
 8001060:	bf00      	nop
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BuzzerEnableThrottleHigh>:


/* Functions (RC Alarm) ------------------------------------------------------*/
void BuzzerEnableThrottleHigh(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800106c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001072:	f7ff ff4f 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001078:	2215      	movs	r2, #21
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM4->PSC = 2000;
 8001086:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001088:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 800108e:	bf00      	nop
}
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000800 	.word	0x40000800

08001098 <BuzzerDisableThrottleHigh>:

void BuzzerDisableThrottleHigh(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800109c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <BuzzerDisableThrottleHigh+0x14>)
 80010a2:	f7ff ff48 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 80010a6:	bf00      	nop
}
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40000800 	.word	0x40000800

080010b0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <FS_mannualMode>:
#include <FC_Failsafe/Failsafe.h>

uint8_t fsFlag = 0;

void FS_mannualMode(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <FS_mannualMode+0x14>)
 80010d4:	f7ff ffec 	bl	80010b0 <LL_GPIO_SetOutputPin>
	// RTH가 있는지 확인

	// RTH가 없으면 쓰로틀 끄고 서보 중립
	// 추후 원주 비행 구현
	SERVO_setFailsafe();
 80010d8:	f001 fe8c 	bl	8002df4 <SERVO_setFailsafe>

	return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0210 	bic.w	r2, r3, #16
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	605a      	str	r2, [r3, #4]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d101      	bne.n	8001168 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	330c      	adds	r3, #12
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	330c      	adds	r3, #12
 80011a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_GPIO_SetOutputPin>:
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	041a      	lsls	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800

08001220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001236:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800

08001250 <ICM42688_Initialization>:
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


/* Functions 1 ---------------------------------------------------------------*/
int ICM42688_Initialization(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	809a      	strh	r2, [r3, #4]

	ICM42688_GPIO_SPI_Initialization();
 800126c:	f000 f9ce 	bl	800160c <ICM42688_GPIO_SPI_Initialization>

	// printf("Checking ICM42688...\n\r");

	who_am_i = ICM42688_Readbyte(WHO_AM_I);
 8001270:	2075      	movs	r0, #117	@ 0x75
 8001272:	f000 fa5f 	bl	8001734 <ICM42688_Readbyte>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b47      	cmp	r3, #71	@ 0x47
 800127e:	d00c      	beq.n	800129a <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b47      	cmp	r3, #71	@ 0x47
 8001284:	d009      	beq.n	800129a <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001286:	2075      	movs	r0, #117	@ 0x75
 8001288:	f000 fa54 	bl	8001734 <ICM42688_Readbyte>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d001      	beq.n	800129a <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 8001296:	2301      	movs	r3, #1
 8001298:	e02a      	b.n	80012f0 <ICM42688_Initialization+0xa0>
		}
	}

	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 800129a:	210f      	movs	r1, #15
 800129c:	204e      	movs	r0, #78	@ 0x4e
 800129e:	f000 fa97 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f003 fc1c 	bl	8004ae0 <HAL_Delay>


	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x26); // Gyro sensitivity 1000 dps, 1kHz
 80012a8:	2126      	movs	r1, #38	@ 0x26
 80012aa:	204f      	movs	r0, #79	@ 0x4f
 80012ac:	f000 fa90 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012b0:	2032      	movs	r0, #50	@ 0x32
 80012b2:	f003 fc15 	bl	8004ae0 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 80012b6:	2100      	movs	r1, #0
 80012b8:	2051      	movs	r0, #81	@ 0x51
 80012ba:	f000 fa89 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012be:	2032      	movs	r0, #50	@ 0x32
 80012c0:	f003 fc0e 	bl	8004ae0 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x46); // Acc sensitivity 4g, 1kHz
 80012c4:	2146      	movs	r1, #70	@ 0x46
 80012c6:	2050      	movs	r0, #80	@ 0x50
 80012c8:	f000 fa82 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012cc:	2032      	movs	r0, #50	@ 0x32
 80012ce:	f003 fc07 	bl	8004ae0 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 80012d2:	2100      	movs	r1, #0
 80012d4:	2053      	movs	r0, #83	@ 0x53
 80012d6:	f000 fa7b 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012da:	2032      	movs	r0, #50	@ 0x32
 80012dc:	f003 fc00 	bl	8004ae0 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80012e0:	2111      	movs	r1, #17
 80012e2:	2052      	movs	r0, #82	@ 0x52
 80012e4:	f000 fa74 	bl	80017d0 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012e8:	2032      	movs	r0, #50	@ 0x32
 80012ea:	f003 fbf9 	bl	8004ae0 <HAL_Delay>
//	ICM42688_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
//	HAL_Delay(50);


	// Remove Gyro X offset
	return 0; //OK
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <ICM42688_GetData>:


int ICM42688_GetData(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	Get6AxisRawData();
 80012fc:	f000 f808 	bl	8001310 <Get6AxisRawData>

	ConvertGyroRaw2Dps();
 8001300:	f000 f864 	bl	80013cc <ConvertGyroRaw2Dps>
	ConvertAccRaw2G();
 8001304:	f000 f904 	bl	8001510 <ConvertAccRaw2G>

	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <Get6AxisRawData>:


/* Functions 2 ---------------------------------------------------------------*/
void Get6AxisRawData()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(TEMP_DATA1, 14, data);
 8001316:	463b      	mov	r3, r7
 8001318:	461a      	mov	r2, r3
 800131a:	210e      	movs	r1, #14
 800131c:	201d      	movs	r0, #29
 800131e:	f000 fa29 	bl	8001774 <ICM42688_Readbytes>

	raw_imu.time_usec = system_time.time_unix_usec;
 8001322:	4928      	ldr	r1, [pc, #160]	@ (80013c4 <Get6AxisRawData+0xb4>)
 8001324:	680a      	ldr	r2, [r1, #0]
 8001326:	684b      	ldr	r3, [r1, #4]
 8001328:	4927      	ldr	r1, [pc, #156]	@ (80013c8 <Get6AxisRawData+0xb8>)
 800132a:	600a      	str	r2, [r1, #0]
 800132c:	604b      	str	r3, [r1, #4]
	raw_imu.temperature = (data[0] << 8) | data[1];
 800132e:	783b      	ldrb	r3, [r7, #0]
 8001330:	b21b      	sxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <Get6AxisRawData+0xb8>)
 8001340:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 8001344:	78bb      	ldrb	r3, [r7, #2]
 8001346:	b21b      	sxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <Get6AxisRawData+0xb8>)
 8001356:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	b21b      	sxth	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <Get6AxisRawData+0xb8>)
 800136a:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	b21b      	sxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <Get6AxisRawData+0xb8>)
 800137e:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 8001380:	7a3b      	ldrb	r3, [r7, #8]
 8001382:	b21b      	sxth	r3, r3
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21a      	sxth	r2, r3
 8001388:	7a7b      	ldrb	r3, [r7, #9]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <Get6AxisRawData+0xb8>)
 8001392:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 8001394:	7abb      	ldrb	r3, [r7, #10]
 8001396:	b21b      	sxth	r3, r3
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <Get6AxisRawData+0xb8>)
 80013a6:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 80013a8:	7b3b      	ldrb	r3, [r7, #12]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <Get6AxisRawData+0xb8>)
 80013ba:	825a      	strh	r2, [r3, #18]

	return;
 80013bc:	bf00      	nop
}
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000458 	.word	0x20000458
 80013c8:	2000047c 	.word	0x2000047c

080013cc <ConvertGyroRaw2Dps>:
 * 			m degree/s
 * @parm none
 * @retval none
 */
void ConvertGyroRaw2Dps(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	uint8_t gyro_reg_val = ICM42688_Readbyte(GYRO_CONFIG0);
 80013d2:	204f      	movs	r0, #79	@ 0x4f
 80013d4:	f000 f9ae 	bl	8001734 <ICM42688_Readbyte>
 80013d8:	4603      	mov	r3, r0
 80013da:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_fs_sel = (gyro_reg_val >> 5) & 0x07;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (gyro_fs_sel)
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d82b      	bhi.n	8001440 <ConvertGyroRaw2Dps+0x74>
 80013e8:	a201      	add	r2, pc, #4	@ (adr r2, 80013f0 <ConvertGyroRaw2Dps+0x24>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001411 	.word	0x08001411
 80013f4:	08001417 	.word	0x08001417
 80013f8:	0800141d 	.word	0x0800141d
 80013fc:	08001423 	.word	0x08001423
 8001400:	08001429 	.word	0x08001429
 8001404:	0800142f 	.word	0x0800142f
 8001408:	08001435 	.word	0x08001435
 800140c:	0800143b 	.word	0x0800143b
	{
	case 0: sensitivity = 16.4f; break;       // ±2000 dps
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <ConvertGyroRaw2Dps+0x114>)
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e017      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 1: sensitivity = 32.8f; break;       // ±1000 dps
 8001416:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <ConvertGyroRaw2Dps+0x118>)
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e014      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 2: sensitivity = 65.5f; break;       // ±500 dps
 800141c:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <ConvertGyroRaw2Dps+0x11c>)
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e011      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 3: sensitivity = 131.0f; break;      // ±250 dps
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <ConvertGyroRaw2Dps+0x120>)
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e00e      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 4: sensitivity = 262.0f; break;      // ±125 dps
 8001428:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <ConvertGyroRaw2Dps+0x124>)
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e00b      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 5: sensitivity = 524.3f; break;      // ±62.5 dps
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <ConvertGyroRaw2Dps+0x128>)
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e008      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 6: sensitivity = 1048.6f; break;     // ±31.25 dps
 8001434:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <ConvertGyroRaw2Dps+0x12c>)
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e005      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	case 7: sensitivity = 2097.2f; break;     // ±15.625 dps
 800143a:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <ConvertGyroRaw2Dps+0x130>)
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e002      	b.n	8001446 <ConvertGyroRaw2Dps+0x7a>
	default: sensitivity = 16.4f; break;      // fallback: ±2000 dps
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <ConvertGyroRaw2Dps+0x114>)
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	bf00      	nop
	}

	scaled_imu.time_boot_ms = system_time.time_boot_ms;
 8001446:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <ConvertGyroRaw2Dps+0x134>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4a2e      	ldr	r2, [pc, #184]	@ (8001504 <ConvertGyroRaw2Dps+0x138>)
 800144c:	6013      	str	r3, [r2, #0]

	// m degree
	scaled_imu.xgyro = (float)raw_imu.xgyro / sensitivity * 1000;
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <ConvertGyroRaw2Dps+0x13c>)
 8001450:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001454:	b21b      	sxth	r3, r3
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800145e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001466:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800150c <ConvertGyroRaw2Dps+0x140>
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <ConvertGyroRaw2Dps+0x138>)
 800147a:	815a      	strh	r2, [r3, #10]
	scaled_imu.ygyro = (float)raw_imu.ygyro / sensitivity * 1000;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <ConvertGyroRaw2Dps+0x13c>)
 800147e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001482:	b21b      	sxth	r3, r3
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001494:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800150c <ConvertGyroRaw2Dps+0x140>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	ee17 3a90 	vmov	r3, s15
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <ConvertGyroRaw2Dps+0x138>)
 80014a8:	819a      	strh	r2, [r3, #12]
	scaled_imu.zgyro = (float)raw_imu.zgyro / sensitivity * 1000;
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <ConvertGyroRaw2Dps+0x13c>)
 80014ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800150c <ConvertGyroRaw2Dps+0x140>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <ConvertGyroRaw2Dps+0x138>)
 80014d6:	81da      	strh	r2, [r3, #14]

	return;
 80014d8:	bf00      	nop
}
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	41833333 	.word	0x41833333
 80014e4:	42033333 	.word	0x42033333
 80014e8:	42830000 	.word	0x42830000
 80014ec:	43030000 	.word	0x43030000
 80014f0:	43830000 	.word	0x43830000
 80014f4:	44031333 	.word	0x44031333
 80014f8:	44831333 	.word	0x44831333
 80014fc:	45031333 	.word	0x45031333
 8001500:	20000458 	.word	0x20000458
 8001504:	20000464 	.word	0x20000464
 8001508:	2000047c 	.word	0x2000047c
 800150c:	447a0000 	.word	0x447a0000

08001510 <ConvertAccRaw2G>:


void ConvertAccRaw2G(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	uint8_t acc_reg_val = ICM42688_Readbyte(ACCEL_CONFIG0);
 8001516:	2050      	movs	r0, #80	@ 0x50
 8001518:	f000 f90c 	bl	8001734 <ICM42688_Readbyte>
 800151c:	4603      	mov	r3, r0
 800151e:	70fb      	strb	r3, [r7, #3]
	uint8_t acc_fs_sel = (acc_reg_val >> 5) & 0x07;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (acc_fs_sel)
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d81b      	bhi.n	8001564 <ConvertAccRaw2G+0x54>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <ConvertAccRaw2G+0x24>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	08001545 	.word	0x08001545
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001555 	.word	0x08001555
 8001540:	0800155d 	.word	0x0800155d
	{
	case 0: sensitivity = 2048.0f; break;    // ±16g
 8001544:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e00f      	b.n	800156c <ConvertAccRaw2G+0x5c>
	case 1: sensitivity = 4096.0f; break;    // ±8g
 800154c:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	e00b      	b.n	800156c <ConvertAccRaw2G+0x5c>
	case 2: sensitivity = 8192.0f; break;    // ±4g
 8001554:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	e007      	b.n	800156c <ConvertAccRaw2G+0x5c>
	case 3: sensitivity = 16384.0f; break;   // ±2g
 800155c:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	e003      	b.n	800156c <ConvertAccRaw2G+0x5c>
	default: sensitivity = 2048.0f; break;   // fallback: ±16g
 8001564:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	bf00      	nop
	}

	// mG
	scaled_imu.xacc = (float)raw_imu.xacc / sensitivity * 1000;
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <ConvertAccRaw2G+0xf0>)
 800156e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001572:	b21b      	sxth	r3, r3
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800157c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001584:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001604 <ConvertAccRaw2G+0xf4>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <ConvertAccRaw2G+0xf8>)
 8001598:	809a      	strh	r2, [r3, #4]
	scaled_imu.yacc = (float)raw_imu.yacc / sensitivity * 1000;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <ConvertAccRaw2G+0xf0>)
 800159c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001604 <ConvertAccRaw2G+0xf4>
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <ConvertAccRaw2G+0xf8>)
 80015c6:	80da      	strh	r2, [r3, #6]
	scaled_imu.zacc = (float)raw_imu.zacc / sensitivity * 1000;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <ConvertAccRaw2G+0xf0>)
 80015ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001604 <ConvertAccRaw2G+0xf4>
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ec:	ee17 3a90 	vmov	r3, s15
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <ConvertAccRaw2G+0xf8>)
 80015f4:	811a      	strh	r2, [r3, #8]

	return;
 80015f6:	bf00      	nop
}
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000047c 	.word	0x2000047c
 8001604:	447a0000 	.word	0x447a0000
 8001608:	20000464 	.word	0x20000464

0800160c <ICM42688_GPIO_SPI_Initialization>:


/* Functions 3 ---------------------------------------------------------------*/
void ICM42688_GPIO_SPI_Initialization(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	@ 0x40
 8001610:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2228      	movs	r2, #40	@ 0x28
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00b fe05 	bl	800d22a <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001630:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001634:	f7ff fdf4 	bl	8001220 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fdd9 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800163e:	2010      	movs	r0, #16
 8001640:	f7ff fdd6 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001644:	23e0      	movs	r3, #224	@ 0xe0
 8001646:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001648:	2302      	movs	r3, #2
 800164a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001658:	2305      	movs	r3, #5
 800165a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4820      	ldr	r0, [pc, #128]	@ (80016e4 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 8001662:	f005 ff0d 	bl	8007480 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800166a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800166e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001674:	2302      	movs	r3, #2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001678:	2301      	movs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800167c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001682:	2310      	movs	r3, #16
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800168e:	230a      	movs	r3, #10
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800169a:	f006 f8cc 	bl	8007836 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800169e:	2100      	movs	r1, #0
 80016a0:	4811      	ldr	r0, [pc, #68]	@ (80016e8 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80016a2:	f7ff fd2f 	bl	8001104 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 80016a6:	2120      	movs	r1, #32
 80016a8:	4810      	ldr	r0, [pc, #64]	@ (80016ec <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80016aa:	f7ff fd92 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 80016ae:	2320      	movs	r3, #32
 80016b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016b2:	2301      	movs	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80016c8:	f005 feda 	bl	8007480 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80016cc:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80016ce:	f7ff fd09 	bl	80010e4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80016d2:	2120      	movs	r1, #32
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80016d6:	f7ff fd6e 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 80016da:	bf00      	nop
 80016dc:	3740      	adds	r7, #64	@ 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40021000 	.word	0x40021000

080016f0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80016fa:	bf00      	nop
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <SPI1_SendByte+0x40>)
 80016fe:	f7ff fd27 	bl	8001150 <LL_SPI_IsActiveFlag_TXE>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f9      	beq.n	80016fc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	@ (8001730 <SPI1_SendByte+0x40>)
 800170e:	f7ff fd40 	bl	8001192 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 8001712:	bf00      	nop
 8001714:	4806      	ldr	r0, [pc, #24]	@ (8001730 <SPI1_SendByte+0x40>)
 8001716:	f7ff fd08 	bl	800112a <LL_SPI_IsActiveFlag_RXNE>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f9      	beq.n	8001714 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <SPI1_SendByte+0x40>)
 8001722:	f7ff fd28 	bl	8001176 <LL_SPI_ReceiveData8>
 8001726:	4603      	mov	r3, r0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013000 	.word	0x40013000

08001734 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 800173e:	2120      	movs	r1, #32
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <ICM42688_Readbyte+0x3c>)
 8001742:	f7ff fd46 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffce 	bl	80016f0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff ffcb 	bl	80016f0 <SPI1_SendByte>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 800175e:	2120      	movs	r1, #32
 8001760:	4803      	ldr	r0, [pc, #12]	@ (8001770 <ICM42688_Readbyte+0x3c>)
 8001762:	f7ff fd28 	bl	80011b6 <LL_GPIO_SetOutputPin>
	
	return val;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	603a      	str	r2, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	460b      	mov	r3, r1
 8001782:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 8001788:	2120      	movs	r1, #32
 800178a:	4810      	ldr	r0, [pc, #64]	@ (80017cc <ICM42688_Readbytes+0x58>)
 800178c:	f7ff fd21 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ffa9 	bl	80016f0 <SPI1_SendByte>
	while(i < len)
 800179e:	e009      	b.n	80017b4 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60fa      	str	r2, [r7, #12]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	18d4      	adds	r4, r2, r3
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff ffa0 	bl	80016f0 <SPI1_SendByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3f1      	bcc.n	80017a0 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 80017bc:	2120      	movs	r1, #32
 80017be:	4803      	ldr	r0, [pc, #12]	@ (80017cc <ICM42688_Readbytes+0x58>)
 80017c0:	f7ff fcf9 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80017e0:	2120      	movs	r1, #32
 80017e2:	480b      	ldr	r0, [pc, #44]	@ (8001810 <ICM42688_Writebyte+0x40>)
 80017e4:	f7ff fcf5 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff7d 	bl	80016f0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff79 	bl	80016f0 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80017fe:	2120      	movs	r1, #32
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <ICM42688_Writebyte+0x40>)
 8001802:	f7ff fcd8 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <IMU_Initialization>:
 * @detail IMU 1 - ICM42688P : GYRO, ACC, TEMP
 * @parm none
 * @retval 0
 */
int IMU_Initialization(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	ICM42688_Initialization();
 8001818:	f7ff fd1a 	bl	8001250 <ICM42688_Initialization>
	return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}

08001822 <IMU_GetData>:
 * @detail SCALED_IMU(2,3)에 저장
 * @parm none
 * @retval none
 */
unsigned int IMU_GetData(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0

	// SCALED_IMU
	ICM42688_GetData();
 8001826:	f7ff fd67 	bl	80012f8 <ICM42688_GetData>
	// SCALED_IMU3

//	ComplementaryFilter();
//	KalmanFilter();

	return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}

08001830 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001840:	2b80      	cmp	r3, #128	@ 0x80
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	605a      	str	r2, [r3, #4]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <Log_Send>:
const uint8_t code = 0xFD;
uint16_t logType = 0;

/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	// 10Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 100)) return -1;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <Log_Send+0x70>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <Log_Send+0x74>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	d802      	bhi.n	800188c <Log_Send+0x18>
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e028      	b.n	80018de <Log_Send+0x6a>
	previous_time = system_time.time_boot_ms;
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <Log_Send+0x70>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a15      	ldr	r2, [pc, #84]	@ (80018e8 <Log_Send+0x74>)
 8001892:	6013      	str	r3, [r2, #0]

	switch(logType)
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <Log_Send+0x78>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b41      	cmp	r3, #65	@ 0x41
 800189a:	d019      	beq.n	80018d0 <Log_Send+0x5c>
 800189c:	2b41      	cmp	r3, #65	@ 0x41
 800189e:	dc1c      	bgt.n	80018da <Log_Send+0x66>
 80018a0:	2b24      	cmp	r3, #36	@ 0x24
 80018a2:	d010      	beq.n	80018c6 <Log_Send+0x52>
 80018a4:	2b24      	cmp	r3, #36	@ 0x24
 80018a6:	dc18      	bgt.n	80018da <Log_Send+0x66>
 80018a8:	2b1a      	cmp	r3, #26
 80018aa:	d002      	beq.n	80018b2 <Log_Send+0x3e>
 80018ac:	2b1b      	cmp	r3, #27
 80018ae:	d005      	beq.n	80018bc <Log_Send+0x48>
		break;
	case 65:
		Log_transmit((uint8_t*)&RC_channels, sizeof(RC_channels));
		break;
	default:
		break;
 80018b0:	e013      	b.n	80018da <Log_Send+0x66>
		Log_transmit((uint8_t*)&scaled_imu, sizeof(scaled_imu));
 80018b2:	2118      	movs	r1, #24
 80018b4:	480e      	ldr	r0, [pc, #56]	@ (80018f0 <Log_Send+0x7c>)
 80018b6:	f000 f823 	bl	8001900 <Log_transmit>
		break;
 80018ba:	e00f      	b.n	80018dc <Log_Send+0x68>
		Log_transmit((uint8_t*)&raw_imu, sizeof(raw_imu));
 80018bc:	211d      	movs	r1, #29
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <Log_Send+0x80>)
 80018c0:	f000 f81e 	bl	8001900 <Log_transmit>
		break;
 80018c4:	e00a      	b.n	80018dc <Log_Send+0x68>
		Log_transmit((uint8_t*)&servo_output_raw, sizeof(servo_output_raw));
 80018c6:	2125      	movs	r1, #37	@ 0x25
 80018c8:	480b      	ldr	r0, [pc, #44]	@ (80018f8 <Log_Send+0x84>)
 80018ca:	f000 f819 	bl	8001900 <Log_transmit>
		break;
 80018ce:	e005      	b.n	80018dc <Log_Send+0x68>
		Log_transmit((uint8_t*)&RC_channels, sizeof(RC_channels));
 80018d0:	212a      	movs	r1, #42	@ 0x2a
 80018d2:	480a      	ldr	r0, [pc, #40]	@ (80018fc <Log_Send+0x88>)
 80018d4:	f000 f814 	bl	8001900 <Log_transmit>
		break;
 80018d8:	e000      	b.n	80018dc <Log_Send+0x68>
		break;
 80018da:	bf00      	nop
	}
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000458 	.word	0x20000458
 80018e8:	200002e4 	.word	0x200002e4
 80018ec:	200002e2 	.word	0x200002e2
 80018f0:	20000464 	.word	0x20000464
 80018f4:	2000047c 	.word	0x2000047c
 80018f8:	2000049c 	.word	0x2000049c
 80018fc:	200004c4 	.word	0x200004c4

08001900 <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]

    uint8_t packetLen = len+sizeof(uint8_t)*3;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	3303      	adds	r3, #3
 8001910:	74fb      	strb	r3, [r7, #19]
    uint8_t* packet = malloc(packetLen);
 8001912:	7cfb      	ldrb	r3, [r7, #19]
 8001914:	4618      	mov	r0, r3
 8001916:	f00a fe5d 	bl	800c5d4 <malloc>
 800191a:	4603      	mov	r3, r0
 800191c:	60fb      	str	r3, [r7, #12]

    memcpy(packet, &code, sizeof(uint8_t));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	22fd      	movs	r2, #253	@ 0xfd
 8001922:	701a      	strb	r2, [r3, #0]
    memcpy(packet + sizeof(uint8_t), p, len);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f00b fd0c 	bl	800d34a <memcpy>

    uint16_t crc = calculate_crc(packet, packetLen);
 8001932:	7cfb      	ldrb	r3, [r7, #19]
 8001934:	4619      	mov	r1, r3
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fdac 	bl	8002494 <calculate_crc>
 800193c:	4603      	mov	r3, r0
 800193e:	817b      	strh	r3, [r7, #10]

    memcpy(packet + sizeof(uint8_t) + len, &crc, sizeof(uint16_t));
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	3301      	adds	r3, #1
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	897a      	ldrh	r2, [r7, #10]
 800194a:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(packet, packetLen);
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	4619      	mov	r1, r3
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f00a f9c5 	bl	800bce0 <CDC_Transmit_FS>

	for(int i=0; i<packetLen; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e011      	b.n	8001980 <Log_transmit+0x80>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}
 800195c:	bf00      	nop
 800195e:	480e      	ldr	r0, [pc, #56]	@ (8001998 <Log_transmit+0x98>)
 8001960:	f7ff ff66 	bl	8001830 <LL_USART_IsActiveFlag_TXE>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f9      	beq.n	800195e <Log_transmit+0x5e>
		LL_USART_TransmitData8(USART2, packet[i]);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <Log_transmit+0x98>)
 8001976:	f7ff ff6e 	bl	8001856 <LL_USART_TransmitData8>
	for(int i=0; i<packetLen; i++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	7cfb      	ldrb	r3, [r7, #19]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbe9      	blt.n	800195c <Log_transmit+0x5c>
	}

    free(packet);
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f00a fe2b 	bl	800c5e4 <free>

	return packetLen;
 800198e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004400 	.word	0x40004400

0800199c <USB_CDC_RxHandler>:


void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	if(Len<3 || Len > 255) return;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d92a      	bls.n	8001a02 <USB_CDC_RxHandler+0x66>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2bff      	cmp	r3, #255	@ 0xff
 80019b0:	d827      	bhi.n	8001a02 <USB_CDC_RxHandler+0x66>
	if(Buf[0] != code) return;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	22fd      	movs	r2, #253	@ 0xfd
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d124      	bne.n	8001a06 <USB_CDC_RxHandler+0x6a>

	uint16_t crc = ((uint16_t)Buf[Len -2] << 8 | Buf[Len -1]);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	3b02      	subs	r3, #2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	440b      	add	r3, r1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b21b      	sxth	r3, r3
 80019dc:	81fb      	strh	r3, [r7, #14]
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fd55 	bl	8002494 <calculate_crc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d10a      	bne.n	8001a0a <USB_CDC_RxHandler+0x6e>

	logType = Buf[1];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <USB_CDC_RxHandler+0x78>)
 80019fe:	801a      	strh	r2, [r3, #0]

	return;
 8001a00:	e004      	b.n	8001a0c <USB_CDC_RxHandler+0x70>
	if(Len<3 || Len > 255) return;
 8001a02:	bf00      	nop
 8001a04:	e002      	b.n	8001a0c <USB_CDC_RxHandler+0x70>
	if(Buf[0] != code) return;
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <USB_CDC_RxHandler+0x70>
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 8001a0a:	bf00      	nop
}
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002e2 	.word	0x200002e2

08001a18 <PARM_load>:

#include <FC_Param/Param.h>
#include <FC_RC/RadioControl.h>


int PARM_load(void){
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8001a1e:	4b73      	ldr	r3, [pc, #460]	@ (8001bec <PARM_load+0x1d4>)
 8001a20:	607b      	str	r3, [r7, #4]
	PARAM_SERVO_CH* servo_ch = paramServoCH;
 8001a22:	4b73      	ldr	r3, [pc, #460]	@ (8001bf0 <PARM_load+0x1d8>)
 8001a24:	603b      	str	r3, [r7, #0]

	paramRc.OPTIONS = 0;
 8001a26:	4b73      	ldr	r3, [pc, #460]	@ (8001bf4 <PARM_load+0x1dc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	711a      	strb	r2, [r3, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	715a      	strb	r2, [r3, #5]
	paramRc.OVERRIDE_TIME = 0.0;
 8001a30:	4b70      	ldr	r3, [pc, #448]	@ (8001bf4 <PARM_load+0x1dc>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
	paramRc.PROTOCOLS = (0x00);			// 수신기 없이 테스트
 8001a38:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <PARM_load+0x1dc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	719a      	strb	r2, [r3, #6]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	71da      	strb	r2, [r3, #7]
//	paramRc.PROTOCOLS = (0x1<<SRXL2);	// SRXL2
//	paramRc.PROTOCOLS = (0x1<<PPM);		// PPM (FS-iA6B)
	paramRc.FS_TIMEOUT = 1.0;
 8001a42:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf4 <PARM_load+0x1dc>)
 8001a44:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a48:	609a      	str	r2, [r3, #8]
	paramRc.reversedMask = 0x00;
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <PARM_load+0x1dc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	731a      	strb	r2, [r3, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	735a      	strb	r2, [r3, #13]
 8001a54:	2200      	movs	r2, #0
 8001a56:	739a      	strb	r2, [r3, #14]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	73da      	strb	r2, [r3, #15]

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e03b      	b.n	8001ada <PARM_load+0xc2>
	{
		paramRcCH[i].MIN = 1000;
 8001a62:	4965      	ldr	r1, [pc, #404]	@ (8001bf8 <PARM_load+0x1e0>)
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f062 0217 	orn	r2, r2, #23
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f042 0203 	orr.w	r2, r2, #3
 8001a7c:	705a      	strb	r2, [r3, #1]
		paramRcCH[i].MAX = 2000;
 8001a7e:	495e      	ldr	r1, [pc, #376]	@ (8001bf8 <PARM_load+0x1e0>)
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001a90:	709a      	strb	r2, [r3, #2]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f042 0207 	orr.w	r2, r2, #7
 8001a98:	70da      	strb	r2, [r3, #3]
		paramRcCH[i].TRIM = 0;
 8001a9a:	4957      	ldr	r1, [pc, #348]	@ (8001bf8 <PARM_load+0x1e0>)
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	711a      	strb	r2, [r3, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	715a      	strb	r2, [r3, #5]
		paramRcCH[i].DZ = 0;
 8001aae:	4952      	ldr	r1, [pc, #328]	@ (8001bf8 <PARM_load+0x1e0>)
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3306      	adds	r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
		paramRcCH[i].OPTION = 0;
 8001ac0:	494d      	ldr	r1, [pc, #308]	@ (8001bf8 <PARM_load+0x1e0>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	71da      	strb	r2, [r3, #7]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	721a      	strb	r2, [r3, #8]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	ddc0      	ble.n	8001a62 <PARM_load+0x4a>

//	paramRcMap.THR = 0;		// SRXL2 값
//	paramRcMap.ROL = 1;
//	paramRcMap.PIT = 2;
//	paramRcMap.YAW = 3;
	paramRcMap.THR = 2;		// FS-iA6B용 값들
 8001ae0:	4b46      	ldr	r3, [pc, #280]	@ (8001bfc <PARM_load+0x1e4>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
	paramRcMap.ROL = 3;
 8001ae6:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <PARM_load+0x1e4>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	705a      	strb	r2, [r3, #1]
	paramRcMap.PIT = 1;
 8001aec:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <PARM_load+0x1e4>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	709a      	strb	r2, [r3, #2]
	paramRcMap.YAW = 0;
 8001af2:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <PARM_load+0x1e4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	70da      	strb	r2, [r3, #3]

	servo->AUTO_TRIM = 0;
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	7813      	ldrb	r3, [r2, #0]
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	7013      	strb	r3, [r2, #0]
	servo->DSHOT_ESC = 0;
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	78d3      	ldrb	r3, [r2, #3]
 8001b06:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001b0a:	70d3      	strb	r3, [r2, #3]
	servo->DSHOT_RATE = 0;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	78d3      	ldrb	r3, [r2, #3]
 8001b10:	f023 0307 	bic.w	r3, r3, #7
 8001b14:	70d3      	strb	r3, [r2, #3]
	servo->RATE = 50;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	2200      	movs	r2, #0
 8001b22:	709a      	strb	r2, [r3, #2]
	servo->GPIO_MASK = 0xFF;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2a:	711a      	strb	r2, [r3, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	715a      	strb	r2, [r3, #5]
 8001b30:	2200      	movs	r2, #0
 8001b32:	719a      	strb	r2, [r3, #6]
 8001b34:	2200      	movs	r2, #0
 8001b36:	71da      	strb	r2, [r3, #7]
	servo->RC_FS_MSK = 0xFF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3e:	721a      	strb	r2, [r3, #8]
 8001b40:	2200      	movs	r2, #0
 8001b42:	725a      	strb	r2, [r3, #9]
	servo->_32_ENABLE = 0;
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	7a93      	ldrb	r3, [r2, #10]
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	7293      	strb	r3, [r2, #10]

	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	e040      	b.n	8001bd6 <PARM_load+0x1be>
		servo_ch[i].FUNCTION = 0;
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	71da      	strb	r2, [r3, #7]
 8001b64:	2200      	movs	r2, #0
 8001b66:	721a      	strb	r2, [r3, #8]
		servo_ch[i].MAX = 2000;
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	2200      	movs	r2, #0
 8001b76:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001b7a:	709a      	strb	r2, [r3, #2]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f042 0207 	orr.w	r2, r2, #7
 8001b82:	70da      	strb	r2, [r3, #3]
		servo_ch[i].MIN = 1000;
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	2200      	movs	r2, #0
 8001b92:	f062 0217 	orn	r2, r2, #23
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f042 0203 	orr.w	r2, r2, #3
 8001b9e:	705a      	strb	r2, [r3, #1]
		servo_ch[i].TRIM = 1500;
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	2200      	movs	r2, #0
 8001bae:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001bb2:	711a      	strb	r2, [r3, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f042 0205 	orr.w	r2, r2, #5
 8001bba:	715a      	strb	r2, [r3, #5]
		servo_ch[i].REVERSED = 0;
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	7993      	ldrb	r3, [r2, #6]
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	7193      	strb	r3, [r2, #6]
	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	ddbb      	ble.n	8001b54 <PARM_load+0x13c>
	}
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200002e8 	.word	0x200002e8
 8001bf0:	200002f4 	.word	0x200002f4
 8001bf4:	20000360 	.word	0x20000360
 8001bf8:	20000370 	.word	0x20000370
 8001bfc:	20000414 	.word	0x20000414

08001c00 <LL_TIM_EnableCounter>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_TIM_CC_EnableChannel>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	621a      	str	r2, [r3, #32]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <PPM_init>:
 * @brief PPM 입력을 위한 타이머 설정
 * @detail RC_Initialization()에서 실행됨
 * @retval 0 : 정상 수신
 */
int PPM_init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
	/*
	 * TIM1은 168MHz이고 PPM은 일반적으로 20ms 이므로
	 */
	const int hz = 50;
 8001c4a:	2332      	movs	r3, #50	@ 0x32
 8001c4c:	607b      	str	r3, [r7, #4]
	TIM1->ARR = 1000000/hz-1;
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <PPM_init+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <PPM_init+0x44>)
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 168-1;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <PPM_init+0x44>)
 8001c5e:	22a7      	movs	r2, #167	@ 0xa7
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->CCR4 = TIM1->ARR;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <PPM_init+0x44>)
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <PPM_init+0x44>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40

	LL_TIM_EnableCounter(TIM1);
 8001c6a:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <PPM_init+0x44>)
 8001c6c:	f7ff ffc8 	bl	8001c00 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8001c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c74:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <PPM_init+0x44>)
 8001c76:	f7ff ffd3 	bl	8001c20 <LL_TIM_CC_EnableChannel>
	return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	000f4240 	.word	0x000f4240
 8001c88:	40010000 	.word	0x40010000

08001c8c <PPM_readData>:
 * @parm timer 데이터 (ms 단위)
 * @retval 0 : 정상 수신
 * @retval 1 : 이상 데이터
 */
int PPM_readData(uint16_t data)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
	static uint16_t previous = 0;
    static uint8_t cnt = 0;
	uint16_t rx = system_time.time_unix_usec - previous;
 8001c96:	491b      	ldr	r1, [pc, #108]	@ (8001d04 <PPM_readData+0x78>)
 8001c98:	680a      	ldr	r2, [r1, #0]
 8001c9a:	684b      	ldr	r3, [r1, #4]
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <PPM_readData+0x7c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	81fb      	strh	r3, [r7, #14]

	previous = system_time.time_unix_usec;
 8001ca6:	4917      	ldr	r1, [pc, #92]	@ (8001d04 <PPM_readData+0x78>)
 8001ca8:	680a      	ldr	r2, [r1, #0]
 8001caa:	684b      	ldr	r3, [r1, #4]
 8001cac:	b292      	uxth	r2, r2
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <PPM_readData+0x7c>)
 8001cb0:	801a      	strh	r2, [r3, #0]

    if(rx>2500) cnt = 0;
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d902      	bls.n	8001cc2 <PPM_readData+0x36>
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <PPM_readData+0x80>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	if(rx>2200 || rx<800) return 1;
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	f640 0298 	movw	r2, #2200	@ 0x898
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d803      	bhi.n	8001cd4 <PPM_readData+0x48>
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001cd2:	d201      	bcs.n	8001cd8 <PPM_readData+0x4c>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e00e      	b.n	8001cf6 <PPM_readData+0x6a>

	((uint16_t*)RC_Buffer)[cnt] = rx;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <PPM_readData+0x84>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <PPM_readData+0x80>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	89fa      	ldrh	r2, [r7, #14]
 8001ce6:	801a      	strh	r2, [r3, #0]
    cnt++;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <PPM_readData+0x80>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <PPM_readData+0x80>)
 8001cf2:	701a      	strb	r2, [r3, #0]

	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000458 	.word	0x20000458
 8001d08:	20000418 	.word	0x20000418
 8001d0c:	2000041a 	.word	0x2000041a
 8001d10:	20000450 	.word	0x20000450

08001d14 <PPM_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval 0xf2 : FailSafe
 */
int PPM_getControlData(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
	PARAM_RC* param = &paramRc;
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <PPM_getControlData+0x178>)
 8001d1c:	613b      	str	r3, [r7, #16]
	PARAM_RC_CH* paramCh = paramRcCH;
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <PPM_getControlData+0x17c>)
 8001d20:	60fb      	str	r3, [r7, #12]
	RC_CHANNELS* rc = &RC_channels;
 8001d22:	4b5c      	ldr	r3, [pc, #368]	@ (8001e94 <PPM_getControlData+0x180>)
 8001d24:	60bb      	str	r3, [r7, #8]

	if(RC_isBufferInit() != 0) return -1;
 8001d26:	f000 fd85 	bl	8002834 <RC_isBufferInit>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <PPM_getControlData+0x22>
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e0a5      	b.n	8001e82 <PPM_getControlData+0x16e>

	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e09d      	b.n	8001e78 <PPM_getControlData+0x164>
		// Reverse 처리
		uint16_t value = ((uint16_t*)RC_Buffer)[i];
 8001d3c:	4b56      	ldr	r3, [pc, #344]	@ (8001e98 <PPM_getControlData+0x184>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	80fb      	strh	r3, [r7, #6]
		if((param->reversedMask>>i)&0x01)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02c      	beq.n	8001db6 <PPM_getControlData+0xa2>
		{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d68:	885b      	ldrh	r3, [r3, #2]
 8001d6a:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	88f8      	ldrh	r0, [r7, #6]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d86:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d8a:	f000 fe1b 	bl	80029c4 <map>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	889b      	ldrh	r3, [r3, #4]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	440b      	add	r3, r1
 8001da4:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	460a      	mov	r2, r1
 8001db0:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001db4:	e02b      	b.n	8001e0e <PPM_getControlData+0xfa>
		}
		else{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	88f8      	ldrh	r0, [r7, #6]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001de0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001de4:	f000 fdee 	bl	80029c4 <map>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	460a      	mov	r2, r1
 8001e0a:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	799b      	ldrb	r3, [r3, #6]
 8001e2c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001e30:	3304      	adds	r3, #4
 8001e32:	4299      	cmp	r1, r3
 8001e34:	dd1d      	ble.n	8001e72 <PPM_getControlData+0x15e>
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	429a      	cmp	r2, r3
 8001e58:	db0b      	blt.n	8001e72 <PPM_getControlData+0x15e>
			rc->value[i] = 1500;
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001e68:	715a      	strb	r2, [r3, #5]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f042 0205 	orr.w	r2, r2, #5
 8001e70:	719a      	strb	r2, [r3, #6]
	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b07      	cmp	r3, #7
 8001e7c:	f77f af5e 	ble.w	8001d3c <PPM_getControlData+0x28>
		}
	}

	return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000360 	.word	0x20000360
 8001e90:	20000370 	.word	0x20000370
 8001e94:	200004c4 	.word	0x200004c4
 8001e98:	20000450 	.word	0x20000450

08001e9c <SRXL2_connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_connect(void){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <SRXL2_connect+0xa8>)
 8001ea4:	617b      	str	r3, [r7, #20]

	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001ea6:	f000 fa97 	bl	80023d8 <SRXL2_isReceived>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d138      	bne.n	8001f22 <SRXL2_connect+0x86>

		switch(header->pType)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b21      	cmp	r3, #33	@ 0x21
 8001eb6:	d003      	beq.n	8001ec0 <SRXL2_connect+0x24>
 8001eb8:	2bcd      	cmp	r3, #205	@ 0xcd
 8001eba:	d134      	bne.n	8001f26 <SRXL2_connect+0x8a>
		{
		case SRXL_CTRL_ID:
			//Bind 정보 요청 또는 unbind 후 재 연결하도록 작성
			return 2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e03c      	b.n	8001f3a <SRXL2_connect+0x9e>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <SRXL2_connect+0xac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10e      	bne.n	8001ef2 <SRXL2_connect+0x56>
			{
				receiver_info.SrcID = rx->SrcID;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <SRXL2_connect+0xb0>)
 8001eda:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	791a      	ldrb	r2, [r3, #4]
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <SRXL2_connect+0xb0>)
 8001ee2:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001eea:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <SRXL2_connect+0xb0>)
 8001eec:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 8001ef0:	e000      	b.n	8001ef4 <SRXL2_connect+0x58>
			}
			break;
 8001ef2:	bf00      	nop
		default:
			continue;
		}

		break;
 8001ef4:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 8001ef6:	23a6      	movs	r3, #166	@ 0xa6
 8001ef8:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 8001efa:	2321      	movs	r3, #33	@ 0x21
 8001efc:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 8001efe:	230e      	movs	r3, #14
 8001f00:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 8001f02:	2330      	movs	r3, #48	@ 0x30
 8001f04:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <SRXL2_connect+0xb0>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 8001f0c:	2360      	movs	r3, #96	@ 0x60
 8001f0e:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001f14:	2301      	movs	r3, #1
 8001f16:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <SRXL2_connect+0xb4>)
 8001f1a:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 8001f20:	e003      	b.n	8001f2a <SRXL2_connect+0x8e>
		if(SRXL2_isReceived()!=0) continue;
 8001f22:	bf00      	nop
 8001f24:	e7bf      	b.n	8001ea6 <SRXL2_connect+0xa>
			continue;
 8001f26:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001f28:	e7bd      	b.n	8001ea6 <SRXL2_connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f96f 	bl	8002210 <SRXL2_doHandshake>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f8      	bne.n	8001f2a <SRXL2_connect+0x8e>

	return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000041c 	.word	0x2000041c
 8001f48:	20000450 	.word	0x20000450
 8001f4c:	20000434 	.word	0x20000434
 8001f50:	12345678 	.word	0x12345678

08001f54 <SRXL2_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int SRXL2_getControlData(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	SRXL2_Header* header = &packet.header;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <SRXL2_getControlData+0x70>)
 8001f5c:	607b      	str	r3, [r7, #4]
	SRXL2_Control_Packet* rx = (SRXL2_Control_Packet*)RC_Buffer;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <SRXL2_getControlData+0x74>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	603b      	str	r3, [r7, #0]

	if(SRXL2_isReceived()!=0) return -1;
 8001f64:	f000 fa38 	bl	80023d8 <SRXL2_isReceived>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <SRXL2_getControlData+0x20>
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e022      	b.n	8001fba <SRXL2_getControlData+0x66>
	if(header->pType != SRXL_CTRL_ID) return -2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	2bcd      	cmp	r3, #205	@ 0xcd
 8001f7a:	d002      	beq.n	8001f82 <SRXL2_getControlData+0x2e>
 8001f7c:	f06f 0301 	mvn.w	r3, #1
 8001f80:	e01b      	b.n	8001fba <SRXL2_getControlData+0x66>

	// rssi, frameLoss, Fail-safe 기능 등 구현

	switch(rx->Command){
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	78db      	ldrb	r3, [r3, #3]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d816      	bhi.n	8001fb8 <SRXL2_getControlData+0x64>
 8001f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f90 <SRXL2_getControlData+0x3c>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fb9 	.word	0x08001fb9
 8001f9c:	08001fb9 	.word	0x08001fb9
	case SRXL_CTRL_CMD_CHANNEL:
		// SRXL2_SendTelemetryData();
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <SRXL2_getControlData+0x74>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f811 	bl	8001fcc <SRXL2_parseControlData>
		break;
 8001faa:	e005      	b.n	8001fb8 <SRXL2_getControlData+0x64>
	case SRXL_CTRL_CMD_CHANNEL_FS:
		return RC_setFailsafe(0x1<<8);
 8001fac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fb0:	f000 fcaa 	bl	8002908 <RC_setFailsafe>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	e000      	b.n	8001fba <SRXL2_getControlData+0x66>
		break;
	case SRXL_CTRL_CMD_FWDPGM:
		break;
	}

	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000041c 	.word	0x2000041c
 8001fc8:	20000450 	.word	0x20000450

08001fcc <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	6078      	str	r0, [r7, #4]
	PARAM_RC* param = &paramRc;
 8001fd4:	4b88      	ldr	r3, [pc, #544]	@ (80021f8 <SRXL2_parseControlData+0x22c>)
 8001fd6:	617b      	str	r3, [r7, #20]
	PARAM_RC_CH* paramCh = paramRcCH;
 8001fd8:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <SRXL2_parseControlData+0x230>)
 8001fda:	613b      	str	r3, [r7, #16]
	RC_CHANNELS* rc = &RC_channels;
 8001fdc:	4b88      	ldr	r3, [pc, #544]	@ (8002200 <SRXL2_parseControlData+0x234>)
 8001fde:	60fb      	str	r3, [r7, #12]

	uint8_t channelCnt = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e0c2      	b.n	8002170 <SRXL2_parseControlData+0x1a4>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b5 	beq.w	8002168 <SRXL2_parseControlData+0x19c>
		if(i>=RC_CHANNEL_MAX) break;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b11      	cmp	r3, #17
 8002002:	f300 80ba 	bgt.w	800217a <SRXL2_parseControlData+0x1ae>

		uint16_t value = rx->data.values[channelCnt];
 8002006:	7ff9      	ldrb	r1, [r7, #31]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	004b      	lsls	r3, r1, #1
 800200c:	4413      	add	r3, r2
 800200e:	7b18      	ldrb	r0, [r3, #12]
 8002010:	004b      	lsls	r3, r1, #1
 8002012:	4413      	add	r3, r2
 8002014:	7b5b      	ldrb	r3, [r3, #13]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	4303      	orrs	r3, r0
 800201a:	817b      	strh	r3, [r7, #10]
		channelCnt++;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	3301      	adds	r3, #1
 8002020:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8002028:	4293      	cmp	r3, r2
 800202a:	bf38      	it	cc
 800202c:	4613      	movcc	r3, r2
 800202e:	817b      	strh	r3, [r7, #10]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8002036:	4293      	cmp	r3, r2
 8002038:	bf28      	it	cs
 800203a:	4613      	movcs	r3, r2
 800203c:	817b      	strh	r3, [r7, #10]

		// Reverse 처리
		if((param->reversedMask>>i)&0x01)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02c      	beq.n	80020aa <SRXL2_parseControlData+0xde>
		{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	8978      	ldrh	r0, [r7, #10]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	f24d 5254 	movw	r2, #54612	@ 0xd554
 800207a:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 800207e:	f000 fca1 	bl	80029c4 <map>
 8002082:	4603      	mov	r3, r0
 8002084:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	440b      	add	r3, r1
 8002098:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	460a      	mov	r2, r1
 80020a4:	f8a3 2005 	strh.w	r2, [r3, #5]
 80020a8:	e02b      	b.n	8002102 <SRXL2_parseControlData+0x136>
		}
		else{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80020c6:	885b      	ldrh	r3, [r3, #2]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	8978      	ldrh	r0, [r7, #10]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	460b      	mov	r3, r1
 80020d0:	f24d 5254 	movw	r2, #54612	@ 0xd554
 80020d4:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 80020d8:	f000 fc74 	bl	80029c4 <map>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	889b      	ldrh	r3, [r3, #4]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	440b      	add	r3, r1
 80020f2:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	460a      	mov	r2, r1
 80020fe:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	799b      	ldrb	r3, [r3, #6]
 8002120:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8002124:	3304      	adds	r3, #4
 8002126:	4299      	cmp	r1, r3
 8002128:	dd1f      	ble.n	800216a <SRXL2_parseControlData+0x19e>
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	799b      	ldrb	r3, [r3, #6]
 8002138:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002148:	b29b      	uxth	r3, r3
 800214a:	429a      	cmp	r2, r3
 800214c:	db0d      	blt.n	800216a <SRXL2_parseControlData+0x19e>
			rc->value[i] = 1500;
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	2200      	movs	r2, #0
 8002158:	f062 0223 	orn	r2, r2, #35	@ 0x23
 800215c:	715a      	strb	r2, [r3, #5]
 800215e:	2200      	movs	r2, #0
 8002160:	f042 0205 	orr.w	r2, r2, #5
 8002164:	719a      	strb	r2, [r3, #6]
 8002166:	e000      	b.n	800216a <SRXL2_parseControlData+0x19e>
		if(!((rx->data.mask>>i)&0x01)) continue;
 8002168:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3301      	adds	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b1f      	cmp	r3, #31
 8002174:	f77f af39 	ble.w	8001fea <SRXL2_parseControlData+0x1e>
 8002178:	e000      	b.n	800217c <SRXL2_parseControlData+0x1b0>
		if(i>=RC_CHANNEL_MAX) break;
 800217a:	bf00      	nop
		}
	}

	if(system_time.time_boot_ms - previousTime > 2000){
 800217c:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <SRXL2_parseControlData+0x238>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <SRXL2_parseControlData+0x23c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800218a:	d906      	bls.n	800219a <SRXL2_parseControlData+0x1ce>
		previousTime = system_time.time_boot_ms;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <SRXL2_parseControlData+0x238>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <SRXL2_parseControlData+0x23c>)
 8002192:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <SRXL2_parseControlData+0x240>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
	}

	channelMask |= rx->data.mask;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <SRXL2_parseControlData+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <SRXL2_parseControlData+0x240>)
 80021a6:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <SRXL2_parseControlData+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f9d4 	bl	800255a <countSetBits>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <SRXL2_parseControlData+0x238>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]

	/*
	 * SRXL2에서 rssi가 양수면 %값, 음수면 dBm 값임.
	 * MAVLink는 %값을 0-254 범위로 표현함
	 */
	if(!(rx->data.rssi&0x80)){
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0f      	blt.n	80021ec <SRXL2_parseControlData+0x220>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021d2:	b298      	uxth	r0, r3
 80021d4:	23fe      	movs	r3, #254	@ 0xfe
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2300      	movs	r3, #0
 80021da:	2264      	movs	r2, #100	@ 0x64
 80021dc:	2100      	movs	r1, #0
 80021de:	f000 fbf1 	bl	80029c4 <map>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000360 	.word	0x20000360
 80021fc:	20000370 	.word	0x20000370
 8002200:	200004c4 	.word	0x200004c4
 8002204:	20000458 	.word	0x20000458
 8002208:	20000440 	.word	0x20000440
 800220c:	20000444 	.word	0x20000444

08002210 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3303      	adds	r3, #3
 800221c:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	789b      	ldrb	r3, [r3, #2]
 8002222:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b0e      	cmp	r3, #14
 8002228:	d002      	beq.n	8002230 <SRXL2_doHandshake+0x20>
 800222a:	f06f 0301 	mvn.w	r3, #1
 800222e:	e029      	b.n	8002284 <SRXL2_doHandshake+0x74>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8002230:	f000 f8d2 	bl	80023d8 <SRXL2_isReceived>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <SRXL2_doHandshake+0x54>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 800223a:	4b14      	ldr	r3, [pc, #80]	@ (800228c <SRXL2_doHandshake+0x7c>)
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b21      	cmp	r3, #33	@ 0x21
 8002240:	d112      	bne.n	8002268 <SRXL2_doHandshake+0x58>

		rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <SRXL2_doHandshake+0x80>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3303      	adds	r3, #3
 8002248:	60fb      	str	r3, [r7, #12]

		if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	429a      	cmp	r2, r3
 8002254:	d1ec      	bne.n	8002230 <SRXL2_doHandshake+0x20>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	785a      	ldrb	r2, [r3, #1]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d004      	beq.n	800226c <SRXL2_doHandshake+0x5c>
 8002262:	e7e5      	b.n	8002230 <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8002264:	bf00      	nop
 8002266:	e7e3      	b.n	8002230 <SRXL2_doHandshake+0x20>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8002268:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 800226a:	e7e1      	b.n	8002230 <SRXL2_doHandshake+0x20>
		{
			break;
 800226c:	bf00      	nop
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f94f 	bl	8002516 <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fb5f 	bl	8002940 <RC_halfDuplex_Transmit>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000041c 	.word	0x2000041c
 8002290:	20000450 	.word	0x20000450

08002294 <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 800229e:	f000 fac9 	bl	8002834 <RC_isBufferInit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <SRXL2_readByteIRQ2+0x1a>
 80022a8:	f06f 0301 	mvn.w	r3, #1
 80022ac:	e089      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80022b4:	d902      	bls.n	80022bc <SRXL2_readByteIRQ2+0x28>
 80022b6:	f06f 0301 	mvn.w	r3, #1
 80022ba:	e082      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <SRXL2_readByteIRQ2+0x36>
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d011      	beq.n	80022ec <SRXL2_readByteIRQ2+0x58>
 80022c8:	e052      	b.n	8002370 <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == SPEKTRUM_SRXL_ID){
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2ba6      	cmp	r3, #166	@ 0xa6
 80022ce:	d176      	bne.n	80023be <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 80022d0:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3d      	ldr	r2, [pc, #244]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	79fa      	ldrb	r2, [r7, #7]
 80022dc:	701a      	strb	r2, [r3, #0]
			cnt++;
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022ea:	e068      	b.n	80023be <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2bcd      	cmp	r3, #205	@ 0xcd
 80022f0:	d026      	beq.n	8002340 <SRXL2_readByteIRQ2+0xac>
 80022f2:	2bcd      	cmp	r3, #205	@ 0xcd
 80022f4:	dc28      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 80022f6:	2b80      	cmp	r3, #128	@ 0x80
 80022f8:	d01e      	beq.n	8002338 <SRXL2_readByteIRQ2+0xa4>
 80022fa:	2b80      	cmp	r3, #128	@ 0x80
 80022fc:	dc24      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 80022fe:	2b55      	cmp	r3, #85	@ 0x55
 8002300:	d016      	beq.n	8002330 <SRXL2_readByteIRQ2+0x9c>
 8002302:	2b55      	cmp	r3, #85	@ 0x55
 8002304:	dc20      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 8002306:	2b50      	cmp	r3, #80	@ 0x50
 8002308:	d00e      	beq.n	8002328 <SRXL2_readByteIRQ2+0x94>
 800230a:	2b50      	cmp	r3, #80	@ 0x50
 800230c:	dc1c      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 800230e:	2b21      	cmp	r3, #33	@ 0x21
 8002310:	d002      	beq.n	8002318 <SRXL2_readByteIRQ2+0x84>
 8002312:	2b41      	cmp	r3, #65	@ 0x41
 8002314:	d004      	beq.n	8002320 <SRXL2_readByteIRQ2+0x8c>
 8002316:	e017      	b.n	8002348 <SRXL2_readByteIRQ2+0xb4>
		case SRXL_HANDSHAKE_ID:
			maxLen = 14;
 8002318:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800231a:	220e      	movs	r2, #14
 800231c:	701a      	strb	r2, [r3, #0]
			break;
 800231e:	e019      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_BIND_ID:
			maxLen = 21;
 8002320:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002322:	2215      	movs	r2, #21
 8002324:	701a      	strb	r2, [r3, #0]
			break;
 8002326:	e015      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_PARAM_ID:
			maxLen = 14;
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800232a:	220e      	movs	r2, #14
 800232c:	701a      	strb	r2, [r3, #0]
			break;
 800232e:	e011      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_RSSI_ID:
			maxLen = 10;
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002332:	220a      	movs	r2, #10
 8002334:	701a      	strb	r2, [r3, #0]
			break;
 8002336:	e00d      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_TELEM_ID:
			maxLen = 22;
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800233a:	2216      	movs	r2, #22
 800233c:	701a      	strb	r2, [r3, #0]
			break;
 800233e:	e009      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_CTRL_ID:
			maxLen = 80;
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002342:	2250      	movs	r2, #80	@ 0x50
 8002344:	701a      	strb	r2, [r3, #0]
			break;
 8002346:	e005      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
			return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e036      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 8002354:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	701a      	strb	r2, [r3, #0]
		cnt++;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800236c:	701a      	strb	r2, [r3, #0]
		break;
 800236e:	e027      	b.n	80023c0 <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b50      	cmp	r3, #80	@ 0x50
 8002384:	d107      	bne.n	8002396 <SRXL2_readByteIRQ2+0x102>
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002394:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d104      	bne.n	80023b0 <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
			return 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e008      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023ba:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023bc:	e000      	b.n	80023c0 <SRXL2_readByteIRQ2+0x12c>
		break;
 80023be:	bf00      	nop
	}
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000448 	.word	0x20000448
 80023d0:	20000450 	.word	0x20000450
 80023d4:	20000449 	.word	0x20000449

080023d8 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 80023de:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <SRXL2_isReceived+0xb0>)
 80023e0:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]

	if(RC_rxFlag.uart == 0)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <SRXL2_isReceived+0xb4>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <SRXL2_isReceived+0x22>
	{
		return -1;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	e042      	b.n	8002480 <SRXL2_isReceived+0xa8>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 80023fa:	4a24      	ldr	r2, [pc, #144]	@ (800248c <SRXL2_isReceived+0xb4>)
 80023fc:	7813      	ldrb	r3, [r2, #0]
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	7013      	strb	r3, [r2, #0]

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	22a6      	movs	r2, #166	@ 0xa6
 8002408:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	785a      	ldrb	r2, [r3, #1]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <SRXL2_isReceived+0xb8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	789a      	ldrb	r2, [r3, #2]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <SRXL2_isReceived+0xb8>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	3b02      	subs	r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b21b      	sxth	r3, r3
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	3b01      	subs	r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	789b      	ldrb	r3, [r3, #2]
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 f816 	bl	8002494 <calculate_crc>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8002472:	b29b      	uxth	r3, r3
 8002474:	429a      	cmp	r2, r3
 8002476:	d002      	beq.n	800247e <SRXL2_isReceived+0xa6>
		return -2;
 8002478:	f06f 0301 	mvn.w	r3, #1
 800247c:	e000      	b.n	8002480 <SRXL2_isReceived+0xa8>
	}

	return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000041c 	.word	0x2000041c
 800248c:	2000044c 	.word	0x2000044c
 8002490:	20000450 	.word	0x20000450

08002494 <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 80024a0:	2300      	movs	r3, #0
 80024a2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	737b      	strb	r3, [r7, #13]
 80024a8:	e029      	b.n	80024fe <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 80024aa:	7b7b      	ldrb	r3, [r7, #13]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024bc:	4053      	eors	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80024c2:	2300      	movs	r3, #0
 80024c4:	733b      	strb	r3, [r7, #12]
 80024c6:	e014      	b.n	80024f2 <calculate_crc+0x5e>
			if (crc & 0x8000)
 80024c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da0a      	bge.n	80024e6 <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 80024d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	81fb      	strh	r3, [r7, #14]
 80024e4:	e002      	b.n	80024ec <calculate_crc+0x58>
			else
				crc = (crc << 1);
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80024ec:	7b3b      	ldrb	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	733b      	strb	r3, [r7, #12]
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	2b07      	cmp	r3, #7
 80024f6:	d9e7      	bls.n	80024c8 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	3301      	adds	r3, #1
 80024fc:	737b      	strb	r3, [r7, #13]
 80024fe:	7b7a      	ldrb	r2, [r7, #13]
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	3b02      	subs	r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	dbd0      	blt.n	80024aa <calculate_crc+0x16>
		}
	}

	return crc;
 8002508:	89fb      	ldrh	r3, [r7, #14]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffb4 	bl	8002494 <calculate_crc>
 800252c:	4603      	mov	r3, r0
 800252e:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b299      	uxth	r1, r3
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	3b02      	subs	r3, #2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	3b01      	subs	r3, #1
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	89fa      	ldrh	r2, [r7, #14]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

	return crc;
 8002550:	89fb      	ldrh	r3, [r7, #14]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800257e:	4413      	add	r3, r2
 8002580:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	091a      	lsrs	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800258e:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	4413      	add	r3, r2
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	4413      	add	r3, r2
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	b2db      	uxtb	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_USART_IsActiveFlag_TXE>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025bc:	2b80      	cmp	r3, #128	@ 0x80
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_USART_TransmitData8>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_GPIO_SetOutputPin>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	619a      	str	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_GPIO_ResetOutputPin>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <RC_Initialization>:
/* Functions -----------------------------------------------------------------*/
/*
 * @brief RC 초기 설정
 */
int RC_Initialization(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002632:	2101      	movs	r1, #1
 8002634:	482b      	ldr	r0, [pc, #172]	@ (80026e4 <RC_Initialization+0xb8>)
 8002636:	f7ff ffdb 	bl	80025f0 <LL_GPIO_SetOutputPin>

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	e031      	b.n	80026a4 <RC_Initialization+0x78>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002640:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <RC_Initialization+0xbc>)
 8002642:	88db      	ldrh	r3, [r3, #6]
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	fa42 f303 	asr.w	r3, r2, r3
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d022      	beq.n	800269c <RC_Initialization+0x70>

		switch(i){
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d003      	beq.n	8002664 <RC_Initialization+0x38>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d00a      	beq.n	8002678 <RC_Initialization+0x4c>
 8002662:	e013      	b.n	800268c <RC_Initialization+0x60>
		case PPM:
			RC_Buffer = malloc(PPM_MAX_BUFFER_SIZE*sizeof(uint16_t));
 8002664:	2010      	movs	r0, #16
 8002666:	f009 ffb5 	bl	800c5d4 <malloc>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <RC_Initialization+0xc0>)
 8002670:	601a      	str	r2, [r3, #0]
			PPM_init();
 8002672:	f7ff fae7 	bl	8001c44 <PPM_init>
			break;
 8002676:	e009      	b.n	800268c <RC_Initialization+0x60>
		case SRXL2:
			RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 8002678:	2050      	movs	r0, #80	@ 0x50
 800267a:	f009 ffab 	bl	800c5d4 <malloc>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <RC_Initialization+0xc0>)
 8002684:	601a      	str	r2, [r3, #0]
			SRXL2_connect();
 8002686:	f7ff fc09 	bl	8001e9c <SRXL2_connect>
			break;
 800268a:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 800268c:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <RC_Initialization+0xbc>)
 800268e:	889b      	ldrh	r3, [r3, #4]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <RC_Initialization+0x80>
 800269a:	e000      	b.n	800269e <RC_Initialization+0x72>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 800269c:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3301      	adds	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	d9ca      	bls.n	8002640 <RC_Initialization+0x14>
 80026aa:	e008      	b.n	80026be <RC_Initialization+0x92>
		else break;
 80026ac:	bf00      	nop
	}

	while(RC_checkThrottle()){
 80026ae:	e006      	b.n	80026be <RC_Initialization+0x92>
		BuzzerEnableThrottleHigh();
 80026b0:	f7fe fcda 	bl	8001068 <BuzzerEnableThrottleHigh>

		// ESC Calibration
		if(RC_enterESCcalibration()==0) break;
 80026b4:	f000 f8ee 	bl	8002894 <RC_enterESCcalibration>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <RC_Initialization+0x9e>
	while(RC_checkThrottle()){
 80026be:	f000 f8cb 	bl	8002858 <RC_checkThrottle>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f3      	bne.n	80026b0 <RC_Initialization+0x84>
 80026c8:	e000      	b.n	80026cc <RC_Initialization+0xa0>
		if(RC_enterESCcalibration()==0) break;
 80026ca:	bf00      	nop
	}

	BuzzerDisableThrottleHigh();
 80026cc:	f7fe fce4 	bl	8001098 <BuzzerDisableThrottleHigh>
	LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80026d0:	2101      	movs	r1, #1
 80026d2:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <RC_Initialization+0xb8>)
 80026d4:	f7ff ff9a 	bl	800260c <LL_GPIO_ResetOutputPin>

	return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	20000360 	.word	0x20000360
 80026ec:	20000450 	.word	0x20000450

080026f0 <RC_GetData>:
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int RC_GetData(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
	int retVal = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	e025      	b.n	800274c <RC_GetData+0x5c>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <RC_GetData+0x90>)
 8002702:	88db      	ldrh	r3, [r3, #6]
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	fa42 f303 	asr.w	r3, r2, r3
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <RC_GetData+0x54>

		switch(i){
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d003      	beq.n	8002724 <RC_GetData+0x34>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d004      	beq.n	800272c <RC_GetData+0x3c>
 8002722:	e007      	b.n	8002734 <RC_GetData+0x44>
		case PPM:
			retVal = PPM_getControlData();
 8002724:	f7ff faf6 	bl	8001d14 <PPM_getControlData>
 8002728:	6078      	str	r0, [r7, #4]
			break;
 800272a:	e003      	b.n	8002734 <RC_GetData+0x44>
		case SRXL2:
			retVal = SRXL2_getControlData();
 800272c:	f7ff fc12 	bl	8001f54 <SRXL2_getControlData>
 8002730:	6078      	str	r0, [r7, #4]
			break;
 8002732:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <RC_GetData+0x90>)
 8002736:	889b      	ldrh	r3, [r3, #4]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <RC_GetData+0x64>
 8002742:	e000      	b.n	8002746 <RC_GetData+0x56>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002744:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	d9d6      	bls.n	8002700 <RC_GetData+0x10>
 8002752:	e000      	b.n	8002756 <RC_GetData+0x66>
		else break;
 8002754:	bf00      	nop
	}

	if(retVal == -1 || retVal ==-2) return retVal;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d003      	beq.n	8002766 <RC_GetData+0x76>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f113 0f02 	cmn.w	r3, #2
 8002764:	d101      	bne.n	800276a <RC_GetData+0x7a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	e006      	b.n	8002778 <RC_GetData+0x88>
	if(retVal!=0xf2) fsFlag = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2bf2      	cmp	r3, #242	@ 0xf2
 800276e:	d002      	beq.n	8002776 <RC_GetData+0x86>
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <RC_GetData+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

	return 0;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000360 	.word	0x20000360
 8002784:	200002e0 	.word	0x200002e0

08002788 <RC_receiveIRQ2>:
 * @retval 0 : IRQ2 처리 완료
 *
 * 모든 수신 패킷을 처리하면 RC_rxFlag를 1로 처리함.
 */
int RC_receiveIRQ2(const uint16_t data)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e03e      	b.n	8002816 <RC_receiveIRQ2+0x8e>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002798:	4b24      	ldr	r3, [pc, #144]	@ (800282c <RC_receiveIRQ2+0xa4>)
 800279a:	88db      	ldrh	r3, [r3, #6]
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	fa42 f303 	asr.w	r3, r2, r3
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02f      	beq.n	800280e <RC_receiveIRQ2+0x86>

		switch(i){
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d003      	beq.n	80027bc <RC_receiveIRQ2+0x34>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d005      	beq.n	80027c6 <RC_receiveIRQ2+0x3e>
 80027ba:	e020      	b.n	80027fe <RC_receiveIRQ2+0x76>
		case PPM:
			PPM_readData(data);
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fa64 	bl	8001c8c <PPM_readData>
			break;
 80027c4:	e01b      	b.n	80027fe <RC_receiveIRQ2+0x76>
		case SRXL2:
			// Half-Duplex에서 송신한 패킷을 무시
			if(RC_rxFlag.half_tx == 1) return 1;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <RC_receiveIRQ2+0xa8>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <RC_receiveIRQ2+0x50>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e024      	b.n	8002822 <RC_receiveIRQ2+0x9a>

			// 모든 바이트를 읽었는지 검사
			if(SRXL2_readByteIRQ2(data) == 0){
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fd59 	bl	8002294 <SRXL2_readByteIRQ2>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <RC_receiveIRQ2+0x74>
				RC_rxFlag.uart = 1;
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <RC_receiveIRQ2+0xa8>)
 80027ea:	7813      	ldrb	r3, [r2, #0]
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	7013      	strb	r3, [r2, #0]
				RC_rxFlag.half_using = 0;
 80027f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002830 <RC_receiveIRQ2+0xa8>)
 80027f4:	7813      	ldrb	r3, [r2, #0]
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	7013      	strb	r3, [r2, #0]
			}
			break;
 80027fc:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <RC_receiveIRQ2+0xa4>)
 8002800:	889b      	ldrh	r3, [r3, #4]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <RC_receiveIRQ2+0x96>
 800280c:	e000      	b.n	8002810 <RC_receiveIRQ2+0x88>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 800280e:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d9bd      	bls.n	8002798 <RC_receiveIRQ2+0x10>
 800281c:	e000      	b.n	8002820 <RC_receiveIRQ2+0x98>
		else break;
 800281e:	bf00      	nop
	}



	return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000360 	.word	0x20000360
 8002830:	2000044c 	.word	0x2000044c

08002834 <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <RC_isBufferInit+0x20>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <RC_isBufferInit+0x12>
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e000      	b.n	8002848 <RC_isBufferInit+0x14>
	return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000450 	.word	0x20000450

08002858 <RC_checkThrottle>:
 * @parm None
 * @retval 0 : 쓰로틀 정상
 * @retval -1 : 쓰로틀 비정상
 */
int RC_checkThrottle(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	while(RC_GetData()){}
 800285c:	bf00      	nop
 800285e:	f7ff ff47 	bl	80026f0 <RC_GetData>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1fa      	bne.n	800285e <RC_checkThrottle+0x6>
	if(RC_channels.value[paramRcMap.THR]>1050) return -1;
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <RC_checkThrottle+0x34>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <RC_checkThrottle+0x38>)
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f240 421a 	movw	r2, #1050	@ 0x41a
 800287c:	4293      	cmp	r3, r2
 800287e:	d902      	bls.n	8002886 <RC_checkThrottle+0x2e>
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	e000      	b.n	8002888 <RC_checkThrottle+0x30>

	return 0;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000414 	.word	0x20000414
 8002890:	200004c4 	.word	0x200004c4

08002894 <RC_enterESCcalibration>:
 * @parm None
 * @retval 1 : 5초가 지속되지 않았음.
 * @retval 0 : 캘리브레이션 수행됨
 */
int RC_enterESCcalibration()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	if(!(system_time.time_boot_ms - previous_time > 5000)) return 1;
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <RC_enterESCcalibration+0x64>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <RC_enterESCcalibration+0x68>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d801      	bhi.n	80028ae <RC_enterESCcalibration+0x1a>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e021      	b.n	80028f2 <RC_enterESCcalibration+0x5e>
	previous_time = system_time.time_boot_ms;
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <RC_enterESCcalibration+0x64>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <RC_enterESCcalibration+0x68>)
 80028b4:	6013      	str	r3, [r2, #0]
	BuzzerDisableThrottleHigh();
 80028b6:	f7fe fbef 	bl	8001098 <BuzzerDisableThrottleHigh>

	while(1)
	{
		while(RC_GetData()){}
 80028ba:	bf00      	nop
 80028bc:	f7ff ff18 	bl	80026f0 <RC_GetData>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1fa      	bne.n	80028bc <RC_enterESCcalibration+0x28>
		if(RC_channels.value[paramRcMap.THR] > 1800){
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <RC_enterESCcalibration+0x6c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002904 <RC_enterESCcalibration+0x70>)
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80028da:	d903      	bls.n	80028e4 <RC_enterESCcalibration+0x50>
			SERVO_doCalibrate(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f000 faa5 	bl	8002e2c <SERVO_doCalibrate>
			continue;
 80028e2:	e005      	b.n	80028f0 <RC_enterESCcalibration+0x5c>
		}
		SERVO_doCalibrate(0);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 faa1 	bl	8002e2c <SERVO_doCalibrate>
		break;
 80028ea:	bf00      	nop
	}
	return 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <RC_enterESCcalibration+0x5e>
		while(RC_GetData()){}
 80028f0:	e7e3      	b.n	80028ba <RC_enterESCcalibration+0x26>
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000458 	.word	0x20000458
 80028fc:	20000454 	.word	0x20000454
 8002900:	20000414 	.word	0x20000414
 8002904:	200004c4 	.word	0x200004c4

08002908 <RC_setFailsafe>:
 * @brief Failsafe 모드로 진입
 *
 * @retval 0 : Failsafe 해제됨
 */
int RC_setFailsafe(uint16_t protocol)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
	if(paramRc.OPTIONS&(0x1<<10)){
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <RC_setFailsafe+0x30>)
 8002914:	889b      	ldrh	r3, [r3, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <RC_setFailsafe+0x1c>
		// 수신기 하나에서 FS 임을 알림
		return 0;
 8002920:	2300      	movs	r3, #0
 8002922:	e003      	b.n	800292c <RC_setFailsafe+0x24>
	}

	fsFlag = 1;
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <RC_setFailsafe+0x34>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]

	return 0xf2;
 800292a:	23f2      	movs	r3, #242	@ 0xf2
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20000360 	.word	0x20000360
 800293c:	200002e0 	.word	0x200002e0

08002940 <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <RC_halfDuplex_Transmit+0x7c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <RC_halfDuplex_Transmit+0x20>
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	e028      	b.n	80029b2 <RC_halfDuplex_Transmit+0x72>

	RC_rxFlag.half_using = 1;
 8002960:	4a16      	ldr	r2, [pc, #88]	@ (80029bc <RC_halfDuplex_Transmit+0x7c>)
 8002962:	7813      	ldrb	r3, [r2, #0]
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 800296a:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <RC_halfDuplex_Transmit+0x7c>)
 800296c:	7813      	ldrb	r3, [r2, #0]
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e011      	b.n	800299e <RC_halfDuplex_Transmit+0x5e>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 800297a:	bf00      	nop
 800297c:	4810      	ldr	r0, [pc, #64]	@ (80029c0 <RC_halfDuplex_Transmit+0x80>)
 800297e:	f7ff fe15 	bl	80025ac <LL_USART_IsActiveFlag_TXE>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f9      	beq.n	800297c <RC_halfDuplex_Transmit+0x3c>
		LL_USART_TransmitData8(USART1, data[i]);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	480b      	ldr	r0, [pc, #44]	@ (80029c0 <RC_halfDuplex_Transmit+0x80>)
 8002994:	f7ff fe1d 	bl	80025d2 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3301      	adds	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbe9      	blt.n	800297a <RC_halfDuplex_Transmit+0x3a>
	}

	RC_rxFlag.half_tx = 0;
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <RC_halfDuplex_Transmit+0x7c>)
 80029a8:	7813      	ldrb	r3, [r2, #0]
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	7013      	strb	r3, [r2, #0]
	return 0;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000044c 	.word	0x2000044c
 80029c0:	40011000 	.word	0x40011000

080029c4 <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80029c4:	b490      	push	{r4, r7}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	80fb      	strh	r3, [r7, #6]
 80029d6:	4603      	mov	r3, r0
 80029d8:	80bb      	strh	r3, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	807b      	strh	r3, [r7, #2]
 80029de:	4613      	mov	r3, r2
 80029e0:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	8a39      	ldrh	r1, [r7, #16]
 80029ea:	883a      	ldrh	r2, [r7, #0]
 80029ec:	1a8a      	subs	r2, r1, r2
 80029ee:	fb03 f202 	mul.w	r2, r3, r2
 80029f2:	8879      	ldrh	r1, [r7, #2]
 80029f4:	88bb      	ldrh	r3, [r7, #4]
 80029f6:	1acb      	subs	r3, r1, r3
 80029f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	883b      	ldrh	r3, [r7, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	b29b      	uxth	r3, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_TIM_EnableCounter>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_TIM_CC_EnableChannel>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
void SERVO_Initialization(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	// PARAM_SERVO* servo = &paramServo;

	LL_TIM_EnableCounter(TIM1);
 8002a74:	4807      	ldr	r0, [pc, #28]	@ (8002a94 <SERVO_Initialization+0x24>)
 8002a76:	f7ff ffca 	bl	8002a0e <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8002a7a:	4807      	ldr	r0, [pc, #28]	@ (8002a98 <SERVO_Initialization+0x28>)
 8002a7c:	f7ff ffc7 	bl	8002a0e <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM4);
 8002a80:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <SERVO_Initialization+0x2c>)
 8002a82:	f7ff ffc4 	bl	8002a0e <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 8002a86:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <SERVO_Initialization+0x30>)
 8002a88:	f7ff ffc1 	bl	8002a0e <LL_TIM_EnableCounter>

	SERVO_doDisarm();
 8002a8c:	f000 f8ca 	bl	8002c24 <SERVO_doDisarm>

	return;
 8002a90:	bf00      	nop
}
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00

08002aa4 <configurePWM>:
 * @parm uint16_t hz 50-490
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8002ab4:	d802      	bhi.n	8002abc <configurePWM+0x18>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b31      	cmp	r3, #49	@ 0x31
 8002aba:	d801      	bhi.n	8002ac0 <configurePWM+0x1c>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e028      	b.n	8002b12 <configurePWM+0x6e>

	// PPM 입력이 활성화 되어 있으면 50Hz 고정하도록
	TIM1->ARR = 1000000/hz-1;
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <configurePWM+0x7c>)
 8002ac4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <configurePWM+0x80>)
 8002acc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 84-1;
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <configurePWM+0x80>)
 8002ad0:	2253      	movs	r2, #83	@ 0x53
 8002ad2:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->ARR = 1000000/hz-1;
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <configurePWM+0x7c>)
 8002ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <configurePWM+0x84>)
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 84-1;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <configurePWM+0x84>)
 8002ae4:	2253      	movs	r2, #83	@ 0x53
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM4->ARR = 1000000/hz-1;
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <configurePWM+0x7c>)
 8002aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <configurePWM+0x88>)
 8002af4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 84-1;
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <configurePWM+0x88>)
 8002af8:	2253      	movs	r2, #83	@ 0x53
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM5->ARR = 1000000/hz-1;
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <configurePWM+0x7c>)
 8002b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b04:	1e5a      	subs	r2, r3, #1
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <configurePWM+0x8c>)
 8002b08:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM5->PSC = 84-1;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <configurePWM+0x8c>)
 8002b0c:	2253      	movs	r2, #83	@ 0x53
 8002b0e:	629a      	str	r2, [r3, #40]	@ 0x28

	return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	000f4240 	.word	0x000f4240
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00

08002b34 <SERVO_doArm>:


void SERVO_doArm(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8002b3a:	4b34      	ldr	r3, [pc, #208]	@ (8002c0c <SERVO_doArm+0xd8>)
 8002b3c:	603b      	str	r3, [r7, #0]
	configurePWM(servo->RATE);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ffac 	bl	8002aa4 <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e055      	b.n	8002bfe <SERVO_doArm+0xca>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d048      	beq.n	8002bf6 <SERVO_doArm+0xc2>

		TIM_TypeDef* timer;
		uint32_t ch;
		switch(SERVO_TIMER_MAP[i]>>4){
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	4a2a      	ldr	r2, [pc, #168]	@ (8002c10 <SERVO_doArm+0xdc>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d819      	bhi.n	8002ba8 <SERVO_doArm+0x74>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <SERVO_doArm+0x48>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002ba9 	.word	0x08002ba9
 8002b84:	08002b97 	.word	0x08002b97
 8002b88:	08002b9d 	.word	0x08002b9d
 8002b8c:	08002ba3 	.word	0x08002ba3
		case 1:
			timer = TIM1;
 8002b90:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <SERVO_doArm+0xe0>)
 8002b92:	60bb      	str	r3, [r7, #8]
			break;
 8002b94:	e008      	b.n	8002ba8 <SERVO_doArm+0x74>
		case 3:
			timer = TIM3;
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <SERVO_doArm+0xe4>)
 8002b98:	60bb      	str	r3, [r7, #8]
			break;
 8002b9a:	e005      	b.n	8002ba8 <SERVO_doArm+0x74>
		case 4:
			timer = TIM4;
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c1c <SERVO_doArm+0xe8>)
 8002b9e:	60bb      	str	r3, [r7, #8]
			break;
 8002ba0:	e002      	b.n	8002ba8 <SERVO_doArm+0x74>
		case 5:
			timer = TIM5;
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c20 <SERVO_doArm+0xec>)
 8002ba4:	60bb      	str	r3, [r7, #8]
			break;
 8002ba6:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <SERVO_doArm+0xdc>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d819      	bhi.n	8002bec <SERVO_doArm+0xb8>
 8002bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <SERVO_doArm+0x8c>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd7 	.word	0x08002bd7
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002be5 	.word	0x08002be5
		case 1:
			ch = LL_TIM_CHANNEL_CH1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	607b      	str	r3, [r7, #4]
			break;
 8002bd4:	e00a      	b.n	8002bec <SERVO_doArm+0xb8>
		case 2:
			ch = LL_TIM_CHANNEL_CH2;
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	607b      	str	r3, [r7, #4]
			break;
 8002bda:	e007      	b.n	8002bec <SERVO_doArm+0xb8>
		case 3:
			ch = LL_TIM_CHANNEL_CH3;
 8002bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be0:	607b      	str	r3, [r7, #4]
			break;
 8002be2:	e003      	b.n	8002bec <SERVO_doArm+0xb8>
		case 4:
			ch = LL_TIM_CHANNEL_CH4;
 8002be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be8:	607b      	str	r3, [r7, #4]
			break;
 8002bea:	bf00      	nop
		}

		LL_TIM_CC_EnableChannel(timer, ch);
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f7ff ff1d 	bl	8002a2e <LL_TIM_CC_EnableChannel>
 8002bf4:	e000      	b.n	8002bf8 <SERVO_doArm+0xc4>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002bf6:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b0b      	cmp	r3, #11
 8002c02:	d9a6      	bls.n	8002b52 <SERVO_doArm+0x1e>
	}

	return;
 8002c04:	bf00      	nop
}
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200002e8 	.word	0x200002e8
 8002c10:	0800ef50 	.word	0x0800ef50
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00

08002c24 <SERVO_doDisarm>:


void SERVO_doDisarm(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	LL_TIM_DisableAllOutputs(TIM1);
 8002c28:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <SERVO_doDisarm+0x20>)
 8002c2a:	f7ff ff11 	bl	8002a50 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM3);
 8002c2e:	4806      	ldr	r0, [pc, #24]	@ (8002c48 <SERVO_doDisarm+0x24>)
 8002c30:	f7ff ff0e 	bl	8002a50 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM4);
 8002c34:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <SERVO_doDisarm+0x28>)
 8002c36:	f7ff ff0b 	bl	8002a50 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM5);
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <SERVO_doDisarm+0x2c>)
 8002c3c:	f7ff ff08 	bl	8002a50 <LL_TIM_DisableAllOutputs>

	return;
 8002c40:	bf00      	nop
}
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40000c00 	.word	0x40000c00

08002c54 <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	calculateServoOutput();
 8002c58:	f000 f804 	bl	8002c64 <calculateServoOutput>

	controlPWM();
 8002c5c:	f000 f83c 	bl	8002cd8 <controlPWM>
	return;
 8002c60:	bf00      	nop
}
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8002c6a:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <calculateServoOutput+0x64>)
 8002c6c:	603b      	str	r3, [r7, #0]

	servo_output_raw.time_usec = system_time.time_boot_ms;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <calculateServoOutput+0x68>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a17      	ldr	r2, [pc, #92]	@ (8002cd0 <calculateServoOutput+0x6c>)
 8002c74:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	e01b      	b.n	8002cb4 <calculateServoOutput+0x50>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00e      	beq.n	8002cac <calculateServoOutput+0x48>

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	4910      	ldr	r1, [pc, #64]	@ (8002cd4 <calculateServoOutput+0x70>)
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	440b      	add	r3, r1
 8002c98:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002c9c:	b298      	uxth	r0, r3
 8002c9e:	490c      	ldr	r1, [pc, #48]	@ (8002cd0 <calculateServoOutput+0x6c>)
 8002ca0:	0053      	lsls	r3, r2, #1
 8002ca2:	440b      	add	r3, r1
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002caa:	e000      	b.n	8002cae <calculateServoOutput+0x4a>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002cac:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	71fb      	strb	r3, [r7, #7]
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b0b      	cmp	r3, #11
 8002cb8:	d9e0      	bls.n	8002c7c <calculateServoOutput+0x18>
		// servo_output_raw.servo_raw[i] = scaled_imu + RC_channels 를 기반으로 요리조리 계산해서 결정.
	}

	return;
 8002cba:	bf00      	nop
}
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	200002e8 	.word	0x200002e8
 8002ccc:	20000458 	.word	0x20000458
 8002cd0:	2000049c 	.word	0x2000049c
 8002cd4:	200004c4 	.word	0x200004c4

08002cd8 <controlPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void controlPWM(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <controlPWM+0x100>)
 8002ce0:	607b      	str	r3, [r7, #4]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e06d      	b.n	8002dc4 <controlPWM+0xec>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d060      	beq.n	8002dbc <controlPWM+0xe4>

		TIM_TypeDef* timer;
		switch(SERVO_TIMER_MAP[i]>>4){
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	@ (8002ddc <controlPWM+0x104>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d818      	bhi.n	8002d3c <controlPWM+0x64>
 8002d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <controlPWM+0x38>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d25 	.word	0x08002d25
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d2b 	.word	0x08002d2b
 8002d1c:	08002d31 	.word	0x08002d31
 8002d20:	08002d37 	.word	0x08002d37
		case 1:
			timer = TIM1;
 8002d24:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <controlPWM+0x108>)
 8002d26:	60bb      	str	r3, [r7, #8]
			break;
 8002d28:	e008      	b.n	8002d3c <controlPWM+0x64>
		case 3:
			timer = TIM3;
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <controlPWM+0x10c>)
 8002d2c:	60bb      	str	r3, [r7, #8]
			break;
 8002d2e:	e005      	b.n	8002d3c <controlPWM+0x64>
		case 4:
			timer = TIM4;
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <controlPWM+0x110>)
 8002d32:	60bb      	str	r3, [r7, #8]
			break;
 8002d34:	e002      	b.n	8002d3c <controlPWM+0x64>
		case 5:
			timer = TIM5;
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <controlPWM+0x114>)
 8002d38:	60bb      	str	r3, [r7, #8]
			break;
 8002d3a:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	@ (8002ddc <controlPWM+0x104>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b01      	subs	r3, #1
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d838      	bhi.n	8002dbe <controlPWM+0xe6>
 8002d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <controlPWM+0x7c>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d7b 	.word	0x08002d7b
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002da7 	.word	0x08002da7
		case 1:
			timer->CCR1 = servo_output_raw.servo_raw[i];
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	4a22      	ldr	r2, [pc, #136]	@ (8002df0 <controlPWM+0x118>)
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002d78:	e021      	b.n	8002dbe <controlPWM+0xe6>
		case 2:
			timer->CCR2 = servo_output_raw.servo_raw[i];
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <controlPWM+0x118>)
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002d8e:	e016      	b.n	8002dbe <controlPWM+0xe6>
		case 3:
			timer->CCR3 = servo_output_raw.servo_raw[i];
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <controlPWM+0x118>)
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002da4:	e00b      	b.n	8002dbe <controlPWM+0xe6>
		case 4:
			timer->CCR4 = servo_output_raw.servo_raw[i];
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	4a11      	ldr	r2, [pc, #68]	@ (8002df0 <controlPWM+0x118>)
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002dba:	e000      	b.n	8002dbe <controlPWM+0xe6>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002dbc:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b0b      	cmp	r3, #11
 8002dc8:	d98e      	bls.n	8002ce8 <controlPWM+0x10>
		}
	}

	return;
 8002dca:	bf00      	nop
}
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	200002e8 	.word	0x200002e8
 8002ddc:	0800ef50 	.word	0x0800ef50
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	2000049c 	.word	0x2000049c

08002df4 <SERVO_setFailsafe>:


void SERVO_setFailsafe(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 1000;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <SERVO_setFailsafe+0x30>)
 8002dfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR1 = 1500;
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <SERVO_setFailsafe+0x34>)
 8002e02:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002e06:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 1500;
 8002e08:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <SERVO_setFailsafe+0x34>)
 8002e0a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002e0e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR4 = 1500;
 8002e10:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <SERVO_setFailsafe+0x30>)
 8002e12:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
	return;
 8002e18:	bf00      	nop
}
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000400 	.word	0x40000400

08002e2c <SERVO_doCalibrate>:


void SERVO_doCalibrate(uint8_t mode)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	if(mode)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d024      	beq.n	8002e86 <SERVO_doCalibrate+0x5a>
	{
		configurePWM(50);
 8002e3c:	2032      	movs	r0, #50	@ 0x32
 8002e3e:	f7ff fe31 	bl	8002aa4 <configurePWM>

		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8002e42:	2110      	movs	r1, #16
 8002e44:	481a      	ldr	r0, [pc, #104]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002e46:	f7ff fdf2 	bl	8002a2e <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4819      	ldr	r0, [pc, #100]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e4e:	f7ff fdee 	bl	8002a2e <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8002e52:	2110      	movs	r1, #16
 8002e54:	4817      	ldr	r0, [pc, #92]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e56:	f7ff fdea 	bl	8002a2e <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 8002e5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e5e:	4814      	ldr	r0, [pc, #80]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002e60:	f7ff fde5 	bl	8002a2e <LL_TIM_CC_EnableChannel>

		TIM4->CCR2 = 2000;
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002e66:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = 2000;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e72:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 2000;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e76:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR4 = 2000;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002e7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR2 = 1000;
		TIM3->CCR1 = 1000;
		TIM3->CCR2 = 1000;
		TIM4->CCR4 = 1000;
	}
	return;
 8002e84:	e010      	b.n	8002ea8 <SERVO_doCalibrate+0x7c>
		TIM4->CCR2 = 1000;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002e88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e8c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = 1000;
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 1000;
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <SERVO_doCalibrate+0x88>)
 8002e98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR4 = 1000;
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <SERVO_doCalibrate+0x84>)
 8002ea0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
	return;
 8002ea6:	bf00      	nop
}
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4907      	ldr	r1, [pc, #28]	@ (8002f0c <__NVIC_EnableIRQ+0x38>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	@ (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b089      	sub	sp, #36	@ 0x24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	332c      	adds	r3, #44	@ 0x2c
 8002fda:	4619      	mov	r1, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002fe6:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	e003      	b.n	8003006 <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	40d3      	lsrs	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	211f      	movs	r1, #31
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 011f 	and.w	r1, r3, #31
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	431a      	orrs	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003038:	bf00      	nop
 800303a:	3724      	adds	r7, #36	@ 0x24
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800306a:	b480      	push	{r7}
 800306c:	b08f      	sub	sp, #60	@ 0x3c
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	330c      	adds	r3, #12
 800307a:	4619      	mov	r1, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003086:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	613a      	str	r2, [r7, #16]
  return result;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	2a00      	cmp	r2, #0
 8003098:	d101      	bne.n	800309e <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800309a:	2220      	movs	r2, #32
 800309c:	e003      	b.n	80030a6 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	40d3      	lsrs	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 80030ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80030b8:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80030bc:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6a39      	ldr	r1, [r7, #32]
 80030c0:	fa91 f1a1 	rbit	r1, r1
 80030c4:	61f9      	str	r1, [r7, #28]
  return result;
 80030c6:	69f9      	ldr	r1, [r7, #28]
 80030c8:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80030ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d101      	bne.n	80030d4 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80030d0:	2120      	movs	r1, #32
 80030d2:	e003      	b.n	80030dc <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80030d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030d6:	fab1 f181 	clz	r1, r1
 80030da:	b2c9      	uxtb	r1, r1
 80030dc:	40cb      	lsrs	r3, r1
 80030de:	2107      	movs	r1, #7
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80030ee:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80030f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f6:	fa91 f1a1 	rbit	r1, r1
 80030fa:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80030fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fe:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8003100:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003102:	2900      	cmp	r1, #0
 8003104:	d101      	bne.n	800310a <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8003106:	2120      	movs	r1, #32
 8003108:	e003      	b.n	8003112 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800310a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800310c:	fab1 f181 	clz	r1, r1
 8003110:	b2c9      	uxtb	r1, r1
 8003112:	40cb      	lsrs	r3, r1
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	431a      	orrs	r2, r3
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003120:	bf00      	nop
 8003122:	373c      	adds	r7, #60	@ 0x3c
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_SPI_SetStandard>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f023 0210 	bic.w	r2, r3, #16
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_TIM_EnableCounter>:
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_TIM_DisableARRPreload>:
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <LL_TIM_OC_DisableFast>:
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d01c      	beq.n	80031de <LL_TIM_OC_DisableFast+0x4a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d017      	beq.n	80031da <LL_TIM_OC_DisableFast+0x46>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d012      	beq.n	80031d6 <LL_TIM_OC_DisableFast+0x42>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d00d      	beq.n	80031d2 <LL_TIM_OC_DisableFast+0x3e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031bc:	d007      	beq.n	80031ce <LL_TIM_OC_DisableFast+0x3a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c4:	d101      	bne.n	80031ca <LL_TIM_OC_DisableFast+0x36>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e00a      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e008      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_TIM_OC_DisableFast+0x4c>
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3318      	adds	r3, #24
 80031e6:	4619      	mov	r1, r3
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003218 <LL_TIM_OC_DisableFast+0x84>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	440b      	add	r3, r1
 80031f0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	4908      	ldr	r1, [pc, #32]	@ (800321c <LL_TIM_OC_DisableFast+0x88>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	4619      	mov	r1, r3
 80031fe:	2304      	movs	r3, #4
 8003200:	408b      	lsls	r3, r1
 8003202:	43db      	mvns	r3, r3
 8003204:	401a      	ands	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	0800ef5c 	.word	0x0800ef5c
 800321c:	0800ef64 	.word	0x0800ef64

08003220 <LL_TIM_OC_EnablePreload>:
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d01c      	beq.n	800326a <LL_TIM_OC_EnablePreload+0x4a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b04      	cmp	r3, #4
 8003234:	d017      	beq.n	8003266 <LL_TIM_OC_EnablePreload+0x46>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b10      	cmp	r3, #16
 800323a:	d012      	beq.n	8003262 <LL_TIM_OC_EnablePreload+0x42>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b40      	cmp	r3, #64	@ 0x40
 8003240:	d00d      	beq.n	800325e <LL_TIM_OC_EnablePreload+0x3e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003248:	d007      	beq.n	800325a <LL_TIM_OC_EnablePreload+0x3a>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003250:	d101      	bne.n	8003256 <LL_TIM_OC_EnablePreload+0x36>
 8003252:	2305      	movs	r3, #5
 8003254:	e00a      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 8003256:	2306      	movs	r3, #6
 8003258:	e008      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 800325a:	2304      	movs	r3, #4
 800325c:	e006      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_TIM_OC_EnablePreload+0x4c>
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3318      	adds	r3, #24
 8003272:	4619      	mov	r1, r3
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <LL_TIM_OC_EnablePreload+0x80>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	440b      	add	r3, r1
 800327c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	4907      	ldr	r1, [pc, #28]	@ (80032a4 <LL_TIM_OC_EnablePreload+0x84>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	4619      	mov	r1, r3
 800328a:	2308      	movs	r3, #8
 800328c:	408b      	lsls	r3, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	0800ef5c 	.word	0x0800ef5c
 80032a4:	0800ef64 	.word	0x0800ef64

080032a8 <LL_TIM_SetClockSource>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_TIM_SetTriggerOutput>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_TIM_DisableMasterSlaveMode>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_USART_Enable>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_USART_ConfigAsyncMode>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	615a      	str	r2, [r3, #20]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_USART_ConfigHalfDuplexMode>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f043 0208 	orr.w	r2, r3, #8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	615a      	str	r2, [r3, #20]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_USART_EnableIT_RXNE>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	@ 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	330c      	adds	r3, #12
 80033c8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f043 0320 	orr.w	r3, r3, #32
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	330c      	adds	r3, #12
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	61ba      	str	r2, [r7, #24]
 80033e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	613b      	str	r3, [r7, #16]
   return(result);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e7      	bne.n	80033c4 <LL_USART_EnableIT_RXNE+0x8>
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <LL_SYSCFG_SetEXTISource+0x68>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3302      	adds	r3, #2
 8003416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	43db      	mvns	r3, r3
 8003420:	ea02 0103 	and.w	r1, r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	60fb      	str	r3, [r7, #12]
  return result;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	fa03 f202 	lsl.w	r2, r3, r2
 8003450:	4806      	ldr	r0, [pc, #24]	@ (800346c <LL_SYSCFG_SetEXTISource+0x68>)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	430a      	orrs	r2, r1
 8003458:	3302      	adds	r3, #2
 800345a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40013800 	.word	0x40013800

08003470 <LL_GPIO_SetPinMode>:
{
 8003470:	b480      	push	{r7}
 8003472:	b08b      	sub	sp, #44	@ 0x2c
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	613b      	str	r3, [r7, #16]
  return result;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2103      	movs	r1, #3
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	61fb      	str	r3, [r7, #28]
  return result;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	bf00      	nop
 80034e0:	372c      	adds	r7, #44	@ 0x2c
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_GPIO_SetPinPull>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	b08b      	sub	sp, #44	@ 0x2c
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	613b      	str	r3, [r7, #16]
  return result;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	e003      	b.n	800351c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2103      	movs	r1, #3
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
  return result;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800353e:	2320      	movs	r3, #32
 8003540:	e003      	b.n	800354a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	bf00      	nop
 800355a:	372c      	adds	r7, #44	@ 0x2c
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_GPIO_ResetOutputPin>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4904      	ldr	r1, [pc, #16]	@ (80035c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40013c00 	.word	0x40013c00

080035cc <LL_AHB1_GRP1_EnableClock>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035d4:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035d8:	4907      	ldr	r1, [pc, #28]	@ (80035f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4313      	orrs	r3, r2
 80035de:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40023800 	.word	0x40023800

080035fc <LL_APB1_GRP1_EnableClock>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003608:	4907      	ldr	r1, [pc, #28]	@ (8003628 <LL_APB1_GRP1_EnableClock+0x2c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40023800 	.word	0x40023800

0800362c <LL_APB2_GRP1_EnableClock>:
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003636:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003638:	4907      	ldr	r1, [pc, #28]	@ (8003658 <LL_APB2_GRP1_EnableClock+0x2c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4013      	ands	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40023800 	.word	0x40023800

0800365c <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8003668:	bf00      	nop
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	b29b      	uxth	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f008 fb35 	bl	800bce0 <CDC_Transmit_FS>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d0f6      	beq.n	800366a <_write+0xe>
	return len;
 800367c:	687b      	ldr	r3, [r7, #4]
#endif
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800368c:	f001 f9b6 	bl	80049fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003690:	f000 f862 	bl	8003758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003694:	f000 fed2 	bl	800443c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003698:	f000 fdc0 	bl	800421c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800369c:	f000 f98e 	bl	80039bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80036a0:	f000 fa3e 	bl	8003b20 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036a4:	f000 faf6 	bl	8003c94 <MX_TIM4_Init>
  MX_TIM5_Init();
 80036a8:	f000 fba0 	bl	8003dec <MX_TIM5_Init>
  MX_TIM13_Init();
 80036ac:	f000 fc42 	bl	8003f34 <MX_TIM13_Init>
  MX_TIM14_Init();
 80036b0:	f000 fc94 	bl	8003fdc <MX_TIM14_Init>
  MX_SPI1_Init();
 80036b4:	f000 f930 	bl	8003918 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80036b8:	f000 fe0e 	bl	80042d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80036bc:	f000 fe6c 	bl	8004398 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80036c0:	f000 fce2 	bl	8004088 <MX_UART4_Init>
  MX_UART5_Init();
 80036c4:	f000 fd32 	bl	800412c <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80036c8:	f008 fa3e 	bl	800bb48 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80036cc:	f000 f8ae 	bl	800382c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 80036d0:	4819      	ldr	r0, [pc, #100]	@ (8003738 <main+0xb0>)
 80036d2:	f7ff fd3e 	bl	8003152 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 80036d6:	4819      	ldr	r0, [pc, #100]	@ (800373c <main+0xb4>)
 80036d8:	f7ff fd3b 	bl	8003152 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 80036dc:	4818      	ldr	r0, [pc, #96]	@ (8003740 <main+0xb8>)
 80036de:	f7ff fd38 	bl	8003152 <LL_TIM_EnableCounter>

  PARM_load();
 80036e2:	f7fe f999 	bl	8001a18 <PARM_load>

  SERVO_Initialization();
 80036e6:	f7ff f9c3 	bl	8002a70 <SERVO_Initialization>
  BuzzerPlayInit();
 80036ea:	f7fd fc79 	bl	8000fe0 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 80036ee:	4815      	ldr	r0, [pc, #84]	@ (8003744 <main+0xbc>)
 80036f0:	f7ff fe64 	bl	80033bc <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80036f4:	4814      	ldr	r0, [pc, #80]	@ (8003748 <main+0xc0>)
 80036f6:	f7ff fe61 	bl	80033bc <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 80036fa:	4814      	ldr	r0, [pc, #80]	@ (800374c <main+0xc4>)
 80036fc:	f7ff fe5e 	bl	80033bc <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  RC_Initialization();
 8003700:	f7fe ff94 	bl	800262c <RC_Initialization>
  IMU_Initialization();
 8003704:	f7fe f886 	bl	8001814 <IMU_Initialization>
  BuzzerPlayOneCycle();
 8003708:	f7fd fc98 	bl	800103c <BuzzerPlayOneCycle>
  SERVO_doArm();
 800370c:	f7ff fa12 	bl	8002b34 <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RC_GetData();
 8003710:	f7fe ffee 	bl	80026f0 <RC_GetData>

	  IMU_GetData();
 8003714:	f7fe f885 	bl	8001822 <IMU_GetData>

	  if(fsFlag == 1){
 8003718:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <main+0xc8>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <main+0x9e>
		  FS_mannualMode();
 8003720:	f7fd fcd4 	bl	80010cc <FS_mannualMode>
 8003724:	e005      	b.n	8003732 <main+0xaa>
	  }
	  else{
		  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003726:	2101      	movs	r1, #1
 8003728:	480a      	ldr	r0, [pc, #40]	@ (8003754 <main+0xcc>)
 800372a:	f7ff ff1b 	bl	8003564 <LL_GPIO_ResetOutputPin>
		  SERVO_control();
 800372e:	f7ff fa91 	bl	8002c54 <SERVO_control>
	  }

	  Log_Send();
 8003732:	f7fe f89f 	bl	8001874 <Log_Send>
	  RC_GetData();
 8003736:	e7eb      	b.n	8003710 <main+0x88>
 8003738:	40000800 	.word	0x40000800
 800373c:	40001c00 	.word	0x40001c00
 8003740:	40002000 	.word	0x40002000
 8003744:	40011000 	.word	0x40011000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	200002e0 	.word	0x200002e0
 8003754:	40021000 	.word	0x40021000

08003758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b094      	sub	sp, #80	@ 0x50
 800375c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800375e:	f107 0320 	add.w	r3, r7, #32
 8003762:	2230      	movs	r2, #48	@ 0x30
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f009 fd5f 	bl	800d22a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <SystemClock_Config+0xcc>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <SystemClock_Config+0xcc>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
 800378c:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <SystemClock_Config+0xcc>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	4b22      	ldr	r3, [pc, #136]	@ (8003828 <SystemClock_Config+0xd0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a21      	ldr	r2, [pc, #132]	@ (8003828 <SystemClock_Config+0xd0>)
 80037a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <SystemClock_Config+0xd0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037be:	2302      	movs	r3, #2
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037c8:	2308      	movs	r3, #8
 80037ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037cc:	23a8      	movs	r3, #168	@ 0xa8
 80037ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037d0:	2302      	movs	r3, #2
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80037d4:	2307      	movs	r3, #7
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d8:	f107 0320 	add.w	r3, r7, #32
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fea3 	bl	8006528 <HAL_RCC_OscConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037e8:	f000 feb2 	bl	8004550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ec:	230f      	movs	r3, #15
 80037ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f0:	2302      	movs	r3, #2
 80037f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2105      	movs	r1, #5
 800380a:	4618      	mov	r0, r3
 800380c:	f003 f904 	bl	8006a18 <HAL_RCC_ClockConfig>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003816:	f000 fe9b 	bl	8004550 <Error_Handler>
  }
}
 800381a:	bf00      	nop
 800381c:	3750      	adds	r7, #80	@ 0x50
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b092      	sub	sp, #72	@ 0x48
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003832:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800383e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800384e:	f107 0318 	add.w	r3, r7, #24
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	463b      	mov	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800386c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003870:	f7ff fedc 	bl	800362c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003874:	2004      	movs	r0, #4
 8003876:	f7ff fea9 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 800387a:	2302      	movs	r3, #2
 800387c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800387e:	2303      	movs	r3, #3
 8003880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003886:	463b      	mov	r3, r7
 8003888:	4619      	mov	r1, r3
 800388a:	481f      	ldr	r0, [pc, #124]	@ (8003908 <MX_ADC1_Init+0xdc>)
 800388c:	f003 fdf8 	bl	8007480 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003890:	2300      	movs	r3, #0
 8003892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800389c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80038a0:	4619      	mov	r1, r3
 80038a2:	481a      	ldr	r0, [pc, #104]	@ (800390c <MX_ADC1_Init+0xe0>)
 80038a4:	f003 fb1c 	bl	8006ee0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80038bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038c0:	4619      	mov	r1, r3
 80038c2:	4812      	ldr	r0, [pc, #72]	@ (800390c <MX_ADC1_Init+0xe0>)
 80038c4:	f003 fb38 	bl	8006f38 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80038c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038cc:	480f      	ldr	r0, [pc, #60]	@ (800390c <MX_ADC1_Init+0xe0>)
 80038ce:	f7ff fbb9 	bl	8003044 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80038d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038d6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	4619      	mov	r1, r3
 80038e2:	480b      	ldr	r0, [pc, #44]	@ (8003910 <MX_ADC1_Init+0xe4>)
 80038e4:	f003 fab4 	bl	8006e50 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 80038e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <MX_ADC1_Init+0xe8>)
 80038ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038ee:	4807      	ldr	r0, [pc, #28]	@ (800390c <MX_ADC1_Init+0xe0>)
 80038f0:	f7ff fb6b 	bl	8002fca <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80038f4:	2200      	movs	r2, #0
 80038f6:	4907      	ldr	r1, [pc, #28]	@ (8003914 <MX_ADC1_Init+0xe8>)
 80038f8:	4804      	ldr	r0, [pc, #16]	@ (800390c <MX_ADC1_Init+0xe0>)
 80038fa:	f7ff fbb6 	bl	800306a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038fe:	bf00      	nop
 8003900:	3748      	adds	r7, #72	@ 0x48
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40020800 	.word	0x40020800
 800390c:	40012000 	.word	0x40012000
 8003910:	40012300 	.word	0x40012300
 8003914:	0030000b 	.word	0x0030000b

08003918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b090      	sub	sp, #64	@ 0x40
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800391e:	f107 0318 	add.w	r3, r7, #24
 8003922:	2228      	movs	r2, #40	@ 0x28
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f009 fc7f 	bl	800d22a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	463b      	mov	r3, r7
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800393c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003940:	f7ff fe74 	bl	800362c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003944:	2001      	movs	r0, #1
 8003946:	f7ff fe41 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800394a:	23e0      	movs	r3, #224	@ 0xe0
 800394c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800394e:	2302      	movs	r3, #2
 8003950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800395e:	2305      	movs	r3, #5
 8003960:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003962:	463b      	mov	r3, r7
 8003964:	4619      	mov	r1, r3
 8003966:	4813      	ldr	r0, [pc, #76]	@ (80039b4 <MX_SPI1_Init+0x9c>)
 8003968:	f003 fd8a 	bl	8007480 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003970:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003974:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800397a:	2302      	movs	r3, #2
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800397e:	2301      	movs	r3, #1
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003988:	2318      	movs	r3, #24
 800398a:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800398c:	2300      	movs	r3, #0
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003994:	230a      	movs	r3, #10
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003998:	f107 0318 	add.w	r3, r7, #24
 800399c:	4619      	mov	r1, r3
 800399e:	4806      	ldr	r0, [pc, #24]	@ (80039b8 <MX_SPI1_Init+0xa0>)
 80039a0:	f003 ff49 	bl	8007836 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80039a4:	2100      	movs	r1, #0
 80039a6:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <MX_SPI1_Init+0xa0>)
 80039a8:	f7ff fbc0 	bl	800312c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	3740      	adds	r7, #64	@ 0x40
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40013000 	.word	0x40013000

080039bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b09a      	sub	sp, #104	@ 0x68
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80039c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80039d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039d6:	2220      	movs	r2, #32
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f009 fc25 	bl	800d22a <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
 8003a00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7ff fe12 	bl	800362c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a08:	f7ff fa56 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff faa6 	bl	8002f64 <NVIC_EncodePriority>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	201b      	movs	r0, #27
 8003a1e:	f7ff fa77 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003a22:	201b      	movs	r0, #27
 8003a24:	f7ff fa56 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 65535;
 8003a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003a40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a44:	4619      	mov	r1, r3
 8003a46:	4834      	ldr	r0, [pc, #208]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a48:	f003 ffba 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003a4c:	4832      	ldr	r0, [pc, #200]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a4e:	f7ff fb90 	bl	8003172 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a52:	2100      	movs	r1, #0
 8003a54:	4830      	ldr	r0, [pc, #192]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a56:	f7ff fc27 	bl	80032a8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003a76:	2300      	movs	r3, #0
 8003a78:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003a7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2110      	movs	r1, #16
 8003a82:	4825      	ldr	r0, [pc, #148]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a84:	f004 f836 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8003a88:	2110      	movs	r1, #16
 8003a8a:	4823      	ldr	r0, [pc, #140]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a8c:	f7ff fb82 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003a90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a94:	461a      	mov	r2, r3
 8003a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a9a:	481f      	ldr	r0, [pc, #124]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003a9c:	f004 f82a 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003aa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aa4:	481c      	ldr	r0, [pc, #112]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003aa6:	f7ff fb75 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	481a      	ldr	r0, [pc, #104]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003aae:	f7ff fc10 	bl	80032d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003ab2:	4819      	ldr	r0, [pc, #100]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003ab4:	f7ff fc20 	bl	80032f8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	480e      	ldr	r0, [pc, #56]	@ (8003b18 <MX_TIM1_Init+0x15c>)
 8003ae0:	f004 f849 	bl	8007b76 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003ae4:	2010      	movs	r0, #16
 8003ae6:	f7ff fd71 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = MAIN_CH11_Pin|MAIN_CH12_Pin;
 8003aea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003af0:	2302      	movs	r3, #2
 8003af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4804      	ldr	r0, [pc, #16]	@ (8003b1c <MX_TIM1_Init+0x160>)
 8003b0a:	f003 fcb9 	bl	8007480 <LL_GPIO_Init>

}
 8003b0e:	bf00      	nop
 8003b10:	3768      	adds	r7, #104	@ 0x68
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40021000 	.word	0x40021000

08003b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b094      	sub	sp, #80	@ 0x50
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003b26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003b36:	f107 031c 	add.w	r3, r7, #28
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f009 fb73 	bl	800d22a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003b54:	2002      	movs	r0, #2
 8003b56:	f7ff fd51 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003b5a:	2353      	movs	r3, #83	@ 0x53
 8003b5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003b62:	4b48      	ldr	r3, [pc, #288]	@ (8003c84 <MX_TIM3_Init+0x164>)
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003b66:	2300      	movs	r3, #0
 8003b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003b6a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4845      	ldr	r0, [pc, #276]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003b72:	f003 ff25 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003b76:	4844      	ldr	r0, [pc, #272]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003b78:	f7ff fafb 	bl	8003172 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4842      	ldr	r0, [pc, #264]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003b80:	f7ff fb92 	bl	80032a8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003b84:	2101      	movs	r1, #1
 8003b86:	4840      	ldr	r0, [pc, #256]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003b88:	f7ff fb4a 	bl	8003220 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003b8c:	2360      	movs	r3, #96	@ 0x60
 8003b8e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4837      	ldr	r0, [pc, #220]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003baa:	f003 ffa3 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4835      	ldr	r0, [pc, #212]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bb2:	f7ff faef 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	4833      	ldr	r0, [pc, #204]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bba:	f7ff fb31 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003bbe:	f107 031c 	add.w	r3, r7, #28
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	4830      	ldr	r0, [pc, #192]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bc8:	f003 ff94 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003bcc:	2110      	movs	r1, #16
 8003bce:	482e      	ldr	r0, [pc, #184]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bd0:	f7ff fae0 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8003bd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bd8:	482b      	ldr	r0, [pc, #172]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bda:	f7ff fb21 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	461a      	mov	r2, r3
 8003be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003be8:	4827      	ldr	r0, [pc, #156]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bea:	f003 ff83 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8003bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bf2:	4825      	ldr	r0, [pc, #148]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bf4:	f7ff face 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003bf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bfc:	4822      	ldr	r0, [pc, #136]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003bfe:	f7ff fb0f 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	461a      	mov	r2, r3
 8003c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c0c:	481e      	ldr	r0, [pc, #120]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003c0e:	f003 ff71 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c16:	481c      	ldr	r0, [pc, #112]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003c18:	f7ff fabc 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	481a      	ldr	r0, [pc, #104]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003c20:	f7ff fb57 	bl	80032d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003c24:	4818      	ldr	r0, [pc, #96]	@ (8003c88 <MX_TIM3_Init+0x168>)
 8003c26:	f7ff fb67 	bl	80032f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f7ff fcce 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003c30:	2004      	movs	r0, #4
 8003c32:	f7ff fccb 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 8003c36:	2303      	movs	r3, #3
 8003c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	480e      	ldr	r0, [pc, #56]	@ (8003c8c <MX_TIM3_Init+0x16c>)
 8003c54:	f003 fc14 	bl	8007480 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8003c58:	23c0      	movs	r3, #192	@ 0xc0
 8003c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4806      	ldr	r0, [pc, #24]	@ (8003c90 <MX_TIM3_Init+0x170>)
 8003c76:	f003 fc03 	bl	8007480 <LL_GPIO_Init>

}
 8003c7a:	bf00      	nop
 8003c7c:	3750      	adds	r7, #80	@ 0x50
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	fff04e20 	.word	0xfff04e20
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800

08003c94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b094      	sub	sp, #80	@ 0x50
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003c9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003caa:	f107 031c 	add.w	r3, r7, #28
 8003cae:	2220      	movs	r2, #32
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f009 fab9 	bl	800d22a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003cc8:	2004      	movs	r0, #4
 8003cca:	f7ff fc97 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8003cce:	2304      	movs	r3, #4
 8003cd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <MX_TIM4_Init+0x148>)
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8003cde:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	483e      	ldr	r0, [pc, #248]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003ce6:	f003 fe6b 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003cea:	483d      	ldr	r0, [pc, #244]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003cec:	f7ff fa41 	bl	8003172 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	483b      	ldr	r0, [pc, #236]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003cf4:	f7ff fad8 	bl	80032a8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8003cf8:	2110      	movs	r1, #16
 8003cfa:	4839      	ldr	r0, [pc, #228]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003cfc:	f7ff fa90 	bl	8003220 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003d00:	2360      	movs	r3, #96	@ 0x60
 8003d02:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003d14:	f107 031c 	add.w	r3, r7, #28
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2110      	movs	r1, #16
 8003d1c:	4830      	ldr	r0, [pc, #192]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d1e:	f003 fee9 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003d22:	2110      	movs	r1, #16
 8003d24:	482e      	ldr	r0, [pc, #184]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d26:	f7ff fa35 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8003d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d2e:	482c      	ldr	r0, [pc, #176]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d30:	f7ff fa76 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d3e:	4828      	ldr	r0, [pc, #160]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d40:	f003 fed8 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8003d44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d48:	4825      	ldr	r0, [pc, #148]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d4a:	f7ff fa23 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8003d4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d52:	4823      	ldr	r0, [pc, #140]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d54:	f7ff fa64 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d62:	481f      	ldr	r0, [pc, #124]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d64:	f003 fec6 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d6c:	481c      	ldr	r0, [pc, #112]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d6e:	f7ff fa11 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003d72:	2100      	movs	r1, #0
 8003d74:	481a      	ldr	r0, [pc, #104]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d76:	f7ff faac 	bl	80032d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003d7a:	4819      	ldr	r0, [pc, #100]	@ (8003de0 <MX_TIM4_Init+0x14c>)
 8003d7c:	f7ff fabc 	bl	80032f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003d80:	2008      	movs	r0, #8
 8003d82:	f7ff fc23 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003d86:	2002      	movs	r0, #2
 8003d88:	f7ff fc20 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8003d8c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d92:	2302      	movs	r3, #2
 8003d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003da2:	2302      	movs	r3, #2
 8003da4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	480e      	ldr	r0, [pc, #56]	@ (8003de4 <MX_TIM4_Init+0x150>)
 8003dac:	f003 fb68 	bl	8007480 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003db4:	2302      	movs	r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4806      	ldr	r0, [pc, #24]	@ (8003de8 <MX_TIM4_Init+0x154>)
 8003dce:	f003 fb57 	bl	8007480 <LL_GPIO_Init>

}
 8003dd2:	bf00      	nop
 8003dd4:	3750      	adds	r7, #80	@ 0x50
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	fff0fadc 	.word	0xfff0fadc
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40020400 	.word	0x40020400

08003dec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b094      	sub	sp, #80	@ 0x50
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003df2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003e02:	f107 031c 	add.w	r3, r7, #28
 8003e06:	2220      	movs	r2, #32
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f009 fa0d 	bl	800d22a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003e20:	2008      	movs	r0, #8
 8003e22:	f7ff fbeb 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003e26:	2353      	movs	r3, #83	@ 0x53
 8003e28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f28 <MX_TIM5_Init+0x13c>)
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003e36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	483b      	ldr	r0, [pc, #236]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e3e:	f003 fdbf 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8003e42:	483a      	ldr	r0, [pc, #232]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e44:	f7ff f995 	bl	8003172 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4838      	ldr	r0, [pc, #224]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e4c:	f7ff fa2c 	bl	80032a8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8003e50:	2101      	movs	r1, #1
 8003e52:	4836      	ldr	r0, [pc, #216]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e54:	f7ff f9e4 	bl	8003220 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003e58:	2360      	movs	r3, #96	@ 0x60
 8003e5a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003e6c:	f107 031c 	add.w	r3, r7, #28
 8003e70:	461a      	mov	r2, r3
 8003e72:	2101      	movs	r1, #1
 8003e74:	482d      	ldr	r0, [pc, #180]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e76:	f003 fe3d 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	482b      	ldr	r0, [pc, #172]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e7e:	f7ff f989 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003e82:	2110      	movs	r1, #16
 8003e84:	4829      	ldr	r0, [pc, #164]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e86:	f7ff f9cb 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2110      	movs	r1, #16
 8003e92:	4826      	ldr	r0, [pc, #152]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e94:	f003 fe2e 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003e98:	2110      	movs	r1, #16
 8003e9a:	4824      	ldr	r0, [pc, #144]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003e9c:	f7ff f97a 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ea4:	4821      	ldr	r0, [pc, #132]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003ea6:	f7ff f9bb 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003eb4:	481d      	ldr	r0, [pc, #116]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003eb6:	f003 fe1d 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ebe:	481b      	ldr	r0, [pc, #108]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003ec0:	f7ff f968 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003ec4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ec8:	4818      	ldr	r0, [pc, #96]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003eca:	f7ff f9a9 	bl	8003220 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003ece:	f107 031c 	add.w	r3, r7, #28
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ed8:	4814      	ldr	r0, [pc, #80]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003eda:	f003 fe0b 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003ede:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ee2:	4812      	ldr	r0, [pc, #72]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003ee4:	f7ff f956 	bl	8003194 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4810      	ldr	r0, [pc, #64]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003eec:	f7ff f9f1 	bl	80032d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003ef0:	480e      	ldr	r0, [pc, #56]	@ (8003f2c <MX_TIM5_Init+0x140>)
 8003ef2:	f7ff fa01 	bl	80032f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f7ff fb68 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 8003efc:	230f      	movs	r3, #15
 8003efe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f00:	2302      	movs	r3, #2
 8003f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4805      	ldr	r0, [pc, #20]	@ (8003f30 <MX_TIM5_Init+0x144>)
 8003f1a:	f003 fab1 	bl	8007480 <LL_GPIO_Init>

}
 8003f1e:	bf00      	nop
 8003f20:	3750      	adds	r7, #80	@ 0x50
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	fff04e20 	.word	0xfff04e20
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40020000 	.word	0x40020000

08003f34 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	@ 0x38
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f009 f96a 	bl	800d22a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8003f56:	2080      	movs	r0, #128	@ 0x80
 8003f58:	f7ff fb50 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003f5c:	f7fe ffac 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fffc 	bl	8002f64 <NVIC_EncodePriority>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4619      	mov	r1, r3
 8003f70:	202c      	movs	r0, #44	@ 0x2c
 8003f72:	f7fe ffcd 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f76:	202c      	movs	r0, #44	@ 0x2c
 8003f78:	f7fe ffac 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003f84:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <MX_TIM13_Init+0xa0>)
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 8003f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f90:	4619      	mov	r1, r3
 8003f92:	4811      	ldr	r0, [pc, #68]	@ (8003fd8 <MX_TIM13_Init+0xa4>)
 8003f94:	f003 fd14 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8003f98:	480f      	ldr	r0, [pc, #60]	@ (8003fd8 <MX_TIM13_Init+0xa4>)
 8003f9a:	f7ff f8ea 	bl	8003172 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4807      	ldr	r0, [pc, #28]	@ (8003fd8 <MX_TIM13_Init+0xa4>)
 8003fba:	f003 fd9b 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4805      	ldr	r0, [pc, #20]	@ (8003fd8 <MX_TIM13_Init+0xa4>)
 8003fc2:	f7ff f8e7 	bl	8003194 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 8003fc6:	4804      	ldr	r0, [pc, #16]	@ (8003fd8 <MX_TIM13_Init+0xa4>)
 8003fc8:	f7ff f9a6 	bl	8003318 <LL_TIM_EnableIT_UPDATE>
//  TIM13->ARR = 42000;
//  TIM13->PSC = 2;

  /* USER CODE END TIM13_Init 2 */

}
 8003fcc:	bf00      	nop
 8003fce:	3738      	adds	r7, #56	@ 0x38
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	fff0a410 	.word	0xfff0a410
 8003fd8:	40001c00 	.word	0x40001c00

08003fdc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	@ 0x38
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003ff2:	1d3b      	adds	r3, r7, #4
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f009 f916 	bl	800d22a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8003ffe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004002:	f7ff fafb 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004006:	f7fe ff57 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 800400a:	4603      	mov	r3, r0
 800400c:	2200      	movs	r2, #0
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe ffa7 	bl	8002f64 <NVIC_EncodePriority>
 8004016:	4603      	mov	r3, r0
 8004018:	4619      	mov	r1, r3
 800401a:	202d      	movs	r0, #45	@ 0x2d
 800401c:	f7fe ff78 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004020:	202d      	movs	r0, #45	@ 0x2d
 8004022:	f7fe ff57 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800402a:	2300      	movs	r3, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <MX_TIM14_Init+0xa4>)
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004032:	2300      	movs	r3, #0
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800403a:	4619      	mov	r1, r3
 800403c:	4811      	ldr	r0, [pc, #68]	@ (8004084 <MX_TIM14_Init+0xa8>)
 800403e:	f003 fcbf 	bl	80079c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 8004042:	4810      	ldr	r0, [pc, #64]	@ (8004084 <MX_TIM14_Init+0xa8>)
 8004044:	f7ff f895 	bl	8003172 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8004048:	2300      	movs	r3, #0
 800404a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	461a      	mov	r2, r3
 8004060:	2101      	movs	r1, #1
 8004062:	4808      	ldr	r0, [pc, #32]	@ (8004084 <MX_TIM14_Init+0xa8>)
 8004064:	f003 fd46 	bl	8007af4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 8004068:	2101      	movs	r1, #1
 800406a:	4806      	ldr	r0, [pc, #24]	@ (8004084 <MX_TIM14_Init+0xa8>)
 800406c:	f7ff f892 	bl	8003194 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 8004070:	4804      	ldr	r0, [pc, #16]	@ (8004084 <MX_TIM14_Init+0xa8>)
 8004072:	f7ff f951 	bl	8003318 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM14_Init 2 */

}
 8004076:	bf00      	nop
 8004078:	3738      	adds	r7, #56	@ 0x38
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	fff00054 	.word	0xfff00054
 8004084:	40002000 	.word	0x40002000

08004088 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	@ 0x38
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	615a      	str	r2, [r3, #20]
 80040a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
 80040b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80040b2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80040b6:	f7ff faa1 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80040ba:	2004      	movs	r0, #4
 80040bc:	f7ff fa86 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 80040c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80040c6:	2302      	movs	r3, #2
 80040c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80040ca:	2303      	movs	r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80040d6:	2308      	movs	r3, #8
 80040d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4811      	ldr	r0, [pc, #68]	@ (8004124 <MX_UART4_Init+0x9c>)
 80040e0:	f003 f9ce 	bl	8007480 <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80040e4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80040e8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80040ea:	2300      	movs	r3, #0
 80040ec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80040f6:	230c      	movs	r3, #12
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8004102:	f107 031c 	add.w	r3, r7, #28
 8004106:	4619      	mov	r1, r3
 8004108:	4807      	ldr	r0, [pc, #28]	@ (8004128 <MX_UART4_Init+0xa0>)
 800410a:	f004 f983 	bl	8008414 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800410e:	4806      	ldr	r0, [pc, #24]	@ (8004128 <MX_UART4_Init+0xa0>)
 8004110:	f7ff f922 	bl	8003358 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004114:	4804      	ldr	r0, [pc, #16]	@ (8004128 <MX_UART4_Init+0xa0>)
 8004116:	f7ff f90f 	bl	8003338 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800411a:	bf00      	nop
 800411c:	3738      	adds	r7, #56	@ 0x38
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40020800 	.word	0x40020800
 8004128:	40004c00 	.word	0x40004c00

0800412c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	@ 0x38
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004132:	f107 031c 	add.w	r3, r7, #28
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	615a      	str	r2, [r3, #20]
 8004144:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
 8004154:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8004156:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800415a:	f7ff fa4f 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800415e:	2004      	movs	r0, #4
 8004160:	f7ff fa34 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004164:	2008      	movs	r0, #8
 8004166:	f7ff fa31 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 800416a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800416e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004170:	2302      	movs	r3, #2
 8004172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004174:	2303      	movs	r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004180:	2308      	movs	r3, #8
 8004182:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4821      	ldr	r0, [pc, #132]	@ (8004210 <MX_UART5_Init+0xe4>)
 800418a:	f003 f979 	bl	8007480 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 800418e:	2304      	movs	r3, #4
 8004190:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004192:	2302      	movs	r3, #2
 8004194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004196:	2303      	movs	r3, #3
 8004198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80041a2:	2308      	movs	r3, #8
 80041a4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	481a      	ldr	r0, [pc, #104]	@ (8004214 <MX_UART5_Init+0xe8>)
 80041ac:	f003 f968 	bl	8007480 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80041b0:	f7fe fe82 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2200      	movs	r2, #0
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fed2 	bl	8002f64 <NVIC_EncodePriority>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4619      	mov	r1, r3
 80041c4:	2035      	movs	r0, #53	@ 0x35
 80041c6:	f7fe fea3 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80041ca:	2035      	movs	r0, #53	@ 0x35
 80041cc:	f7fe fe82 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80041d0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80041d4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80041de:	2300      	movs	r3, #0
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80041e2:	230c      	movs	r3, #12
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80041ee:	f107 031c 	add.w	r3, r7, #28
 80041f2:	4619      	mov	r1, r3
 80041f4:	4808      	ldr	r0, [pc, #32]	@ (8004218 <MX_UART5_Init+0xec>)
 80041f6:	f004 f90d 	bl	8008414 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80041fa:	4807      	ldr	r0, [pc, #28]	@ (8004218 <MX_UART5_Init+0xec>)
 80041fc:	f7ff f8ac 	bl	8003358 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004200:	4805      	ldr	r0, [pc, #20]	@ (8004218 <MX_UART5_Init+0xec>)
 8004202:	f7ff f899 	bl	8003338 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004206:	bf00      	nop
 8004208:	3738      	adds	r7, #56	@ 0x38
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40020800 	.word	0x40020800
 8004214:	40020c00 	.word	0x40020c00
 8004218:	40005000 	.word	0x40005000

0800421c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	@ 0x38
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004222:	f107 031c 	add.w	r3, r7, #28
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	611a      	str	r2, [r3, #16]
 8004232:	615a      	str	r2, [r3, #20]
 8004234:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
 8004244:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004246:	2010      	movs	r0, #16
 8004248:	f7ff f9f0 	bl	800362c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800424c:	2001      	movs	r0, #1
 800424e:	f7ff f9bd 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8004252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004258:	2302      	movs	r3, #2
 800425a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800425c:	2303      	movs	r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004268:	2307      	movs	r3, #7
 800426a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4817      	ldr	r0, [pc, #92]	@ (80042d0 <MX_USART1_UART_Init+0xb4>)
 8004272:	f003 f905 	bl	8007480 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004276:	f7fe fe1f 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 800427a:	4603      	mov	r3, r0
 800427c:	2200      	movs	r2, #0
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fe6f 	bl	8002f64 <NVIC_EncodePriority>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	2025      	movs	r0, #37	@ 0x25
 800428c:	f7fe fe40 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004290:	2025      	movs	r0, #37	@ 0x25
 8004292:	f7fe fe1f 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004296:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800429a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800429c:	2300      	movs	r3, #0
 800429e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80042a8:	230c      	movs	r3, #12
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80042ac:	2300      	movs	r3, #0
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80042b0:	f107 031c 	add.w	r3, r7, #28
 80042b4:	4619      	mov	r1, r3
 80042b6:	4807      	ldr	r0, [pc, #28]	@ (80042d4 <MX_USART1_UART_Init+0xb8>)
 80042b8:	f004 f8ac 	bl	8008414 <LL_USART_Init>
  LL_USART_Enable(USART1);
 80042bc:	4805      	ldr	r0, [pc, #20]	@ (80042d4 <MX_USART1_UART_Init+0xb8>)
 80042be:	f7ff f83b 	bl	8003338 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 80042c2:	4804      	ldr	r0, [pc, #16]	@ (80042d4 <MX_USART1_UART_Init+0xb8>)
 80042c4:	f7ff f85e 	bl	8003384 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042c8:	bf00      	nop
 80042ca:	3738      	adds	r7, #56	@ 0x38
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40011000 	.word	0x40011000

080042d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08e      	sub	sp, #56	@ 0x38
 80042dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80042de:	f107 031c 	add.w	r3, r7, #28
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	60da      	str	r2, [r3, #12]
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	615a      	str	r2, [r3, #20]
 80042f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f2:	1d3b      	adds	r3, r7, #4
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
 8004300:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004302:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004306:	f7ff f979 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800430a:	2008      	movs	r0, #8
 800430c:	f7ff f95e 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8004310:	2378      	movs	r3, #120	@ 0x78
 8004312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004314:	2302      	movs	r3, #2
 8004316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004318:	2303      	movs	r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004324:	2307      	movs	r3, #7
 8004326:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4818      	ldr	r0, [pc, #96]	@ (8004390 <MX_USART2_UART_Init+0xb8>)
 800432e:	f003 f8a7 	bl	8007480 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004332:	f7fe fdc1 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8004336:	4603      	mov	r3, r0
 8004338:	2200      	movs	r2, #0
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fe11 	bl	8002f64 <NVIC_EncodePriority>
 8004342:	4603      	mov	r3, r0
 8004344:	4619      	mov	r1, r3
 8004346:	2026      	movs	r0, #38	@ 0x26
 8004348:	f7fe fde2 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800434c:	2026      	movs	r0, #38	@ 0x26
 800434e:	f7fe fdc1 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8004352:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8004356:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004364:	230c      	movs	r3, #12
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800436c:	2300      	movs	r3, #0
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004370:	f107 031c 	add.w	r3, r7, #28
 8004374:	4619      	mov	r1, r3
 8004376:	4807      	ldr	r0, [pc, #28]	@ (8004394 <MX_USART2_UART_Init+0xbc>)
 8004378:	f004 f84c 	bl	8008414 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800437c:	4805      	ldr	r0, [pc, #20]	@ (8004394 <MX_USART2_UART_Init+0xbc>)
 800437e:	f7fe ffeb 	bl	8003358 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004382:	4804      	ldr	r0, [pc, #16]	@ (8004394 <MX_USART2_UART_Init+0xbc>)
 8004384:	f7fe ffd8 	bl	8003338 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004388:	bf00      	nop
 800438a:	3738      	adds	r7, #56	@ 0x38
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40004400 	.word	0x40004400

08004398 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	@ 0x38
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	611a      	str	r2, [r3, #16]
 80043ae:	615a      	str	r2, [r3, #20]
 80043b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80043c2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80043c6:	f7ff f919 	bl	80035fc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80043ca:	2008      	movs	r0, #8
 80043cc:	f7ff f8fe 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80043d0:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80043d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043d6:	2302      	movs	r3, #2
 80043d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043da:	2303      	movs	r3, #3
 80043dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80043e6:	2307      	movs	r3, #7
 80043e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4811      	ldr	r0, [pc, #68]	@ (8004434 <MX_USART3_UART_Init+0x9c>)
 80043f0:	f003 f846 	bl	8007480 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80043f4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80043f8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004402:	2300      	movs	r3, #0
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004406:	230c      	movs	r3, #12
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800440e:	2300      	movs	r3, #0
 8004410:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	4619      	mov	r1, r3
 8004418:	4807      	ldr	r0, [pc, #28]	@ (8004438 <MX_USART3_UART_Init+0xa0>)
 800441a:	f003 fffb 	bl	8008414 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800441e:	4806      	ldr	r0, [pc, #24]	@ (8004438 <MX_USART3_UART_Init+0xa0>)
 8004420:	f7fe ff9a 	bl	8003358 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8004424:	4804      	ldr	r0, [pc, #16]	@ (8004438 <MX_USART3_UART_Init+0xa0>)
 8004426:	f7fe ff87 	bl	8003338 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800442a:	bf00      	nop
 800442c:	3738      	adds	r7, #56	@ 0x38
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40020c00 	.word	0x40020c00
 8004438:	40004800 	.word	0x40004800

0800443c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004442:	f107 0318 	add.w	r3, r7, #24
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	463b      	mov	r3, r7
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	611a      	str	r2, [r3, #16]
 800445a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800445c:	2010      	movs	r0, #16
 800445e:	f7ff f8b5 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004462:	2080      	movs	r0, #128	@ 0x80
 8004464:	f7ff f8b2 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004468:	2004      	movs	r0, #4
 800446a:	f7ff f8af 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800446e:	2001      	movs	r0, #1
 8004470:	f7ff f8ac 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004474:	2002      	movs	r0, #2
 8004476:	f7ff f8a9 	bl	80035cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800447a:	2008      	movs	r0, #8
 800447c:	f7ff f8a6 	bl	80035cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 8004480:	2127      	movs	r1, #39	@ 0x27
 8004482:	4830      	ldr	r0, [pc, #192]	@ (8004544 <MX_GPIO_Init+0x108>)
 8004484:	f7ff f86e 	bl	8003564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 8004488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800448c:	482e      	ldr	r0, [pc, #184]	@ (8004548 <MX_GPIO_Init+0x10c>)
 800448e:	f7ff f869 	bl	8003564 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 8004492:	2327      	movs	r3, #39	@ 0x27
 8004494:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004496:	2301      	movs	r3, #1
 8004498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044a6:	463b      	mov	r3, r7
 80044a8:	4619      	mov	r1, r3
 80044aa:	4826      	ldr	r0, [pc, #152]	@ (8004544 <MX_GPIO_Init+0x108>)
 80044ac:	f002 ffe8 	bl	8007480 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 80044b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80044b6:	2301      	movs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 80044c6:	463b      	mov	r3, r7
 80044c8:	4619      	mov	r1, r3
 80044ca:	481f      	ldr	r0, [pc, #124]	@ (8004548 <MX_GPIO_Init+0x10c>)
 80044cc:	f002 ffd8 	bl	8007480 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE14);
 80044d0:	491e      	ldr	r1, [pc, #120]	@ (800454c <MX_GPIO_Init+0x110>)
 80044d2:	2004      	movs	r0, #4
 80044d4:	f7fe ff96 	bl	8003404 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80044d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044dc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80044de:	2301      	movs	r3, #1
 80044e0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80044e2:	2300      	movs	r3, #0
 80044e4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80044e6:	2302      	movs	r3, #2
 80044e8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80044ea:	f107 0318 	add.w	r3, r7, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 fdfc 	bl	80070ec <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_PULL_NO);
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044fa:	4812      	ldr	r0, [pc, #72]	@ (8004544 <MX_GPIO_Init+0x108>)
 80044fc:	f7fe fff5 	bl	80034ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_MODE_INPUT);
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004506:	480f      	ldr	r0, [pc, #60]	@ (8004544 <MX_GPIO_Init+0x108>)
 8004508:	f7fe ffb2 	bl	8003470 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800450c:	f7fe fcd4 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8004510:	4603      	mov	r3, r0
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fd24 	bl	8002f64 <NVIC_EncodePriority>
 800451c:	4603      	mov	r3, r0
 800451e:	4619      	mov	r1, r3
 8004520:	2028      	movs	r0, #40	@ 0x28
 8004522:	f7fe fcf5 	bl	8002f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004526:	2028      	movs	r0, #40	@ 0x28
 8004528:	f7fe fcd4 	bl	8002ed4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_14);
 800452c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004530:	f7ff f828 	bl	8003584 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_14);
 8004534:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004538:	f7ff f836 	bl	80035a8 <LL_EXTI_EnableFallingTrig_0_31>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800453c:	bf00      	nop
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	40020c00 	.word	0x40020c00
 800454c:	0f000003 	.word	0x0f000003

08004550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004554:	b672      	cpsid	i
}
 8004556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <Error_Handler+0x8>

0800455c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_MspInit+0x4c>)
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	4a0f      	ldr	r2, [pc, #60]	@ (80045a8 <HAL_MspInit+0x4c>)
 800456c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004570:	6453      	str	r3, [r2, #68]	@ 0x44
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_MspInit+0x4c>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457a:	607b      	str	r3, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_MspInit+0x4c>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <HAL_MspInit+0x4c>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	@ 0x40
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <HAL_MspInit+0x4c>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <LL_TIM_ClearFlag_UPDATE>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f06f 0201 	mvn.w	r2, #1
 80045ba:	611a      	str	r2, [r3, #16]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_USART_IsActiveFlag_RXNE>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b20      	cmp	r3, #32
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_USART_ClearFlag_RXNE>:
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f06f 0220 	mvn.w	r2, #32
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_USART_ReceiveData8>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2db      	uxtb	r3, r3
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004654:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40013c00 	.word	0x40013c00

08004678 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004680:	4a04      	ldr	r2, [pc, #16]	@ (8004694 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6153      	str	r3, [r2, #20]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40013c00 	.word	0x40013c00

08004698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <NMI_Handler+0x4>

080046a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <HardFault_Handler+0x4>

080046a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <MemManage_Handler+0x4>

080046b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <BusFault_Handler+0x4>

080046b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <UsageFault_Handler+0x4>

080046c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046ee:	f000 f9d7 	bl	8004aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80046f6:	b480      	push	{r7}
 80046f8:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80046fa:	bf00      	nop
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 800470a:	480e      	ldr	r0, [pc, #56]	@ (8004744 <USART1_IRQHandler+0x40>)
 800470c:	f7ff ff6f 	bl	80045ee <LL_USART_IsActiveFlag_RXNE>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <USART1_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 8004716:	480b      	ldr	r0, [pc, #44]	@ (8004744 <USART1_IRQHandler+0x40>)
 8004718:	f7ff ff7c 	bl	8004614 <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 800471c:	4809      	ldr	r0, [pc, #36]	@ (8004744 <USART1_IRQHandler+0x40>)
 800471e:	f7ff ff87 	bl	8004630 <LL_USART_ReceiveData8>
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 8004726:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <USART1_IRQHandler+0x44>)
 8004728:	7813      	ldrb	r3, [r2, #0]
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	7013      	strb	r3, [r2, #0]

		// IRQ2 수행
		RC_receiveIRQ2(uart1_rx_data);
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe f827 	bl	8002788 <RC_receiveIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40011000 	.word	0x40011000
 8004748:	2000044c 	.word	0x2000044c

0800474c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8004750:	480a      	ldr	r0, [pc, #40]	@ (800477c <USART2_IRQHandler+0x30>)
 8004752:	f7ff ff4c 	bl	80045ee <LL_USART_IsActiveFlag_RXNE>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 800475c:	4807      	ldr	r0, [pc, #28]	@ (800477c <USART2_IRQHandler+0x30>)
 800475e:	f7ff ff59 	bl	8004614 <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8004762:	4806      	ldr	r0, [pc, #24]	@ (800477c <USART2_IRQHandler+0x30>)
 8004764:	f7ff ff64 	bl	8004630 <LL_USART_ReceiveData8>
 8004768:	4603      	mov	r3, r0
 800476a:	461a      	mov	r2, r3
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <USART2_IRQHandler+0x34>)
 800476e:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <USART2_IRQHandler+0x38>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40004400 	.word	0x40004400
 8004780:	200004ef 	.word	0x200004ef
 8004784:	200004ee 	.word	0x200004ee

08004788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800478c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004790:	f7ff ff5c 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800479a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800479e:	f7ff ff6b 	bl	8004678 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
		// IRQ2 수행
	RC_receiveIRQ2(0);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f7fd fff0 	bl	8002788 <RC_receiveIRQ2>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 80047b0:	4807      	ldr	r0, [pc, #28]	@ (80047d0 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80047b2:	f7ff ff09 	bl	80045c8 <LL_TIM_IsActiveFlag_UPDATE>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 80047bc:	4804      	ldr	r0, [pc, #16]	@ (80047d0 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80047be:	f7ff fef5 	bl	80045ac <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 80047c2:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a02      	ldr	r2, [pc, #8]	@ (80047d4 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80047ca:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80047cc:	bf00      	nop
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	20000458 	.word	0x20000458

080047d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80047d8:	b5b0      	push	{r4, r5, r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 80047dc:	4809      	ldr	r0, [pc, #36]	@ (8004804 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80047de:	f7ff fef3 	bl	80045c8 <LL_TIM_IsActiveFlag_UPDATE>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	{
		LL_TIM_ClearFlag_UPDATE(TIM14);
 80047e8:	4806      	ldr	r0, [pc, #24]	@ (8004804 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80047ea:	f7ff fedf 	bl	80045ac <LL_TIM_ClearFlag_UPDATE>
		system_time.time_unix_usec++;
 80047ee:	4906      	ldr	r1, [pc, #24]	@ (8004808 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80047f0:	680a      	ldr	r2, [r1, #0]
 80047f2:	684b      	ldr	r3, [r1, #4]
 80047f4:	1c54      	adds	r4, r2, #1
 80047f6:	f143 0500 	adc.w	r5, r3, #0
 80047fa:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80047fc:	601c      	str	r4, [r3, #0]
 80047fe:	605d      	str	r5, [r3, #4]

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	bdb0      	pop	{r4, r5, r7, pc}
 8004804:	40002000 	.word	0x40002000
 8004808:	20000458 	.word	0x20000458

0800480c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004820:	4802      	ldr	r0, [pc, #8]	@ (800482c <OTG_FS_IRQHandler+0x10>)
 8004822:	f000 fd73 	bl	800530c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200019d8 	.word	0x200019d8

08004830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return 1;
 8004834:	2301      	movs	r3, #1
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_kill>:

int _kill(int pid, int sig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800484a:	f008 fd51 	bl	800d2f0 <__errno>
 800484e:	4603      	mov	r3, r0
 8004850:	2216      	movs	r2, #22
 8004852:	601a      	str	r2, [r3, #0]
  return -1;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_exit>:

void _exit (int status)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004868:	f04f 31ff 	mov.w	r1, #4294967295
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffe7 	bl	8004840 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <_exit+0x12>

08004876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e00a      	b.n	800489e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004888:	f3af 8000 	nop.w
 800488c:	4601      	mov	r1, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	60ba      	str	r2, [r7, #8]
 8004894:	b2ca      	uxtb	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	dbf0      	blt.n	8004888 <_read+0x12>
  }

  return len;
 80048a6:	687b      	ldr	r3, [r7, #4]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048d8:	605a      	str	r2, [r3, #4]
  return 0;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_isatty>:

int _isatty(int file)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048f0:	2301      	movs	r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004920:	4a14      	ldr	r2, [pc, #80]	@ (8004974 <_sbrk+0x5c>)
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <_sbrk+0x60>)
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800492c:	4b13      	ldr	r3, [pc, #76]	@ (800497c <_sbrk+0x64>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <_sbrk+0x64>)
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <_sbrk+0x68>)
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	d207      	bcs.n	8004958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004948:	f008 fcd2 	bl	800d2f0 <__errno>
 800494c:	4603      	mov	r3, r0
 800494e:	220c      	movs	r2, #12
 8004950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e009      	b.n	800496c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <_sbrk+0x64>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <_sbrk+0x64>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	4a05      	ldr	r2, [pc, #20]	@ (800497c <_sbrk+0x64>)
 8004968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20020000 	.word	0x20020000
 8004978:	00000400 	.word	0x00000400
 800497c:	200004f0 	.word	0x200004f0
 8004980:	20002228 	.word	0x20002228

08004984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <SystemInit+0x20>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	4a05      	ldr	r2, [pc, #20]	@ (80049a4 <SystemInit+0x20>)
 8004990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80049a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80049ac:	f7ff ffea 	bl	8004984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049b0:	480c      	ldr	r0, [pc, #48]	@ (80049e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049b2:	490d      	ldr	r1, [pc, #52]	@ (80049e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049b4:	4a0d      	ldr	r2, [pc, #52]	@ (80049ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b8:	e002      	b.n	80049c0 <LoopCopyDataInit>

080049ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049be:	3304      	adds	r3, #4

080049c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c4:	d3f9      	bcc.n	80049ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049c8:	4c0a      	ldr	r4, [pc, #40]	@ (80049f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049cc:	e001      	b.n	80049d2 <LoopFillZerobss>

080049ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d0:	3204      	adds	r2, #4

080049d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d4:	d3fb      	bcc.n	80049ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049d6:	f008 fc91 	bl	800d2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049da:	f7fe fe55 	bl	8003688 <main>
  bx  lr    
 80049de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80049e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80049ec:	0800f30c 	.word	0x0800f30c
  ldr r2, =_sbss
 80049f0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80049f4:	20002228 	.word	0x20002228

080049f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f8:	e7fe      	b.n	80049f8 <ADC_IRQHandler>
	...

080049fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a00:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <HAL_Init+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	@ (8004a3c <HAL_Init+0x40>)
 8004a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_Init+0x40>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_Init+0x40>)
 8004a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a18:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a07      	ldr	r2, [pc, #28]	@ (8004a3c <HAL_Init+0x40>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f000 f94f 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2a:	200f      	movs	r0, #15
 8004a2c:	f000 f808 	bl	8004a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a30:	f7ff fd94 	bl	800455c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a48:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_InitTick+0x54>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_InitTick+0x58>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f967 	bl	8004d32 <HAL_SYSTICK_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d80a      	bhi.n	8004a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f000 f92f 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a80:	4a06      	ldr	r2, [pc, #24]	@ (8004a9c <HAL_InitTick+0x5c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000000 	.word	0x20000000
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_IncTick+0x20>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000008 	.word	0x20000008
 8004ac4:	200004f4 	.word	0x200004f4

08004ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b03      	ldr	r3, [pc, #12]	@ (8004adc <HAL_GetTick+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200004f4 	.word	0x200004f4

08004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff ffee 	bl	8004ac8 <HAL_GetTick>
 8004aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d005      	beq.n	8004b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_Delay+0x44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b06:	bf00      	nop
 8004b08:	f7ff ffde 	bl	8004ac8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8f7      	bhi.n	8004b08 <HAL_Delay+0x28>
  {
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000008 	.word	0x20000008

08004b28 <__NVIC_SetPriorityGrouping>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b38:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_GetPriorityGrouping>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__NVIC_GetPriorityGrouping+0x18>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0307 	and.w	r3, r3, #7
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_EnableIRQ>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db0b      	blt.n	8004bb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <__NVIC_EnableIRQ+0x38>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2001      	movs	r0, #1
 8004bae:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	@ (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	@ (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	@ 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff8e 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff29 	bl	8004b28 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff3e 	bl	8004b70 <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff8e 	bl	8004c1c <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff5d 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff31 	bl	8004b8c <__NVIC_EnableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ffa2 	bl	8004c84 <SysTick_Config>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	@ 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e16b      	b.n	8005040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d68:	2201      	movs	r2, #1
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f040 815a 	bne.w	800503a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d005      	beq.n	8004d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d130      	bne.n	8004e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 0201 	and.w	r2, r3, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d017      	beq.n	8004e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	2203      	movs	r2, #3
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d123      	bne.n	8004e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	08da      	lsrs	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3208      	adds	r2, #8
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	08da      	lsrs	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3208      	adds	r2, #8
 8004e8a:	69b9      	ldr	r1, [r7, #24]
 8004e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0203 	and.w	r2, r3, #3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80b4 	beq.w	800503a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	4b60      	ldr	r3, [pc, #384]	@ (8005058 <HAL_GPIO_Init+0x30c>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	4a5f      	ldr	r2, [pc, #380]	@ (8005058 <HAL_GPIO_Init+0x30c>)
 8004edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8005058 <HAL_GPIO_Init+0x30c>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eee:	4a5b      	ldr	r2, [pc, #364]	@ (800505c <HAL_GPIO_Init+0x310>)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a52      	ldr	r2, [pc, #328]	@ (8005060 <HAL_GPIO_Init+0x314>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02b      	beq.n	8004f72 <HAL_GPIO_Init+0x226>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a51      	ldr	r2, [pc, #324]	@ (8005064 <HAL_GPIO_Init+0x318>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d025      	beq.n	8004f6e <HAL_GPIO_Init+0x222>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a50      	ldr	r2, [pc, #320]	@ (8005068 <HAL_GPIO_Init+0x31c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01f      	beq.n	8004f6a <HAL_GPIO_Init+0x21e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4f      	ldr	r2, [pc, #316]	@ (800506c <HAL_GPIO_Init+0x320>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d019      	beq.n	8004f66 <HAL_GPIO_Init+0x21a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a4e      	ldr	r2, [pc, #312]	@ (8005070 <HAL_GPIO_Init+0x324>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_GPIO_Init+0x216>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8005074 <HAL_GPIO_Init+0x328>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00d      	beq.n	8004f5e <HAL_GPIO_Init+0x212>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a4c      	ldr	r2, [pc, #304]	@ (8005078 <HAL_GPIO_Init+0x32c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <HAL_GPIO_Init+0x20e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800507c <HAL_GPIO_Init+0x330>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <HAL_GPIO_Init+0x20a>
 8004f52:	2307      	movs	r3, #7
 8004f54:	e00e      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f56:	2308      	movs	r3, #8
 8004f58:	e00c      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f5a:	2306      	movs	r3, #6
 8004f5c:	e00a      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f5e:	2305      	movs	r3, #5
 8004f60:	e008      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f62:	2304      	movs	r3, #4
 8004f64:	e006      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f66:	2303      	movs	r3, #3
 8004f68:	e004      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e002      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_GPIO_Init+0x228>
 8004f72:	2300      	movs	r3, #0
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	f002 0203 	and.w	r2, r2, #3
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	4093      	lsls	r3, r2
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f84:	4935      	ldr	r1, [pc, #212]	@ (800505c <HAL_GPIO_Init+0x310>)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fb6:	4a32      	ldr	r2, [pc, #200]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fbc:	4b30      	ldr	r3, [pc, #192]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fe0:	4a27      	ldr	r2, [pc, #156]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fe6:	4b26      	ldr	r3, [pc, #152]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800500a:	4a1d      	ldr	r2, [pc, #116]	@ (8005080 <HAL_GPIO_Init+0x334>)
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005010:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005034:	4a12      	ldr	r2, [pc, #72]	@ (8005080 <HAL_GPIO_Init+0x334>)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3301      	adds	r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b0f      	cmp	r3, #15
 8005044:	f67f ae90 	bls.w	8004d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	3724      	adds	r7, #36	@ 0x24
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	40013800 	.word	0x40013800
 8005060:	40020000 	.word	0x40020000
 8005064:	40020400 	.word	0x40020400
 8005068:	40020800 	.word	0x40020800
 800506c:	40020c00 	.word	0x40020c00
 8005070:	40021000 	.word	0x40021000
 8005074:	40021400 	.word	0x40021400
 8005078:	40021800 	.word	0x40021800
 800507c:	40021c00 	.word	0x40021c00
 8005080:	40013c00 	.word	0x40013c00

08005084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e101      	b.n	800529a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f006 ff5d 	bl	800bf70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050c4:	d102      	bne.n	80050cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f003 fb36 	bl	8008742 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7c1a      	ldrb	r2, [r3, #16]
 80050de:	f88d 2000 	strb.w	r2, [sp]
 80050e2:	3304      	adds	r3, #4
 80050e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e6:	f003 fa15 	bl	8008514 <USB_CoreInit>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0ce      	b.n	800529a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f003 fb2e 	bl	8008764 <USB_SetCurrentMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0bf      	b.n	800529a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
 800511e:	e04a      	b.n	80051b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005120:	7bfa      	ldrb	r2, [r7, #15]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	3315      	adds	r3, #21
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	3314      	adds	r3, #20
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	b298      	uxth	r0, r3
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	332e      	adds	r3, #46	@ 0x2e
 800515c:	4602      	mov	r2, r0
 800515e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3318      	adds	r3, #24
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	331c      	adds	r3, #28
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005188:	7bfa      	ldrb	r2, [r7, #15]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	3320      	adds	r3, #32
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800519c:	7bfa      	ldrb	r2, [r7, #15]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	3324      	adds	r3, #36	@ 0x24
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	3301      	adds	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3af      	bcc.n	8005120 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e044      	b.n	8005250 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005208:	7bfa      	ldrb	r2, [r7, #15]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3301      	adds	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	791b      	ldrb	r3, [r3, #4]
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3b5      	bcc.n	80051c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7c1a      	ldrb	r2, [r3, #16]
 8005262:	f88d 2000 	strb.w	r2, [sp]
 8005266:	3304      	adds	r3, #4
 8005268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800526a:	f003 fac7 	bl	80087fc <USB_DevInit>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e00c      	b.n	800529a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f004 fb11 	bl	80098ba <USB_DevDisconnect>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_PCD_Start+0x1c>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e022      	b.n	8005304 <HAL_PCD_Start+0x62>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f003 fa18 	bl	8008720 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fabf 	bl	8009878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b08d      	sub	sp, #52	@ 0x34
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f004 fb7d 	bl	8009a22 <USB_GetMode>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 848c 	bne.w	8005c48 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f004 fae1 	bl	80098fc <USB_ReadInterrupts>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8482 	beq.w	8005c46 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f004 face 	bl	80098fc <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d107      	bne.n	800537a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f002 0202 	and.w	r2, r2, #2
 8005378:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f004 fabc 	bl	80098fc <USB_ReadInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d161      	bne.n	8005452 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0210 	bic.w	r2, r2, #16
 800539c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	3304      	adds	r3, #4
 80053bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80053c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c8:	d124      	bne.n	8005414 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d035      	beq.n	8005442 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	6a38      	ldr	r0, [r7, #32]
 80053ea:	f004 f8f3 	bl	80095d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053fa:	441a      	add	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800540c:	441a      	add	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	615a      	str	r2, [r3, #20]
 8005412:	e016      	b.n	8005442 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800541a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800541e:	d110      	bne.n	8005442 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005426:	2208      	movs	r2, #8
 8005428:	4619      	mov	r1, r3
 800542a:	6a38      	ldr	r0, [r7, #32]
 800542c:	f004 f8d2 	bl	80095d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543c:	441a      	add	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0210 	orr.w	r2, r2, #16
 8005450:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f004 fa50 	bl	80098fc <USB_ReadInterrupts>
 800545c:	4603      	mov	r3, r0
 800545e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005462:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005466:	f040 80a7 	bne.w	80055b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f004 fa55 	bl	8009922 <USB_ReadDevAllOutEpInterrupt>
 8005478:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800547a:	e099      	b.n	80055b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 808e 	beq.w	80055a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f004 fa79 	bl	800998a <USB_ReadDevOutEPInterrupt>
 8005498:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2301      	movs	r3, #1
 80054b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80054b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fea3 	bl	8006204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	2308      	movs	r3, #8
 80054d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 ff79 	bl	80063d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	2310      	movs	r3, #16
 80054fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d030      	beq.n	800556a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005510:	2b80      	cmp	r3, #128	@ 0x80
 8005512:	d109      	bne.n	8005528 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005522:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005526:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	3304      	adds	r3, #4
 800553c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d108      	bne.n	8005558 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	b2db      	uxtb	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f006 fe12 	bl	800c17c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	2302      	movs	r3, #2
 8005568:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	2320      	movs	r3, #32
 8005584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	3301      	adds	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f47f af62 	bne.w	800547c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f004 f99d 	bl	80098fc <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055cc:	f040 80db 	bne.w	8005786 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f004 f9be 	bl	8009956 <USB_ReadDevAllInEpInterrupt>
 80055da:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80055e0:	e0cd      	b.n	800577e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80c2 	beq.w	8005772 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f004 f9e4 	bl	80099c6 <USB_ReadDevInEPInterrupt>
 80055fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d057      	beq.n	80056ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2201      	movs	r2, #1
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	43db      	mvns	r3, r3
 8005624:	69f9      	ldr	r1, [r7, #28]
 8005626:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800562a:	4013      	ands	r3, r2
 800562c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	2301      	movs	r3, #1
 800563e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	799b      	ldrb	r3, [r3, #6]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d132      	bne.n	80056ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3320      	adds	r3, #32
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4403      	add	r3, r0
 8005668:	331c      	adds	r3, #28
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4419      	add	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	3320      	adds	r3, #32
 800567e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d113      	bne.n	80056ae <HAL_PCD_IRQHandler+0x3a2>
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056a6:	461a      	mov	r2, r3
 80056a8:	2101      	movs	r1, #1
 80056aa:	f004 f9eb 	bl	8009a84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f006 fcdc 	bl	800c072 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	461a      	mov	r2, r3
 80056d2:	2308      	movs	r3, #8
 80056d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	2310      	movs	r3, #16
 80056f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005708:	461a      	mov	r2, r3
 800570a:	2340      	movs	r3, #64	@ 0x40
 800570c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005718:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800571a:	6a38      	ldr	r0, [r7, #32]
 800571c:	f003 f9d2 	bl	8008ac4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	3310      	adds	r3, #16
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	3304      	adds	r3, #4
 8005732:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	78db      	ldrb	r3, [r3, #3]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d108      	bne.n	800574e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	b2db      	uxtb	r3, r3
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f006 fd29 	bl	800c1a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	461a      	mov	r2, r3
 800575c:	2302      	movs	r3, #2
 800575e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800576a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fcbd 	bl	80060ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	3301      	adds	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	f47f af2e 	bne.w	80055e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f004 f8b6 	bl	80098fc <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579a:	d122      	bne.n	80057e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d108      	bne.n	80057cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057c2:	2100      	movs	r1, #0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fea3 	bl	8006510 <HAL_PCDEx_LPM_Callback>
 80057ca:	e002      	b.n	80057d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f006 fcc7 	bl	800c160 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695a      	ldr	r2, [r3, #20]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80057e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f004 f888 	bl	80098fc <USB_ReadInterrupts>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f6:	d112      	bne.n	800581e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f006 fc83 	bl	800c114 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800581c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f004 f86a 	bl	80098fc <USB_ReadInterrupts>
 8005828:	4603      	mov	r3, r0
 800582a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	f040 80b7 	bne.w	80059a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2110      	movs	r1, #16
 8005850:	4618      	mov	r0, r3
 8005852:	f003 f937 	bl	8008ac4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800585a:	e046      	b.n	80058ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800586e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800588e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589c:	461a      	mov	r2, r3
 800589e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	3301      	adds	r3, #1
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d3b2      	bcc.n	800585c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005904:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005908:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7bdb      	ldrb	r3, [r3, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005922:	f043 030b 	orr.w	r3, r3, #11
 8005926:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005938:	f043 030b 	orr.w	r3, r3, #11
 800593c:	6453      	str	r3, [r2, #68]	@ 0x44
 800593e:	e015      	b.n	800596c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800594e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005952:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005956:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005966:	f043 030b 	orr.w	r3, r3, #11
 800596a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800597a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800597e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800598e:	461a      	mov	r2, r3
 8005990:	f004 f878 	bl	8009a84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80059a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f003 ffa7 	bl	80098fc <USB_ReadInterrupts>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b8:	d123      	bne.n	8005a02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f004 f83d 	bl	8009a3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f003 f8f4 	bl	8008bb6 <USB_GetDevSpeed>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681c      	ldr	r4, [r3, #0]
 80059da:	f001 fa07 	bl	8006dec <HAL_RCC_GetHCLKFreq>
 80059de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059e4:	461a      	mov	r2, r3
 80059e6:	4620      	mov	r0, r4
 80059e8:	f002 fdf8 	bl	80085dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f006 fb68 	bl	800c0c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f003 ff78 	bl	80098fc <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d10a      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f006 fb45 	bl	800c0a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f002 0208 	and.w	r2, r2, #8
 8005a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f003 ff63 	bl	80098fc <USB_ReadInterrupts>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3c:	2b80      	cmp	r3, #128	@ 0x80
 8005a3e:	d123      	bne.n	8005a88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a50:	e014      	b.n	8005a7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fb0a 	bl	800608a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	3301      	adds	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	791b      	ldrb	r3, [r3, #4]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d3e4      	bcc.n	8005a52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f003 ff35 	bl	80098fc <USB_ReadInterrupts>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9c:	d13c      	bne.n	8005b18 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	e02b      	b.n	8005afc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d115      	bne.n	8005af6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005aca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da12      	bge.n	8005af6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3317      	adds	r3, #23
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 faca 	bl	800608a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	3301      	adds	r3, #1
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	791b      	ldrb	r3, [r3, #4]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d3cd      	bcc.n	8005aa4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f003 feed 	bl	80098fc <USB_ReadInterrupts>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b2c:	d156      	bne.n	8005bdc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b2e:	2301      	movs	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b32:	e045      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d12e      	bne.n	8005bba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da2b      	bge.n	8005bba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005b6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d121      	bne.n	8005bba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bb6:	6053      	str	r3, [r2, #4]
            break;
 8005bb8:	e008      	b.n	8005bcc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	791b      	ldrb	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d3b3      	bcc.n	8005b34 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 fe8b 	bl	80098fc <USB_ReadInterrupts>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf0:	d10a      	bne.n	8005c08 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f006 fae6 	bl	800c1c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f003 fe75 	bl	80098fc <USB_ReadInterrupts>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d115      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f006 fad6 	bl	800c1e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	e000      	b.n	8005c48 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005c46:	bf00      	nop
    }
  }
}
 8005c48:	3734      	adds	r7, #52	@ 0x34
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}

08005c4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_PCD_SetAddress+0x1a>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e012      	b.n	8005c8e <HAL_PCD_SetAddress+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f003 fdd4 	bl	800982c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	70fb      	strb	r3, [r7, #3]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	803b      	strh	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0f      	bge.n	8005cdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3310      	adds	r3, #16
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	705a      	strb	r2, [r3, #1]
 8005cda:	e00f      	b.n	8005cfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005d08:	883b      	ldrh	r3, [r7, #0]
 8005d0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	78ba      	ldrb	r2, [r7, #2]
 8005d16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d2a:	78bb      	ldrb	r3, [r7, #2]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d102      	bne.n	8005d36 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_PCD_EP_Open+0xae>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e00e      	b.n	8005d62 <HAL_PCD_EP_Open+0xcc>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 ff54 	bl	8008c00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da0f      	bge.n	8005d9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	705a      	strb	r2, [r3, #1]
 8005d9c:	e00f      	b.n	8005dbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_PCD_EP_Close+0x6e>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e00e      	b.n	8005df6 <HAL_PCD_EP_Close+0x8c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68f9      	ldr	r1, [r7, #12]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f002 ff92 	bl	8008d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2200      	movs	r2, #0
 8005e38:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	799b      	ldrb	r3, [r3, #6]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	799b      	ldrb	r3, [r3, #6]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	f003 f82f 	bl	8008ec8 <USB_EPStartXfer>

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	f003 020f 	and.w	r2, r3, #15
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb4:	7afb      	ldrb	r3, [r7, #11]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	3310      	adds	r3, #16
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2200      	movs	r2, #0
 8005edc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	799b      	ldrb	r3, [r3, #6]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d102      	bne.n	8005efe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	799b      	ldrb	r3, [r3, #6]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6979      	ldr	r1, [r7, #20]
 8005f0a:	f002 ffdd 	bl	8008ec8 <USB_EPStartXfer>

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	7912      	ldrb	r2, [r2, #4]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e04f      	b.n	8005fd6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0f      	bge.n	8005f5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	705a      	strb	r2, [r3, #1]
 8005f5c:	e00d      	b.n	8005f7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4413      	add	r3, r2
 8005f70:	3304      	adds	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_PCD_EP_SetStall+0x82>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e01d      	b.n	8005fd6 <HAL_PCD_EP_SetStall+0xbe>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 fb6b 	bl	8009684 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7999      	ldrb	r1, [r3, #6]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f003 fd5c 	bl	8009a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7912      	ldrb	r2, [r2, #4]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e042      	b.n	8006082 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da0f      	bge.n	8006024 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	3310      	adds	r3, #16
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	3304      	adds	r3, #4
 800601a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	705a      	strb	r2, [r3, #1]
 8006022:	e00f      	b.n	8006044 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	3304      	adds	r3, #4
 800603c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_PCD_EP_ClrStall+0x86>
 8006060:	2302      	movs	r3, #2
 8006062:	e00e      	b.n	8006082 <HAL_PCD_EP_ClrStall+0xa4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	4618      	mov	r0, r3
 8006074:	f003 fb74 	bl	8009760 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0c      	bge.n	80060b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3310      	adds	r3, #16
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e00c      	b.n	80060d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	4618      	mov	r0, r3
 80060da:	f003 f993 	bl	8009404 <USB_EPStopXfer>
 80060de:	4603      	mov	r3, r0
 80060e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	@ 0x28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	3310      	adds	r3, #16
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	3304      	adds	r3, #4
 8006112:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d901      	bls.n	8006124 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e06b      	b.n	80061fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	429a      	cmp	r2, r3
 8006138:	d902      	bls.n	8006140 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3303      	adds	r3, #3
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006148:	e02a      	b.n	80061a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	429a      	cmp	r2, r3
 800615e:	d902      	bls.n	8006166 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3303      	adds	r3, #3
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4603      	mov	r3, r0
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f003 f9e8 	bl	8009558 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	441a      	add	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d809      	bhi.n	80061ca <PCD_WriteEmptyTxFifo+0xde>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1bf      	bne.n	800614a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d811      	bhi.n	80061fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2201      	movs	r2, #1
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	43db      	mvns	r3, r3
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061f6:	4013      	ands	r3, r2
 80061f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	333c      	adds	r3, #60	@ 0x3c
 800621c:	3304      	adds	r3, #4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	799b      	ldrb	r3, [r3, #6]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d17b      	bne.n	8006332 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d015      	beq.n	8006270 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4a61      	ldr	r2, [pc, #388]	@ (80063cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	f240 80b9 	bls.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80b3 	beq.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626c:	6093      	str	r3, [r2, #8]
 800626e:	e0a7      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006286:	461a      	mov	r2, r3
 8006288:	2320      	movs	r3, #32
 800628a:	6093      	str	r3, [r2, #8]
 800628c:	e098      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 8093 	bne.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4a4b      	ldr	r2, [pc, #300]	@ (80063cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d90f      	bls.n	80062c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	6093      	str	r3, [r2, #8]
 80062c0:	e07e      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	3304      	adds	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	0159      	lsls	r1, r3, #5
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	440b      	add	r3, r1
 80062e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d114      	bne.n	8006324 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800630c:	461a      	mov	r2, r3
 800630e:	2101      	movs	r1, #1
 8006310:	f003 fbb8 	bl	8009a84 <USB_EP0_OutStart>
 8006314:	e006      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f005 fe86 	bl	800c03c <HAL_PCD_DataOutStageCallback>
 8006330:	e046      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	4a26      	ldr	r2, [pc, #152]	@ (80063d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d124      	bne.n	8006384 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006356:	6093      	str	r3, [r2, #8]
 8006358:	e032      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006370:	461a      	mov	r2, r3
 8006372:	2320      	movs	r3, #32
 8006374:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f005 fe5d 	bl	800c03c <HAL_PCD_DataOutStageCallback>
 8006382:	e01d      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d114      	bne.n	80063b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063ac:	461a      	mov	r2, r3
 80063ae:	2100      	movs	r1, #0
 80063b0:	f003 fb68 	bl	8009a84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f005 fe3e 	bl	800c03c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	4f54300a 	.word	0x4f54300a
 80063d0:	4f54310a 	.word	0x4f54310a

080063d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	333c      	adds	r3, #60	@ 0x3c
 80063ec:	3304      	adds	r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a15      	ldr	r2, [pc, #84]	@ (800645c <PCD_EP_OutSetupPacket_int+0x88>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d90e      	bls.n	8006428 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006426:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f005 fdf5 	bl	800c018 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <PCD_EP_OutSetupPacket_int+0x88>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d90c      	bls.n	8006450 <PCD_EP_OutSetupPacket_int+0x7c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	799b      	ldrb	r3, [r3, #6]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d108      	bne.n	8006450 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006448:	461a      	mov	r2, r3
 800644a:	2101      	movs	r1, #1
 800644c:	f003 fb1a 	bl	8009a84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	4f54300a 	.word	0x4f54300a

08006460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
 800646c:	4613      	mov	r3, r2
 800646e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800647e:	883b      	ldrh	r3, [r7, #0]
 8006480:	0419      	lsls	r1, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	430a      	orrs	r2, r1
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28
 800648c:	e028      	b.n	80064e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e00d      	b.n	80064be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	3340      	adds	r3, #64	@ 0x40
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	3301      	adds	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
 80064be:	7bfa      	ldrb	r2, [r7, #15]
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d3ec      	bcc.n	80064a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80064c8:	883b      	ldrh	r3, [r7, #0]
 80064ca:	0418      	lsls	r0, r3, #16
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4302      	orrs	r2, r0
 80064d8:	3340      	adds	r3, #64	@ 0x40
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	887a      	ldrh	r2, [r7, #2]
 8006500:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e267      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d075      	beq.n	8006632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006546:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00c      	beq.n	800656c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006552:	4b85      	ldr	r3, [pc, #532]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800655a:	2b08      	cmp	r3, #8
 800655c:	d112      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800655e:	4b82      	ldr	r3, [pc, #520]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656a:	d10b      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656c:	4b7e      	ldr	r3, [pc, #504]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05b      	beq.n	8006630 <HAL_RCC_OscConfig+0x108>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d157      	bne.n	8006630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e242      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658c:	d106      	bne.n	800659c <HAL_RCC_OscConfig+0x74>
 800658e:	4b76      	ldr	r3, [pc, #472]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a75      	ldr	r2, [pc, #468]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e01d      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x98>
 80065a6:	4b70      	ldr	r3, [pc, #448]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6f      	ldr	r2, [pc, #444]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6c      	ldr	r2, [pc, #432]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e00b      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 80065c0:	4b69      	ldr	r3, [pc, #420]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a68      	ldr	r2, [pc, #416]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a65      	ldr	r2, [pc, #404]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fe fa72 	bl	8004ac8 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065e8:	f7fe fa6e 	bl	8004ac8 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	@ 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e207      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0xc0>
 8006606:	e014      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006608:	f7fe fa5e 	bl	8004ac8 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006610:	f7fe fa5a 	bl	8004ac8 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e1f3      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006622:	4b51      	ldr	r3, [pc, #324]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0xe8>
 800662e:	e000      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d063      	beq.n	8006706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800663e:	4b4a      	ldr	r3, [pc, #296]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800664a:	4b47      	ldr	r3, [pc, #284]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006652:	2b08      	cmp	r3, #8
 8006654:	d11c      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006656:	4b44      	ldr	r3, [pc, #272]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d116      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006662:	4b41      	ldr	r3, [pc, #260]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e1c7      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800667a:	4b3b      	ldr	r3, [pc, #236]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4937      	ldr	r1, [pc, #220]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800668e:	e03a      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d020      	beq.n	80066da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006698:	4b34      	ldr	r3, [pc, #208]	@ (800676c <HAL_RCC_OscConfig+0x244>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669e:	f7fe fa13 	bl	8004ac8 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a6:	f7fe fa0f 	bl	8004ac8 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e1a8      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c4:	4b28      	ldr	r3, [pc, #160]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4925      	ldr	r1, [pc, #148]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]
 80066d8:	e015      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066da:	4b24      	ldr	r3, [pc, #144]	@ (800676c <HAL_RCC_OscConfig+0x244>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fe f9f2 	bl	8004ac8 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fe f9ee 	bl	8004ac8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e187      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d036      	beq.n	8006780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800671a:	4b15      	ldr	r3, [pc, #84]	@ (8006770 <HAL_RCC_OscConfig+0x248>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006720:	f7fe f9d2 	bl	8004ac8 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006728:	f7fe f9ce 	bl	8004ac8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e167      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800673a:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800673c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x200>
 8006746:	e01b      	b.n	8006780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006748:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <HAL_RCC_OscConfig+0x248>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674e:	f7fe f9bb 	bl	8004ac8 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006754:	e00e      	b.n	8006774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006756:	f7fe f9b7 	bl	8004ac8 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d907      	bls.n	8006774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e150      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006768:	40023800 	.word	0x40023800
 800676c:	42470000 	.word	0x42470000
 8006770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006774:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ea      	bne.n	8006756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8097 	beq.w	80068bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006792:	4b81      	ldr	r3, [pc, #516]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	2300      	movs	r3, #0
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067be:	4b77      	ldr	r3, [pc, #476]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d118      	bne.n	80067fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ca:	4b74      	ldr	r3, [pc, #464]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067d6:	f7fe f977 	bl	8004ac8 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7fe f973 	bl	8004ac8 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e10c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f0:	4b6a      	ldr	r3, [pc, #424]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d106      	bne.n	8006812 <HAL_RCC_OscConfig+0x2ea>
 8006804:	4b64      	ldr	r3, [pc, #400]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	4a63      	ldr	r2, [pc, #396]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006810:	e01c      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b05      	cmp	r3, #5
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0x30c>
 800681a:	4b5f      	ldr	r3, [pc, #380]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681e:	4a5e      	ldr	r2, [pc, #376]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	6713      	str	r3, [r2, #112]	@ 0x70
 8006826:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682a:	4a5b      	ldr	r2, [pc, #364]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6713      	str	r3, [r2, #112]	@ 0x70
 8006832:	e00b      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006834:	4b58      	ldr	r3, [pc, #352]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006838:	4a57      	ldr	r2, [pc, #348]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006840:	4b55      	ldr	r3, [pc, #340]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006844:	4a54      	ldr	r2, [pc, #336]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006846:	f023 0304 	bic.w	r3, r3, #4
 800684a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fe f938 	bl	8004ac8 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685a:	e00a      	b.n	8006872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685c:	f7fe f934 	bl	8004ac8 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e0cb      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006872:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ee      	beq.n	800685c <HAL_RCC_OscConfig+0x334>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006880:	f7fe f922 	bl	8004ac8 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006886:	e00a      	b.n	800689e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006888:	f7fe f91e 	bl	8004ac8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e0b5      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800689e:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ee      	bne.n	8006888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b0:	4b39      	ldr	r3, [pc, #228]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	4a38      	ldr	r2, [pc, #224]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a1 	beq.w	8006a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068c6:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d05c      	beq.n	800698c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d141      	bne.n	800695e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068da:	4b31      	ldr	r3, [pc, #196]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fe f8f2 	bl	8004ac8 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e8:	f7fe f8ee 	bl	8004ac8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e087      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	3b01      	subs	r3, #1
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	491b      	ldr	r1, [pc, #108]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006930:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006936:	f7fe f8c7 	bl	8004ac8 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693e:	f7fe f8c3 	bl	8004ac8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e05c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x416>
 800695c:	e054      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fe f8b0 	bl	8004ac8 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fe f8ac 	bl	8004ac8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e045      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x444>
 800698a:	e03d      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e038      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006998:	40023800 	.word	0x40023800
 800699c:	40007000 	.word	0x40007000
 80069a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x4ec>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d028      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069bc:	429a      	cmp	r2, r3
 80069be:	d121      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d11a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069dc:	4293      	cmp	r3, r2
 80069de:	d111      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	3b01      	subs	r3, #1
 80069ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d107      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800

08006a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0cc      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b68      	ldr	r3, [pc, #416]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d90c      	bls.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b65      	ldr	r3, [pc, #404]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a42:	4b63      	ldr	r3, [pc, #396]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0b8      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a6c:	4b59      	ldr	r3, [pc, #356]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a58      	ldr	r2, [pc, #352]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a84:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a52      	ldr	r2, [pc, #328]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4b50      	ldr	r3, [pc, #320]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	494d      	ldr	r1, [pc, #308]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d044      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	4b47      	ldr	r3, [pc, #284]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d119      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e07f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e06f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e067      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006af6:	4b37      	ldr	r3, [pc, #220]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 0203 	bic.w	r2, r3, #3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4934      	ldr	r1, [pc, #208]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b08:	f7fd ffde 	bl	8004ac8 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b10:	f7fd ffda 	bl	8004ac8 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e04f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b26:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 020c 	and.w	r2, r3, #12
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1eb      	bne.n	8006b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b38:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20c      	bcs.n	8006b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b46:	4b22      	ldr	r3, [pc, #136]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4e:	4b20      	ldr	r3, [pc, #128]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e032      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b6c:	4b19      	ldr	r3, [pc, #100]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4916      	ldr	r1, [pc, #88]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b8a:	4b12      	ldr	r3, [pc, #72]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	490e      	ldr	r1, [pc, #56]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b9e:	f000 f821 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	490a      	ldr	r1, [pc, #40]	@ (8006bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb0:	5ccb      	ldrb	r3, [r1, r3]
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	4a09      	ldr	r2, [pc, #36]	@ (8006bdc <HAL_RCC_ClockConfig+0x1c4>)
 8006bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bba:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd ff3e 	bl	8004a40 <HAL_InitTick>

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40023c00 	.word	0x40023c00
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	0800ef6c 	.word	0x0800ef6c
 8006bdc:	20000000 	.word	0x20000000
 8006be0:	20000004 	.word	0x20000004

08006be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b094      	sub	sp, #80	@ 0x50
 8006bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bfc:	4b79      	ldr	r3, [pc, #484]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 030c 	and.w	r3, r3, #12
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d00d      	beq.n	8006c24 <HAL_RCC_GetSysClockFreq+0x40>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	f200 80e1 	bhi.w	8006dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x34>
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d003      	beq.n	8006c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c16:	e0db      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c18:	4b73      	ldr	r3, [pc, #460]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c1c:	e0db      	b.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c1e:	4b72      	ldr	r3, [pc, #456]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c22:	e0d8      	b.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c24:	4b6f      	ldr	r3, [pc, #444]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d063      	beq.n	8006d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	099b      	lsrs	r3, r3, #6
 8006c40:	2200      	movs	r2, #0
 8006c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c4e:	2300      	movs	r3, #0
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c56:	4622      	mov	r2, r4
 8006c58:	462b      	mov	r3, r5
 8006c5a:	f04f 0000 	mov.w	r0, #0
 8006c5e:	f04f 0100 	mov.w	r1, #0
 8006c62:	0159      	lsls	r1, r3, #5
 8006c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c68:	0150      	lsls	r0, r2, #5
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4621      	mov	r1, r4
 8006c70:	1a51      	subs	r1, r2, r1
 8006c72:	6139      	str	r1, [r7, #16]
 8006c74:	4629      	mov	r1, r5
 8006c76:	eb63 0301 	sbc.w	r3, r3, r1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c88:	4659      	mov	r1, fp
 8006c8a:	018b      	lsls	r3, r1, #6
 8006c8c:	4651      	mov	r1, sl
 8006c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c92:	4651      	mov	r1, sl
 8006c94:	018a      	lsls	r2, r1, #6
 8006c96:	4651      	mov	r1, sl
 8006c98:	ebb2 0801 	subs.w	r8, r2, r1
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb6:	4690      	mov	r8, r2
 8006cb8:	4699      	mov	r9, r3
 8006cba:	4623      	mov	r3, r4
 8006cbc:	eb18 0303 	adds.w	r3, r8, r3
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	eb49 0303 	adc.w	r3, r9, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	028b      	lsls	r3, r1, #10
 8006cda:	4621      	mov	r1, r4
 8006cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	028a      	lsls	r2, r1, #10
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cea:	2200      	movs	r2, #0
 8006cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cf4:	f7f9 ff78 	bl	8000be8 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d00:	e058      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d02:	4b38      	ldr	r3, [pc, #224]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	2300      	movs	r3, #0
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d1c:	4642      	mov	r2, r8
 8006d1e:	464b      	mov	r3, r9
 8006d20:	f04f 0000 	mov.w	r0, #0
 8006d24:	f04f 0100 	mov.w	r1, #0
 8006d28:	0159      	lsls	r1, r3, #5
 8006d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d2e:	0150      	lsls	r0, r2, #5
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4641      	mov	r1, r8
 8006d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d54:	ebb2 040a 	subs.w	r4, r2, sl
 8006d58:	eb63 050b 	sbc.w	r5, r3, fp
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	00eb      	lsls	r3, r5, #3
 8006d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d6a:	00e2      	lsls	r2, r4, #3
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	4643      	mov	r3, r8
 8006d72:	18e3      	adds	r3, r4, r3
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	464b      	mov	r3, r9
 8006d78:	eb45 0303 	adc.w	r3, r5, r3
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	028b      	lsls	r3, r1, #10
 8006d8e:	4621      	mov	r1, r4
 8006d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d94:	4621      	mov	r1, r4
 8006d96:	028a      	lsls	r2, r1, #10
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9e:	2200      	movs	r2, #0
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	61fa      	str	r2, [r7, #28]
 8006da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da8:	f7f9 ff1e 	bl	8000be8 <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4613      	mov	r3, r2
 8006db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006db4:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dce:	e002      	b.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dd0:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3750      	adds	r7, #80	@ 0x50
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800
 8006de8:	00f42400 	.word	0x00f42400

08006dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006df0:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000000 	.word	0x20000000

08006e04 <LL_ADC_REG_SetSequencerLength>:
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2301      	moveq	r3, #1
 8006e40:	2300      	movne	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8006e5e:	481c      	ldr	r0, [pc, #112]	@ (8006ed0 <LL_ADC_CommonInit+0x80>)
 8006e60:	f7ff ffe3 	bl	8006e2a <LL_ADC_IsEnabled>
 8006e64:	4604      	mov	r4, r0
 8006e66:	481b      	ldr	r0, [pc, #108]	@ (8006ed4 <LL_ADC_CommonInit+0x84>)
 8006e68:	f7ff ffdf 	bl	8006e2a <LL_ADC_IsEnabled>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	431c      	orrs	r4, r3
 8006e70:	4819      	ldr	r0, [pc, #100]	@ (8006ed8 <LL_ADC_CommonInit+0x88>)
 8006e72:	f7ff ffda 	bl	8006e2a <LL_ADC_IsEnabled>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4323      	orrs	r3, r4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d120      	bne.n	8006ec0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d012      	beq.n	8006eac <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	4b14      	ldr	r3, [pc, #80]	@ (8006edc <LL_ADC_CommonInit+0x8c>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	6811      	ldr	r1, [r2, #0]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6852      	ldr	r2, [r2, #4]
 8006e96:	4311      	orrs	r1, r2
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	6892      	ldr	r2, [r2, #8]
 8006e9c:	4311      	orrs	r1, r2
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	68d2      	ldr	r2, [r2, #12]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]
 8006eaa:	e00b      	b.n	8006ec4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <LL_ADC_CommonInit+0x8c>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	e001      	b.n	8006ec4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd90      	pop	{r4, r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40012000 	.word	0x40012000
 8006ed4:	40012100 	.word	0x40012100
 8006ed8:	40012200 	.word	0x40012200
 8006edc:	fffc10e0 	.word	0xfffc10e0

08006ee0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ff9b 	bl	8006e2a <LL_ADC_IsEnabled>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d117      	bne.n	8006f2a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	6811      	ldr	r1, [r2, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	6892      	ldr	r2, [r2, #8]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	e001      	b.n	8006f2e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ff6f 	bl	8006e2a <LL_ADC_IsEnabled>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d12b      	bne.n	8006faa <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	605a      	str	r2, [r3, #4]
 8006f6c:	e005      	b.n	8006f7a <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <LL_ADC_REG_Init+0x80>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	68d2      	ldr	r2, [r2, #12]
 8006f8e:	4311      	orrs	r1, r2
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	6912      	ldr	r2, [r2, #16]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff ff2e 	bl	8006e04 <LL_ADC_REG_SetSequencerLength>
 8006fa8:	e001      	b.n	8006fae <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	c0fffcfd 	.word	0xc0fffcfd

08006fbc <LL_EXTI_EnableIT_0_31>:
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006fc4:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <LL_EXTI_EnableIT_0_31+0x20>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4904      	ldr	r1, [pc, #16]	@ (8006fdc <LL_EXTI_EnableIT_0_31+0x20>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	600b      	str	r3, [r1, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40013c00 	.word	0x40013c00

08006fe0 <LL_EXTI_DisableIT_0_31>:
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006fe8:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <LL_EXTI_DisableIT_0_31+0x24>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	43db      	mvns	r3, r3
 8006ff0:	4904      	ldr	r1, [pc, #16]	@ (8007004 <LL_EXTI_DisableIT_0_31+0x24>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40013c00 	.word	0x40013c00

08007008 <LL_EXTI_EnableEvent_0_31>:
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	4904      	ldr	r1, [pc, #16]	@ (8007028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4313      	orrs	r3, r2
 800701a:	604b      	str	r3, [r1, #4]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40013c00 	.word	0x40013c00

0800702c <LL_EXTI_DisableEvent_0_31>:
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8007034:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	43db      	mvns	r3, r3
 800703c:	4904      	ldr	r1, [pc, #16]	@ (8007050 <LL_EXTI_DisableEvent_0_31+0x24>)
 800703e:	4013      	ands	r3, r2
 8007040:	604b      	str	r3, [r1, #4]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40013c00 	.word	0x40013c00

08007054 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	4904      	ldr	r1, [pc, #16]	@ (8007074 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4313      	orrs	r3, r2
 8007066:	608b      	str	r3, [r1, #8]
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40013c00 	.word	0x40013c00

08007078 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8007080:	4b06      	ldr	r3, [pc, #24]	@ (800709c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	43db      	mvns	r3, r3
 8007088:	4904      	ldr	r1, [pc, #16]	@ (800709c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800708a:	4013      	ands	r3, r2
 800708c:	608b      	str	r3, [r1, #8]
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40013c00 	.word	0x40013c00

080070a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80070a8:	4b05      	ldr	r3, [pc, #20]	@ (80070c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	4904      	ldr	r1, [pc, #16]	@ (80070c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60cb      	str	r3, [r1, #12]
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	40013c00 	.word	0x40013c00

080070c4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	4904      	ldr	r1, [pc, #16]	@ (80070e8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	60cb      	str	r3, [r1, #12]
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40013c00 	.word	0x40013c00

080070ec <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	791b      	ldrb	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d065      	beq.n	80071cc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d06b      	beq.n	80071e0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	795b      	ldrb	r3, [r3, #5]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d01c      	beq.n	800714a <LL_EXTI_Init+0x5e>
 8007110:	2b02      	cmp	r3, #2
 8007112:	dc25      	bgt.n	8007160 <LL_EXTI_Init+0x74>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <LL_EXTI_Init+0x32>
 8007118:	2b01      	cmp	r3, #1
 800711a:	d00b      	beq.n	8007134 <LL_EXTI_Init+0x48>
 800711c:	e020      	b.n	8007160 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff ff82 	bl	800702c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff45 	bl	8006fbc <LL_EXTI_EnableIT_0_31>
          break;
 8007132:	e018      	b.n	8007166 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff ff51 	bl	8006fe0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ff60 	bl	8007008 <LL_EXTI_EnableEvent_0_31>
          break;
 8007148:	e00d      	b.n	8007166 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff ff34 	bl	8006fbc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff ff55 	bl	8007008 <LL_EXTI_EnableEvent_0_31>
          break;
 800715e:	e002      	b.n	8007166 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
          break;
 8007164:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	799b      	ldrb	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d038      	beq.n	80071e0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	799b      	ldrb	r3, [r3, #6]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d01c      	beq.n	80071b0 <LL_EXTI_Init+0xc4>
 8007176:	2b03      	cmp	r3, #3
 8007178:	dc25      	bgt.n	80071c6 <LL_EXTI_Init+0xda>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d002      	beq.n	8007184 <LL_EXTI_Init+0x98>
 800717e:	2b02      	cmp	r3, #2
 8007180:	d00b      	beq.n	800719a <LL_EXTI_Init+0xae>
 8007182:	e020      	b.n	80071c6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ff9b 	bl	80070c4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff ff5e 	bl	8007054 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007198:	e022      	b.n	80071e0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff ff6a 	bl	8007078 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ff79 	bl	80070a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80071ae:	e017      	b.n	80071e0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ff4d 	bl	8007054 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff6e 	bl	80070a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80071c4:	e00c      	b.n	80071e0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
            break;
 80071ca:	e009      	b.n	80071e0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff ff05 	bl	8006fe0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff ff26 	bl	800702c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <LL_GPIO_SetPinMode>:
{
 80071ea:	b480      	push	{r7}
 80071ec:	b08b      	sub	sp, #44	@ 0x2c
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	fa93 f3a3 	rbit	r3, r3
 8007204:	613b      	str	r3, [r7, #16]
  return result;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007210:	2320      	movs	r3, #32
 8007212:	e003      	b.n	800721c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	fab3 f383 	clz	r3, r3
 800721a:	b2db      	uxtb	r3, r3
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	2103      	movs	r1, #3
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	43db      	mvns	r3, r3
 8007226:	401a      	ands	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	fa93 f3a3 	rbit	r3, r3
 8007232:	61fb      	str	r3, [r7, #28]
  return result;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800723e:	2320      	movs	r3, #32
 8007240:	e003      	b.n	800724a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	fab3 f383 	clz	r3, r3
 8007248:	b2db      	uxtb	r3, r3
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	fa01 f303 	lsl.w	r3, r1, r3
 8007252:	431a      	orrs	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	372c      	adds	r7, #44	@ 0x2c
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <LL_GPIO_SetPinOutputType>:
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	43db      	mvns	r3, r3
 8007278:	401a      	ands	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	431a      	orrs	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	605a      	str	r2, [r3, #4]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <LL_GPIO_SetPinSpeed>:
{
 8007294:	b480      	push	{r7}
 8007296:	b08b      	sub	sp, #44	@ 0x2c
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa93 f3a3 	rbit	r3, r3
 80072ae:	613b      	str	r3, [r7, #16]
  return result;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80072ba:	2320      	movs	r3, #32
 80072bc:	e003      	b.n	80072c6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	fab3 f383 	clz	r3, r3
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2103      	movs	r1, #3
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	401a      	ands	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	fa93 f3a3 	rbit	r3, r3
 80072dc:	61fb      	str	r3, [r7, #28]
  return result;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80072e8:	2320      	movs	r3, #32
 80072ea:	e003      	b.n	80072f4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	fab3 f383 	clz	r3, r3
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	bf00      	nop
 8007304:	372c      	adds	r7, #44	@ 0x2c
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <LL_GPIO_SetPinPull>:
{
 800730e:	b480      	push	{r7}
 8007310:	b08b      	sub	sp, #44	@ 0x2c
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fa93 f3a3 	rbit	r3, r3
 8007328:	613b      	str	r3, [r7, #16]
  return result;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007334:	2320      	movs	r3, #32
 8007336:	e003      	b.n	8007340 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	2103      	movs	r1, #3
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	fa93 f3a3 	rbit	r3, r3
 8007356:	61fb      	str	r3, [r7, #28]
  return result;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007362:	2320      	movs	r3, #32
 8007364:	e003      	b.n	800736e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	fab3 f383 	clz	r3, r3
 800736c:	b2db      	uxtb	r3, r3
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	431a      	orrs	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	60da      	str	r2, [r3, #12]
}
 800737c:	bf00      	nop
 800737e:	372c      	adds	r7, #44	@ 0x2c
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LL_GPIO_SetAFPin_0_7>:
{
 8007388:	b480      	push	{r7}
 800738a:	b08b      	sub	sp, #44	@ 0x2c
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	fa93 f3a3 	rbit	r3, r3
 80073a2:	613b      	str	r3, [r7, #16]
  return result;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80073ae:	2320      	movs	r3, #32
 80073b0:	e003      	b.n	80073ba <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	fab3 f383 	clz	r3, r3
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	210f      	movs	r1, #15
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	43db      	mvns	r3, r3
 80073c4:	401a      	ands	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	fa93 f3a3 	rbit	r3, r3
 80073d0:	61fb      	str	r3, [r7, #28]
  return result;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80073dc:	2320      	movs	r3, #32
 80073de:	e003      	b.n	80073e8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	fab3 f383 	clz	r3, r3
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	431a      	orrs	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	372c      	adds	r7, #44	@ 0x2c
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_GPIO_SetAFPin_8_15>:
{
 8007402:	b480      	push	{r7}
 8007404:	b08b      	sub	sp, #44	@ 0x2c
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	fa93 f3a3 	rbit	r3, r3
 800741e:	613b      	str	r3, [r7, #16]
  return result;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800742a:	2320      	movs	r3, #32
 800742c:	e003      	b.n	8007436 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	fab3 f383 	clz	r3, r3
 8007434:	b2db      	uxtb	r3, r3
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	210f      	movs	r1, #15
 800743a:	fa01 f303 	lsl.w	r3, r1, r3
 800743e:	43db      	mvns	r3, r3
 8007440:	401a      	ands	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	0a1b      	lsrs	r3, r3, #8
 8007446:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	fa93 f3a3 	rbit	r3, r3
 800744e:	61fb      	str	r3, [r7, #28]
  return result;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800745a:	2320      	movs	r3, #32
 800745c:	e003      	b.n	8007466 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	fab3 f383 	clz	r3, r3
 8007464:	b2db      	uxtb	r3, r3
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	431a      	orrs	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007474:	bf00      	nop
 8007476:	372c      	adds	r7, #44	@ 0x2c
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	@ 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800748e:	2300      	movs	r3, #0
 8007490:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	617b      	str	r3, [r7, #20]
  return result;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <LL_GPIO_Init+0x2e>
    return 32U;
 80074aa:	2320      	movs	r3, #32
 80074ac:	e003      	b.n	80074b6 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	fab3 f383 	clz	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80074b8:	e057      	b.n	800756a <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	2101      	movs	r1, #1
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	fa01 f303 	lsl.w	r3, r1, r3
 80074c6:	4013      	ands	r3, r2
 80074c8:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d049      	beq.n	8007564 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d003      	beq.n	80074e0 <LL_GPIO_Init+0x60>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d10d      	bne.n	80074fc <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6a39      	ldr	r1, [r7, #32]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fed3 	bl	8007294 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6a39      	ldr	r1, [r7, #32]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff feb4 	bl	8007264 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	461a      	mov	r2, r3
 8007502:	6a39      	ldr	r1, [r7, #32]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff02 	bl	800730e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d121      	bne.n	8007556 <LL_GPIO_Init+0xd6>
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	fa93 f3a3 	rbit	r3, r3
 800751c:	60bb      	str	r3, [r7, #8]
  return result;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <LL_GPIO_Init+0xac>
    return 32U;
 8007528:	2320      	movs	r3, #32
 800752a:	e003      	b.n	8007534 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	fab3 f383 	clz	r3, r3
 8007532:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007534:	2b07      	cmp	r3, #7
 8007536:	d807      	bhi.n	8007548 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	461a      	mov	r2, r3
 800753e:	6a39      	ldr	r1, [r7, #32]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ff21 	bl	8007388 <LL_GPIO_SetAFPin_0_7>
 8007546:	e006      	b.n	8007556 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	461a      	mov	r2, r3
 800754e:	6a39      	ldr	r1, [r7, #32]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff ff56 	bl	8007402 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	461a      	mov	r2, r3
 800755c:	6a39      	ldr	r1, [r7, #32]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fe43 	bl	80071ea <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	3301      	adds	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1a0      	bne.n	80074ba <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	@ 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007588:	4b04      	ldr	r3, [pc, #16]	@ (800759c <LL_RCC_GetSysClkSource+0x18>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 030c 	and.w	r3, r3, #12
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800

080075a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80075a4:	4b04      	ldr	r3, [pc, #16]	@ (80075b8 <LL_RCC_GetAHBPrescaler+0x18>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800

080075bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80075c0:	4b04      	ldr	r3, [pc, #16]	@ (80075d4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800

080075d8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80075dc:	4b04      	ldr	r3, [pc, #16]	@ (80075f0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40023800 	.word	0x40023800

080075f4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <LL_RCC_PLL_GetMainSource+0x18>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40023800 	.word	0x40023800

08007610 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007614:	4b04      	ldr	r3, [pc, #16]	@ (8007628 <LL_RCC_PLL_GetN+0x18>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	099b      	lsrs	r3, r3, #6
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800761e:	4618      	mov	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40023800 	.word	0x40023800

0800762c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007630:	4b04      	ldr	r3, [pc, #16]	@ (8007644 <LL_RCC_PLL_GetP+0x18>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007638:	4618      	mov	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800764c:	4b04      	ldr	r3, [pc, #16]	@ (8007660 <LL_RCC_PLL_GetDivider+0x18>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007654:	4618      	mov	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800

08007664 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800766c:	f000 f820 	bl	80076b0 <RCC_GetSystemClockFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f83e 	bl	80076fc <RCC_GetHCLKClockFreq>
 8007680:	4602      	mov	r2, r0
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f84c 	bl	8007728 <RCC_GetPCLK1ClockFreq>
 8007690:	4602      	mov	r2, r0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f858 	bl	8007750 <RCC_GetPCLK2ClockFreq>
 80076a0:	4602      	mov	r2, r0
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80076ba:	f7ff ff63 	bl	8007584 <LL_RCC_GetSysClkSource>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d00c      	beq.n	80076de <RCC_GetSystemClockFreq+0x2e>
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d80f      	bhi.n	80076e8 <RCC_GetSystemClockFreq+0x38>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <RCC_GetSystemClockFreq+0x22>
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d003      	beq.n	80076d8 <RCC_GetSystemClockFreq+0x28>
 80076d0:	e00a      	b.n	80076e8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80076d2:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <RCC_GetSystemClockFreq+0x48>)
 80076d4:	607b      	str	r3, [r7, #4]
      break;
 80076d6:	e00a      	b.n	80076ee <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80076d8:	4b07      	ldr	r3, [pc, #28]	@ (80076f8 <RCC_GetSystemClockFreq+0x48>)
 80076da:	607b      	str	r3, [r7, #4]
      break;
 80076dc:	e007      	b.n	80076ee <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80076de:	2008      	movs	r0, #8
 80076e0:	f000 f84a 	bl	8007778 <RCC_PLL_GetFreqDomain_SYS>
 80076e4:	6078      	str	r0, [r7, #4]
      break;
 80076e6:	e002      	b.n	80076ee <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80076e8:	4b03      	ldr	r3, [pc, #12]	@ (80076f8 <RCC_GetSystemClockFreq+0x48>)
 80076ea:	607b      	str	r3, [r7, #4]
      break;
 80076ec:	bf00      	nop
  }

  return frequency;
 80076ee:	687b      	ldr	r3, [r7, #4]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	00f42400 	.word	0x00f42400

080076fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007704:	f7ff ff4c 	bl	80075a0 <LL_RCC_GetAHBPrescaler>
 8007708:	4603      	mov	r3, r0
 800770a:	091b      	lsrs	r3, r3, #4
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	4a04      	ldr	r2, [pc, #16]	@ (8007724 <RCC_GetHCLKClockFreq+0x28>)
 8007712:	5cd3      	ldrb	r3, [r2, r3]
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	40d3      	lsrs	r3, r2
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	0800ef6c 	.word	0x0800ef6c

08007728 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007730:	f7ff ff44 	bl	80075bc <LL_RCC_GetAPB1Prescaler>
 8007734:	4603      	mov	r3, r0
 8007736:	0a9b      	lsrs	r3, r3, #10
 8007738:	4a04      	ldr	r2, [pc, #16]	@ (800774c <RCC_GetPCLK1ClockFreq+0x24>)
 800773a:	5cd3      	ldrb	r3, [r2, r3]
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	40d3      	lsrs	r3, r2
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	0800ef7c 	.word	0x0800ef7c

08007750 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007758:	f7ff ff3e 	bl	80075d8 <LL_RCC_GetAPB2Prescaler>
 800775c:	4603      	mov	r3, r0
 800775e:	0b5b      	lsrs	r3, r3, #13
 8007760:	4a04      	ldr	r2, [pc, #16]	@ (8007774 <RCC_GetPCLK2ClockFreq+0x24>)
 8007762:	5cd3      	ldrb	r3, [r2, r3]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	40d3      	lsrs	r3, r2
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	0800ef7c 	.word	0x0800ef7c

08007778 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007778:	b590      	push	{r4, r7, lr}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800778c:	f7ff ff32 	bl	80075f4 <LL_RCC_PLL_GetMainSource>
 8007790:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800779e:	d003      	beq.n	80077a8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80077a0:	e005      	b.n	80077ae <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80077a2:	4b12      	ldr	r3, [pc, #72]	@ (80077ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80077a4:	617b      	str	r3, [r7, #20]
      break;
 80077a6:	e005      	b.n	80077b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80077aa:	617b      	str	r3, [r7, #20]
      break;
 80077ac:	e002      	b.n	80077b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80077ae:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80077b0:	617b      	str	r3, [r7, #20]
      break;
 80077b2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d113      	bne.n	80077e2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80077ba:	f7ff ff45 	bl	8007648 <LL_RCC_PLL_GetDivider>
 80077be:	4602      	mov	r2, r0
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	fbb3 f4f2 	udiv	r4, r3, r2
 80077c6:	f7ff ff23 	bl	8007610 <LL_RCC_PLL_GetN>
 80077ca:	4603      	mov	r3, r0
 80077cc:	fb03 f404 	mul.w	r4, r3, r4
 80077d0:	f7ff ff2c 	bl	800762c <LL_RCC_PLL_GetP>
 80077d4:	4603      	mov	r3, r0
 80077d6:	0c1b      	lsrs	r3, r3, #16
 80077d8:	3301      	adds	r3, #1
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80077e0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80077e2:	693b      	ldr	r3, [r7, #16]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd90      	pop	{r4, r7, pc}
 80077ec:	00f42400 	.word	0x00f42400

080077f0 <LL_SPI_IsEnabled>:
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d101      	bne.n	8007808 <LL_SPI_IsEnabled+0x18>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <LL_SPI_IsEnabled+0x1a>
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <LL_SPI_SetCRCPolynomial>:
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	611a      	str	r2, [r3, #16]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ffd3 	bl	80077f0 <LL_SPI_IsEnabled>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d139      	bne.n	80078c4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007858:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	6811      	ldr	r1, [r2, #0]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	6852      	ldr	r2, [r2, #4]
 8007864:	4311      	orrs	r1, r2
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	6892      	ldr	r2, [r2, #8]
 800786a:	4311      	orrs	r1, r2
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	68d2      	ldr	r2, [r2, #12]
 8007870:	4311      	orrs	r1, r2
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	6912      	ldr	r2, [r2, #16]
 8007876:	4311      	orrs	r1, r2
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	6952      	ldr	r2, [r2, #20]
 800787c:	4311      	orrs	r1, r2
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	6992      	ldr	r2, [r2, #24]
 8007882:	4311      	orrs	r1, r2
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	69d2      	ldr	r2, [r2, #28]
 8007888:	4311      	orrs	r1, r2
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	6a12      	ldr	r2, [r2, #32]
 800788e:	430a      	orrs	r2, r1
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f023 0204 	bic.w	r2, r3, #4
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078b2:	d105      	bne.n	80078c0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff ffab 	bl	8007816 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	61da      	str	r2, [r3, #28]
  return status;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <LL_TIM_SetPrescaler>:
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_TIM_SetAutoReload>:
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <LL_TIM_SetRepetitionCounter>:
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <LL_TIM_OC_SetCompareCH1>:
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <LL_TIM_OC_SetCompareCH2>:
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_TIM_OC_SetCompareCH3>:
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <LL_TIM_OC_SetCompareCH4>:
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f043 0201 	orr.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	615a      	str	r2, [r3, #20]
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a3d      	ldr	r2, [pc, #244]	@ (8007ac8 <LL_TIM_Init+0x108>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <LL_TIM_Init+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079de:	d00f      	beq.n	8007a00 <LL_TIM_Init+0x40>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a3a      	ldr	r2, [pc, #232]	@ (8007acc <LL_TIM_Init+0x10c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <LL_TIM_Init+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a39      	ldr	r2, [pc, #228]	@ (8007ad0 <LL_TIM_Init+0x110>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <LL_TIM_Init+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a38      	ldr	r2, [pc, #224]	@ (8007ad4 <LL_TIM_Init+0x114>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <LL_TIM_Init+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a37      	ldr	r2, [pc, #220]	@ (8007ad8 <LL_TIM_Init+0x118>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d106      	bne.n	8007a0e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac8 <LL_TIM_Init+0x108>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d02b      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1c:	d027      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2a      	ldr	r2, [pc, #168]	@ (8007acc <LL_TIM_Init+0x10c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d023      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a29      	ldr	r2, [pc, #164]	@ (8007ad0 <LL_TIM_Init+0x110>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01f      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a28      	ldr	r2, [pc, #160]	@ (8007ad4 <LL_TIM_Init+0x114>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01b      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a27      	ldr	r2, [pc, #156]	@ (8007ad8 <LL_TIM_Init+0x118>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d017      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a26      	ldr	r2, [pc, #152]	@ (8007adc <LL_TIM_Init+0x11c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a25      	ldr	r2, [pc, #148]	@ (8007ae0 <LL_TIM_Init+0x120>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00f      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a24      	ldr	r2, [pc, #144]	@ (8007ae4 <LL_TIM_Init+0x124>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a23      	ldr	r2, [pc, #140]	@ (8007ae8 <LL_TIM_Init+0x128>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a22      	ldr	r2, [pc, #136]	@ (8007aec <LL_TIM_Init+0x12c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <LL_TIM_Init+0xae>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a21      	ldr	r2, [pc, #132]	@ (8007af0 <LL_TIM_Init+0x130>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d106      	bne.n	8007a7c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff34 	bl	80078f6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ff20 	bl	80078da <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac8 <LL_TIM_Init+0x108>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d003      	beq.n	8007aaa <LL_TIM_Init+0xea>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad8 <LL_TIM_Init+0x118>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d105      	bne.n	8007ab6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ff2e 	bl	8007912 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff ff71 	bl	800799e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40010000 	.word	0x40010000
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00
 8007ad8:	40010400 	.word	0x40010400
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800
 8007ae8:	40001800 	.word	0x40001800
 8007aec:	40001c00 	.word	0x40001c00
 8007af0:	40002000 	.word	0x40002000

08007af4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b0a:	d027      	beq.n	8007b5c <LL_TIM_OC_Init+0x68>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b12:	d82a      	bhi.n	8007b6a <LL_TIM_OC_Init+0x76>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1a:	d018      	beq.n	8007b4e <LL_TIM_OC_Init+0x5a>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b22:	d822      	bhi.n	8007b6a <LL_TIM_OC_Init+0x76>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d003      	beq.n	8007b32 <LL_TIM_OC_Init+0x3e>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d007      	beq.n	8007b40 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007b30:	e01b      	b.n	8007b6a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f861 	bl	8007bfc <OC1Config>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3e:	e015      	b.n	8007b6c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f8c6 	bl	8007cd4 <OC2Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4c:	e00e      	b.n	8007b6c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f92f 	bl	8007db4 <OC3Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5a:	e007      	b.n	8007b6c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f998 	bl	8007e94 <OC4Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e000      	b.n	8007b6c <LL_TIM_OC_Init+0x78>
      break;
 8007b6a:	bf00      	nop
  }

  return result;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7b12      	ldrb	r2, [r2, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	89d2      	ldrh	r2, [r2, #14]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f023 0201 	bic.w	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 0202 	bic.w	r2, r3, #2
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f023 0201 	bic.w	r2, r3, #1
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ccc <OC1Config+0xd0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <OC1Config+0x6a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd0 <OC1Config+0xd4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d11e      	bne.n	8007ca4 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f023 0208 	bic.w	r2, r3, #8
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f023 0204 	bic.w	r2, r3, #4
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fe39 	bl	800792e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40010000 	.word	0x40010000
 8007cd0:	40010400 	.word	0x40010400

08007cd4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0210 	bic.w	r2, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f023 0220 	bic.w	r2, r3, #32
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0210 	bic.w	r2, r3, #16
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <OC2Config+0xd8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <OC2Config+0x70>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <OC2Config+0xdc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d11f      	bne.n	8007d84 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	019b      	lsls	r3, r3, #6
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	019b      	lsls	r3, r3, #6
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fdd7 	bl	800794a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40010400 	.word	0x40010400

08007db4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1d      	ldr	r2, [pc, #116]	@ (8007e8c <OC3Config+0xd8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d003      	beq.n	8007e22 <OC3Config+0x6e>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e90 <OC3Config+0xdc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d11f      	bne.n	8007e62 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	029b      	lsls	r3, r3, #10
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	015b      	lsls	r3, r3, #5
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff fd76 	bl	8007966 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40010400 	.word	0x40010400

08007e94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	031b      	lsls	r3, r3, #12
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	031b      	lsls	r3, r3, #12
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a11      	ldr	r2, [pc, #68]	@ (8007f3c <OC4Config+0xa8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <OC4Config+0x70>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a10      	ldr	r2, [pc, #64]	@ (8007f40 <OC4Config+0xac>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d107      	bne.n	8007f14 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	019b      	lsls	r3, r3, #6
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fd2b 	bl	8007982 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40010400 	.word	0x40010400

08007f44 <LL_USART_IsEnabled>:
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <LL_USART_SetStopBitsLength>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <LL_USART_SetHWFlowCtrl>:
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	615a      	str	r2, [r3, #20]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <LL_USART_SetBaudRate>:
{
 8007fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fbc:	b0c0      	sub	sp, #256	@ 0x100
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007fc4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007fc8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd8:	f040 810c 	bne.w	80081f4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007fdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fee:	4622      	mov	r2, r4
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	1891      	adds	r1, r2, r2
 8007ff4:	6639      	str	r1, [r7, #96]	@ 0x60
 8007ff6:	415b      	adcs	r3, r3
 8007ff8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ffa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007ffe:	4621      	mov	r1, r4
 8008000:	eb12 0801 	adds.w	r8, r2, r1
 8008004:	4629      	mov	r1, r5
 8008006:	eb43 0901 	adc.w	r9, r3, r1
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800801a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800801e:	4690      	mov	r8, r2
 8008020:	4699      	mov	r9, r3
 8008022:	4623      	mov	r3, r4
 8008024:	eb18 0303 	adds.w	r3, r8, r3
 8008028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800802c:	462b      	mov	r3, r5
 800802e:	eb49 0303 	adc.w	r3, r9, r3
 8008032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800803a:	2200      	movs	r2, #0
 800803c:	469a      	mov	sl, r3
 800803e:	4693      	mov	fp, r2
 8008040:	eb1a 030a 	adds.w	r3, sl, sl
 8008044:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008046:	eb4b 030b 	adc.w	r3, fp, fp
 800804a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800804c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008054:	f7f8 fdc8 	bl	8000be8 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4b64      	ldr	r3, [pc, #400]	@ (80081f0 <LL_USART_SetBaudRate+0x238>)
 800805e:	fba3 2302 	umull	r2, r3, r3, r2
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	b29b      	uxth	r3, r3
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	b29c      	uxth	r4, r3
 800806a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800806e:	2200      	movs	r2, #0
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008074:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008078:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800807c:	4642      	mov	r2, r8
 800807e:	464b      	mov	r3, r9
 8008080:	1891      	adds	r1, r2, r2
 8008082:	6539      	str	r1, [r7, #80]	@ 0x50
 8008084:	415b      	adcs	r3, r3
 8008086:	657b      	str	r3, [r7, #84]	@ 0x54
 8008088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800808c:	4641      	mov	r1, r8
 800808e:	1851      	adds	r1, r2, r1
 8008090:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008092:	4649      	mov	r1, r9
 8008094:	414b      	adcs	r3, r1
 8008096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80080a4:	4659      	mov	r1, fp
 80080a6:	00cb      	lsls	r3, r1, #3
 80080a8:	4651      	mov	r1, sl
 80080aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ae:	4651      	mov	r1, sl
 80080b0:	00ca      	lsls	r2, r1, #3
 80080b2:	4610      	mov	r0, r2
 80080b4:	4619      	mov	r1, r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	4642      	mov	r2, r8
 80080ba:	189b      	adds	r3, r3, r2
 80080bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080c0:	464b      	mov	r3, r9
 80080c2:	460a      	mov	r2, r1
 80080c4:	eb42 0303 	adc.w	r3, r2, r3
 80080c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080d6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80080da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80080de:	460b      	mov	r3, r1
 80080e0:	18db      	adds	r3, r3, r3
 80080e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e4:	4613      	mov	r3, r2
 80080e6:	eb42 0303 	adc.w	r3, r2, r3
 80080ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080f0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80080f4:	f7f8 fd78 	bl	8000be8 <__aeabi_uldivmod>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	4b3c      	ldr	r3, [pc, #240]	@ (80081f0 <LL_USART_SetBaudRate+0x238>)
 8008100:	fba3 2301 	umull	r2, r3, r3, r1
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	2264      	movs	r2, #100	@ 0x64
 8008108:	fb02 f303 	mul.w	r3, r2, r3
 800810c:	1acb      	subs	r3, r1, r3
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008114:	4b36      	ldr	r3, [pc, #216]	@ (80081f0 <LL_USART_SetBaudRate+0x238>)
 8008116:	fba3 2302 	umull	r2, r3, r3, r2
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	b29b      	uxth	r3, r3
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008126:	b29b      	uxth	r3, r3
 8008128:	4423      	add	r3, r4
 800812a:	b29c      	uxth	r4, r3
 800812c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008130:	2200      	movs	r2, #0
 8008132:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008136:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800813a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800813e:	4642      	mov	r2, r8
 8008140:	464b      	mov	r3, r9
 8008142:	1891      	adds	r1, r2, r2
 8008144:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008146:	415b      	adcs	r3, r3
 8008148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800814a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800814e:	4641      	mov	r1, r8
 8008150:	1851      	adds	r1, r2, r1
 8008152:	6339      	str	r1, [r7, #48]	@ 0x30
 8008154:	4649      	mov	r1, r9
 8008156:	414b      	adcs	r3, r1
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008166:	4659      	mov	r1, fp
 8008168:	00cb      	lsls	r3, r1, #3
 800816a:	4651      	mov	r1, sl
 800816c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008170:	4651      	mov	r1, sl
 8008172:	00ca      	lsls	r2, r1, #3
 8008174:	4610      	mov	r0, r2
 8008176:	4619      	mov	r1, r3
 8008178:	4603      	mov	r3, r0
 800817a:	4642      	mov	r2, r8
 800817c:	189b      	adds	r3, r3, r2
 800817e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008182:	464b      	mov	r3, r9
 8008184:	460a      	mov	r2, r1
 8008186:	eb42 0303 	adc.w	r3, r2, r3
 800818a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800818e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008192:	2200      	movs	r2, #0
 8008194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008198:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800819c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80081a0:	460b      	mov	r3, r1
 80081a2:	18db      	adds	r3, r3, r3
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a6:	4613      	mov	r3, r2
 80081a8:	eb42 0303 	adc.w	r3, r2, r3
 80081ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081b2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80081b6:	f7f8 fd17 	bl	8000be8 <__aeabi_uldivmod>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <LL_USART_SetBaudRate+0x238>)
 80081c0:	fba3 1302 	umull	r1, r3, r3, r2
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	2164      	movs	r1, #100	@ 0x64
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	3332      	adds	r3, #50	@ 0x32
 80081d2:	4a07      	ldr	r2, [pc, #28]	@ (80081f0 <LL_USART_SetBaudRate+0x238>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4423      	add	r3, r4
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ec:	609a      	str	r2, [r3, #8]
}
 80081ee:	e108      	b.n	8008402 <LL_USART_SetBaudRate+0x44a>
 80081f0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80081f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081fe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008202:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8008206:	4642      	mov	r2, r8
 8008208:	464b      	mov	r3, r9
 800820a:	1891      	adds	r1, r2, r2
 800820c:	6239      	str	r1, [r7, #32]
 800820e:	415b      	adcs	r3, r3
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
 8008212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008216:	4641      	mov	r1, r8
 8008218:	1854      	adds	r4, r2, r1
 800821a:	4649      	mov	r1, r9
 800821c:	eb43 0501 	adc.w	r5, r3, r1
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	00eb      	lsls	r3, r5, #3
 800822a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822e:	00e2      	lsls	r2, r4, #3
 8008230:	4614      	mov	r4, r2
 8008232:	461d      	mov	r5, r3
 8008234:	4643      	mov	r3, r8
 8008236:	18e3      	adds	r3, r4, r3
 8008238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800823c:	464b      	mov	r3, r9
 800823e:	eb45 0303 	adc.w	r3, r5, r3
 8008242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008250:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8008260:	4629      	mov	r1, r5
 8008262:	008b      	lsls	r3, r1, #2
 8008264:	4621      	mov	r1, r4
 8008266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800826a:	4621      	mov	r1, r4
 800826c:	008a      	lsls	r2, r1, #2
 800826e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8008272:	f7f8 fcb9 	bl	8000be8 <__aeabi_uldivmod>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4b65      	ldr	r3, [pc, #404]	@ (8008410 <LL_USART_SetBaudRate+0x458>)
 800827c:	fba3 2302 	umull	r2, r3, r3, r2
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	b29b      	uxth	r3, r3
 8008284:	011b      	lsls	r3, r3, #4
 8008286:	b29c      	uxth	r4, r3
 8008288:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800828c:	2200      	movs	r2, #0
 800828e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008296:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800829a:	4642      	mov	r2, r8
 800829c:	464b      	mov	r3, r9
 800829e:	1891      	adds	r1, r2, r2
 80082a0:	61b9      	str	r1, [r7, #24]
 80082a2:	415b      	adcs	r3, r3
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082aa:	4641      	mov	r1, r8
 80082ac:	1851      	adds	r1, r2, r1
 80082ae:	6139      	str	r1, [r7, #16]
 80082b0:	4649      	mov	r1, r9
 80082b2:	414b      	adcs	r3, r1
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082c2:	4659      	mov	r1, fp
 80082c4:	00cb      	lsls	r3, r1, #3
 80082c6:	4651      	mov	r1, sl
 80082c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082cc:	4651      	mov	r1, sl
 80082ce:	00ca      	lsls	r2, r1, #3
 80082d0:	4610      	mov	r0, r2
 80082d2:	4619      	mov	r1, r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	4642      	mov	r2, r8
 80082d8:	189b      	adds	r3, r3, r2
 80082da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082de:	464b      	mov	r3, r9
 80082e0:	460a      	mov	r2, r1
 80082e2:	eb42 0303 	adc.w	r3, r2, r3
 80082e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008304:	4649      	mov	r1, r9
 8008306:	008b      	lsls	r3, r1, #2
 8008308:	4641      	mov	r1, r8
 800830a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800830e:	4641      	mov	r1, r8
 8008310:	008a      	lsls	r2, r1, #2
 8008312:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008316:	f7f8 fc67 	bl	8000be8 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4611      	mov	r1, r2
 8008320:	4b3b      	ldr	r3, [pc, #236]	@ (8008410 <LL_USART_SetBaudRate+0x458>)
 8008322:	fba3 2301 	umull	r2, r3, r3, r1
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2264      	movs	r2, #100	@ 0x64
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	1acb      	subs	r3, r1, r3
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	3332      	adds	r3, #50	@ 0x32
 8008334:	4a36      	ldr	r2, [pc, #216]	@ (8008410 <LL_USART_SetBaudRate+0x458>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	b29b      	uxth	r3, r3
 800833e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008342:	b29b      	uxth	r3, r3
 8008344:	4423      	add	r3, r4
 8008346:	b29c      	uxth	r4, r3
 8008348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800834c:	2200      	movs	r2, #0
 800834e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008350:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008352:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008356:	4642      	mov	r2, r8
 8008358:	464b      	mov	r3, r9
 800835a:	1891      	adds	r1, r2, r2
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	415b      	adcs	r3, r3
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008366:	4641      	mov	r1, r8
 8008368:	1851      	adds	r1, r2, r1
 800836a:	6039      	str	r1, [r7, #0]
 800836c:	4649      	mov	r1, r9
 800836e:	414b      	adcs	r3, r1
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800837e:	4659      	mov	r1, fp
 8008380:	00cb      	lsls	r3, r1, #3
 8008382:	4651      	mov	r1, sl
 8008384:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008388:	4651      	mov	r1, sl
 800838a:	00ca      	lsls	r2, r1, #3
 800838c:	4610      	mov	r0, r2
 800838e:	4619      	mov	r1, r3
 8008390:	4603      	mov	r3, r0
 8008392:	4642      	mov	r2, r8
 8008394:	189b      	adds	r3, r3, r2
 8008396:	673b      	str	r3, [r7, #112]	@ 0x70
 8008398:	464b      	mov	r3, r9
 800839a:	460a      	mov	r2, r1
 800839c:	eb42 0303 	adc.w	r3, r2, r3
 80083a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80083a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083a6:	2200      	movs	r2, #0
 80083a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80083b8:	4649      	mov	r1, r9
 80083ba:	008b      	lsls	r3, r1, #2
 80083bc:	4641      	mov	r1, r8
 80083be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083c2:	4641      	mov	r1, r8
 80083c4:	008a      	lsls	r2, r1, #2
 80083c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80083ca:	f7f8 fc0d 	bl	8000be8 <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <LL_USART_SetBaudRate+0x458>)
 80083d4:	fba3 1302 	umull	r1, r3, r3, r2
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	2164      	movs	r1, #100	@ 0x64
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	3332      	adds	r3, #50	@ 0x32
 80083e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008410 <LL_USART_SetBaudRate+0x458>)
 80083e8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4423      	add	r3, r4
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008400:	609a      	str	r2, [r3, #8]
}
 8008402:	bf00      	nop
 8008404:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008408:	46bd      	mov	sp, r7
 800840a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800840e:	bf00      	nop
 8008410:	51eb851f 	.word	0x51eb851f

08008414 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fd8c 	bl	8007f44 <LL_USART_IsEnabled>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d15e      	bne.n	80084f0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800843a:	f023 030c 	bic.w	r3, r3, #12
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	6851      	ldr	r1, [r2, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	68d2      	ldr	r2, [r2, #12]
 8008446:	4311      	orrs	r1, r2
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	6912      	ldr	r2, [r2, #16]
 800844c:	4311      	orrs	r1, r2
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	6992      	ldr	r2, [r2, #24]
 8008452:	430a      	orrs	r2, r1
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fd83 	bl	8007f6c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fd90 	bl	8007f92 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008472:	f107 0308 	add.w	r3, r7, #8
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f8f4 	bl	8007664 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a1f      	ldr	r2, [pc, #124]	@ (80084fc <LL_USART_Init+0xe8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d102      	bne.n	800848a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	e021      	b.n	80084ce <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a1c      	ldr	r2, [pc, #112]	@ (8008500 <LL_USART_Init+0xec>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d102      	bne.n	8008498 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	e01a      	b.n	80084ce <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a1a      	ldr	r2, [pc, #104]	@ (8008504 <LL_USART_Init+0xf0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d102      	bne.n	80084a6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e013      	b.n	80084ce <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a17      	ldr	r2, [pc, #92]	@ (8008508 <LL_USART_Init+0xf4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d102      	bne.n	80084b4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	e00c      	b.n	80084ce <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a15      	ldr	r2, [pc, #84]	@ (800850c <LL_USART_Init+0xf8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d102      	bne.n	80084c2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	61bb      	str	r3, [r7, #24]
 80084c0:	e005      	b.n	80084ce <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a12      	ldr	r2, [pc, #72]	@ (8008510 <LL_USART_Init+0xfc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d101      	bne.n	80084ce <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00d      	beq.n	80084f0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80084dc:	2300      	movs	r3, #0
 80084de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80084e8:	69b9      	ldr	r1, [r7, #24]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fd64 	bl	8007fb8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80084f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40011000 	.word	0x40011000
 8008500:	40004400 	.word	0x40004400
 8008504:	40004800 	.word	0x40004800
 8008508:	40011400 	.word	0x40011400
 800850c:	40004c00 	.word	0x40004c00
 8008510:	40005000 	.word	0x40005000

08008514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008514:	b084      	sub	sp, #16
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	f107 001c 	add.w	r0, r7, #28
 8008522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008526:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800852a:	2b01      	cmp	r3, #1
 800852c:	d123      	bne.n	8008576 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008556:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800855a:	2b01      	cmp	r3, #1
 800855c:	d105      	bne.n	800856a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 fae8 	bl	8009b40 <USB_CoreReset>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	e01b      	b.n	80085ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fadc 	bl	8009b40 <USB_CoreReset>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800858c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
 80085a0:	e005      	b.n	80085ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085ae:	7fbb      	ldrb	r3, [r7, #30]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d10b      	bne.n	80085cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f043 0206 	orr.w	r2, r3, #6
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f043 0220 	orr.w	r2, r3, #32
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085d8:	b004      	add	sp, #16
 80085da:	4770      	bx	lr

080085dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d165      	bne.n	80086bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4a41      	ldr	r2, [pc, #260]	@ (80086f8 <USB_SetTurnaroundTime+0x11c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d906      	bls.n	8008606 <USB_SetTurnaroundTime+0x2a>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4a40      	ldr	r2, [pc, #256]	@ (80086fc <USB_SetTurnaroundTime+0x120>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d202      	bcs.n	8008606 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008600:	230f      	movs	r3, #15
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	e062      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	4a3c      	ldr	r2, [pc, #240]	@ (80086fc <USB_SetTurnaroundTime+0x120>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d306      	bcc.n	800861c <USB_SetTurnaroundTime+0x40>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	4a3b      	ldr	r2, [pc, #236]	@ (8008700 <USB_SetTurnaroundTime+0x124>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d202      	bcs.n	800861c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008616:	230e      	movs	r3, #14
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e057      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4a38      	ldr	r2, [pc, #224]	@ (8008700 <USB_SetTurnaroundTime+0x124>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d306      	bcc.n	8008632 <USB_SetTurnaroundTime+0x56>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4a37      	ldr	r2, [pc, #220]	@ (8008704 <USB_SetTurnaroundTime+0x128>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d202      	bcs.n	8008632 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800862c:	230d      	movs	r3, #13
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e04c      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4a33      	ldr	r2, [pc, #204]	@ (8008704 <USB_SetTurnaroundTime+0x128>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d306      	bcc.n	8008648 <USB_SetTurnaroundTime+0x6c>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4a32      	ldr	r2, [pc, #200]	@ (8008708 <USB_SetTurnaroundTime+0x12c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d802      	bhi.n	8008648 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008642:	230c      	movs	r3, #12
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	e041      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a2f      	ldr	r2, [pc, #188]	@ (8008708 <USB_SetTurnaroundTime+0x12c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d906      	bls.n	800865e <USB_SetTurnaroundTime+0x82>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4a2e      	ldr	r2, [pc, #184]	@ (800870c <USB_SetTurnaroundTime+0x130>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d802      	bhi.n	800865e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008658:	230b      	movs	r3, #11
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e036      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4a2a      	ldr	r2, [pc, #168]	@ (800870c <USB_SetTurnaroundTime+0x130>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d906      	bls.n	8008674 <USB_SetTurnaroundTime+0x98>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4a29      	ldr	r2, [pc, #164]	@ (8008710 <USB_SetTurnaroundTime+0x134>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d802      	bhi.n	8008674 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800866e:	230a      	movs	r3, #10
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e02b      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4a26      	ldr	r2, [pc, #152]	@ (8008710 <USB_SetTurnaroundTime+0x134>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d906      	bls.n	800868a <USB_SetTurnaroundTime+0xae>
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4a25      	ldr	r2, [pc, #148]	@ (8008714 <USB_SetTurnaroundTime+0x138>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d202      	bcs.n	800868a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008684:	2309      	movs	r3, #9
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e020      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <USB_SetTurnaroundTime+0x138>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d306      	bcc.n	80086a0 <USB_SetTurnaroundTime+0xc4>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4a20      	ldr	r2, [pc, #128]	@ (8008718 <USB_SetTurnaroundTime+0x13c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d802      	bhi.n	80086a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800869a:	2308      	movs	r3, #8
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e015      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008718 <USB_SetTurnaroundTime+0x13c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d906      	bls.n	80086b6 <USB_SetTurnaroundTime+0xda>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4a1c      	ldr	r2, [pc, #112]	@ (800871c <USB_SetTurnaroundTime+0x140>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d202      	bcs.n	80086b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80086b0:	2307      	movs	r3, #7
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e00a      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80086b6:	2306      	movs	r3, #6
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e007      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80086c2:	2309      	movs	r3, #9
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e001      	b.n	80086cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80086c8:	2309      	movs	r3, #9
 80086ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	029b      	lsls	r3, r3, #10
 80086e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	00d8acbf 	.word	0x00d8acbf
 80086fc:	00e4e1c0 	.word	0x00e4e1c0
 8008700:	00f42400 	.word	0x00f42400
 8008704:	01067380 	.word	0x01067380
 8008708:	011a499f 	.word	0x011a499f
 800870c:	01312cff 	.word	0x01312cff
 8008710:	014ca43f 	.word	0x014ca43f
 8008714:	016e3600 	.word	0x016e3600
 8008718:	01a6ab1f 	.word	0x01a6ab1f
 800871c:	01e84800 	.word	0x01e84800

08008720 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f043 0201 	orr.w	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f023 0201 	bic.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d115      	bne.n	80087b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008792:	200a      	movs	r0, #10
 8008794:	f7fc f9a4 	bl	8004ae0 <HAL_Delay>
      ms += 10U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	330a      	adds	r3, #10
 800879c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f93f 	bl	8009a22 <USB_GetMode>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d01e      	beq.n	80087e8 <USB_SetCurrentMode+0x84>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80087ae:	d9f0      	bls.n	8008792 <USB_SetCurrentMode+0x2e>
 80087b0:	e01a      	b.n	80087e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d115      	bne.n	80087e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087c4:	200a      	movs	r0, #10
 80087c6:	f7fc f98b 	bl	8004ae0 <HAL_Delay>
      ms += 10U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	330a      	adds	r3, #10
 80087ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 f926 	bl	8009a22 <USB_GetMode>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <USB_SetCurrentMode+0x84>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2bc7      	cmp	r3, #199	@ 0xc7
 80087e0:	d9f0      	bls.n	80087c4 <USB_SetCurrentMode+0x60>
 80087e2:	e001      	b.n	80087e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e005      	b.n	80087f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80087ec:	d101      	bne.n	80087f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087fc:	b084      	sub	sp, #16
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800880a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	e009      	b.n	8008830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3340      	adds	r3, #64	@ 0x40
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	2200      	movs	r2, #0
 8008828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b0e      	cmp	r3, #14
 8008834:	d9f2      	bls.n	800881c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008836:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800883a:	2b00      	cmp	r3, #0
 800883c:	d11c      	bne.n	8008878 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008862:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	639a      	str	r2, [r3, #56]	@ 0x38
 8008876:	e00b      	b.n	8008890 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008896:	461a      	mov	r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800889c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10d      	bne.n	80088c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d104      	bne.n	80088b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f968 	bl	8008b84 <USB_SetDevSpeed>
 80088b4:	e008      	b.n	80088c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088b6:	2101      	movs	r1, #1
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f963 	bl	8008b84 <USB_SetDevSpeed>
 80088be:	e003      	b.n	80088c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088c0:	2103      	movs	r1, #3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f95e 	bl	8008b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088c8:	2110      	movs	r1, #16
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8fa 	bl	8008ac4 <USB_FlushTxFifo>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f924 	bl	8008b28 <USB_FlushRxFifo>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f0:	461a      	mov	r2, r3
 80088f2:	2300      	movs	r3, #0
 80088f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fc:	461a      	mov	r2, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	e043      	b.n	800899c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892a:	d118      	bne.n	800895e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893e:	461a      	mov	r2, r3
 8008940:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e013      	b.n	8008970 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008954:	461a      	mov	r2, r3
 8008956:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e008      	b.n	8008970 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896a:	461a      	mov	r2, r3
 800896c:	2300      	movs	r3, #0
 800896e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898e:	461a      	mov	r2, r3
 8008990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3301      	adds	r3, #1
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089a0:	461a      	mov	r2, r3
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d3b5      	bcc.n	8008914 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	e043      	b.n	8008a36 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c4:	d118      	bne.n	80089f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d8:	461a      	mov	r2, r3
 80089da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	e013      	b.n	8008a0a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	e008      	b.n	8008a0a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3301      	adds	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d3b5      	bcc.n	80089ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d105      	bne.n	8008a78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f043 0210 	orr.w	r2, r3, #16
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	4b10      	ldr	r3, [pc, #64]	@ (8008ac0 <USB_DevInit+0x2c4>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f043 0208 	orr.w	r2, r3, #8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d107      	bne.n	8008ab0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008aa8:	f043 0304 	orr.w	r3, r3, #4
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008abc:	b004      	add	sp, #16
 8008abe:	4770      	bx	lr
 8008ac0:	803c3800 	.word	0x803c3800

08008ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ade:	d901      	bls.n	8008ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e01b      	b.n	8008b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	daf2      	bge.n	8008ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	019b      	lsls	r3, r3, #6
 8008af4:	f043 0220 	orr.w	r2, r3, #32
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b08:	d901      	bls.n	8008b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e006      	b.n	8008b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d0f0      	beq.n	8008afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b40:	d901      	bls.n	8008b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e018      	b.n	8008b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	daf2      	bge.n	8008b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2210      	movs	r2, #16
 8008b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b64:	d901      	bls.n	8008b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e006      	b.n	8008b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d0f0      	beq.n	8008b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0306 	and.w	r3, r3, #6
 8008bce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
 8008bda:	e00a      	b.n	8008bf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d002      	beq.n	8008be8 <USB_GetDevSpeed+0x32>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b06      	cmp	r3, #6
 8008be6:	d102      	bne.n	8008bee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008be8:	2302      	movs	r3, #2
 8008bea:	75fb      	strb	r3, [r7, #23]
 8008bec:	e001      	b.n	8008bf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008bee:	230f      	movs	r3, #15
 8008bf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d13a      	bne.n	8008c92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d155      	bne.n	8008d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	791b      	ldrb	r3, [r3, #4]
 8008c6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	059b      	lsls	r3, r3, #22
 8008c76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	e036      	b.n	8008d00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c98:	69da      	ldr	r2, [r3, #28]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11a      	bne.n	8008d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	791b      	ldrb	r3, [r3, #4]
 8008ce4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
	...

08008d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d161      	bne.n	8008df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d42:	d11f      	bne.n	8008d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	2101      	movs	r1, #1
 8008d96:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008da4:	4013      	ands	r3, r2
 8008da6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dae:	69da      	ldr	r2, [r3, #28]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dc8:	4013      	ands	r3, r2
 8008dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	0159      	lsls	r1, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	440b      	add	r3, r1
 8008de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de6:	4619      	mov	r1, r3
 8008de8:	4b35      	ldr	r3, [pc, #212]	@ (8008ec0 <USB_DeactivateEndpoint+0x1b0>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	600b      	str	r3, [r1, #0]
 8008dee:	e060      	b.n	8008eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e06:	d11f      	bne.n	8008e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	0151      	lsls	r1, r2, #5
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	440a      	add	r2, r1
 8008e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	2101      	movs	r1, #1
 8008e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	43db      	mvns	r3, r3
 8008e62:	68f9      	ldr	r1, [r7, #12]
 8008e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e68:	4013      	ands	r3, r2
 8008e6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e72:	69da      	ldr	r2, [r3, #28]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	43db      	mvns	r3, r3
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	0159      	lsls	r1, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	440b      	add	r3, r1
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <USB_DeactivateEndpoint+0x1b4>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	ec337800 	.word	0xec337800
 8008ec4:	eff37800 	.word	0xeff37800

08008ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08a      	sub	sp, #40	@ 0x28
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 817f 	bne.w	80091e8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d132      	bne.n	8008f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	0151      	lsls	r1, r2, #5
 8008f04:	69fa      	ldr	r2, [r7, #28]
 8008f06:	440a      	add	r2, r1
 8008f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	0151      	lsls	r1, r2, #5
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	440a      	add	r2, r1
 8008f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f50:	0cdb      	lsrs	r3, r3, #19
 8008f52:	04db      	lsls	r3, r3, #19
 8008f54:	6113      	str	r3, [r2, #16]
 8008f56:	e097      	b.n	8009088 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f72:	0cdb      	lsrs	r3, r3, #19
 8008f74:	04db      	lsls	r3, r3, #19
 8008f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	0151      	lsls	r1, r2, #5
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11a      	bne.n	8008fd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d903      	bls.n	8008fb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fd4:	6113      	str	r3, [r2, #16]
 8008fd6:	e044      	b.n	8009062 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	8afb      	ldrh	r3, [r7, #22]
 8008ffe:	04d9      	lsls	r1, r3, #19
 8009000:	4ba4      	ldr	r3, [pc, #656]	@ (8009294 <USB_EPStartXfer+0x3cc>)
 8009002:	400b      	ands	r3, r1
 8009004:	69b9      	ldr	r1, [r7, #24]
 8009006:	0148      	lsls	r0, r1, #5
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	4401      	add	r1, r0
 800900c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009010:	4313      	orrs	r3, r2
 8009012:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	791b      	ldrb	r3, [r3, #4]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d122      	bne.n	8009062 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009036:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800903a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	075b      	lsls	r3, r3, #29
 800904e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009052:	69b9      	ldr	r1, [r7, #24]
 8009054:	0148      	lsls	r0, r1, #5
 8009056:	69f9      	ldr	r1, [r7, #28]
 8009058:	4401      	add	r1, r0
 800905a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800905e:	4313      	orrs	r3, r2
 8009060:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009078:	69b9      	ldr	r1, [r7, #24]
 800907a:	0148      	lsls	r0, r1, #5
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	4401      	add	r1, r0
 8009080:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009084:	4313      	orrs	r3, r2
 8009086:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d14b      	bne.n	8009126 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d128      	bne.n	8009104 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d110      	bne.n	80090e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e00f      	b.n	8009104 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009102:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800911e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	e166      	b.n	80093f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	0151      	lsls	r1, r2, #5
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	440a      	add	r2, r1
 800913c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009140:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009144:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	791b      	ldrb	r3, [r3, #4]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d015      	beq.n	800917a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 814e 	beq.w	80093f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f303 	lsl.w	r3, r1, r3
 800916e:	69f9      	ldr	r1, [r7, #28]
 8009170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009174:	4313      	orrs	r3, r2
 8009176:	634b      	str	r3, [r1, #52]	@ 0x34
 8009178:	e13c      	b.n	80093f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009186:	2b00      	cmp	r3, #0
 8009188:	d110      	bne.n	80091ac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	0151      	lsls	r1, r2, #5
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	440a      	add	r2, r1
 80091a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	e00f      	b.n	80091cc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	0151      	lsls	r1, r2, #5
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	440a      	add	r2, r1
 80091c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091ca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	68d9      	ldr	r1, [r3, #12]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	b298      	uxth	r0, r3
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	4603      	mov	r3, r0
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f9b9 	bl	8009558 <USB_WritePacket>
 80091e6:	e105      	b.n	80093f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009202:	0cdb      	lsrs	r3, r3, #19
 8009204:	04db      	lsls	r3, r3, #19
 8009206:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009222:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009226:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800922a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d132      	bne.n	8009298 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	689a      	ldr	r2, [r3, #8]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	691a      	ldr	r2, [r3, #16]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	0148      	lsls	r0, r1, #5
 8009264:	69f9      	ldr	r1, [r7, #28]
 8009266:	4401      	add	r1, r0
 8009268:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800926c:	4313      	orrs	r3, r2
 800926e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800928a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800928e:	6113      	str	r3, [r2, #16]
 8009290:	e062      	b.n	8009358 <USB_EPStartXfer+0x490>
 8009292:	bf00      	nop
 8009294:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d123      	bne.n	80092e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ac:	691a      	ldr	r2, [r3, #16]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b6:	69b9      	ldr	r1, [r7, #24]
 80092b8:	0148      	lsls	r0, r1, #5
 80092ba:	69f9      	ldr	r1, [r7, #28]
 80092bc:	4401      	add	r1, r0
 80092be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092c2:	4313      	orrs	r3, r2
 80092c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092e4:	6113      	str	r3, [r2, #16]
 80092e6:	e037      	b.n	8009358 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	1e5a      	subs	r2, r3, #1
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	8afa      	ldrh	r2, [r7, #22]
 8009304:	fb03 f202 	mul.w	r2, r3, r2
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	8afb      	ldrh	r3, [r7, #22]
 800931c:	04d9      	lsls	r1, r3, #19
 800931e:	4b38      	ldr	r3, [pc, #224]	@ (8009400 <USB_EPStartXfer+0x538>)
 8009320:	400b      	ands	r3, r1
 8009322:	69b9      	ldr	r1, [r7, #24]
 8009324:	0148      	lsls	r0, r1, #5
 8009326:	69f9      	ldr	r1, [r7, #28]
 8009328:	4401      	add	r1, r0
 800932a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800932e:	4313      	orrs	r3, r2
 8009330:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	69f9      	ldr	r1, [r7, #28]
 800934e:	4401      	add	r1, r0
 8009350:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009354:	4313      	orrs	r3, r2
 8009356:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d10d      	bne.n	800937a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68d9      	ldr	r1, [r3, #12]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009376:	460a      	mov	r2, r1
 8009378:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d128      	bne.n	80093d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d110      	bne.n	80093b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e00f      	b.n	80093d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1ff80000 	.word	0x1ff80000

08009404 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d14a      	bne.n	80094b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800943a:	f040 8086 	bne.w	800954a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800945c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009460:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009480:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009484:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009492:	4293      	cmp	r3, r2
 8009494:	d902      	bls.n	800949c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
          break;
 800949a:	e056      	b.n	800954a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094b4:	d0e7      	beq.n	8009486 <USB_EPStopXfer+0x82>
 80094b6:	e048      	b.n	800954a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094d0:	d13b      	bne.n	800954a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	7812      	ldrb	r2, [r2, #0]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009526:	4293      	cmp	r3, r2
 8009528:	d902      	bls.n	8009530 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e00c      	b.n	800954a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009548:	d0e7      	beq.n	800951a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
}
 800954c:	4618      	mov	r0, r3
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009558:	b480      	push	{r7}
 800955a:	b089      	sub	sp, #36	@ 0x24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4611      	mov	r1, r2
 8009564:	461a      	mov	r2, r3
 8009566:	460b      	mov	r3, r1
 8009568:	71fb      	strb	r3, [r7, #7]
 800956a:	4613      	mov	r3, r2
 800956c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009576:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800957a:	2b00      	cmp	r3, #0
 800957c:	d123      	bne.n	80095c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800957e:	88bb      	ldrh	r3, [r7, #4]
 8009580:	3303      	adds	r3, #3
 8009582:	089b      	lsrs	r3, r3, #2
 8009584:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	e018      	b.n	80095be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	031a      	lsls	r2, r3, #12
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	4413      	add	r3, r2
 8009594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009598:	461a      	mov	r2, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	3301      	adds	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	3301      	adds	r3, #1
 80095aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3301      	adds	r3, #1
 80095b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	3301      	adds	r3, #1
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3e2      	bcc.n	800958c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3724      	adds	r7, #36	@ 0x24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b08b      	sub	sp, #44	@ 0x2c
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	089b      	lsrs	r3, r3, #2
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	623b      	str	r3, [r7, #32]
 80095fe:	e014      	b.n	800962a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	601a      	str	r2, [r3, #0]
    pDest++;
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	3301      	adds	r3, #1
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	3301      	adds	r3, #1
 8009616:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	3301      	adds	r3, #1
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009620:	3301      	adds	r3, #1
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	3301      	adds	r3, #1
 8009628:	623b      	str	r3, [r7, #32]
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	429a      	cmp	r2, r3
 8009630:	d3e6      	bcc.n	8009600 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009632:	8bfb      	ldrh	r3, [r7, #30]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01e      	beq.n	8009676 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009642:	461a      	mov	r2, r3
 8009644:	f107 0310 	add.w	r3, r7, #16
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
 8009658:	b2da      	uxtb	r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	701a      	strb	r2, [r3, #0]
      i++;
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	3301      	adds	r3, #1
 8009662:	623b      	str	r3, [r7, #32]
      pDest++;
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	3301      	adds	r3, #1
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800966a:	8bfb      	ldrh	r3, [r7, #30]
 800966c:	3b01      	subs	r3, #1
 800966e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009670:	8bfb      	ldrh	r3, [r7, #30]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1ea      	bne.n	800964c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009678:	4618      	mov	r0, r3
 800967a:	372c      	adds	r7, #44	@ 0x2c
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d12c      	bne.n	80096fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db12      	blt.n	80096d8 <USB_EPSetStall+0x54>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00f      	beq.n	80096d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	e02b      	b.n	8009752 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	db12      	blt.n	8009732 <USB_EPSetStall+0xae>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00f      	beq.n	8009732 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800972c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009730:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800974c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d128      	bne.n	80097ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800979a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	791b      	ldrb	r3, [r3, #4]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d003      	beq.n	80097ac <USB_EPClearStall+0x4c>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	791b      	ldrb	r3, [r3, #4]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d138      	bne.n	800981e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	e027      	b.n	800981e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d003      	beq.n	80097fe <USB_EPClearStall+0x9e>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	791b      	ldrb	r3, [r3, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d10f      	bne.n	800981e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800981c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800984a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800984e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009860:	68f9      	ldr	r1, [r7, #12]
 8009862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009866:	4313      	orrs	r3, r2
 8009868:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098a6:	f023 0302 	bic.w	r3, r3, #2
 80098aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098d4:	f023 0303 	bic.w	r3, r3, #3
 80098d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4013      	ands	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009914:	68fb      	ldr	r3, [r7, #12]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	4013      	ands	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	0c1b      	lsrs	r3, r3, #16
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	4013      	ands	r3, r2
 8009978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	b29b      	uxth	r3, r3
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	4013      	ands	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099b8:	68bb      	ldr	r3, [r7, #8]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b087      	sub	sp, #28
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	fa22 f303 	lsr.w	r3, r2, r3
 80099f6:	01db      	lsls	r3, r3, #7
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4013      	ands	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a14:	68bb      	ldr	r3, [r7, #8]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	333c      	adds	r3, #60	@ 0x3c
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4a26      	ldr	r2, [pc, #152]	@ (8009b3c <USB_EP0_OutStart+0xb8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d90a      	bls.n	8009abe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ab8:	d101      	bne.n	8009abe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e037      	b.n	8009b2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aec:	f043 0318 	orr.w	r3, r3, #24
 8009af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009b04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d10f      	bne.n	8009b2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	4f54300a 	.word	0x4f54300a

08009b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b58:	d901      	bls.n	8009b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e01b      	b.n	8009b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	daf2      	bge.n	8009b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f043 0201 	orr.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b82:	d901      	bls.n	8009b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e006      	b.n	8009b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d0f0      	beq.n	8009b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
	...

08009ba4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bb0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bb4:	f002 fcac 	bl	800c510 <USBD_static_malloc>
 8009bb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d109      	bne.n	8009bd4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32b0      	adds	r2, #176	@ 0xb0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e0d4      	b.n	8009d7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009bd4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009bd8:	2100      	movs	r1, #0
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f003 fb25 	bl	800d22a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	32b0      	adds	r2, #176	@ 0xb0
 8009bea:	68f9      	ldr	r1, [r7, #12]
 8009bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32b0      	adds	r2, #176	@ 0xb0
 8009bfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7c1b      	ldrb	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d138      	bne.n	8009c7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8009d88 <USBD_CDC_Init+0x1e4>)
 8009c0e:	7819      	ldrb	r1, [r3, #0]
 8009c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c14:	2202      	movs	r2, #2
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 fb57 	bl	800c2ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8009d88 <USBD_CDC_Init+0x1e4>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 020f 	and.w	r2, r3, #15
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	440b      	add	r3, r1
 8009c30:	3324      	adds	r3, #36	@ 0x24
 8009c32:	2201      	movs	r2, #1
 8009c34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c36:	4b55      	ldr	r3, [pc, #340]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009c38:	7819      	ldrb	r1, [r3, #0]
 8009c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c3e:	2202      	movs	r2, #2
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f002 fb42 	bl	800c2ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c46:	4b51      	ldr	r3, [pc, #324]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 020f 	and.w	r2, r3, #15
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c5e:	2201      	movs	r2, #1
 8009c60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c62:	4b4b      	ldr	r3, [pc, #300]	@ (8009d90 <USBD_CDC_Init+0x1ec>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	f003 020f 	and.w	r2, r3, #15
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	440b      	add	r3, r1
 8009c76:	3326      	adds	r3, #38	@ 0x26
 8009c78:	2210      	movs	r2, #16
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	e035      	b.n	8009cea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c7e:	4b42      	ldr	r3, [pc, #264]	@ (8009d88 <USBD_CDC_Init+0x1e4>)
 8009c80:	7819      	ldrb	r1, [r3, #0]
 8009c82:	2340      	movs	r3, #64	@ 0x40
 8009c84:	2202      	movs	r2, #2
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f002 fb1f 	bl	800c2ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d88 <USBD_CDC_Init+0x1e4>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	f003 020f 	and.w	r2, r3, #15
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	440b      	add	r3, r1
 8009ca0:	3324      	adds	r3, #36	@ 0x24
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ca6:	4b39      	ldr	r3, [pc, #228]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009ca8:	7819      	ldrb	r1, [r3, #0]
 8009caa:	2340      	movs	r3, #64	@ 0x40
 8009cac:	2202      	movs	r2, #2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f002 fb0b 	bl	800c2ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cb4:	4b35      	ldr	r3, [pc, #212]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ccc:	2201      	movs	r2, #1
 8009cce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8009d90 <USBD_CDC_Init+0x1ec>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3326      	adds	r3, #38	@ 0x26
 8009ce6:	2210      	movs	r2, #16
 8009ce8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cea:	4b29      	ldr	r3, [pc, #164]	@ (8009d90 <USBD_CDC_Init+0x1ec>)
 8009cec:	7819      	ldrb	r1, [r3, #0]
 8009cee:	2308      	movs	r3, #8
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f002 fae9 	bl	800c2ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cf8:	4b25      	ldr	r3, [pc, #148]	@ (8009d90 <USBD_CDC_Init+0x1ec>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 020f 	and.w	r2, r3, #15
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	3324      	adds	r3, #36	@ 0x24
 8009d0e:	2201      	movs	r2, #1
 8009d10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	33b0      	adds	r3, #176	@ 0xb0
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e018      	b.n	8009d7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	7c1b      	ldrb	r3, [r3, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d54:	4b0d      	ldr	r3, [pc, #52]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009d56:	7819      	ldrb	r1, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f002 fba0 	bl	800c4a8 <USBD_LL_PrepareReceive>
 8009d68:	e008      	b.n	8009d7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d6a:	4b08      	ldr	r3, [pc, #32]	@ (8009d8c <USBD_CDC_Init+0x1e8>)
 8009d6c:	7819      	ldrb	r1, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d74:	2340      	movs	r3, #64	@ 0x40
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f002 fb96 	bl	800c4a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000093 	.word	0x20000093
 8009d8c:	20000094 	.word	0x20000094
 8009d90:	20000095 	.word	0x20000095

08009d94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009da0:	4b3a      	ldr	r3, [pc, #232]	@ (8009e8c <USBD_CDC_DeInit+0xf8>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f002 fab5 	bl	800c316 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009dac:	4b37      	ldr	r3, [pc, #220]	@ (8009e8c <USBD_CDC_DeInit+0xf8>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3324      	adds	r3, #36	@ 0x24
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009dc6:	4b32      	ldr	r3, [pc, #200]	@ (8009e90 <USBD_CDC_DeInit+0xfc>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f002 faa2 	bl	800c316 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8009e90 <USBD_CDC_DeInit+0xfc>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 020f 	and.w	r2, r3, #15
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dea:	2200      	movs	r2, #0
 8009dec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dee:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <USBD_CDC_DeInit+0x100>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f002 fa8e 	bl	800c316 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dfa:	4b26      	ldr	r3, [pc, #152]	@ (8009e94 <USBD_CDC_DeInit+0x100>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 020f 	and.w	r2, r3, #15
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3324      	adds	r3, #36	@ 0x24
 8009e10:	2200      	movs	r2, #0
 8009e12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e14:	4b1f      	ldr	r3, [pc, #124]	@ (8009e94 <USBD_CDC_DeInit+0x100>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 020f 	and.w	r2, r3, #15
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	3326      	adds	r3, #38	@ 0x26
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	32b0      	adds	r2, #176	@ 0xb0
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01f      	beq.n	8009e80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	33b0      	adds	r3, #176	@ 0xb0
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	32b0      	adds	r2, #176	@ 0xb0
 8009e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 fb62 	bl	800c52c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	32b0      	adds	r2, #176	@ 0xb0
 8009e72:	2100      	movs	r1, #0
 8009e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000093 	.word	0x20000093
 8009e90:	20000094 	.word	0x20000094
 8009e94:	20000095 	.word	0x20000095

08009e98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32b0      	adds	r2, #176	@ 0xb0
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e0bf      	b.n	800a048 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d050      	beq.n	8009f76 <USBD_CDC_Setup+0xde>
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	f040 80af 	bne.w	800a038 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	88db      	ldrh	r3, [r3, #6]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d03a      	beq.n	8009f58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	b25b      	sxtb	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da1b      	bge.n	8009f24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	33b0      	adds	r3, #176	@ 0xb0
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	88d2      	ldrh	r2, [r2, #6]
 8009f08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b07      	cmp	r3, #7
 8009f10:	bf28      	it	cs
 8009f12:	2307      	movcs	r3, #7
 8009f14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	89fa      	ldrh	r2, [r7, #14]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 fd93 	bl	800ba48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f22:	e090      	b.n	800a046 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	785a      	ldrb	r2, [r3, #1]
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f34:	d803      	bhi.n	8009f3e <USBD_CDC_Setup+0xa6>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	88db      	ldrh	r3, [r3, #6]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	e000      	b.n	8009f40 <USBD_CDC_Setup+0xa8>
 8009f3e:	2240      	movs	r2, #64	@ 0x40
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f46:	6939      	ldr	r1, [r7, #16]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fda5 	bl	800baa0 <USBD_CtlPrepareRx>
      break;
 8009f56:	e076      	b.n	800a046 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	33b0      	adds	r3, #176	@ 0xb0
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	7850      	ldrb	r0, [r2, #1]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	4798      	blx	r3
      break;
 8009f74:	e067      	b.n	800a046 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b0b      	cmp	r3, #11
 8009f7c:	d851      	bhi.n	800a022 <USBD_CDC_Setup+0x18a>
 8009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <USBD_CDC_Setup+0xec>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009fb5 	.word	0x08009fb5
 8009f88:	0800a031 	.word	0x0800a031
 8009f8c:	0800a023 	.word	0x0800a023
 8009f90:	0800a023 	.word	0x0800a023
 8009f94:	0800a023 	.word	0x0800a023
 8009f98:	0800a023 	.word	0x0800a023
 8009f9c:	0800a023 	.word	0x0800a023
 8009fa0:	0800a023 	.word	0x0800a023
 8009fa4:	0800a023 	.word	0x0800a023
 8009fa8:	0800a023 	.word	0x0800a023
 8009fac:	08009fdf 	.word	0x08009fdf
 8009fb0:	0800a009 	.word	0x0800a009
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d107      	bne.n	8009fd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fc0:	f107 030a 	add.w	r3, r7, #10
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fd3d 	bl	800ba48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fce:	e032      	b.n	800a036 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 fcbb 	bl	800b94e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	75fb      	strb	r3, [r7, #23]
          break;
 8009fdc:	e02b      	b.n	800a036 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d107      	bne.n	8009ffa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fea:	f107 030d 	add.w	r3, r7, #13
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fd28 	bl	800ba48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ff8:	e01d      	b.n	800a036 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fca6 	bl	800b94e <USBD_CtlError>
            ret = USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	75fb      	strb	r3, [r7, #23]
          break;
 800a006:	e016      	b.n	800a036 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b03      	cmp	r3, #3
 800a012:	d00f      	beq.n	800a034 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fc99 	bl	800b94e <USBD_CtlError>
            ret = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a020:	e008      	b.n	800a034 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 fc92 	bl	800b94e <USBD_CtlError>
          ret = USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	75fb      	strb	r3, [r7, #23]
          break;
 800a02e:	e002      	b.n	800a036 <USBD_CDC_Setup+0x19e>
          break;
 800a030:	bf00      	nop
 800a032:	e008      	b.n	800a046 <USBD_CDC_Setup+0x1ae>
          break;
 800a034:	bf00      	nop
      }
      break;
 800a036:	e006      	b.n	800a046 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f001 fc87 	bl	800b94e <USBD_CtlError>
      ret = USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	75fb      	strb	r3, [r7, #23]
      break;
 800a044:	bf00      	nop
  }

  return (uint8_t)ret;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a062:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	32b0      	adds	r2, #176	@ 0xb0
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a076:	2303      	movs	r3, #3
 800a078:	e065      	b.n	800a146 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	32b0      	adds	r2, #176	@ 0xb0
 800a084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a088:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	3318      	adds	r3, #24
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d02f      	beq.n	800a104 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	f003 020f 	and.w	r2, r3, #15
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	f003 010f 	and.w	r1, r3, #15
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	440b      	add	r3, r1
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4403      	add	r3, r0
 800a0cc:	331c      	adds	r3, #28
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d112      	bne.n	800a104 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	f003 020f 	and.w	r2, r3, #15
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3318      	adds	r3, #24
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0f6:	78f9      	ldrb	r1, [r7, #3]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f002 f9b2 	bl	800c466 <USBD_LL_Transmit>
 800a102:	e01f      	b.n	800a144 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	33b0      	adds	r3, #176	@ 0xb0
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d010      	beq.n	800a144 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	33b0      	adds	r3, #176	@ 0xb0
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	32b0      	adds	r2, #176	@ 0xb0
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	32b0      	adds	r2, #176	@ 0xb0
 800a174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e01a      	b.n	800a1b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f002 f9b0 	bl	800c4ea <USBD_LL_GetRxDataSize>
 800a18a:	4602      	mov	r2, r0
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	33b0      	adds	r3, #176	@ 0xb0
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	32b0      	adds	r2, #176	@ 0xb0
 800a1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e024      	b.n	800a22a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	33b0      	adds	r3, #176	@ 0xb0
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d019      	beq.n	800a228 <USBD_CDC_EP0_RxReady+0x6a>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1fa:	2bff      	cmp	r3, #255	@ 0xff
 800a1fc:	d014      	beq.n	800a228 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	33b0      	adds	r3, #176	@ 0xb0
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a216:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a21e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	22ff      	movs	r2, #255	@ 0xff
 800a224:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a23c:	2182      	movs	r1, #130	@ 0x82
 800a23e:	4818      	ldr	r0, [pc, #96]	@ (800a2a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a240:	f000 fd4f 	bl	800ace2 <USBD_GetEpDesc>
 800a244:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a246:	2101      	movs	r1, #1
 800a248:	4815      	ldr	r0, [pc, #84]	@ (800a2a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a24a:	f000 fd4a 	bl	800ace2 <USBD_GetEpDesc>
 800a24e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a250:	2181      	movs	r1, #129	@ 0x81
 800a252:	4813      	ldr	r0, [pc, #76]	@ (800a2a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a254:	f000 fd45 	bl	800ace2 <USBD_GetEpDesc>
 800a258:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2210      	movs	r2, #16
 800a264:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2200      	movs	r2, #0
 800a270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a274:	711a      	strb	r2, [r3, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d006      	beq.n	800a28e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a288:	711a      	strb	r2, [r3, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2243      	movs	r2, #67	@ 0x43
 800a292:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a294:	4b02      	ldr	r3, [pc, #8]	@ (800a2a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000050 	.word	0x20000050

0800a2a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2ac:	2182      	movs	r1, #130	@ 0x82
 800a2ae:	4818      	ldr	r0, [pc, #96]	@ (800a310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2b0:	f000 fd17 	bl	800ace2 <USBD_GetEpDesc>
 800a2b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4815      	ldr	r0, [pc, #84]	@ (800a310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2ba:	f000 fd12 	bl	800ace2 <USBD_GetEpDesc>
 800a2be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2c0:	2181      	movs	r1, #129	@ 0x81
 800a2c2:	4813      	ldr	r0, [pc, #76]	@ (800a310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2c4:	f000 fd0d 	bl	800ace2 <USBD_GetEpDesc>
 800a2c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2210      	movs	r2, #16
 800a2d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d006      	beq.n	800a2ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	711a      	strb	r2, [r3, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f042 0202 	orr.w	r2, r2, #2
 800a2e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d006      	beq.n	800a2fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	711a      	strb	r2, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f042 0202 	orr.w	r2, r2, #2
 800a2fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2243      	movs	r2, #67	@ 0x43
 800a302:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a304:	4b02      	ldr	r3, [pc, #8]	@ (800a310 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20000050 	.word	0x20000050

0800a314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a31c:	2182      	movs	r1, #130	@ 0x82
 800a31e:	4818      	ldr	r0, [pc, #96]	@ (800a380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a320:	f000 fcdf 	bl	800ace2 <USBD_GetEpDesc>
 800a324:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a326:	2101      	movs	r1, #1
 800a328:	4815      	ldr	r0, [pc, #84]	@ (800a380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a32a:	f000 fcda 	bl	800ace2 <USBD_GetEpDesc>
 800a32e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a330:	2181      	movs	r1, #129	@ 0x81
 800a332:	4813      	ldr	r0, [pc, #76]	@ (800a380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a334:	f000 fcd5 	bl	800ace2 <USBD_GetEpDesc>
 800a338:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2210      	movs	r2, #16
 800a344:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2200      	movs	r2, #0
 800a350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a354:	711a      	strb	r2, [r3, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d006      	beq.n	800a36e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a368:	711a      	strb	r2, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2243      	movs	r2, #67	@ 0x43
 800a372:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a374:	4b02      	ldr	r3, [pc, #8]	@ (800a380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000050 	.word	0x20000050

0800a384 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	220a      	movs	r2, #10
 800a390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a392:	4b03      	ldr	r3, [pc, #12]	@ (800a3a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	2000000c 	.word	0x2000000c

0800a3a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e009      	b.n	800a3cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	33b0      	adds	r3, #176	@ 0xb0
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	32b0      	adds	r2, #176	@ 0xb0
 800a3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e008      	b.n	800a410 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	32b0      	adds	r2, #176	@ 0xb0
 800a430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e004      	b.n	800a44a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
	...

0800a458 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	32b0      	adds	r2, #176	@ 0xb0
 800a46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a470:	2301      	movs	r3, #1
 800a472:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e025      	b.n	800a4ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a484:	2b00      	cmp	r3, #0
 800a486:	d11f      	bne.n	800a4c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a490:	4b10      	ldr	r3, [pc, #64]	@ (800a4d4 <USBD_CDC_TransmitPacket+0x7c>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	f003 020f 	and.w	r2, r3, #15
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4403      	add	r3, r0
 800a4aa:	3318      	adds	r3, #24
 800a4ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a4ae:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <USBD_CDC_TransmitPacket+0x7c>)
 800a4b0:	7819      	ldrb	r1, [r3, #0]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 ffd1 	bl	800c466 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000093 	.word	0x20000093

0800a4d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32b0      	adds	r2, #176	@ 0xb0
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	32b0      	adds	r2, #176	@ 0xb0
 800a4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a502:	2303      	movs	r3, #3
 800a504:	e018      	b.n	800a538 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7c1b      	ldrb	r3, [r3, #16]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a50e:	4b0c      	ldr	r3, [pc, #48]	@ (800a540 <USBD_CDC_ReceivePacket+0x68>)
 800a510:	7819      	ldrb	r1, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 ffc3 	bl	800c4a8 <USBD_LL_PrepareReceive>
 800a522:	e008      	b.n	800a536 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a524:	4b06      	ldr	r3, [pc, #24]	@ (800a540 <USBD_CDC_ReceivePacket+0x68>)
 800a526:	7819      	ldrb	r1, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a52e:	2340      	movs	r3, #64	@ 0x40
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 ffb9 	bl	800c4a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000094 	.word	0x20000094

0800a544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4613      	mov	r3, r2
 800a550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a558:	2303      	movs	r3, #3
 800a55a:	e01f      	b.n	800a59c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	79fa      	ldrb	r2, [r7, #7]
 800a58e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f001 fe33 	bl	800c1fc <USBD_LL_Init>
 800a596:	4603      	mov	r3, r0
 800a598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e025      	b.n	800a608 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	32ae      	adds	r2, #174	@ 0xae
 800a5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00f      	beq.n	800a5f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	32ae      	adds	r2, #174	@ 0xae
 800a5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e8:	f107 020e 	add.w	r2, r7, #14
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 fe3b 	bl	800c294 <USBD_LL_Start>
 800a61e:	4603      	mov	r3, r0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a630:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	460b      	mov	r3, r1
 800a648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	4611      	mov	r1, r2
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	4798      	blx	r3
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	460b      	mov	r3, r1
 800a680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	4611      	mov	r1, r2
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	4798      	blx	r3
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f001 f90c 	bl	800b8da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d01a      	beq.n	800a71c <USBD_LL_SetupStage+0x72>
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d822      	bhi.n	800a730 <USBD_LL_SetupStage+0x86>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <USBD_LL_SetupStage+0x4a>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d00a      	beq.n	800a708 <USBD_LL_SetupStage+0x5e>
 800a6f2:	e01d      	b.n	800a730 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fb63 	bl	800adc8 <USBD_StdDevReq>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
      break;
 800a706:	e020      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fbcb 	bl	800aeac <USBD_StdItfReq>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
      break;
 800a71a:	e016      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fc2d 	bl	800af84 <USBD_StdEPReq>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]
      break;
 800a72e:	e00c      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a736:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 fe08 	bl	800c354 <USBD_LL_StallEP>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
      break;
 800a748:	bf00      	nop
  }

  return ret;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	460b      	mov	r3, r1
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a766:	7afb      	ldrb	r3, [r7, #11]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d16e      	bne.n	800a84a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a772:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	f040 8098 	bne.w	800a8b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d913      	bls.n	800a7b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	1ad2      	subs	r2, r2, r3
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	bf28      	it	cs
 800a7a6:	4613      	movcs	r3, r2
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f001 f994 	bl	800bada <USBD_CtlContinueRx>
 800a7b2:	e07d      	b.n	800a8b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d014      	beq.n	800a7ec <USBD_LL_DataOutStage+0x98>
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d81d      	bhi.n	800a802 <USBD_LL_DataOutStage+0xae>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <USBD_LL_DataOutStage+0x7c>
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d003      	beq.n	800a7d6 <USBD_LL_DataOutStage+0x82>
 800a7ce:	e018      	b.n	800a802 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d4:	e018      	b.n	800a808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 fa64 	bl	800acae <USBD_CoreFindIF>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7ea:	e00d      	b.n	800a808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fa66 	bl	800acc8 <USBD_CoreFindEP>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75bb      	strb	r3, [r7, #22]
            break;
 800a800:	e002      	b.n	800a808 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	75bb      	strb	r3, [r7, #22]
            break;
 800a806:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a808:	7dbb      	ldrb	r3, [r7, #22]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d119      	bne.n	800a842 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b03      	cmp	r3, #3
 800a818:	d113      	bne.n	800a842 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a81a:	7dba      	ldrb	r2, [r7, #22]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	32ae      	adds	r2, #174	@ 0xae
 800a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00b      	beq.n	800a842 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a82a:	7dba      	ldrb	r2, [r7, #22]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a832:	7dba      	ldrb	r2, [r7, #22]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	32ae      	adds	r2, #174	@ 0xae
 800a838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f001 f95a 	bl	800bafc <USBD_CtlSendStatus>
 800a848:	e032      	b.n	800a8b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a850:	b2db      	uxtb	r3, r3
 800a852:	4619      	mov	r1, r3
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 fa37 	bl	800acc8 <USBD_CoreFindEP>
 800a85a:	4603      	mov	r3, r0
 800a85c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a85e:	7dbb      	ldrb	r3, [r7, #22]
 800a860:	2bff      	cmp	r3, #255	@ 0xff
 800a862:	d025      	beq.n	800a8b0 <USBD_LL_DataOutStage+0x15c>
 800a864:	7dbb      	ldrb	r3, [r7, #22]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d122      	bne.n	800a8b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b03      	cmp	r3, #3
 800a874:	d117      	bne.n	800a8a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a876:	7dba      	ldrb	r2, [r7, #22]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	32ae      	adds	r2, #174	@ 0xae
 800a87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00f      	beq.n	800a8a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a886:	7dba      	ldrb	r2, [r7, #22]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a88e:	7dba      	ldrb	r2, [r7, #22]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	32ae      	adds	r2, #174	@ 0xae
 800a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	7afa      	ldrb	r2, [r7, #11]
 800a89c:	4611      	mov	r1, r2
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
 800a8ae:	e000      	b.n	800a8b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d16f      	bne.n	800a9ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d15a      	bne.n	800a994 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d914      	bls.n	800a914 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f001 f8bc 	bl	800ba7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a906:	2300      	movs	r3, #0
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f001 fdcb 	bl	800c4a8 <USBD_LL_PrepareReceive>
 800a912:	e03f      	b.n	800a994 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d11c      	bne.n	800a95a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a928:	429a      	cmp	r2, r3
 800a92a:	d316      	bcc.n	800a95a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a936:	429a      	cmp	r2, r3
 800a938:	d20f      	bcs.n	800a95a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a93a:	2200      	movs	r2, #0
 800a93c:	2100      	movs	r1, #0
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f001 f89d 	bl	800ba7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a94c:	2300      	movs	r3, #0
 800a94e:	2200      	movs	r2, #0
 800a950:	2100      	movs	r1, #0
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f001 fda8 	bl	800c4a8 <USBD_LL_PrepareReceive>
 800a958:	e01c      	b.n	800a994 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b03      	cmp	r3, #3
 800a964:	d10f      	bne.n	800a986 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a986:	2180      	movs	r1, #128	@ 0x80
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f001 fce3 	bl	800c354 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f001 f8c7 	bl	800bb22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d03a      	beq.n	800aa14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fe42 	bl	800a628 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a9ac:	e032      	b.n	800aa14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 f985 	bl	800acc8 <USBD_CoreFindEP>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
 800a9c4:	2bff      	cmp	r3, #255	@ 0xff
 800a9c6:	d025      	beq.n	800aa14 <USBD_LL_DataInStage+0x15a>
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d122      	bne.n	800aa14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d11c      	bne.n	800aa14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9da:	7dfa      	ldrb	r2, [r7, #23]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	32ae      	adds	r2, #174	@ 0xae
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d014      	beq.n	800aa14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9ea:	7dfa      	ldrb	r2, [r7, #23]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9f2:	7dfa      	ldrb	r2, [r7, #23]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	32ae      	adds	r2, #174	@ 0xae
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	7afa      	ldrb	r2, [r7, #11]
 800aa00:	4611      	mov	r1, r2
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa0a:	7dbb      	ldrb	r3, [r7, #22]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa10:	7dbb      	ldrb	r3, [r7, #22]
 800aa12:	e000      	b.n	800aa16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d014      	beq.n	800aa84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	6852      	ldr	r2, [r2, #4]
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	4611      	mov	r1, r2
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa84:	2340      	movs	r3, #64	@ 0x40
 800aa86:	2200      	movs	r2, #0
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 fc1d 	bl	800c2ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2240      	movs	r2, #64	@ 0x40
 800aa9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaa0:	2340      	movs	r3, #64	@ 0x40
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2180      	movs	r1, #128	@ 0x80
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fc0f 	bl	800c2ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2240      	movs	r2, #64	@ 0x40
 800aab6:	621a      	str	r2, [r3, #32]

  return ret;
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d006      	beq.n	800ab04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2204      	movs	r2, #4
 800ab08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	d106      	bne.n	800ab3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d110      	bne.n	800ab80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d005      	beq.n	800ab80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32ae      	adds	r2, #174	@ 0xae
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e01c      	b.n	800abe6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d115      	bne.n	800abe4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	32ae      	adds	r2, #174	@ 0xae
 800abc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	32ae      	adds	r2, #174	@ 0xae
 800abd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	32ae      	adds	r2, #174	@ 0xae
 800ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e01c      	b.n	800ac4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d115      	bne.n	800ac48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	32ae      	adds	r2, #174	@ 0xae
 800ac26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	32ae      	adds	r2, #174	@ 0xae
 800ac3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac40:	78fa      	ldrb	r2, [r7, #3]
 800ac42:	4611      	mov	r1, r2
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b083      	sub	sp, #12
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00e      	beq.n	800aca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6852      	ldr	r2, [r2, #4]
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	4611      	mov	r1, r2
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aca0:	2303      	movs	r3, #3
 800aca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	885b      	ldrh	r3, [r3, #2]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d91f      	bls.n	800ad48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad0e:	e013      	b.n	800ad38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad10:	f107 030a 	add.w	r3, r7, #10
 800ad14:	4619      	mov	r1, r3
 800ad16:	6978      	ldr	r0, [r7, #20]
 800ad18:	f000 f81b 	bl	800ad52 <USBD_GetNextDesc>
 800ad1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	785b      	ldrb	r3, [r3, #1]
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d108      	bne.n	800ad38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	789b      	ldrb	r3, [r3, #2]
 800ad2e:	78fa      	ldrb	r2, [r7, #3]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d008      	beq.n	800ad46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	885b      	ldrh	r3, [r3, #2]
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	897b      	ldrh	r3, [r7, #10]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d8e5      	bhi.n	800ad10 <USBD_GetEpDesc+0x2e>
 800ad44:	e000      	b.n	800ad48 <USBD_GetEpDesc+0x66>
          break;
 800ad46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad48:	693b      	ldr	r3, [r7, #16]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b085      	sub	sp, #20
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	7812      	ldrb	r2, [r2, #0]
 800ad68:	4413      	add	r3, r2
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4413      	add	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b087      	sub	sp, #28
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ada8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	b21a      	sxth	r2, r3
 800adb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	b21b      	sxth	r3, r3
 800adb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800adba:	89fb      	ldrh	r3, [r7, #14]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adde:	2b40      	cmp	r3, #64	@ 0x40
 800ade0:	d005      	beq.n	800adee <USBD_StdDevReq+0x26>
 800ade2:	2b40      	cmp	r3, #64	@ 0x40
 800ade4:	d857      	bhi.n	800ae96 <USBD_StdDevReq+0xce>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00f      	beq.n	800ae0a <USBD_StdDevReq+0x42>
 800adea:	2b20      	cmp	r3, #32
 800adec:	d153      	bne.n	800ae96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	32ae      	adds	r2, #174	@ 0xae
 800adf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]
      break;
 800ae08:	e04a      	b.n	800aea0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b09      	cmp	r3, #9
 800ae10:	d83b      	bhi.n	800ae8a <USBD_StdDevReq+0xc2>
 800ae12:	a201      	add	r2, pc, #4	@ (adr r2, 800ae18 <USBD_StdDevReq+0x50>)
 800ae14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae18:	0800ae6d 	.word	0x0800ae6d
 800ae1c:	0800ae81 	.word	0x0800ae81
 800ae20:	0800ae8b 	.word	0x0800ae8b
 800ae24:	0800ae77 	.word	0x0800ae77
 800ae28:	0800ae8b 	.word	0x0800ae8b
 800ae2c:	0800ae4b 	.word	0x0800ae4b
 800ae30:	0800ae41 	.word	0x0800ae41
 800ae34:	0800ae8b 	.word	0x0800ae8b
 800ae38:	0800ae63 	.word	0x0800ae63
 800ae3c:	0800ae55 	.word	0x0800ae55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fa3c 	bl	800b2c0 <USBD_GetDescriptor>
          break;
 800ae48:	e024      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fba1 	bl	800b594 <USBD_SetAddress>
          break;
 800ae52:	e01f      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fbe0 	bl	800b61c <USBD_SetConfig>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
          break;
 800ae60:	e018      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fc83 	bl	800b770 <USBD_GetConfig>
          break;
 800ae6a:	e013      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fcb4 	bl	800b7dc <USBD_GetStatus>
          break;
 800ae74:	e00e      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fce3 	bl	800b844 <USBD_SetFeature>
          break;
 800ae7e:	e009      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fd07 	bl	800b896 <USBD_ClrFeature>
          break;
 800ae88:	e004      	b.n	800ae94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fd5e 	bl	800b94e <USBD_CtlError>
          break;
 800ae92:	bf00      	nop
      }
      break;
 800ae94:	e004      	b.n	800aea0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fd58 	bl	800b94e <USBD_CtlError>
      break;
 800ae9e:	bf00      	nop
  }

  return ret;
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop

0800aeac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aec2:	2b40      	cmp	r3, #64	@ 0x40
 800aec4:	d005      	beq.n	800aed2 <USBD_StdItfReq+0x26>
 800aec6:	2b40      	cmp	r3, #64	@ 0x40
 800aec8:	d852      	bhi.n	800af70 <USBD_StdItfReq+0xc4>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <USBD_StdItfReq+0x26>
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d14e      	bne.n	800af70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	3b01      	subs	r3, #1
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d840      	bhi.n	800af62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	889b      	ldrh	r3, [r3, #4]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d836      	bhi.n	800af58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	889b      	ldrh	r3, [r3, #4]
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fedb 	bl	800acae <USBD_CoreFindIF>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	2bff      	cmp	r3, #255	@ 0xff
 800af00:	d01d      	beq.n	800af3e <USBD_StdItfReq+0x92>
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11a      	bne.n	800af3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af08:	7bba      	ldrb	r2, [r7, #14]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	32ae      	adds	r2, #174	@ 0xae
 800af0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00f      	beq.n	800af38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af18:	7bba      	ldrb	r2, [r7, #14]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af20:	7bba      	ldrb	r2, [r7, #14]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	32ae      	adds	r2, #174	@ 0xae
 800af26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af36:	e004      	b.n	800af42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af38:	2303      	movs	r3, #3
 800af3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af3c:	e001      	b.n	800af42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af3e:	2303      	movs	r3, #3
 800af40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	88db      	ldrh	r3, [r3, #6]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d110      	bne.n	800af6c <USBD_StdItfReq+0xc0>
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10d      	bne.n	800af6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fdd3 	bl	800bafc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af56:	e009      	b.n	800af6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fcf7 	bl	800b94e <USBD_CtlError>
          break;
 800af60:	e004      	b.n	800af6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fcf2 	bl	800b94e <USBD_CtlError>
          break;
 800af6a:	e000      	b.n	800af6e <USBD_StdItfReq+0xc2>
          break;
 800af6c:	bf00      	nop
      }
      break;
 800af6e:	e004      	b.n	800af7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fceb 	bl	800b94e <USBD_CtlError>
      break;
 800af78:	bf00      	nop
  }

  return ret;
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	889b      	ldrh	r3, [r3, #4]
 800af96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afa0:	2b40      	cmp	r3, #64	@ 0x40
 800afa2:	d007      	beq.n	800afb4 <USBD_StdEPReq+0x30>
 800afa4:	2b40      	cmp	r3, #64	@ 0x40
 800afa6:	f200 817f 	bhi.w	800b2a8 <USBD_StdEPReq+0x324>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d02a      	beq.n	800b004 <USBD_StdEPReq+0x80>
 800afae:	2b20      	cmp	r3, #32
 800afb0:	f040 817a 	bne.w	800b2a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fe85 	bl	800acc8 <USBD_CoreFindEP>
 800afbe:	4603      	mov	r3, r0
 800afc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afc2:	7b7b      	ldrb	r3, [r7, #13]
 800afc4:	2bff      	cmp	r3, #255	@ 0xff
 800afc6:	f000 8174 	beq.w	800b2b2 <USBD_StdEPReq+0x32e>
 800afca:	7b7b      	ldrb	r3, [r7, #13]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f040 8170 	bne.w	800b2b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800afd2:	7b7a      	ldrb	r2, [r7, #13]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afda:	7b7a      	ldrb	r2, [r7, #13]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	32ae      	adds	r2, #174	@ 0xae
 800afe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8163 	beq.w	800b2b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afec:	7b7a      	ldrb	r2, [r7, #13]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	32ae      	adds	r2, #174	@ 0xae
 800aff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
 800affe:	4603      	mov	r3, r0
 800b000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b002:	e156      	b.n	800b2b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d008      	beq.n	800b01e <USBD_StdEPReq+0x9a>
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	f300 8145 	bgt.w	800b29c <USBD_StdEPReq+0x318>
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 809b 	beq.w	800b14e <USBD_StdEPReq+0x1ca>
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d03c      	beq.n	800b096 <USBD_StdEPReq+0x112>
 800b01c:	e13e      	b.n	800b29c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d002      	beq.n	800b030 <USBD_StdEPReq+0xac>
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d016      	beq.n	800b05c <USBD_StdEPReq+0xd8>
 800b02e:	e02c      	b.n	800b08a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00d      	beq.n	800b052 <USBD_StdEPReq+0xce>
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	2b80      	cmp	r3, #128	@ 0x80
 800b03a:	d00a      	beq.n	800b052 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 f987 	bl	800c354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b046:	2180      	movs	r1, #128	@ 0x80
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 f983 	bl	800c354 <USBD_LL_StallEP>
 800b04e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b050:	e020      	b.n	800b094 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fc7a 	bl	800b94e <USBD_CtlError>
              break;
 800b05a:	e01b      	b.n	800b094 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	885b      	ldrh	r3, [r3, #2]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10e      	bne.n	800b082 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00b      	beq.n	800b082 <USBD_StdEPReq+0xfe>
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	2b80      	cmp	r3, #128	@ 0x80
 800b06e:	d008      	beq.n	800b082 <USBD_StdEPReq+0xfe>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	88db      	ldrh	r3, [r3, #6]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d104      	bne.n	800b082 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f969 	bl	800c354 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fd3a 	bl	800bafc <USBD_CtlSendStatus>

              break;
 800b088:	e004      	b.n	800b094 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fc5e 	bl	800b94e <USBD_CtlError>
              break;
 800b092:	bf00      	nop
          }
          break;
 800b094:	e107      	b.n	800b2a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d002      	beq.n	800b0a8 <USBD_StdEPReq+0x124>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d016      	beq.n	800b0d4 <USBD_StdEPReq+0x150>
 800b0a6:	e04b      	b.n	800b140 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00d      	beq.n	800b0ca <USBD_StdEPReq+0x146>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b80      	cmp	r3, #128	@ 0x80
 800b0b2:	d00a      	beq.n	800b0ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 f94b 	bl	800c354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0be:	2180      	movs	r1, #128	@ 0x80
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 f947 	bl	800c354 <USBD_LL_StallEP>
 800b0c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0c8:	e040      	b.n	800b14c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc3e 	bl	800b94e <USBD_CtlError>
              break;
 800b0d2:	e03b      	b.n	800b14c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d136      	bne.n	800b14a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d004      	beq.n	800b0f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 f951 	bl	800c392 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fd03 	bl	800bafc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fde4 	bl	800acc8 <USBD_CoreFindEP>
 800b100:	4603      	mov	r3, r0
 800b102:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b104:	7b7b      	ldrb	r3, [r7, #13]
 800b106:	2bff      	cmp	r3, #255	@ 0xff
 800b108:	d01f      	beq.n	800b14a <USBD_StdEPReq+0x1c6>
 800b10a:	7b7b      	ldrb	r3, [r7, #13]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11c      	bne.n	800b14a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b110:	7b7a      	ldrb	r2, [r7, #13]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b118:	7b7a      	ldrb	r2, [r7, #13]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	32ae      	adds	r2, #174	@ 0xae
 800b11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d010      	beq.n	800b14a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b128:	7b7a      	ldrb	r2, [r7, #13]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	32ae      	adds	r2, #174	@ 0xae
 800b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b13e:	e004      	b.n	800b14a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fc03 	bl	800b94e <USBD_CtlError>
              break;
 800b148:	e000      	b.n	800b14c <USBD_StdEPReq+0x1c8>
              break;
 800b14a:	bf00      	nop
          }
          break;
 800b14c:	e0ab      	b.n	800b2a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b02      	cmp	r3, #2
 800b158:	d002      	beq.n	800b160 <USBD_StdEPReq+0x1dc>
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d032      	beq.n	800b1c4 <USBD_StdEPReq+0x240>
 800b15e:	e097      	b.n	800b290 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <USBD_StdEPReq+0x1f2>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b80      	cmp	r3, #128	@ 0x80
 800b16a:	d004      	beq.n	800b176 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fbed 	bl	800b94e <USBD_CtlError>
                break;
 800b174:	e091      	b.n	800b29a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	da0b      	bge.n	800b196 <USBD_StdEPReq+0x212>
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	3310      	adds	r3, #16
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	3304      	adds	r3, #4
 800b194:	e00b      	b.n	800b1ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fc43 	bl	800ba48 <USBD_CtlSendData>
              break;
 800b1c2:	e06a      	b.n	800b29a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	da11      	bge.n	800b1f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	3324      	adds	r3, #36	@ 0x24
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d117      	bne.n	800b216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fbb0 	bl	800b94e <USBD_CtlError>
                  break;
 800b1ee:	e054      	b.n	800b29a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	f003 020f 	and.w	r2, r3, #15
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	440b      	add	r3, r1
 800b202:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb9d 	bl	800b94e <USBD_CtlError>
                  break;
 800b214:	e041      	b.n	800b29a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da0b      	bge.n	800b236 <USBD_StdEPReq+0x2b2>
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	3310      	adds	r3, #16
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	3304      	adds	r3, #4
 800b234:	e00b      	b.n	800b24e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b23c:	4613      	mov	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	4413      	add	r3, r2
 800b24c:	3304      	adds	r3, #4
 800b24e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <USBD_StdEPReq+0x2d8>
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	2b80      	cmp	r3, #128	@ 0x80
 800b25a:	d103      	bne.n	800b264 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e00e      	b.n	800b282 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 f8b1 	bl	800c3d0 <USBD_LL_IsStallEP>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2201      	movs	r2, #1
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	e002      	b.n	800b282 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2200      	movs	r2, #0
 800b280:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2202      	movs	r2, #2
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fbdd 	bl	800ba48 <USBD_CtlSendData>
              break;
 800b28e:	e004      	b.n	800b29a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fb5b 	bl	800b94e <USBD_CtlError>
              break;
 800b298:	bf00      	nop
          }
          break;
 800b29a:	e004      	b.n	800b2a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fb55 	bl	800b94e <USBD_CtlError>
          break;
 800b2a4:	bf00      	nop
      }
      break;
 800b2a6:	e005      	b.n	800b2b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fb4f 	bl	800b94e <USBD_CtlError>
      break;
 800b2b0:	e000      	b.n	800b2b4 <USBD_StdEPReq+0x330>
      break;
 800b2b2:	bf00      	nop
  }

  return ret;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	885b      	ldrh	r3, [r3, #2]
 800b2da:	0a1b      	lsrs	r3, r3, #8
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	2b06      	cmp	r3, #6
 800b2e2:	f200 8128 	bhi.w	800b536 <USBD_GetDescriptor+0x276>
 800b2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ec <USBD_GetDescriptor+0x2c>)
 800b2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ec:	0800b309 	.word	0x0800b309
 800b2f0:	0800b321 	.word	0x0800b321
 800b2f4:	0800b361 	.word	0x0800b361
 800b2f8:	0800b537 	.word	0x0800b537
 800b2fc:	0800b537 	.word	0x0800b537
 800b300:	0800b4d7 	.word	0x0800b4d7
 800b304:	0800b503 	.word	0x0800b503
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	60f8      	str	r0, [r7, #12]
      break;
 800b31e:	e112      	b.n	800b546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7c1b      	ldrb	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10d      	bne.n	800b344 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	f107 0208 	add.w	r2, r7, #8
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3301      	adds	r3, #1
 800b33e:	2202      	movs	r2, #2
 800b340:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b342:	e100      	b.n	800b546 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34c:	f107 0208 	add.w	r2, r7, #8
 800b350:	4610      	mov	r0, r2
 800b352:	4798      	blx	r3
 800b354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3301      	adds	r3, #1
 800b35a:	2202      	movs	r2, #2
 800b35c:	701a      	strb	r2, [r3, #0]
      break;
 800b35e:	e0f2      	b.n	800b546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	885b      	ldrh	r3, [r3, #2]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b05      	cmp	r3, #5
 800b368:	f200 80ac 	bhi.w	800b4c4 <USBD_GetDescriptor+0x204>
 800b36c:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <USBD_GetDescriptor+0xb4>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b3c1 	.word	0x0800b3c1
 800b37c:	0800b3f5 	.word	0x0800b3f5
 800b380:	0800b429 	.word	0x0800b429
 800b384:	0800b45d 	.word	0x0800b45d
 800b388:	0800b491 	.word	0x0800b491
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00b      	beq.n	800b3b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	7c12      	ldrb	r2, [r2, #16]
 800b3a4:	f107 0108 	add.w	r1, r7, #8
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	4798      	blx	r3
 800b3ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ae:	e091      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 facb 	bl	800b94e <USBD_CtlError>
            err++;
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3be:	e089      	b.n	800b4d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	7c12      	ldrb	r2, [r2, #16]
 800b3d8:	f107 0108 	add.w	r1, r7, #8
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4798      	blx	r3
 800b3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e2:	e077      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fab1 	bl	800b94e <USBD_CtlError>
            err++;
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3f2:	e06f      	b.n	800b4d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00b      	beq.n	800b418 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7c12      	ldrb	r2, [r2, #16]
 800b40c:	f107 0108 	add.w	r1, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b416:	e05d      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa97 	bl	800b94e <USBD_CtlError>
            err++;
 800b420:	7afb      	ldrb	r3, [r7, #11]
 800b422:	3301      	adds	r3, #1
 800b424:	72fb      	strb	r3, [r7, #11]
          break;
 800b426:	e055      	b.n	800b4d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	f107 0108 	add.w	r1, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b44a:	e043      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa7d 	bl	800b94e <USBD_CtlError>
            err++;
 800b454:	7afb      	ldrb	r3, [r7, #11]
 800b456:	3301      	adds	r3, #1
 800b458:	72fb      	strb	r3, [r7, #11]
          break;
 800b45a:	e03b      	b.n	800b4d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	7c12      	ldrb	r2, [r2, #16]
 800b474:	f107 0108 	add.w	r1, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b47e:	e029      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa63 	bl	800b94e <USBD_CtlError>
            err++;
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	3301      	adds	r3, #1
 800b48c:	72fb      	strb	r3, [r7, #11]
          break;
 800b48e:	e021      	b.n	800b4d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7c12      	ldrb	r2, [r2, #16]
 800b4a8:	f107 0108 	add.w	r1, r7, #8
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4b2:	e00f      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa49 	bl	800b94e <USBD_CtlError>
            err++;
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4c2:	e007      	b.n	800b4d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa41 	bl	800b94e <USBD_CtlError>
          err++;
 800b4cc:	7afb      	ldrb	r3, [r7, #11]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4d2:	bf00      	nop
      }
      break;
 800b4d4:	e037      	b.n	800b546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7c1b      	ldrb	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4e6:	f107 0208 	add.w	r2, r7, #8
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4798      	blx	r3
 800b4ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f0:	e029      	b.n	800b546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fa2a 	bl	800b94e <USBD_CtlError>
        err++;
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b500:	e021      	b.n	800b546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	7c1b      	ldrb	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10d      	bne.n	800b526 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b512:	f107 0208 	add.w	r2, r7, #8
 800b516:	4610      	mov	r0, r2
 800b518:	4798      	blx	r3
 800b51a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	2207      	movs	r2, #7
 800b522:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b524:	e00f      	b.n	800b546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa10 	bl	800b94e <USBD_CtlError>
        err++;
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	3301      	adds	r3, #1
 800b532:	72fb      	strb	r3, [r7, #11]
      break;
 800b534:	e007      	b.n	800b546 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fa08 	bl	800b94e <USBD_CtlError>
      err++;
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	3301      	adds	r3, #1
 800b542:	72fb      	strb	r3, [r7, #11]
      break;
 800b544:	bf00      	nop
  }

  if (err != 0U)
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d11e      	bne.n	800b58a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	88db      	ldrh	r3, [r3, #6]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d016      	beq.n	800b582 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b554:	893b      	ldrh	r3, [r7, #8]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	88da      	ldrh	r2, [r3, #6]
 800b55e:	893b      	ldrh	r3, [r7, #8]
 800b560:	4293      	cmp	r3, r2
 800b562:	bf28      	it	cs
 800b564:	4613      	movcs	r3, r2
 800b566:	b29b      	uxth	r3, r3
 800b568:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b56a:	893b      	ldrh	r3, [r7, #8]
 800b56c:	461a      	mov	r2, r3
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fa69 	bl	800ba48 <USBD_CtlSendData>
 800b576:	e009      	b.n	800b58c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f9e7 	bl	800b94e <USBD_CtlError>
 800b580:	e004      	b.n	800b58c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 faba 	bl	800bafc <USBD_CtlSendStatus>
 800b588:	e000      	b.n	800b58c <USBD_GetDescriptor+0x2cc>
    return;
 800b58a:	bf00      	nop
  }
}
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop

0800b594 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	889b      	ldrh	r3, [r3, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d131      	bne.n	800b60a <USBD_SetAddress+0x76>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	88db      	ldrh	r3, [r3, #6]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d12d      	bne.n	800b60a <USBD_SetAddress+0x76>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	885b      	ldrh	r3, [r3, #2]
 800b5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5b4:	d829      	bhi.n	800b60a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d104      	bne.n	800b5d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f9bc 	bl	800b94e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d6:	e01d      	b.n	800b614 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7bfa      	ldrb	r2, [r7, #15]
 800b5dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 ff1f 	bl	800c428 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa86 	bl	800bafc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5fe:	e009      	b.n	800b614 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b608:	e004      	b.n	800b614 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f99e 	bl	800b94e <USBD_CtlError>
  }
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	885b      	ldrh	r3, [r3, #2]
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	4b4e      	ldr	r3, [pc, #312]	@ (800b76c <USBD_SetConfig+0x150>)
 800b632:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b634:	4b4d      	ldr	r3, [pc, #308]	@ (800b76c <USBD_SetConfig+0x150>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d905      	bls.n	800b648 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f985 	bl	800b94e <USBD_CtlError>
    return USBD_FAIL;
 800b644:	2303      	movs	r3, #3
 800b646:	e08c      	b.n	800b762 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d002      	beq.n	800b65a <USBD_SetConfig+0x3e>
 800b654:	2b03      	cmp	r3, #3
 800b656:	d029      	beq.n	800b6ac <USBD_SetConfig+0x90>
 800b658:	e075      	b.n	800b746 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b65a:	4b44      	ldr	r3, [pc, #272]	@ (800b76c <USBD_SetConfig+0x150>)
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d020      	beq.n	800b6a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b662:	4b42      	ldr	r3, [pc, #264]	@ (800b76c <USBD_SetConfig+0x150>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b66c:	4b3f      	ldr	r3, [pc, #252]	@ (800b76c <USBD_SetConfig+0x150>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7fe ffe3 	bl	800a63e <USBD_SetClassConfig>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f962 	bl	800b94e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b692:	e065      	b.n	800b760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fa31 	bl	800bafc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2203      	movs	r2, #3
 800b69e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6a2:	e05d      	b.n	800b760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fa29 	bl	800bafc <USBD_CtlSendStatus>
      break;
 800b6aa:	e059      	b.n	800b760 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b76c <USBD_SetConfig+0x150>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d112      	bne.n	800b6da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b76c <USBD_SetConfig+0x150>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6c6:	4b29      	ldr	r3, [pc, #164]	@ (800b76c <USBD_SetConfig+0x150>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7fe ffd2 	bl	800a676 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa12 	bl	800bafc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6d8:	e042      	b.n	800b760 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6da:	4b24      	ldr	r3, [pc, #144]	@ (800b76c <USBD_SetConfig+0x150>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d02a      	beq.n	800b73e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7fe ffc0 	bl	800a676 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b76c <USBD_SetConfig+0x150>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b700:	4b1a      	ldr	r3, [pc, #104]	@ (800b76c <USBD_SetConfig+0x150>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7fe ff99 	bl	800a63e <USBD_SetClassConfig>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00f      	beq.n	800b736 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f918 	bl	800b94e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7fe ffa5 	bl	800a676 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2202      	movs	r2, #2
 800b730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b734:	e014      	b.n	800b760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f9e0 	bl	800bafc <USBD_CtlSendStatus>
      break;
 800b73c:	e010      	b.n	800b760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9dc 	bl	800bafc <USBD_CtlSendStatus>
      break;
 800b744:	e00c      	b.n	800b760 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f900 	bl	800b94e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b74e:	4b07      	ldr	r3, [pc, #28]	@ (800b76c <USBD_SetConfig+0x150>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7fe ff8e 	bl	800a676 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b75a:	2303      	movs	r3, #3
 800b75c:	73fb      	strb	r3, [r7, #15]
      break;
 800b75e:	bf00      	nop
  }

  return ret;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	200004f8 	.word	0x200004f8

0800b770 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d004      	beq.n	800b78c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f8e2 	bl	800b94e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b78a:	e023      	b.n	800b7d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	dc02      	bgt.n	800b79e <USBD_GetConfig+0x2e>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dc03      	bgt.n	800b7a4 <USBD_GetConfig+0x34>
 800b79c:	e015      	b.n	800b7ca <USBD_GetConfig+0x5a>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d00b      	beq.n	800b7ba <USBD_GetConfig+0x4a>
 800b7a2:	e012      	b.n	800b7ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f948 	bl	800ba48 <USBD_CtlSendData>
        break;
 800b7b8:	e00c      	b.n	800b7d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f940 	bl	800ba48 <USBD_CtlSendData>
        break;
 800b7c8:	e004      	b.n	800b7d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f8be 	bl	800b94e <USBD_CtlError>
        break;
 800b7d2:	bf00      	nop
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d81e      	bhi.n	800b832 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	88db      	ldrh	r3, [r3, #6]
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d004      	beq.n	800b806 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f8a5 	bl	800b94e <USBD_CtlError>
        break;
 800b804:	e01a      	b.n	800b83c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	f043 0202 	orr.w	r2, r3, #2
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	330c      	adds	r3, #12
 800b826:	2202      	movs	r2, #2
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f90c 	bl	800ba48 <USBD_CtlSendData>
      break;
 800b830:	e004      	b.n	800b83c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f88a 	bl	800b94e <USBD_CtlError>
      break;
 800b83a:	bf00      	nop
  }
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	885b      	ldrh	r3, [r3, #2]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d107      	bne.n	800b866 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f94c 	bl	800bafc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b864:	e013      	b.n	800b88e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	885b      	ldrh	r3, [r3, #2]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d10b      	bne.n	800b886 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	889b      	ldrh	r3, [r3, #4]
 800b872:	0a1b      	lsrs	r3, r3, #8
 800b874:	b29b      	uxth	r3, r3
 800b876:	b2da      	uxtb	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f93c 	bl	800bafc <USBD_CtlSendStatus>
}
 800b884:	e003      	b.n	800b88e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f860 	bl	800b94e <USBD_CtlError>
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d80b      	bhi.n	800b8c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d10c      	bne.n	800b8d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f91c 	bl	800bafc <USBD_CtlSendStatus>
      }
      break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f840 	bl	800b94e <USBD_CtlError>
      break;
 800b8ce:	e000      	b.n	800b8d2 <USBD_ClrFeature+0x3c>
      break;
 800b8d0:	bf00      	nop
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	781a      	ldrb	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f7ff fa40 	bl	800ad8a <SWAPBYTE>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3301      	adds	r3, #1
 800b91c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fa33 	bl	800ad8a <SWAPBYTE>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3301      	adds	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff fa26 	bl	800ad8a <SWAPBYTE>
 800b93e:	4603      	mov	r3, r0
 800b940:	461a      	mov	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	80da      	strh	r2, [r3, #6]
}
 800b946:	bf00      	nop
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b958:	2180      	movs	r1, #128	@ 0x80
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fcfa 	bl	800c354 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b960:	2100      	movs	r1, #0
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fcf6 	bl	800c354 <USBD_LL_StallEP>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d042      	beq.n	800ba0c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b98a:	6938      	ldr	r0, [r7, #16]
 800b98c:	f000 f842 	bl	800ba14 <USBD_GetLen>
 800b990:	4603      	mov	r3, r0
 800b992:	3301      	adds	r3, #1
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b99a:	d808      	bhi.n	800b9ae <USBD_GetString+0x3e>
 800b99c:	6938      	ldr	r0, [r7, #16]
 800b99e:	f000 f839 	bl	800ba14 <USBD_GetLen>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	e001      	b.n	800b9b2 <USBD_GetString+0x42>
 800b9ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	7812      	ldrb	r2, [r2, #0]
 800b9c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9c8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9d8:	e013      	b.n	800ba02 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	4413      	add	r3, r2
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	7812      	ldrb	r2, [r2, #0]
 800b9e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	613b      	str	r3, [r7, #16]
    idx++;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e7      	bne.n	800b9da <USBD_GetString+0x6a>
 800ba0a:	e000      	b.n	800ba0e <USBD_GetString+0x9e>
    return;
 800ba0c:	bf00      	nop
  }
}
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba24:	e005      	b.n	800ba32 <USBD_GetLen+0x1e>
  {
    len++;
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1f5      	bne.n	800ba26 <USBD_GetLen+0x12>
  }

  return len;
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 fcf9 	bl	800c466 <USBD_LL_Transmit>

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	2100      	movs	r1, #0
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fce8 	bl	800c466 <USBD_LL_Transmit>

  return USBD_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2203      	movs	r2, #3
 800bab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	2100      	movs	r1, #0
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f000 fcec 	bl	800c4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	2100      	movs	r1, #0
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 fcdb 	bl	800c4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2204      	movs	r2, #4
 800bb08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2100      	movs	r1, #0
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fca7 	bl	800c466 <USBD_LL_Transmit>

  return USBD_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb32:	2300      	movs	r3, #0
 800bb34:	2200      	movs	r2, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fcb5 	bl	800c4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4912      	ldr	r1, [pc, #72]	@ (800bb98 <MX_USB_DEVICE_Init+0x50>)
 800bb50:	4812      	ldr	r0, [pc, #72]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb52:	f7fe fcf7 	bl	800a544 <USBD_Init>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb5c:	f7f8 fcf8 	bl	8004550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb60:	490f      	ldr	r1, [pc, #60]	@ (800bba0 <MX_USB_DEVICE_Init+0x58>)
 800bb62:	480e      	ldr	r0, [pc, #56]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb64:	f7fe fd1e 	bl	800a5a4 <USBD_RegisterClass>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb6e:	f7f8 fcef 	bl	8004550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb72:	490c      	ldr	r1, [pc, #48]	@ (800bba4 <MX_USB_DEVICE_Init+0x5c>)
 800bb74:	4809      	ldr	r0, [pc, #36]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb76:	f7fe fc15 	bl	800a3a4 <USBD_CDC_RegisterInterface>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb80:	f7f8 fce6 	bl	8004550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb84:	4805      	ldr	r0, [pc, #20]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb86:	f7fe fd43 	bl	800a610 <USBD_Start>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb90:	f7f8 fcde 	bl	8004550 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	200000ac 	.word	0x200000ac
 800bb9c:	200004fc 	.word	0x200004fc
 800bba0:	20000018 	.word	0x20000018
 800bba4:	20000098 	.word	0x20000098

0800bba8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbac:	2200      	movs	r2, #0
 800bbae:	4905      	ldr	r1, [pc, #20]	@ (800bbc4 <CDC_Init_FS+0x1c>)
 800bbb0:	4805      	ldr	r0, [pc, #20]	@ (800bbc8 <CDC_Init_FS+0x20>)
 800bbb2:	f7fe fc11 	bl	800a3d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbb6:	4905      	ldr	r1, [pc, #20]	@ (800bbcc <CDC_Init_FS+0x24>)
 800bbb8:	4803      	ldr	r0, [pc, #12]	@ (800bbc8 <CDC_Init_FS+0x20>)
 800bbba:	f7fe fc2f 	bl	800a41c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20000fd8 	.word	0x20000fd8
 800bbc8:	200004fc 	.word	0x200004fc
 800bbcc:	200007d8 	.word	0x200007d8

0800bbd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
 800bbec:	4613      	mov	r3, r2
 800bbee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	2b23      	cmp	r3, #35	@ 0x23
 800bbf4:	d84a      	bhi.n	800bc8c <CDC_Control_FS+0xac>
 800bbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbfc <CDC_Control_FS+0x1c>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc8d 	.word	0x0800bc8d
 800bc00:	0800bc8d 	.word	0x0800bc8d
 800bc04:	0800bc8d 	.word	0x0800bc8d
 800bc08:	0800bc8d 	.word	0x0800bc8d
 800bc0c:	0800bc8d 	.word	0x0800bc8d
 800bc10:	0800bc8d 	.word	0x0800bc8d
 800bc14:	0800bc8d 	.word	0x0800bc8d
 800bc18:	0800bc8d 	.word	0x0800bc8d
 800bc1c:	0800bc8d 	.word	0x0800bc8d
 800bc20:	0800bc8d 	.word	0x0800bc8d
 800bc24:	0800bc8d 	.word	0x0800bc8d
 800bc28:	0800bc8d 	.word	0x0800bc8d
 800bc2c:	0800bc8d 	.word	0x0800bc8d
 800bc30:	0800bc8d 	.word	0x0800bc8d
 800bc34:	0800bc8d 	.word	0x0800bc8d
 800bc38:	0800bc8d 	.word	0x0800bc8d
 800bc3c:	0800bc8d 	.word	0x0800bc8d
 800bc40:	0800bc8d 	.word	0x0800bc8d
 800bc44:	0800bc8d 	.word	0x0800bc8d
 800bc48:	0800bc8d 	.word	0x0800bc8d
 800bc4c:	0800bc8d 	.word	0x0800bc8d
 800bc50:	0800bc8d 	.word	0x0800bc8d
 800bc54:	0800bc8d 	.word	0x0800bc8d
 800bc58:	0800bc8d 	.word	0x0800bc8d
 800bc5c:	0800bc8d 	.word	0x0800bc8d
 800bc60:	0800bc8d 	.word	0x0800bc8d
 800bc64:	0800bc8d 	.word	0x0800bc8d
 800bc68:	0800bc8d 	.word	0x0800bc8d
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bc8d 	.word	0x0800bc8d
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bc8d 	.word	0x0800bc8d
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc8d 	.word	0x0800bc8d
 800bc84:	0800bc8d 	.word	0x0800bc8d
 800bc88:	0800bc8d 	.word	0x0800bc8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc8c:	bf00      	nop
  }

  return (USBD_OK);
 800bc8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	480b      	ldr	r0, [pc, #44]	@ (800bcd8 <CDC_Receive_FS+0x3c>)
 800bcaa:	f7fe fbb7 	bl	800a41c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcae:	480a      	ldr	r0, [pc, #40]	@ (800bcd8 <CDC_Receive_FS+0x3c>)
 800bcb0:	f7fe fc12 	bl	800a4d8 <USBD_CDC_ReceivePacket>

  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4808      	ldr	r0, [pc, #32]	@ (800bcdc <CDC_Receive_FS+0x40>)
 800bcbc:	f7f5 fe6e 	bl	800199c <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4804      	ldr	r0, [pc, #16]	@ (800bcdc <CDC_Receive_FS+0x40>)
 800bcca:	f001 faae 	bl	800d22a <memset>

  return (USBD_OK);
 800bcce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	200004fc 	.word	0x200004fc
 800bcdc:	200007d8 	.word	0x200007d8

0800bce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <CDC_Transmit_FS+0x48>)
 800bcf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bcf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e00b      	b.n	800bd1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd06:	887b      	ldrh	r3, [r7, #2]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4806      	ldr	r0, [pc, #24]	@ (800bd28 <CDC_Transmit_FS+0x48>)
 800bd0e:	f7fe fb63 	bl	800a3d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd12:	4805      	ldr	r0, [pc, #20]	@ (800bd28 <CDC_Transmit_FS+0x48>)
 800bd14:	f7fe fba0 	bl	800a458 <USBD_CDC_TransmitPacket>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	200004fc 	.word	0x200004fc

0800bd2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
	...

0800bd50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2212      	movs	r2, #18
 800bd60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd62:	4b03      	ldr	r3, [pc, #12]	@ (800bd70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	200000c8 	.word	0x200000c8

0800bd74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	6039      	str	r1, [r7, #0]
 800bd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2204      	movs	r2, #4
 800bd84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd86:	4b03      	ldr	r3, [pc, #12]	@ (800bd94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	200000dc 	.word	0x200000dc

0800bd98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	6039      	str	r1, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	4907      	ldr	r1, [pc, #28]	@ (800bdcc <USBD_FS_ProductStrDescriptor+0x34>)
 800bdae:	4808      	ldr	r0, [pc, #32]	@ (800bdd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdb0:	f7ff fdde 	bl	800b970 <USBD_GetString>
 800bdb4:	e004      	b.n	800bdc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4904      	ldr	r1, [pc, #16]	@ (800bdcc <USBD_FS_ProductStrDescriptor+0x34>)
 800bdba:	4805      	ldr	r0, [pc, #20]	@ (800bdd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdbc:	f7ff fdd8 	bl	800b970 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc0:	4b02      	ldr	r3, [pc, #8]	@ (800bdcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200017d8 	.word	0x200017d8
 800bdd0:	0800eec8 	.word	0x0800eec8

0800bdd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	6039      	str	r1, [r7, #0]
 800bdde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	4904      	ldr	r1, [pc, #16]	@ (800bdf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bde4:	4804      	ldr	r0, [pc, #16]	@ (800bdf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bde6:	f7ff fdc3 	bl	800b970 <USBD_GetString>
  return USBD_StrDesc;
 800bdea:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	200017d8 	.word	0x200017d8
 800bdf8:	0800eee0 	.word	0x0800eee0

0800bdfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	221a      	movs	r2, #26
 800be0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be0e:	f000 f843 	bl	800be98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be12:	4b02      	ldr	r3, [pc, #8]	@ (800be1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	200000e0 	.word	0x200000e0

0800be20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d105      	bne.n	800be3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4907      	ldr	r1, [pc, #28]	@ (800be54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be36:	4808      	ldr	r0, [pc, #32]	@ (800be58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be38:	f7ff fd9a 	bl	800b970 <USBD_GetString>
 800be3c:	e004      	b.n	800be48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4904      	ldr	r1, [pc, #16]	@ (800be54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be42:	4805      	ldr	r0, [pc, #20]	@ (800be58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be44:	f7ff fd94 	bl	800b970 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be48:	4b02      	ldr	r3, [pc, #8]	@ (800be54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200017d8 	.word	0x200017d8
 800be58:	0800eef4 	.word	0x0800eef4

0800be5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	6039      	str	r1, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	4907      	ldr	r1, [pc, #28]	@ (800be90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be72:	4808      	ldr	r0, [pc, #32]	@ (800be94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be74:	f7ff fd7c 	bl	800b970 <USBD_GetString>
 800be78:	e004      	b.n	800be84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4904      	ldr	r1, [pc, #16]	@ (800be90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be7e:	4805      	ldr	r0, [pc, #20]	@ (800be94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be80:	f7ff fd76 	bl	800b970 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be84:	4b02      	ldr	r3, [pc, #8]	@ (800be90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	200017d8 	.word	0x200017d8
 800be94:	0800ef00 	.word	0x0800ef00

0800be98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bedc <Get_SerialNum+0x44>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bea4:	4b0e      	ldr	r3, [pc, #56]	@ (800bee0 <Get_SerialNum+0x48>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800beaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bee4 <Get_SerialNum+0x4c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4413      	add	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d009      	beq.n	800bed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bebe:	2208      	movs	r2, #8
 800bec0:	4909      	ldr	r1, [pc, #36]	@ (800bee8 <Get_SerialNum+0x50>)
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f814 	bl	800bef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bec8:	2204      	movs	r2, #4
 800beca:	4908      	ldr	r1, [pc, #32]	@ (800beec <Get_SerialNum+0x54>)
 800becc:	68b8      	ldr	r0, [r7, #8]
 800bece:	f000 f80f 	bl	800bef0 <IntToUnicode>
  }
}
 800bed2:	bf00      	nop
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	1fff7a10 	.word	0x1fff7a10
 800bee0:	1fff7a14 	.word	0x1fff7a14
 800bee4:	1fff7a18 	.word	0x1fff7a18
 800bee8:	200000e2 	.word	0x200000e2
 800beec:	200000f2 	.word	0x200000f2

0800bef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf02:	2300      	movs	r3, #0
 800bf04:	75fb      	strb	r3, [r7, #23]
 800bf06:	e027      	b.n	800bf58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	0f1b      	lsrs	r3, r3, #28
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d80b      	bhi.n	800bf28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	0f1b      	lsrs	r3, r3, #28
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	440b      	add	r3, r1
 800bf20:	3230      	adds	r2, #48	@ 0x30
 800bf22:	b2d2      	uxtb	r2, r2
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e00a      	b.n	800bf3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	0f1b      	lsrs	r3, r3, #28
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4619      	mov	r1, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	440b      	add	r3, r1
 800bf38:	3237      	adds	r2, #55	@ 0x37
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	3301      	adds	r3, #1
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	3301      	adds	r3, #1
 800bf56:	75fb      	strb	r3, [r7, #23]
 800bf58:	7dfa      	ldrb	r2, [r7, #23]
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d3d3      	bcc.n	800bf08 <IntToUnicode+0x18>
  }
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08a      	sub	sp, #40	@ 0x28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf78:	f107 0314 	add.w	r3, r7, #20
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	605a      	str	r2, [r3, #4]
 800bf82:	609a      	str	r2, [r3, #8]
 800bf84:	60da      	str	r2, [r3, #12]
 800bf86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf90:	d13a      	bne.n	800c008 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf92:	2300      	movs	r3, #0
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	4b1e      	ldr	r3, [pc, #120]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bf98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9a:	4a1d      	ldr	r2, [pc, #116]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bf9c:	f043 0301 	orr.w	r3, r3, #1
 800bfa0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfa2:	4b1b      	ldr	r3, [pc, #108]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bfb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bfc0:	230a      	movs	r3, #10
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfc4:	f107 0314 	add.w	r3, r7, #20
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4812      	ldr	r0, [pc, #72]	@ (800c014 <HAL_PCD_MspInit+0xa4>)
 800bfcc:	f7f8 febe 	bl	8004d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd4:	4a0e      	ldr	r2, [pc, #56]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	6353      	str	r3, [r2, #52]	@ 0x34
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfe4:	4a0a      	ldr	r2, [pc, #40]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfea:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfec:	4b08      	ldr	r3, [pc, #32]	@ (800c010 <HAL_PCD_MspInit+0xa0>)
 800bfee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bff8:	2200      	movs	r2, #0
 800bffa:	2100      	movs	r1, #0
 800bffc:	2043      	movs	r0, #67	@ 0x43
 800bffe:	f7f8 fe6e 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c002:	2043      	movs	r0, #67	@ 0x43
 800c004:	f7f8 fe87 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c008:	bf00      	nop
 800c00a:	3728      	adds	r7, #40	@ 0x28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	40023800 	.word	0x40023800
 800c014:	40020000 	.word	0x40020000

0800c018 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c02c:	4619      	mov	r1, r3
 800c02e:	4610      	mov	r0, r2
 800c030:	f7fe fb3b 	bl	800a6aa <USBD_LL_SetupStage>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	4613      	mov	r3, r2
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	440b      	add	r3, r1
 800c05c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	78fb      	ldrb	r3, [r7, #3]
 800c064:	4619      	mov	r1, r3
 800c066:	f7fe fb75 	bl	800a754 <USBD_LL_DataOutStage>
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b082      	sub	sp, #8
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c084:	78fa      	ldrb	r2, [r7, #3]
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4613      	mov	r3, r2
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	440b      	add	r3, r1
 800c092:	3320      	adds	r3, #32
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	4619      	mov	r1, r3
 800c09a:	f7fe fc0e 	bl	800a8ba <USBD_LL_DataInStage>
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fd48 	bl	800ab4a <USBD_LL_SOF>
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	79db      	ldrb	r3, [r3, #7]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d102      	bne.n	800c0dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]
 800c0da:	e008      	b.n	800c0ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	79db      	ldrb	r3, [r3, #7]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d102      	bne.n	800c0ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	73fb      	strb	r3, [r7, #15]
 800c0e8:	e001      	b.n	800c0ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0ea:	f7f8 fa31 	bl	8004550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0f4:	7bfa      	ldrb	r2, [r7, #15]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fce2 	bl	800aac2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe fc8a 	bl	800aa1e <USBD_LL_Reset>
}
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fcdd 	bl	800aae2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	6812      	ldr	r2, [r2, #0]
 800c136:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7adb      	ldrb	r3, [r3, #11]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d005      	beq.n	800c154 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c148:	4b04      	ldr	r3, [pc, #16]	@ (800c15c <HAL_PCD_SuspendCallback+0x48>)
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	4a03      	ldr	r2, [pc, #12]	@ (800c15c <HAL_PCD_SuspendCallback+0x48>)
 800c14e:	f043 0306 	orr.w	r3, r3, #6
 800c152:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	e000ed00 	.word	0xe000ed00

0800c160 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fcd3 	bl	800ab1a <USBD_LL_Resume>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fd2b 	bl	800abee <USBD_LL_IsoOUTIncomplete>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1b2:	78fa      	ldrb	r2, [r7, #3]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fce7 	bl	800ab8a <USBD_LL_IsoINIncomplete>
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fd3d 	bl	800ac52 <USBD_LL_DevConnected>
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fd3a 	bl	800ac68 <USBD_LL_DevDisconnected>
}
 800c1f4:	bf00      	nop
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d13c      	bne.n	800c286 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c20c:	4a20      	ldr	r2, [pc, #128]	@ (800c290 <USBD_LL_Init+0x94>)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a1e      	ldr	r2, [pc, #120]	@ (800c290 <USBD_LL_Init+0x94>)
 800c218:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c21c:	4b1c      	ldr	r3, [pc, #112]	@ (800c290 <USBD_LL_Init+0x94>)
 800c21e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c222:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c224:	4b1a      	ldr	r3, [pc, #104]	@ (800c290 <USBD_LL_Init+0x94>)
 800c226:	2204      	movs	r2, #4
 800c228:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c22a:	4b19      	ldr	r3, [pc, #100]	@ (800c290 <USBD_LL_Init+0x94>)
 800c22c:	2202      	movs	r2, #2
 800c22e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c230:	4b17      	ldr	r3, [pc, #92]	@ (800c290 <USBD_LL_Init+0x94>)
 800c232:	2200      	movs	r2, #0
 800c234:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c236:	4b16      	ldr	r3, [pc, #88]	@ (800c290 <USBD_LL_Init+0x94>)
 800c238:	2202      	movs	r2, #2
 800c23a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c23c:	4b14      	ldr	r3, [pc, #80]	@ (800c290 <USBD_LL_Init+0x94>)
 800c23e:	2200      	movs	r2, #0
 800c240:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c242:	4b13      	ldr	r3, [pc, #76]	@ (800c290 <USBD_LL_Init+0x94>)
 800c244:	2200      	movs	r2, #0
 800c246:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c248:	4b11      	ldr	r3, [pc, #68]	@ (800c290 <USBD_LL_Init+0x94>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c24e:	4b10      	ldr	r3, [pc, #64]	@ (800c290 <USBD_LL_Init+0x94>)
 800c250:	2200      	movs	r2, #0
 800c252:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c254:	4b0e      	ldr	r3, [pc, #56]	@ (800c290 <USBD_LL_Init+0x94>)
 800c256:	2200      	movs	r2, #0
 800c258:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c25a:	480d      	ldr	r0, [pc, #52]	@ (800c290 <USBD_LL_Init+0x94>)
 800c25c:	f7f8 ff12 	bl	8005084 <HAL_PCD_Init>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c266:	f7f8 f973 	bl	8004550 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c26a:	2180      	movs	r1, #128	@ 0x80
 800c26c:	4808      	ldr	r0, [pc, #32]	@ (800c290 <USBD_LL_Init+0x94>)
 800c26e:	f7fa f93e 	bl	80064ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c272:	2240      	movs	r2, #64	@ 0x40
 800c274:	2100      	movs	r1, #0
 800c276:	4806      	ldr	r0, [pc, #24]	@ (800c290 <USBD_LL_Init+0x94>)
 800c278:	f7fa f8f2 	bl	8006460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c27c:	2280      	movs	r2, #128	@ 0x80
 800c27e:	2101      	movs	r1, #1
 800c280:	4803      	ldr	r0, [pc, #12]	@ (800c290 <USBD_LL_Init+0x94>)
 800c282:	f7fa f8ed 	bl	8006460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200019d8 	.word	0x200019d8

0800c294 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7f8 fff9 	bl	80052a2 <HAL_PCD_Start>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 f942 	bl	800c540 <USBD_Get_USB_Status>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4603      	mov	r3, r0
 800c2da:	70fb      	strb	r3, [r7, #3]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70bb      	strb	r3, [r7, #2]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2f2:	78bb      	ldrb	r3, [r7, #2]
 800c2f4:	883a      	ldrh	r2, [r7, #0]
 800c2f6:	78f9      	ldrb	r1, [r7, #3]
 800c2f8:	f7f9 fccd 	bl	8005c96 <HAL_PCD_EP_Open>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f91c 	bl	800c540 <USBD_Get_USB_Status>
 800c308:	4603      	mov	r3, r0
 800c30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	460b      	mov	r3, r1
 800c320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c330:	78fa      	ldrb	r2, [r7, #3]
 800c332:	4611      	mov	r1, r2
 800c334:	4618      	mov	r0, r3
 800c336:	f7f9 fd18 	bl	8005d6a <HAL_PCD_EP_Close>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	4618      	mov	r0, r3
 800c342:	f000 f8fd 	bl	800c540 <USBD_Get_USB_Status>
 800c346:	4603      	mov	r3, r0
 800c348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	4611      	mov	r1, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f7f9 fdd0 	bl	8005f18 <HAL_PCD_EP_SetStall>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 f8de 	bl	800c540 <USBD_Get_USB_Status>
 800c384:	4603      	mov	r3, r0
 800c386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c388:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3ac:	78fa      	ldrb	r2, [r7, #3]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f9 fe14 	bl	8005fde <HAL_PCD_EP_ClrStall>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 f8bf 	bl	800c540 <USBD_Get_USB_Status>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	da0b      	bge.n	800c404 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3f2:	68f9      	ldr	r1, [r7, #12]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	440b      	add	r3, r1
 800c3fe:	3316      	adds	r3, #22
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	e00b      	b.n	800c41c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c40a:	68f9      	ldr	r1, [r7, #12]
 800c40c:	4613      	mov	r3, r2
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	440b      	add	r3, r1
 800c416:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c41a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c442:	78fa      	ldrb	r2, [r7, #3]
 800c444:	4611      	mov	r1, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f7f9 fc01 	bl	8005c4e <HAL_PCD_SetAddress>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f874 	bl	800c540 <USBD_Get_USB_Status>
 800c458:	4603      	mov	r3, r0
 800c45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b086      	sub	sp, #24
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	603b      	str	r3, [r7, #0]
 800c472:	460b      	mov	r3, r1
 800c474:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c484:	7af9      	ldrb	r1, [r7, #11]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	f7f9 fd0b 	bl	8005ea4 <HAL_PCD_EP_Transmit>
 800c48e:	4603      	mov	r3, r0
 800c490:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	4618      	mov	r0, r3
 800c496:	f000 f853 	bl	800c540 <USBD_Get_USB_Status>
 800c49a:	4603      	mov	r3, r0
 800c49c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c49e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4c6:	7af9      	ldrb	r1, [r7, #11]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	f7f9 fc97 	bl	8005dfe <HAL_PCD_EP_Receive>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d4:	7dfb      	ldrb	r3, [r7, #23]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f832 	bl	800c540 <USBD_Get_USB_Status>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4fc:	78fa      	ldrb	r2, [r7, #3]
 800c4fe:	4611      	mov	r1, r2
 800c500:	4618      	mov	r0, r3
 800c502:	f7f9 fcb7 	bl	8005e74 <HAL_PCD_EP_GetRxCount>
 800c506:	4603      	mov	r3, r0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c518:	4b03      	ldr	r3, [pc, #12]	@ (800c528 <USBD_static_malloc+0x18>)
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	20001ebc 	.word	0x20001ebc

0800c52c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]

}
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	2b03      	cmp	r3, #3
 800c552:	d817      	bhi.n	800c584 <USBD_Get_USB_Status+0x44>
 800c554:	a201      	add	r2, pc, #4	@ (adr r2, 800c55c <USBD_Get_USB_Status+0x1c>)
 800c556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55a:	bf00      	nop
 800c55c:	0800c56d 	.word	0x0800c56d
 800c560:	0800c573 	.word	0x0800c573
 800c564:	0800c579 	.word	0x0800c579
 800c568:	0800c57f 	.word	0x0800c57f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	73fb      	strb	r3, [r7, #15]
    break;
 800c570:	e00b      	b.n	800c58a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	73fb      	strb	r3, [r7, #15]
    break;
 800c576:	e008      	b.n	800c58a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c578:	2301      	movs	r3, #1
 800c57a:	73fb      	strb	r3, [r7, #15]
    break;
 800c57c:	e005      	b.n	800c58a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c57e:	2303      	movs	r3, #3
 800c580:	73fb      	strb	r3, [r7, #15]
    break;
 800c582:	e002      	b.n	800c58a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c584:	2303      	movs	r3, #3
 800c586:	73fb      	strb	r3, [r7, #15]
    break;
 800c588:	bf00      	nop
  }
  return usb_status;
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <__assert_func>:
 800c598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c59a:	4614      	mov	r4, r2
 800c59c:	461a      	mov	r2, r3
 800c59e:	4b09      	ldr	r3, [pc, #36]	@ (800c5c4 <__assert_func+0x2c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	68d8      	ldr	r0, [r3, #12]
 800c5a6:	b14c      	cbz	r4, 800c5bc <__assert_func+0x24>
 800c5a8:	4b07      	ldr	r3, [pc, #28]	@ (800c5c8 <__assert_func+0x30>)
 800c5aa:	9100      	str	r1, [sp, #0]
 800c5ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5b0:	4906      	ldr	r1, [pc, #24]	@ (800c5cc <__assert_func+0x34>)
 800c5b2:	462b      	mov	r3, r5
 800c5b4:	f000 fdc6 	bl	800d144 <fiprintf>
 800c5b8:	f000 fed5 	bl	800d366 <abort>
 800c5bc:	4b04      	ldr	r3, [pc, #16]	@ (800c5d0 <__assert_func+0x38>)
 800c5be:	461c      	mov	r4, r3
 800c5c0:	e7f3      	b.n	800c5aa <__assert_func+0x12>
 800c5c2:	bf00      	nop
 800c5c4:	20000108 	.word	0x20000108
 800c5c8:	0800ef84 	.word	0x0800ef84
 800c5cc:	0800ef91 	.word	0x0800ef91
 800c5d0:	0800efbf 	.word	0x0800efbf

0800c5d4 <malloc>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	@ (800c5e0 <malloc+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f000 b82d 	b.w	800c638 <_malloc_r>
 800c5de:	bf00      	nop
 800c5e0:	20000108 	.word	0x20000108

0800c5e4 <free>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	@ (800c5f0 <free+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f001 bd1d 	b.w	800e028 <_free_r>
 800c5ee:	bf00      	nop
 800c5f0:	20000108 	.word	0x20000108

0800c5f4 <sbrk_aligned>:
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	4e0f      	ldr	r6, [pc, #60]	@ (800c634 <sbrk_aligned+0x40>)
 800c5f8:	460c      	mov	r4, r1
 800c5fa:	6831      	ldr	r1, [r6, #0]
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	b911      	cbnz	r1, 800c606 <sbrk_aligned+0x12>
 800c600:	f000 fe54 	bl	800d2ac <_sbrk_r>
 800c604:	6030      	str	r0, [r6, #0]
 800c606:	4621      	mov	r1, r4
 800c608:	4628      	mov	r0, r5
 800c60a:	f000 fe4f 	bl	800d2ac <_sbrk_r>
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	d103      	bne.n	800c61a <sbrk_aligned+0x26>
 800c612:	f04f 34ff 	mov.w	r4, #4294967295
 800c616:	4620      	mov	r0, r4
 800c618:	bd70      	pop	{r4, r5, r6, pc}
 800c61a:	1cc4      	adds	r4, r0, #3
 800c61c:	f024 0403 	bic.w	r4, r4, #3
 800c620:	42a0      	cmp	r0, r4
 800c622:	d0f8      	beq.n	800c616 <sbrk_aligned+0x22>
 800c624:	1a21      	subs	r1, r4, r0
 800c626:	4628      	mov	r0, r5
 800c628:	f000 fe40 	bl	800d2ac <_sbrk_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	d1f2      	bne.n	800c616 <sbrk_aligned+0x22>
 800c630:	e7ef      	b.n	800c612 <sbrk_aligned+0x1e>
 800c632:	bf00      	nop
 800c634:	200020dc 	.word	0x200020dc

0800c638 <_malloc_r>:
 800c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c63c:	1ccd      	adds	r5, r1, #3
 800c63e:	f025 0503 	bic.w	r5, r5, #3
 800c642:	3508      	adds	r5, #8
 800c644:	2d0c      	cmp	r5, #12
 800c646:	bf38      	it	cc
 800c648:	250c      	movcc	r5, #12
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	4606      	mov	r6, r0
 800c64e:	db01      	blt.n	800c654 <_malloc_r+0x1c>
 800c650:	42a9      	cmp	r1, r5
 800c652:	d904      	bls.n	800c65e <_malloc_r+0x26>
 800c654:	230c      	movs	r3, #12
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	2000      	movs	r0, #0
 800c65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c734 <_malloc_r+0xfc>
 800c662:	f000 f869 	bl	800c738 <__malloc_lock>
 800c666:	f8d8 3000 	ldr.w	r3, [r8]
 800c66a:	461c      	mov	r4, r3
 800c66c:	bb44      	cbnz	r4, 800c6c0 <_malloc_r+0x88>
 800c66e:	4629      	mov	r1, r5
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff ffbf 	bl	800c5f4 <sbrk_aligned>
 800c676:	1c43      	adds	r3, r0, #1
 800c678:	4604      	mov	r4, r0
 800c67a:	d158      	bne.n	800c72e <_malloc_r+0xf6>
 800c67c:	f8d8 4000 	ldr.w	r4, [r8]
 800c680:	4627      	mov	r7, r4
 800c682:	2f00      	cmp	r7, #0
 800c684:	d143      	bne.n	800c70e <_malloc_r+0xd6>
 800c686:	2c00      	cmp	r4, #0
 800c688:	d04b      	beq.n	800c722 <_malloc_r+0xea>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	4639      	mov	r1, r7
 800c68e:	4630      	mov	r0, r6
 800c690:	eb04 0903 	add.w	r9, r4, r3
 800c694:	f000 fe0a 	bl	800d2ac <_sbrk_r>
 800c698:	4581      	cmp	r9, r0
 800c69a:	d142      	bne.n	800c722 <_malloc_r+0xea>
 800c69c:	6821      	ldr	r1, [r4, #0]
 800c69e:	1a6d      	subs	r5, r5, r1
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7ff ffa6 	bl	800c5f4 <sbrk_aligned>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d03a      	beq.n	800c722 <_malloc_r+0xea>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	442b      	add	r3, r5
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	bb62      	cbnz	r2, 800c714 <_malloc_r+0xdc>
 800c6ba:	f8c8 7000 	str.w	r7, [r8]
 800c6be:	e00f      	b.n	800c6e0 <_malloc_r+0xa8>
 800c6c0:	6822      	ldr	r2, [r4, #0]
 800c6c2:	1b52      	subs	r2, r2, r5
 800c6c4:	d420      	bmi.n	800c708 <_malloc_r+0xd0>
 800c6c6:	2a0b      	cmp	r2, #11
 800c6c8:	d917      	bls.n	800c6fa <_malloc_r+0xc2>
 800c6ca:	1961      	adds	r1, r4, r5
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	6025      	str	r5, [r4, #0]
 800c6d0:	bf18      	it	ne
 800c6d2:	6059      	strne	r1, [r3, #4]
 800c6d4:	6863      	ldr	r3, [r4, #4]
 800c6d6:	bf08      	it	eq
 800c6d8:	f8c8 1000 	streq.w	r1, [r8]
 800c6dc:	5162      	str	r2, [r4, r5]
 800c6de:	604b      	str	r3, [r1, #4]
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f000 f82f 	bl	800c744 <__malloc_unlock>
 800c6e6:	f104 000b 	add.w	r0, r4, #11
 800c6ea:	1d23      	adds	r3, r4, #4
 800c6ec:	f020 0007 	bic.w	r0, r0, #7
 800c6f0:	1ac2      	subs	r2, r0, r3
 800c6f2:	bf1c      	itt	ne
 800c6f4:	1a1b      	subne	r3, r3, r0
 800c6f6:	50a3      	strne	r3, [r4, r2]
 800c6f8:	e7af      	b.n	800c65a <_malloc_r+0x22>
 800c6fa:	6862      	ldr	r2, [r4, #4]
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	bf0c      	ite	eq
 800c700:	f8c8 2000 	streq.w	r2, [r8]
 800c704:	605a      	strne	r2, [r3, #4]
 800c706:	e7eb      	b.n	800c6e0 <_malloc_r+0xa8>
 800c708:	4623      	mov	r3, r4
 800c70a:	6864      	ldr	r4, [r4, #4]
 800c70c:	e7ae      	b.n	800c66c <_malloc_r+0x34>
 800c70e:	463c      	mov	r4, r7
 800c710:	687f      	ldr	r7, [r7, #4]
 800c712:	e7b6      	b.n	800c682 <_malloc_r+0x4a>
 800c714:	461a      	mov	r2, r3
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	42a3      	cmp	r3, r4
 800c71a:	d1fb      	bne.n	800c714 <_malloc_r+0xdc>
 800c71c:	2300      	movs	r3, #0
 800c71e:	6053      	str	r3, [r2, #4]
 800c720:	e7de      	b.n	800c6e0 <_malloc_r+0xa8>
 800c722:	230c      	movs	r3, #12
 800c724:	6033      	str	r3, [r6, #0]
 800c726:	4630      	mov	r0, r6
 800c728:	f000 f80c 	bl	800c744 <__malloc_unlock>
 800c72c:	e794      	b.n	800c658 <_malloc_r+0x20>
 800c72e:	6005      	str	r5, [r0, #0]
 800c730:	e7d6      	b.n	800c6e0 <_malloc_r+0xa8>
 800c732:	bf00      	nop
 800c734:	200020e0 	.word	0x200020e0

0800c738 <__malloc_lock>:
 800c738:	4801      	ldr	r0, [pc, #4]	@ (800c740 <__malloc_lock+0x8>)
 800c73a:	f000 be04 	b.w	800d346 <__retarget_lock_acquire_recursive>
 800c73e:	bf00      	nop
 800c740:	20002224 	.word	0x20002224

0800c744 <__malloc_unlock>:
 800c744:	4801      	ldr	r0, [pc, #4]	@ (800c74c <__malloc_unlock+0x8>)
 800c746:	f000 bdff 	b.w	800d348 <__retarget_lock_release_recursive>
 800c74a:	bf00      	nop
 800c74c:	20002224 	.word	0x20002224

0800c750 <__cvt>:
 800c750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	ec57 6b10 	vmov	r6, r7, d0
 800c758:	2f00      	cmp	r7, #0
 800c75a:	460c      	mov	r4, r1
 800c75c:	4619      	mov	r1, r3
 800c75e:	463b      	mov	r3, r7
 800c760:	bfbb      	ittet	lt
 800c762:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c766:	461f      	movlt	r7, r3
 800c768:	2300      	movge	r3, #0
 800c76a:	232d      	movlt	r3, #45	@ 0x2d
 800c76c:	700b      	strb	r3, [r1, #0]
 800c76e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c770:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c774:	4691      	mov	r9, r2
 800c776:	f023 0820 	bic.w	r8, r3, #32
 800c77a:	bfbc      	itt	lt
 800c77c:	4632      	movlt	r2, r6
 800c77e:	4616      	movlt	r6, r2
 800c780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c784:	d005      	beq.n	800c792 <__cvt+0x42>
 800c786:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c78a:	d100      	bne.n	800c78e <__cvt+0x3e>
 800c78c:	3401      	adds	r4, #1
 800c78e:	2102      	movs	r1, #2
 800c790:	e000      	b.n	800c794 <__cvt+0x44>
 800c792:	2103      	movs	r1, #3
 800c794:	ab03      	add	r3, sp, #12
 800c796:	9301      	str	r3, [sp, #4]
 800c798:	ab02      	add	r3, sp, #8
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	ec47 6b10 	vmov	d0, r6, r7
 800c7a0:	4653      	mov	r3, sl
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	f000 fe70 	bl	800d488 <_dtoa_r>
 800c7a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	d119      	bne.n	800c7e4 <__cvt+0x94>
 800c7b0:	f019 0f01 	tst.w	r9, #1
 800c7b4:	d00e      	beq.n	800c7d4 <__cvt+0x84>
 800c7b6:	eb00 0904 	add.w	r9, r0, r4
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4630      	mov	r0, r6
 800c7c0:	4639      	mov	r1, r7
 800c7c2:	f7f4 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7c6:	b108      	cbz	r0, 800c7cc <__cvt+0x7c>
 800c7c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7cc:	2230      	movs	r2, #48	@ 0x30
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	454b      	cmp	r3, r9
 800c7d2:	d31e      	bcc.n	800c812 <__cvt+0xc2>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d8:	1b5b      	subs	r3, r3, r5
 800c7da:	4628      	mov	r0, r5
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	b004      	add	sp, #16
 800c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c7e8:	eb00 0904 	add.w	r9, r0, r4
 800c7ec:	d1e5      	bne.n	800c7ba <__cvt+0x6a>
 800c7ee:	7803      	ldrb	r3, [r0, #0]
 800c7f0:	2b30      	cmp	r3, #48	@ 0x30
 800c7f2:	d10a      	bne.n	800c80a <__cvt+0xba>
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800c800:	b918      	cbnz	r0, 800c80a <__cvt+0xba>
 800c802:	f1c4 0401 	rsb	r4, r4, #1
 800c806:	f8ca 4000 	str.w	r4, [sl]
 800c80a:	f8da 3000 	ldr.w	r3, [sl]
 800c80e:	4499      	add	r9, r3
 800c810:	e7d3      	b.n	800c7ba <__cvt+0x6a>
 800c812:	1c59      	adds	r1, r3, #1
 800c814:	9103      	str	r1, [sp, #12]
 800c816:	701a      	strb	r2, [r3, #0]
 800c818:	e7d9      	b.n	800c7ce <__cvt+0x7e>

0800c81a <__exponent>:
 800c81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c81c:	2900      	cmp	r1, #0
 800c81e:	bfba      	itte	lt
 800c820:	4249      	neglt	r1, r1
 800c822:	232d      	movlt	r3, #45	@ 0x2d
 800c824:	232b      	movge	r3, #43	@ 0x2b
 800c826:	2909      	cmp	r1, #9
 800c828:	7002      	strb	r2, [r0, #0]
 800c82a:	7043      	strb	r3, [r0, #1]
 800c82c:	dd29      	ble.n	800c882 <__exponent+0x68>
 800c82e:	f10d 0307 	add.w	r3, sp, #7
 800c832:	461d      	mov	r5, r3
 800c834:	270a      	movs	r7, #10
 800c836:	461a      	mov	r2, r3
 800c838:	fbb1 f6f7 	udiv	r6, r1, r7
 800c83c:	fb07 1416 	mls	r4, r7, r6, r1
 800c840:	3430      	adds	r4, #48	@ 0x30
 800c842:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c846:	460c      	mov	r4, r1
 800c848:	2c63      	cmp	r4, #99	@ 0x63
 800c84a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c84e:	4631      	mov	r1, r6
 800c850:	dcf1      	bgt.n	800c836 <__exponent+0x1c>
 800c852:	3130      	adds	r1, #48	@ 0x30
 800c854:	1e94      	subs	r4, r2, #2
 800c856:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c85a:	1c41      	adds	r1, r0, #1
 800c85c:	4623      	mov	r3, r4
 800c85e:	42ab      	cmp	r3, r5
 800c860:	d30a      	bcc.n	800c878 <__exponent+0x5e>
 800c862:	f10d 0309 	add.w	r3, sp, #9
 800c866:	1a9b      	subs	r3, r3, r2
 800c868:	42ac      	cmp	r4, r5
 800c86a:	bf88      	it	hi
 800c86c:	2300      	movhi	r3, #0
 800c86e:	3302      	adds	r3, #2
 800c870:	4403      	add	r3, r0
 800c872:	1a18      	subs	r0, r3, r0
 800c874:	b003      	add	sp, #12
 800c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c878:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c87c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c880:	e7ed      	b.n	800c85e <__exponent+0x44>
 800c882:	2330      	movs	r3, #48	@ 0x30
 800c884:	3130      	adds	r1, #48	@ 0x30
 800c886:	7083      	strb	r3, [r0, #2]
 800c888:	70c1      	strb	r1, [r0, #3]
 800c88a:	1d03      	adds	r3, r0, #4
 800c88c:	e7f1      	b.n	800c872 <__exponent+0x58>
	...

0800c890 <_printf_float>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b08d      	sub	sp, #52	@ 0x34
 800c896:	460c      	mov	r4, r1
 800c898:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c89c:	4616      	mov	r6, r2
 800c89e:	461f      	mov	r7, r3
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	f000 fccb 	bl	800d23c <_localeconv_r>
 800c8a6:	6803      	ldr	r3, [r0, #0]
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f3 fce0 	bl	8000270 <strlen>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b8:	9005      	str	r0, [sp, #20]
 800c8ba:	3307      	adds	r3, #7
 800c8bc:	f023 0307 	bic.w	r3, r3, #7
 800c8c0:	f103 0208 	add.w	r2, r3, #8
 800c8c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c8c8:	f8d4 b000 	ldr.w	fp, [r4]
 800c8cc:	f8c8 2000 	str.w	r2, [r8]
 800c8d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c8d8:	9307      	str	r3, [sp, #28]
 800c8da:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c8e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8e6:	4b9c      	ldr	r3, [pc, #624]	@ (800cb58 <_printf_float+0x2c8>)
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ec:	f7f4 f91e 	bl	8000b2c <__aeabi_dcmpun>
 800c8f0:	bb70      	cbnz	r0, 800c950 <_printf_float+0xc0>
 800c8f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f6:	4b98      	ldr	r3, [pc, #608]	@ (800cb58 <_printf_float+0x2c8>)
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	f7f4 f8f8 	bl	8000af0 <__aeabi_dcmple>
 800c900:	bb30      	cbnz	r0, 800c950 <_printf_float+0xc0>
 800c902:	2200      	movs	r2, #0
 800c904:	2300      	movs	r3, #0
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f4 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800c90e:	b110      	cbz	r0, 800c916 <_printf_float+0x86>
 800c910:	232d      	movs	r3, #45	@ 0x2d
 800c912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c916:	4a91      	ldr	r2, [pc, #580]	@ (800cb5c <_printf_float+0x2cc>)
 800c918:	4b91      	ldr	r3, [pc, #580]	@ (800cb60 <_printf_float+0x2d0>)
 800c91a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c91e:	bf8c      	ite	hi
 800c920:	4690      	movhi	r8, r2
 800c922:	4698      	movls	r8, r3
 800c924:	2303      	movs	r3, #3
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	f02b 0304 	bic.w	r3, fp, #4
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	f04f 0900 	mov.w	r9, #0
 800c932:	9700      	str	r7, [sp, #0]
 800c934:	4633      	mov	r3, r6
 800c936:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c938:	4621      	mov	r1, r4
 800c93a:	4628      	mov	r0, r5
 800c93c:	f000 f9d2 	bl	800cce4 <_printf_common>
 800c940:	3001      	adds	r0, #1
 800c942:	f040 808d 	bne.w	800ca60 <_printf_float+0x1d0>
 800c946:	f04f 30ff 	mov.w	r0, #4294967295
 800c94a:	b00d      	add	sp, #52	@ 0x34
 800c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c950:	4642      	mov	r2, r8
 800c952:	464b      	mov	r3, r9
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	f7f4 f8e8 	bl	8000b2c <__aeabi_dcmpun>
 800c95c:	b140      	cbz	r0, 800c970 <_printf_float+0xe0>
 800c95e:	464b      	mov	r3, r9
 800c960:	2b00      	cmp	r3, #0
 800c962:	bfbc      	itt	lt
 800c964:	232d      	movlt	r3, #45	@ 0x2d
 800c966:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c96a:	4a7e      	ldr	r2, [pc, #504]	@ (800cb64 <_printf_float+0x2d4>)
 800c96c:	4b7e      	ldr	r3, [pc, #504]	@ (800cb68 <_printf_float+0x2d8>)
 800c96e:	e7d4      	b.n	800c91a <_printf_float+0x8a>
 800c970:	6863      	ldr	r3, [r4, #4]
 800c972:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c976:	9206      	str	r2, [sp, #24]
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	d13b      	bne.n	800c9f4 <_printf_float+0x164>
 800c97c:	2306      	movs	r3, #6
 800c97e:	6063      	str	r3, [r4, #4]
 800c980:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c984:	2300      	movs	r3, #0
 800c986:	6022      	str	r2, [r4, #0]
 800c988:	9303      	str	r3, [sp, #12]
 800c98a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c98c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c990:	ab09      	add	r3, sp, #36	@ 0x24
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	6861      	ldr	r1, [r4, #4]
 800c996:	ec49 8b10 	vmov	d0, r8, r9
 800c99a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f7ff fed6 	bl	800c750 <__cvt>
 800c9a4:	9b06      	ldr	r3, [sp, #24]
 800c9a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9a8:	2b47      	cmp	r3, #71	@ 0x47
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	d129      	bne.n	800ca02 <_printf_float+0x172>
 800c9ae:	1cc8      	adds	r0, r1, #3
 800c9b0:	db02      	blt.n	800c9b8 <_printf_float+0x128>
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	4299      	cmp	r1, r3
 800c9b6:	dd41      	ble.n	800ca3c <_printf_float+0x1ac>
 800c9b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c9bc:	fa5f fa8a 	uxtb.w	sl, sl
 800c9c0:	3901      	subs	r1, #1
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c9c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c9ca:	f7ff ff26 	bl	800c81a <__exponent>
 800c9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9d0:	1813      	adds	r3, r2, r0
 800c9d2:	2a01      	cmp	r2, #1
 800c9d4:	4681      	mov	r9, r0
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	dc02      	bgt.n	800c9e0 <_printf_float+0x150>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	07d2      	lsls	r2, r2, #31
 800c9de:	d501      	bpl.n	800c9e4 <_printf_float+0x154>
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	6123      	str	r3, [r4, #16]
 800c9e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d0a2      	beq.n	800c932 <_printf_float+0xa2>
 800c9ec:	232d      	movs	r3, #45	@ 0x2d
 800c9ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9f2:	e79e      	b.n	800c932 <_printf_float+0xa2>
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	2a47      	cmp	r2, #71	@ 0x47
 800c9f8:	d1c2      	bne.n	800c980 <_printf_float+0xf0>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1c0      	bne.n	800c980 <_printf_float+0xf0>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7bd      	b.n	800c97e <_printf_float+0xee>
 800ca02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca06:	d9db      	bls.n	800c9c0 <_printf_float+0x130>
 800ca08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ca0c:	d118      	bne.n	800ca40 <_printf_float+0x1b0>
 800ca0e:	2900      	cmp	r1, #0
 800ca10:	6863      	ldr	r3, [r4, #4]
 800ca12:	dd0b      	ble.n	800ca2c <_printf_float+0x19c>
 800ca14:	6121      	str	r1, [r4, #16]
 800ca16:	b913      	cbnz	r3, 800ca1e <_printf_float+0x18e>
 800ca18:	6822      	ldr	r2, [r4, #0]
 800ca1a:	07d0      	lsls	r0, r2, #31
 800ca1c:	d502      	bpl.n	800ca24 <_printf_float+0x194>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	440b      	add	r3, r1
 800ca22:	6123      	str	r3, [r4, #16]
 800ca24:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ca26:	f04f 0900 	mov.w	r9, #0
 800ca2a:	e7db      	b.n	800c9e4 <_printf_float+0x154>
 800ca2c:	b913      	cbnz	r3, 800ca34 <_printf_float+0x1a4>
 800ca2e:	6822      	ldr	r2, [r4, #0]
 800ca30:	07d2      	lsls	r2, r2, #31
 800ca32:	d501      	bpl.n	800ca38 <_printf_float+0x1a8>
 800ca34:	3302      	adds	r3, #2
 800ca36:	e7f4      	b.n	800ca22 <_printf_float+0x192>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e7f2      	b.n	800ca22 <_printf_float+0x192>
 800ca3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ca40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca42:	4299      	cmp	r1, r3
 800ca44:	db05      	blt.n	800ca52 <_printf_float+0x1c2>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	6121      	str	r1, [r4, #16]
 800ca4a:	07d8      	lsls	r0, r3, #31
 800ca4c:	d5ea      	bpl.n	800ca24 <_printf_float+0x194>
 800ca4e:	1c4b      	adds	r3, r1, #1
 800ca50:	e7e7      	b.n	800ca22 <_printf_float+0x192>
 800ca52:	2900      	cmp	r1, #0
 800ca54:	bfd4      	ite	le
 800ca56:	f1c1 0202 	rsble	r2, r1, #2
 800ca5a:	2201      	movgt	r2, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	e7e0      	b.n	800ca22 <_printf_float+0x192>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	055a      	lsls	r2, r3, #21
 800ca64:	d407      	bmi.n	800ca76 <_printf_float+0x1e6>
 800ca66:	6923      	ldr	r3, [r4, #16]
 800ca68:	4642      	mov	r2, r8
 800ca6a:	4631      	mov	r1, r6
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	47b8      	blx	r7
 800ca70:	3001      	adds	r0, #1
 800ca72:	d12b      	bne.n	800cacc <_printf_float+0x23c>
 800ca74:	e767      	b.n	800c946 <_printf_float+0xb6>
 800ca76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca7a:	f240 80dd 	bls.w	800cc38 <_printf_float+0x3a8>
 800ca7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca82:	2200      	movs	r2, #0
 800ca84:	2300      	movs	r3, #0
 800ca86:	f7f4 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d033      	beq.n	800caf6 <_printf_float+0x266>
 800ca8e:	4a37      	ldr	r2, [pc, #220]	@ (800cb6c <_printf_float+0x2dc>)
 800ca90:	2301      	movs	r3, #1
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f af54 	beq.w	800c946 <_printf_float+0xb6>
 800ca9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800caa2:	4543      	cmp	r3, r8
 800caa4:	db02      	blt.n	800caac <_printf_float+0x21c>
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	07d8      	lsls	r0, r3, #31
 800caaa:	d50f      	bpl.n	800cacc <_printf_float+0x23c>
 800caac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cab0:	4631      	mov	r1, r6
 800cab2:	4628      	mov	r0, r5
 800cab4:	47b8      	blx	r7
 800cab6:	3001      	adds	r0, #1
 800cab8:	f43f af45 	beq.w	800c946 <_printf_float+0xb6>
 800cabc:	f04f 0900 	mov.w	r9, #0
 800cac0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cac4:	f104 0a1a 	add.w	sl, r4, #26
 800cac8:	45c8      	cmp	r8, r9
 800caca:	dc09      	bgt.n	800cae0 <_printf_float+0x250>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	079b      	lsls	r3, r3, #30
 800cad0:	f100 8103 	bmi.w	800ccda <_printf_float+0x44a>
 800cad4:	68e0      	ldr	r0, [r4, #12]
 800cad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cad8:	4298      	cmp	r0, r3
 800cada:	bfb8      	it	lt
 800cadc:	4618      	movlt	r0, r3
 800cade:	e734      	b.n	800c94a <_printf_float+0xba>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f af2b 	beq.w	800c946 <_printf_float+0xb6>
 800caf0:	f109 0901 	add.w	r9, r9, #1
 800caf4:	e7e8      	b.n	800cac8 <_printf_float+0x238>
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	dc39      	bgt.n	800cb70 <_printf_float+0x2e0>
 800cafc:	4a1b      	ldr	r2, [pc, #108]	@ (800cb6c <_printf_float+0x2dc>)
 800cafe:	2301      	movs	r3, #1
 800cb00:	4631      	mov	r1, r6
 800cb02:	4628      	mov	r0, r5
 800cb04:	47b8      	blx	r7
 800cb06:	3001      	adds	r0, #1
 800cb08:	f43f af1d 	beq.w	800c946 <_printf_float+0xb6>
 800cb0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cb10:	ea59 0303 	orrs.w	r3, r9, r3
 800cb14:	d102      	bne.n	800cb1c <_printf_float+0x28c>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	07d9      	lsls	r1, r3, #31
 800cb1a:	d5d7      	bpl.n	800cacc <_printf_float+0x23c>
 800cb1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b8      	blx	r7
 800cb26:	3001      	adds	r0, #1
 800cb28:	f43f af0d 	beq.w	800c946 <_printf_float+0xb6>
 800cb2c:	f04f 0a00 	mov.w	sl, #0
 800cb30:	f104 0b1a 	add.w	fp, r4, #26
 800cb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb36:	425b      	negs	r3, r3
 800cb38:	4553      	cmp	r3, sl
 800cb3a:	dc01      	bgt.n	800cb40 <_printf_float+0x2b0>
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	e793      	b.n	800ca68 <_printf_float+0x1d8>
 800cb40:	2301      	movs	r3, #1
 800cb42:	465a      	mov	r2, fp
 800cb44:	4631      	mov	r1, r6
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f43f aefb 	beq.w	800c946 <_printf_float+0xb6>
 800cb50:	f10a 0a01 	add.w	sl, sl, #1
 800cb54:	e7ee      	b.n	800cb34 <_printf_float+0x2a4>
 800cb56:	bf00      	nop
 800cb58:	7fefffff 	.word	0x7fefffff
 800cb5c:	0800efc4 	.word	0x0800efc4
 800cb60:	0800efc0 	.word	0x0800efc0
 800cb64:	0800efcc 	.word	0x0800efcc
 800cb68:	0800efc8 	.word	0x0800efc8
 800cb6c:	0800efd0 	.word	0x0800efd0
 800cb70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb76:	4553      	cmp	r3, sl
 800cb78:	bfa8      	it	ge
 800cb7a:	4653      	movge	r3, sl
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	4699      	mov	r9, r3
 800cb80:	dc36      	bgt.n	800cbf0 <_printf_float+0x360>
 800cb82:	f04f 0b00 	mov.w	fp, #0
 800cb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb8a:	f104 021a 	add.w	r2, r4, #26
 800cb8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb90:	9306      	str	r3, [sp, #24]
 800cb92:	eba3 0309 	sub.w	r3, r3, r9
 800cb96:	455b      	cmp	r3, fp
 800cb98:	dc31      	bgt.n	800cbfe <_printf_float+0x36e>
 800cb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb9c:	459a      	cmp	sl, r3
 800cb9e:	dc3a      	bgt.n	800cc16 <_printf_float+0x386>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	07da      	lsls	r2, r3, #31
 800cba4:	d437      	bmi.n	800cc16 <_printf_float+0x386>
 800cba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba8:	ebaa 0903 	sub.w	r9, sl, r3
 800cbac:	9b06      	ldr	r3, [sp, #24]
 800cbae:	ebaa 0303 	sub.w	r3, sl, r3
 800cbb2:	4599      	cmp	r9, r3
 800cbb4:	bfa8      	it	ge
 800cbb6:	4699      	movge	r9, r3
 800cbb8:	f1b9 0f00 	cmp.w	r9, #0
 800cbbc:	dc33      	bgt.n	800cc26 <_printf_float+0x396>
 800cbbe:	f04f 0800 	mov.w	r8, #0
 800cbc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbc6:	f104 0b1a 	add.w	fp, r4, #26
 800cbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbcc:	ebaa 0303 	sub.w	r3, sl, r3
 800cbd0:	eba3 0309 	sub.w	r3, r3, r9
 800cbd4:	4543      	cmp	r3, r8
 800cbd6:	f77f af79 	ble.w	800cacc <_printf_float+0x23c>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	465a      	mov	r2, fp
 800cbde:	4631      	mov	r1, r6
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	47b8      	blx	r7
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	f43f aeae 	beq.w	800c946 <_printf_float+0xb6>
 800cbea:	f108 0801 	add.w	r8, r8, #1
 800cbee:	e7ec      	b.n	800cbca <_printf_float+0x33a>
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b8      	blx	r7
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d1c2      	bne.n	800cb82 <_printf_float+0x2f2>
 800cbfc:	e6a3      	b.n	800c946 <_printf_float+0xb6>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4631      	mov	r1, r6
 800cc02:	4628      	mov	r0, r5
 800cc04:	9206      	str	r2, [sp, #24]
 800cc06:	47b8      	blx	r7
 800cc08:	3001      	adds	r0, #1
 800cc0a:	f43f ae9c 	beq.w	800c946 <_printf_float+0xb6>
 800cc0e:	9a06      	ldr	r2, [sp, #24]
 800cc10:	f10b 0b01 	add.w	fp, fp, #1
 800cc14:	e7bb      	b.n	800cb8e <_printf_float+0x2fe>
 800cc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	47b8      	blx	r7
 800cc20:	3001      	adds	r0, #1
 800cc22:	d1c0      	bne.n	800cba6 <_printf_float+0x316>
 800cc24:	e68f      	b.n	800c946 <_printf_float+0xb6>
 800cc26:	9a06      	ldr	r2, [sp, #24]
 800cc28:	464b      	mov	r3, r9
 800cc2a:	4442      	add	r2, r8
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	d1c3      	bne.n	800cbbe <_printf_float+0x32e>
 800cc36:	e686      	b.n	800c946 <_printf_float+0xb6>
 800cc38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc3c:	f1ba 0f01 	cmp.w	sl, #1
 800cc40:	dc01      	bgt.n	800cc46 <_printf_float+0x3b6>
 800cc42:	07db      	lsls	r3, r3, #31
 800cc44:	d536      	bpl.n	800ccb4 <_printf_float+0x424>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4642      	mov	r2, r8
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	47b8      	blx	r7
 800cc50:	3001      	adds	r0, #1
 800cc52:	f43f ae78 	beq.w	800c946 <_printf_float+0xb6>
 800cc56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b8      	blx	r7
 800cc60:	3001      	adds	r0, #1
 800cc62:	f43f ae70 	beq.w	800c946 <_printf_float+0xb6>
 800cc66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc72:	f7f3 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc76:	b9c0      	cbnz	r0, 800ccaa <_printf_float+0x41a>
 800cc78:	4653      	mov	r3, sl
 800cc7a:	f108 0201 	add.w	r2, r8, #1
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	47b8      	blx	r7
 800cc84:	3001      	adds	r0, #1
 800cc86:	d10c      	bne.n	800cca2 <_printf_float+0x412>
 800cc88:	e65d      	b.n	800c946 <_printf_float+0xb6>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	465a      	mov	r2, fp
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	f43f ae56 	beq.w	800c946 <_printf_float+0xb6>
 800cc9a:	f108 0801 	add.w	r8, r8, #1
 800cc9e:	45d0      	cmp	r8, sl
 800cca0:	dbf3      	blt.n	800cc8a <_printf_float+0x3fa>
 800cca2:	464b      	mov	r3, r9
 800cca4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cca8:	e6df      	b.n	800ca6a <_printf_float+0x1da>
 800ccaa:	f04f 0800 	mov.w	r8, #0
 800ccae:	f104 0b1a 	add.w	fp, r4, #26
 800ccb2:	e7f4      	b.n	800cc9e <_printf_float+0x40e>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	e7e1      	b.n	800cc7e <_printf_float+0x3ee>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	464a      	mov	r2, r9
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	47b8      	blx	r7
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	f43f ae3e 	beq.w	800c946 <_printf_float+0xb6>
 800ccca:	f108 0801 	add.w	r8, r8, #1
 800ccce:	68e3      	ldr	r3, [r4, #12]
 800ccd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccd2:	1a5b      	subs	r3, r3, r1
 800ccd4:	4543      	cmp	r3, r8
 800ccd6:	dcf0      	bgt.n	800ccba <_printf_float+0x42a>
 800ccd8:	e6fc      	b.n	800cad4 <_printf_float+0x244>
 800ccda:	f04f 0800 	mov.w	r8, #0
 800ccde:	f104 0919 	add.w	r9, r4, #25
 800cce2:	e7f4      	b.n	800ccce <_printf_float+0x43e>

0800cce4 <_printf_common>:
 800cce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce8:	4616      	mov	r6, r2
 800ccea:	4698      	mov	r8, r3
 800ccec:	688a      	ldr	r2, [r1, #8]
 800ccee:	690b      	ldr	r3, [r1, #16]
 800ccf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	bfb8      	it	lt
 800ccf8:	4613      	movlt	r3, r2
 800ccfa:	6033      	str	r3, [r6, #0]
 800ccfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd00:	4607      	mov	r7, r0
 800cd02:	460c      	mov	r4, r1
 800cd04:	b10a      	cbz	r2, 800cd0a <_printf_common+0x26>
 800cd06:	3301      	adds	r3, #1
 800cd08:	6033      	str	r3, [r6, #0]
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	0699      	lsls	r1, r3, #26
 800cd0e:	bf42      	ittt	mi
 800cd10:	6833      	ldrmi	r3, [r6, #0]
 800cd12:	3302      	addmi	r3, #2
 800cd14:	6033      	strmi	r3, [r6, #0]
 800cd16:	6825      	ldr	r5, [r4, #0]
 800cd18:	f015 0506 	ands.w	r5, r5, #6
 800cd1c:	d106      	bne.n	800cd2c <_printf_common+0x48>
 800cd1e:	f104 0a19 	add.w	sl, r4, #25
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	6832      	ldr	r2, [r6, #0]
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	dc26      	bgt.n	800cd7a <_printf_common+0x96>
 800cd2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd30:	6822      	ldr	r2, [r4, #0]
 800cd32:	3b00      	subs	r3, #0
 800cd34:	bf18      	it	ne
 800cd36:	2301      	movne	r3, #1
 800cd38:	0692      	lsls	r2, r2, #26
 800cd3a:	d42b      	bmi.n	800cd94 <_printf_common+0xb0>
 800cd3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd40:	4641      	mov	r1, r8
 800cd42:	4638      	mov	r0, r7
 800cd44:	47c8      	blx	r9
 800cd46:	3001      	adds	r0, #1
 800cd48:	d01e      	beq.n	800cd88 <_printf_common+0xa4>
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	6922      	ldr	r2, [r4, #16]
 800cd4e:	f003 0306 	and.w	r3, r3, #6
 800cd52:	2b04      	cmp	r3, #4
 800cd54:	bf02      	ittt	eq
 800cd56:	68e5      	ldreq	r5, [r4, #12]
 800cd58:	6833      	ldreq	r3, [r6, #0]
 800cd5a:	1aed      	subeq	r5, r5, r3
 800cd5c:	68a3      	ldr	r3, [r4, #8]
 800cd5e:	bf0c      	ite	eq
 800cd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd64:	2500      	movne	r5, #0
 800cd66:	4293      	cmp	r3, r2
 800cd68:	bfc4      	itt	gt
 800cd6a:	1a9b      	subgt	r3, r3, r2
 800cd6c:	18ed      	addgt	r5, r5, r3
 800cd6e:	2600      	movs	r6, #0
 800cd70:	341a      	adds	r4, #26
 800cd72:	42b5      	cmp	r5, r6
 800cd74:	d11a      	bne.n	800cdac <_printf_common+0xc8>
 800cd76:	2000      	movs	r0, #0
 800cd78:	e008      	b.n	800cd8c <_printf_common+0xa8>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	4641      	mov	r1, r8
 800cd80:	4638      	mov	r0, r7
 800cd82:	47c8      	blx	r9
 800cd84:	3001      	adds	r0, #1
 800cd86:	d103      	bne.n	800cd90 <_printf_common+0xac>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd90:	3501      	adds	r5, #1
 800cd92:	e7c6      	b.n	800cd22 <_printf_common+0x3e>
 800cd94:	18e1      	adds	r1, r4, r3
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	2030      	movs	r0, #48	@ 0x30
 800cd9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd9e:	4422      	add	r2, r4
 800cda0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cda4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cda8:	3302      	adds	r3, #2
 800cdaa:	e7c7      	b.n	800cd3c <_printf_common+0x58>
 800cdac:	2301      	movs	r3, #1
 800cdae:	4622      	mov	r2, r4
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	47c8      	blx	r9
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d0e6      	beq.n	800cd88 <_printf_common+0xa4>
 800cdba:	3601      	adds	r6, #1
 800cdbc:	e7d9      	b.n	800cd72 <_printf_common+0x8e>
	...

0800cdc0 <_printf_i>:
 800cdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc4:	7e0f      	ldrb	r7, [r1, #24]
 800cdc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdc8:	2f78      	cmp	r7, #120	@ 0x78
 800cdca:	4691      	mov	r9, r2
 800cdcc:	4680      	mov	r8, r0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	469a      	mov	sl, r3
 800cdd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdd6:	d807      	bhi.n	800cde8 <_printf_i+0x28>
 800cdd8:	2f62      	cmp	r7, #98	@ 0x62
 800cdda:	d80a      	bhi.n	800cdf2 <_printf_i+0x32>
 800cddc:	2f00      	cmp	r7, #0
 800cdde:	f000 80d1 	beq.w	800cf84 <_printf_i+0x1c4>
 800cde2:	2f58      	cmp	r7, #88	@ 0x58
 800cde4:	f000 80b8 	beq.w	800cf58 <_printf_i+0x198>
 800cde8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdf0:	e03a      	b.n	800ce68 <_printf_i+0xa8>
 800cdf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdf6:	2b15      	cmp	r3, #21
 800cdf8:	d8f6      	bhi.n	800cde8 <_printf_i+0x28>
 800cdfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ce00 <_printf_i+0x40>)
 800cdfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce00:	0800ce59 	.word	0x0800ce59
 800ce04:	0800ce6d 	.word	0x0800ce6d
 800ce08:	0800cde9 	.word	0x0800cde9
 800ce0c:	0800cde9 	.word	0x0800cde9
 800ce10:	0800cde9 	.word	0x0800cde9
 800ce14:	0800cde9 	.word	0x0800cde9
 800ce18:	0800ce6d 	.word	0x0800ce6d
 800ce1c:	0800cde9 	.word	0x0800cde9
 800ce20:	0800cde9 	.word	0x0800cde9
 800ce24:	0800cde9 	.word	0x0800cde9
 800ce28:	0800cde9 	.word	0x0800cde9
 800ce2c:	0800cf6b 	.word	0x0800cf6b
 800ce30:	0800ce97 	.word	0x0800ce97
 800ce34:	0800cf25 	.word	0x0800cf25
 800ce38:	0800cde9 	.word	0x0800cde9
 800ce3c:	0800cde9 	.word	0x0800cde9
 800ce40:	0800cf8d 	.word	0x0800cf8d
 800ce44:	0800cde9 	.word	0x0800cde9
 800ce48:	0800ce97 	.word	0x0800ce97
 800ce4c:	0800cde9 	.word	0x0800cde9
 800ce50:	0800cde9 	.word	0x0800cde9
 800ce54:	0800cf2d 	.word	0x0800cf2d
 800ce58:	6833      	ldr	r3, [r6, #0]
 800ce5a:	1d1a      	adds	r2, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6032      	str	r2, [r6, #0]
 800ce60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e09c      	b.n	800cfa6 <_printf_i+0x1e6>
 800ce6c:	6833      	ldr	r3, [r6, #0]
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	1d19      	adds	r1, r3, #4
 800ce72:	6031      	str	r1, [r6, #0]
 800ce74:	0606      	lsls	r6, r0, #24
 800ce76:	d501      	bpl.n	800ce7c <_printf_i+0xbc>
 800ce78:	681d      	ldr	r5, [r3, #0]
 800ce7a:	e003      	b.n	800ce84 <_printf_i+0xc4>
 800ce7c:	0645      	lsls	r5, r0, #25
 800ce7e:	d5fb      	bpl.n	800ce78 <_printf_i+0xb8>
 800ce80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce84:	2d00      	cmp	r5, #0
 800ce86:	da03      	bge.n	800ce90 <_printf_i+0xd0>
 800ce88:	232d      	movs	r3, #45	@ 0x2d
 800ce8a:	426d      	negs	r5, r5
 800ce8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce90:	4858      	ldr	r0, [pc, #352]	@ (800cff4 <_printf_i+0x234>)
 800ce92:	230a      	movs	r3, #10
 800ce94:	e011      	b.n	800ceba <_printf_i+0xfa>
 800ce96:	6821      	ldr	r1, [r4, #0]
 800ce98:	6833      	ldr	r3, [r6, #0]
 800ce9a:	0608      	lsls	r0, r1, #24
 800ce9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cea0:	d402      	bmi.n	800cea8 <_printf_i+0xe8>
 800cea2:	0649      	lsls	r1, r1, #25
 800cea4:	bf48      	it	mi
 800cea6:	b2ad      	uxthmi	r5, r5
 800cea8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ceaa:	4852      	ldr	r0, [pc, #328]	@ (800cff4 <_printf_i+0x234>)
 800ceac:	6033      	str	r3, [r6, #0]
 800ceae:	bf14      	ite	ne
 800ceb0:	230a      	movne	r3, #10
 800ceb2:	2308      	moveq	r3, #8
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ceba:	6866      	ldr	r6, [r4, #4]
 800cebc:	60a6      	str	r6, [r4, #8]
 800cebe:	2e00      	cmp	r6, #0
 800cec0:	db05      	blt.n	800cece <_printf_i+0x10e>
 800cec2:	6821      	ldr	r1, [r4, #0]
 800cec4:	432e      	orrs	r6, r5
 800cec6:	f021 0104 	bic.w	r1, r1, #4
 800ceca:	6021      	str	r1, [r4, #0]
 800cecc:	d04b      	beq.n	800cf66 <_printf_i+0x1a6>
 800cece:	4616      	mov	r6, r2
 800ced0:	fbb5 f1f3 	udiv	r1, r5, r3
 800ced4:	fb03 5711 	mls	r7, r3, r1, r5
 800ced8:	5dc7      	ldrb	r7, [r0, r7]
 800ceda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cede:	462f      	mov	r7, r5
 800cee0:	42bb      	cmp	r3, r7
 800cee2:	460d      	mov	r5, r1
 800cee4:	d9f4      	bls.n	800ced0 <_printf_i+0x110>
 800cee6:	2b08      	cmp	r3, #8
 800cee8:	d10b      	bne.n	800cf02 <_printf_i+0x142>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	07df      	lsls	r7, r3, #31
 800ceee:	d508      	bpl.n	800cf02 <_printf_i+0x142>
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	6861      	ldr	r1, [r4, #4]
 800cef4:	4299      	cmp	r1, r3
 800cef6:	bfde      	ittt	le
 800cef8:	2330      	movle	r3, #48	@ 0x30
 800cefa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cefe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf02:	1b92      	subs	r2, r2, r6
 800cf04:	6122      	str	r2, [r4, #16]
 800cf06:	f8cd a000 	str.w	sl, [sp]
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	aa03      	add	r2, sp, #12
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4640      	mov	r0, r8
 800cf12:	f7ff fee7 	bl	800cce4 <_printf_common>
 800cf16:	3001      	adds	r0, #1
 800cf18:	d14a      	bne.n	800cfb0 <_printf_i+0x1f0>
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	b004      	add	sp, #16
 800cf20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	f043 0320 	orr.w	r3, r3, #32
 800cf2a:	6023      	str	r3, [r4, #0]
 800cf2c:	4832      	ldr	r0, [pc, #200]	@ (800cff8 <_printf_i+0x238>)
 800cf2e:	2778      	movs	r7, #120	@ 0x78
 800cf30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	6831      	ldr	r1, [r6, #0]
 800cf38:	061f      	lsls	r7, r3, #24
 800cf3a:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf3e:	d402      	bmi.n	800cf46 <_printf_i+0x186>
 800cf40:	065f      	lsls	r7, r3, #25
 800cf42:	bf48      	it	mi
 800cf44:	b2ad      	uxthmi	r5, r5
 800cf46:	6031      	str	r1, [r6, #0]
 800cf48:	07d9      	lsls	r1, r3, #31
 800cf4a:	bf44      	itt	mi
 800cf4c:	f043 0320 	orrmi.w	r3, r3, #32
 800cf50:	6023      	strmi	r3, [r4, #0]
 800cf52:	b11d      	cbz	r5, 800cf5c <_printf_i+0x19c>
 800cf54:	2310      	movs	r3, #16
 800cf56:	e7ad      	b.n	800ceb4 <_printf_i+0xf4>
 800cf58:	4826      	ldr	r0, [pc, #152]	@ (800cff4 <_printf_i+0x234>)
 800cf5a:	e7e9      	b.n	800cf30 <_printf_i+0x170>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	f023 0320 	bic.w	r3, r3, #32
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	e7f6      	b.n	800cf54 <_printf_i+0x194>
 800cf66:	4616      	mov	r6, r2
 800cf68:	e7bd      	b.n	800cee6 <_printf_i+0x126>
 800cf6a:	6833      	ldr	r3, [r6, #0]
 800cf6c:	6825      	ldr	r5, [r4, #0]
 800cf6e:	6961      	ldr	r1, [r4, #20]
 800cf70:	1d18      	adds	r0, r3, #4
 800cf72:	6030      	str	r0, [r6, #0]
 800cf74:	062e      	lsls	r6, r5, #24
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	d501      	bpl.n	800cf7e <_printf_i+0x1be>
 800cf7a:	6019      	str	r1, [r3, #0]
 800cf7c:	e002      	b.n	800cf84 <_printf_i+0x1c4>
 800cf7e:	0668      	lsls	r0, r5, #25
 800cf80:	d5fb      	bpl.n	800cf7a <_printf_i+0x1ba>
 800cf82:	8019      	strh	r1, [r3, #0]
 800cf84:	2300      	movs	r3, #0
 800cf86:	6123      	str	r3, [r4, #16]
 800cf88:	4616      	mov	r6, r2
 800cf8a:	e7bc      	b.n	800cf06 <_printf_i+0x146>
 800cf8c:	6833      	ldr	r3, [r6, #0]
 800cf8e:	1d1a      	adds	r2, r3, #4
 800cf90:	6032      	str	r2, [r6, #0]
 800cf92:	681e      	ldr	r6, [r3, #0]
 800cf94:	6862      	ldr	r2, [r4, #4]
 800cf96:	2100      	movs	r1, #0
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7f3 f919 	bl	80001d0 <memchr>
 800cf9e:	b108      	cbz	r0, 800cfa4 <_printf_i+0x1e4>
 800cfa0:	1b80      	subs	r0, r0, r6
 800cfa2:	6060      	str	r0, [r4, #4]
 800cfa4:	6863      	ldr	r3, [r4, #4]
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfae:	e7aa      	b.n	800cf06 <_printf_i+0x146>
 800cfb0:	6923      	ldr	r3, [r4, #16]
 800cfb2:	4632      	mov	r2, r6
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	47d0      	blx	sl
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d0ad      	beq.n	800cf1a <_printf_i+0x15a>
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	079b      	lsls	r3, r3, #30
 800cfc2:	d413      	bmi.n	800cfec <_printf_i+0x22c>
 800cfc4:	68e0      	ldr	r0, [r4, #12]
 800cfc6:	9b03      	ldr	r3, [sp, #12]
 800cfc8:	4298      	cmp	r0, r3
 800cfca:	bfb8      	it	lt
 800cfcc:	4618      	movlt	r0, r3
 800cfce:	e7a6      	b.n	800cf1e <_printf_i+0x15e>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	4632      	mov	r2, r6
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	4640      	mov	r0, r8
 800cfd8:	47d0      	blx	sl
 800cfda:	3001      	adds	r0, #1
 800cfdc:	d09d      	beq.n	800cf1a <_printf_i+0x15a>
 800cfde:	3501      	adds	r5, #1
 800cfe0:	68e3      	ldr	r3, [r4, #12]
 800cfe2:	9903      	ldr	r1, [sp, #12]
 800cfe4:	1a5b      	subs	r3, r3, r1
 800cfe6:	42ab      	cmp	r3, r5
 800cfe8:	dcf2      	bgt.n	800cfd0 <_printf_i+0x210>
 800cfea:	e7eb      	b.n	800cfc4 <_printf_i+0x204>
 800cfec:	2500      	movs	r5, #0
 800cfee:	f104 0619 	add.w	r6, r4, #25
 800cff2:	e7f5      	b.n	800cfe0 <_printf_i+0x220>
 800cff4:	0800efd2 	.word	0x0800efd2
 800cff8:	0800efe3 	.word	0x0800efe3

0800cffc <std>:
 800cffc:	2300      	movs	r3, #0
 800cffe:	b510      	push	{r4, lr}
 800d000:	4604      	mov	r4, r0
 800d002:	e9c0 3300 	strd	r3, r3, [r0]
 800d006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d00a:	6083      	str	r3, [r0, #8]
 800d00c:	8181      	strh	r1, [r0, #12]
 800d00e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d010:	81c2      	strh	r2, [r0, #14]
 800d012:	6183      	str	r3, [r0, #24]
 800d014:	4619      	mov	r1, r3
 800d016:	2208      	movs	r2, #8
 800d018:	305c      	adds	r0, #92	@ 0x5c
 800d01a:	f000 f906 	bl	800d22a <memset>
 800d01e:	4b0d      	ldr	r3, [pc, #52]	@ (800d054 <std+0x58>)
 800d020:	6263      	str	r3, [r4, #36]	@ 0x24
 800d022:	4b0d      	ldr	r3, [pc, #52]	@ (800d058 <std+0x5c>)
 800d024:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d026:	4b0d      	ldr	r3, [pc, #52]	@ (800d05c <std+0x60>)
 800d028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d02a:	4b0d      	ldr	r3, [pc, #52]	@ (800d060 <std+0x64>)
 800d02c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d02e:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <std+0x68>)
 800d030:	6224      	str	r4, [r4, #32]
 800d032:	429c      	cmp	r4, r3
 800d034:	d006      	beq.n	800d044 <std+0x48>
 800d036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d03a:	4294      	cmp	r4, r2
 800d03c:	d002      	beq.n	800d044 <std+0x48>
 800d03e:	33d0      	adds	r3, #208	@ 0xd0
 800d040:	429c      	cmp	r4, r3
 800d042:	d105      	bne.n	800d050 <std+0x54>
 800d044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d04c:	f000 b97a 	b.w	800d344 <__retarget_lock_init_recursive>
 800d050:	bd10      	pop	{r4, pc}
 800d052:	bf00      	nop
 800d054:	0800d1a5 	.word	0x0800d1a5
 800d058:	0800d1c7 	.word	0x0800d1c7
 800d05c:	0800d1ff 	.word	0x0800d1ff
 800d060:	0800d223 	.word	0x0800d223
 800d064:	200020e4 	.word	0x200020e4

0800d068 <stdio_exit_handler>:
 800d068:	4a02      	ldr	r2, [pc, #8]	@ (800d074 <stdio_exit_handler+0xc>)
 800d06a:	4903      	ldr	r1, [pc, #12]	@ (800d078 <stdio_exit_handler+0x10>)
 800d06c:	4803      	ldr	r0, [pc, #12]	@ (800d07c <stdio_exit_handler+0x14>)
 800d06e:	f000 b87b 	b.w	800d168 <_fwalk_sglue>
 800d072:	bf00      	nop
 800d074:	200000fc 	.word	0x200000fc
 800d078:	0800eb3d 	.word	0x0800eb3d
 800d07c:	2000010c 	.word	0x2000010c

0800d080 <cleanup_stdio>:
 800d080:	6841      	ldr	r1, [r0, #4]
 800d082:	4b0c      	ldr	r3, [pc, #48]	@ (800d0b4 <cleanup_stdio+0x34>)
 800d084:	4299      	cmp	r1, r3
 800d086:	b510      	push	{r4, lr}
 800d088:	4604      	mov	r4, r0
 800d08a:	d001      	beq.n	800d090 <cleanup_stdio+0x10>
 800d08c:	f001 fd56 	bl	800eb3c <_fflush_r>
 800d090:	68a1      	ldr	r1, [r4, #8]
 800d092:	4b09      	ldr	r3, [pc, #36]	@ (800d0b8 <cleanup_stdio+0x38>)
 800d094:	4299      	cmp	r1, r3
 800d096:	d002      	beq.n	800d09e <cleanup_stdio+0x1e>
 800d098:	4620      	mov	r0, r4
 800d09a:	f001 fd4f 	bl	800eb3c <_fflush_r>
 800d09e:	68e1      	ldr	r1, [r4, #12]
 800d0a0:	4b06      	ldr	r3, [pc, #24]	@ (800d0bc <cleanup_stdio+0x3c>)
 800d0a2:	4299      	cmp	r1, r3
 800d0a4:	d004      	beq.n	800d0b0 <cleanup_stdio+0x30>
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ac:	f001 bd46 	b.w	800eb3c <_fflush_r>
 800d0b0:	bd10      	pop	{r4, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200020e4 	.word	0x200020e4
 800d0b8:	2000214c 	.word	0x2000214c
 800d0bc:	200021b4 	.word	0x200021b4

0800d0c0 <global_stdio_init.part.0>:
 800d0c0:	b510      	push	{r4, lr}
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f0 <global_stdio_init.part.0+0x30>)
 800d0c4:	4c0b      	ldr	r4, [pc, #44]	@ (800d0f4 <global_stdio_init.part.0+0x34>)
 800d0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f8 <global_stdio_init.part.0+0x38>)
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	f7ff ff94 	bl	800cffc <std>
 800d0d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0d8:	2201      	movs	r2, #1
 800d0da:	2109      	movs	r1, #9
 800d0dc:	f7ff ff8e 	bl	800cffc <std>
 800d0e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ea:	2112      	movs	r1, #18
 800d0ec:	f7ff bf86 	b.w	800cffc <std>
 800d0f0:	2000221c 	.word	0x2000221c
 800d0f4:	200020e4 	.word	0x200020e4
 800d0f8:	0800d069 	.word	0x0800d069

0800d0fc <__sfp_lock_acquire>:
 800d0fc:	4801      	ldr	r0, [pc, #4]	@ (800d104 <__sfp_lock_acquire+0x8>)
 800d0fe:	f000 b922 	b.w	800d346 <__retarget_lock_acquire_recursive>
 800d102:	bf00      	nop
 800d104:	20002225 	.word	0x20002225

0800d108 <__sfp_lock_release>:
 800d108:	4801      	ldr	r0, [pc, #4]	@ (800d110 <__sfp_lock_release+0x8>)
 800d10a:	f000 b91d 	b.w	800d348 <__retarget_lock_release_recursive>
 800d10e:	bf00      	nop
 800d110:	20002225 	.word	0x20002225

0800d114 <__sinit>:
 800d114:	b510      	push	{r4, lr}
 800d116:	4604      	mov	r4, r0
 800d118:	f7ff fff0 	bl	800d0fc <__sfp_lock_acquire>
 800d11c:	6a23      	ldr	r3, [r4, #32]
 800d11e:	b11b      	cbz	r3, 800d128 <__sinit+0x14>
 800d120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d124:	f7ff bff0 	b.w	800d108 <__sfp_lock_release>
 800d128:	4b04      	ldr	r3, [pc, #16]	@ (800d13c <__sinit+0x28>)
 800d12a:	6223      	str	r3, [r4, #32]
 800d12c:	4b04      	ldr	r3, [pc, #16]	@ (800d140 <__sinit+0x2c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1f5      	bne.n	800d120 <__sinit+0xc>
 800d134:	f7ff ffc4 	bl	800d0c0 <global_stdio_init.part.0>
 800d138:	e7f2      	b.n	800d120 <__sinit+0xc>
 800d13a:	bf00      	nop
 800d13c:	0800d081 	.word	0x0800d081
 800d140:	2000221c 	.word	0x2000221c

0800d144 <fiprintf>:
 800d144:	b40e      	push	{r1, r2, r3}
 800d146:	b503      	push	{r0, r1, lr}
 800d148:	4601      	mov	r1, r0
 800d14a:	ab03      	add	r3, sp, #12
 800d14c:	4805      	ldr	r0, [pc, #20]	@ (800d164 <fiprintf+0x20>)
 800d14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d152:	6800      	ldr	r0, [r0, #0]
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	f001 fb55 	bl	800e804 <_vfiprintf_r>
 800d15a:	b002      	add	sp, #8
 800d15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d160:	b003      	add	sp, #12
 800d162:	4770      	bx	lr
 800d164:	20000108 	.word	0x20000108

0800d168 <_fwalk_sglue>:
 800d168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	4607      	mov	r7, r0
 800d16e:	4688      	mov	r8, r1
 800d170:	4614      	mov	r4, r2
 800d172:	2600      	movs	r6, #0
 800d174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d178:	f1b9 0901 	subs.w	r9, r9, #1
 800d17c:	d505      	bpl.n	800d18a <_fwalk_sglue+0x22>
 800d17e:	6824      	ldr	r4, [r4, #0]
 800d180:	2c00      	cmp	r4, #0
 800d182:	d1f7      	bne.n	800d174 <_fwalk_sglue+0xc>
 800d184:	4630      	mov	r0, r6
 800d186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d907      	bls.n	800d1a0 <_fwalk_sglue+0x38>
 800d190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d194:	3301      	adds	r3, #1
 800d196:	d003      	beq.n	800d1a0 <_fwalk_sglue+0x38>
 800d198:	4629      	mov	r1, r5
 800d19a:	4638      	mov	r0, r7
 800d19c:	47c0      	blx	r8
 800d19e:	4306      	orrs	r6, r0
 800d1a0:	3568      	adds	r5, #104	@ 0x68
 800d1a2:	e7e9      	b.n	800d178 <_fwalk_sglue+0x10>

0800d1a4 <__sread>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ac:	f000 f86c 	bl	800d288 <_read_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	bfab      	itete	ge
 800d1b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1b8:	181b      	addge	r3, r3, r0
 800d1ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1be:	bfac      	ite	ge
 800d1c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1c2:	81a3      	strhlt	r3, [r4, #12]
 800d1c4:	bd10      	pop	{r4, pc}

0800d1c6 <__swrite>:
 800d1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ca:	461f      	mov	r7, r3
 800d1cc:	898b      	ldrh	r3, [r1, #12]
 800d1ce:	05db      	lsls	r3, r3, #23
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	4616      	mov	r6, r2
 800d1d6:	d505      	bpl.n	800d1e4 <__swrite+0x1e>
 800d1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1dc:	2302      	movs	r3, #2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f000 f840 	bl	800d264 <_lseek_r>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fa:	f000 b867 	b.w	800d2cc <_write_r>

0800d1fe <__sseek>:
 800d1fe:	b510      	push	{r4, lr}
 800d200:	460c      	mov	r4, r1
 800d202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d206:	f000 f82d 	bl	800d264 <_lseek_r>
 800d20a:	1c43      	adds	r3, r0, #1
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	bf15      	itete	ne
 800d210:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d21a:	81a3      	strheq	r3, [r4, #12]
 800d21c:	bf18      	it	ne
 800d21e:	81a3      	strhne	r3, [r4, #12]
 800d220:	bd10      	pop	{r4, pc}

0800d222 <__sclose>:
 800d222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d226:	f000 b80d 	b.w	800d244 <_close_r>

0800d22a <memset>:
 800d22a:	4402      	add	r2, r0
 800d22c:	4603      	mov	r3, r0
 800d22e:	4293      	cmp	r3, r2
 800d230:	d100      	bne.n	800d234 <memset+0xa>
 800d232:	4770      	bx	lr
 800d234:	f803 1b01 	strb.w	r1, [r3], #1
 800d238:	e7f9      	b.n	800d22e <memset+0x4>
	...

0800d23c <_localeconv_r>:
 800d23c:	4800      	ldr	r0, [pc, #0]	@ (800d240 <_localeconv_r+0x4>)
 800d23e:	4770      	bx	lr
 800d240:	20000248 	.word	0x20000248

0800d244 <_close_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	@ (800d260 <_close_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f7 fb2e 	bl	80048b0 <_close>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_close_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_close_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20002220 	.word	0x20002220

0800d264 <_lseek_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	@ (800d284 <_lseek_r+0x20>)
 800d268:	4604      	mov	r4, r0
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	602a      	str	r2, [r5, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f7f7 fb43 	bl	80048fe <_lseek>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_lseek_r+0x1e>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_lseek_r+0x1e>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20002220 	.word	0x20002220

0800d288 <_read_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	@ (800d2a8 <_read_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f7 faed 	bl	8004876 <_read>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_read_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_read_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20002220 	.word	0x20002220

0800d2ac <_sbrk_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d06      	ldr	r5, [pc, #24]	@ (800d2c8 <_sbrk_r+0x1c>)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	602b      	str	r3, [r5, #0]
 800d2b8:	f7f7 fb2e 	bl	8004918 <_sbrk>
 800d2bc:	1c43      	adds	r3, r0, #1
 800d2be:	d102      	bne.n	800d2c6 <_sbrk_r+0x1a>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	b103      	cbz	r3, 800d2c6 <_sbrk_r+0x1a>
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	20002220 	.word	0x20002220

0800d2cc <_write_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d07      	ldr	r5, [pc, #28]	@ (800d2ec <_write_r+0x20>)
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f6 f9be 	bl	800365c <_write>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_write_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_write_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	20002220 	.word	0x20002220

0800d2f0 <__errno>:
 800d2f0:	4b01      	ldr	r3, [pc, #4]	@ (800d2f8 <__errno+0x8>)
 800d2f2:	6818      	ldr	r0, [r3, #0]
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20000108 	.word	0x20000108

0800d2fc <__libc_init_array>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	4d0d      	ldr	r5, [pc, #52]	@ (800d334 <__libc_init_array+0x38>)
 800d300:	4c0d      	ldr	r4, [pc, #52]	@ (800d338 <__libc_init_array+0x3c>)
 800d302:	1b64      	subs	r4, r4, r5
 800d304:	10a4      	asrs	r4, r4, #2
 800d306:	2600      	movs	r6, #0
 800d308:	42a6      	cmp	r6, r4
 800d30a:	d109      	bne.n	800d320 <__libc_init_array+0x24>
 800d30c:	4d0b      	ldr	r5, [pc, #44]	@ (800d33c <__libc_init_array+0x40>)
 800d30e:	4c0c      	ldr	r4, [pc, #48]	@ (800d340 <__libc_init_array+0x44>)
 800d310:	f001 fdcc 	bl	800eeac <_init>
 800d314:	1b64      	subs	r4, r4, r5
 800d316:	10a4      	asrs	r4, r4, #2
 800d318:	2600      	movs	r6, #0
 800d31a:	42a6      	cmp	r6, r4
 800d31c:	d105      	bne.n	800d32a <__libc_init_array+0x2e>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	f855 3b04 	ldr.w	r3, [r5], #4
 800d324:	4798      	blx	r3
 800d326:	3601      	adds	r6, #1
 800d328:	e7ee      	b.n	800d308 <__libc_init_array+0xc>
 800d32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d32e:	4798      	blx	r3
 800d330:	3601      	adds	r6, #1
 800d332:	e7f2      	b.n	800d31a <__libc_init_array+0x1e>
 800d334:	0800f304 	.word	0x0800f304
 800d338:	0800f304 	.word	0x0800f304
 800d33c:	0800f304 	.word	0x0800f304
 800d340:	0800f308 	.word	0x0800f308

0800d344 <__retarget_lock_init_recursive>:
 800d344:	4770      	bx	lr

0800d346 <__retarget_lock_acquire_recursive>:
 800d346:	4770      	bx	lr

0800d348 <__retarget_lock_release_recursive>:
 800d348:	4770      	bx	lr

0800d34a <memcpy>:
 800d34a:	440a      	add	r2, r1
 800d34c:	4291      	cmp	r1, r2
 800d34e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d352:	d100      	bne.n	800d356 <memcpy+0xc>
 800d354:	4770      	bx	lr
 800d356:	b510      	push	{r4, lr}
 800d358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d35c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d360:	4291      	cmp	r1, r2
 800d362:	d1f9      	bne.n	800d358 <memcpy+0xe>
 800d364:	bd10      	pop	{r4, pc}

0800d366 <abort>:
 800d366:	b508      	push	{r3, lr}
 800d368:	2006      	movs	r0, #6
 800d36a:	f001 fccb 	bl	800ed04 <raise>
 800d36e:	2001      	movs	r0, #1
 800d370:	f7f7 fa76 	bl	8004860 <_exit>

0800d374 <quorem>:
 800d374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	6903      	ldr	r3, [r0, #16]
 800d37a:	690c      	ldr	r4, [r1, #16]
 800d37c:	42a3      	cmp	r3, r4
 800d37e:	4607      	mov	r7, r0
 800d380:	db7e      	blt.n	800d480 <quorem+0x10c>
 800d382:	3c01      	subs	r4, #1
 800d384:	f101 0814 	add.w	r8, r1, #20
 800d388:	00a3      	lsls	r3, r4, #2
 800d38a:	f100 0514 	add.w	r5, r0, #20
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3aa:	d32e      	bcc.n	800d40a <quorem+0x96>
 800d3ac:	f04f 0a00 	mov.w	sl, #0
 800d3b0:	46c4      	mov	ip, r8
 800d3b2:	46ae      	mov	lr, r5
 800d3b4:	46d3      	mov	fp, sl
 800d3b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3ba:	b298      	uxth	r0, r3
 800d3bc:	fb06 a000 	mla	r0, r6, r0, sl
 800d3c0:	0c02      	lsrs	r2, r0, #16
 800d3c2:	0c1b      	lsrs	r3, r3, #16
 800d3c4:	fb06 2303 	mla	r3, r6, r3, r2
 800d3c8:	f8de 2000 	ldr.w	r2, [lr]
 800d3cc:	b280      	uxth	r0, r0
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	1a12      	subs	r2, r2, r0
 800d3d2:	445a      	add	r2, fp
 800d3d4:	f8de 0000 	ldr.w	r0, [lr]
 800d3d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3e6:	b292      	uxth	r2, r2
 800d3e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3ec:	45e1      	cmp	r9, ip
 800d3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800d3f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3f6:	d2de      	bcs.n	800d3b6 <quorem+0x42>
 800d3f8:	9b00      	ldr	r3, [sp, #0]
 800d3fa:	58eb      	ldr	r3, [r5, r3]
 800d3fc:	b92b      	cbnz	r3, 800d40a <quorem+0x96>
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	3b04      	subs	r3, #4
 800d402:	429d      	cmp	r5, r3
 800d404:	461a      	mov	r2, r3
 800d406:	d32f      	bcc.n	800d468 <quorem+0xf4>
 800d408:	613c      	str	r4, [r7, #16]
 800d40a:	4638      	mov	r0, r7
 800d40c:	f001 f8c8 	bl	800e5a0 <__mcmp>
 800d410:	2800      	cmp	r0, #0
 800d412:	db25      	blt.n	800d460 <quorem+0xec>
 800d414:	4629      	mov	r1, r5
 800d416:	2000      	movs	r0, #0
 800d418:	f858 2b04 	ldr.w	r2, [r8], #4
 800d41c:	f8d1 c000 	ldr.w	ip, [r1]
 800d420:	fa1f fe82 	uxth.w	lr, r2
 800d424:	fa1f f38c 	uxth.w	r3, ip
 800d428:	eba3 030e 	sub.w	r3, r3, lr
 800d42c:	4403      	add	r3, r0
 800d42e:	0c12      	lsrs	r2, r2, #16
 800d430:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d434:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d438:	b29b      	uxth	r3, r3
 800d43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d43e:	45c1      	cmp	r9, r8
 800d440:	f841 3b04 	str.w	r3, [r1], #4
 800d444:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d448:	d2e6      	bcs.n	800d418 <quorem+0xa4>
 800d44a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d44e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d452:	b922      	cbnz	r2, 800d45e <quorem+0xea>
 800d454:	3b04      	subs	r3, #4
 800d456:	429d      	cmp	r5, r3
 800d458:	461a      	mov	r2, r3
 800d45a:	d30b      	bcc.n	800d474 <quorem+0x100>
 800d45c:	613c      	str	r4, [r7, #16]
 800d45e:	3601      	adds	r6, #1
 800d460:	4630      	mov	r0, r6
 800d462:	b003      	add	sp, #12
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	6812      	ldr	r2, [r2, #0]
 800d46a:	3b04      	subs	r3, #4
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	d1cb      	bne.n	800d408 <quorem+0x94>
 800d470:	3c01      	subs	r4, #1
 800d472:	e7c6      	b.n	800d402 <quorem+0x8e>
 800d474:	6812      	ldr	r2, [r2, #0]
 800d476:	3b04      	subs	r3, #4
 800d478:	2a00      	cmp	r2, #0
 800d47a:	d1ef      	bne.n	800d45c <quorem+0xe8>
 800d47c:	3c01      	subs	r4, #1
 800d47e:	e7ea      	b.n	800d456 <quorem+0xe2>
 800d480:	2000      	movs	r0, #0
 800d482:	e7ee      	b.n	800d462 <quorem+0xee>
 800d484:	0000      	movs	r0, r0
	...

0800d488 <_dtoa_r>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	69c7      	ldr	r7, [r0, #28]
 800d48e:	b097      	sub	sp, #92	@ 0x5c
 800d490:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d494:	ec55 4b10 	vmov	r4, r5, d0
 800d498:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d49a:	9107      	str	r1, [sp, #28]
 800d49c:	4681      	mov	r9, r0
 800d49e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d4a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4a2:	b97f      	cbnz	r7, 800d4c4 <_dtoa_r+0x3c>
 800d4a4:	2010      	movs	r0, #16
 800d4a6:	f7ff f895 	bl	800c5d4 <malloc>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800d4b0:	b920      	cbnz	r0, 800d4bc <_dtoa_r+0x34>
 800d4b2:	4ba9      	ldr	r3, [pc, #676]	@ (800d758 <_dtoa_r+0x2d0>)
 800d4b4:	21ef      	movs	r1, #239	@ 0xef
 800d4b6:	48a9      	ldr	r0, [pc, #676]	@ (800d75c <_dtoa_r+0x2d4>)
 800d4b8:	f7ff f86e 	bl	800c598 <__assert_func>
 800d4bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4c0:	6007      	str	r7, [r0, #0]
 800d4c2:	60c7      	str	r7, [r0, #12]
 800d4c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	b159      	cbz	r1, 800d4e4 <_dtoa_r+0x5c>
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	604a      	str	r2, [r1, #4]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4093      	lsls	r3, r2
 800d4d4:	608b      	str	r3, [r1, #8]
 800d4d6:	4648      	mov	r0, r9
 800d4d8:	f000 fe30 	bl	800e13c <_Bfree>
 800d4dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	1e2b      	subs	r3, r5, #0
 800d4e6:	bfb9      	ittee	lt
 800d4e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4ec:	9305      	strlt	r3, [sp, #20]
 800d4ee:	2300      	movge	r3, #0
 800d4f0:	6033      	strge	r3, [r6, #0]
 800d4f2:	9f05      	ldr	r7, [sp, #20]
 800d4f4:	4b9a      	ldr	r3, [pc, #616]	@ (800d760 <_dtoa_r+0x2d8>)
 800d4f6:	bfbc      	itt	lt
 800d4f8:	2201      	movlt	r2, #1
 800d4fa:	6032      	strlt	r2, [r6, #0]
 800d4fc:	43bb      	bics	r3, r7
 800d4fe:	d112      	bne.n	800d526 <_dtoa_r+0x9e>
 800d500:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d502:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d50c:	4323      	orrs	r3, r4
 800d50e:	f000 855a 	beq.w	800dfc6 <_dtoa_r+0xb3e>
 800d512:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d514:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d774 <_dtoa_r+0x2ec>
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 855c 	beq.w	800dfd6 <_dtoa_r+0xb4e>
 800d51e:	f10a 0303 	add.w	r3, sl, #3
 800d522:	f000 bd56 	b.w	800dfd2 <_dtoa_r+0xb4a>
 800d526:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d52a:	2200      	movs	r2, #0
 800d52c:	ec51 0b17 	vmov	r0, r1, d7
 800d530:	2300      	movs	r3, #0
 800d532:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d536:	f7f3 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d53a:	4680      	mov	r8, r0
 800d53c:	b158      	cbz	r0, 800d556 <_dtoa_r+0xce>
 800d53e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d540:	2301      	movs	r3, #1
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d546:	b113      	cbz	r3, 800d54e <_dtoa_r+0xc6>
 800d548:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d54a:	4b86      	ldr	r3, [pc, #536]	@ (800d764 <_dtoa_r+0x2dc>)
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d778 <_dtoa_r+0x2f0>
 800d552:	f000 bd40 	b.w	800dfd6 <_dtoa_r+0xb4e>
 800d556:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d55a:	aa14      	add	r2, sp, #80	@ 0x50
 800d55c:	a915      	add	r1, sp, #84	@ 0x54
 800d55e:	4648      	mov	r0, r9
 800d560:	f001 f8ce 	bl	800e700 <__d2b>
 800d564:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d568:	9002      	str	r0, [sp, #8]
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	d078      	beq.n	800d660 <_dtoa_r+0x1d8>
 800d56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d570:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d57c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d580:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d584:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d588:	4619      	mov	r1, r3
 800d58a:	2200      	movs	r2, #0
 800d58c:	4b76      	ldr	r3, [pc, #472]	@ (800d768 <_dtoa_r+0x2e0>)
 800d58e:	f7f2 fe7b 	bl	8000288 <__aeabi_dsub>
 800d592:	a36b      	add	r3, pc, #428	@ (adr r3, 800d740 <_dtoa_r+0x2b8>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f3 f82e 	bl	80005f8 <__aeabi_dmul>
 800d59c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d748 <_dtoa_r+0x2c0>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f2 fe73 	bl	800028c <__adddf3>
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	f7f2 ffba 	bl	8000524 <__aeabi_i2d>
 800d5b0:	a367      	add	r3, pc, #412	@ (adr r3, 800d750 <_dtoa_r+0x2c8>)
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	f7f3 f81f 	bl	80005f8 <__aeabi_dmul>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4620      	mov	r0, r4
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f7f2 fe63 	bl	800028c <__adddf3>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	460d      	mov	r5, r1
 800d5ca:	f7f3 fac5 	bl	8000b58 <__aeabi_d2iz>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7f3 fa80 	bl	8000adc <__aeabi_dcmplt>
 800d5dc:	b140      	cbz	r0, 800d5f0 <_dtoa_r+0x168>
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f7f2 ffa0 	bl	8000524 <__aeabi_i2d>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	f7f3 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ec:	b900      	cbnz	r0, 800d5f0 <_dtoa_r+0x168>
 800d5ee:	3f01      	subs	r7, #1
 800d5f0:	2f16      	cmp	r7, #22
 800d5f2:	d852      	bhi.n	800d69a <_dtoa_r+0x212>
 800d5f4:	4b5d      	ldr	r3, [pc, #372]	@ (800d76c <_dtoa_r+0x2e4>)
 800d5f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d602:	f7f3 fa6b 	bl	8000adc <__aeabi_dcmplt>
 800d606:	2800      	cmp	r0, #0
 800d608:	d049      	beq.n	800d69e <_dtoa_r+0x216>
 800d60a:	3f01      	subs	r7, #1
 800d60c:	2300      	movs	r3, #0
 800d60e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d610:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d612:	1b9b      	subs	r3, r3, r6
 800d614:	1e5a      	subs	r2, r3, #1
 800d616:	bf45      	ittet	mi
 800d618:	f1c3 0301 	rsbmi	r3, r3, #1
 800d61c:	9300      	strmi	r3, [sp, #0]
 800d61e:	2300      	movpl	r3, #0
 800d620:	2300      	movmi	r3, #0
 800d622:	9206      	str	r2, [sp, #24]
 800d624:	bf54      	ite	pl
 800d626:	9300      	strpl	r3, [sp, #0]
 800d628:	9306      	strmi	r3, [sp, #24]
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	db39      	blt.n	800d6a2 <_dtoa_r+0x21a>
 800d62e:	9b06      	ldr	r3, [sp, #24]
 800d630:	970d      	str	r7, [sp, #52]	@ 0x34
 800d632:	443b      	add	r3, r7
 800d634:	9306      	str	r3, [sp, #24]
 800d636:	2300      	movs	r3, #0
 800d638:	9308      	str	r3, [sp, #32]
 800d63a:	9b07      	ldr	r3, [sp, #28]
 800d63c:	2b09      	cmp	r3, #9
 800d63e:	d863      	bhi.n	800d708 <_dtoa_r+0x280>
 800d640:	2b05      	cmp	r3, #5
 800d642:	bfc4      	itt	gt
 800d644:	3b04      	subgt	r3, #4
 800d646:	9307      	strgt	r3, [sp, #28]
 800d648:	9b07      	ldr	r3, [sp, #28]
 800d64a:	f1a3 0302 	sub.w	r3, r3, #2
 800d64e:	bfcc      	ite	gt
 800d650:	2400      	movgt	r4, #0
 800d652:	2401      	movle	r4, #1
 800d654:	2b03      	cmp	r3, #3
 800d656:	d863      	bhi.n	800d720 <_dtoa_r+0x298>
 800d658:	e8df f003 	tbb	[pc, r3]
 800d65c:	2b375452 	.word	0x2b375452
 800d660:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d664:	441e      	add	r6, r3
 800d666:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d66a:	2b20      	cmp	r3, #32
 800d66c:	bfc1      	itttt	gt
 800d66e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d672:	409f      	lslgt	r7, r3
 800d674:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d678:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d67c:	bfd6      	itet	le
 800d67e:	f1c3 0320 	rsble	r3, r3, #32
 800d682:	ea47 0003 	orrgt.w	r0, r7, r3
 800d686:	fa04 f003 	lslle.w	r0, r4, r3
 800d68a:	f7f2 ff3b 	bl	8000504 <__aeabi_ui2d>
 800d68e:	2201      	movs	r2, #1
 800d690:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d694:	3e01      	subs	r6, #1
 800d696:	9212      	str	r2, [sp, #72]	@ 0x48
 800d698:	e776      	b.n	800d588 <_dtoa_r+0x100>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e7b7      	b.n	800d60e <_dtoa_r+0x186>
 800d69e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d6a0:	e7b6      	b.n	800d610 <_dtoa_r+0x188>
 800d6a2:	9b00      	ldr	r3, [sp, #0]
 800d6a4:	1bdb      	subs	r3, r3, r7
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	427b      	negs	r3, r7
 800d6aa:	9308      	str	r3, [sp, #32]
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800d6b0:	e7c3      	b.n	800d63a <_dtoa_r+0x1b2>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6b8:	eb07 0b03 	add.w	fp, r7, r3
 800d6bc:	f10b 0301 	add.w	r3, fp, #1
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	9303      	str	r3, [sp, #12]
 800d6c4:	bfb8      	it	lt
 800d6c6:	2301      	movlt	r3, #1
 800d6c8:	e006      	b.n	800d6d8 <_dtoa_r+0x250>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dd28      	ble.n	800d726 <_dtoa_r+0x29e>
 800d6d4:	469b      	mov	fp, r3
 800d6d6:	9303      	str	r3, [sp, #12]
 800d6d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	2204      	movs	r2, #4
 800d6e0:	f102 0514 	add.w	r5, r2, #20
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	d926      	bls.n	800d736 <_dtoa_r+0x2ae>
 800d6e8:	6041      	str	r1, [r0, #4]
 800d6ea:	4648      	mov	r0, r9
 800d6ec:	f000 fce6 	bl	800e0bc <_Balloc>
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d142      	bne.n	800d77c <_dtoa_r+0x2f4>
 800d6f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d770 <_dtoa_r+0x2e8>)
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6fe:	e6da      	b.n	800d4b6 <_dtoa_r+0x2e>
 800d700:	2300      	movs	r3, #0
 800d702:	e7e3      	b.n	800d6cc <_dtoa_r+0x244>
 800d704:	2300      	movs	r3, #0
 800d706:	e7d5      	b.n	800d6b4 <_dtoa_r+0x22c>
 800d708:	2401      	movs	r4, #1
 800d70a:	2300      	movs	r3, #0
 800d70c:	9307      	str	r3, [sp, #28]
 800d70e:	9409      	str	r4, [sp, #36]	@ 0x24
 800d710:	f04f 3bff 	mov.w	fp, #4294967295
 800d714:	2200      	movs	r2, #0
 800d716:	f8cd b00c 	str.w	fp, [sp, #12]
 800d71a:	2312      	movs	r3, #18
 800d71c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d71e:	e7db      	b.n	800d6d8 <_dtoa_r+0x250>
 800d720:	2301      	movs	r3, #1
 800d722:	9309      	str	r3, [sp, #36]	@ 0x24
 800d724:	e7f4      	b.n	800d710 <_dtoa_r+0x288>
 800d726:	f04f 0b01 	mov.w	fp, #1
 800d72a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d72e:	465b      	mov	r3, fp
 800d730:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d734:	e7d0      	b.n	800d6d8 <_dtoa_r+0x250>
 800d736:	3101      	adds	r1, #1
 800d738:	0052      	lsls	r2, r2, #1
 800d73a:	e7d1      	b.n	800d6e0 <_dtoa_r+0x258>
 800d73c:	f3af 8000 	nop.w
 800d740:	636f4361 	.word	0x636f4361
 800d744:	3fd287a7 	.word	0x3fd287a7
 800d748:	8b60c8b3 	.word	0x8b60c8b3
 800d74c:	3fc68a28 	.word	0x3fc68a28
 800d750:	509f79fb 	.word	0x509f79fb
 800d754:	3fd34413 	.word	0x3fd34413
 800d758:	0800f001 	.word	0x0800f001
 800d75c:	0800f018 	.word	0x0800f018
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	0800efd1 	.word	0x0800efd1
 800d768:	3ff80000 	.word	0x3ff80000
 800d76c:	0800f130 	.word	0x0800f130
 800d770:	0800f070 	.word	0x0800f070
 800d774:	0800effd 	.word	0x0800effd
 800d778:	0800efd0 	.word	0x0800efd0
 800d77c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d780:	6018      	str	r0, [r3, #0]
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	2b0e      	cmp	r3, #14
 800d786:	f200 80a1 	bhi.w	800d8cc <_dtoa_r+0x444>
 800d78a:	2c00      	cmp	r4, #0
 800d78c:	f000 809e 	beq.w	800d8cc <_dtoa_r+0x444>
 800d790:	2f00      	cmp	r7, #0
 800d792:	dd33      	ble.n	800d7fc <_dtoa_r+0x374>
 800d794:	4b9c      	ldr	r3, [pc, #624]	@ (800da08 <_dtoa_r+0x580>)
 800d796:	f007 020f 	and.w	r2, r7, #15
 800d79a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d79e:	ed93 7b00 	vldr	d7, [r3]
 800d7a2:	05f8      	lsls	r0, r7, #23
 800d7a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d7a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7ac:	d516      	bpl.n	800d7dc <_dtoa_r+0x354>
 800d7ae:	4b97      	ldr	r3, [pc, #604]	@ (800da0c <_dtoa_r+0x584>)
 800d7b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7b8:	f7f3 f848 	bl	800084c <__aeabi_ddiv>
 800d7bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7c0:	f004 040f 	and.w	r4, r4, #15
 800d7c4:	2603      	movs	r6, #3
 800d7c6:	4d91      	ldr	r5, [pc, #580]	@ (800da0c <_dtoa_r+0x584>)
 800d7c8:	b954      	cbnz	r4, 800d7e0 <_dtoa_r+0x358>
 800d7ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d7ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d2:	f7f3 f83b 	bl	800084c <__aeabi_ddiv>
 800d7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7da:	e028      	b.n	800d82e <_dtoa_r+0x3a6>
 800d7dc:	2602      	movs	r6, #2
 800d7de:	e7f2      	b.n	800d7c6 <_dtoa_r+0x33e>
 800d7e0:	07e1      	lsls	r1, r4, #31
 800d7e2:	d508      	bpl.n	800d7f6 <_dtoa_r+0x36e>
 800d7e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d7e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7ec:	f7f2 ff04 	bl	80005f8 <__aeabi_dmul>
 800d7f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d7f4:	3601      	adds	r6, #1
 800d7f6:	1064      	asrs	r4, r4, #1
 800d7f8:	3508      	adds	r5, #8
 800d7fa:	e7e5      	b.n	800d7c8 <_dtoa_r+0x340>
 800d7fc:	f000 80af 	beq.w	800d95e <_dtoa_r+0x4d6>
 800d800:	427c      	negs	r4, r7
 800d802:	4b81      	ldr	r3, [pc, #516]	@ (800da08 <_dtoa_r+0x580>)
 800d804:	4d81      	ldr	r5, [pc, #516]	@ (800da0c <_dtoa_r+0x584>)
 800d806:	f004 020f 	and.w	r2, r4, #15
 800d80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d816:	f7f2 feef 	bl	80005f8 <__aeabi_dmul>
 800d81a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d81e:	1124      	asrs	r4, r4, #4
 800d820:	2300      	movs	r3, #0
 800d822:	2602      	movs	r6, #2
 800d824:	2c00      	cmp	r4, #0
 800d826:	f040 808f 	bne.w	800d948 <_dtoa_r+0x4c0>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1d3      	bne.n	800d7d6 <_dtoa_r+0x34e>
 800d82e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d830:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 8094 	beq.w	800d962 <_dtoa_r+0x4da>
 800d83a:	4b75      	ldr	r3, [pc, #468]	@ (800da10 <_dtoa_r+0x588>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	4620      	mov	r0, r4
 800d840:	4629      	mov	r1, r5
 800d842:	f7f3 f94b 	bl	8000adc <__aeabi_dcmplt>
 800d846:	2800      	cmp	r0, #0
 800d848:	f000 808b 	beq.w	800d962 <_dtoa_r+0x4da>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 8087 	beq.w	800d962 <_dtoa_r+0x4da>
 800d854:	f1bb 0f00 	cmp.w	fp, #0
 800d858:	dd34      	ble.n	800d8c4 <_dtoa_r+0x43c>
 800d85a:	4620      	mov	r0, r4
 800d85c:	4b6d      	ldr	r3, [pc, #436]	@ (800da14 <_dtoa_r+0x58c>)
 800d85e:	2200      	movs	r2, #0
 800d860:	4629      	mov	r1, r5
 800d862:	f7f2 fec9 	bl	80005f8 <__aeabi_dmul>
 800d866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d86a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d86e:	3601      	adds	r6, #1
 800d870:	465c      	mov	r4, fp
 800d872:	4630      	mov	r0, r6
 800d874:	f7f2 fe56 	bl	8000524 <__aeabi_i2d>
 800d878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	4b65      	ldr	r3, [pc, #404]	@ (800da18 <_dtoa_r+0x590>)
 800d882:	2200      	movs	r2, #0
 800d884:	f7f2 fd02 	bl	800028c <__adddf3>
 800d888:	4605      	mov	r5, r0
 800d88a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d88e:	2c00      	cmp	r4, #0
 800d890:	d16a      	bne.n	800d968 <_dtoa_r+0x4e0>
 800d892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d896:	4b61      	ldr	r3, [pc, #388]	@ (800da1c <_dtoa_r+0x594>)
 800d898:	2200      	movs	r2, #0
 800d89a:	f7f2 fcf5 	bl	8000288 <__aeabi_dsub>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8a6:	462a      	mov	r2, r5
 800d8a8:	4633      	mov	r3, r6
 800d8aa:	f7f3 f935 	bl	8000b18 <__aeabi_dcmpgt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8298 	bne.w	800dde4 <_dtoa_r+0x95c>
 800d8b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8be:	f7f3 f90d 	bl	8000adc <__aeabi_dcmplt>
 800d8c2:	bb38      	cbnz	r0, 800d914 <_dtoa_r+0x48c>
 800d8c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d8c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d8cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f2c0 8157 	blt.w	800db82 <_dtoa_r+0x6fa>
 800d8d4:	2f0e      	cmp	r7, #14
 800d8d6:	f300 8154 	bgt.w	800db82 <_dtoa_r+0x6fa>
 800d8da:	4b4b      	ldr	r3, [pc, #300]	@ (800da08 <_dtoa_r+0x580>)
 800d8dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8e0:	ed93 7b00 	vldr	d7, [r3]
 800d8e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	ed8d 7b00 	vstr	d7, [sp]
 800d8ec:	f280 80e5 	bge.w	800daba <_dtoa_r+0x632>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f300 80e1 	bgt.w	800daba <_dtoa_r+0x632>
 800d8f8:	d10c      	bne.n	800d914 <_dtoa_r+0x48c>
 800d8fa:	4b48      	ldr	r3, [pc, #288]	@ (800da1c <_dtoa_r+0x594>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	ec51 0b17 	vmov	r0, r1, d7
 800d902:	f7f2 fe79 	bl	80005f8 <__aeabi_dmul>
 800d906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d90a:	f7f3 f8fb 	bl	8000b04 <__aeabi_dcmpge>
 800d90e:	2800      	cmp	r0, #0
 800d910:	f000 8266 	beq.w	800dde0 <_dtoa_r+0x958>
 800d914:	2400      	movs	r4, #0
 800d916:	4625      	mov	r5, r4
 800d918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d91a:	4656      	mov	r6, sl
 800d91c:	ea6f 0803 	mvn.w	r8, r3
 800d920:	2700      	movs	r7, #0
 800d922:	4621      	mov	r1, r4
 800d924:	4648      	mov	r0, r9
 800d926:	f000 fc09 	bl	800e13c <_Bfree>
 800d92a:	2d00      	cmp	r5, #0
 800d92c:	f000 80bd 	beq.w	800daaa <_dtoa_r+0x622>
 800d930:	b12f      	cbz	r7, 800d93e <_dtoa_r+0x4b6>
 800d932:	42af      	cmp	r7, r5
 800d934:	d003      	beq.n	800d93e <_dtoa_r+0x4b6>
 800d936:	4639      	mov	r1, r7
 800d938:	4648      	mov	r0, r9
 800d93a:	f000 fbff 	bl	800e13c <_Bfree>
 800d93e:	4629      	mov	r1, r5
 800d940:	4648      	mov	r0, r9
 800d942:	f000 fbfb 	bl	800e13c <_Bfree>
 800d946:	e0b0      	b.n	800daaa <_dtoa_r+0x622>
 800d948:	07e2      	lsls	r2, r4, #31
 800d94a:	d505      	bpl.n	800d958 <_dtoa_r+0x4d0>
 800d94c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d950:	f7f2 fe52 	bl	80005f8 <__aeabi_dmul>
 800d954:	3601      	adds	r6, #1
 800d956:	2301      	movs	r3, #1
 800d958:	1064      	asrs	r4, r4, #1
 800d95a:	3508      	adds	r5, #8
 800d95c:	e762      	b.n	800d824 <_dtoa_r+0x39c>
 800d95e:	2602      	movs	r6, #2
 800d960:	e765      	b.n	800d82e <_dtoa_r+0x3a6>
 800d962:	9c03      	ldr	r4, [sp, #12]
 800d964:	46b8      	mov	r8, r7
 800d966:	e784      	b.n	800d872 <_dtoa_r+0x3ea>
 800d968:	4b27      	ldr	r3, [pc, #156]	@ (800da08 <_dtoa_r+0x580>)
 800d96a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d96c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d974:	4454      	add	r4, sl
 800d976:	2900      	cmp	r1, #0
 800d978:	d054      	beq.n	800da24 <_dtoa_r+0x59c>
 800d97a:	4929      	ldr	r1, [pc, #164]	@ (800da20 <_dtoa_r+0x598>)
 800d97c:	2000      	movs	r0, #0
 800d97e:	f7f2 ff65 	bl	800084c <__aeabi_ddiv>
 800d982:	4633      	mov	r3, r6
 800d984:	462a      	mov	r2, r5
 800d986:	f7f2 fc7f 	bl	8000288 <__aeabi_dsub>
 800d98a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d98e:	4656      	mov	r6, sl
 800d990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d994:	f7f3 f8e0 	bl	8000b58 <__aeabi_d2iz>
 800d998:	4605      	mov	r5, r0
 800d99a:	f7f2 fdc3 	bl	8000524 <__aeabi_i2d>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9a6:	f7f2 fc6f 	bl	8000288 <__aeabi_dsub>
 800d9aa:	3530      	adds	r5, #48	@ 0x30
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9b4:	f806 5b01 	strb.w	r5, [r6], #1
 800d9b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d9bc:	f7f3 f88e 	bl	8000adc <__aeabi_dcmplt>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	d172      	bne.n	800daaa <_dtoa_r+0x622>
 800d9c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9c8:	4911      	ldr	r1, [pc, #68]	@ (800da10 <_dtoa_r+0x588>)
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	f7f2 fc5c 	bl	8000288 <__aeabi_dsub>
 800d9d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d9d4:	f7f3 f882 	bl	8000adc <__aeabi_dcmplt>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f040 80b4 	bne.w	800db46 <_dtoa_r+0x6be>
 800d9de:	42a6      	cmp	r6, r4
 800d9e0:	f43f af70 	beq.w	800d8c4 <_dtoa_r+0x43c>
 800d9e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	@ (800da14 <_dtoa_r+0x58c>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f7f2 fe04 	bl	80005f8 <__aeabi_dmul>
 800d9f0:	4b08      	ldr	r3, [pc, #32]	@ (800da14 <_dtoa_r+0x58c>)
 800d9f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9fc:	f7f2 fdfc 	bl	80005f8 <__aeabi_dmul>
 800da00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da04:	e7c4      	b.n	800d990 <_dtoa_r+0x508>
 800da06:	bf00      	nop
 800da08:	0800f130 	.word	0x0800f130
 800da0c:	0800f108 	.word	0x0800f108
 800da10:	3ff00000 	.word	0x3ff00000
 800da14:	40240000 	.word	0x40240000
 800da18:	401c0000 	.word	0x401c0000
 800da1c:	40140000 	.word	0x40140000
 800da20:	3fe00000 	.word	0x3fe00000
 800da24:	4631      	mov	r1, r6
 800da26:	4628      	mov	r0, r5
 800da28:	f7f2 fde6 	bl	80005f8 <__aeabi_dmul>
 800da2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da30:	9413      	str	r4, [sp, #76]	@ 0x4c
 800da32:	4656      	mov	r6, sl
 800da34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da38:	f7f3 f88e 	bl	8000b58 <__aeabi_d2iz>
 800da3c:	4605      	mov	r5, r0
 800da3e:	f7f2 fd71 	bl	8000524 <__aeabi_i2d>
 800da42:	4602      	mov	r2, r0
 800da44:	460b      	mov	r3, r1
 800da46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da4a:	f7f2 fc1d 	bl	8000288 <__aeabi_dsub>
 800da4e:	3530      	adds	r5, #48	@ 0x30
 800da50:	f806 5b01 	strb.w	r5, [r6], #1
 800da54:	4602      	mov	r2, r0
 800da56:	460b      	mov	r3, r1
 800da58:	42a6      	cmp	r6, r4
 800da5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da5e:	f04f 0200 	mov.w	r2, #0
 800da62:	d124      	bne.n	800daae <_dtoa_r+0x626>
 800da64:	4baf      	ldr	r3, [pc, #700]	@ (800dd24 <_dtoa_r+0x89c>)
 800da66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da6a:	f7f2 fc0f 	bl	800028c <__adddf3>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da76:	f7f3 f84f 	bl	8000b18 <__aeabi_dcmpgt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d163      	bne.n	800db46 <_dtoa_r+0x6be>
 800da7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da82:	49a8      	ldr	r1, [pc, #672]	@ (800dd24 <_dtoa_r+0x89c>)
 800da84:	2000      	movs	r0, #0
 800da86:	f7f2 fbff 	bl	8000288 <__aeabi_dsub>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da92:	f7f3 f823 	bl	8000adc <__aeabi_dcmplt>
 800da96:	2800      	cmp	r0, #0
 800da98:	f43f af14 	beq.w	800d8c4 <_dtoa_r+0x43c>
 800da9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800da9e:	1e73      	subs	r3, r6, #1
 800daa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daa2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daa6:	2b30      	cmp	r3, #48	@ 0x30
 800daa8:	d0f8      	beq.n	800da9c <_dtoa_r+0x614>
 800daaa:	4647      	mov	r7, r8
 800daac:	e03b      	b.n	800db26 <_dtoa_r+0x69e>
 800daae:	4b9e      	ldr	r3, [pc, #632]	@ (800dd28 <_dtoa_r+0x8a0>)
 800dab0:	f7f2 fda2 	bl	80005f8 <__aeabi_dmul>
 800dab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dab8:	e7bc      	b.n	800da34 <_dtoa_r+0x5ac>
 800daba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dabe:	4656      	mov	r6, sl
 800dac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fec0 	bl	800084c <__aeabi_ddiv>
 800dacc:	f7f3 f844 	bl	8000b58 <__aeabi_d2iz>
 800dad0:	4680      	mov	r8, r0
 800dad2:	f7f2 fd27 	bl	8000524 <__aeabi_i2d>
 800dad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dada:	f7f2 fd8d 	bl	80005f8 <__aeabi_dmul>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4620      	mov	r0, r4
 800dae4:	4629      	mov	r1, r5
 800dae6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800daea:	f7f2 fbcd 	bl	8000288 <__aeabi_dsub>
 800daee:	f806 4b01 	strb.w	r4, [r6], #1
 800daf2:	9d03      	ldr	r5, [sp, #12]
 800daf4:	eba6 040a 	sub.w	r4, r6, sl
 800daf8:	42a5      	cmp	r5, r4
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	d133      	bne.n	800db68 <_dtoa_r+0x6e0>
 800db00:	f7f2 fbc4 	bl	800028c <__adddf3>
 800db04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db08:	4604      	mov	r4, r0
 800db0a:	460d      	mov	r5, r1
 800db0c:	f7f3 f804 	bl	8000b18 <__aeabi_dcmpgt>
 800db10:	b9c0      	cbnz	r0, 800db44 <_dtoa_r+0x6bc>
 800db12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db16:	4620      	mov	r0, r4
 800db18:	4629      	mov	r1, r5
 800db1a:	f7f2 ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800db1e:	b110      	cbz	r0, 800db26 <_dtoa_r+0x69e>
 800db20:	f018 0f01 	tst.w	r8, #1
 800db24:	d10e      	bne.n	800db44 <_dtoa_r+0x6bc>
 800db26:	9902      	ldr	r1, [sp, #8]
 800db28:	4648      	mov	r0, r9
 800db2a:	f000 fb07 	bl	800e13c <_Bfree>
 800db2e:	2300      	movs	r3, #0
 800db30:	7033      	strb	r3, [r6, #0]
 800db32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db34:	3701      	adds	r7, #1
 800db36:	601f      	str	r7, [r3, #0]
 800db38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 824b 	beq.w	800dfd6 <_dtoa_r+0xb4e>
 800db40:	601e      	str	r6, [r3, #0]
 800db42:	e248      	b.n	800dfd6 <_dtoa_r+0xb4e>
 800db44:	46b8      	mov	r8, r7
 800db46:	4633      	mov	r3, r6
 800db48:	461e      	mov	r6, r3
 800db4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db4e:	2a39      	cmp	r2, #57	@ 0x39
 800db50:	d106      	bne.n	800db60 <_dtoa_r+0x6d8>
 800db52:	459a      	cmp	sl, r3
 800db54:	d1f8      	bne.n	800db48 <_dtoa_r+0x6c0>
 800db56:	2230      	movs	r2, #48	@ 0x30
 800db58:	f108 0801 	add.w	r8, r8, #1
 800db5c:	f88a 2000 	strb.w	r2, [sl]
 800db60:	781a      	ldrb	r2, [r3, #0]
 800db62:	3201      	adds	r2, #1
 800db64:	701a      	strb	r2, [r3, #0]
 800db66:	e7a0      	b.n	800daaa <_dtoa_r+0x622>
 800db68:	4b6f      	ldr	r3, [pc, #444]	@ (800dd28 <_dtoa_r+0x8a0>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	f7f2 fd44 	bl	80005f8 <__aeabi_dmul>
 800db70:	2200      	movs	r2, #0
 800db72:	2300      	movs	r3, #0
 800db74:	4604      	mov	r4, r0
 800db76:	460d      	mov	r5, r1
 800db78:	f7f2 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d09f      	beq.n	800dac0 <_dtoa_r+0x638>
 800db80:	e7d1      	b.n	800db26 <_dtoa_r+0x69e>
 800db82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db84:	2a00      	cmp	r2, #0
 800db86:	f000 80ea 	beq.w	800dd5e <_dtoa_r+0x8d6>
 800db8a:	9a07      	ldr	r2, [sp, #28]
 800db8c:	2a01      	cmp	r2, #1
 800db8e:	f300 80cd 	bgt.w	800dd2c <_dtoa_r+0x8a4>
 800db92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db94:	2a00      	cmp	r2, #0
 800db96:	f000 80c1 	beq.w	800dd1c <_dtoa_r+0x894>
 800db9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db9e:	9c08      	ldr	r4, [sp, #32]
 800dba0:	9e00      	ldr	r6, [sp, #0]
 800dba2:	9a00      	ldr	r2, [sp, #0]
 800dba4:	441a      	add	r2, r3
 800dba6:	9200      	str	r2, [sp, #0]
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	2101      	movs	r1, #1
 800dbac:	441a      	add	r2, r3
 800dbae:	4648      	mov	r0, r9
 800dbb0:	9206      	str	r2, [sp, #24]
 800dbb2:	f000 fb77 	bl	800e2a4 <__i2b>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b166      	cbz	r6, 800dbd4 <_dtoa_r+0x74c>
 800dbba:	9b06      	ldr	r3, [sp, #24]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dd09      	ble.n	800dbd4 <_dtoa_r+0x74c>
 800dbc0:	42b3      	cmp	r3, r6
 800dbc2:	9a00      	ldr	r2, [sp, #0]
 800dbc4:	bfa8      	it	ge
 800dbc6:	4633      	movge	r3, r6
 800dbc8:	1ad2      	subs	r2, r2, r3
 800dbca:	9200      	str	r2, [sp, #0]
 800dbcc:	9a06      	ldr	r2, [sp, #24]
 800dbce:	1af6      	subs	r6, r6, r3
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	9306      	str	r3, [sp, #24]
 800dbd4:	9b08      	ldr	r3, [sp, #32]
 800dbd6:	b30b      	cbz	r3, 800dc1c <_dtoa_r+0x794>
 800dbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f000 80c6 	beq.w	800dd6c <_dtoa_r+0x8e4>
 800dbe0:	2c00      	cmp	r4, #0
 800dbe2:	f000 80c0 	beq.w	800dd66 <_dtoa_r+0x8de>
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4648      	mov	r0, r9
 800dbec:	f000 fc12 	bl	800e414 <__pow5mult>
 800dbf0:	9a02      	ldr	r2, [sp, #8]
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	4648      	mov	r0, r9
 800dbf8:	f000 fb6a 	bl	800e2d0 <__multiply>
 800dbfc:	9902      	ldr	r1, [sp, #8]
 800dbfe:	4680      	mov	r8, r0
 800dc00:	4648      	mov	r0, r9
 800dc02:	f000 fa9b 	bl	800e13c <_Bfree>
 800dc06:	9b08      	ldr	r3, [sp, #32]
 800dc08:	1b1b      	subs	r3, r3, r4
 800dc0a:	9308      	str	r3, [sp, #32]
 800dc0c:	f000 80b1 	beq.w	800dd72 <_dtoa_r+0x8ea>
 800dc10:	9a08      	ldr	r2, [sp, #32]
 800dc12:	4641      	mov	r1, r8
 800dc14:	4648      	mov	r0, r9
 800dc16:	f000 fbfd 	bl	800e414 <__pow5mult>
 800dc1a:	9002      	str	r0, [sp, #8]
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	4648      	mov	r0, r9
 800dc20:	f000 fb40 	bl	800e2a4 <__i2b>
 800dc24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc26:	4604      	mov	r4, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 81d8 	beq.w	800dfde <_dtoa_r+0xb56>
 800dc2e:	461a      	mov	r2, r3
 800dc30:	4601      	mov	r1, r0
 800dc32:	4648      	mov	r0, r9
 800dc34:	f000 fbee 	bl	800e414 <__pow5mult>
 800dc38:	9b07      	ldr	r3, [sp, #28]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	f300 809f 	bgt.w	800dd80 <_dtoa_r+0x8f8>
 800dc42:	9b04      	ldr	r3, [sp, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f040 8097 	bne.w	800dd78 <_dtoa_r+0x8f0>
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8093 	bne.w	800dd7c <_dtoa_r+0x8f4>
 800dc56:	9b05      	ldr	r3, [sp, #20]
 800dc58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc5c:	0d1b      	lsrs	r3, r3, #20
 800dc5e:	051b      	lsls	r3, r3, #20
 800dc60:	b133      	cbz	r3, 800dc70 <_dtoa_r+0x7e8>
 800dc62:	9b00      	ldr	r3, [sp, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	9b06      	ldr	r3, [sp, #24]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	9306      	str	r3, [sp, #24]
 800dc6e:	2301      	movs	r3, #1
 800dc70:	9308      	str	r3, [sp, #32]
 800dc72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f000 81b8 	beq.w	800dfea <_dtoa_r+0xb62>
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc80:	6918      	ldr	r0, [r3, #16]
 800dc82:	f000 fac3 	bl	800e20c <__hi0bits>
 800dc86:	f1c0 0020 	rsb	r0, r0, #32
 800dc8a:	9b06      	ldr	r3, [sp, #24]
 800dc8c:	4418      	add	r0, r3
 800dc8e:	f010 001f 	ands.w	r0, r0, #31
 800dc92:	f000 8082 	beq.w	800dd9a <_dtoa_r+0x912>
 800dc96:	f1c0 0320 	rsb	r3, r0, #32
 800dc9a:	2b04      	cmp	r3, #4
 800dc9c:	dd73      	ble.n	800dd86 <_dtoa_r+0x8fe>
 800dc9e:	9b00      	ldr	r3, [sp, #0]
 800dca0:	f1c0 001c 	rsb	r0, r0, #28
 800dca4:	4403      	add	r3, r0
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	9b06      	ldr	r3, [sp, #24]
 800dcaa:	4403      	add	r3, r0
 800dcac:	4406      	add	r6, r0
 800dcae:	9306      	str	r3, [sp, #24]
 800dcb0:	9b00      	ldr	r3, [sp, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dd05      	ble.n	800dcc2 <_dtoa_r+0x83a>
 800dcb6:	9902      	ldr	r1, [sp, #8]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	4648      	mov	r0, r9
 800dcbc:	f000 fc04 	bl	800e4c8 <__lshift>
 800dcc0:	9002      	str	r0, [sp, #8]
 800dcc2:	9b06      	ldr	r3, [sp, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dd05      	ble.n	800dcd4 <_dtoa_r+0x84c>
 800dcc8:	4621      	mov	r1, r4
 800dcca:	461a      	mov	r2, r3
 800dccc:	4648      	mov	r0, r9
 800dcce:	f000 fbfb 	bl	800e4c8 <__lshift>
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d061      	beq.n	800dd9e <_dtoa_r+0x916>
 800dcda:	9802      	ldr	r0, [sp, #8]
 800dcdc:	4621      	mov	r1, r4
 800dcde:	f000 fc5f 	bl	800e5a0 <__mcmp>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	da5b      	bge.n	800dd9e <_dtoa_r+0x916>
 800dce6:	2300      	movs	r3, #0
 800dce8:	9902      	ldr	r1, [sp, #8]
 800dcea:	220a      	movs	r2, #10
 800dcec:	4648      	mov	r0, r9
 800dcee:	f000 fa47 	bl	800e180 <__multadd>
 800dcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf4:	9002      	str	r0, [sp, #8]
 800dcf6:	f107 38ff 	add.w	r8, r7, #4294967295
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 8177 	beq.w	800dfee <_dtoa_r+0xb66>
 800dd00:	4629      	mov	r1, r5
 800dd02:	2300      	movs	r3, #0
 800dd04:	220a      	movs	r2, #10
 800dd06:	4648      	mov	r0, r9
 800dd08:	f000 fa3a 	bl	800e180 <__multadd>
 800dd0c:	f1bb 0f00 	cmp.w	fp, #0
 800dd10:	4605      	mov	r5, r0
 800dd12:	dc6f      	bgt.n	800ddf4 <_dtoa_r+0x96c>
 800dd14:	9b07      	ldr	r3, [sp, #28]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dc49      	bgt.n	800ddae <_dtoa_r+0x926>
 800dd1a:	e06b      	b.n	800ddf4 <_dtoa_r+0x96c>
 800dd1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd22:	e73c      	b.n	800db9e <_dtoa_r+0x716>
 800dd24:	3fe00000 	.word	0x3fe00000
 800dd28:	40240000 	.word	0x40240000
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	1e5c      	subs	r4, r3, #1
 800dd30:	9b08      	ldr	r3, [sp, #32]
 800dd32:	42a3      	cmp	r3, r4
 800dd34:	db09      	blt.n	800dd4a <_dtoa_r+0x8c2>
 800dd36:	1b1c      	subs	r4, r3, r4
 800dd38:	9b03      	ldr	r3, [sp, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f6bf af30 	bge.w	800dba0 <_dtoa_r+0x718>
 800dd40:	9b00      	ldr	r3, [sp, #0]
 800dd42:	9a03      	ldr	r2, [sp, #12]
 800dd44:	1a9e      	subs	r6, r3, r2
 800dd46:	2300      	movs	r3, #0
 800dd48:	e72b      	b.n	800dba2 <_dtoa_r+0x71a>
 800dd4a:	9b08      	ldr	r3, [sp, #32]
 800dd4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd4e:	9408      	str	r4, [sp, #32]
 800dd50:	1ae3      	subs	r3, r4, r3
 800dd52:	441a      	add	r2, r3
 800dd54:	9e00      	ldr	r6, [sp, #0]
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	920d      	str	r2, [sp, #52]	@ 0x34
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	e721      	b.n	800dba2 <_dtoa_r+0x71a>
 800dd5e:	9c08      	ldr	r4, [sp, #32]
 800dd60:	9e00      	ldr	r6, [sp, #0]
 800dd62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dd64:	e728      	b.n	800dbb8 <_dtoa_r+0x730>
 800dd66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dd6a:	e751      	b.n	800dc10 <_dtoa_r+0x788>
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	9902      	ldr	r1, [sp, #8]
 800dd70:	e750      	b.n	800dc14 <_dtoa_r+0x78c>
 800dd72:	f8cd 8008 	str.w	r8, [sp, #8]
 800dd76:	e751      	b.n	800dc1c <_dtoa_r+0x794>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e779      	b.n	800dc70 <_dtoa_r+0x7e8>
 800dd7c:	9b04      	ldr	r3, [sp, #16]
 800dd7e:	e777      	b.n	800dc70 <_dtoa_r+0x7e8>
 800dd80:	2300      	movs	r3, #0
 800dd82:	9308      	str	r3, [sp, #32]
 800dd84:	e779      	b.n	800dc7a <_dtoa_r+0x7f2>
 800dd86:	d093      	beq.n	800dcb0 <_dtoa_r+0x828>
 800dd88:	9a00      	ldr	r2, [sp, #0]
 800dd8a:	331c      	adds	r3, #28
 800dd8c:	441a      	add	r2, r3
 800dd8e:	9200      	str	r2, [sp, #0]
 800dd90:	9a06      	ldr	r2, [sp, #24]
 800dd92:	441a      	add	r2, r3
 800dd94:	441e      	add	r6, r3
 800dd96:	9206      	str	r2, [sp, #24]
 800dd98:	e78a      	b.n	800dcb0 <_dtoa_r+0x828>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	e7f4      	b.n	800dd88 <_dtoa_r+0x900>
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	46b8      	mov	r8, r7
 800dda4:	dc20      	bgt.n	800dde8 <_dtoa_r+0x960>
 800dda6:	469b      	mov	fp, r3
 800dda8:	9b07      	ldr	r3, [sp, #28]
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	dd1e      	ble.n	800ddec <_dtoa_r+0x964>
 800ddae:	f1bb 0f00 	cmp.w	fp, #0
 800ddb2:	f47f adb1 	bne.w	800d918 <_dtoa_r+0x490>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	465b      	mov	r3, fp
 800ddba:	2205      	movs	r2, #5
 800ddbc:	4648      	mov	r0, r9
 800ddbe:	f000 f9df 	bl	800e180 <__multadd>
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	9802      	ldr	r0, [sp, #8]
 800ddc8:	f000 fbea 	bl	800e5a0 <__mcmp>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	f77f ada3 	ble.w	800d918 <_dtoa_r+0x490>
 800ddd2:	4656      	mov	r6, sl
 800ddd4:	2331      	movs	r3, #49	@ 0x31
 800ddd6:	f806 3b01 	strb.w	r3, [r6], #1
 800ddda:	f108 0801 	add.w	r8, r8, #1
 800ddde:	e59f      	b.n	800d920 <_dtoa_r+0x498>
 800dde0:	9c03      	ldr	r4, [sp, #12]
 800dde2:	46b8      	mov	r8, r7
 800dde4:	4625      	mov	r5, r4
 800dde6:	e7f4      	b.n	800ddd2 <_dtoa_r+0x94a>
 800dde8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ddec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 8101 	beq.w	800dff6 <_dtoa_r+0xb6e>
 800ddf4:	2e00      	cmp	r6, #0
 800ddf6:	dd05      	ble.n	800de04 <_dtoa_r+0x97c>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	4648      	mov	r0, r9
 800ddfe:	f000 fb63 	bl	800e4c8 <__lshift>
 800de02:	4605      	mov	r5, r0
 800de04:	9b08      	ldr	r3, [sp, #32]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d05c      	beq.n	800dec4 <_dtoa_r+0xa3c>
 800de0a:	6869      	ldr	r1, [r5, #4]
 800de0c:	4648      	mov	r0, r9
 800de0e:	f000 f955 	bl	800e0bc <_Balloc>
 800de12:	4606      	mov	r6, r0
 800de14:	b928      	cbnz	r0, 800de22 <_dtoa_r+0x99a>
 800de16:	4b82      	ldr	r3, [pc, #520]	@ (800e020 <_dtoa_r+0xb98>)
 800de18:	4602      	mov	r2, r0
 800de1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de1e:	f7ff bb4a 	b.w	800d4b6 <_dtoa_r+0x2e>
 800de22:	692a      	ldr	r2, [r5, #16]
 800de24:	3202      	adds	r2, #2
 800de26:	0092      	lsls	r2, r2, #2
 800de28:	f105 010c 	add.w	r1, r5, #12
 800de2c:	300c      	adds	r0, #12
 800de2e:	f7ff fa8c 	bl	800d34a <memcpy>
 800de32:	2201      	movs	r2, #1
 800de34:	4631      	mov	r1, r6
 800de36:	4648      	mov	r0, r9
 800de38:	f000 fb46 	bl	800e4c8 <__lshift>
 800de3c:	f10a 0301 	add.w	r3, sl, #1
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	eb0a 030b 	add.w	r3, sl, fp
 800de46:	9308      	str	r3, [sp, #32]
 800de48:	9b04      	ldr	r3, [sp, #16]
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	462f      	mov	r7, r5
 800de50:	9306      	str	r3, [sp, #24]
 800de52:	4605      	mov	r5, r0
 800de54:	9b00      	ldr	r3, [sp, #0]
 800de56:	9802      	ldr	r0, [sp, #8]
 800de58:	4621      	mov	r1, r4
 800de5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800de5e:	f7ff fa89 	bl	800d374 <quorem>
 800de62:	4603      	mov	r3, r0
 800de64:	3330      	adds	r3, #48	@ 0x30
 800de66:	9003      	str	r0, [sp, #12]
 800de68:	4639      	mov	r1, r7
 800de6a:	9802      	ldr	r0, [sp, #8]
 800de6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de6e:	f000 fb97 	bl	800e5a0 <__mcmp>
 800de72:	462a      	mov	r2, r5
 800de74:	9004      	str	r0, [sp, #16]
 800de76:	4621      	mov	r1, r4
 800de78:	4648      	mov	r0, r9
 800de7a:	f000 fbad 	bl	800e5d8 <__mdiff>
 800de7e:	68c2      	ldr	r2, [r0, #12]
 800de80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de82:	4606      	mov	r6, r0
 800de84:	bb02      	cbnz	r2, 800dec8 <_dtoa_r+0xa40>
 800de86:	4601      	mov	r1, r0
 800de88:	9802      	ldr	r0, [sp, #8]
 800de8a:	f000 fb89 	bl	800e5a0 <__mcmp>
 800de8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de90:	4602      	mov	r2, r0
 800de92:	4631      	mov	r1, r6
 800de94:	4648      	mov	r0, r9
 800de96:	920c      	str	r2, [sp, #48]	@ 0x30
 800de98:	9309      	str	r3, [sp, #36]	@ 0x24
 800de9a:	f000 f94f 	bl	800e13c <_Bfree>
 800de9e:	9b07      	ldr	r3, [sp, #28]
 800dea0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dea2:	9e00      	ldr	r6, [sp, #0]
 800dea4:	ea42 0103 	orr.w	r1, r2, r3
 800dea8:	9b06      	ldr	r3, [sp, #24]
 800deaa:	4319      	orrs	r1, r3
 800deac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deae:	d10d      	bne.n	800decc <_dtoa_r+0xa44>
 800deb0:	2b39      	cmp	r3, #57	@ 0x39
 800deb2:	d027      	beq.n	800df04 <_dtoa_r+0xa7c>
 800deb4:	9a04      	ldr	r2, [sp, #16]
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	dd01      	ble.n	800debe <_dtoa_r+0xa36>
 800deba:	9b03      	ldr	r3, [sp, #12]
 800debc:	3331      	adds	r3, #49	@ 0x31
 800debe:	f88b 3000 	strb.w	r3, [fp]
 800dec2:	e52e      	b.n	800d922 <_dtoa_r+0x49a>
 800dec4:	4628      	mov	r0, r5
 800dec6:	e7b9      	b.n	800de3c <_dtoa_r+0x9b4>
 800dec8:	2201      	movs	r2, #1
 800deca:	e7e2      	b.n	800de92 <_dtoa_r+0xa0a>
 800decc:	9904      	ldr	r1, [sp, #16]
 800dece:	2900      	cmp	r1, #0
 800ded0:	db04      	blt.n	800dedc <_dtoa_r+0xa54>
 800ded2:	9807      	ldr	r0, [sp, #28]
 800ded4:	4301      	orrs	r1, r0
 800ded6:	9806      	ldr	r0, [sp, #24]
 800ded8:	4301      	orrs	r1, r0
 800deda:	d120      	bne.n	800df1e <_dtoa_r+0xa96>
 800dedc:	2a00      	cmp	r2, #0
 800dede:	ddee      	ble.n	800debe <_dtoa_r+0xa36>
 800dee0:	9902      	ldr	r1, [sp, #8]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	2201      	movs	r2, #1
 800dee6:	4648      	mov	r0, r9
 800dee8:	f000 faee 	bl	800e4c8 <__lshift>
 800deec:	4621      	mov	r1, r4
 800deee:	9002      	str	r0, [sp, #8]
 800def0:	f000 fb56 	bl	800e5a0 <__mcmp>
 800def4:	2800      	cmp	r0, #0
 800def6:	9b00      	ldr	r3, [sp, #0]
 800def8:	dc02      	bgt.n	800df00 <_dtoa_r+0xa78>
 800defa:	d1e0      	bne.n	800debe <_dtoa_r+0xa36>
 800defc:	07da      	lsls	r2, r3, #31
 800defe:	d5de      	bpl.n	800debe <_dtoa_r+0xa36>
 800df00:	2b39      	cmp	r3, #57	@ 0x39
 800df02:	d1da      	bne.n	800deba <_dtoa_r+0xa32>
 800df04:	2339      	movs	r3, #57	@ 0x39
 800df06:	f88b 3000 	strb.w	r3, [fp]
 800df0a:	4633      	mov	r3, r6
 800df0c:	461e      	mov	r6, r3
 800df0e:	3b01      	subs	r3, #1
 800df10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df14:	2a39      	cmp	r2, #57	@ 0x39
 800df16:	d04e      	beq.n	800dfb6 <_dtoa_r+0xb2e>
 800df18:	3201      	adds	r2, #1
 800df1a:	701a      	strb	r2, [r3, #0]
 800df1c:	e501      	b.n	800d922 <_dtoa_r+0x49a>
 800df1e:	2a00      	cmp	r2, #0
 800df20:	dd03      	ble.n	800df2a <_dtoa_r+0xaa2>
 800df22:	2b39      	cmp	r3, #57	@ 0x39
 800df24:	d0ee      	beq.n	800df04 <_dtoa_r+0xa7c>
 800df26:	3301      	adds	r3, #1
 800df28:	e7c9      	b.n	800debe <_dtoa_r+0xa36>
 800df2a:	9a00      	ldr	r2, [sp, #0]
 800df2c:	9908      	ldr	r1, [sp, #32]
 800df2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df32:	428a      	cmp	r2, r1
 800df34:	d028      	beq.n	800df88 <_dtoa_r+0xb00>
 800df36:	9902      	ldr	r1, [sp, #8]
 800df38:	2300      	movs	r3, #0
 800df3a:	220a      	movs	r2, #10
 800df3c:	4648      	mov	r0, r9
 800df3e:	f000 f91f 	bl	800e180 <__multadd>
 800df42:	42af      	cmp	r7, r5
 800df44:	9002      	str	r0, [sp, #8]
 800df46:	f04f 0300 	mov.w	r3, #0
 800df4a:	f04f 020a 	mov.w	r2, #10
 800df4e:	4639      	mov	r1, r7
 800df50:	4648      	mov	r0, r9
 800df52:	d107      	bne.n	800df64 <_dtoa_r+0xadc>
 800df54:	f000 f914 	bl	800e180 <__multadd>
 800df58:	4607      	mov	r7, r0
 800df5a:	4605      	mov	r5, r0
 800df5c:	9b00      	ldr	r3, [sp, #0]
 800df5e:	3301      	adds	r3, #1
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	e777      	b.n	800de54 <_dtoa_r+0x9cc>
 800df64:	f000 f90c 	bl	800e180 <__multadd>
 800df68:	4629      	mov	r1, r5
 800df6a:	4607      	mov	r7, r0
 800df6c:	2300      	movs	r3, #0
 800df6e:	220a      	movs	r2, #10
 800df70:	4648      	mov	r0, r9
 800df72:	f000 f905 	bl	800e180 <__multadd>
 800df76:	4605      	mov	r5, r0
 800df78:	e7f0      	b.n	800df5c <_dtoa_r+0xad4>
 800df7a:	f1bb 0f00 	cmp.w	fp, #0
 800df7e:	bfcc      	ite	gt
 800df80:	465e      	movgt	r6, fp
 800df82:	2601      	movle	r6, #1
 800df84:	4456      	add	r6, sl
 800df86:	2700      	movs	r7, #0
 800df88:	9902      	ldr	r1, [sp, #8]
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	2201      	movs	r2, #1
 800df8e:	4648      	mov	r0, r9
 800df90:	f000 fa9a 	bl	800e4c8 <__lshift>
 800df94:	4621      	mov	r1, r4
 800df96:	9002      	str	r0, [sp, #8]
 800df98:	f000 fb02 	bl	800e5a0 <__mcmp>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	dcb4      	bgt.n	800df0a <_dtoa_r+0xa82>
 800dfa0:	d102      	bne.n	800dfa8 <_dtoa_r+0xb20>
 800dfa2:	9b00      	ldr	r3, [sp, #0]
 800dfa4:	07db      	lsls	r3, r3, #31
 800dfa6:	d4b0      	bmi.n	800df0a <_dtoa_r+0xa82>
 800dfa8:	4633      	mov	r3, r6
 800dfaa:	461e      	mov	r6, r3
 800dfac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfb0:	2a30      	cmp	r2, #48	@ 0x30
 800dfb2:	d0fa      	beq.n	800dfaa <_dtoa_r+0xb22>
 800dfb4:	e4b5      	b.n	800d922 <_dtoa_r+0x49a>
 800dfb6:	459a      	cmp	sl, r3
 800dfb8:	d1a8      	bne.n	800df0c <_dtoa_r+0xa84>
 800dfba:	2331      	movs	r3, #49	@ 0x31
 800dfbc:	f108 0801 	add.w	r8, r8, #1
 800dfc0:	f88a 3000 	strb.w	r3, [sl]
 800dfc4:	e4ad      	b.n	800d922 <_dtoa_r+0x49a>
 800dfc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dfc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e024 <_dtoa_r+0xb9c>
 800dfcc:	b11b      	cbz	r3, 800dfd6 <_dtoa_r+0xb4e>
 800dfce:	f10a 0308 	add.w	r3, sl, #8
 800dfd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	4650      	mov	r0, sl
 800dfd8:	b017      	add	sp, #92	@ 0x5c
 800dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	9b07      	ldr	r3, [sp, #28]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	f77f ae2e 	ble.w	800dc42 <_dtoa_r+0x7ba>
 800dfe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfe8:	9308      	str	r3, [sp, #32]
 800dfea:	2001      	movs	r0, #1
 800dfec:	e64d      	b.n	800dc8a <_dtoa_r+0x802>
 800dfee:	f1bb 0f00 	cmp.w	fp, #0
 800dff2:	f77f aed9 	ble.w	800dda8 <_dtoa_r+0x920>
 800dff6:	4656      	mov	r6, sl
 800dff8:	9802      	ldr	r0, [sp, #8]
 800dffa:	4621      	mov	r1, r4
 800dffc:	f7ff f9ba 	bl	800d374 <quorem>
 800e000:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e004:	f806 3b01 	strb.w	r3, [r6], #1
 800e008:	eba6 020a 	sub.w	r2, r6, sl
 800e00c:	4593      	cmp	fp, r2
 800e00e:	ddb4      	ble.n	800df7a <_dtoa_r+0xaf2>
 800e010:	9902      	ldr	r1, [sp, #8]
 800e012:	2300      	movs	r3, #0
 800e014:	220a      	movs	r2, #10
 800e016:	4648      	mov	r0, r9
 800e018:	f000 f8b2 	bl	800e180 <__multadd>
 800e01c:	9002      	str	r0, [sp, #8]
 800e01e:	e7eb      	b.n	800dff8 <_dtoa_r+0xb70>
 800e020:	0800f070 	.word	0x0800f070
 800e024:	0800eff4 	.word	0x0800eff4

0800e028 <_free_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4605      	mov	r5, r0
 800e02c:	2900      	cmp	r1, #0
 800e02e:	d041      	beq.n	800e0b4 <_free_r+0x8c>
 800e030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e034:	1f0c      	subs	r4, r1, #4
 800e036:	2b00      	cmp	r3, #0
 800e038:	bfb8      	it	lt
 800e03a:	18e4      	addlt	r4, r4, r3
 800e03c:	f7fe fb7c 	bl	800c738 <__malloc_lock>
 800e040:	4a1d      	ldr	r2, [pc, #116]	@ (800e0b8 <_free_r+0x90>)
 800e042:	6813      	ldr	r3, [r2, #0]
 800e044:	b933      	cbnz	r3, 800e054 <_free_r+0x2c>
 800e046:	6063      	str	r3, [r4, #4]
 800e048:	6014      	str	r4, [r2, #0]
 800e04a:	4628      	mov	r0, r5
 800e04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e050:	f7fe bb78 	b.w	800c744 <__malloc_unlock>
 800e054:	42a3      	cmp	r3, r4
 800e056:	d908      	bls.n	800e06a <_free_r+0x42>
 800e058:	6820      	ldr	r0, [r4, #0]
 800e05a:	1821      	adds	r1, r4, r0
 800e05c:	428b      	cmp	r3, r1
 800e05e:	bf01      	itttt	eq
 800e060:	6819      	ldreq	r1, [r3, #0]
 800e062:	685b      	ldreq	r3, [r3, #4]
 800e064:	1809      	addeq	r1, r1, r0
 800e066:	6021      	streq	r1, [r4, #0]
 800e068:	e7ed      	b.n	800e046 <_free_r+0x1e>
 800e06a:	461a      	mov	r2, r3
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	b10b      	cbz	r3, 800e074 <_free_r+0x4c>
 800e070:	42a3      	cmp	r3, r4
 800e072:	d9fa      	bls.n	800e06a <_free_r+0x42>
 800e074:	6811      	ldr	r1, [r2, #0]
 800e076:	1850      	adds	r0, r2, r1
 800e078:	42a0      	cmp	r0, r4
 800e07a:	d10b      	bne.n	800e094 <_free_r+0x6c>
 800e07c:	6820      	ldr	r0, [r4, #0]
 800e07e:	4401      	add	r1, r0
 800e080:	1850      	adds	r0, r2, r1
 800e082:	4283      	cmp	r3, r0
 800e084:	6011      	str	r1, [r2, #0]
 800e086:	d1e0      	bne.n	800e04a <_free_r+0x22>
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	6053      	str	r3, [r2, #4]
 800e08e:	4408      	add	r0, r1
 800e090:	6010      	str	r0, [r2, #0]
 800e092:	e7da      	b.n	800e04a <_free_r+0x22>
 800e094:	d902      	bls.n	800e09c <_free_r+0x74>
 800e096:	230c      	movs	r3, #12
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	e7d6      	b.n	800e04a <_free_r+0x22>
 800e09c:	6820      	ldr	r0, [r4, #0]
 800e09e:	1821      	adds	r1, r4, r0
 800e0a0:	428b      	cmp	r3, r1
 800e0a2:	bf04      	itt	eq
 800e0a4:	6819      	ldreq	r1, [r3, #0]
 800e0a6:	685b      	ldreq	r3, [r3, #4]
 800e0a8:	6063      	str	r3, [r4, #4]
 800e0aa:	bf04      	itt	eq
 800e0ac:	1809      	addeq	r1, r1, r0
 800e0ae:	6021      	streq	r1, [r4, #0]
 800e0b0:	6054      	str	r4, [r2, #4]
 800e0b2:	e7ca      	b.n	800e04a <_free_r+0x22>
 800e0b4:	bd38      	pop	{r3, r4, r5, pc}
 800e0b6:	bf00      	nop
 800e0b8:	200020e0 	.word	0x200020e0

0800e0bc <_Balloc>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	69c6      	ldr	r6, [r0, #28]
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	b976      	cbnz	r6, 800e0e4 <_Balloc+0x28>
 800e0c6:	2010      	movs	r0, #16
 800e0c8:	f7fe fa84 	bl	800c5d4 <malloc>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	61e0      	str	r0, [r4, #28]
 800e0d0:	b920      	cbnz	r0, 800e0dc <_Balloc+0x20>
 800e0d2:	4b18      	ldr	r3, [pc, #96]	@ (800e134 <_Balloc+0x78>)
 800e0d4:	4818      	ldr	r0, [pc, #96]	@ (800e138 <_Balloc+0x7c>)
 800e0d6:	216b      	movs	r1, #107	@ 0x6b
 800e0d8:	f7fe fa5e 	bl	800c598 <__assert_func>
 800e0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0e0:	6006      	str	r6, [r0, #0]
 800e0e2:	60c6      	str	r6, [r0, #12]
 800e0e4:	69e6      	ldr	r6, [r4, #28]
 800e0e6:	68f3      	ldr	r3, [r6, #12]
 800e0e8:	b183      	cbz	r3, 800e10c <_Balloc+0x50>
 800e0ea:	69e3      	ldr	r3, [r4, #28]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0f2:	b9b8      	cbnz	r0, 800e124 <_Balloc+0x68>
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800e0fa:	1d72      	adds	r2, r6, #5
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 fe1c 	bl	800ed3c <_calloc_r>
 800e104:	b160      	cbz	r0, 800e120 <_Balloc+0x64>
 800e106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e10a:	e00e      	b.n	800e12a <_Balloc+0x6e>
 800e10c:	2221      	movs	r2, #33	@ 0x21
 800e10e:	2104      	movs	r1, #4
 800e110:	4620      	mov	r0, r4
 800e112:	f000 fe13 	bl	800ed3c <_calloc_r>
 800e116:	69e3      	ldr	r3, [r4, #28]
 800e118:	60f0      	str	r0, [r6, #12]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1e4      	bne.n	800e0ea <_Balloc+0x2e>
 800e120:	2000      	movs	r0, #0
 800e122:	bd70      	pop	{r4, r5, r6, pc}
 800e124:	6802      	ldr	r2, [r0, #0]
 800e126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e12a:	2300      	movs	r3, #0
 800e12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e130:	e7f7      	b.n	800e122 <_Balloc+0x66>
 800e132:	bf00      	nop
 800e134:	0800f001 	.word	0x0800f001
 800e138:	0800f081 	.word	0x0800f081

0800e13c <_Bfree>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	69c6      	ldr	r6, [r0, #28]
 800e140:	4605      	mov	r5, r0
 800e142:	460c      	mov	r4, r1
 800e144:	b976      	cbnz	r6, 800e164 <_Bfree+0x28>
 800e146:	2010      	movs	r0, #16
 800e148:	f7fe fa44 	bl	800c5d4 <malloc>
 800e14c:	4602      	mov	r2, r0
 800e14e:	61e8      	str	r0, [r5, #28]
 800e150:	b920      	cbnz	r0, 800e15c <_Bfree+0x20>
 800e152:	4b09      	ldr	r3, [pc, #36]	@ (800e178 <_Bfree+0x3c>)
 800e154:	4809      	ldr	r0, [pc, #36]	@ (800e17c <_Bfree+0x40>)
 800e156:	218f      	movs	r1, #143	@ 0x8f
 800e158:	f7fe fa1e 	bl	800c598 <__assert_func>
 800e15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e160:	6006      	str	r6, [r0, #0]
 800e162:	60c6      	str	r6, [r0, #12]
 800e164:	b13c      	cbz	r4, 800e176 <_Bfree+0x3a>
 800e166:	69eb      	ldr	r3, [r5, #28]
 800e168:	6862      	ldr	r2, [r4, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e170:	6021      	str	r1, [r4, #0]
 800e172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	0800f001 	.word	0x0800f001
 800e17c:	0800f081 	.word	0x0800f081

0800e180 <__multadd>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	690d      	ldr	r5, [r1, #16]
 800e186:	4607      	mov	r7, r0
 800e188:	460c      	mov	r4, r1
 800e18a:	461e      	mov	r6, r3
 800e18c:	f101 0c14 	add.w	ip, r1, #20
 800e190:	2000      	movs	r0, #0
 800e192:	f8dc 3000 	ldr.w	r3, [ip]
 800e196:	b299      	uxth	r1, r3
 800e198:	fb02 6101 	mla	r1, r2, r1, r6
 800e19c:	0c1e      	lsrs	r6, r3, #16
 800e19e:	0c0b      	lsrs	r3, r1, #16
 800e1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800e1a4:	b289      	uxth	r1, r1
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1ac:	4285      	cmp	r5, r0
 800e1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800e1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1b6:	dcec      	bgt.n	800e192 <__multadd+0x12>
 800e1b8:	b30e      	cbz	r6, 800e1fe <__multadd+0x7e>
 800e1ba:	68a3      	ldr	r3, [r4, #8]
 800e1bc:	42ab      	cmp	r3, r5
 800e1be:	dc19      	bgt.n	800e1f4 <__multadd+0x74>
 800e1c0:	6861      	ldr	r1, [r4, #4]
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	3101      	adds	r1, #1
 800e1c6:	f7ff ff79 	bl	800e0bc <_Balloc>
 800e1ca:	4680      	mov	r8, r0
 800e1cc:	b928      	cbnz	r0, 800e1da <__multadd+0x5a>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e204 <__multadd+0x84>)
 800e1d2:	480d      	ldr	r0, [pc, #52]	@ (800e208 <__multadd+0x88>)
 800e1d4:	21ba      	movs	r1, #186	@ 0xba
 800e1d6:	f7fe f9df 	bl	800c598 <__assert_func>
 800e1da:	6922      	ldr	r2, [r4, #16]
 800e1dc:	3202      	adds	r2, #2
 800e1de:	f104 010c 	add.w	r1, r4, #12
 800e1e2:	0092      	lsls	r2, r2, #2
 800e1e4:	300c      	adds	r0, #12
 800e1e6:	f7ff f8b0 	bl	800d34a <memcpy>
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	f7ff ffa5 	bl	800e13c <_Bfree>
 800e1f2:	4644      	mov	r4, r8
 800e1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1f8:	3501      	adds	r5, #1
 800e1fa:	615e      	str	r6, [r3, #20]
 800e1fc:	6125      	str	r5, [r4, #16]
 800e1fe:	4620      	mov	r0, r4
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	0800f070 	.word	0x0800f070
 800e208:	0800f081 	.word	0x0800f081

0800e20c <__hi0bits>:
 800e20c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e210:	4603      	mov	r3, r0
 800e212:	bf36      	itet	cc
 800e214:	0403      	lslcc	r3, r0, #16
 800e216:	2000      	movcs	r0, #0
 800e218:	2010      	movcc	r0, #16
 800e21a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e21e:	bf3c      	itt	cc
 800e220:	021b      	lslcc	r3, r3, #8
 800e222:	3008      	addcc	r0, #8
 800e224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e228:	bf3c      	itt	cc
 800e22a:	011b      	lslcc	r3, r3, #4
 800e22c:	3004      	addcc	r0, #4
 800e22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e232:	bf3c      	itt	cc
 800e234:	009b      	lslcc	r3, r3, #2
 800e236:	3002      	addcc	r0, #2
 800e238:	2b00      	cmp	r3, #0
 800e23a:	db05      	blt.n	800e248 <__hi0bits+0x3c>
 800e23c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e240:	f100 0001 	add.w	r0, r0, #1
 800e244:	bf08      	it	eq
 800e246:	2020      	moveq	r0, #32
 800e248:	4770      	bx	lr

0800e24a <__lo0bits>:
 800e24a:	6803      	ldr	r3, [r0, #0]
 800e24c:	4602      	mov	r2, r0
 800e24e:	f013 0007 	ands.w	r0, r3, #7
 800e252:	d00b      	beq.n	800e26c <__lo0bits+0x22>
 800e254:	07d9      	lsls	r1, r3, #31
 800e256:	d421      	bmi.n	800e29c <__lo0bits+0x52>
 800e258:	0798      	lsls	r0, r3, #30
 800e25a:	bf49      	itett	mi
 800e25c:	085b      	lsrmi	r3, r3, #1
 800e25e:	089b      	lsrpl	r3, r3, #2
 800e260:	2001      	movmi	r0, #1
 800e262:	6013      	strmi	r3, [r2, #0]
 800e264:	bf5c      	itt	pl
 800e266:	6013      	strpl	r3, [r2, #0]
 800e268:	2002      	movpl	r0, #2
 800e26a:	4770      	bx	lr
 800e26c:	b299      	uxth	r1, r3
 800e26e:	b909      	cbnz	r1, 800e274 <__lo0bits+0x2a>
 800e270:	0c1b      	lsrs	r3, r3, #16
 800e272:	2010      	movs	r0, #16
 800e274:	b2d9      	uxtb	r1, r3
 800e276:	b909      	cbnz	r1, 800e27c <__lo0bits+0x32>
 800e278:	3008      	adds	r0, #8
 800e27a:	0a1b      	lsrs	r3, r3, #8
 800e27c:	0719      	lsls	r1, r3, #28
 800e27e:	bf04      	itt	eq
 800e280:	091b      	lsreq	r3, r3, #4
 800e282:	3004      	addeq	r0, #4
 800e284:	0799      	lsls	r1, r3, #30
 800e286:	bf04      	itt	eq
 800e288:	089b      	lsreq	r3, r3, #2
 800e28a:	3002      	addeq	r0, #2
 800e28c:	07d9      	lsls	r1, r3, #31
 800e28e:	d403      	bmi.n	800e298 <__lo0bits+0x4e>
 800e290:	085b      	lsrs	r3, r3, #1
 800e292:	f100 0001 	add.w	r0, r0, #1
 800e296:	d003      	beq.n	800e2a0 <__lo0bits+0x56>
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	4770      	bx	lr
 800e29c:	2000      	movs	r0, #0
 800e29e:	4770      	bx	lr
 800e2a0:	2020      	movs	r0, #32
 800e2a2:	4770      	bx	lr

0800e2a4 <__i2b>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	f7ff ff07 	bl	800e0bc <_Balloc>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	b928      	cbnz	r0, 800e2be <__i2b+0x1a>
 800e2b2:	4b05      	ldr	r3, [pc, #20]	@ (800e2c8 <__i2b+0x24>)
 800e2b4:	4805      	ldr	r0, [pc, #20]	@ (800e2cc <__i2b+0x28>)
 800e2b6:	f240 1145 	movw	r1, #325	@ 0x145
 800e2ba:	f7fe f96d 	bl	800c598 <__assert_func>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	6144      	str	r4, [r0, #20]
 800e2c2:	6103      	str	r3, [r0, #16]
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	bf00      	nop
 800e2c8:	0800f070 	.word	0x0800f070
 800e2cc:	0800f081 	.word	0x0800f081

0800e2d0 <__multiply>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	4617      	mov	r7, r2
 800e2d6:	690a      	ldr	r2, [r1, #16]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	bfa8      	it	ge
 800e2de:	463b      	movge	r3, r7
 800e2e0:	4689      	mov	r9, r1
 800e2e2:	bfa4      	itt	ge
 800e2e4:	460f      	movge	r7, r1
 800e2e6:	4699      	movge	r9, r3
 800e2e8:	693d      	ldr	r5, [r7, #16]
 800e2ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	eb05 060a 	add.w	r6, r5, sl
 800e2f6:	42b3      	cmp	r3, r6
 800e2f8:	b085      	sub	sp, #20
 800e2fa:	bfb8      	it	lt
 800e2fc:	3101      	addlt	r1, #1
 800e2fe:	f7ff fedd 	bl	800e0bc <_Balloc>
 800e302:	b930      	cbnz	r0, 800e312 <__multiply+0x42>
 800e304:	4602      	mov	r2, r0
 800e306:	4b41      	ldr	r3, [pc, #260]	@ (800e40c <__multiply+0x13c>)
 800e308:	4841      	ldr	r0, [pc, #260]	@ (800e410 <__multiply+0x140>)
 800e30a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e30e:	f7fe f943 	bl	800c598 <__assert_func>
 800e312:	f100 0414 	add.w	r4, r0, #20
 800e316:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e31a:	4623      	mov	r3, r4
 800e31c:	2200      	movs	r2, #0
 800e31e:	4573      	cmp	r3, lr
 800e320:	d320      	bcc.n	800e364 <__multiply+0x94>
 800e322:	f107 0814 	add.w	r8, r7, #20
 800e326:	f109 0114 	add.w	r1, r9, #20
 800e32a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e32e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e332:	9302      	str	r3, [sp, #8]
 800e334:	1beb      	subs	r3, r5, r7
 800e336:	3b15      	subs	r3, #21
 800e338:	f023 0303 	bic.w	r3, r3, #3
 800e33c:	3304      	adds	r3, #4
 800e33e:	3715      	adds	r7, #21
 800e340:	42bd      	cmp	r5, r7
 800e342:	bf38      	it	cc
 800e344:	2304      	movcc	r3, #4
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	9103      	str	r1, [sp, #12]
 800e34c:	428b      	cmp	r3, r1
 800e34e:	d80c      	bhi.n	800e36a <__multiply+0x9a>
 800e350:	2e00      	cmp	r6, #0
 800e352:	dd03      	ble.n	800e35c <__multiply+0x8c>
 800e354:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d055      	beq.n	800e408 <__multiply+0x138>
 800e35c:	6106      	str	r6, [r0, #16]
 800e35e:	b005      	add	sp, #20
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e364:	f843 2b04 	str.w	r2, [r3], #4
 800e368:	e7d9      	b.n	800e31e <__multiply+0x4e>
 800e36a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e36e:	f1ba 0f00 	cmp.w	sl, #0
 800e372:	d01f      	beq.n	800e3b4 <__multiply+0xe4>
 800e374:	46c4      	mov	ip, r8
 800e376:	46a1      	mov	r9, r4
 800e378:	2700      	movs	r7, #0
 800e37a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e37e:	f8d9 3000 	ldr.w	r3, [r9]
 800e382:	fa1f fb82 	uxth.w	fp, r2
 800e386:	b29b      	uxth	r3, r3
 800e388:	fb0a 330b 	mla	r3, sl, fp, r3
 800e38c:	443b      	add	r3, r7
 800e38e:	f8d9 7000 	ldr.w	r7, [r9]
 800e392:	0c12      	lsrs	r2, r2, #16
 800e394:	0c3f      	lsrs	r7, r7, #16
 800e396:	fb0a 7202 	mla	r2, sl, r2, r7
 800e39a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3a4:	4565      	cmp	r5, ip
 800e3a6:	f849 3b04 	str.w	r3, [r9], #4
 800e3aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e3ae:	d8e4      	bhi.n	800e37a <__multiply+0xaa>
 800e3b0:	9b01      	ldr	r3, [sp, #4]
 800e3b2:	50e7      	str	r7, [r4, r3]
 800e3b4:	9b03      	ldr	r3, [sp, #12]
 800e3b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3ba:	3104      	adds	r1, #4
 800e3bc:	f1b9 0f00 	cmp.w	r9, #0
 800e3c0:	d020      	beq.n	800e404 <__multiply+0x134>
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	4647      	mov	r7, r8
 800e3c6:	46a4      	mov	ip, r4
 800e3c8:	f04f 0a00 	mov.w	sl, #0
 800e3cc:	f8b7 b000 	ldrh.w	fp, [r7]
 800e3d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e3d4:	fb09 220b 	mla	r2, r9, fp, r2
 800e3d8:	4452      	add	r2, sl
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3e0:	f84c 3b04 	str.w	r3, [ip], #4
 800e3e4:	f857 3b04 	ldr.w	r3, [r7], #4
 800e3e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3ec:	f8bc 3000 	ldrh.w	r3, [ip]
 800e3f0:	fb09 330a 	mla	r3, r9, sl, r3
 800e3f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e3f8:	42bd      	cmp	r5, r7
 800e3fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3fe:	d8e5      	bhi.n	800e3cc <__multiply+0xfc>
 800e400:	9a01      	ldr	r2, [sp, #4]
 800e402:	50a3      	str	r3, [r4, r2]
 800e404:	3404      	adds	r4, #4
 800e406:	e79f      	b.n	800e348 <__multiply+0x78>
 800e408:	3e01      	subs	r6, #1
 800e40a:	e7a1      	b.n	800e350 <__multiply+0x80>
 800e40c:	0800f070 	.word	0x0800f070
 800e410:	0800f081 	.word	0x0800f081

0800e414 <__pow5mult>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4615      	mov	r5, r2
 800e41a:	f012 0203 	ands.w	r2, r2, #3
 800e41e:	4607      	mov	r7, r0
 800e420:	460e      	mov	r6, r1
 800e422:	d007      	beq.n	800e434 <__pow5mult+0x20>
 800e424:	4c25      	ldr	r4, [pc, #148]	@ (800e4bc <__pow5mult+0xa8>)
 800e426:	3a01      	subs	r2, #1
 800e428:	2300      	movs	r3, #0
 800e42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e42e:	f7ff fea7 	bl	800e180 <__multadd>
 800e432:	4606      	mov	r6, r0
 800e434:	10ad      	asrs	r5, r5, #2
 800e436:	d03d      	beq.n	800e4b4 <__pow5mult+0xa0>
 800e438:	69fc      	ldr	r4, [r7, #28]
 800e43a:	b97c      	cbnz	r4, 800e45c <__pow5mult+0x48>
 800e43c:	2010      	movs	r0, #16
 800e43e:	f7fe f8c9 	bl	800c5d4 <malloc>
 800e442:	4602      	mov	r2, r0
 800e444:	61f8      	str	r0, [r7, #28]
 800e446:	b928      	cbnz	r0, 800e454 <__pow5mult+0x40>
 800e448:	4b1d      	ldr	r3, [pc, #116]	@ (800e4c0 <__pow5mult+0xac>)
 800e44a:	481e      	ldr	r0, [pc, #120]	@ (800e4c4 <__pow5mult+0xb0>)
 800e44c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e450:	f7fe f8a2 	bl	800c598 <__assert_func>
 800e454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e458:	6004      	str	r4, [r0, #0]
 800e45a:	60c4      	str	r4, [r0, #12]
 800e45c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e464:	b94c      	cbnz	r4, 800e47a <__pow5mult+0x66>
 800e466:	f240 2171 	movw	r1, #625	@ 0x271
 800e46a:	4638      	mov	r0, r7
 800e46c:	f7ff ff1a 	bl	800e2a4 <__i2b>
 800e470:	2300      	movs	r3, #0
 800e472:	f8c8 0008 	str.w	r0, [r8, #8]
 800e476:	4604      	mov	r4, r0
 800e478:	6003      	str	r3, [r0, #0]
 800e47a:	f04f 0900 	mov.w	r9, #0
 800e47e:	07eb      	lsls	r3, r5, #31
 800e480:	d50a      	bpl.n	800e498 <__pow5mult+0x84>
 800e482:	4631      	mov	r1, r6
 800e484:	4622      	mov	r2, r4
 800e486:	4638      	mov	r0, r7
 800e488:	f7ff ff22 	bl	800e2d0 <__multiply>
 800e48c:	4631      	mov	r1, r6
 800e48e:	4680      	mov	r8, r0
 800e490:	4638      	mov	r0, r7
 800e492:	f7ff fe53 	bl	800e13c <_Bfree>
 800e496:	4646      	mov	r6, r8
 800e498:	106d      	asrs	r5, r5, #1
 800e49a:	d00b      	beq.n	800e4b4 <__pow5mult+0xa0>
 800e49c:	6820      	ldr	r0, [r4, #0]
 800e49e:	b938      	cbnz	r0, 800e4b0 <__pow5mult+0x9c>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f7ff ff13 	bl	800e2d0 <__multiply>
 800e4aa:	6020      	str	r0, [r4, #0]
 800e4ac:	f8c0 9000 	str.w	r9, [r0]
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	e7e4      	b.n	800e47e <__pow5mult+0x6a>
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ba:	bf00      	nop
 800e4bc:	0800f0f8 	.word	0x0800f0f8
 800e4c0:	0800f001 	.word	0x0800f001
 800e4c4:	0800f081 	.word	0x0800f081

0800e4c8 <__lshift>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	6849      	ldr	r1, [r1, #4]
 800e4d0:	6923      	ldr	r3, [r4, #16]
 800e4d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	4607      	mov	r7, r0
 800e4da:	4691      	mov	r9, r2
 800e4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4e0:	f108 0601 	add.w	r6, r8, #1
 800e4e4:	42b3      	cmp	r3, r6
 800e4e6:	db0b      	blt.n	800e500 <__lshift+0x38>
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff fde7 	bl	800e0bc <_Balloc>
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	b948      	cbnz	r0, 800e506 <__lshift+0x3e>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	4b28      	ldr	r3, [pc, #160]	@ (800e598 <__lshift+0xd0>)
 800e4f6:	4829      	ldr	r0, [pc, #164]	@ (800e59c <__lshift+0xd4>)
 800e4f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4fc:	f7fe f84c 	bl	800c598 <__assert_func>
 800e500:	3101      	adds	r1, #1
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	e7ee      	b.n	800e4e4 <__lshift+0x1c>
 800e506:	2300      	movs	r3, #0
 800e508:	f100 0114 	add.w	r1, r0, #20
 800e50c:	f100 0210 	add.w	r2, r0, #16
 800e510:	4618      	mov	r0, r3
 800e512:	4553      	cmp	r3, sl
 800e514:	db33      	blt.n	800e57e <__lshift+0xb6>
 800e516:	6920      	ldr	r0, [r4, #16]
 800e518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e51c:	f104 0314 	add.w	r3, r4, #20
 800e520:	f019 091f 	ands.w	r9, r9, #31
 800e524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e528:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e52c:	d02b      	beq.n	800e586 <__lshift+0xbe>
 800e52e:	f1c9 0e20 	rsb	lr, r9, #32
 800e532:	468a      	mov	sl, r1
 800e534:	2200      	movs	r2, #0
 800e536:	6818      	ldr	r0, [r3, #0]
 800e538:	fa00 f009 	lsl.w	r0, r0, r9
 800e53c:	4310      	orrs	r0, r2
 800e53e:	f84a 0b04 	str.w	r0, [sl], #4
 800e542:	f853 2b04 	ldr.w	r2, [r3], #4
 800e546:	459c      	cmp	ip, r3
 800e548:	fa22 f20e 	lsr.w	r2, r2, lr
 800e54c:	d8f3      	bhi.n	800e536 <__lshift+0x6e>
 800e54e:	ebac 0304 	sub.w	r3, ip, r4
 800e552:	3b15      	subs	r3, #21
 800e554:	f023 0303 	bic.w	r3, r3, #3
 800e558:	3304      	adds	r3, #4
 800e55a:	f104 0015 	add.w	r0, r4, #21
 800e55e:	4560      	cmp	r0, ip
 800e560:	bf88      	it	hi
 800e562:	2304      	movhi	r3, #4
 800e564:	50ca      	str	r2, [r1, r3]
 800e566:	b10a      	cbz	r2, 800e56c <__lshift+0xa4>
 800e568:	f108 0602 	add.w	r6, r8, #2
 800e56c:	3e01      	subs	r6, #1
 800e56e:	4638      	mov	r0, r7
 800e570:	612e      	str	r6, [r5, #16]
 800e572:	4621      	mov	r1, r4
 800e574:	f7ff fde2 	bl	800e13c <_Bfree>
 800e578:	4628      	mov	r0, r5
 800e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e582:	3301      	adds	r3, #1
 800e584:	e7c5      	b.n	800e512 <__lshift+0x4a>
 800e586:	3904      	subs	r1, #4
 800e588:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e590:	459c      	cmp	ip, r3
 800e592:	d8f9      	bhi.n	800e588 <__lshift+0xc0>
 800e594:	e7ea      	b.n	800e56c <__lshift+0xa4>
 800e596:	bf00      	nop
 800e598:	0800f070 	.word	0x0800f070
 800e59c:	0800f081 	.word	0x0800f081

0800e5a0 <__mcmp>:
 800e5a0:	690a      	ldr	r2, [r1, #16]
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	6900      	ldr	r0, [r0, #16]
 800e5a6:	1a80      	subs	r0, r0, r2
 800e5a8:	b530      	push	{r4, r5, lr}
 800e5aa:	d10e      	bne.n	800e5ca <__mcmp+0x2a>
 800e5ac:	3314      	adds	r3, #20
 800e5ae:	3114      	adds	r1, #20
 800e5b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5c0:	4295      	cmp	r5, r2
 800e5c2:	d003      	beq.n	800e5cc <__mcmp+0x2c>
 800e5c4:	d205      	bcs.n	800e5d2 <__mcmp+0x32>
 800e5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ca:	bd30      	pop	{r4, r5, pc}
 800e5cc:	42a3      	cmp	r3, r4
 800e5ce:	d3f3      	bcc.n	800e5b8 <__mcmp+0x18>
 800e5d0:	e7fb      	b.n	800e5ca <__mcmp+0x2a>
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	e7f9      	b.n	800e5ca <__mcmp+0x2a>
	...

0800e5d8 <__mdiff>:
 800e5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	4689      	mov	r9, r1
 800e5de:	4606      	mov	r6, r0
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4648      	mov	r0, r9
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	f7ff ffdb 	bl	800e5a0 <__mcmp>
 800e5ea:	1e05      	subs	r5, r0, #0
 800e5ec:	d112      	bne.n	800e614 <__mdiff+0x3c>
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f7ff fd63 	bl	800e0bc <_Balloc>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	b928      	cbnz	r0, 800e606 <__mdiff+0x2e>
 800e5fa:	4b3f      	ldr	r3, [pc, #252]	@ (800e6f8 <__mdiff+0x120>)
 800e5fc:	f240 2137 	movw	r1, #567	@ 0x237
 800e600:	483e      	ldr	r0, [pc, #248]	@ (800e6fc <__mdiff+0x124>)
 800e602:	f7fd ffc9 	bl	800c598 <__assert_func>
 800e606:	2301      	movs	r3, #1
 800e608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e60c:	4610      	mov	r0, r2
 800e60e:	b003      	add	sp, #12
 800e610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e614:	bfbc      	itt	lt
 800e616:	464b      	movlt	r3, r9
 800e618:	46a1      	movlt	r9, r4
 800e61a:	4630      	mov	r0, r6
 800e61c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e620:	bfba      	itte	lt
 800e622:	461c      	movlt	r4, r3
 800e624:	2501      	movlt	r5, #1
 800e626:	2500      	movge	r5, #0
 800e628:	f7ff fd48 	bl	800e0bc <_Balloc>
 800e62c:	4602      	mov	r2, r0
 800e62e:	b918      	cbnz	r0, 800e638 <__mdiff+0x60>
 800e630:	4b31      	ldr	r3, [pc, #196]	@ (800e6f8 <__mdiff+0x120>)
 800e632:	f240 2145 	movw	r1, #581	@ 0x245
 800e636:	e7e3      	b.n	800e600 <__mdiff+0x28>
 800e638:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e63c:	6926      	ldr	r6, [r4, #16]
 800e63e:	60c5      	str	r5, [r0, #12]
 800e640:	f109 0310 	add.w	r3, r9, #16
 800e644:	f109 0514 	add.w	r5, r9, #20
 800e648:	f104 0e14 	add.w	lr, r4, #20
 800e64c:	f100 0b14 	add.w	fp, r0, #20
 800e650:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e654:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	46d9      	mov	r9, fp
 800e65c:	f04f 0c00 	mov.w	ip, #0
 800e660:	9b01      	ldr	r3, [sp, #4]
 800e662:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e666:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e66a:	9301      	str	r3, [sp, #4]
 800e66c:	fa1f f38a 	uxth.w	r3, sl
 800e670:	4619      	mov	r1, r3
 800e672:	b283      	uxth	r3, r0
 800e674:	1acb      	subs	r3, r1, r3
 800e676:	0c00      	lsrs	r0, r0, #16
 800e678:	4463      	add	r3, ip
 800e67a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e67e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e682:	b29b      	uxth	r3, r3
 800e684:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e688:	4576      	cmp	r6, lr
 800e68a:	f849 3b04 	str.w	r3, [r9], #4
 800e68e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e692:	d8e5      	bhi.n	800e660 <__mdiff+0x88>
 800e694:	1b33      	subs	r3, r6, r4
 800e696:	3b15      	subs	r3, #21
 800e698:	f023 0303 	bic.w	r3, r3, #3
 800e69c:	3415      	adds	r4, #21
 800e69e:	3304      	adds	r3, #4
 800e6a0:	42a6      	cmp	r6, r4
 800e6a2:	bf38      	it	cc
 800e6a4:	2304      	movcc	r3, #4
 800e6a6:	441d      	add	r5, r3
 800e6a8:	445b      	add	r3, fp
 800e6aa:	461e      	mov	r6, r3
 800e6ac:	462c      	mov	r4, r5
 800e6ae:	4544      	cmp	r4, r8
 800e6b0:	d30e      	bcc.n	800e6d0 <__mdiff+0xf8>
 800e6b2:	f108 0103 	add.w	r1, r8, #3
 800e6b6:	1b49      	subs	r1, r1, r5
 800e6b8:	f021 0103 	bic.w	r1, r1, #3
 800e6bc:	3d03      	subs	r5, #3
 800e6be:	45a8      	cmp	r8, r5
 800e6c0:	bf38      	it	cc
 800e6c2:	2100      	movcc	r1, #0
 800e6c4:	440b      	add	r3, r1
 800e6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6ca:	b191      	cbz	r1, 800e6f2 <__mdiff+0x11a>
 800e6cc:	6117      	str	r7, [r2, #16]
 800e6ce:	e79d      	b.n	800e60c <__mdiff+0x34>
 800e6d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6d4:	46e6      	mov	lr, ip
 800e6d6:	0c08      	lsrs	r0, r1, #16
 800e6d8:	fa1c fc81 	uxtah	ip, ip, r1
 800e6dc:	4471      	add	r1, lr
 800e6de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6e2:	b289      	uxth	r1, r1
 800e6e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6e8:	f846 1b04 	str.w	r1, [r6], #4
 800e6ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6f0:	e7dd      	b.n	800e6ae <__mdiff+0xd6>
 800e6f2:	3f01      	subs	r7, #1
 800e6f4:	e7e7      	b.n	800e6c6 <__mdiff+0xee>
 800e6f6:	bf00      	nop
 800e6f8:	0800f070 	.word	0x0800f070
 800e6fc:	0800f081 	.word	0x0800f081

0800e700 <__d2b>:
 800e700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e704:	460f      	mov	r7, r1
 800e706:	2101      	movs	r1, #1
 800e708:	ec59 8b10 	vmov	r8, r9, d0
 800e70c:	4616      	mov	r6, r2
 800e70e:	f7ff fcd5 	bl	800e0bc <_Balloc>
 800e712:	4604      	mov	r4, r0
 800e714:	b930      	cbnz	r0, 800e724 <__d2b+0x24>
 800e716:	4602      	mov	r2, r0
 800e718:	4b23      	ldr	r3, [pc, #140]	@ (800e7a8 <__d2b+0xa8>)
 800e71a:	4824      	ldr	r0, [pc, #144]	@ (800e7ac <__d2b+0xac>)
 800e71c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e720:	f7fd ff3a 	bl	800c598 <__assert_func>
 800e724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e72c:	b10d      	cbz	r5, 800e732 <__d2b+0x32>
 800e72e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	f1b8 0300 	subs.w	r3, r8, #0
 800e738:	d023      	beq.n	800e782 <__d2b+0x82>
 800e73a:	4668      	mov	r0, sp
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	f7ff fd84 	bl	800e24a <__lo0bits>
 800e742:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e746:	b1d0      	cbz	r0, 800e77e <__d2b+0x7e>
 800e748:	f1c0 0320 	rsb	r3, r0, #32
 800e74c:	fa02 f303 	lsl.w	r3, r2, r3
 800e750:	430b      	orrs	r3, r1
 800e752:	40c2      	lsrs	r2, r0
 800e754:	6163      	str	r3, [r4, #20]
 800e756:	9201      	str	r2, [sp, #4]
 800e758:	9b01      	ldr	r3, [sp, #4]
 800e75a:	61a3      	str	r3, [r4, #24]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bf0c      	ite	eq
 800e760:	2201      	moveq	r2, #1
 800e762:	2202      	movne	r2, #2
 800e764:	6122      	str	r2, [r4, #16]
 800e766:	b1a5      	cbz	r5, 800e792 <__d2b+0x92>
 800e768:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e76c:	4405      	add	r5, r0
 800e76e:	603d      	str	r5, [r7, #0]
 800e770:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e774:	6030      	str	r0, [r6, #0]
 800e776:	4620      	mov	r0, r4
 800e778:	b003      	add	sp, #12
 800e77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e77e:	6161      	str	r1, [r4, #20]
 800e780:	e7ea      	b.n	800e758 <__d2b+0x58>
 800e782:	a801      	add	r0, sp, #4
 800e784:	f7ff fd61 	bl	800e24a <__lo0bits>
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	6163      	str	r3, [r4, #20]
 800e78c:	3020      	adds	r0, #32
 800e78e:	2201      	movs	r2, #1
 800e790:	e7e8      	b.n	800e764 <__d2b+0x64>
 800e792:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e796:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e79a:	6038      	str	r0, [r7, #0]
 800e79c:	6918      	ldr	r0, [r3, #16]
 800e79e:	f7ff fd35 	bl	800e20c <__hi0bits>
 800e7a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7a6:	e7e5      	b.n	800e774 <__d2b+0x74>
 800e7a8:	0800f070 	.word	0x0800f070
 800e7ac:	0800f081 	.word	0x0800f081

0800e7b0 <__sfputc_r>:
 800e7b0:	6893      	ldr	r3, [r2, #8]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	b410      	push	{r4}
 800e7b8:	6093      	str	r3, [r2, #8]
 800e7ba:	da08      	bge.n	800e7ce <__sfputc_r+0x1e>
 800e7bc:	6994      	ldr	r4, [r2, #24]
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	db01      	blt.n	800e7c6 <__sfputc_r+0x16>
 800e7c2:	290a      	cmp	r1, #10
 800e7c4:	d103      	bne.n	800e7ce <__sfputc_r+0x1e>
 800e7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ca:	f000 b9df 	b.w	800eb8c <__swbuf_r>
 800e7ce:	6813      	ldr	r3, [r2, #0]
 800e7d0:	1c58      	adds	r0, r3, #1
 800e7d2:	6010      	str	r0, [r2, #0]
 800e7d4:	7019      	strb	r1, [r3, #0]
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <__sfputs_r>:
 800e7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	460f      	mov	r7, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	18d5      	adds	r5, r2, r3
 800e7e8:	42ac      	cmp	r4, r5
 800e7ea:	d101      	bne.n	800e7f0 <__sfputs_r+0x12>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	e007      	b.n	800e800 <__sfputs_r+0x22>
 800e7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f4:	463a      	mov	r2, r7
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f7ff ffda 	bl	800e7b0 <__sfputc_r>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d1f3      	bne.n	800e7e8 <__sfputs_r+0xa>
 800e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e804 <_vfiprintf_r>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	460d      	mov	r5, r1
 800e80a:	b09d      	sub	sp, #116	@ 0x74
 800e80c:	4614      	mov	r4, r2
 800e80e:	4698      	mov	r8, r3
 800e810:	4606      	mov	r6, r0
 800e812:	b118      	cbz	r0, 800e81c <_vfiprintf_r+0x18>
 800e814:	6a03      	ldr	r3, [r0, #32]
 800e816:	b90b      	cbnz	r3, 800e81c <_vfiprintf_r+0x18>
 800e818:	f7fe fc7c 	bl	800d114 <__sinit>
 800e81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e81e:	07d9      	lsls	r1, r3, #31
 800e820:	d405      	bmi.n	800e82e <_vfiprintf_r+0x2a>
 800e822:	89ab      	ldrh	r3, [r5, #12]
 800e824:	059a      	lsls	r2, r3, #22
 800e826:	d402      	bmi.n	800e82e <_vfiprintf_r+0x2a>
 800e828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e82a:	f7fe fd8c 	bl	800d346 <__retarget_lock_acquire_recursive>
 800e82e:	89ab      	ldrh	r3, [r5, #12]
 800e830:	071b      	lsls	r3, r3, #28
 800e832:	d501      	bpl.n	800e838 <_vfiprintf_r+0x34>
 800e834:	692b      	ldr	r3, [r5, #16]
 800e836:	b99b      	cbnz	r3, 800e860 <_vfiprintf_r+0x5c>
 800e838:	4629      	mov	r1, r5
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f9e4 	bl	800ec08 <__swsetup_r>
 800e840:	b170      	cbz	r0, 800e860 <_vfiprintf_r+0x5c>
 800e842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e844:	07dc      	lsls	r4, r3, #31
 800e846:	d504      	bpl.n	800e852 <_vfiprintf_r+0x4e>
 800e848:	f04f 30ff 	mov.w	r0, #4294967295
 800e84c:	b01d      	add	sp, #116	@ 0x74
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e852:	89ab      	ldrh	r3, [r5, #12]
 800e854:	0598      	lsls	r0, r3, #22
 800e856:	d4f7      	bmi.n	800e848 <_vfiprintf_r+0x44>
 800e858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e85a:	f7fe fd75 	bl	800d348 <__retarget_lock_release_recursive>
 800e85e:	e7f3      	b.n	800e848 <_vfiprintf_r+0x44>
 800e860:	2300      	movs	r3, #0
 800e862:	9309      	str	r3, [sp, #36]	@ 0x24
 800e864:	2320      	movs	r3, #32
 800e866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e86e:	2330      	movs	r3, #48	@ 0x30
 800e870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea20 <_vfiprintf_r+0x21c>
 800e874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e878:	f04f 0901 	mov.w	r9, #1
 800e87c:	4623      	mov	r3, r4
 800e87e:	469a      	mov	sl, r3
 800e880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e884:	b10a      	cbz	r2, 800e88a <_vfiprintf_r+0x86>
 800e886:	2a25      	cmp	r2, #37	@ 0x25
 800e888:	d1f9      	bne.n	800e87e <_vfiprintf_r+0x7a>
 800e88a:	ebba 0b04 	subs.w	fp, sl, r4
 800e88e:	d00b      	beq.n	800e8a8 <_vfiprintf_r+0xa4>
 800e890:	465b      	mov	r3, fp
 800e892:	4622      	mov	r2, r4
 800e894:	4629      	mov	r1, r5
 800e896:	4630      	mov	r0, r6
 800e898:	f7ff ffa1 	bl	800e7de <__sfputs_r>
 800e89c:	3001      	adds	r0, #1
 800e89e:	f000 80a7 	beq.w	800e9f0 <_vfiprintf_r+0x1ec>
 800e8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a4:	445a      	add	r2, fp
 800e8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 809f 	beq.w	800e9f0 <_vfiprintf_r+0x1ec>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8bc:	f10a 0a01 	add.w	sl, sl, #1
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	9307      	str	r3, [sp, #28]
 800e8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8ca:	4654      	mov	r4, sl
 800e8cc:	2205      	movs	r2, #5
 800e8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d2:	4853      	ldr	r0, [pc, #332]	@ (800ea20 <_vfiprintf_r+0x21c>)
 800e8d4:	f7f1 fc7c 	bl	80001d0 <memchr>
 800e8d8:	9a04      	ldr	r2, [sp, #16]
 800e8da:	b9d8      	cbnz	r0, 800e914 <_vfiprintf_r+0x110>
 800e8dc:	06d1      	lsls	r1, r2, #27
 800e8de:	bf44      	itt	mi
 800e8e0:	2320      	movmi	r3, #32
 800e8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e6:	0713      	lsls	r3, r2, #28
 800e8e8:	bf44      	itt	mi
 800e8ea:	232b      	movmi	r3, #43	@ 0x2b
 800e8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f6:	d015      	beq.n	800e924 <_vfiprintf_r+0x120>
 800e8f8:	9a07      	ldr	r2, [sp, #28]
 800e8fa:	4654      	mov	r4, sl
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	f04f 0c0a 	mov.w	ip, #10
 800e902:	4621      	mov	r1, r4
 800e904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e908:	3b30      	subs	r3, #48	@ 0x30
 800e90a:	2b09      	cmp	r3, #9
 800e90c:	d94b      	bls.n	800e9a6 <_vfiprintf_r+0x1a2>
 800e90e:	b1b0      	cbz	r0, 800e93e <_vfiprintf_r+0x13a>
 800e910:	9207      	str	r2, [sp, #28]
 800e912:	e014      	b.n	800e93e <_vfiprintf_r+0x13a>
 800e914:	eba0 0308 	sub.w	r3, r0, r8
 800e918:	fa09 f303 	lsl.w	r3, r9, r3
 800e91c:	4313      	orrs	r3, r2
 800e91e:	9304      	str	r3, [sp, #16]
 800e920:	46a2      	mov	sl, r4
 800e922:	e7d2      	b.n	800e8ca <_vfiprintf_r+0xc6>
 800e924:	9b03      	ldr	r3, [sp, #12]
 800e926:	1d19      	adds	r1, r3, #4
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	9103      	str	r1, [sp, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	bfbb      	ittet	lt
 800e930:	425b      	neglt	r3, r3
 800e932:	f042 0202 	orrlt.w	r2, r2, #2
 800e936:	9307      	strge	r3, [sp, #28]
 800e938:	9307      	strlt	r3, [sp, #28]
 800e93a:	bfb8      	it	lt
 800e93c:	9204      	strlt	r2, [sp, #16]
 800e93e:	7823      	ldrb	r3, [r4, #0]
 800e940:	2b2e      	cmp	r3, #46	@ 0x2e
 800e942:	d10a      	bne.n	800e95a <_vfiprintf_r+0x156>
 800e944:	7863      	ldrb	r3, [r4, #1]
 800e946:	2b2a      	cmp	r3, #42	@ 0x2a
 800e948:	d132      	bne.n	800e9b0 <_vfiprintf_r+0x1ac>
 800e94a:	9b03      	ldr	r3, [sp, #12]
 800e94c:	1d1a      	adds	r2, r3, #4
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	9203      	str	r2, [sp, #12]
 800e952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e956:	3402      	adds	r4, #2
 800e958:	9305      	str	r3, [sp, #20]
 800e95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea30 <_vfiprintf_r+0x22c>
 800e95e:	7821      	ldrb	r1, [r4, #0]
 800e960:	2203      	movs	r2, #3
 800e962:	4650      	mov	r0, sl
 800e964:	f7f1 fc34 	bl	80001d0 <memchr>
 800e968:	b138      	cbz	r0, 800e97a <_vfiprintf_r+0x176>
 800e96a:	9b04      	ldr	r3, [sp, #16]
 800e96c:	eba0 000a 	sub.w	r0, r0, sl
 800e970:	2240      	movs	r2, #64	@ 0x40
 800e972:	4082      	lsls	r2, r0
 800e974:	4313      	orrs	r3, r2
 800e976:	3401      	adds	r4, #1
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e97e:	4829      	ldr	r0, [pc, #164]	@ (800ea24 <_vfiprintf_r+0x220>)
 800e980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e984:	2206      	movs	r2, #6
 800e986:	f7f1 fc23 	bl	80001d0 <memchr>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d03f      	beq.n	800ea0e <_vfiprintf_r+0x20a>
 800e98e:	4b26      	ldr	r3, [pc, #152]	@ (800ea28 <_vfiprintf_r+0x224>)
 800e990:	bb1b      	cbnz	r3, 800e9da <_vfiprintf_r+0x1d6>
 800e992:	9b03      	ldr	r3, [sp, #12]
 800e994:	3307      	adds	r3, #7
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	3308      	adds	r3, #8
 800e99c:	9303      	str	r3, [sp, #12]
 800e99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a0:	443b      	add	r3, r7
 800e9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9a4:	e76a      	b.n	800e87c <_vfiprintf_r+0x78>
 800e9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	2001      	movs	r0, #1
 800e9ae:	e7a8      	b.n	800e902 <_vfiprintf_r+0xfe>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	3401      	adds	r4, #1
 800e9b4:	9305      	str	r3, [sp, #20]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	f04f 0c0a 	mov.w	ip, #10
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9c2:	3a30      	subs	r2, #48	@ 0x30
 800e9c4:	2a09      	cmp	r2, #9
 800e9c6:	d903      	bls.n	800e9d0 <_vfiprintf_r+0x1cc>
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0c6      	beq.n	800e95a <_vfiprintf_r+0x156>
 800e9cc:	9105      	str	r1, [sp, #20]
 800e9ce:	e7c4      	b.n	800e95a <_vfiprintf_r+0x156>
 800e9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e7f0      	b.n	800e9bc <_vfiprintf_r+0x1b8>
 800e9da:	ab03      	add	r3, sp, #12
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ea2c <_vfiprintf_r+0x228>)
 800e9e2:	a904      	add	r1, sp, #16
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f7fd ff53 	bl	800c890 <_printf_float>
 800e9ea:	4607      	mov	r7, r0
 800e9ec:	1c78      	adds	r0, r7, #1
 800e9ee:	d1d6      	bne.n	800e99e <_vfiprintf_r+0x19a>
 800e9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f2:	07d9      	lsls	r1, r3, #31
 800e9f4:	d405      	bmi.n	800ea02 <_vfiprintf_r+0x1fe>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	059a      	lsls	r2, r3, #22
 800e9fa:	d402      	bmi.n	800ea02 <_vfiprintf_r+0x1fe>
 800e9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9fe:	f7fe fca3 	bl	800d348 <__retarget_lock_release_recursive>
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	065b      	lsls	r3, r3, #25
 800ea06:	f53f af1f 	bmi.w	800e848 <_vfiprintf_r+0x44>
 800ea0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea0c:	e71e      	b.n	800e84c <_vfiprintf_r+0x48>
 800ea0e:	ab03      	add	r3, sp, #12
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	462a      	mov	r2, r5
 800ea14:	4b05      	ldr	r3, [pc, #20]	@ (800ea2c <_vfiprintf_r+0x228>)
 800ea16:	a904      	add	r1, sp, #16
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f7fe f9d1 	bl	800cdc0 <_printf_i>
 800ea1e:	e7e4      	b.n	800e9ea <_vfiprintf_r+0x1e6>
 800ea20:	0800f0da 	.word	0x0800f0da
 800ea24:	0800f0e4 	.word	0x0800f0e4
 800ea28:	0800c891 	.word	0x0800c891
 800ea2c:	0800e7df 	.word	0x0800e7df
 800ea30:	0800f0e0 	.word	0x0800f0e0

0800ea34 <__sflush_r>:
 800ea34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	0716      	lsls	r6, r2, #28
 800ea3e:	4605      	mov	r5, r0
 800ea40:	460c      	mov	r4, r1
 800ea42:	d454      	bmi.n	800eaee <__sflush_r+0xba>
 800ea44:	684b      	ldr	r3, [r1, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dc02      	bgt.n	800ea50 <__sflush_r+0x1c>
 800ea4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	dd48      	ble.n	800eae2 <__sflush_r+0xae>
 800ea50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea52:	2e00      	cmp	r6, #0
 800ea54:	d045      	beq.n	800eae2 <__sflush_r+0xae>
 800ea56:	2300      	movs	r3, #0
 800ea58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea5c:	682f      	ldr	r7, [r5, #0]
 800ea5e:	6a21      	ldr	r1, [r4, #32]
 800ea60:	602b      	str	r3, [r5, #0]
 800ea62:	d030      	beq.n	800eac6 <__sflush_r+0x92>
 800ea64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea66:	89a3      	ldrh	r3, [r4, #12]
 800ea68:	0759      	lsls	r1, r3, #29
 800ea6a:	d505      	bpl.n	800ea78 <__sflush_r+0x44>
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea72:	b10b      	cbz	r3, 800ea78 <__sflush_r+0x44>
 800ea74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	2300      	movs	r3, #0
 800ea7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea7c:	6a21      	ldr	r1, [r4, #32]
 800ea7e:	4628      	mov	r0, r5
 800ea80:	47b0      	blx	r6
 800ea82:	1c43      	adds	r3, r0, #1
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	d106      	bne.n	800ea96 <__sflush_r+0x62>
 800ea88:	6829      	ldr	r1, [r5, #0]
 800ea8a:	291d      	cmp	r1, #29
 800ea8c:	d82b      	bhi.n	800eae6 <__sflush_r+0xb2>
 800ea8e:	4a2a      	ldr	r2, [pc, #168]	@ (800eb38 <__sflush_r+0x104>)
 800ea90:	40ca      	lsrs	r2, r1
 800ea92:	07d6      	lsls	r6, r2, #31
 800ea94:	d527      	bpl.n	800eae6 <__sflush_r+0xb2>
 800ea96:	2200      	movs	r2, #0
 800ea98:	6062      	str	r2, [r4, #4]
 800ea9a:	04d9      	lsls	r1, r3, #19
 800ea9c:	6922      	ldr	r2, [r4, #16]
 800ea9e:	6022      	str	r2, [r4, #0]
 800eaa0:	d504      	bpl.n	800eaac <__sflush_r+0x78>
 800eaa2:	1c42      	adds	r2, r0, #1
 800eaa4:	d101      	bne.n	800eaaa <__sflush_r+0x76>
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	b903      	cbnz	r3, 800eaac <__sflush_r+0x78>
 800eaaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800eaac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaae:	602f      	str	r7, [r5, #0]
 800eab0:	b1b9      	cbz	r1, 800eae2 <__sflush_r+0xae>
 800eab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eab6:	4299      	cmp	r1, r3
 800eab8:	d002      	beq.n	800eac0 <__sflush_r+0x8c>
 800eaba:	4628      	mov	r0, r5
 800eabc:	f7ff fab4 	bl	800e028 <_free_r>
 800eac0:	2300      	movs	r3, #0
 800eac2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eac4:	e00d      	b.n	800eae2 <__sflush_r+0xae>
 800eac6:	2301      	movs	r3, #1
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b0      	blx	r6
 800eacc:	4602      	mov	r2, r0
 800eace:	1c50      	adds	r0, r2, #1
 800ead0:	d1c9      	bne.n	800ea66 <__sflush_r+0x32>
 800ead2:	682b      	ldr	r3, [r5, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d0c6      	beq.n	800ea66 <__sflush_r+0x32>
 800ead8:	2b1d      	cmp	r3, #29
 800eada:	d001      	beq.n	800eae0 <__sflush_r+0xac>
 800eadc:	2b16      	cmp	r3, #22
 800eade:	d11e      	bne.n	800eb1e <__sflush_r+0xea>
 800eae0:	602f      	str	r7, [r5, #0]
 800eae2:	2000      	movs	r0, #0
 800eae4:	e022      	b.n	800eb2c <__sflush_r+0xf8>
 800eae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaea:	b21b      	sxth	r3, r3
 800eaec:	e01b      	b.n	800eb26 <__sflush_r+0xf2>
 800eaee:	690f      	ldr	r7, [r1, #16]
 800eaf0:	2f00      	cmp	r7, #0
 800eaf2:	d0f6      	beq.n	800eae2 <__sflush_r+0xae>
 800eaf4:	0793      	lsls	r3, r2, #30
 800eaf6:	680e      	ldr	r6, [r1, #0]
 800eaf8:	bf08      	it	eq
 800eafa:	694b      	ldreq	r3, [r1, #20]
 800eafc:	600f      	str	r7, [r1, #0]
 800eafe:	bf18      	it	ne
 800eb00:	2300      	movne	r3, #0
 800eb02:	eba6 0807 	sub.w	r8, r6, r7
 800eb06:	608b      	str	r3, [r1, #8]
 800eb08:	f1b8 0f00 	cmp.w	r8, #0
 800eb0c:	dde9      	ble.n	800eae2 <__sflush_r+0xae>
 800eb0e:	6a21      	ldr	r1, [r4, #32]
 800eb10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb12:	4643      	mov	r3, r8
 800eb14:	463a      	mov	r2, r7
 800eb16:	4628      	mov	r0, r5
 800eb18:	47b0      	blx	r6
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	dc08      	bgt.n	800eb30 <__sflush_r+0xfc>
 800eb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb30:	4407      	add	r7, r0
 800eb32:	eba8 0800 	sub.w	r8, r8, r0
 800eb36:	e7e7      	b.n	800eb08 <__sflush_r+0xd4>
 800eb38:	20400001 	.word	0x20400001

0800eb3c <_fflush_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	690b      	ldr	r3, [r1, #16]
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	b913      	cbnz	r3, 800eb4c <_fflush_r+0x10>
 800eb46:	2500      	movs	r5, #0
 800eb48:	4628      	mov	r0, r5
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	b118      	cbz	r0, 800eb56 <_fflush_r+0x1a>
 800eb4e:	6a03      	ldr	r3, [r0, #32]
 800eb50:	b90b      	cbnz	r3, 800eb56 <_fflush_r+0x1a>
 800eb52:	f7fe fadf 	bl	800d114 <__sinit>
 800eb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d0f3      	beq.n	800eb46 <_fflush_r+0xa>
 800eb5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb60:	07d0      	lsls	r0, r2, #31
 800eb62:	d404      	bmi.n	800eb6e <_fflush_r+0x32>
 800eb64:	0599      	lsls	r1, r3, #22
 800eb66:	d402      	bmi.n	800eb6e <_fflush_r+0x32>
 800eb68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb6a:	f7fe fbec 	bl	800d346 <__retarget_lock_acquire_recursive>
 800eb6e:	4628      	mov	r0, r5
 800eb70:	4621      	mov	r1, r4
 800eb72:	f7ff ff5f 	bl	800ea34 <__sflush_r>
 800eb76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb78:	07da      	lsls	r2, r3, #31
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	d4e4      	bmi.n	800eb48 <_fflush_r+0xc>
 800eb7e:	89a3      	ldrh	r3, [r4, #12]
 800eb80:	059b      	lsls	r3, r3, #22
 800eb82:	d4e1      	bmi.n	800eb48 <_fflush_r+0xc>
 800eb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb86:	f7fe fbdf 	bl	800d348 <__retarget_lock_release_recursive>
 800eb8a:	e7dd      	b.n	800eb48 <_fflush_r+0xc>

0800eb8c <__swbuf_r>:
 800eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8e:	460e      	mov	r6, r1
 800eb90:	4614      	mov	r4, r2
 800eb92:	4605      	mov	r5, r0
 800eb94:	b118      	cbz	r0, 800eb9e <__swbuf_r+0x12>
 800eb96:	6a03      	ldr	r3, [r0, #32]
 800eb98:	b90b      	cbnz	r3, 800eb9e <__swbuf_r+0x12>
 800eb9a:	f7fe fabb 	bl	800d114 <__sinit>
 800eb9e:	69a3      	ldr	r3, [r4, #24]
 800eba0:	60a3      	str	r3, [r4, #8]
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	071a      	lsls	r2, r3, #28
 800eba6:	d501      	bpl.n	800ebac <__swbuf_r+0x20>
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	b943      	cbnz	r3, 800ebbe <__swbuf_r+0x32>
 800ebac:	4621      	mov	r1, r4
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f000 f82a 	bl	800ec08 <__swsetup_r>
 800ebb4:	b118      	cbz	r0, 800ebbe <__swbuf_r+0x32>
 800ebb6:	f04f 37ff 	mov.w	r7, #4294967295
 800ebba:	4638      	mov	r0, r7
 800ebbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	6922      	ldr	r2, [r4, #16]
 800ebc2:	1a98      	subs	r0, r3, r2
 800ebc4:	6963      	ldr	r3, [r4, #20]
 800ebc6:	b2f6      	uxtb	r6, r6
 800ebc8:	4283      	cmp	r3, r0
 800ebca:	4637      	mov	r7, r6
 800ebcc:	dc05      	bgt.n	800ebda <__swbuf_r+0x4e>
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f7ff ffb3 	bl	800eb3c <_fflush_r>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d1ed      	bne.n	800ebb6 <__swbuf_r+0x2a>
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	1c5a      	adds	r2, r3, #1
 800ebe4:	6022      	str	r2, [r4, #0]
 800ebe6:	701e      	strb	r6, [r3, #0]
 800ebe8:	6962      	ldr	r2, [r4, #20]
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d004      	beq.n	800ebfa <__swbuf_r+0x6e>
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	07db      	lsls	r3, r3, #31
 800ebf4:	d5e1      	bpl.n	800ebba <__swbuf_r+0x2e>
 800ebf6:	2e0a      	cmp	r6, #10
 800ebf8:	d1df      	bne.n	800ebba <__swbuf_r+0x2e>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7ff ff9d 	bl	800eb3c <_fflush_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d0d9      	beq.n	800ebba <__swbuf_r+0x2e>
 800ec06:	e7d6      	b.n	800ebb6 <__swbuf_r+0x2a>

0800ec08 <__swsetup_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4b29      	ldr	r3, [pc, #164]	@ (800ecb0 <__swsetup_r+0xa8>)
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	6818      	ldr	r0, [r3, #0]
 800ec10:	460c      	mov	r4, r1
 800ec12:	b118      	cbz	r0, 800ec1c <__swsetup_r+0x14>
 800ec14:	6a03      	ldr	r3, [r0, #32]
 800ec16:	b90b      	cbnz	r3, 800ec1c <__swsetup_r+0x14>
 800ec18:	f7fe fa7c 	bl	800d114 <__sinit>
 800ec1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec20:	0719      	lsls	r1, r3, #28
 800ec22:	d422      	bmi.n	800ec6a <__swsetup_r+0x62>
 800ec24:	06da      	lsls	r2, r3, #27
 800ec26:	d407      	bmi.n	800ec38 <__swsetup_r+0x30>
 800ec28:	2209      	movs	r2, #9
 800ec2a:	602a      	str	r2, [r5, #0]
 800ec2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec30:	81a3      	strh	r3, [r4, #12]
 800ec32:	f04f 30ff 	mov.w	r0, #4294967295
 800ec36:	e033      	b.n	800eca0 <__swsetup_r+0x98>
 800ec38:	0758      	lsls	r0, r3, #29
 800ec3a:	d512      	bpl.n	800ec62 <__swsetup_r+0x5a>
 800ec3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec3e:	b141      	cbz	r1, 800ec52 <__swsetup_r+0x4a>
 800ec40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec44:	4299      	cmp	r1, r3
 800ec46:	d002      	beq.n	800ec4e <__swsetup_r+0x46>
 800ec48:	4628      	mov	r0, r5
 800ec4a:	f7ff f9ed 	bl	800e028 <_free_r>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec58:	81a3      	strh	r3, [r4, #12]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	6063      	str	r3, [r4, #4]
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	f043 0308 	orr.w	r3, r3, #8
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	b94b      	cbnz	r3, 800ec82 <__swsetup_r+0x7a>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec78:	d003      	beq.n	800ec82 <__swsetup_r+0x7a>
 800ec7a:	4621      	mov	r1, r4
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	f000 f8b6 	bl	800edee <__smakebuf_r>
 800ec82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec86:	f013 0201 	ands.w	r2, r3, #1
 800ec8a:	d00a      	beq.n	800eca2 <__swsetup_r+0x9a>
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	60a2      	str	r2, [r4, #8]
 800ec90:	6962      	ldr	r2, [r4, #20]
 800ec92:	4252      	negs	r2, r2
 800ec94:	61a2      	str	r2, [r4, #24]
 800ec96:	6922      	ldr	r2, [r4, #16]
 800ec98:	b942      	cbnz	r2, 800ecac <__swsetup_r+0xa4>
 800ec9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec9e:	d1c5      	bne.n	800ec2c <__swsetup_r+0x24>
 800eca0:	bd38      	pop	{r3, r4, r5, pc}
 800eca2:	0799      	lsls	r1, r3, #30
 800eca4:	bf58      	it	pl
 800eca6:	6962      	ldrpl	r2, [r4, #20]
 800eca8:	60a2      	str	r2, [r4, #8]
 800ecaa:	e7f4      	b.n	800ec96 <__swsetup_r+0x8e>
 800ecac:	2000      	movs	r0, #0
 800ecae:	e7f7      	b.n	800eca0 <__swsetup_r+0x98>
 800ecb0:	20000108 	.word	0x20000108

0800ecb4 <_raise_r>:
 800ecb4:	291f      	cmp	r1, #31
 800ecb6:	b538      	push	{r3, r4, r5, lr}
 800ecb8:	4605      	mov	r5, r0
 800ecba:	460c      	mov	r4, r1
 800ecbc:	d904      	bls.n	800ecc8 <_raise_r+0x14>
 800ecbe:	2316      	movs	r3, #22
 800ecc0:	6003      	str	r3, [r0, #0]
 800ecc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
 800ecc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecca:	b112      	cbz	r2, 800ecd2 <_raise_r+0x1e>
 800eccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecd0:	b94b      	cbnz	r3, 800ece6 <_raise_r+0x32>
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	f000 f830 	bl	800ed38 <_getpid_r>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	4601      	mov	r1, r0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ece2:	f000 b817 	b.w	800ed14 <_kill_r>
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d00a      	beq.n	800ed00 <_raise_r+0x4c>
 800ecea:	1c59      	adds	r1, r3, #1
 800ecec:	d103      	bne.n	800ecf6 <_raise_r+0x42>
 800ecee:	2316      	movs	r3, #22
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	2001      	movs	r0, #1
 800ecf4:	e7e7      	b.n	800ecc6 <_raise_r+0x12>
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	4798      	blx	r3
 800ed00:	2000      	movs	r0, #0
 800ed02:	e7e0      	b.n	800ecc6 <_raise_r+0x12>

0800ed04 <raise>:
 800ed04:	4b02      	ldr	r3, [pc, #8]	@ (800ed10 <raise+0xc>)
 800ed06:	4601      	mov	r1, r0
 800ed08:	6818      	ldr	r0, [r3, #0]
 800ed0a:	f7ff bfd3 	b.w	800ecb4 <_raise_r>
 800ed0e:	bf00      	nop
 800ed10:	20000108 	.word	0x20000108

0800ed14 <_kill_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	4d07      	ldr	r5, [pc, #28]	@ (800ed34 <_kill_r+0x20>)
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	4608      	mov	r0, r1
 800ed1e:	4611      	mov	r1, r2
 800ed20:	602b      	str	r3, [r5, #0]
 800ed22:	f7f5 fd8d 	bl	8004840 <_kill>
 800ed26:	1c43      	adds	r3, r0, #1
 800ed28:	d102      	bne.n	800ed30 <_kill_r+0x1c>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	b103      	cbz	r3, 800ed30 <_kill_r+0x1c>
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	bd38      	pop	{r3, r4, r5, pc}
 800ed32:	bf00      	nop
 800ed34:	20002220 	.word	0x20002220

0800ed38 <_getpid_r>:
 800ed38:	f7f5 bd7a 	b.w	8004830 <_getpid>

0800ed3c <_calloc_r>:
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	fba1 5402 	umull	r5, r4, r1, r2
 800ed42:	b934      	cbnz	r4, 800ed52 <_calloc_r+0x16>
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7fd fc77 	bl	800c638 <_malloc_r>
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	b928      	cbnz	r0, 800ed5a <_calloc_r+0x1e>
 800ed4e:	4630      	mov	r0, r6
 800ed50:	bd70      	pop	{r4, r5, r6, pc}
 800ed52:	220c      	movs	r2, #12
 800ed54:	6002      	str	r2, [r0, #0]
 800ed56:	2600      	movs	r6, #0
 800ed58:	e7f9      	b.n	800ed4e <_calloc_r+0x12>
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	f7fe fa64 	bl	800d22a <memset>
 800ed62:	e7f4      	b.n	800ed4e <_calloc_r+0x12>

0800ed64 <__ascii_mbtowc>:
 800ed64:	b082      	sub	sp, #8
 800ed66:	b901      	cbnz	r1, 800ed6a <__ascii_mbtowc+0x6>
 800ed68:	a901      	add	r1, sp, #4
 800ed6a:	b142      	cbz	r2, 800ed7e <__ascii_mbtowc+0x1a>
 800ed6c:	b14b      	cbz	r3, 800ed82 <__ascii_mbtowc+0x1e>
 800ed6e:	7813      	ldrb	r3, [r2, #0]
 800ed70:	600b      	str	r3, [r1, #0]
 800ed72:	7812      	ldrb	r2, [r2, #0]
 800ed74:	1e10      	subs	r0, r2, #0
 800ed76:	bf18      	it	ne
 800ed78:	2001      	movne	r0, #1
 800ed7a:	b002      	add	sp, #8
 800ed7c:	4770      	bx	lr
 800ed7e:	4610      	mov	r0, r2
 800ed80:	e7fb      	b.n	800ed7a <__ascii_mbtowc+0x16>
 800ed82:	f06f 0001 	mvn.w	r0, #1
 800ed86:	e7f8      	b.n	800ed7a <__ascii_mbtowc+0x16>

0800ed88 <__ascii_wctomb>:
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	b141      	cbz	r1, 800eda0 <__ascii_wctomb+0x18>
 800ed8e:	2aff      	cmp	r2, #255	@ 0xff
 800ed90:	d904      	bls.n	800ed9c <__ascii_wctomb+0x14>
 800ed92:	228a      	movs	r2, #138	@ 0x8a
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9a:	4770      	bx	lr
 800ed9c:	700a      	strb	r2, [r1, #0]
 800ed9e:	2001      	movs	r0, #1
 800eda0:	4770      	bx	lr

0800eda2 <__swhatbuf_r>:
 800eda2:	b570      	push	{r4, r5, r6, lr}
 800eda4:	460c      	mov	r4, r1
 800eda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edaa:	2900      	cmp	r1, #0
 800edac:	b096      	sub	sp, #88	@ 0x58
 800edae:	4615      	mov	r5, r2
 800edb0:	461e      	mov	r6, r3
 800edb2:	da0d      	bge.n	800edd0 <__swhatbuf_r+0x2e>
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800edba:	f04f 0100 	mov.w	r1, #0
 800edbe:	bf14      	ite	ne
 800edc0:	2340      	movne	r3, #64	@ 0x40
 800edc2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edc6:	2000      	movs	r0, #0
 800edc8:	6031      	str	r1, [r6, #0]
 800edca:	602b      	str	r3, [r5, #0]
 800edcc:	b016      	add	sp, #88	@ 0x58
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	466a      	mov	r2, sp
 800edd2:	f000 f849 	bl	800ee68 <_fstat_r>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	dbec      	blt.n	800edb4 <__swhatbuf_r+0x12>
 800edda:	9901      	ldr	r1, [sp, #4]
 800eddc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ede0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ede4:	4259      	negs	r1, r3
 800ede6:	4159      	adcs	r1, r3
 800ede8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edec:	e7eb      	b.n	800edc6 <__swhatbuf_r+0x24>

0800edee <__smakebuf_r>:
 800edee:	898b      	ldrh	r3, [r1, #12]
 800edf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edf2:	079d      	lsls	r5, r3, #30
 800edf4:	4606      	mov	r6, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	d507      	bpl.n	800ee0a <__smakebuf_r+0x1c>
 800edfa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	6123      	str	r3, [r4, #16]
 800ee02:	2301      	movs	r3, #1
 800ee04:	6163      	str	r3, [r4, #20]
 800ee06:	b003      	add	sp, #12
 800ee08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee0a:	ab01      	add	r3, sp, #4
 800ee0c:	466a      	mov	r2, sp
 800ee0e:	f7ff ffc8 	bl	800eda2 <__swhatbuf_r>
 800ee12:	9f00      	ldr	r7, [sp, #0]
 800ee14:	4605      	mov	r5, r0
 800ee16:	4639      	mov	r1, r7
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7fd fc0d 	bl	800c638 <_malloc_r>
 800ee1e:	b948      	cbnz	r0, 800ee34 <__smakebuf_r+0x46>
 800ee20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee24:	059a      	lsls	r2, r3, #22
 800ee26:	d4ee      	bmi.n	800ee06 <__smakebuf_r+0x18>
 800ee28:	f023 0303 	bic.w	r3, r3, #3
 800ee2c:	f043 0302 	orr.w	r3, r3, #2
 800ee30:	81a3      	strh	r3, [r4, #12]
 800ee32:	e7e2      	b.n	800edfa <__smakebuf_r+0xc>
 800ee34:	89a3      	ldrh	r3, [r4, #12]
 800ee36:	6020      	str	r0, [r4, #0]
 800ee38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee3c:	81a3      	strh	r3, [r4, #12]
 800ee3e:	9b01      	ldr	r3, [sp, #4]
 800ee40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee44:	b15b      	cbz	r3, 800ee5e <__smakebuf_r+0x70>
 800ee46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f000 f81e 	bl	800ee8c <_isatty_r>
 800ee50:	b128      	cbz	r0, 800ee5e <__smakebuf_r+0x70>
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f023 0303 	bic.w	r3, r3, #3
 800ee58:	f043 0301 	orr.w	r3, r3, #1
 800ee5c:	81a3      	strh	r3, [r4, #12]
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	431d      	orrs	r5, r3
 800ee62:	81a5      	strh	r5, [r4, #12]
 800ee64:	e7cf      	b.n	800ee06 <__smakebuf_r+0x18>
	...

0800ee68 <_fstat_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	4d07      	ldr	r5, [pc, #28]	@ (800ee88 <_fstat_r+0x20>)
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	4604      	mov	r4, r0
 800ee70:	4608      	mov	r0, r1
 800ee72:	4611      	mov	r1, r2
 800ee74:	602b      	str	r3, [r5, #0]
 800ee76:	f7f5 fd27 	bl	80048c8 <_fstat>
 800ee7a:	1c43      	adds	r3, r0, #1
 800ee7c:	d102      	bne.n	800ee84 <_fstat_r+0x1c>
 800ee7e:	682b      	ldr	r3, [r5, #0]
 800ee80:	b103      	cbz	r3, 800ee84 <_fstat_r+0x1c>
 800ee82:	6023      	str	r3, [r4, #0]
 800ee84:	bd38      	pop	{r3, r4, r5, pc}
 800ee86:	bf00      	nop
 800ee88:	20002220 	.word	0x20002220

0800ee8c <_isatty_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d06      	ldr	r5, [pc, #24]	@ (800eea8 <_isatty_r+0x1c>)
 800ee90:	2300      	movs	r3, #0
 800ee92:	4604      	mov	r4, r0
 800ee94:	4608      	mov	r0, r1
 800ee96:	602b      	str	r3, [r5, #0]
 800ee98:	f7f5 fd26 	bl	80048e8 <_isatty>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d102      	bne.n	800eea6 <_isatty_r+0x1a>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	b103      	cbz	r3, 800eea6 <_isatty_r+0x1a>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	20002220 	.word	0x20002220

0800eeac <_init>:
 800eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeae:	bf00      	nop
 800eeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeb2:	bc08      	pop	{r3}
 800eeb4:	469e      	mov	lr, r3
 800eeb6:	4770      	bx	lr

0800eeb8 <_fini>:
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	bf00      	nop
 800eebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eebe:	bc08      	pop	{r3}
 800eec0:	469e      	mov	lr, r3
 800eec2:	4770      	bx	lr
