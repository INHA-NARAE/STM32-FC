
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800e9c0  0800e9c0  0000f9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edf4  0800edf4  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800edf4  0800edf4  0000fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edfc  0800edfc  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edfc  0800edfc  0000fdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee00  0800ee00  0000fe00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ee04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00002000  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022c4  200022c4  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b484  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005097  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136a  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b31a  00000000  00000000  0003355a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002151a  00000000  00000000  0005e874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8ed  00000000  00000000  0007fd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b67b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a40  00000000  00000000  0016b6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00173100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e9a8 	.word	0x0800e9a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e9a8 	.word	0x0800e9a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:

#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <BuzzerPlayNote+0x54>)
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fac7 	bl	8000504 <__aeabi_ui2d>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <BuzzerPlayNote+0x58>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4c08      	ldr	r4, [pc, #32]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8000fa2:	bf00      	nop
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	0501bd00 	.word	0x0501bd00
 8000fb4:	0800ea08 	.word	0x0800ea08

08000fb8 <BuzzerPlayInit>:

void BuzzerPlayInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f002 fedc 	bl	8003d9c <HAL_Delay>
	TIM4->PSC = 1500;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f002 fed5 	bl	8003d9c <HAL_Delay>
	TIM4->PSC = 1000;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f002 fece 	bl	8003d9c <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <BuzzerPlayInit+0x58>)
 8001006:	f7ff ff96 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000800 	.word	0x40000800

08001014 <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001020:	f7ff ff78 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001026:	2204      	movs	r2, #4
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

	for (int i=0; i<8; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00a      	b.n	8001046 <BuzzerPlayOneCycle+0x32>
		BuzzerPlayNote(i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <BuzzerPlayNote>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f002 feae 	bl	8003d9c <HAL_Delay>
	for (int i=0; i<8; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b07      	cmp	r3, #7
 800104a:	ddf1      	ble.n	8001030 <BuzzerPlayOneCycle+0x1c>
	}
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001052:	f7ff ff70 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001056:	bf00      	nop
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40000800 	.word	0x40000800

08001064 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f023 0210 	bic.w	r2, r3, #16
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d101      	bne.n	80010e8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	330c      	adds	r3, #12
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	330c      	adds	r3, #12
 8001122:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800117c:	4907      	ldr	r1, [pc, #28]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4013      	ands	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800

080011a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40023800 	.word	0x40023800

080011d0 <ICM42688_GPIO_SPI_Initialization>:

int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	@ 0x40
 80011d4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	2228      	movs	r2, #40	@ 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b fda1 	bl	800cd26 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80011f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011f8:	f7ff ffd2 	bl	80011a0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ffb7 	bl	8001170 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff ffb4 	bl	8001170 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001208:	23e0      	movs	r3, #224	@ 0xe0
 800120a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800120c:	2302      	movs	r3, #2
 800120e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800121c:	2305      	movs	r3, #5
 800121e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 8001226:	f005 ff02 	bl	800702e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800122e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001232:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001238:	2302      	movs	r3, #2
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001246:	2310      	movs	r3, #16
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001252:	230a      	movs	r3, #10
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4619      	mov	r1, r3
 800125c:	4813      	ldr	r0, [pc, #76]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800125e:	f006 f8c0 	bl	80073e2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001262:	2100      	movs	r1, #0
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001266:	f7ff ff0d 	bl	8001084 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 800126a:	2120      	movs	r1, #32
 800126c:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800126e:	f7ff ff70 	bl	8001152 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 8001272:	2320      	movs	r3, #32
 8001274:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001276:	2301      	movs	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800128c:	f005 fecf 	bl	800702e <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 8001290:	4806      	ldr	r0, [pc, #24]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001292:	f7ff fee7 	bl	8001064 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 8001296:	2120      	movs	r1, #32
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800129a:	f7ff ff4c 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	@ 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40021000 	.word	0x40021000

080012b4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012c2:	f7ff ff05 	bl	80010d0 <LL_SPI_IsActiveFlag_TXE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012d2:	f7ff ff1e 	bl	8001112 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 80012d6:	bf00      	nop
 80012d8:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012da:	f7ff fee6 	bl	80010aa <LL_SPI_IsActiveFlag_RXNE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012e6:	f7ff ff06 	bl	80010f6 <LL_SPI_ReceiveData8>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40013000 	.word	0x40013000

080012f8 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001302:	2120      	movs	r1, #32
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <ICM42688_Readbyte+0x3c>)
 8001306:	f7ff ff24 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffce 	bl	80012b4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ffcb 	bl	80012b4 <SPI1_SendByte>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001322:	2120      	movs	r1, #32
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <ICM42688_Readbyte+0x3c>)
 8001326:	f7ff ff06 	bl	8001136 <LL_GPIO_SetOutputPin>
	
	return val;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	603a      	str	r2, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	460b      	mov	r3, r1
 8001346:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 800134c:	2120      	movs	r1, #32
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <ICM42688_Readbytes+0x58>)
 8001350:	f7ff feff 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffa9 	bl	80012b4 <SPI1_SendByte>
	while(i < len)
 8001362:	e009      	b.n	8001378 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60fa      	str	r2, [r7, #12]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	18d4      	adds	r4, r2, r3
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ffa0 	bl	80012b4 <SPI1_SendByte>
 8001374:	4603      	mov	r3, r0
 8001376:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f1      	bcc.n	8001364 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 8001380:	2120      	movs	r1, #32
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <ICM42688_Readbytes+0x58>)
 8001384:	f7ff fed7 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	40021000 	.word	0x40021000

08001394 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80013a4:	2120      	movs	r1, #32
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <ICM42688_Writebyte+0x40>)
 80013a8:	f7ff fed3 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff7d 	bl	80012b4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff79 	bl	80012b4 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80013c2:	2120      	movs	r1, #32
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <ICM42688_Writebyte+0x40>)
 80013c6:	f7ff feb6 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 80013f4:	f7ff feec 	bl	80011d0 <ICM42688_GPIO_SPI_Initialization>
	
	// printf("Checking ICM42688...\n\r");
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 80013f8:	2075      	movs	r0, #117	@ 0x75
 80013fa:	f7ff ff7d 	bl	80012f8 <ICM42688_Readbyte>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b47      	cmp	r3, #71	@ 0x47
 8001406:	d00c      	beq.n	8001422 <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b47      	cmp	r3, #71	@ 0x47
 800140c:	d009      	beq.n	8001422 <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800140e:	2075      	movs	r0, #117	@ 0x75
 8001410:	f7ff ff72 	bl	80012f8 <ICM42688_Readbyte>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d001      	beq.n	8001422 <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 800141e:	2301      	movs	r3, #1
 8001420:	e02a      	b.n	8001478 <ICM42688_Initialization+0xa0>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001422:	210f      	movs	r1, #15
 8001424:	204e      	movs	r0, #78	@ 0x4e
 8001426:	f7ff ffb5 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 800142a:	2032      	movs	r0, #50	@ 0x32
 800142c:	f002 fcb6 	bl	8003d9c <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001430:	2106      	movs	r1, #6
 8001432:	204f      	movs	r0, #79	@ 0x4f
 8001434:	f7ff ffae 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001438:	2032      	movs	r0, #50	@ 0x32
 800143a:	f002 fcaf 	bl	8003d9c <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 800143e:	2100      	movs	r1, #0
 8001440:	2051      	movs	r0, #81	@ 0x51
 8001442:	f7ff ffa7 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001446:	2032      	movs	r0, #50	@ 0x32
 8001448:	f002 fca8 	bl	8003d9c <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 800144c:	2106      	movs	r1, #6
 800144e:	2050      	movs	r0, #80	@ 0x50
 8001450:	f7ff ffa0 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001454:	2032      	movs	r0, #50	@ 0x32
 8001456:	f002 fca1 	bl	8003d9c <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 800145a:	2100      	movs	r1, #0
 800145c:	2053      	movs	r0, #83	@ 0x53
 800145e:	f7ff ff99 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001462:	2032      	movs	r0, #50	@ 0x32
 8001464:	f002 fc9a 	bl	8003d9c <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 8001468:	2111      	movs	r1, #17
 800146a:	2052      	movs	r0, #82	@ 0x52
 800146c:	f7ff ff92 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	@ 0x32
 8001472:	f002 fc93 	bl	8003d9c <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 8001486:	463b      	mov	r3, r7
 8001488:	461a      	mov	r2, r3
 800148a:	210e      	movs	r1, #14
 800148c:	201f      	movs	r0, #31
 800148e:	f7ff ff53 	bl	8001338 <ICM42688_Readbytes>
//	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
//	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
//	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
//	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);

	raw_imu.temperature = (data[0] << 8) | data[1];
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	787b      	ldrb	r3, [r7, #1]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014a4:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 80014a8:	78bb      	ldrb	r3, [r7, #2]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014ba:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 80014bc:	793b      	ldrb	r3, [r7, #4]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014ce:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014e2:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 80014e4:	7a3b      	ldrb	r3, [r7, #8]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7a7b      	ldrb	r3, [r7, #9]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014f6:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 80014f8:	7abb      	ldrb	r3, [r7, #10]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 800150a:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	b21b      	sxth	r3, r3
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 800151e:	825a      	strh	r2, [r3, #18]
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003a0 	.word	0x200003a0

0800152c <Log_Send>:
#include <GCS_MAVLink/GCS_Common.h>


/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	const uint8_t code = 0xFD;
 8001532:	23fd      	movs	r3, #253	@ 0xfd
 8001534:	71fb      	strb	r3, [r7, #7]
	static uint32_t previous_time = 0;

	// 4Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 250)) return -1;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <Log_Send+0x44>)
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <Log_Send+0x48>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2bfa      	cmp	r3, #250	@ 0xfa
 8001542:	d802      	bhi.n	800154a <Log_Send+0x1e>
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e00d      	b.n	8001566 <Log_Send+0x3a>
	previous_time = system_time.time_boot_ms;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <Log_Send+0x44>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <Log_Send+0x48>)
 8001550:	6013      	str	r3, [r2, #0]

	CDC_Transmit_FS(&code, sizeof(code));
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f00a f948 	bl	800b7ec <CDC_Transmit_FS>

	Log_transmit((uint8_t *)&servo_output_raw, sizeof(servo_output_raw));
 800155c:	2125      	movs	r1, #37	@ 0x25
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <Log_Send+0x4c>)
 8001560:	f000 f80c 	bl	800157c <Log_transmit>
	// Log_transmit(&RC_channels, sizeof(RC_channels));
	// while(1 == CDC_Transmit_FS(&RC_channels, sizeof(RC_CHANNELS))) {}
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000394 	.word	0x20000394
 8001574:	200002e0 	.word	0x200002e0
 8001578:	200003c0 	.word	0x200003c0

0800157c <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(p, len);
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fcf1 	bl	8001f74 <calculate_crc>
 8001592:	4603      	mov	r3, r0
 8001594:	81fb      	strh	r3, [r7, #14]

	CDC_Transmit_FS(p, len);
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f00a f926 	bl	800b7ec <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*)&crc, sizeof(uint16_t));
 80015a0:	f107 030e 	add.w	r3, r7, #14
 80015a4:	2102      	movs	r1, #2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00a f920 	bl	800b7ec <CDC_Transmit_FS>
	return len;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <PARM_load>:
	DroneCAN = 14,
	Ghost	 = 15,
	MAVRadio = 16,
};

int PARM_load(void){
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80015be:	4b74      	ldr	r3, [pc, #464]	@ (8001790 <PARM_load+0x1d8>)
 80015c0:	607b      	str	r3, [r7, #4]
	SERVO_CH* servo_ch = parm_servo_ch;
 80015c2:	4b74      	ldr	r3, [pc, #464]	@ (8001794 <PARM_load+0x1dc>)
 80015c4:	603b      	str	r3, [r7, #0]
	PARM_rc.PROTOCOLS = (0x1<<SRXL2);
 80015c6:	4b74      	ldr	r3, [pc, #464]	@ (8001798 <PARM_load+0x1e0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	705a      	strb	r2, [r3, #1]
	PARM_rc.FS_TIMEOUT = 1.0;
 80015d4:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <PARM_load+0x1e0>)
 80015d6:	3302      	adds	r3, #2
 80015d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015dc:	601a      	str	r2, [r3, #0]
	PARM_rc.reversedMask = 0x00;
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <PARM_load+0x1e0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	719a      	strb	r2, [r3, #6]
 80015e4:	2200      	movs	r2, #0
 80015e6:	71da      	strb	r2, [r3, #7]
 80015e8:	2200      	movs	r2, #0
 80015ea:	721a      	strb	r2, [r3, #8]
 80015ec:	2200      	movs	r2, #0
 80015ee:	725a      	strb	r2, [r3, #9]

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e03f      	b.n	8001676 <PARM_load+0xbe>
	{
		PARM_rc.CHANNEL[i].MIN = 1000;
 80015f6:	4968      	ldr	r1, [pc, #416]	@ (8001798 <PARM_load+0x1e0>)
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	440b      	add	r3, r1
 8001602:	3308      	adds	r3, #8
 8001604:	2200      	movs	r2, #0
 8001606:	f062 0217 	orn	r2, r2, #23
 800160a:	709a      	strb	r2, [r3, #2]
 800160c:	2200      	movs	r2, #0
 800160e:	f042 0203 	orr.w	r2, r2, #3
 8001612:	70da      	strb	r2, [r3, #3]
		PARM_rc.CHANNEL[i].MAX = 2000;
 8001614:	4960      	ldr	r1, [pc, #384]	@ (8001798 <PARM_load+0x1e0>)
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	440b      	add	r3, r1
 8001620:	3308      	adds	r3, #8
 8001622:	2200      	movs	r2, #0
 8001624:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001628:	711a      	strb	r2, [r3, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f042 0207 	orr.w	r2, r2, #7
 8001630:	715a      	strb	r2, [r3, #5]
		PARM_rc.CHANNEL[i].TRIM = 0;
 8001632:	4959      	ldr	r1, [pc, #356]	@ (8001798 <PARM_load+0x1e0>)
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	440b      	add	r3, r1
 800163e:	3308      	adds	r3, #8
 8001640:	2200      	movs	r2, #0
 8001642:	719a      	strb	r2, [r3, #6]
 8001644:	2200      	movs	r2, #0
 8001646:	71da      	strb	r2, [r3, #7]
		PARM_rc.CHANNEL[i].DZ = 0;
 8001648:	4953      	ldr	r1, [pc, #332]	@ (8001798 <PARM_load+0x1e0>)
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	440b      	add	r3, r1
 8001654:	3310      	adds	r3, #16
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		PARM_rc.CHANNEL[i].OPTION = 0;
 800165a:	494f      	ldr	r1, [pc, #316]	@ (8001798 <PARM_load+0x1e0>)
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	440b      	add	r3, r1
 8001666:	3308      	adds	r3, #8
 8001668:	2200      	movs	r2, #0
 800166a:	725a      	strb	r2, [r3, #9]
 800166c:	2200      	movs	r2, #0
 800166e:	729a      	strb	r2, [r3, #10]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b1f      	cmp	r3, #31
 800167a:	ddbc      	ble.n	80015f6 <PARM_load+0x3e>
	}
	PARM_rc.MAP.THR = 0;
 800167c:	4b46      	ldr	r3, [pc, #280]	@ (8001798 <PARM_load+0x1e0>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	PARM_rc.MAP.ROL = 1;
 8001684:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <PARM_load+0x1e0>)
 8001686:	2201      	movs	r2, #1
 8001688:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	PARM_rc.MAP.PIT = 2;
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <PARM_load+0x1e0>)
 800168e:	2202      	movs	r2, #2
 8001690:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
	PARM_rc.MAP.YAW = 3;
 8001694:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <PARM_load+0x1e0>)
 8001696:	2203      	movs	r2, #3
 8001698:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d

	servo->AUTO_TRIM = 0;
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	7013      	strb	r3, [r2, #0]
	servo->DSHOT_ESC = 0;
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	78d3      	ldrb	r3, [r2, #3]
 80016aa:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80016ae:	70d3      	strb	r3, [r2, #3]
	servo->DSHOT_RATE = 0;
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	78d3      	ldrb	r3, [r2, #3]
 80016b4:	f023 0307 	bic.w	r3, r3, #7
 80016b8:	70d3      	strb	r3, [r2, #3]
	servo->RATE = 50;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80016c2:	705a      	strb	r2, [r3, #1]
 80016c4:	2200      	movs	r2, #0
 80016c6:	709a      	strb	r2, [r3, #2]
	servo->GPIO_MASK = 0xFF;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	711a      	strb	r2, [r3, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	715a      	strb	r2, [r3, #5]
 80016d4:	2200      	movs	r2, #0
 80016d6:	719a      	strb	r2, [r3, #6]
 80016d8:	2200      	movs	r2, #0
 80016da:	71da      	strb	r2, [r3, #7]
	servo->RC_FS_MSK = 0xFF;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f04f 32ff 	mov.w	r2, #4294967295
 80016e2:	721a      	strb	r2, [r3, #8]
 80016e4:	2200      	movs	r2, #0
 80016e6:	725a      	strb	r2, [r3, #9]
	servo->_32_ENABLE = 0;
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	7a93      	ldrb	r3, [r2, #10]
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	7293      	strb	r3, [r2, #10]

	for(int i=0; i<32; i++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	e040      	b.n	800177a <PARM_load+0x1c2>
		servo_ch[i].FUNCTION = 0;
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	71da      	strb	r2, [r3, #7]
 8001708:	2200      	movs	r2, #0
 800170a:	721a      	strb	r2, [r3, #8]
		servo_ch[i].MAX = 2000;
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	2200      	movs	r2, #0
 800171a:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 800171e:	709a      	strb	r2, [r3, #2]
 8001720:	2200      	movs	r2, #0
 8001722:	f042 0207 	orr.w	r2, r2, #7
 8001726:	70da      	strb	r2, [r3, #3]
		servo_ch[i].MIN = 1000;
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	2200      	movs	r2, #0
 8001736:	f062 0217 	orn	r2, r2, #23
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	f042 0203 	orr.w	r2, r2, #3
 8001742:	705a      	strb	r2, [r3, #1]
		servo_ch[i].TRIM = 1500;
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	2200      	movs	r2, #0
 8001752:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001756:	711a      	strb	r2, [r3, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f042 0205 	orr.w	r2, r2, #5
 800175e:	715a      	strb	r2, [r3, #5]
		servo_ch[i].REVERSED = 0;
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	441a      	add	r2, r3
 800176c:	7993      	ldrb	r3, [r2, #6]
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	7193      	strb	r3, [r2, #6]
	for(int i=0; i<32; i++){
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3301      	adds	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	ddbb      	ble.n	80016f8 <PARM_load+0x140>
	}
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200002e4 	.word	0x200002e4
 8001794:	200002f0 	.word	0x200002f0
 8001798:	2000045c 	.word	0x2000045c

0800179c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ac:	2b80      	cmp	r3, #128	@ 0x80
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_GPIO_SetOutputPin>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	619a      	str	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_GPIO_ResetOutputPin>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <RC_Initialization>:
/* Functions -----------------------------------------------------------------*/
/*
 * @brief RC 초기 설정
 */
int RC_Initialization(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 8001820:	2050      	movs	r0, #80	@ 0x50
 8001822:	f00a fc5d 	bl	800c0e0 <malloc>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <RC_Initialization+0x1c>)
 800182c:	601a      	str	r2, [r3, #0]

	SRXL2_Connect();
 800182e:	f000 f8b3 	bl	8001998 <SRXL2_Connect>
	return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000360 	.word	0x20000360

0800183c <RC_GetData>:

int RC_GetData(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	SRXL2_GetData();
 8001840:	f000 f906 	bl	8001a50 <SRXL2_GetData>
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <RC_reviceIRQ2>:
 * @retval 0 : IRQ2 처리 완료
 *
 * 모든 수신 패킷을 처리하면 RC_rxFlag를 1로 처리함.
 */
int RC_reviceIRQ2(const uint8_t data)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	if(RC_rxFlag.half_tx == 1) return 1;
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <RC_reviceIRQ2+0x48>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <RC_reviceIRQ2+0x1c>
 8001864:	2301      	movs	r3, #1
 8001866:	e011      	b.n	800188c <RC_reviceIRQ2+0x40>

	if(SRXL2_readByteIRQ2(data) == 0){
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fa82 	bl	8001d74 <SRXL2_readByteIRQ2>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <RC_reviceIRQ2+0x3e>
		RC_rxFlag.uart = 1;
 8001876:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <RC_reviceIRQ2+0x48>)
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	7013      	strb	r3, [r2, #0]
		RC_rxFlag.half_using = 0;
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <RC_reviceIRQ2+0x48>)
 8001882:	7813      	ldrb	r3, [r2, #0]
 8001884:	f023 0302 	bic.w	r3, r3, #2
 8001888:	7013      	strb	r3, [r2, #0]
	}

	return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000035c 	.word	0x2000035c

08001898 <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	LL_GPIO_SetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 80018a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018a8:	481c      	ldr	r0, [pc, #112]	@ (800191c <RC_halfDuplex_Transmit+0x84>)
 80018aa:	f7ff ff99 	bl	80017e0 <LL_GPIO_SetOutputPin>
	if(RC_rxFlag.half_using == 1) return -1;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <RC_halfDuplex_Transmit+0x88>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <RC_halfDuplex_Transmit+0x2a>
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	e028      	b.n	8001914 <RC_halfDuplex_Transmit+0x7c>

	RC_rxFlag.half_using = 1;
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <RC_halfDuplex_Transmit+0x88>)
 80018c4:	7813      	ldrb	r3, [r2, #0]
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <RC_halfDuplex_Transmit+0x88>)
 80018ce:	7813      	ldrb	r3, [r2, #0]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e011      	b.n	8001900 <RC_halfDuplex_Transmit+0x68>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 80018dc:	bf00      	nop
 80018de:	4811      	ldr	r0, [pc, #68]	@ (8001924 <RC_halfDuplex_Transmit+0x8c>)
 80018e0:	f7ff ff5c 	bl	800179c <LL_USART_IsActiveFlag_TXE>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <RC_halfDuplex_Transmit+0x46>
		LL_USART_TransmitData8(USART1, data[i]);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	480b      	ldr	r0, [pc, #44]	@ (8001924 <RC_halfDuplex_Transmit+0x8c>)
 80018f6:	f7ff ff64 	bl	80017c2 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbe9      	blt.n	80018dc <RC_halfDuplex_Transmit+0x44>
	}
	LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 8001908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190c:	4803      	ldr	r0, [pc, #12]	@ (800191c <RC_halfDuplex_Transmit+0x84>)
 800190e:	f7ff ff75 	bl	80017fc <LL_GPIO_ResetOutputPin>
	return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020c00 	.word	0x40020c00
 8001920:	2000035c 	.word	0x2000035c
 8001924:	40011000 	.word	0x40011000

08001928 <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <RC_isBufferInit+0x20>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <RC_isBufferInit+0x12>
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	e000      	b.n	800193c <RC_isBufferInit+0x14>
	return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000360 	.word	0x20000360

0800194c <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800194c:	b490      	push	{r4, r7}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4623      	mov	r3, r4
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	4603      	mov	r3, r0
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	807b      	strh	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	8a39      	ldrh	r1, [r7, #16]
 8001972:	883a      	ldrh	r2, [r7, #0]
 8001974:	1a8a      	subs	r2, r1, r2
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	8879      	ldrh	r1, [r7, #2]
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	1acb      	subs	r3, r1, r3
 8001980:	fb92 f3f3 	sdiv	r3, r2, r3
 8001984:	b29a      	uxth	r2, r3
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	b29b      	uxth	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
	...

08001998 <SRXL2_Connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_Connect(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 800199e:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <SRXL2_Connect+0xa8>)
 80019a0:	617b      	str	r3, [r7, #20]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 80019a2:	f000 fa89 	bl	8001eb8 <SRXL2_isReceived>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d138      	bne.n	8001a1e <SRXL2_Connect+0x86>

		switch(header->pType)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b21      	cmp	r3, #33	@ 0x21
 80019b2:	d003      	beq.n	80019bc <SRXL2_Connect+0x24>
 80019b4:	2bcd      	cmp	r3, #205	@ 0xcd
 80019b6:	d134      	bne.n	8001a22 <SRXL2_Connect+0x8a>
		{
		case SRXL_CTRL_ID:
			return 2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	e03c      	b.n	8001a36 <SRXL2_Connect+0x9e>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <SRXL2_Connect+0xac>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3303      	adds	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10e      	bne.n	80019ee <SRXL2_Connect+0x56>
			{
				receiver_info.SrcID = rx->SrcID;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <SRXL2_Connect+0xb0>)
 80019d6:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	791a      	ldrb	r2, [r3, #4]
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <SRXL2_Connect+0xb0>)
 80019de:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <SRXL2_Connect+0xb0>)
 80019e8:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 80019ec:	e000      	b.n	80019f0 <SRXL2_Connect+0x58>
			}
			break;
 80019ee:	bf00      	nop
		default:
			continue;
		}

		break;
 80019f0:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 80019f2:	23a6      	movs	r3, #166	@ 0xa6
 80019f4:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 80019f6:	2321      	movs	r3, #33	@ 0x21
 80019f8:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 80019fa:	230e      	movs	r3, #14
 80019fc:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 80019fe:	2330      	movs	r3, #48	@ 0x30
 8001a00:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <SRXL2_Connect+0xb0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 8001a08:	2360      	movs	r3, #96	@ 0x60
 8001a0a:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001a10:	2301      	movs	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <SRXL2_Connect+0xb4>)
 8001a16:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 8001a1c:	e003      	b.n	8001a26 <SRXL2_Connect+0x8e>
		if(SRXL2_isReceived()!=0) continue;
 8001a1e:	bf00      	nop
 8001a20:	e7bf      	b.n	80019a2 <SRXL2_Connect+0xa>
			continue;
 8001a22:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001a24:	e7bd      	b.n	80019a2 <SRXL2_Connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 8001a26:	463b      	mov	r3, r7
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f963 	bl	8001cf4 <SRXL2_doHandshake>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f8      	bne.n	8001a26 <SRXL2_Connect+0x8e>

	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000364 	.word	0x20000364
 8001a44:	20000360 	.word	0x20000360
 8001a48:	2000037c 	.word	0x2000037c
 8001a4c:	12345678 	.word	0x12345678

08001a50 <SRXL2_GetData>:


/*
 * 수신 데이터 로딩
 */
int SRXL2_GetData(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <SRXL2_GetData+0x40>)
 8001a58:	607b      	str	r3, [r7, #4]

	if(SRXL2_isReceived()!=0) return -1;
 8001a5a:	f000 fa2d 	bl	8001eb8 <SRXL2_isReceived>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <SRXL2_GetData+0x1a>
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	e00d      	b.n	8001a86 <SRXL2_GetData+0x36>

	switch(header->pType){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	2b21      	cmp	r3, #33	@ 0x21
 8001a70:	d007      	beq.n	8001a82 <SRXL2_GetData+0x32>
 8001a72:	2bcd      	cmp	r3, #205	@ 0xcd
 8001a74:	d106      	bne.n	8001a84 <SRXL2_GetData+0x34>
	case SRXL_HANDSHAKE_ID :
		break;
	case SRXL_CTRL_ID :
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <SRXL2_GetData+0x44>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f80c 	bl	8001a98 <SRXL2_parseControlData>
		// SRXL2_SendTelemetryData();
		break;
 8001a80:	e000      	b.n	8001a84 <SRXL2_GetData+0x34>
		break;
 8001a82:	bf00      	nop
	}
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000364 	.word	0x20000364
 8001a94:	20000360 	.word	0x20000360

08001a98 <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08b      	sub	sp, #44	@ 0x2c
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
	PARM_RC *parm = &PARM_rc;
 8001aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ce0 <SRXL2_parseControlData+0x248>)
 8001aa2:	617b      	str	r3, [r7, #20]
	RC_CHANNELS *rc = &RC_channels;
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ce4 <SRXL2_parseControlData+0x24c>)
 8001aa6:	613b      	str	r3, [r7, #16]


	// if(rx->Command == SRXL_CTRL_CMD_VTX)
	// if(rx->Command == SRXL_CTRL_CMD_FWDPGM)

	uint8_t channelCnt = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	e0cb      	b.n	8001c4a <SRXL2_parseControlData+0x1b2>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80be 	beq.w	8001c42 <SRXL2_parseControlData+0x1aa>
		if(i>=18) break;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	f300 80c3 	bgt.w	8001c54 <SRXL2_parseControlData+0x1bc>

		uint16_t value = rx->data.values[channelCnt];
 8001ace:	7ff9      	ldrb	r1, [r7, #31]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	004b      	lsls	r3, r1, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	7b18      	ldrb	r0, [r3, #12]
 8001ad8:	004b      	lsls	r3, r1, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	7b5b      	ldrb	r3, [r3, #13]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	4303      	orrs	r3, r0
 8001ae2:	81fb      	strh	r3, [r7, #14]
		channelCnt++;
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf38      	it	cc
 8001af4:	4613      	movcc	r3, r2
 8001af6:	81fb      	strh	r3, [r7, #14]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001afe:	4293      	cmp	r3, r2
 8001b00:	bf28      	it	cs
 8001b02:	4613      	movcs	r3, r2
 8001b04:	81fb      	strh	r3, [r7, #14]

		// Reverse 처리
		if((parm->reversedMask>>i)&0x01)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d02f      	beq.n	8001b7a <SRXL2_parseControlData+0xe2>
		{
			rc->value[i] = map(value,
 8001b1a:	6979      	ldr	r1, [r7, #20]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	3308      	adds	r3, #8
 8001b28:	889b      	ldrh	r3, [r3, #4]
 8001b2a:	b29c      	uxth	r4, r3
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	3308      	adds	r3, #8
 8001b3a:	885b      	ldrh	r3, [r3, #2]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	89f8      	ldrh	r0, [r7, #14]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4623      	mov	r3, r4
 8001b44:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001b48:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001b4c:	f7ff fefe 	bl	800194c <map>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MAX, parm->CHANNEL[i].MIN) + parm->CHANNEL[i].TRIM;
 8001b54:	6979      	ldr	r1, [r7, #20]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3308      	adds	r3, #8
 8001b62:	88db      	ldrh	r3, [r3, #6]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4403      	add	r3, r0
 8001b68:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	460a      	mov	r2, r1
 8001b74:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001b78:	e02e      	b.n	8001bd8 <SRXL2_parseControlData+0x140>
		}
		else{
			rc->value[i] = map(value,
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	3308      	adds	r3, #8
 8001b88:	885b      	ldrh	r3, [r3, #2]
 8001b8a:	b29c      	uxth	r4, r3
 8001b8c:	6979      	ldr	r1, [r7, #20]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	3308      	adds	r3, #8
 8001b9a:	889b      	ldrh	r3, [r3, #4]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	89f8      	ldrh	r0, [r7, #14]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001ba8:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001bac:	f7ff fece 	bl	800194c <map>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MIN, parm->CHANNEL[i].MAX) + parm->CHANNEL[i].TRIM;
 8001bb4:	6979      	ldr	r1, [r7, #20]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	88db      	ldrh	r3, [r3, #6]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4403      	add	r3, r0
 8001bc8:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-parm->CHANNEL[i].DZ) && rc->value[i]<(1500+parm->CHANNEL[i].DZ)){
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	dd20      	ble.n	8001c44 <SRXL2_parseControlData+0x1ac>
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3310      	adds	r3, #16
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001c16:	6939      	ldr	r1, [r7, #16]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	440b      	add	r3, r1
 8001c1e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	429a      	cmp	r2, r3
 8001c26:	db0d      	blt.n	8001c44 <SRXL2_parseControlData+0x1ac>
			rc->value[i] = 1500;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	2200      	movs	r2, #0
 8001c32:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001c36:	715a      	strb	r2, [r3, #5]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f042 0205 	orr.w	r2, r2, #5
 8001c3e:	719a      	strb	r2, [r3, #6]
 8001c40:	e000      	b.n	8001c44 <SRXL2_parseControlData+0x1ac>
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001c42:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b1f      	cmp	r3, #31
 8001c4e:	f77f af30 	ble.w	8001ab2 <SRXL2_parseControlData+0x1a>
 8001c52:	e000      	b.n	8001c56 <SRXL2_parseControlData+0x1be>
		if(i>=18) break;
 8001c54:	bf00      	nop
		}
	}

	channelMask |= rx->data.mask;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <SRXL2_parseControlData+0x250>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <SRXL2_parseControlData+0x250>)
 8001c62:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <SRXL2_parseControlData+0x250>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f9e6 	bl	800203a <countSetBits>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <SRXL2_parseControlData+0x254>)
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]

	if(system_time.time_boot_ms - previousTime > 2000){
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <SRXL2_parseControlData+0x254>)
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <SRXL2_parseControlData+0x258>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c8c:	d906      	bls.n	8001c9c <SRXL2_parseControlData+0x204>
		previousTime = system_time.time_boot_ms;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <SRXL2_parseControlData+0x254>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <SRXL2_parseControlData+0x258>)
 8001c94:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <SRXL2_parseControlData+0x250>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	}

	// rssi, frameLoss, Fail-safe 기능 등 구현
	switch(rx->Command){
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SRXL2_parseControlData+0x210>
 8001ca4:	2b01      	cmp	r3, #1
		 */
		if((rx->data.rssi&0x80)) break;
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
		break;
	case SRXL_CTRL_CMD_CHANNEL_FS:
		break;
 8001ca6:	e016      	b.n	8001cd6 <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db10      	blt.n	8001cd4 <SRXL2_parseControlData+0x23c>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	23fe      	movs	r3, #254	@ 0xfe
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2264      	movs	r2, #100	@ 0x64
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f7ff fe42 	bl	800194c <map>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		break;
 8001cd2:	e000      	b.n	8001cd6 <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001cd4:	bf00      	nop
	}

	return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3724      	adds	r7, #36	@ 0x24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	2000045c 	.word	0x2000045c
 8001ce4:	200003e8 	.word	0x200003e8
 8001ce8:	20000388 	.word	0x20000388
 8001cec:	20000394 	.word	0x20000394
 8001cf0:	2000038c 	.word	0x2000038c

08001cf4 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3303      	adds	r3, #3
 8001d00:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	789b      	ldrb	r3, [r3, #2]
 8001d06:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	2b0e      	cmp	r3, #14
 8001d0c:	d002      	beq.n	8001d14 <SRXL2_doHandshake+0x20>
 8001d0e:	f06f 0301 	mvn.w	r3, #1
 8001d12:	e027      	b.n	8001d64 <SRXL2_doHandshake+0x70>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001d14:	f000 f8d0 	bl	8001eb8 <SRXL2_isReceived>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <SRXL2_doHandshake+0x54>

		if(packet.header.pType == SRXL_HANDSHAKE_ID)
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <SRXL2_doHandshake+0x78>)
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	2b21      	cmp	r3, #33	@ 0x21
 8001d24:	d1f6      	bne.n	8001d14 <SRXL2_doHandshake+0x20>
		{
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <SRXL2_doHandshake+0x7c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3303      	adds	r3, #3
 8001d2c:	60fb      	str	r3, [r7, #12]

			if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d1ec      	bne.n	8001d14 <SRXL2_doHandshake+0x20>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d002      	beq.n	8001d4c <SRXL2_doHandshake+0x58>
 8001d46:	e7e5      	b.n	8001d14 <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8001d48:	bf00      	nop
 8001d4a:	e7e3      	b.n	8001d14 <SRXL2_doHandshake+0x20>
			{
				break;
 8001d4c:	bf00      	nop
			}
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f94f 	bl	8001ff6 <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8001d58:	7cfb      	ldrb	r3, [r7, #19]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fd9b 	bl	8001898 <RC_halfDuplex_Transmit>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000364 	.word	0x20000364
 8001d70:	20000360 	.word	0x20000360

08001d74 <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 8001d7e:	f7ff fdd3 	bl	8001928 <RC_isBufferInit>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <SRXL2_readByteIRQ2+0x1a>
 8001d88:	f06f 0301 	mvn.w	r3, #1
 8001d8c:	e089      	b.n	8001ea2 <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b4f      	cmp	r3, #79	@ 0x4f
 8001d94:	d902      	bls.n	8001d9c <SRXL2_readByteIRQ2+0x28>
 8001d96:	f06f 0301 	mvn.w	r3, #1
 8001d9a:	e082      	b.n	8001ea2 <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 8001d9c:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <SRXL2_readByteIRQ2+0x36>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d011      	beq.n	8001dcc <SRXL2_readByteIRQ2+0x58>
 8001da8:	e052      	b.n	8001e50 <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == 0xA6){
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2ba6      	cmp	r3, #166	@ 0xa6
 8001dae:	d176      	bne.n	8001e9e <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 8001db0:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <SRXL2_readByteIRQ2+0x13c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a3d      	ldr	r2, [pc, #244]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	701a      	strb	r2, [r3, #0]
			cnt++;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001dc8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001dca:	e068      	b.n	8001e9e <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2bcd      	cmp	r3, #205	@ 0xcd
 8001dd0:	d026      	beq.n	8001e20 <SRXL2_readByteIRQ2+0xac>
 8001dd2:	2bcd      	cmp	r3, #205	@ 0xcd
 8001dd4:	dc28      	bgt.n	8001e28 <SRXL2_readByteIRQ2+0xb4>
 8001dd6:	2b80      	cmp	r3, #128	@ 0x80
 8001dd8:	d01e      	beq.n	8001e18 <SRXL2_readByteIRQ2+0xa4>
 8001dda:	2b80      	cmp	r3, #128	@ 0x80
 8001ddc:	dc24      	bgt.n	8001e28 <SRXL2_readByteIRQ2+0xb4>
 8001dde:	2b55      	cmp	r3, #85	@ 0x55
 8001de0:	d016      	beq.n	8001e10 <SRXL2_readByteIRQ2+0x9c>
 8001de2:	2b55      	cmp	r3, #85	@ 0x55
 8001de4:	dc20      	bgt.n	8001e28 <SRXL2_readByteIRQ2+0xb4>
 8001de6:	2b50      	cmp	r3, #80	@ 0x50
 8001de8:	d00e      	beq.n	8001e08 <SRXL2_readByteIRQ2+0x94>
 8001dea:	2b50      	cmp	r3, #80	@ 0x50
 8001dec:	dc1c      	bgt.n	8001e28 <SRXL2_readByteIRQ2+0xb4>
 8001dee:	2b21      	cmp	r3, #33	@ 0x21
 8001df0:	d002      	beq.n	8001df8 <SRXL2_readByteIRQ2+0x84>
 8001df2:	2b41      	cmp	r3, #65	@ 0x41
 8001df4:	d004      	beq.n	8001e00 <SRXL2_readByteIRQ2+0x8c>
 8001df6:	e017      	b.n	8001e28 <SRXL2_readByteIRQ2+0xb4>
		case 0x21:
			maxLen = 14;
 8001df8:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001dfa:	220e      	movs	r2, #14
 8001dfc:	701a      	strb	r2, [r3, #0]
			break;
 8001dfe:	e019      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		case 0x41:
			maxLen = 21;
 8001e00:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e02:	2215      	movs	r2, #21
 8001e04:	701a      	strb	r2, [r3, #0]
			break;
 8001e06:	e015      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		case 0x50:
			maxLen = 14;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e0a:	220e      	movs	r2, #14
 8001e0c:	701a      	strb	r2, [r3, #0]
			break;
 8001e0e:	e011      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		case 0x55:
			maxLen = 10;
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e12:	220a      	movs	r2, #10
 8001e14:	701a      	strb	r2, [r3, #0]
			break;
 8001e16:	e00d      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		case 0x80:
			maxLen = 22;
 8001e18:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e1a:	2216      	movs	r2, #22
 8001e1c:	701a      	strb	r2, [r3, #0]
			break;
 8001e1e:	e009      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		case 0xCD:
			maxLen = 80;
 8001e20:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e22:	2250      	movs	r2, #80	@ 0x50
 8001e24:	701a      	strb	r2, [r3, #0]
			break;
 8001e26:	e005      	b.n	8001e34 <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
			return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e036      	b.n	8001ea2 <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <SRXL2_readByteIRQ2+0x13c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1c      	ldr	r2, [pc, #112]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	701a      	strb	r2, [r3, #0]
		cnt++;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e4c:	701a      	strb	r2, [r3, #0]
		break;
 8001e4e:	e027      	b.n	8001ea0 <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <SRXL2_readByteIRQ2+0x13c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b50      	cmp	r3, #80	@ 0x50
 8001e64:	d107      	bne.n	8001e76 <SRXL2_readByteIRQ2+0x102>
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <SRXL2_readByteIRQ2+0x13c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e74:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <SRXL2_readByteIRQ2+0x140>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d104      	bne.n	8001e90 <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
			return 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e008      	b.n	8001ea2 <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <SRXL2_readByteIRQ2+0x138>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e9c:	e000      	b.n	8001ea0 <SRXL2_readByteIRQ2+0x12c>
		break;
 8001e9e:	bf00      	nop
	}
	return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000390 	.word	0x20000390
 8001eb0:	20000360 	.word	0x20000360
 8001eb4:	20000391 	.word	0x20000391

08001eb8 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <SRXL2_isReceived+0xb0>)
 8001ec0:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]

	if(RC_rxFlag.uart == 0)
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <SRXL2_isReceived+0xb4>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <SRXL2_isReceived+0x22>
	{
		return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	e042      	b.n	8001f60 <SRXL2_isReceived+0xa8>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <SRXL2_isReceived+0xb4>)
 8001edc:	7813      	ldrb	r3, [r2, #0]
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	7013      	strb	r3, [r2, #0]

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	22a6      	movs	r2, #166	@ 0xa6
 8001ee8:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	785a      	ldrb	r2, [r3, #1]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	789a      	ldrb	r2, [r3, #2]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	789b      	ldrb	r3, [r3, #2]
 8001f10:	3b02      	subs	r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	789b      	ldrb	r3, [r3, #2]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <SRXL2_isReceived+0xb8>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	789b      	ldrb	r3, [r3, #2]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 f816 	bl	8001f74 <calculate_crc>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d002      	beq.n	8001f5e <SRXL2_isReceived+0xa6>
		return -2;
 8001f58:	f06f 0301 	mvn.w	r3, #1
 8001f5c:	e000      	b.n	8001f60 <SRXL2_isReceived+0xa8>
	}

	return 0;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000364 	.word	0x20000364
 8001f6c:	2000035c 	.word	0x2000035c
 8001f70:	20000360 	.word	0x20000360

08001f74 <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8001f80:	2300      	movs	r3, #0
 8001f82:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	737b      	strb	r3, [r7, #13]
 8001f88:	e029      	b.n	8001fde <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8001f8a:	7b7b      	ldrb	r3, [r7, #13]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f9c:	4053      	eors	r3, r2
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	e014      	b.n	8001fd2 <calculate_crc+0x5e>
			if (crc & 0x8000)
 8001fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0a      	bge.n	8001fc6 <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8001fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	81fb      	strh	r3, [r7, #14]
 8001fc4:	e002      	b.n	8001fcc <calculate_crc+0x58>
			else
				crc = (crc << 1);
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001fcc:	7b3b      	ldrb	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	733b      	strb	r3, [r7, #12]
 8001fd2:	7b3b      	ldrb	r3, [r7, #12]
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	d9e7      	bls.n	8001fa8 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 8001fd8:	7b7b      	ldrb	r3, [r7, #13]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	737b      	strb	r3, [r7, #13]
 8001fde:	7b7a      	ldrb	r2, [r7, #13]
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	3b02      	subs	r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbd0      	blt.n	8001f8a <calculate_crc+0x16>
		}
	}

	return crc;
 8001fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffb4 	bl	8001f74 <calculate_crc>
 800200c:	4603      	mov	r3, r0
 800200e:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b299      	uxth	r1, r3
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	3b02      	subs	r3, #2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	3b01      	subs	r3, #1
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	89fa      	ldrh	r2, [r7, #14]
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]

	return crc;
 8002030:	89fb      	ldrh	r3, [r7, #14]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800205e:	4413      	add	r3, r2
 8002060:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	091a      	lsrs	r2, r3, #4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800206e:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	4413      	add	r3, r2
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	4413      	add	r3, r2
 800207c:	0e1b      	lsrs	r3, r3, #24
 800207e:	b2db      	uxtb	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_TIM_EnableCounter>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_CC_EnableChannel>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
void SERVO_Initialization(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <SERVO_Initialization+0x30>)
 80020f8:	607b      	str	r3, [r7, #4]

	LL_TIM_EnableCounter(TIM1);
 80020fa:	480a      	ldr	r0, [pc, #40]	@ (8002124 <SERVO_Initialization+0x34>)
 80020fc:	f7ff ffc6 	bl	800208c <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8002100:	4809      	ldr	r0, [pc, #36]	@ (8002128 <SERVO_Initialization+0x38>)
 8002102:	f7ff ffc3 	bl	800208c <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM4);
 8002106:	4809      	ldr	r0, [pc, #36]	@ (800212c <SERVO_Initialization+0x3c>)
 8002108:	f7ff ffc0 	bl	800208c <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 800210c:	4808      	ldr	r0, [pc, #32]	@ (8002130 <SERVO_Initialization+0x40>)
 800210e:	f7ff ffbd 	bl	800208c <LL_TIM_EnableCounter>

	SERVO_doDisarm();
 8002112:	f000 f8c5 	bl	80022a0 <SERVO_doDisarm>

	return;
 8002116:	bf00      	nop
}
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002e4 	.word	0x200002e4
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00

08002134 <configurePWM>:
 * @parm uint16_t hz 50-490
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8002144:	d802      	bhi.n	800214c <configurePWM+0x18>
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	2b31      	cmp	r3, #49	@ 0x31
 800214a:	d801      	bhi.n	8002150 <configurePWM+0x1c>
 800214c:	2301      	movs	r3, #1
 800214e:	e01f      	b.n	8002190 <configurePWM+0x5c>

	TIM1->ARR = 1000000/hz-1;
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <configurePWM+0x68>)
 8002154:	fb92 f3f3 	sdiv	r3, r2, r3
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <configurePWM+0x6c>)
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 84-1;
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <configurePWM+0x6c>)
 8002160:	2253      	movs	r2, #83	@ 0x53
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->ARR = 20000;
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <configurePWM+0x70>)
 8002166:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 84-1;
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <configurePWM+0x70>)
 800216e:	2253      	movs	r2, #83	@ 0x53
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM4->ARR = 20000;
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <configurePWM+0x74>)
 8002174:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002178:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 84-1;
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <configurePWM+0x74>)
 800217c:	2253      	movs	r2, #83	@ 0x53
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM5->ARR = 20000;
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <configurePWM+0x78>)
 8002182:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM5->PSC = 84-1;
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <configurePWM+0x78>)
 800218a:	2253      	movs	r2, #83	@ 0x53
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28

	return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	000f4240 	.word	0x000f4240
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00

080021b0 <SERVO_doArm>:


void SERVO_doArm(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <SERVO_doArm+0xd8>)
 80021b8:	603b      	str	r3, [r7, #0]
	configurePWM(servo->RATE);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ffb6 	bl	8002134 <configurePWM>

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e055      	b.n	800227a <SERVO_doArm+0xca>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d048      	beq.n	8002272 <SERVO_doArm+0xc2>

		TIM_TypeDef* timer;
		uint32_t ch;
		switch(SERVO_TIMER_MAP[i]>>4){
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4a2a      	ldr	r2, [pc, #168]	@ (800228c <SERVO_doArm+0xdc>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d819      	bhi.n	8002224 <SERVO_doArm+0x74>
 80021f0:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <SERVO_doArm+0x48>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	08002225 	.word	0x08002225
 8002200:	08002213 	.word	0x08002213
 8002204:	08002219 	.word	0x08002219
 8002208:	0800221f 	.word	0x0800221f
		case 1:
			timer = TIM1;
 800220c:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <SERVO_doArm+0xe0>)
 800220e:	60bb      	str	r3, [r7, #8]
			break;
 8002210:	e008      	b.n	8002224 <SERVO_doArm+0x74>
		case 3:
			timer = TIM3;
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <SERVO_doArm+0xe4>)
 8002214:	60bb      	str	r3, [r7, #8]
			break;
 8002216:	e005      	b.n	8002224 <SERVO_doArm+0x74>
		case 4:
			timer = TIM4;
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <SERVO_doArm+0xe8>)
 800221a:	60bb      	str	r3, [r7, #8]
			break;
 800221c:	e002      	b.n	8002224 <SERVO_doArm+0x74>
		case 5:
			timer = TIM5;
 800221e:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <SERVO_doArm+0xec>)
 8002220:	60bb      	str	r3, [r7, #8]
			break;
 8002222:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4a19      	ldr	r2, [pc, #100]	@ (800228c <SERVO_doArm+0xdc>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b01      	subs	r3, #1
 8002230:	2b03      	cmp	r3, #3
 8002232:	d819      	bhi.n	8002268 <SERVO_doArm+0xb8>
 8002234:	a201      	add	r2, pc, #4	@ (adr r2, 800223c <SERVO_doArm+0x8c>)
 8002236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223a:	bf00      	nop
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002253 	.word	0x08002253
 8002244:	08002259 	.word	0x08002259
 8002248:	08002261 	.word	0x08002261
		case 1:
			ch = LL_TIM_CHANNEL_CH1;
 800224c:	2301      	movs	r3, #1
 800224e:	607b      	str	r3, [r7, #4]
			break;
 8002250:	e00a      	b.n	8002268 <SERVO_doArm+0xb8>
		case 2:
			ch = LL_TIM_CHANNEL_CH2;
 8002252:	2310      	movs	r3, #16
 8002254:	607b      	str	r3, [r7, #4]
			break;
 8002256:	e007      	b.n	8002268 <SERVO_doArm+0xb8>
		case 3:
			ch = LL_TIM_CHANNEL_CH3;
 8002258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800225c:	607b      	str	r3, [r7, #4]
			break;
 800225e:	e003      	b.n	8002268 <SERVO_doArm+0xb8>
		case 4:
			ch = LL_TIM_CHANNEL_CH4;
 8002260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002264:	607b      	str	r3, [r7, #4]
			break;
 8002266:	bf00      	nop
		}

		LL_TIM_CC_EnableChannel(timer, ch);
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f7ff ff1e 	bl	80020ac <LL_TIM_CC_EnableChannel>
 8002270:	e000      	b.n	8002274 <SERVO_doArm+0xc4>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002272:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b0b      	cmp	r3, #11
 800227e:	d9a6      	bls.n	80021ce <SERVO_doArm+0x1e>
	}

	return;
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200002e4 	.word	0x200002e4
 800228c:	0800ea48 	.word	0x0800ea48
 8002290:	40010000 	.word	0x40010000
 8002294:	40000400 	.word	0x40000400
 8002298:	40000800 	.word	0x40000800
 800229c:	40000c00 	.word	0x40000c00

080022a0 <SERVO_doDisarm>:


void SERVO_doDisarm(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	LL_TIM_DisableAllOutputs(TIM1);
 80022a4:	4806      	ldr	r0, [pc, #24]	@ (80022c0 <SERVO_doDisarm+0x20>)
 80022a6:	f7ff ff12 	bl	80020ce <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM3);
 80022aa:	4806      	ldr	r0, [pc, #24]	@ (80022c4 <SERVO_doDisarm+0x24>)
 80022ac:	f7ff ff0f 	bl	80020ce <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM4);
 80022b0:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <SERVO_doDisarm+0x28>)
 80022b2:	f7ff ff0c 	bl	80020ce <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM5);
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <SERVO_doDisarm+0x2c>)
 80022b8:	f7ff ff09 	bl	80020ce <LL_TIM_DisableAllOutputs>

	return;
 80022bc:	bf00      	nop
}
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00

080022d0 <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	calculateServoOutput();
 80022d4:	f000 f804 	bl	80022e0 <calculateServoOutput>

	controlPWM();
 80022d8:	f000 f83c 	bl	8002354 <controlPWM>
	return;
 80022dc:	bf00      	nop
}
 80022de:	bd80      	pop	{r7, pc}

080022e0 <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <calculateServoOutput+0x64>)
 80022e8:	603b      	str	r3, [r7, #0]

	servo_output_raw.time_usec = system_time.time_boot_ms;
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <calculateServoOutput+0x68>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a17      	ldr	r2, [pc, #92]	@ (800234c <calculateServoOutput+0x6c>)
 80022f0:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	e01b      	b.n	8002330 <calculateServoOutput+0x50>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <calculateServoOutput+0x48>

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	4910      	ldr	r1, [pc, #64]	@ (8002350 <calculateServoOutput+0x70>)
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002318:	b298      	uxth	r0, r3
 800231a:	490c      	ldr	r1, [pc, #48]	@ (800234c <calculateServoOutput+0x6c>)
 800231c:	0053      	lsls	r3, r2, #1
 800231e:	440b      	add	r3, r1
 8002320:	4602      	mov	r2, r0
 8002322:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002326:	e000      	b.n	800232a <calculateServoOutput+0x4a>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002328:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	3301      	adds	r3, #1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b0b      	cmp	r3, #11
 8002334:	d9e0      	bls.n	80022f8 <calculateServoOutput+0x18>
	}

	return;
 8002336:	bf00      	nop
}
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200002e4 	.word	0x200002e4
 8002348:	20000394 	.word	0x20000394
 800234c:	200003c0 	.word	0x200003c0
 8002350:	200003e8 	.word	0x200003e8

08002354 <controlPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void controlPWM(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 800235a:	4b3e      	ldr	r3, [pc, #248]	@ (8002454 <controlPWM+0x100>)
 800235c:	607b      	str	r3, [r7, #4]

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e06d      	b.n	8002440 <controlPWM+0xec>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d060      	beq.n	8002438 <controlPWM+0xe4>

		TIM_TypeDef* timer;
		switch(SERVO_TIMER_MAP[i]>>4){
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	4a37      	ldr	r2, [pc, #220]	@ (8002458 <controlPWM+0x104>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	2b04      	cmp	r3, #4
 8002384:	d818      	bhi.n	80023b8 <controlPWM+0x64>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <controlPWM+0x38>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	080023a1 	.word	0x080023a1
 8002390:	080023b9 	.word	0x080023b9
 8002394:	080023a7 	.word	0x080023a7
 8002398:	080023ad 	.word	0x080023ad
 800239c:	080023b3 	.word	0x080023b3
		case 1:
			timer = TIM1;
 80023a0:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <controlPWM+0x108>)
 80023a2:	60bb      	str	r3, [r7, #8]
			break;
 80023a4:	e008      	b.n	80023b8 <controlPWM+0x64>
		case 3:
			timer = TIM3;
 80023a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002460 <controlPWM+0x10c>)
 80023a8:	60bb      	str	r3, [r7, #8]
			break;
 80023aa:	e005      	b.n	80023b8 <controlPWM+0x64>
		case 4:
			timer = TIM4;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <controlPWM+0x110>)
 80023ae:	60bb      	str	r3, [r7, #8]
			break;
 80023b0:	e002      	b.n	80023b8 <controlPWM+0x64>
		case 5:
			timer = TIM5;
 80023b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <controlPWM+0x114>)
 80023b4:	60bb      	str	r3, [r7, #8]
			break;
 80023b6:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4a27      	ldr	r2, [pc, #156]	@ (8002458 <controlPWM+0x104>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b01      	subs	r3, #1
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d838      	bhi.n	800243a <controlPWM+0xe6>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <controlPWM+0x7c>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f7 	.word	0x080023f7
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	08002423 	.word	0x08002423
		case 1:
			timer->CCR1 = servo_output_raw.servo_raw[i];
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4a22      	ldr	r2, [pc, #136]	@ (800246c <controlPWM+0x118>)
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80023f4:	e021      	b.n	800243a <controlPWM+0xe6>
		case 2:
			timer->CCR2 = servo_output_raw.servo_raw[i];
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <controlPWM+0x118>)
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800240a:	e016      	b.n	800243a <controlPWM+0xe6>
		case 3:
			timer->CCR3 = servo_output_raw.servo_raw[i];
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <controlPWM+0x118>)
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002420:	e00b      	b.n	800243a <controlPWM+0xe6>
		case 4:
			timer->CCR4 = servo_output_raw.servo_raw[i];
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	4a11      	ldr	r2, [pc, #68]	@ (800246c <controlPWM+0x118>)
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002436:	e000      	b.n	800243a <controlPWM+0xe6>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002438:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3301      	adds	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b0b      	cmp	r3, #11
 8002444:	d98e      	bls.n	8002364 <controlPWM+0x10>
		}
	}

	return;
 8002446:	bf00      	nop
}
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	200002e4 	.word	0x200002e4
 8002458:	0800ea48 	.word	0x0800ea48
 800245c:	40010000 	.word	0x40010000
 8002460:	40000400 	.word	0x40000400
 8002464:	40000800 	.word	0x40000800
 8002468:	40000c00 	.word	0x40000c00
 800246c:	200003c0 	.word	0x200003c0

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	@ (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002582:	b480      	push	{r7}
 8002584:	b089      	sub	sp, #36	@ 0x24
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	332c      	adds	r3, #44	@ 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800259a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800259e:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	fa92 f2a2 	rbit	r2, r2
 80025a6:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 80025b2:	2220      	movs	r2, #32
 80025b4:	e003      	b.n	80025be <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	40d3      	lsrs	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	211f      	movs	r1, #31
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 011f 	and.w	r1, r3, #31
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	431a      	orrs	r2, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025f0:	bf00      	nop
 80025f2:	3724      	adds	r7, #36	@ 0x24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002622:	b480      	push	{r7}
 8002624:	b08f      	sub	sp, #60	@ 0x3c
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	330c      	adds	r3, #12
 8002632:	4619      	mov	r1, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	fa92 f2a2 	rbit	r2, r2
 8002646:	613a      	str	r2, [r7, #16]
  return result;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	2a00      	cmp	r2, #0
 8002650:	d101      	bne.n	8002656 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8002652:	2220      	movs	r2, #32
 8002654:	e003      	b.n	800265e <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	40d3      	lsrs	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8002666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002670:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002674:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	fa91 f1a1 	rbit	r1, r1
 800267c:	61f9      	str	r1, [r7, #28]
  return result;
 800267e:	69f9      	ldr	r1, [r7, #28]
 8002680:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8002682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002684:	2900      	cmp	r1, #0
 8002686:	d101      	bne.n	800268c <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8002688:	2120      	movs	r1, #32
 800268a:	e003      	b.n	8002694 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 800268c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800268e:	fab1 f181 	clz	r1, r1
 8002692:	b2c9      	uxtb	r1, r1
 8002694:	40cb      	lsrs	r3, r1
 8002696:	2107      	movs	r1, #7
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80026a6:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80026aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026ae:	fa91 f1a1 	rbit	r1, r1
 80026b2:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80026b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b6:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80026b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80026be:	2120      	movs	r1, #32
 80026c0:	e003      	b.n	80026ca <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80026c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026c4:	fab1 f181 	clz	r1, r1
 80026c8:	b2c9      	uxtb	r1, r1
 80026ca:	40cb      	lsrs	r3, r1
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	431a      	orrs	r2, r3
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80026d8:	bf00      	nop
 80026da:	373c      	adds	r7, #60	@ 0x3c
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_SPI_SetStandard>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 0210 	bic.w	r2, r3, #16
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	605a      	str	r2, [r3, #4]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_TIM_EnableCounter>:
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_TIM_DisableARRPreload>:
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <LL_TIM_OC_DisableFast>:
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d01c      	beq.n	8002796 <LL_TIM_OC_DisableFast+0x4a>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d017      	beq.n	8002792 <LL_TIM_OC_DisableFast+0x46>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b10      	cmp	r3, #16
 8002766:	d012      	beq.n	800278e <LL_TIM_OC_DisableFast+0x42>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d00d      	beq.n	800278a <LL_TIM_OC_DisableFast+0x3e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002774:	d007      	beq.n	8002786 <LL_TIM_OC_DisableFast+0x3a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277c:	d101      	bne.n	8002782 <LL_TIM_OC_DisableFast+0x36>
 800277e:	2305      	movs	r3, #5
 8002780:	e00a      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 8002782:	2306      	movs	r3, #6
 8002784:	e008      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_TIM_OC_DisableFast+0x4c>
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3318      	adds	r3, #24
 800279e:	4619      	mov	r1, r3
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	4a0b      	ldr	r2, [pc, #44]	@ (80027d0 <LL_TIM_OC_DisableFast+0x84>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	440b      	add	r3, r1
 80027a8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <LL_TIM_OC_DisableFast+0x88>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	4619      	mov	r1, r3
 80027b6:	2304      	movs	r3, #4
 80027b8:	408b      	lsls	r3, r1
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	601a      	str	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	0800ea54 	.word	0x0800ea54
 80027d4:	0800ea5c 	.word	0x0800ea5c

080027d8 <LL_TIM_OC_EnablePreload>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d01c      	beq.n	8002822 <LL_TIM_OC_EnablePreload+0x4a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d017      	beq.n	800281e <LL_TIM_OC_EnablePreload+0x46>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d012      	beq.n	800281a <LL_TIM_OC_EnablePreload+0x42>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d00d      	beq.n	8002816 <LL_TIM_OC_EnablePreload+0x3e>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002800:	d007      	beq.n	8002812 <LL_TIM_OC_EnablePreload+0x3a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	d101      	bne.n	800280e <LL_TIM_OC_EnablePreload+0x36>
 800280a:	2305      	movs	r3, #5
 800280c:	e00a      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 800280e:	2306      	movs	r3, #6
 8002810:	e008      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 8002812:	2304      	movs	r3, #4
 8002814:	e006      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 8002816:	2303      	movs	r3, #3
 8002818:	e004      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 800281a:	2302      	movs	r3, #2
 800281c:	e002      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <LL_TIM_OC_EnablePreload+0x4c>
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3318      	adds	r3, #24
 800282a:	4619      	mov	r1, r3
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <LL_TIM_OC_EnablePreload+0x80>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	440b      	add	r3, r1
 8002834:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <LL_TIM_OC_EnablePreload+0x84>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	4619      	mov	r1, r3
 8002842:	2308      	movs	r3, #8
 8002844:	408b      	lsls	r3, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	0800ea54 	.word	0x0800ea54
 800285c:	0800ea5c 	.word	0x0800ea5c

08002860 <LL_TIM_SetClockSource>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002872:	f023 0307 	bic.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_TIM_SetTriggerOutput>:
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	605a      	str	r2, [r3, #4]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_TIM_DisableMasterSlaveMode>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_USART_Enable>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_USART_ConfigAsyncMode>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	615a      	str	r2, [r3, #20]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_USART_ConfigHalfDuplexMode>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f043 0208 	orr.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_USART_EnableIT_RXNE>:
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	@ 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	330c      	adds	r3, #12
 8002980:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	60bb      	str	r3, [r7, #8]
   return(result);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f043 0320 	orr.w	r3, r3, #32
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	330c      	adds	r3, #12
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	61ba      	str	r2, [r7, #24]
 800299a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6979      	ldr	r1, [r7, #20]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	613b      	str	r3, [r7, #16]
   return(result);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e7      	bne.n	800297c <LL_USART_EnableIT_RXNE+0x8>
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_GPIO_ResetOutputPin>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	041a      	lsls	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_AHB1_GRP1_EnableClock>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e4:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40023800 	.word	0x40023800

08002a08 <LL_APB1_GRP1_EnableClock>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a14:	4907      	ldr	r1, [pc, #28]	@ (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40023800 	.word	0x40023800

08002a38 <LL_APB2_GRP1_EnableClock>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a40:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a44:	4907      	ldr	r1, [pc, #28]	@ (8002a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40023800 	.word	0x40023800

08002a68 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8002a74:	bf00      	nop
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68b8      	ldr	r0, [r7, #8]
 8002a7e:	f008 feb5 	bl	800b7ec <CDC_Transmit_FS>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d0f6      	beq.n	8002a76 <_write+0xe>
	return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
#endif
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a98:	f001 f90e 	bl	8003cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a9c:	f000 f852 	bl	8002b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa0:	f000 fe66 	bl	8003770 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002aa4:	f000 fd54 	bl	8003550 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002aa8:	f000 fa2a 	bl	8002f00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002aac:	f000 fae2 	bl	8003074 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002ab0:	f000 fb8c 	bl	80031cc <MX_TIM5_Init>
  MX_TIM13_Init();
 8002ab4:	f000 fc2e 	bl	8003314 <MX_TIM13_Init>
  MX_SPI1_Init();
 8002ab8:	f000 f924 	bl	8002d04 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002abc:	f000 fda6 	bl	800360c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002ac0:	f000 fe04 	bl	80036cc <MX_USART3_UART_Init>
  MX_UART4_Init();
 8002ac4:	f000 fc7a 	bl	80033bc <MX_UART4_Init>
  MX_UART5_Init();
 8002ac8:	f000 fcca 	bl	8003460 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8002acc:	f008 fdd0 	bl	800b670 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002ad0:	f000 f8a2 	bl	8002c18 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002ad4:	f000 f968 	bl	8002da8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8002ad8:	4814      	ldr	r0, [pc, #80]	@ (8002b2c <main+0x98>)
 8002ada:	f7ff fe16 	bl	800270a <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 8002ade:	4814      	ldr	r0, [pc, #80]	@ (8002b30 <main+0x9c>)
 8002ae0:	f7ff fe13 	bl	800270a <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 8002ae4:	4813      	ldr	r0, [pc, #76]	@ (8002b34 <main+0xa0>)
 8002ae6:	f7ff fe10 	bl	800270a <LL_TIM_EnableCounter>

  PARM_load();
 8002aea:	f7fe fd65 	bl	80015b8 <PARM_load>

  SERVO_Initialization();
 8002aee:	f7ff faff 	bl	80020f0 <SERVO_Initialization>
  BuzzerPlayInit();
 8002af2:	f7fe fa61 	bl	8000fb8 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 8002af6:	4810      	ldr	r0, [pc, #64]	@ (8002b38 <main+0xa4>)
 8002af8:	f7ff ff3c 	bl	8002974 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8002afc:	480f      	ldr	r0, [pc, #60]	@ (8002b3c <main+0xa8>)
 8002afe:	f7ff ff39 	bl	8002974 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8002b02:	480f      	ldr	r0, [pc, #60]	@ (8002b40 <main+0xac>)
 8002b04:	f7ff ff36 	bl	8002974 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  RC_Initialization();
 8002b08:	f7fe fe88 	bl	800181c <RC_Initialization>
  ICM42688_Initialization();
 8002b0c:	f7fe fc64 	bl	80013d8 <ICM42688_Initialization>
  BuzzerPlayOneCycle();
 8002b10:	f7fe fa80 	bl	8001014 <BuzzerPlayOneCycle>
  SERVO_doArm();
 8002b14:	f7ff fb4c 	bl	80021b0 <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(RC_GetData() != 0)
 8002b18:	f7fe fe90 	bl	800183c <RC_GetData>
	  {
	  }

	  ICM42688_Get6AxisRawData();
 8002b1c:	f7fe fcb0 	bl	8001480 <ICM42688_Get6AxisRawData>

	  SERVO_control();
 8002b20:	f7ff fbd6 	bl	80022d0 <SERVO_control>

	  Log_Send();
 8002b24:	f7fe fd02 	bl	800152c <Log_Send>
	  if(RC_GetData() != 0)
 8002b28:	e7f6      	b.n	8002b18 <main+0x84>
 8002b2a:	bf00      	nop
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40001c00 	.word	0x40001c00
 8002b34:	40002000 	.word	0x40002000
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40004400 	.word	0x40004400
 8002b40:	40004800 	.word	0x40004800

08002b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b094      	sub	sp, #80	@ 0x50
 8002b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	f107 0320 	add.w	r3, r7, #32
 8002b4e:	2230      	movs	r2, #48	@ 0x30
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00a f8e7 	bl	800cd26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <SystemClock_Config+0xcc>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <SystemClock_Config+0xcc>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <SystemClock_Config+0xcc>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <SystemClock_Config+0xd0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <SystemClock_Config+0xd0>)
 8002b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <SystemClock_Config+0xd0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002baa:	2302      	movs	r3, #2
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bb8:	23a8      	movs	r3, #168	@ 0xa8
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bc0:	2307      	movs	r3, #7
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc4:	f107 0320 	add.w	r3, r7, #32
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 fe0b 	bl	80057e4 <HAL_RCC_OscConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bd4:	f000 fe1a 	bl	800380c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd8:	230f      	movs	r3, #15
 8002bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002be4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 f86c 	bl	8005cd4 <HAL_RCC_ClockConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c02:	f000 fe03 	bl	800380c <Error_Handler>
  }
}
 8002c06:	bf00      	nop
 8002c08:	3750      	adds	r7, #80	@ 0x50
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000

08002c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b092      	sub	sp, #72	@ 0x48
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002c1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002c3a:	f107 0318 	add.w	r3, r7, #24
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	463b      	mov	r3, r7
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	611a      	str	r2, [r3, #16]
 8002c56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002c58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c5c:	f7ff feec 	bl	8002a38 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002c60:	2004      	movs	r0, #4
 8002c62:	f7ff feb9 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8002c66:	2302      	movs	r3, #2
 8002c68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8002c72:	463b      	mov	r3, r7
 8002c74:	4619      	mov	r1, r3
 8002c76:	481f      	ldr	r0, [pc, #124]	@ (8002cf4 <MX_ADC1_Init+0xdc>)
 8002c78:	f004 f9d9 	bl	800702e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002c88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	481a      	ldr	r0, [pc, #104]	@ (8002cf8 <MX_ADC1_Init+0xe0>)
 8002c90:	f004 f814 	bl	8006cbc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cac:	4619      	mov	r1, r3
 8002cae:	4812      	ldr	r0, [pc, #72]	@ (8002cf8 <MX_ADC1_Init+0xe0>)
 8002cb0:	f004 f830 	bl	8006d14 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8002cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cb8:	480f      	ldr	r0, [pc, #60]	@ (8002cf8 <MX_ADC1_Init+0xe0>)
 8002cba:	f7ff fc9f 	bl	80025fc <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cc2:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002cc8:	f107 0318 	add.w	r3, r7, #24
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480b      	ldr	r0, [pc, #44]	@ (8002cfc <MX_ADC1_Init+0xe4>)
 8002cd0:	f003 ffac 	bl	8006c2c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <MX_ADC1_Init+0xe8>)
 8002cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cda:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <MX_ADC1_Init+0xe0>)
 8002cdc:	f7ff fc51 	bl	8002582 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4907      	ldr	r1, [pc, #28]	@ (8002d00 <MX_ADC1_Init+0xe8>)
 8002ce4:	4804      	ldr	r0, [pc, #16]	@ (8002cf8 <MX_ADC1_Init+0xe0>)
 8002ce6:	f7ff fc9c 	bl	8002622 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	3748      	adds	r7, #72	@ 0x48
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40012000 	.word	0x40012000
 8002cfc:	40012300 	.word	0x40012300
 8002d00:	0030000b 	.word	0x0030000b

08002d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	@ 0x40
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002d0a:	f107 0318 	add.w	r3, r7, #24
 8002d0e:	2228      	movs	r2, #40	@ 0x28
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00a f807 	bl	800cd26 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002d28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d2c:	f7ff fe84 	bl	8002a38 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fe51 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002d36:	23e0      	movs	r3, #224	@ 0xe0
 8002d38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4e:	463b      	mov	r3, r7
 8002d50:	4619      	mov	r1, r3
 8002d52:	4813      	ldr	r0, [pc, #76]	@ (8002da0 <MX_SPI1_Init+0x9c>)
 8002d54:	f004 f96b 	bl	800702e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002d5c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002d60:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002d62:	2300      	movs	r3, #0
 8002d64:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002d66:	2302      	movs	r3, #2
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002d74:	2318      	movs	r3, #24
 8002d76:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002d80:	230a      	movs	r3, #10
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002d84:	f107 0318 	add.w	r3, r7, #24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4806      	ldr	r0, [pc, #24]	@ (8002da4 <MX_SPI1_Init+0xa0>)
 8002d8c:	f004 fb29 	bl	80073e2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002d90:	2100      	movs	r1, #0
 8002d92:	4804      	ldr	r0, [pc, #16]	@ (8002da4 <MX_SPI1_Init+0xa0>)
 8002d94:	f7ff fca6 	bl	80026e4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3740      	adds	r7, #64	@ 0x40
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40013000 	.word	0x40013000

08002da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b096      	sub	sp, #88	@ 0x58
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]
 8002dd6:	615a      	str	r2, [r3, #20]
 8002dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2220      	movs	r2, #32
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f009 ffa0 	bl	800cd26 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002de6:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002de8:	4a44      	ldr	r2, [pc, #272]	@ (8002efc <MX_TIM1_Init+0x154>)
 8002dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dec:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002df8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002dfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e12:	4839      	ldr	r0, [pc, #228]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e14:	f003 f954 	bl	80060c0 <HAL_TIM_Base_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e1e:	f000 fcf5 	bl	800380c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4832      	ldr	r0, [pc, #200]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e30:	f003 fa4a 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e3a:	f000 fce7 	bl	800380c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002e3e:	482e      	ldr	r0, [pc, #184]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e40:	f003 f98d 	bl	800615e <HAL_TIM_OC_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e4a:	f000 fcdf 	bl	800380c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e5e:	f003 fdf1 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002e68:	f000 fcd0 	bl	800380c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4819      	ldr	r0, [pc, #100]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002e92:	f003 f9bd 	bl	8006210 <HAL_TIM_OC_ConfigChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e9c:	f000 fcb6 	bl	800380c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4813      	ldr	r0, [pc, #76]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002eaa:	f003 f9b1 	bl	8006210 <HAL_TIM_OC_ConfigChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002eb4:	f000 fcaa 	bl	800380c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ed0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002edc:	f003 fe2e 	bl	8006b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002ee6:	f000 fc91 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002eea:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <MX_TIM1_Init+0x150>)
 8002eec:	f000 fcde 	bl	80038ac <HAL_TIM_MspPostInit>

}
 8002ef0:	bf00      	nop
 8002ef2:	3758      	adds	r7, #88	@ 0x58
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000414 	.word	0x20000414
 8002efc:	40010000 	.word	0x40010000

08002f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b094      	sub	sp, #80	@ 0x50
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002f06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f009 ff01 	bl	800cd26 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	611a      	str	r2, [r3, #16]
 8002f32:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7ff fd67 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8002f3a:	2353      	movs	r3, #83	@ 0x53
 8002f3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002f42:	4b48      	ldr	r3, [pc, #288]	@ (8003064 <MX_TIM3_Init+0x164>)
 8002f44:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4845      	ldr	r0, [pc, #276]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f52:	f004 fb0b 	bl	800756c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002f56:	4844      	ldr	r0, [pc, #272]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f58:	f7ff fbe7 	bl	800272a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4842      	ldr	r0, [pc, #264]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f60:	f7ff fc7e 	bl	8002860 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002f64:	2101      	movs	r1, #1
 8002f66:	4840      	ldr	r0, [pc, #256]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f68:	f7ff fc36 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002f6c:	2360      	movs	r3, #96	@ 0x60
 8002f6e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	461a      	mov	r2, r3
 8002f86:	2101      	movs	r1, #1
 8002f88:	4837      	ldr	r0, [pc, #220]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f8a:	f004 fb89 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4835      	ldr	r0, [pc, #212]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f92:	f7ff fbdb 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8002f96:	2110      	movs	r1, #16
 8002f98:	4833      	ldr	r0, [pc, #204]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002f9a:	f7ff fc1d 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	4830      	ldr	r0, [pc, #192]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fa8:	f004 fb7a 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002fac:	2110      	movs	r1, #16
 8002fae:	482e      	ldr	r0, [pc, #184]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fb0:	f7ff fbcc 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8002fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fb8:	482b      	ldr	r0, [pc, #172]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fba:	f7ff fc0d 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc8:	4827      	ldr	r0, [pc, #156]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fca:	f004 fb69 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8002fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fd2:	4825      	ldr	r0, [pc, #148]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fd4:	f7ff fbba 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002fd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fdc:	4822      	ldr	r0, [pc, #136]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fde:	f7ff fbfb 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fec:	481e      	ldr	r0, [pc, #120]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002fee:	f004 fb57 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002ff2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ff6:	481c      	ldr	r0, [pc, #112]	@ (8003068 <MX_TIM3_Init+0x168>)
 8002ff8:	f7ff fba8 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	481a      	ldr	r0, [pc, #104]	@ (8003068 <MX_TIM3_Init+0x168>)
 8003000:	f7ff fc43 	bl	800288a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003004:	4818      	ldr	r0, [pc, #96]	@ (8003068 <MX_TIM3_Init+0x168>)
 8003006:	f7ff fc53 	bl	80028b0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800300a:	2002      	movs	r0, #2
 800300c:	f7ff fce4 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003010:	2004      	movs	r0, #4
 8003012:	f7ff fce1 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 8003016:	2303      	movs	r3, #3
 8003018:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800301a:	2302      	movs	r3, #2
 800301c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800302a:	2302      	movs	r3, #2
 800302c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	4619      	mov	r1, r3
 8003032:	480e      	ldr	r0, [pc, #56]	@ (800306c <MX_TIM3_Init+0x16c>)
 8003034:	f003 fffb 	bl	800702e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8003038:	23c0      	movs	r3, #192	@ 0xc0
 800303a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800303c:	2302      	movs	r3, #2
 800303e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4806      	ldr	r0, [pc, #24]	@ (8003070 <MX_TIM3_Init+0x170>)
 8003056:	f003 ffea 	bl	800702e <LL_GPIO_Init>

}
 800305a:	bf00      	nop
 800305c:	3750      	adds	r7, #80	@ 0x50
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	fff04e20 	.word	0xfff04e20
 8003068:	40000400 	.word	0x40000400
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800

08003074 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b094      	sub	sp, #80	@ 0x50
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800307a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	2220      	movs	r2, #32
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f009 fe47 	bl	800cd26 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	611a      	str	r2, [r3, #16]
 80030a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80030a8:	2004      	movs	r0, #4
 80030aa:	f7ff fcad 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 80030ae:	2304      	movs	r3, #4
 80030b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030b2:	2300      	movs	r3, #0
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 80030b6:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <MX_TIM4_Init+0x148>)
 80030b8:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030ba:	2300      	movs	r3, #0
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80030be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030c2:	4619      	mov	r1, r3
 80030c4:	483e      	ldr	r0, [pc, #248]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 80030c6:	f004 fa51 	bl	800756c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80030ca:	483d      	ldr	r0, [pc, #244]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 80030cc:	f7ff fb2d 	bl	800272a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030d0:	2100      	movs	r1, #0
 80030d2:	483b      	ldr	r0, [pc, #236]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 80030d4:	f7ff fbc4 	bl	8002860 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80030d8:	2110      	movs	r1, #16
 80030da:	4839      	ldr	r0, [pc, #228]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 80030dc:	f7ff fb7c 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80030e0:	2360      	movs	r3, #96	@ 0x60
 80030e2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	461a      	mov	r2, r3
 80030fa:	2110      	movs	r1, #16
 80030fc:	4830      	ldr	r0, [pc, #192]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 80030fe:	f004 facf 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003102:	2110      	movs	r1, #16
 8003104:	482e      	ldr	r0, [pc, #184]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003106:	f7ff fb21 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 800310a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800310e:	482c      	ldr	r0, [pc, #176]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003110:	f7ff fb62 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	461a      	mov	r2, r3
 800311a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800311e:	4828      	ldr	r0, [pc, #160]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003120:	f004 fabe 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8003124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003128:	4825      	ldr	r0, [pc, #148]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 800312a:	f7ff fb0f 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 800312e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003132:	4823      	ldr	r0, [pc, #140]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003134:	f7ff fb50 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003142:	481f      	ldr	r0, [pc, #124]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003144:	f004 faac 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800314c:	481c      	ldr	r0, [pc, #112]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 800314e:	f7ff fafd 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003152:	2100      	movs	r1, #0
 8003154:	481a      	ldr	r0, [pc, #104]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 8003156:	f7ff fb98 	bl	800288a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800315a:	4819      	ldr	r0, [pc, #100]	@ (80031c0 <MX_TIM4_Init+0x14c>)
 800315c:	f7ff fba8 	bl	80028b0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003160:	2008      	movs	r0, #8
 8003162:	f7ff fc39 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003166:	2002      	movs	r0, #2
 8003168:	f7ff fc36 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 800316c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003172:	2302      	movs	r3, #2
 8003174:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	4619      	mov	r1, r3
 800318a:	480e      	ldr	r0, [pc, #56]	@ (80031c4 <MX_TIM4_Init+0x150>)
 800318c:	f003 ff4f 	bl	800702e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003194:	2302      	movs	r3, #2
 8003196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	4806      	ldr	r0, [pc, #24]	@ (80031c8 <MX_TIM4_Init+0x154>)
 80031ae:	f003 ff3e 	bl	800702e <LL_GPIO_Init>

}
 80031b2:	bf00      	nop
 80031b4:	3750      	adds	r7, #80	@ 0x50
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	fff0fadc 	.word	0xfff0fadc
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40020400 	.word	0x40020400

080031cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b094      	sub	sp, #80	@ 0x50
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80031d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	2220      	movs	r2, #32
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f009 fd9b 	bl	800cd26 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	611a      	str	r2, [r3, #16]
 80031fe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003200:	2008      	movs	r0, #8
 8003202:	f7ff fc01 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003206:	2353      	movs	r3, #83	@ 0x53
 8003208:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800320a:	2300      	movs	r3, #0
 800320c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <MX_TIM5_Init+0x13c>)
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003216:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800321a:	4619      	mov	r1, r3
 800321c:	483b      	ldr	r0, [pc, #236]	@ (800330c <MX_TIM5_Init+0x140>)
 800321e:	f004 f9a5 	bl	800756c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8003222:	483a      	ldr	r0, [pc, #232]	@ (800330c <MX_TIM5_Init+0x140>)
 8003224:	f7ff fa81 	bl	800272a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003228:	2100      	movs	r1, #0
 800322a:	4838      	ldr	r0, [pc, #224]	@ (800330c <MX_TIM5_Init+0x140>)
 800322c:	f7ff fb18 	bl	8002860 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8003230:	2101      	movs	r1, #1
 8003232:	4836      	ldr	r0, [pc, #216]	@ (800330c <MX_TIM5_Init+0x140>)
 8003234:	f7ff fad0 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003238:	2360      	movs	r3, #96	@ 0x60
 800323a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	461a      	mov	r2, r3
 8003252:	2101      	movs	r1, #1
 8003254:	482d      	ldr	r0, [pc, #180]	@ (800330c <MX_TIM5_Init+0x140>)
 8003256:	f004 fa23 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800325a:	2101      	movs	r1, #1
 800325c:	482b      	ldr	r0, [pc, #172]	@ (800330c <MX_TIM5_Init+0x140>)
 800325e:	f7ff fa75 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003262:	2110      	movs	r1, #16
 8003264:	4829      	ldr	r0, [pc, #164]	@ (800330c <MX_TIM5_Init+0x140>)
 8003266:	f7ff fab7 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	461a      	mov	r2, r3
 8003270:	2110      	movs	r1, #16
 8003272:	4826      	ldr	r0, [pc, #152]	@ (800330c <MX_TIM5_Init+0x140>)
 8003274:	f004 fa14 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003278:	2110      	movs	r1, #16
 800327a:	4824      	ldr	r0, [pc, #144]	@ (800330c <MX_TIM5_Init+0x140>)
 800327c:	f7ff fa66 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003284:	4821      	ldr	r0, [pc, #132]	@ (800330c <MX_TIM5_Init+0x140>)
 8003286:	f7ff faa7 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003294:	481d      	ldr	r0, [pc, #116]	@ (800330c <MX_TIM5_Init+0x140>)
 8003296:	f004 fa03 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800329a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800329e:	481b      	ldr	r0, [pc, #108]	@ (800330c <MX_TIM5_Init+0x140>)
 80032a0:	f7ff fa54 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80032a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032a8:	4818      	ldr	r0, [pc, #96]	@ (800330c <MX_TIM5_Init+0x140>)
 80032aa:	f7ff fa95 	bl	80027d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032b8:	4814      	ldr	r0, [pc, #80]	@ (800330c <MX_TIM5_Init+0x140>)
 80032ba:	f004 f9f1 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80032be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032c2:	4812      	ldr	r0, [pc, #72]	@ (800330c <MX_TIM5_Init+0x140>)
 80032c4:	f7ff fa42 	bl	800274c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80032c8:	2100      	movs	r1, #0
 80032ca:	4810      	ldr	r0, [pc, #64]	@ (800330c <MX_TIM5_Init+0x140>)
 80032cc:	f7ff fadd 	bl	800288a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80032d0:	480e      	ldr	r0, [pc, #56]	@ (800330c <MX_TIM5_Init+0x140>)
 80032d2:	f7ff faed 	bl	80028b0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7ff fb7e 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 80032dc:	230f      	movs	r3, #15
 80032de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032e0:	2302      	movs	r3, #2
 80032e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4805      	ldr	r0, [pc, #20]	@ (8003310 <MX_TIM5_Init+0x144>)
 80032fa:	f003 fe98 	bl	800702e <LL_GPIO_Init>

}
 80032fe:	bf00      	nop
 8003300:	3750      	adds	r7, #80	@ 0x50
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	fff04e20 	.word	0xfff04e20
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40020000 	.word	0x40020000

08003314 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	@ 0x38
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800331a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2220      	movs	r2, #32
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f009 fcf8 	bl	800cd26 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8003336:	2080      	movs	r0, #128	@ 0x80
 8003338:	f7ff fb66 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800333c:	f7ff f898 	bl	8002470 <__NVIC_GetPriorityGrouping>
 8003340:	4603      	mov	r3, r0
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f8e8 	bl	800251c <NVIC_EncodePriority>
 800334c:	4603      	mov	r3, r0
 800334e:	4619      	mov	r1, r3
 8003350:	202c      	movs	r0, #44	@ 0x2c
 8003352:	f7ff f8b9 	bl	80024c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003356:	202c      	movs	r0, #44	@ 0x2c
 8003358:	f7ff f898 	bl	800248c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <MX_TIM13_Init+0xa0>)
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003368:	2300      	movs	r3, #0
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 800336c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003370:	4619      	mov	r1, r3
 8003372:	4811      	ldr	r0, [pc, #68]	@ (80033b8 <MX_TIM13_Init+0xa4>)
 8003374:	f004 f8fa 	bl	800756c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8003378:	480f      	ldr	r0, [pc, #60]	@ (80033b8 <MX_TIM13_Init+0xa4>)
 800337a:	f7ff f9d6 	bl	800272a <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	461a      	mov	r2, r3
 8003396:	2101      	movs	r1, #1
 8003398:	4807      	ldr	r0, [pc, #28]	@ (80033b8 <MX_TIM13_Init+0xa4>)
 800339a:	f004 f981 	bl	80076a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 800339e:	2101      	movs	r1, #1
 80033a0:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <MX_TIM13_Init+0xa4>)
 80033a2:	f7ff f9d3 	bl	800274c <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 80033a6:	4804      	ldr	r0, [pc, #16]	@ (80033b8 <MX_TIM13_Init+0xa4>)
 80033a8:	f7ff fa92 	bl	80028d0 <LL_TIM_EnableIT_UPDATE>
//  TIM13->ARR = 42000;
//  TIM13->PSC = 2;

  /* USER CODE END TIM13_Init 2 */

}
 80033ac:	bf00      	nop
 80033ae:	3738      	adds	r7, #56	@ 0x38
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	fff0a410 	.word	0xfff0a410
 80033b8:	40001c00 	.word	0x40001c00

080033bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08e      	sub	sp, #56	@ 0x38
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	615a      	str	r2, [r3, #20]
 80033d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80033e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033ea:	f7ff fb0d 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80033ee:	2004      	movs	r0, #4
 80033f0:	f7ff faf2 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 80033f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033fa:	2302      	movs	r3, #2
 80033fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800340a:	2308      	movs	r3, #8
 800340c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4811      	ldr	r0, [pc, #68]	@ (8003458 <MX_UART4_Init+0x9c>)
 8003414:	f003 fe0b 	bl	800702e <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003418:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800341c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800342a:	230c      	movs	r3, #12
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	4807      	ldr	r0, [pc, #28]	@ (800345c <MX_UART4_Init+0xa0>)
 800343e:	f004 fd7d 	bl	8007f3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8003442:	4806      	ldr	r0, [pc, #24]	@ (800345c <MX_UART4_Init+0xa0>)
 8003444:	f7ff fa64 	bl	8002910 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003448:	4804      	ldr	r0, [pc, #16]	@ (800345c <MX_UART4_Init+0xa0>)
 800344a:	f7ff fa51 	bl	80028f0 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	3738      	adds	r7, #56	@ 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40020800 	.word	0x40020800
 800345c:	40004c00 	.word	0x40004c00

08003460 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	@ 0x38
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	611a      	str	r2, [r3, #16]
 8003476:	615a      	str	r2, [r3, #20]
 8003478:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
 8003488:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800348a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800348e:	f7ff fabb 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003492:	2004      	movs	r0, #4
 8003494:	f7ff faa0 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003498:	2008      	movs	r0, #8
 800349a:	f7ff fa9d 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 800349e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034a4:	2302      	movs	r3, #2
 80034a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80034b4:	2308      	movs	r3, #8
 80034b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4821      	ldr	r0, [pc, #132]	@ (8003544 <MX_UART5_Init+0xe4>)
 80034be:	f003 fdb6 	bl	800702e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 80034c2:	2304      	movs	r3, #4
 80034c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034c6:	2302      	movs	r3, #2
 80034c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80034d6:	2308      	movs	r3, #8
 80034d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	481a      	ldr	r0, [pc, #104]	@ (8003548 <MX_UART5_Init+0xe8>)
 80034e0:	f003 fda5 	bl	800702e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80034e4:	f7fe ffc4 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2200      	movs	r2, #0
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f814 	bl	800251c <NVIC_EncodePriority>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4619      	mov	r1, r3
 80034f8:	2035      	movs	r0, #53	@ 0x35
 80034fa:	f7fe ffe5 	bl	80024c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80034fe:	2035      	movs	r0, #53	@ 0x35
 8003500:	f7fe ffc4 	bl	800248c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003504:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003508:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003516:	230c      	movs	r3, #12
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800351a:	2300      	movs	r3, #0
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8003522:	f107 031c 	add.w	r3, r7, #28
 8003526:	4619      	mov	r1, r3
 8003528:	4808      	ldr	r0, [pc, #32]	@ (800354c <MX_UART5_Init+0xec>)
 800352a:	f004 fd07 	bl	8007f3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800352e:	4807      	ldr	r0, [pc, #28]	@ (800354c <MX_UART5_Init+0xec>)
 8003530:	f7ff f9ee 	bl	8002910 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8003534:	4805      	ldr	r0, [pc, #20]	@ (800354c <MX_UART5_Init+0xec>)
 8003536:	f7ff f9db 	bl	80028f0 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	3738      	adds	r7, #56	@ 0x38
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40020800 	.word	0x40020800
 8003548:	40020c00 	.word	0x40020c00
 800354c:	40005000 	.word	0x40005000

08003550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	@ 0x38
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	615a      	str	r2, [r3, #20]
 8003568:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
 8003578:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800357a:	2010      	movs	r0, #16
 800357c:	f7ff fa5c 	bl	8002a38 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003580:	2001      	movs	r0, #1
 8003582:	f7ff fa29 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8003586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800358a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800358c:	2302      	movs	r3, #2
 800358e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003598:	2301      	movs	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800359c:	2307      	movs	r3, #7
 800359e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4817      	ldr	r0, [pc, #92]	@ (8003604 <MX_USART1_UART_Init+0xb4>)
 80035a6:	f003 fd42 	bl	800702e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80035aa:	f7fe ff61 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe ffb1 	bl	800251c <NVIC_EncodePriority>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4619      	mov	r1, r3
 80035be:	2025      	movs	r0, #37	@ 0x25
 80035c0:	f7fe ff82 	bl	80024c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80035c4:	2025      	movs	r0, #37	@ 0x25
 80035c6:	f7fe ff61 	bl	800248c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80035ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80035ce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80035d8:	2300      	movs	r3, #0
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80035dc:	230c      	movs	r3, #12
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80035e0:	2300      	movs	r3, #0
 80035e2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	4619      	mov	r1, r3
 80035ea:	4807      	ldr	r0, [pc, #28]	@ (8003608 <MX_USART1_UART_Init+0xb8>)
 80035ec:	f004 fca6 	bl	8007f3c <LL_USART_Init>
  LL_USART_Enable(USART1);
 80035f0:	4805      	ldr	r0, [pc, #20]	@ (8003608 <MX_USART1_UART_Init+0xb8>)
 80035f2:	f7ff f97d 	bl	80028f0 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 80035f6:	4804      	ldr	r0, [pc, #16]	@ (8003608 <MX_USART1_UART_Init+0xb8>)
 80035f8:	f7ff f9a0 	bl	800293c <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035fc:	bf00      	nop
 80035fe:	3738      	adds	r7, #56	@ 0x38
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40020000 	.word	0x40020000
 8003608:	40011000 	.word	0x40011000

0800360c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08e      	sub	sp, #56	@ 0x38
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003612:	f107 031c 	add.w	r3, r7, #28
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	611a      	str	r2, [r3, #16]
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003636:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800363a:	f7ff f9e5 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800363e:	2008      	movs	r0, #8
 8003640:	f7ff f9ca 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8003644:	2378      	movs	r3, #120	@ 0x78
 8003646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003648:	2302      	movs	r3, #2
 800364a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003658:	2307      	movs	r3, #7
 800365a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4818      	ldr	r0, [pc, #96]	@ (80036c4 <MX_USART2_UART_Init+0xb8>)
 8003662:	f003 fce4 	bl	800702e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003666:	f7fe ff03 	bl	8002470 <__NVIC_GetPriorityGrouping>
 800366a:	4603      	mov	r3, r0
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe ff53 	bl	800251c <NVIC_EncodePriority>
 8003676:	4603      	mov	r3, r0
 8003678:	4619      	mov	r1, r3
 800367a:	2026      	movs	r0, #38	@ 0x26
 800367c:	f7fe ff24 	bl	80024c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003680:	2026      	movs	r0, #38	@ 0x26
 8003682:	f7fe ff03 	bl	800248c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8003686:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800368a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800368c:	2300      	movs	r3, #0
 800368e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003698:	230c      	movs	r3, #12
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800369c:	2300      	movs	r3, #0
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80036a0:	2300      	movs	r3, #0
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	4619      	mov	r1, r3
 80036aa:	4807      	ldr	r0, [pc, #28]	@ (80036c8 <MX_USART2_UART_Init+0xbc>)
 80036ac:	f004 fc46 	bl	8007f3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80036b0:	4805      	ldr	r0, [pc, #20]	@ (80036c8 <MX_USART2_UART_Init+0xbc>)
 80036b2:	f7ff f92d 	bl	8002910 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80036b6:	4804      	ldr	r0, [pc, #16]	@ (80036c8 <MX_USART2_UART_Init+0xbc>)
 80036b8:	f7ff f91a 	bl	80028f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	3738      	adds	r7, #56	@ 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40020c00 	.word	0x40020c00
 80036c8:	40004400 	.word	0x40004400

080036cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	@ 0x38
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	611a      	str	r2, [r3, #16]
 80036e2:	615a      	str	r2, [r3, #20]
 80036e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
 80036f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80036f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80036fa:	f7ff f985 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80036fe:	2008      	movs	r0, #8
 8003700:	f7ff f96a 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003704:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8003708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800370a:	2302      	movs	r3, #2
 800370c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800371a:	2307      	movs	r3, #7
 800371c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4811      	ldr	r0, [pc, #68]	@ (8003768 <MX_USART3_UART_Init+0x9c>)
 8003724:	f003 fc83 	bl	800702e <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003728:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800372c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800373a:	230c      	movs	r3, #12
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800373e:	2300      	movs	r3, #0
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	4619      	mov	r1, r3
 800374c:	4807      	ldr	r0, [pc, #28]	@ (800376c <MX_USART3_UART_Init+0xa0>)
 800374e:	f004 fbf5 	bl	8007f3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003752:	4806      	ldr	r0, [pc, #24]	@ (800376c <MX_USART3_UART_Init+0xa0>)
 8003754:	f7ff f8dc 	bl	8002910 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003758:	4804      	ldr	r0, [pc, #16]	@ (800376c <MX_USART3_UART_Init+0xa0>)
 800375a:	f7ff f8c9 	bl	80028f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800375e:	bf00      	nop
 8003760:	3738      	adds	r7, #56	@ 0x38
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40020c00 	.word	0x40020c00
 800376c:	40004800 	.word	0x40004800

08003770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003776:	463b      	mov	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
 8003784:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003786:	2010      	movs	r0, #16
 8003788:	f7ff f926 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800378c:	2080      	movs	r0, #128	@ 0x80
 800378e:	f7ff f923 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003792:	2004      	movs	r0, #4
 8003794:	f7ff f920 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003798:	2001      	movs	r0, #1
 800379a:	f7ff f91d 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800379e:	2002      	movs	r0, #2
 80037a0:	f7ff f91a 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80037a4:	2008      	movs	r0, #8
 80037a6:	f7ff f917 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 80037aa:	2127      	movs	r1, #39	@ 0x27
 80037ac:	4815      	ldr	r0, [pc, #84]	@ (8003804 <MX_GPIO_Init+0x94>)
 80037ae:	f7ff f904 	bl	80029ba <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 80037b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037b6:	4814      	ldr	r0, [pc, #80]	@ (8003808 <MX_GPIO_Init+0x98>)
 80037b8:	f7ff f8ff 	bl	80029ba <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 80037bc:	2327      	movs	r3, #39	@ 0x27
 80037be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037c0:	2301      	movs	r3, #1
 80037c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037d0:	463b      	mov	r3, r7
 80037d2:	4619      	mov	r1, r3
 80037d4:	480b      	ldr	r0, [pc, #44]	@ (8003804 <MX_GPIO_Init+0x94>)
 80037d6:	f003 fc2a 	bl	800702e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 80037da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037e0:	2301      	movs	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 80037f0:	463b      	mov	r3, r7
 80037f2:	4619      	mov	r1, r3
 80037f4:	4804      	ldr	r0, [pc, #16]	@ (8003808 <MX_GPIO_Init+0x98>)
 80037f6:	f003 fc1a 	bl	800702e <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40020c00 	.word	0x40020c00

0800380c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <Error_Handler+0x8>

08003818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_MspInit+0x4c>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4a0f      	ldr	r2, [pc, #60]	@ (8003864 <HAL_MspInit+0x4c>)
 8003828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800382c:	6453      	str	r3, [r2, #68]	@ 0x44
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <HAL_MspInit+0x4c>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_MspInit+0x4c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <HAL_MspInit+0x4c>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	@ 0x40
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_MspInit+0x4c>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0b      	ldr	r2, [pc, #44]	@ (80038a4 <HAL_TIM_Base_MspInit+0x3c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10d      	bne.n	8003896 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <HAL_TIM_Base_MspInit+0x40>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <HAL_TIM_Base_MspInit+0x40>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6453      	str	r3, [r2, #68]	@ 0x44
 800388a:	4b07      	ldr	r3, [pc, #28]	@ (80038a8 <HAL_TIM_Base_MspInit+0x40>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <HAL_TIM_MspPostInit+0x68>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d11e      	bne.n	800390c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038d8:	f043 0310 	orr.w	r3, r3, #16
 80038dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80038ea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80038ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	4619      	mov	r1, r3
 8003906:	4805      	ldr	r0, [pc, #20]	@ (800391c <HAL_TIM_MspPostInit+0x70>)
 8003908:	f000 fb7e 	bl	8004008 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40010000 	.word	0x40010000
 8003918:	40023800 	.word	0x40023800
 800391c:	40021000 	.word	0x40021000

08003920 <LL_TIM_ClearFlag_UPDATE>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f06f 0201 	mvn.w	r2, #1
 800392e:	611a      	str	r2, [r3, #16]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_USART_IsActiveFlag_RXNE>:
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_USART_ClearFlag_RXNE>:
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f06f 0220 	mvn.w	r2, #32
 8003996:	601a      	str	r2, [r3, #0]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_USART_ReceiveData8>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	b2db      	uxtb	r3, r3
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <HardFault_Handler+0x4>

080039ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <MemManage_Handler+0x4>

080039d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <BusFault_Handler+0x4>

080039de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <UsageFault_Handler+0x4>

080039e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a14:	f000 f9a2 	bl	8003d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8003a22:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <USART1_IRQHandler+0x3c>)
 8003a24:	f7ff ff9d 	bl	8003962 <LL_USART_IsActiveFlag_RXNE>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <USART1_IRQHandler+0x34>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 8003a2e:	480a      	ldr	r0, [pc, #40]	@ (8003a58 <USART1_IRQHandler+0x3c>)
 8003a30:	f7ff ffaa 	bl	8003988 <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8003a34:	4808      	ldr	r0, [pc, #32]	@ (8003a58 <USART1_IRQHandler+0x3c>)
 8003a36:	f7ff ffb5 	bl	80039a4 <LL_USART_ReceiveData8>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 8003a3e:	4a07      	ldr	r2, [pc, #28]	@ (8003a5c <USART1_IRQHandler+0x40>)
 8003a40:	7813      	ldrb	r3, [r2, #0]
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	7013      	strb	r3, [r2, #0]

		//LL_TIM_EnableCounter(TIM14);
		//LL_TIM_SetCounter(TIM14, 0);

		// RB_write(&RC_rxRingFifo, uart1_rx_data);
		RC_reviceIRQ2(uart1_rx_data);
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fefe 	bl	800184c <RC_reviceIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	2000035c 	.word	0x2000035c

08003a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8003a64:	480a      	ldr	r0, [pc, #40]	@ (8003a90 <USART2_IRQHandler+0x30>)
 8003a66:	f7ff ff7c 	bl	8003962 <LL_USART_IsActiveFlag_RXNE>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00c      	beq.n	8003a8a <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8003a70:	4807      	ldr	r0, [pc, #28]	@ (8003a90 <USART2_IRQHandler+0x30>)
 8003a72:	f7ff ff89 	bl	8003988 <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8003a76:	4806      	ldr	r0, [pc, #24]	@ (8003a90 <USART2_IRQHandler+0x30>)
 8003a78:	f7ff ff94 	bl	80039a4 <LL_USART_ReceiveData8>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <USART2_IRQHandler+0x34>)
 8003a82:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8003a84:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <USART2_IRQHandler+0x38>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40004400 	.word	0x40004400
 8003a94:	2000058b 	.word	0x2000058b
 8003a98:	2000058a 	.word	0x2000058a

08003a9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8003aa0:	4807      	ldr	r0, [pc, #28]	@ (8003ac0 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003aa2:	f7ff ff4b 	bl	800393c <LL_TIM_IsActiveFlag_UPDATE>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8003aac:	4804      	ldr	r0, [pc, #16]	@ (8003ac0 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003aae:	f7ff ff37 	bl	8003920 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a02      	ldr	r2, [pc, #8]	@ (8003ac4 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8003aba:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40001c00 	.word	0x40001c00
 8003ac4:	20000394 	.word	0x20000394

08003ac8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003adc:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <OTG_FS_IRQHandler+0x10>)
 8003ade:	f000 fd73 	bl	80045c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20001a74 	.word	0x20001a74

08003aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return 1;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_kill>:

int _kill(int pid, int sig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b06:	f009 f971 	bl	800cdec <__errno>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2216      	movs	r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_exit>:

void _exit (int status)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffe7 	bl	8003afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <_exit+0x12>

08003b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e00a      	b.n	8003b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b44:	f3af 8000 	nop.w
 8003b48:	4601      	mov	r1, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	60ba      	str	r2, [r7, #8]
 8003b50:	b2ca      	uxtb	r2, r1
 8003b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dbf0      	blt.n	8003b44 <_read+0x12>
  }

  return len;
 8003b62:	687b      	ldr	r3, [r7, #4]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b94:	605a      	str	r2, [r3, #4]
  return 0;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_isatty>:

int _isatty(int file)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bdc:	4a14      	ldr	r2, [pc, #80]	@ (8003c30 <_sbrk+0x5c>)
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <_sbrk+0x60>)
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <_sbrk+0x64>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <_sbrk+0x64>)
 8003bf2:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <_sbrk+0x68>)
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bf6:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <_sbrk+0x64>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d207      	bcs.n	8003c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c04:	f009 f8f2 	bl	800cdec <__errno>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	e009      	b.n	8003c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c1a:	4b07      	ldr	r3, [pc, #28]	@ (8003c38 <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	4a05      	ldr	r2, [pc, #20]	@ (8003c38 <_sbrk+0x64>)
 8003c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20020000 	.word	0x20020000
 8003c34:	00000400 	.word	0x00000400
 8003c38:	2000058c 	.word	0x2000058c
 8003c3c:	200022c8 	.word	0x200022c8

08003c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c44:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <SystemInit+0x20>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	4a05      	ldr	r2, [pc, #20]	@ (8003c60 <SystemInit+0x20>)
 8003c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c68:	f7ff ffea 	bl	8003c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c6c:	480c      	ldr	r0, [pc, #48]	@ (8003ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c6e:	490d      	ldr	r1, [pc, #52]	@ (8003ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c74:	e002      	b.n	8003c7c <LoopCopyDataInit>

08003c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c7a:	3304      	adds	r3, #4

08003c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c80:	d3f9      	bcc.n	8003c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c82:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c84:	4c0a      	ldr	r4, [pc, #40]	@ (8003cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c88:	e001      	b.n	8003c8e <LoopFillZerobss>

08003c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c8c:	3204      	adds	r2, #4

08003c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c90:	d3fb      	bcc.n	8003c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c92:	f009 f8b1 	bl	800cdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c96:	f7fe fefd 	bl	8002a94 <main>
  bx  lr    
 8003c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ca4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8003ca8:	0800ee04 	.word	0x0800ee04
  ldr r2, =_sbss
 8003cac:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8003cb0:	200022c4 	.word	0x200022c4

08003cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cb4:	e7fe      	b.n	8003cb4 <ADC_IRQHandler>
	...

08003cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <HAL_Init+0x40>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <HAL_Init+0x40>)
 8003cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf8 <HAL_Init+0x40>)
 8003cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a07      	ldr	r2, [pc, #28]	@ (8003cf8 <HAL_Init+0x40>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f000 f94f 	bl	8003f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce6:	200f      	movs	r0, #15
 8003ce8:	f000 f808 	bl	8003cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cec:	f7ff fd94 	bl	8003818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00

08003cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <HAL_InitTick+0x54>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_InitTick+0x58>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f967 	bl	8003fee <HAL_SYSTICK_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00e      	b.n	8003d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b0f      	cmp	r3, #15
 8003d2e:	d80a      	bhi.n	8003d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d30:	2200      	movs	r2, #0
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f000 f92f 	bl	8003f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d3c:	4a06      	ldr	r2, [pc, #24]	@ (8003d58 <HAL_InitTick+0x5c>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000000 	.word	0x20000000
 8003d54:	20000008 	.word	0x20000008
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_IncTick+0x20>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_IncTick+0x24>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4a04      	ldr	r2, [pc, #16]	@ (8003d80 <HAL_IncTick+0x24>)
 8003d6e:	6013      	str	r3, [r2, #0]
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000008 	.word	0x20000008
 8003d80:	20000590 	.word	0x20000590

08003d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return uwTick;
 8003d88:	4b03      	ldr	r3, [pc, #12]	@ (8003d98 <HAL_GetTick+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000590 	.word	0x20000590

08003d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff ffee 	bl	8003d84 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d005      	beq.n	8003dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <HAL_Delay+0x44>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dc2:	bf00      	nop
 8003dc4:	f7ff ffde 	bl	8003d84 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8f7      	bhi.n	8003dc4 <HAL_Delay+0x28>
  {
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000008 	.word	0x20000008

08003de4 <__NVIC_SetPriorityGrouping>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_GetPriorityGrouping>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <__NVIC_GetPriorityGrouping+0x18>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 0307 	and.w	r3, r3, #7
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_EnableIRQ>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db0b      	blt.n	8003e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4907      	ldr	r1, [pc, #28]	@ (8003e80 <__NVIC_EnableIRQ+0x38>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2001      	movs	r0, #1
 8003e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	@ (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	@ (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f50:	d301      	bcc.n	8003f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00f      	b.n	8003f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f56:	4a0a      	ldr	r2, [pc, #40]	@ (8003f80 <SysTick_Config+0x40>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f5e:	210f      	movs	r1, #15
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f7ff ff8e 	bl	8003e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <SysTick_Config+0x40>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <SysTick_Config+0x40>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010

08003f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff29 	bl	8003de4 <__NVIC_SetPriorityGrouping>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fac:	f7ff ff3e 	bl	8003e2c <__NVIC_GetPriorityGrouping>
 8003fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ff8e 	bl	8003ed8 <NVIC_EncodePriority>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff5d 	bl	8003e84 <__NVIC_SetPriority>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff31 	bl	8003e48 <__NVIC_EnableIRQ>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffa2 	bl	8003f40 <SysTick_Config>
 8003ffc:	4603      	mov	r3, r0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	@ 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e16b      	b.n	80042fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004024:	2201      	movs	r2, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	f040 815a 	bne.w	80042f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d005      	beq.n	800405a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004056:	2b02      	cmp	r3, #2
 8004058:	d130      	bne.n	80040bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004090:	2201      	movs	r2, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 0201 	and.w	r2, r3, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d017      	beq.n	80040f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d123      	bne.n	800414c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	08da      	lsrs	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3208      	adds	r2, #8
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	220f      	movs	r2, #15
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3208      	adds	r2, #8
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0203 	and.w	r2, r3, #3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80b4 	beq.w	80042f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b60      	ldr	r3, [pc, #384]	@ (8004314 <HAL_GPIO_Init+0x30c>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	4a5f      	ldr	r2, [pc, #380]	@ (8004314 <HAL_GPIO_Init+0x30c>)
 8004198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800419c:	6453      	str	r3, [r2, #68]	@ 0x44
 800419e:	4b5d      	ldr	r3, [pc, #372]	@ (8004314 <HAL_GPIO_Init+0x30c>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004318 <HAL_GPIO_Init+0x310>)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a52      	ldr	r2, [pc, #328]	@ (800431c <HAL_GPIO_Init+0x314>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <HAL_GPIO_Init+0x226>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a51      	ldr	r2, [pc, #324]	@ (8004320 <HAL_GPIO_Init+0x318>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d025      	beq.n	800422a <HAL_GPIO_Init+0x222>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a50      	ldr	r2, [pc, #320]	@ (8004324 <HAL_GPIO_Init+0x31c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <HAL_GPIO_Init+0x21e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004328 <HAL_GPIO_Init+0x320>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d019      	beq.n	8004222 <HAL_GPIO_Init+0x21a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a4e      	ldr	r2, [pc, #312]	@ (800432c <HAL_GPIO_Init+0x324>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_GPIO_Init+0x216>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004330 <HAL_GPIO_Init+0x328>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00d      	beq.n	800421a <HAL_GPIO_Init+0x212>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_GPIO_Init+0x32c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <HAL_GPIO_Init+0x20e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a4b      	ldr	r2, [pc, #300]	@ (8004338 <HAL_GPIO_Init+0x330>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_GPIO_Init+0x20a>
 800420e:	2307      	movs	r3, #7
 8004210:	e00e      	b.n	8004230 <HAL_GPIO_Init+0x228>
 8004212:	2308      	movs	r3, #8
 8004214:	e00c      	b.n	8004230 <HAL_GPIO_Init+0x228>
 8004216:	2306      	movs	r3, #6
 8004218:	e00a      	b.n	8004230 <HAL_GPIO_Init+0x228>
 800421a:	2305      	movs	r3, #5
 800421c:	e008      	b.n	8004230 <HAL_GPIO_Init+0x228>
 800421e:	2304      	movs	r3, #4
 8004220:	e006      	b.n	8004230 <HAL_GPIO_Init+0x228>
 8004222:	2303      	movs	r3, #3
 8004224:	e004      	b.n	8004230 <HAL_GPIO_Init+0x228>
 8004226:	2302      	movs	r3, #2
 8004228:	e002      	b.n	8004230 <HAL_GPIO_Init+0x228>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_GPIO_Init+0x228>
 800422e:	2300      	movs	r3, #0
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	f002 0203 	and.w	r2, r2, #3
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	4093      	lsls	r3, r2
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004240:	4935      	ldr	r1, [pc, #212]	@ (8004318 <HAL_GPIO_Init+0x310>)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424e:	4b3b      	ldr	r3, [pc, #236]	@ (800433c <HAL_GPIO_Init+0x334>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004272:	4a32      	ldr	r2, [pc, #200]	@ (800433c <HAL_GPIO_Init+0x334>)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004278:	4b30      	ldr	r3, [pc, #192]	@ (800433c <HAL_GPIO_Init+0x334>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800429c:	4a27      	ldr	r2, [pc, #156]	@ (800433c <HAL_GPIO_Init+0x334>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042a2:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_GPIO_Init+0x334>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042c6:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <HAL_GPIO_Init+0x334>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_GPIO_Init+0x334>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f0:	4a12      	ldr	r2, [pc, #72]	@ (800433c <HAL_GPIO_Init+0x334>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	f67f ae90 	bls.w	8004024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3724      	adds	r7, #36	@ 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	40013800 	.word	0x40013800
 800431c:	40020000 	.word	0x40020000
 8004320:	40020400 	.word	0x40020400
 8004324:	40020800 	.word	0x40020800
 8004328:	40020c00 	.word	0x40020c00
 800432c:	40021000 	.word	0x40021000
 8004330:	40021400 	.word	0x40021400
 8004334:	40021800 	.word	0x40021800
 8004338:	40021c00 	.word	0x40021c00
 800433c:	40013c00 	.word	0x40013c00

08004340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e101      	b.n	8004556 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f007 fb85 	bl	800ba7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2203      	movs	r2, #3
 8004376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004380:	d102      	bne.n	8004388 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f003 ff6c 	bl	800826a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7c1a      	ldrb	r2, [r3, #16]
 800439a:	f88d 2000 	strb.w	r2, [sp]
 800439e:	3304      	adds	r3, #4
 80043a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043a2:	f003 fe4b 	bl	800803c <USB_CoreInit>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0ce      	b.n	8004556 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 ff64 	bl	800828c <USB_SetCurrentMode>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0bf      	b.n	8004556 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	73fb      	strb	r3, [r7, #15]
 80043da:	e04a      	b.n	8004472 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3315      	adds	r3, #21
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3314      	adds	r3, #20
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	b298      	uxth	r0, r3
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	332e      	adds	r3, #46	@ 0x2e
 8004418:	4602      	mov	r2, r0
 800441a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3318      	adds	r3, #24
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	331c      	adds	r3, #28
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3320      	adds	r3, #32
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3324      	adds	r3, #36	@ 0x24
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	3301      	adds	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	7bfa      	ldrb	r2, [r7, #15]
 8004478:	429a      	cmp	r2, r3
 800447a:	d3af      	bcc.n	80043dc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	e044      	b.n	800450c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	3301      	adds	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	791b      	ldrb	r3, [r3, #4]
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3b5      	bcc.n	8004482 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7c1a      	ldrb	r2, [r3, #16]
 800451e:	f88d 2000 	strb.w	r2, [sp]
 8004522:	3304      	adds	r3, #4
 8004524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004526:	f003 fefd 	bl	8008324 <USB_DevInit>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e00c      	b.n	8004556 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f004 ff47 	bl	80093e2 <USB_DevDisconnect>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_PCD_Start+0x1c>
 8004576:	2302      	movs	r3, #2
 8004578:	e022      	b.n	80045c0 <HAL_PCD_Start+0x62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 fe4e 	bl	8008248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fef5 	bl	80093a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b08d      	sub	sp, #52	@ 0x34
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f004 ffb3 	bl	800954a <USB_GetMode>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 848c 	bne.w	8004f04 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f004 ff17 	bl	8009424 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8482 	beq.w	8004f02 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f004 ff04 	bl	8009424 <USB_ReadInterrupts>
 800461c:	4603      	mov	r3, r0
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 0202 	and.w	r2, r2, #2
 8004634:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 fef2 	bl	8009424 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d161      	bne.n	800470e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0210 	bic.w	r2, r2, #16
 8004658:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f003 020f 	and.w	r2, r3, #15
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004684:	d124      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d035      	beq.n	80046fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800469c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	6a38      	ldr	r0, [r7, #32]
 80046a6:	f004 fd29 	bl	80090fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b6:	441a      	add	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c8:	441a      	add	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	615a      	str	r2, [r3, #20]
 80046ce:	e016      	b.n	80046fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80046d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046da:	d110      	bne.n	80046fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e2:	2208      	movs	r2, #8
 80046e4:	4619      	mov	r1, r3
 80046e6:	6a38      	ldr	r0, [r7, #32]
 80046e8:	f004 fd08 	bl	80090fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f8:	441a      	add	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0210 	orr.w	r2, r2, #16
 800470c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f004 fe86 	bl	8009424 <USB_ReadInterrupts>
 8004718:	4603      	mov	r3, r0
 800471a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004722:	f040 80a7 	bne.w	8004874 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f004 fe8b 	bl	800944a <USB_ReadDevAllOutEpInterrupt>
 8004734:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004736:	e099      	b.n	800486c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 808e 	beq.w	8004860 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f004 feaf 	bl	80094b2 <USB_ReadDevOutEPInterrupt>
 8004754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	2301      	movs	r3, #1
 8004770:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fea3 	bl	80054c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	2308      	movs	r3, #8
 8004794:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 ff79 	bl	8005690 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b4:	461a      	mov	r2, r3
 80047b6:	2310      	movs	r3, #16
 80047b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d030      	beq.n	8004826 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047cc:	2b80      	cmp	r3, #128	@ 0x80
 80047ce:	d109      	bne.n	80047e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	3304      	adds	r3, #4
 80047f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	78db      	ldrb	r3, [r3, #3]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d108      	bne.n	8004814 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f007 fa3a 	bl	800bc88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	2302      	movs	r3, #2
 8004824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	2320      	movs	r3, #32
 8004840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800485e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	f47f af62 	bne.w	8004738 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f004 fdd3 	bl	8009424 <USB_ReadInterrupts>
 800487e:	4603      	mov	r3, r0
 8004880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004888:	f040 80db 	bne.w	8004a42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f004 fdf4 	bl	800947e <USB_ReadDevAllInEpInterrupt>
 8004896:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800489c:	e0cd      	b.n	8004a3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80c2 	beq.w	8004a2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f004 fe1a 	bl	80094ee <USB_ReadDevInEPInterrupt>
 80048ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d057      	beq.n	8004976 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	2201      	movs	r2, #1
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69f9      	ldr	r1, [r7, #28]
 80048e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e6:	4013      	ands	r3, r2
 80048e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f6:	461a      	mov	r2, r3
 80048f8:	2301      	movs	r3, #1
 80048fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	799b      	ldrb	r3, [r3, #6]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d132      	bne.n	800496a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3320      	adds	r3, #32
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4403      	add	r3, r0
 8004924:	331c      	adds	r3, #28
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4419      	add	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4403      	add	r3, r0
 8004938:	3320      	adds	r3, #32
 800493a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d113      	bne.n	800496a <HAL_PCD_IRQHandler+0x3a2>
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	3324      	adds	r3, #36	@ 0x24
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004962:	461a      	mov	r2, r3
 8004964:	2101      	movs	r1, #1
 8004966:	f004 fe21 	bl	80095ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	b2db      	uxtb	r3, r3
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f007 f904 	bl	800bb7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498c:	461a      	mov	r2, r3
 800498e:	2308      	movs	r3, #8
 8004990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	2310      	movs	r3, #16
 80049ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c4:	461a      	mov	r2, r3
 80049c6:	2340      	movs	r3, #64	@ 0x40
 80049c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d023      	beq.n	8004a1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80049d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049d6:	6a38      	ldr	r0, [r7, #32]
 80049d8:	f003 fe08 	bl	80085ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3310      	adds	r3, #16
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	3304      	adds	r3, #4
 80049ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	78db      	ldrb	r3, [r3, #3]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f007 f951 	bl	800bcac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a16:	461a      	mov	r2, r3
 8004a18:	2302      	movs	r3, #2
 8004a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fcbd 	bl	80053a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	3301      	adds	r3, #1
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f af2e 	bne.w	800489e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fcec 	bl	8009424 <USB_ReadInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a56:	d122      	bne.n	8004a9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d108      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fea3 	bl	80057cc <HAL_PCDEx_LPM_Callback>
 8004a86:	e002      	b.n	8004a8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f007 f8ef 	bl	800bc6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f004 fcbe 	bl	8009424 <USB_ReadInterrupts>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab2:	d112      	bne.n	8004ada <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d102      	bne.n	8004aca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f007 f8ab 	bl	800bc20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004ad8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fca0 	bl	8009424 <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aee:	f040 80b7 	bne.w	8004c60 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2110      	movs	r1, #16
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f003 fd6d 	bl	80085ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e046      	b.n	8004ba6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b24:	461a      	mov	r2, r3
 8004b26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	791b      	ldrb	r3, [r3, #4]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d3b2      	bcc.n	8004b18 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7bdb      	ldrb	r3, [r3, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bde:	f043 030b 	orr.w	r3, r3, #11
 8004be2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf4:	f043 030b 	orr.w	r3, r3, #11
 8004bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bfa:	e015      	b.n	8004c28 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c0e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004c12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c22:	f043 030b 	orr.w	r3, r3, #11
 8004c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f004 fcae 	bl	80095ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f004 fbdd 	bl	8009424 <USB_ReadInterrupts>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d123      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 fc73 	bl	8009566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f003 fd2a 	bl	80086de <USB_GetDevSpeed>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	f001 fa07 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 8004c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f003 fa2e 	bl	8008104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f006 ff90 	bl	800bbce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f004 fbae 	bl	8009424 <USB_ReadInterrupts>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d10a      	bne.n	8004ce8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f006 ff6d 	bl	800bbb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f002 0208 	and.w	r2, r2, #8
 8004ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 fb99 	bl	8009424 <USB_ReadInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf8:	2b80      	cmp	r3, #128	@ 0x80
 8004cfa:	d123      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d08:	2301      	movs	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0c:	e014      	b.n	8004d38 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d105      	bne.n	8004d32 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb0a 	bl	8005346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	3301      	adds	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d3e4      	bcc.n	8004d0e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 fb6b 	bl	8009424 <USB_ReadInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d58:	d13c      	bne.n	8004dd4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5e:	e02b      	b.n	8004db8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3318      	adds	r3, #24
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d115      	bne.n	8004db2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da12      	bge.n	8004db2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3317      	adds	r3, #23
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 faca 	bl	8005346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	791b      	ldrb	r3, [r3, #4]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d3cd      	bcc.n	8004d60 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f004 fb23 	bl	8009424 <USB_ReadInterrupts>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de8:	d156      	bne.n	8004e98 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dea:	2301      	movs	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dee:	e045      	b.n	8004e7c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d12e      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da2b      	bge.n	8004e76 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004e2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d121      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e72:	6053      	str	r3, [r2, #4]
            break;
 8004e74:	e008      	b.n	8004e88 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	3301      	adds	r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d3b3      	bcc.n	8004df0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f004 fac1 	bl	8009424 <USB_ReadInterrupts>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eac:	d10a      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f006 ff0e 	bl	800bcd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f004 faab 	bl	8009424 <USB_ReadInterrupts>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d115      	bne.n	8004f04 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f006 fefe 	bl	800bcec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e000      	b.n	8004f04 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004f02:	bf00      	nop
    }
  }
}
 8004f04:	3734      	adds	r7, #52	@ 0x34
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}

08004f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_PCD_SetAddress+0x1a>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e012      	b.n	8004f4a <HAL_PCD_SetAddress+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fa0a 	bl	8009354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	70fb      	strb	r3, [r7, #3]
 8004f64:	460b      	mov	r3, r1
 8004f66:	803b      	strh	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da0f      	bge.n	8004f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	f003 020f 	and.w	r2, r3, #15
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	3310      	adds	r3, #16
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	705a      	strb	r2, [r3, #1]
 8004f96:	e00f      	b.n	8004fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 020f 	and.w	r2, r3, #15
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004fc4:	883b      	ldrh	r3, [r7, #0]
 8004fc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	78ba      	ldrb	r2, [r7, #2]
 8004fd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fe6:	78bb      	ldrb	r3, [r7, #2]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d102      	bne.n	8004ff2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_PCD_EP_Open+0xae>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e00e      	b.n	800501e <HAL_PCD_EP_Open+0xcc>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 fb8a 	bl	8008728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800501c:	7afb      	ldrb	r3, [r7, #11]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005036:	2b00      	cmp	r3, #0
 8005038:	da0f      	bge.n	800505a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	3310      	adds	r3, #16
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	3304      	adds	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	705a      	strb	r2, [r3, #1]
 8005058:	e00f      	b.n	800507a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	f003 020f 	and.w	r2, r3, #15
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	3304      	adds	r3, #4
 8005072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_PCD_EP_Close+0x6e>
 8005090:	2302      	movs	r3, #2
 8005092:	e00e      	b.n	80050b2 <HAL_PCD_EP_Close+0x8c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68f9      	ldr	r1, [r7, #12]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 fbc8 	bl	8008838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	460b      	mov	r3, r1
 80050c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ca:	7afb      	ldrb	r3, [r7, #11]
 80050cc:	f003 020f 	and.w	r2, r3, #15
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050fc:	7afb      	ldrb	r3, [r7, #11]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	b2da      	uxtb	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	799b      	ldrb	r3, [r3, #6]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	799b      	ldrb	r3, [r3, #6]
 800511e:	461a      	mov	r2, r3
 8005120:	6979      	ldr	r1, [r7, #20]
 8005122:	f003 fc65 	bl	80089f0 <USB_EPStartXfer>

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	460b      	mov	r3, r1
 800516e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	3310      	adds	r3, #16
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2200      	movs	r2, #0
 8005198:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2201      	movs	r2, #1
 800519e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051a0:	7afb      	ldrb	r3, [r7, #11]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	799b      	ldrb	r3, [r3, #6]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d102      	bne.n	80051ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	799b      	ldrb	r3, [r3, #6]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	f003 fc13 	bl	80089f0 <USB_EPStartXfer>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	7912      	ldrb	r2, [r2, #4]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e04f      	b.n	8005292 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da0f      	bge.n	800521a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	3310      	adds	r3, #16
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	3304      	adds	r3, #4
 8005210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	705a      	strb	r2, [r3, #1]
 8005218:	e00d      	b.n	8005236 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	4613      	mov	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4413      	add	r3, r2
 800522c:	3304      	adds	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_PCD_EP_SetStall+0x82>
 8005252:	2302      	movs	r3, #2
 8005254:	e01d      	b.n	8005292 <HAL_PCD_EP_SetStall+0xbe>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	4618      	mov	r0, r3
 8005266:	f003 ffa1 	bl	80091ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7999      	ldrb	r1, [r3, #6]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005282:	461a      	mov	r2, r3
 8005284:	f004 f992 	bl	80095ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	7912      	ldrb	r2, [r2, #4]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e042      	b.n	800533e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da0f      	bge.n	80052e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3310      	adds	r3, #16
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	705a      	strb	r2, [r3, #1]
 80052de:	e00f      	b.n	8005300 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	f003 020f 	and.w	r2, r3, #15
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	3304      	adds	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_PCD_EP_ClrStall+0x86>
 800531c:	2302      	movs	r3, #2
 800531e:	e00e      	b.n	800533e <HAL_PCD_EP_ClrStall+0xa4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	4618      	mov	r0, r3
 8005330:	f003 ffaa 	bl	8009288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	460b      	mov	r3, r1
 8005350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	da0c      	bge.n	8005374 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	3310      	adds	r3, #16
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	3304      	adds	r3, #4
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e00c      	b.n	800538e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 020f 	and.w	r2, r3, #15
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	3304      	adds	r3, #4
 800538c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	4618      	mov	r0, r3
 8005396:	f003 fdc9 	bl	8008f2c <USB_EPStopXfer>
 800539a:	4603      	mov	r3, r0
 800539c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800539e:	7afb      	ldrb	r3, [r7, #11]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	@ 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3310      	adds	r3, #16
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	3304      	adds	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d901      	bls.n	80053e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e06b      	b.n	80054b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d902      	bls.n	80053fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3303      	adds	r3, #3
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005404:	e02a      	b.n	800545c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	429a      	cmp	r2, r3
 800541a:	d902      	bls.n	8005422 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3303      	adds	r3, #3
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	4603      	mov	r3, r0
 800543e:	6978      	ldr	r0, [r7, #20]
 8005440:	f003 fe1e 	bl	8009080 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	441a      	add	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	441a      	add	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	429a      	cmp	r2, r3
 8005470:	d809      	bhi.n	8005486 <PCD_WriteEmptyTxFifo+0xde>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800547a:	429a      	cmp	r2, r3
 800547c:	d203      	bcs.n	8005486 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1bf      	bne.n	8005406 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	429a      	cmp	r2, r3
 8005490:	d811      	bhi.n	80054b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	2201      	movs	r2, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	6939      	ldr	r1, [r7, #16]
 80054ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b2:	4013      	ands	r3, r2
 80054b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	333c      	adds	r3, #60	@ 0x3c
 80054d8:	3304      	adds	r3, #4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	799b      	ldrb	r3, [r3, #6]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d17b      	bne.n	80055ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d015      	beq.n	800552c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4a61      	ldr	r2, [pc, #388]	@ (8005688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	f240 80b9 	bls.w	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80b3 	beq.w	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005522:	461a      	mov	r2, r3
 8005524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005528:	6093      	str	r3, [r2, #8]
 800552a:	e0a7      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005542:	461a      	mov	r2, r3
 8005544:	2320      	movs	r3, #32
 8005546:	6093      	str	r3, [r2, #8]
 8005548:	e098      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 8093 	bne.w	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4a4b      	ldr	r2, [pc, #300]	@ (8005688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d90f      	bls.n	800557e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800557a:	6093      	str	r3, [r2, #8]
 800557c:	e07e      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	3304      	adds	r3, #4
 8005592:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	0159      	lsls	r1, r3, #5
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	440b      	add	r3, r1
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d114      	bne.n	80055e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055c8:	461a      	mov	r2, r3
 80055ca:	2101      	movs	r1, #1
 80055cc:	f003 ffee 	bl	80095ac <USB_EP0_OutStart>
 80055d0:	e006      	b.n	80055e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f006 faae 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
 80055ec:	e046      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4a26      	ldr	r2, [pc, #152]	@ (800568c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d124      	bne.n	8005640 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005612:	6093      	str	r3, [r2, #8]
 8005614:	e032      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	461a      	mov	r2, r3
 800562e:	2320      	movs	r3, #32
 8005630:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f006 fa85 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
 800563e:	e01d      	b.n	800567c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d114      	bne.n	8005670 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005668:	461a      	mov	r2, r3
 800566a:	2100      	movs	r1, #0
 800566c:	f003 ff9e 	bl	80095ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f006 fa66 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	4f54300a 	.word	0x4f54300a
 800568c:	4f54310a 	.word	0x4f54310a

08005690 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	333c      	adds	r3, #60	@ 0x3c
 80056a8:	3304      	adds	r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a15      	ldr	r2, [pc, #84]	@ (8005718 <PCD_EP_OutSetupPacket_int+0x88>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d90e      	bls.n	80056e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	461a      	mov	r2, r3
 80056de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f006 fa1d 	bl	800bb24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d90c      	bls.n	800570c <PCD_EP_OutSetupPacket_int+0x7c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	799b      	ldrb	r3, [r3, #6]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d108      	bne.n	800570c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005704:	461a      	mov	r2, r3
 8005706:	2101      	movs	r1, #1
 8005708:	f003 ff50 	bl	80095ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	4f54300a 	.word	0x4f54300a

0800571c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
 8005728:	4613      	mov	r3, r2
 800572a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800573a:	883b      	ldrh	r3, [r7, #0]
 800573c:	0419      	lsls	r1, r3, #16
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	430a      	orrs	r2, r1
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28
 8005748:	e028      	b.n	800579c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e00d      	b.n	800577a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	3340      	adds	r3, #64	@ 0x40
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	3301      	adds	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	3b01      	subs	r3, #1
 8005780:	429a      	cmp	r2, r3
 8005782:	d3ec      	bcc.n	800575e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005784:	883b      	ldrh	r3, [r7, #0]
 8005786:	0418      	lsls	r0, r3, #16
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	3b01      	subs	r3, #1
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	4302      	orrs	r2, r0
 8005794:	3340      	adds	r3, #64	@ 0x40
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	887a      	ldrh	r2, [r7, #2]
 80057bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e267      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d075      	beq.n	80058ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005802:	4b88      	ldr	r3, [pc, #544]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b04      	cmp	r3, #4
 800580c:	d00c      	beq.n	8005828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580e:	4b85      	ldr	r3, [pc, #532]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005816:	2b08      	cmp	r3, #8
 8005818:	d112      	bne.n	8005840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800581a:	4b82      	ldr	r3, [pc, #520]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005826:	d10b      	bne.n	8005840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005828:	4b7e      	ldr	r3, [pc, #504]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d05b      	beq.n	80058ec <HAL_RCC_OscConfig+0x108>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d157      	bne.n	80058ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e242      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005848:	d106      	bne.n	8005858 <HAL_RCC_OscConfig+0x74>
 800584a:	4b76      	ldr	r3, [pc, #472]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a75      	ldr	r2, [pc, #468]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e01d      	b.n	8005894 <HAL_RCC_OscConfig+0xb0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0x98>
 8005862:	4b70      	ldr	r3, [pc, #448]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6f      	ldr	r2, [pc, #444]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6c      	ldr	r2, [pc, #432]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e00b      	b.n	8005894 <HAL_RCC_OscConfig+0xb0>
 800587c:	4b69      	ldr	r3, [pc, #420]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a68      	ldr	r2, [pc, #416]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b66      	ldr	r3, [pc, #408]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a65      	ldr	r2, [pc, #404]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 800588e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fe fa72 	bl	8003d84 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fe fa6e 	bl	8003d84 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	@ 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e207      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0xc0>
 80058c2:	e014      	b.n	80058ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fe fa5e 	bl	8003d84 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fe fa5a 	bl	8003d84 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	@ 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e1f3      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058de:	4b51      	ldr	r3, [pc, #324]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0xe8>
 80058ea:	e000      	b.n	80058ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d063      	beq.n	80059c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005906:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800590e:	2b08      	cmp	r3, #8
 8005910:	d11c      	bne.n	800594c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005912:	4b44      	ldr	r3, [pc, #272]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591e:	4b41      	ldr	r3, [pc, #260]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_RCC_OscConfig+0x152>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d001      	beq.n	8005936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e1c7      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005936:	4b3b      	ldr	r3, [pc, #236]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4937      	ldr	r1, [pc, #220]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	e03a      	b.n	80059c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005954:	4b34      	ldr	r3, [pc, #208]	@ (8005a28 <HAL_RCC_OscConfig+0x244>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fe fa13 	bl	8003d84 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005962:	f7fe fa0f 	bl	8003d84 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e1a8      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005974:	4b2b      	ldr	r3, [pc, #172]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4925      	ldr	r1, [pc, #148]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]
 8005994:	e015      	b.n	80059c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005996:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <HAL_RCC_OscConfig+0x244>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fe f9f2 	bl	8003d84 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a4:	f7fe f9ee 	bl	8003d84 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e187      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d036      	beq.n	8005a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d6:	4b15      	ldr	r3, [pc, #84]	@ (8005a2c <HAL_RCC_OscConfig+0x248>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fe f9d2 	bl	8003d84 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fe f9ce 	bl	8003d84 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e167      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <HAL_RCC_OscConfig+0x240>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x200>
 8005a02:	e01b      	b.n	8005a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a04:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_OscConfig+0x248>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0a:	f7fe f9bb 	bl	8003d84 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a10:	e00e      	b.n	8005a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fe f9b7 	bl	8003d84 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d907      	bls.n	8005a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e150      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
 8005a24:	40023800 	.word	0x40023800
 8005a28:	42470000 	.word	0x42470000
 8005a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a30:	4b88      	ldr	r3, [pc, #544]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ea      	bne.n	8005a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8097 	beq.w	8005b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4e:	4b81      	ldr	r3, [pc, #516]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10f      	bne.n	8005a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	4a7c      	ldr	r2, [pc, #496]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7a:	4b77      	ldr	r3, [pc, #476]	@ (8005c58 <HAL_RCC_OscConfig+0x474>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d118      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a86:	4b74      	ldr	r3, [pc, #464]	@ (8005c58 <HAL_RCC_OscConfig+0x474>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a73      	ldr	r2, [pc, #460]	@ (8005c58 <HAL_RCC_OscConfig+0x474>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a92:	f7fe f977 	bl	8003d84 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9a:	f7fe f973 	bl	8003d84 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e10c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aac:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <HAL_RCC_OscConfig+0x474>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d106      	bne.n	8005ace <HAL_RCC_OscConfig+0x2ea>
 8005ac0:	4b64      	ldr	r3, [pc, #400]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac4:	4a63      	ldr	r2, [pc, #396]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005acc:	e01c      	b.n	8005b08 <HAL_RCC_OscConfig+0x324>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x30c>
 8005ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ada:	4a5e      	ldr	r2, [pc, #376]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005adc:	f043 0304 	orr.w	r3, r3, #4
 8005ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aee:	e00b      	b.n	8005b08 <HAL_RCC_OscConfig+0x324>
 8005af0:	4b58      	ldr	r3, [pc, #352]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af4:	4a57      	ldr	r2, [pc, #348]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005afc:	4b55      	ldr	r3, [pc, #340]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b00:	4a54      	ldr	r2, [pc, #336]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b02:	f023 0304 	bic.w	r3, r3, #4
 8005b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b10:	f7fe f938 	bl	8003d84 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b18:	f7fe f934 	bl	8003d84 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0cb      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2e:	4b49      	ldr	r3, [pc, #292]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ee      	beq.n	8005b18 <HAL_RCC_OscConfig+0x334>
 8005b3a:	e014      	b.n	8005b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3c:	f7fe f922 	bl	8003d84 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fe f91e 	bl	8003d84 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e0b5      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ee      	bne.n	8005b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6c:	4b39      	ldr	r3, [pc, #228]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	4a38      	ldr	r2, [pc, #224]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80a1 	beq.w	8005cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b82:	4b34      	ldr	r3, [pc, #208]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d05c      	beq.n	8005c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d141      	bne.n	8005c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b96:	4b31      	ldr	r3, [pc, #196]	@ (8005c5c <HAL_RCC_OscConfig+0x478>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fe f8f2 	bl	8003d84 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fe f8ee 	bl	8003d84 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e087      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb6:	4b27      	ldr	r3, [pc, #156]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	019b      	lsls	r3, r3, #6
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	491b      	ldr	r1, [pc, #108]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bec:	4b1b      	ldr	r3, [pc, #108]	@ (8005c5c <HAL_RCC_OscConfig+0x478>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fe f8c7 	bl	8003d84 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fe f8c3 	bl	8003d84 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e05c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0c:	4b11      	ldr	r3, [pc, #68]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x416>
 8005c18:	e054      	b.n	8005cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1a:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCC_OscConfig+0x478>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c20:	f7fe f8b0 	bl	8003d84 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fe f8ac 	bl	8003d84 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e045      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x444>
 8005c46:	e03d      	b.n	8005cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e038      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
 8005c54:	40023800 	.word	0x40023800
 8005c58:	40007000 	.word	0x40007000
 8005c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <HAL_RCC_OscConfig+0x4ec>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d028      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d121      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d11a      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d111      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	085b      	lsrs	r3, r3, #1
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40023800 	.word	0x40023800

08005cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0cc      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b68      	ldr	r3, [pc, #416]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d90c      	bls.n	8005d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b65      	ldr	r3, [pc, #404]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b63      	ldr	r3, [pc, #396]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0b8      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d020      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d28:	4b59      	ldr	r3, [pc, #356]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a58      	ldr	r2, [pc, #352]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d40:	4b53      	ldr	r3, [pc, #332]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a52      	ldr	r2, [pc, #328]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d4c:	4b50      	ldr	r3, [pc, #320]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	494d      	ldr	r1, [pc, #308]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d044      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d107      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	4b47      	ldr	r3, [pc, #284]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d119      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e07f      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d003      	beq.n	8005d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d107      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d92:	4b3f      	ldr	r3, [pc, #252]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e06f      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da2:	4b3b      	ldr	r3, [pc, #236]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e067      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005db2:	4b37      	ldr	r3, [pc, #220]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 0203 	bic.w	r2, r3, #3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4934      	ldr	r1, [pc, #208]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dc4:	f7fd ffde 	bl	8003d84 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	e00a      	b.n	8005de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dcc:	f7fd ffda 	bl	8003d84 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e04f      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 020c 	and.w	r2, r3, #12
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d1eb      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005df4:	4b25      	ldr	r3, [pc, #148]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d20c      	bcs.n	8005e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b22      	ldr	r3, [pc, #136]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0a:	4b20      	ldr	r3, [pc, #128]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e032      	b.n	8005e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e28:	4b19      	ldr	r3, [pc, #100]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4916      	ldr	r1, [pc, #88]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e46:	4b12      	ldr	r3, [pc, #72]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	490e      	ldr	r1, [pc, #56]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e5a:	f000 f821 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	490a      	ldr	r1, [pc, #40]	@ (8005e94 <HAL_RCC_ClockConfig+0x1c0>)
 8005e6c:	5ccb      	ldrb	r3, [r1, r3]
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	4a09      	ldr	r2, [pc, #36]	@ (8005e98 <HAL_RCC_ClockConfig+0x1c4>)
 8005e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e76:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_RCC_ClockConfig+0x1c8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fd ff3e 	bl	8003cfc <HAL_InitTick>

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40023c00 	.word	0x40023c00
 8005e90:	40023800 	.word	0x40023800
 8005e94:	0800ea64 	.word	0x0800ea64
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	20000004 	.word	0x20000004

08005ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b094      	sub	sp, #80	@ 0x50
 8005ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb8:	4b79      	ldr	r3, [pc, #484]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 030c 	and.w	r3, r3, #12
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	f200 80e1 	bhi.w	800608c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d003      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x3a>
 8005ed2:	e0db      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed4:	4b73      	ldr	r3, [pc, #460]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ed8:	e0db      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eda:	4b72      	ldr	r3, [pc, #456]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ede:	e0d8      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eea:	4b6d      	ldr	r3, [pc, #436]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d063      	beq.n	8005fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	2200      	movs	r2, #0
 8005efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f12:	4622      	mov	r2, r4
 8005f14:	462b      	mov	r3, r5
 8005f16:	f04f 0000 	mov.w	r0, #0
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	0159      	lsls	r1, r3, #5
 8005f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f24:	0150      	lsls	r0, r2, #5
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	1a51      	subs	r1, r2, r1
 8005f2e:	6139      	str	r1, [r7, #16]
 8005f30:	4629      	mov	r1, r5
 8005f32:	eb63 0301 	sbc.w	r3, r3, r1
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f44:	4659      	mov	r1, fp
 8005f46:	018b      	lsls	r3, r1, #6
 8005f48:	4651      	mov	r1, sl
 8005f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f4e:	4651      	mov	r1, sl
 8005f50:	018a      	lsls	r2, r1, #6
 8005f52:	4651      	mov	r1, sl
 8005f54:	ebb2 0801 	subs.w	r8, r2, r1
 8005f58:	4659      	mov	r1, fp
 8005f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f72:	4690      	mov	r8, r2
 8005f74:	4699      	mov	r9, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	eb18 0303 	adds.w	r3, r8, r3
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	462b      	mov	r3, r5
 8005f80:	eb49 0303 	adc.w	r3, r9, r3
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f92:	4629      	mov	r1, r5
 8005f94:	028b      	lsls	r3, r1, #10
 8005f96:	4621      	mov	r1, r4
 8005f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	028a      	lsls	r2, r1, #10
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fb0:	f7fa fe1a 	bl	8000be8 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4613      	mov	r3, r2
 8005fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbc:	e058      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fbe:	4b38      	ldr	r3, [pc, #224]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	099b      	lsrs	r3, r3, #6
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	4611      	mov	r1, r2
 8005fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fce:	623b      	str	r3, [r7, #32]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f04f 0000 	mov.w	r0, #0
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	0159      	lsls	r1, r3, #5
 8005fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fea:	0150      	lsls	r0, r2, #5
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800600c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006010:	ebb2 040a 	subs.w	r4, r2, sl
 8006014:	eb63 050b 	sbc.w	r5, r3, fp
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	00eb      	lsls	r3, r5, #3
 8006022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006026:	00e2      	lsls	r2, r4, #3
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	4643      	mov	r3, r8
 800602e:	18e3      	adds	r3, r4, r3
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	464b      	mov	r3, r9
 8006034:	eb45 0303 	adc.w	r3, r5, r3
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006046:	4629      	mov	r1, r5
 8006048:	028b      	lsls	r3, r1, #10
 800604a:	4621      	mov	r1, r4
 800604c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006050:	4621      	mov	r1, r4
 8006052:	028a      	lsls	r2, r1, #10
 8006054:	4610      	mov	r0, r2
 8006056:	4619      	mov	r1, r3
 8006058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800605a:	2200      	movs	r2, #0
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	61fa      	str	r2, [r7, #28]
 8006060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006064:	f7fa fdc0 	bl	8000be8 <__aeabi_uldivmod>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4613      	mov	r3, r2
 800606e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006070:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	3301      	adds	r3, #1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800608a:	e002      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800608c:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800608e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006094:	4618      	mov	r0, r3
 8006096:	3750      	adds	r7, #80	@ 0x50
 8006098:	46bd      	mov	sp, r7
 800609a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	00f42400 	.word	0x00f42400

080060a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060ac:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000000 	.word	0x20000000

080060c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e041      	b.n	8006156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fd fbbe 	bl	8003868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 f9aa 	bl	8006458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e041      	b.n	80061f4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f839 	bl	80061fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f000 f95b 	bl	8006458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_TIM_OC_ConfigChannel+0x1e>
 800622a:	2302      	movs	r3, #2
 800622c:	e048      	b.n	80062c0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d839      	bhi.n	80062b0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800623c:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <HAL_TIM_OC_ConfigChannel+0x34>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006279 	.word	0x08006279
 8006248:	080062b1 	.word	0x080062b1
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	08006287 	.word	0x08006287
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	08006295 	.word	0x08006295
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062a3 	.word	0x080062a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f996 	bl	80065b0 <TIM_OC1_SetConfig>
      break;
 8006284:	e017      	b.n	80062b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f9ff 	bl	8006690 <TIM_OC2_SetConfig>
      break;
 8006292:	e010      	b.n	80062b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fa6e 	bl	800677c <TIM_OC3_SetConfig>
      break;
 80062a0:	e009      	b.n	80062b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fadb 	bl	8006864 <TIM_OC4_SetConfig>
      break;
 80062ae:	e002      	b.n	80062b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_ConfigClockSource+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0b4      	b.n	800644e <HAL_TIM_ConfigClockSource+0x186>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800630a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631c:	d03e      	beq.n	800639c <HAL_TIM_ConfigClockSource+0xd4>
 800631e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006322:	f200 8087 	bhi.w	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	f000 8086 	beq.w	800643a <HAL_TIM_ConfigClockSource+0x172>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	d87f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b70      	cmp	r3, #112	@ 0x70
 8006336:	d01a      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xa6>
 8006338:	2b70      	cmp	r3, #112	@ 0x70
 800633a:	d87b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b60      	cmp	r3, #96	@ 0x60
 800633e:	d050      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006340:	2b60      	cmp	r3, #96	@ 0x60
 8006342:	d877      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d03c      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006348:	2b50      	cmp	r3, #80	@ 0x50
 800634a:	d873      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d058      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x13a>
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d86f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b30      	cmp	r3, #48	@ 0x30
 8006356:	d064      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b30      	cmp	r3, #48	@ 0x30
 800635a:	d86b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d060      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d867      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d05c      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	2b10      	cmp	r3, #16
 800636a:	d05a      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	e062      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800637e:	f000 fb41 	bl	8006a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	609a      	str	r2, [r3, #8]
      break;
 800639a:	e04f      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	f000 fb2a 	bl	8006a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063be:	609a      	str	r2, [r3, #8]
      break;
 80063c0:	e03c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	461a      	mov	r2, r3
 80063d0:	f000 fa9e 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2150      	movs	r1, #80	@ 0x50
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 faf7 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80063e0:	e02c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fabd 	bl	800696e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2160      	movs	r1, #96	@ 0x60
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fae7 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006400:	e01c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fa7e 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2140      	movs	r1, #64	@ 0x40
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fad7 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006420:	e00c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f000 face 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006432:	e003      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e000      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800643a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a46      	ldr	r2, [pc, #280]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d00f      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a43      	ldr	r2, [pc, #268]	@ (8006588 <TIM_Base_SetConfig+0x130>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a42      	ldr	r2, [pc, #264]	@ (800658c <TIM_Base_SetConfig+0x134>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a41      	ldr	r2, [pc, #260]	@ (8006590 <TIM_Base_SetConfig+0x138>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a40      	ldr	r2, [pc, #256]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a35      	ldr	r2, [pc, #212]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d02b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b8:	d027      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a32      	ldr	r2, [pc, #200]	@ (8006588 <TIM_Base_SetConfig+0x130>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d023      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a31      	ldr	r2, [pc, #196]	@ (800658c <TIM_Base_SetConfig+0x134>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01f      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <TIM_Base_SetConfig+0x138>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d017      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006598 <TIM_Base_SetConfig+0x140>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2d      	ldr	r2, [pc, #180]	@ (800659c <TIM_Base_SetConfig+0x144>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	@ (80065a0 <TIM_Base_SetConfig+0x148>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	@ (80065a4 <TIM_Base_SetConfig+0x14c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <TIM_Base_SetConfig+0x150>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <TIM_Base_SetConfig+0x154>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_Base_SetConfig+0xf8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a12      	ldr	r2, [pc, #72]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d103      	bne.n	8006558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]
  }
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800
 80065a4:	40001800 	.word	0x40001800
 80065a8:	40001c00 	.word	0x40001c00
 80065ac:	40002000 	.word	0x40002000

080065b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0201 	bic.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0302 	bic.w	r3, r3, #2
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a20      	ldr	r2, [pc, #128]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC1_SetConfig+0x64>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1f      	ldr	r2, [pc, #124]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d10c      	bne.n	800662e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0308 	bic.w	r3, r3, #8
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC1_SetConfig+0x8e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a14      	ldr	r2, [pc, #80]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d111      	bne.n	8006662 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40010000 	.word	0x40010000
 800668c:	40010400 	.word	0x40010400

08006690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f023 0210 	bic.w	r2, r3, #16
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0320 	bic.w	r3, r3, #32
 80066da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a22      	ldr	r2, [pc, #136]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_OC2_SetConfig+0x68>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a21      	ldr	r2, [pc, #132]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10d      	bne.n	8006714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x94>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800672a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a21      	ldr	r2, [pc, #132]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a20      	ldr	r2, [pc, #128]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC3_SetConfig+0x92>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d113      	bne.n	8006836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a12      	ldr	r2, [pc, #72]	@ (8006908 <TIM_OC4_SetConfig+0xa4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC4_SetConfig+0x68>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a11      	ldr	r2, [pc, #68]	@ (800690c <TIM_OC4_SetConfig+0xa8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0210 	bic.w	r2, r3, #16
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f043 0307 	orr.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e05a      	b.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a15      	ldr	r2, [pc, #84]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d10c      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e03d      	b.n	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <LL_ADC_REG_SetSequencerLength>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8006c3a:	481c      	ldr	r0, [pc, #112]	@ (8006cac <LL_ADC_CommonInit+0x80>)
 8006c3c:	f7ff ffe3 	bl	8006c06 <LL_ADC_IsEnabled>
 8006c40:	4604      	mov	r4, r0
 8006c42:	481b      	ldr	r0, [pc, #108]	@ (8006cb0 <LL_ADC_CommonInit+0x84>)
 8006c44:	f7ff ffdf 	bl	8006c06 <LL_ADC_IsEnabled>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	431c      	orrs	r4, r3
 8006c4c:	4819      	ldr	r0, [pc, #100]	@ (8006cb4 <LL_ADC_CommonInit+0x88>)
 8006c4e:	f7ff ffda 	bl	8006c06 <LL_ADC_IsEnabled>
 8006c52:	4603      	mov	r3, r0
 8006c54:	4323      	orrs	r3, r4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d120      	bne.n	8006c9c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d012      	beq.n	8006c88 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <LL_ADC_CommonInit+0x8c>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6811      	ldr	r1, [r2, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	4311      	orrs	r1, r2
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	6892      	ldr	r2, [r2, #8]
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	68d2      	ldr	r2, [r2, #12]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	e00b      	b.n	8006ca0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <LL_ADC_CommonInit+0x8c>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	e001      	b.n	8006ca0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40012000 	.word	0x40012000
 8006cb0:	40012100 	.word	0x40012100
 8006cb4:	40012200 	.word	0x40012200
 8006cb8:	fffc10e0 	.word	0xfffc10e0

08006cbc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ff9b 	bl	8006c06 <LL_ADC_IsEnabled>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d117      	bne.n	8006d06 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006cde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	6892      	ldr	r2, [r2, #8]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	e001      	b.n	8006d0a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff ff6f 	bl	8006c06 <LL_ADC_IsEnabled>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d12b      	bne.n	8006d86 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	605a      	str	r2, [r3, #4]
 8006d48:	e005      	b.n	8006d56 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <LL_ADC_REG_Init+0x80>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	68d2      	ldr	r2, [r2, #12]
 8006d6a:	4311      	orrs	r1, r2
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	6912      	ldr	r2, [r2, #16]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff ff2e 	bl	8006be0 <LL_ADC_REG_SetSequencerLength>
 8006d84:	e001      	b.n	8006d8a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	c0fffcfd 	.word	0xc0fffcfd

08006d98 <LL_GPIO_SetPinMode>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b08b      	sub	sp, #44	@ 0x2c
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	fa93 f3a3 	rbit	r3, r3
 8006db2:	613b      	str	r3, [r7, #16]
  return result;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006dbe:	2320      	movs	r3, #32
 8006dc0:	e003      	b.n	8006dca <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	fab3 f383 	clz	r3, r3
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	2103      	movs	r1, #3
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	401a      	ands	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	fa93 f3a3 	rbit	r3, r3
 8006de0:	61fb      	str	r3, [r7, #28]
  return result;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006dec:	2320      	movs	r3, #32
 8006dee:	e003      	b.n	8006df8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	fab3 f383 	clz	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	372c      	adds	r7, #44	@ 0x2c
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <LL_GPIO_SetPinOutputType>:
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	431a      	orrs	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <LL_GPIO_SetPinSpeed>:
{
 8006e42:	b480      	push	{r7}
 8006e44:	b08b      	sub	sp, #44	@ 0x2c
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	613b      	str	r3, [r7, #16]
  return result;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006e68:	2320      	movs	r3, #32
 8006e6a:	e003      	b.n	8006e74 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	fab3 f383 	clz	r3, r3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	2103      	movs	r1, #3
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	fa93 f3a3 	rbit	r3, r3
 8006e8a:	61fb      	str	r3, [r7, #28]
  return result;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006e96:	2320      	movs	r3, #32
 8006e98:	e003      	b.n	8006ea2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	bf00      	nop
 8006eb2:	372c      	adds	r7, #44	@ 0x2c
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <LL_GPIO_SetPinPull>:
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b08b      	sub	sp, #44	@ 0x2c
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	fa93 f3a3 	rbit	r3, r3
 8006ed6:	613b      	str	r3, [r7, #16]
  return result;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006ee2:	2320      	movs	r3, #32
 8006ee4:	e003      	b.n	8006eee <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	fab3 f383 	clz	r3, r3
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	401a      	ands	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	fa93 f3a3 	rbit	r3, r3
 8006f04:	61fb      	str	r3, [r7, #28]
  return result;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006f10:	2320      	movs	r3, #32
 8006f12:	e003      	b.n	8006f1c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	fab3 f383 	clz	r3, r3
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	431a      	orrs	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	60da      	str	r2, [r3, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	372c      	adds	r7, #44	@ 0x2c
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_GPIO_SetAFPin_0_7>:
{
 8006f36:	b480      	push	{r7}
 8006f38:	b08b      	sub	sp, #44	@ 0x2c
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	fa93 f3a3 	rbit	r3, r3
 8006f50:	613b      	str	r3, [r7, #16]
  return result;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006f5c:	2320      	movs	r3, #32
 8006f5e:	e003      	b.n	8006f68 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	fab3 f383 	clz	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	210f      	movs	r1, #15
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	fa93 f3a3 	rbit	r3, r3
 8006f7e:	61fb      	str	r3, [r7, #28]
  return result;
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006f8a:	2320      	movs	r3, #32
 8006f8c:	e003      	b.n	8006f96 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	fab3 f383 	clz	r3, r3
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	372c      	adds	r7, #44	@ 0x2c
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_GPIO_SetAFPin_8_15>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b08b      	sub	sp, #44	@ 0x2c
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	fa93 f3a3 	rbit	r3, r3
 8006fcc:	613b      	str	r3, [r7, #16]
  return result;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006fd8:	2320      	movs	r3, #32
 8006fda:	e003      	b.n	8006fe4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	fab3 f383 	clz	r3, r3
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	210f      	movs	r1, #15
 8006fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	fa93 f3a3 	rbit	r3, r3
 8006ffc:	61fb      	str	r3, [r7, #28]
  return result;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007008:	2320      	movs	r3, #32
 800700a:	e003      	b.n	8007014 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	fab3 f383 	clz	r3, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007022:	bf00      	nop
 8007024:	372c      	adds	r7, #44	@ 0x2c
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b08a      	sub	sp, #40	@ 0x28
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007038:	2300      	movs	r3, #0
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800703c:	2300      	movs	r3, #0
 800703e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	fa93 f3a3 	rbit	r3, r3
 800704c:	617b      	str	r3, [r7, #20]
  return result;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <LL_GPIO_Init+0x2e>
    return 32U;
 8007058:	2320      	movs	r3, #32
 800705a:	e003      	b.n	8007064 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007066:	e057      	b.n	8007118 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2101      	movs	r1, #1
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	fa01 f303 	lsl.w	r3, r1, r3
 8007074:	4013      	ands	r3, r2
 8007076:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d049      	beq.n	8007112 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d003      	beq.n	800708e <LL_GPIO_Init+0x60>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d10d      	bne.n	80070aa <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	461a      	mov	r2, r3
 8007094:	6a39      	ldr	r1, [r7, #32]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fed3 	bl	8006e42 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6a39      	ldr	r1, [r7, #32]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff feb4 	bl	8006e12 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6a39      	ldr	r1, [r7, #32]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff ff02 	bl	8006ebc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d121      	bne.n	8007104 <LL_GPIO_Init+0xd6>
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	60bb      	str	r3, [r7, #8]
  return result;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <LL_GPIO_Init+0xac>
    return 32U;
 80070d6:	2320      	movs	r3, #32
 80070d8:	e003      	b.n	80070e2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	d807      	bhi.n	80070f6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6a39      	ldr	r1, [r7, #32]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff ff21 	bl	8006f36 <LL_GPIO_SetAFPin_0_7>
 80070f4:	e006      	b.n	8007104 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	461a      	mov	r2, r3
 80070fc:	6a39      	ldr	r1, [r7, #32]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff ff56 	bl	8006fb0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	461a      	mov	r2, r3
 800710a:	6a39      	ldr	r1, [r7, #32]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fe43 	bl	8006d98 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	3301      	adds	r3, #1
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1a0      	bne.n	8007068 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3728      	adds	r7, #40	@ 0x28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007134:	4b04      	ldr	r3, [pc, #16]	@ (8007148 <LL_RCC_GetSysClkSource+0x18>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 030c 	and.w	r3, r3, #12
}
 800713c:	4618      	mov	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800

0800714c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007150:	4b04      	ldr	r3, [pc, #16]	@ (8007164 <LL_RCC_GetAHBPrescaler+0x18>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40023800 	.word	0x40023800

08007168 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800716c:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <LL_RCC_GetAPB1Prescaler+0x18>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8007174:	4618      	mov	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800

08007184 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007188:	4b04      	ldr	r3, [pc, #16]	@ (800719c <LL_RCC_GetAPB2Prescaler+0x18>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8007190:	4618      	mov	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800

080071a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80071a4:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40023800 	.word	0x40023800

080071bc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071c0:	4b04      	ldr	r3, [pc, #16]	@ (80071d4 <LL_RCC_PLL_GetN+0x18>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	099b      	lsrs	r3, r3, #6
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	40023800 	.word	0x40023800

080071d8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80071dc:	4b04      	ldr	r3, [pc, #16]	@ (80071f0 <LL_RCC_PLL_GetP+0x18>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800

080071f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071f8:	4b04      	ldr	r3, [pc, #16]	@ (800720c <LL_RCC_PLL_GetDivider+0x18>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007200:	4618      	mov	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40023800 	.word	0x40023800

08007210 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007218:	f000 f820 	bl	800725c <RCC_GetSystemClockFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f83e 	bl	80072a8 <RCC_GetHCLKClockFreq>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f84c 	bl	80072d4 <RCC_GetPCLK1ClockFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f858 	bl	80072fc <RCC_GetPCLK2ClockFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007266:	f7ff ff63 	bl	8007130 <LL_RCC_GetSysClkSource>
 800726a:	4603      	mov	r3, r0
 800726c:	2b08      	cmp	r3, #8
 800726e:	d00c      	beq.n	800728a <RCC_GetSystemClockFreq+0x2e>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d80f      	bhi.n	8007294 <RCC_GetSystemClockFreq+0x38>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <RCC_GetSystemClockFreq+0x22>
 8007278:	2b04      	cmp	r3, #4
 800727a:	d003      	beq.n	8007284 <RCC_GetSystemClockFreq+0x28>
 800727c:	e00a      	b.n	8007294 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800727e:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <RCC_GetSystemClockFreq+0x48>)
 8007280:	607b      	str	r3, [r7, #4]
      break;
 8007282:	e00a      	b.n	800729a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007284:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <RCC_GetSystemClockFreq+0x48>)
 8007286:	607b      	str	r3, [r7, #4]
      break;
 8007288:	e007      	b.n	800729a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800728a:	2008      	movs	r0, #8
 800728c:	f000 f84a 	bl	8007324 <RCC_PLL_GetFreqDomain_SYS>
 8007290:	6078      	str	r0, [r7, #4]
      break;
 8007292:	e002      	b.n	800729a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007294:	4b03      	ldr	r3, [pc, #12]	@ (80072a4 <RCC_GetSystemClockFreq+0x48>)
 8007296:	607b      	str	r3, [r7, #4]
      break;
 8007298:	bf00      	nop
  }

  return frequency;
 800729a:	687b      	ldr	r3, [r7, #4]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	00f42400 	.word	0x00f42400

080072a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80072b0:	f7ff ff4c 	bl	800714c <LL_RCC_GetAHBPrescaler>
 80072b4:	4603      	mov	r3, r0
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	4a04      	ldr	r2, [pc, #16]	@ (80072d0 <RCC_GetHCLKClockFreq+0x28>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	461a      	mov	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	40d3      	lsrs	r3, r2
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	0800ea64 	.word	0x0800ea64

080072d4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80072dc:	f7ff ff44 	bl	8007168 <LL_RCC_GetAPB1Prescaler>
 80072e0:	4603      	mov	r3, r0
 80072e2:	0a9b      	lsrs	r3, r3, #10
 80072e4:	4a04      	ldr	r2, [pc, #16]	@ (80072f8 <RCC_GetPCLK1ClockFreq+0x24>)
 80072e6:	5cd3      	ldrb	r3, [r2, r3]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	40d3      	lsrs	r3, r2
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	0800ea74 	.word	0x0800ea74

080072fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007304:	f7ff ff3e 	bl	8007184 <LL_RCC_GetAPB2Prescaler>
 8007308:	4603      	mov	r3, r0
 800730a:	0b5b      	lsrs	r3, r3, #13
 800730c:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <RCC_GetPCLK2ClockFreq+0x24>)
 800730e:	5cd3      	ldrb	r3, [r2, r3]
 8007310:	461a      	mov	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	40d3      	lsrs	r3, r2
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	0800ea74 	.word	0x0800ea74

08007324 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007338:	f7ff ff32 	bl	80071a0 <LL_RCC_PLL_GetMainSource>
 800733c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800734a:	d003      	beq.n	8007354 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800734c:	e005      	b.n	800735a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800734e:	4b12      	ldr	r3, [pc, #72]	@ (8007398 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007350:	617b      	str	r3, [r7, #20]
      break;
 8007352:	e005      	b.n	8007360 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007354:	4b10      	ldr	r3, [pc, #64]	@ (8007398 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007356:	617b      	str	r3, [r7, #20]
      break;
 8007358:	e002      	b.n	8007360 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800735c:	617b      	str	r3, [r7, #20]
      break;
 800735e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b08      	cmp	r3, #8
 8007364:	d113      	bne.n	800738e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007366:	f7ff ff45 	bl	80071f4 <LL_RCC_PLL_GetDivider>
 800736a:	4602      	mov	r2, r0
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	fbb3 f4f2 	udiv	r4, r3, r2
 8007372:	f7ff ff23 	bl	80071bc <LL_RCC_PLL_GetN>
 8007376:	4603      	mov	r3, r0
 8007378:	fb03 f404 	mul.w	r4, r3, r4
 800737c:	f7ff ff2c 	bl	80071d8 <LL_RCC_PLL_GetP>
 8007380:	4603      	mov	r3, r0
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	3301      	adds	r3, #1
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	fbb4 f3f3 	udiv	r3, r4, r3
 800738c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800738e:	693b      	ldr	r3, [r7, #16]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	bd90      	pop	{r4, r7, pc}
 8007398:	00f42400 	.word	0x00f42400

0800739c <LL_SPI_IsEnabled>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ac:	2b40      	cmp	r3, #64	@ 0x40
 80073ae:	d101      	bne.n	80073b4 <LL_SPI_IsEnabled+0x18>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <LL_SPI_IsEnabled+0x1a>
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <LL_SPI_SetCRCPolynomial>:
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	611a      	str	r2, [r3, #16]
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ffd3 	bl	800739c <LL_SPI_IsEnabled>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d139      	bne.n	8007470 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007404:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6811      	ldr	r1, [r2, #0]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	6852      	ldr	r2, [r2, #4]
 8007410:	4311      	orrs	r1, r2
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	6892      	ldr	r2, [r2, #8]
 8007416:	4311      	orrs	r1, r2
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	68d2      	ldr	r2, [r2, #12]
 800741c:	4311      	orrs	r1, r2
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	6912      	ldr	r2, [r2, #16]
 8007422:	4311      	orrs	r1, r2
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	6952      	ldr	r2, [r2, #20]
 8007428:	4311      	orrs	r1, r2
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	6992      	ldr	r2, [r2, #24]
 800742e:	4311      	orrs	r1, r2
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	69d2      	ldr	r2, [r2, #28]
 8007434:	4311      	orrs	r1, r2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	6a12      	ldr	r2, [r2, #32]
 800743a:	430a      	orrs	r2, r1
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f023 0204 	bic.w	r2, r3, #4
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800745e:	d105      	bne.n	800746c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ffab 	bl	80073c2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	61da      	str	r2, [r3, #28]
  return status;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <LL_TIM_SetPrescaler>:
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <LL_TIM_SetAutoReload>:
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <LL_TIM_SetRepetitionCounter>:
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <LL_TIM_OC_SetCompareCH1>:
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <LL_TIM_OC_SetCompareCH2>:
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <LL_TIM_OC_SetCompareCH3>:
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <LL_TIM_OC_SetCompareCH4>:
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	615a      	str	r2, [r3, #20]
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3d      	ldr	r2, [pc, #244]	@ (8007674 <LL_TIM_Init+0x108>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <LL_TIM_Init+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758a:	d00f      	beq.n	80075ac <LL_TIM_Init+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a3a      	ldr	r2, [pc, #232]	@ (8007678 <LL_TIM_Init+0x10c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00b      	beq.n	80075ac <LL_TIM_Init+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a39      	ldr	r2, [pc, #228]	@ (800767c <LL_TIM_Init+0x110>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <LL_TIM_Init+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a38      	ldr	r2, [pc, #224]	@ (8007680 <LL_TIM_Init+0x114>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <LL_TIM_Init+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a37      	ldr	r2, [pc, #220]	@ (8007684 <LL_TIM_Init+0x118>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d106      	bne.n	80075ba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007674 <LL_TIM_Init+0x108>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d02b      	beq.n	800761a <LL_TIM_Init+0xae>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c8:	d027      	beq.n	800761a <LL_TIM_Init+0xae>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007678 <LL_TIM_Init+0x10c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d023      	beq.n	800761a <LL_TIM_Init+0xae>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a29      	ldr	r2, [pc, #164]	@ (800767c <LL_TIM_Init+0x110>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01f      	beq.n	800761a <LL_TIM_Init+0xae>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a28      	ldr	r2, [pc, #160]	@ (8007680 <LL_TIM_Init+0x114>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01b      	beq.n	800761a <LL_TIM_Init+0xae>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a27      	ldr	r2, [pc, #156]	@ (8007684 <LL_TIM_Init+0x118>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d017      	beq.n	800761a <LL_TIM_Init+0xae>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a26      	ldr	r2, [pc, #152]	@ (8007688 <LL_TIM_Init+0x11c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d013      	beq.n	800761a <LL_TIM_Init+0xae>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a25      	ldr	r2, [pc, #148]	@ (800768c <LL_TIM_Init+0x120>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00f      	beq.n	800761a <LL_TIM_Init+0xae>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a24      	ldr	r2, [pc, #144]	@ (8007690 <LL_TIM_Init+0x124>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <LL_TIM_Init+0xae>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a23      	ldr	r2, [pc, #140]	@ (8007694 <LL_TIM_Init+0x128>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d007      	beq.n	800761a <LL_TIM_Init+0xae>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <LL_TIM_Init+0x12c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <LL_TIM_Init+0xae>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a21      	ldr	r2, [pc, #132]	@ (800769c <LL_TIM_Init+0x130>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d106      	bne.n	8007628 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff34 	bl	80074a2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff ff20 	bl	8007486 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a0a      	ldr	r2, [pc, #40]	@ (8007674 <LL_TIM_Init+0x108>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <LL_TIM_Init+0xea>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <LL_TIM_Init+0x118>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d105      	bne.n	8007662 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff ff2e 	bl	80074be <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff ff71 	bl	800754a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40014400 	.word	0x40014400
 8007690:	40014800 	.word	0x40014800
 8007694:	40001800 	.word	0x40001800
 8007698:	40001c00 	.word	0x40001c00
 800769c:	40002000 	.word	0x40002000

080076a0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b6:	d027      	beq.n	8007708 <LL_TIM_OC_Init+0x68>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076be:	d82a      	bhi.n	8007716 <LL_TIM_OC_Init+0x76>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c6:	d018      	beq.n	80076fa <LL_TIM_OC_Init+0x5a>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ce:	d822      	bhi.n	8007716 <LL_TIM_OC_Init+0x76>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d003      	beq.n	80076de <LL_TIM_OC_Init+0x3e>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d007      	beq.n	80076ec <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80076dc:	e01b      	b.n	8007716 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f81f 	bl	8007724 <OC1Config>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75fb      	strb	r3, [r7, #23]
      break;
 80076ea:	e015      	b.n	8007718 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f884 	bl	80077fc <OC2Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]
      break;
 80076f8:	e00e      	b.n	8007718 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f8ed 	bl	80078dc <OC3Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
      break;
 8007706:	e007      	b.n	8007718 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f956 	bl	80079bc <OC4Config>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	e000      	b.n	8007718 <LL_TIM_OC_Init+0x78>
      break;
 8007716:	bf00      	nop
  }

  return result;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 0201 	bic.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0303 	bic.w	r3, r3, #3
 8007752:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f023 0202 	bic.w	r2, r3, #2
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1c      	ldr	r2, [pc, #112]	@ (80077f4 <OC1Config+0xd0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <OC1Config+0x6a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1b      	ldr	r2, [pc, #108]	@ (80077f8 <OC1Config+0xd4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d11e      	bne.n	80077cc <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f023 0208 	bic.w	r2, r3, #8
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0204 	bic.w	r2, r3, #4
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fe7b 	bl	80074da <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40010400 	.word	0x40010400

080077fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0210 	bic.w	r2, r3, #16
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800782a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f023 0220 	bic.w	r2, r3, #32
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0210 	bic.w	r2, r3, #16
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a1d      	ldr	r2, [pc, #116]	@ (80078d4 <OC2Config+0xd8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <OC2Config+0x70>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <OC2Config+0xdc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d11f      	bne.n	80078ac <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	019b      	lsls	r3, r3, #6
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	019b      	lsls	r3, r3, #6
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fe19 	bl	80074f6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40010400 	.word	0x40010400

080078dc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1d      	ldr	r2, [pc, #116]	@ (80079b4 <OC3Config+0xd8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <OC3Config+0x6e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1c      	ldr	r2, [pc, #112]	@ (80079b8 <OC3Config+0xdc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d11f      	bne.n	800798a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	029b      	lsls	r3, r3, #10
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	029b      	lsls	r3, r3, #10
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	015b      	lsls	r3, r3, #5
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fdb8 	bl	8007512 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40010400 	.word	0x40010400

080079bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	031b      	lsls	r3, r3, #12
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	031b      	lsls	r3, r3, #12
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a11      	ldr	r2, [pc, #68]	@ (8007a64 <OC4Config+0xa8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <OC4Config+0x70>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a10      	ldr	r2, [pc, #64]	@ (8007a68 <OC4Config+0xac>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d107      	bne.n	8007a3c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	019b      	lsls	r3, r3, #6
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff fd6d 	bl	800752e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <LL_USART_IsEnabled>:
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <LL_USART_SetStopBitsLength>:
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <LL_USART_SetHWFlowCtrl>:
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	615a      	str	r2, [r3, #20]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <LL_USART_SetBaudRate>:
{
 8007ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae4:	b0c0      	sub	sp, #256	@ 0x100
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007aec:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007af0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007af4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b00:	f040 810c 	bne.w	8007d1c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	1891      	adds	r1, r2, r2
 8007b1c:	6639      	str	r1, [r7, #96]	@ 0x60
 8007b1e:	415b      	adcs	r3, r3
 8007b20:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007b26:	4621      	mov	r1, r4
 8007b28:	eb12 0801 	adds.w	r8, r2, r1
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	eb43 0901 	adc.w	r9, r3, r1
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b46:	4690      	mov	r8, r2
 8007b48:	4699      	mov	r9, r3
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	eb18 0303 	adds.w	r3, r8, r3
 8007b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b54:	462b      	mov	r3, r5
 8007b56:	eb49 0303 	adc.w	r3, r9, r3
 8007b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b62:	2200      	movs	r2, #0
 8007b64:	469a      	mov	sl, r3
 8007b66:	4693      	mov	fp, r2
 8007b68:	eb1a 030a 	adds.w	r3, sl, sl
 8007b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b6e:	eb4b 030b 	adc.w	r3, fp, fp
 8007b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b7c:	f7f9 f834 	bl	8000be8 <__aeabi_uldivmod>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4b64      	ldr	r3, [pc, #400]	@ (8007d18 <LL_USART_SetBaudRate+0x238>)
 8007b86:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	b29c      	uxth	r4, r3
 8007b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b9c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ba0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	6539      	str	r1, [r7, #80]	@ 0x50
 8007bac:	415b      	adcs	r3, r3
 8007bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	1851      	adds	r1, r2, r1
 8007bb8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007bba:	4649      	mov	r1, r9
 8007bbc:	414b      	adcs	r3, r1
 8007bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007bcc:	4659      	mov	r1, fp
 8007bce:	00cb      	lsls	r3, r1, #3
 8007bd0:	4651      	mov	r1, sl
 8007bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bd6:	4651      	mov	r1, sl
 8007bd8:	00ca      	lsls	r2, r1, #3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	4642      	mov	r2, r8
 8007be2:	189b      	adds	r3, r3, r2
 8007be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007be8:	464b      	mov	r3, r9
 8007bea:	460a      	mov	r2, r1
 8007bec:	eb42 0303 	adc.w	r3, r2, r3
 8007bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bfe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007c02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c06:	460b      	mov	r3, r1
 8007c08:	18db      	adds	r3, r3, r3
 8007c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	eb42 0303 	adc.w	r3, r2, r3
 8007c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c18:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007c1c:	f7f8 ffe4 	bl	8000be8 <__aeabi_uldivmod>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	4b3c      	ldr	r3, [pc, #240]	@ (8007d18 <LL_USART_SetBaudRate+0x238>)
 8007c28:	fba3 2301 	umull	r2, r3, r3, r1
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	2264      	movs	r2, #100	@ 0x64
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	1acb      	subs	r3, r1, r3
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c3c:	4b36      	ldr	r3, [pc, #216]	@ (8007d18 <LL_USART_SetBaudRate+0x238>)
 8007c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4423      	add	r3, r4
 8007c52:	b29c      	uxth	r4, r3
 8007c54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c5e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c62:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007c66:	4642      	mov	r2, r8
 8007c68:	464b      	mov	r3, r9
 8007c6a:	1891      	adds	r1, r2, r2
 8007c6c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c6e:	415b      	adcs	r3, r3
 8007c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c76:	4641      	mov	r1, r8
 8007c78:	1851      	adds	r1, r2, r1
 8007c7a:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	414b      	adcs	r3, r1
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c8e:	4659      	mov	r1, fp
 8007c90:	00cb      	lsls	r3, r1, #3
 8007c92:	4651      	mov	r1, sl
 8007c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c98:	4651      	mov	r1, sl
 8007c9a:	00ca      	lsls	r2, r1, #3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	189b      	adds	r3, r3, r2
 8007ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007caa:	464b      	mov	r3, r9
 8007cac:	460a      	mov	r2, r1
 8007cae:	eb42 0303 	adc.w	r3, r2, r3
 8007cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cc0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007cc4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	18db      	adds	r3, r3, r3
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cce:	4613      	mov	r3, r2
 8007cd0:	eb42 0303 	adc.w	r3, r2, r3
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cda:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007cde:	f7f8 ff83 	bl	8000be8 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <LL_USART_SetBaudRate+0x238>)
 8007ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	2164      	movs	r1, #100	@ 0x64
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	3332      	adds	r3, #50	@ 0x32
 8007cfa:	4a07      	ldr	r2, [pc, #28]	@ (8007d18 <LL_USART_SetBaudRate+0x238>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4423      	add	r3, r4
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d14:	609a      	str	r2, [r3, #8]
}
 8007d16:	e108      	b.n	8007f2a <LL_USART_SetBaudRate+0x44a>
 8007d18:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d26:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d2a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007d2e:	4642      	mov	r2, r8
 8007d30:	464b      	mov	r3, r9
 8007d32:	1891      	adds	r1, r2, r2
 8007d34:	6239      	str	r1, [r7, #32]
 8007d36:	415b      	adcs	r3, r3
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d3e:	4641      	mov	r1, r8
 8007d40:	1854      	adds	r4, r2, r1
 8007d42:	4649      	mov	r1, r9
 8007d44:	eb43 0501 	adc.w	r5, r3, r1
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	00eb      	lsls	r3, r5, #3
 8007d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d56:	00e2      	lsls	r2, r4, #3
 8007d58:	4614      	mov	r4, r2
 8007d5a:	461d      	mov	r5, r3
 8007d5c:	4643      	mov	r3, r8
 8007d5e:	18e3      	adds	r3, r4, r3
 8007d60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d64:	464b      	mov	r3, r9
 8007d66:	eb45 0303 	adc.w	r3, r5, r3
 8007d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007d88:	4629      	mov	r1, r5
 8007d8a:	008b      	lsls	r3, r1, #2
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d92:	4621      	mov	r1, r4
 8007d94:	008a      	lsls	r2, r1, #2
 8007d96:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007d9a:	f7f8 ff25 	bl	8000be8 <__aeabi_uldivmod>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4b65      	ldr	r3, [pc, #404]	@ (8007f38 <LL_USART_SetBaudRate+0x458>)
 8007da4:	fba3 2302 	umull	r2, r3, r3, r2
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	b29c      	uxth	r4, r3
 8007db0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007dbe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	1891      	adds	r1, r2, r2
 8007dc8:	61b9      	str	r1, [r7, #24]
 8007dca:	415b      	adcs	r3, r3
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	1851      	adds	r1, r2, r1
 8007dd6:	6139      	str	r1, [r7, #16]
 8007dd8:	4649      	mov	r1, r9
 8007dda:	414b      	adcs	r3, r1
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dea:	4659      	mov	r1, fp
 8007dec:	00cb      	lsls	r3, r1, #3
 8007dee:	4651      	mov	r1, sl
 8007df0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007df4:	4651      	mov	r1, sl
 8007df6:	00ca      	lsls	r2, r1, #3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4642      	mov	r2, r8
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e06:	464b      	mov	r3, r9
 8007e08:	460a      	mov	r2, r1
 8007e0a:	eb42 0303 	adc.w	r3, r2, r3
 8007e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	008b      	lsls	r3, r1, #2
 8007e30:	4641      	mov	r1, r8
 8007e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e36:	4641      	mov	r1, r8
 8007e38:	008a      	lsls	r2, r1, #2
 8007e3a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007e3e:	f7f8 fed3 	bl	8000be8 <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	4b3b      	ldr	r3, [pc, #236]	@ (8007f38 <LL_USART_SetBaudRate+0x458>)
 8007e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	2264      	movs	r2, #100	@ 0x64
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
 8007e56:	1acb      	subs	r3, r1, r3
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	3332      	adds	r3, #50	@ 0x32
 8007e5c:	4a36      	ldr	r2, [pc, #216]	@ (8007f38 <LL_USART_SetBaudRate+0x458>)
 8007e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	4423      	add	r3, r4
 8007e6e:	b29c      	uxth	r4, r3
 8007e70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e74:	2200      	movs	r2, #0
 8007e76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e78:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e7a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e7e:	4642      	mov	r2, r8
 8007e80:	464b      	mov	r3, r9
 8007e82:	1891      	adds	r1, r2, r2
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	415b      	adcs	r3, r3
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e8e:	4641      	mov	r1, r8
 8007e90:	1851      	adds	r1, r2, r1
 8007e92:	6039      	str	r1, [r7, #0]
 8007e94:	4649      	mov	r1, r9
 8007e96:	414b      	adcs	r3, r1
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ea6:	4659      	mov	r1, fp
 8007ea8:	00cb      	lsls	r3, r1, #3
 8007eaa:	4651      	mov	r1, sl
 8007eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eb0:	4651      	mov	r1, sl
 8007eb2:	00ca      	lsls	r2, r1, #3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	4642      	mov	r2, r8
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	460a      	mov	r2, r1
 8007ec4:	eb42 0303 	adc.w	r3, r2, r3
 8007ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8007eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	008b      	lsls	r3, r1, #2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eea:	4641      	mov	r1, r8
 8007eec:	008a      	lsls	r2, r1, #2
 8007eee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007ef2:	f7f8 fe79 	bl	8000be8 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <LL_USART_SetBaudRate+0x458>)
 8007efc:	fba3 1302 	umull	r1, r3, r3, r2
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	2164      	movs	r1, #100	@ 0x64
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	3332      	adds	r3, #50	@ 0x32
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f38 <LL_USART_SetBaudRate+0x458>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4423      	add	r3, r4
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f28:	609a      	str	r2, [r3, #8]
}
 8007f2a:	bf00      	nop
 8007f2c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f30:	46bd      	mov	sp, r7
 8007f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f36:	bf00      	nop
 8007f38:	51eb851f 	.word	0x51eb851f

08007f3c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff fd8c 	bl	8007a6c <LL_USART_IsEnabled>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d15e      	bne.n	8008018 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007f62:	f023 030c 	bic.w	r3, r3, #12
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	6851      	ldr	r1, [r2, #4]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	68d2      	ldr	r2, [r2, #12]
 8007f6e:	4311      	orrs	r1, r2
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	6912      	ldr	r2, [r2, #16]
 8007f74:	4311      	orrs	r1, r2
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	6992      	ldr	r2, [r2, #24]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff fd83 	bl	8007a94 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fd90 	bl	8007aba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007f9a:	f107 0308 	add.w	r3, r7, #8
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff f936 	bl	8007210 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8008024 <LL_USART_Init+0xe8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d102      	bne.n	8007fb2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e021      	b.n	8007ff6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008028 <LL_USART_Init+0xec>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d102      	bne.n	8007fc0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	e01a      	b.n	8007ff6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800802c <LL_USART_Init+0xf0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d102      	bne.n	8007fce <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e013      	b.n	8007ff6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a17      	ldr	r2, [pc, #92]	@ (8008030 <LL_USART_Init+0xf4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d102      	bne.n	8007fdc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e00c      	b.n	8007ff6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a15      	ldr	r2, [pc, #84]	@ (8008034 <LL_USART_Init+0xf8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d102      	bne.n	8007fea <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e005      	b.n	8007ff6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a12      	ldr	r2, [pc, #72]	@ (8008038 <LL_USART_Init+0xfc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00d      	beq.n	8008018 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8008004:	2300      	movs	r3, #0
 8008006:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fd64 	bl	8007ae0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008018:	7ffb      	ldrb	r3, [r7, #31]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40011000 	.word	0x40011000
 8008028:	40004400 	.word	0x40004400
 800802c:	40004800 	.word	0x40004800
 8008030:	40011400 	.word	0x40011400
 8008034:	40004c00 	.word	0x40004c00
 8008038:	40005000 	.word	0x40005000

0800803c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800803c:	b084      	sub	sp, #16
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	f107 001c 	add.w	r0, r7, #28
 800804a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800804e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008052:	2b01      	cmp	r3, #1
 8008054:	d123      	bne.n	800809e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800806a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800807e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008082:	2b01      	cmp	r3, #1
 8008084:	d105      	bne.n	8008092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fae8 	bl	8009668 <USB_CoreReset>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
 800809c:	e01b      	b.n	80080d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fadc 	bl	8009668 <USB_CoreReset>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80080c8:	e005      	b.n	80080d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080d6:	7fbb      	ldrb	r3, [r7, #30]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10b      	bne.n	80080f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f043 0206 	orr.w	r2, r3, #6
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008100:	b004      	add	sp, #16
 8008102:	4770      	bx	lr

08008104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d165      	bne.n	80081e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4a41      	ldr	r2, [pc, #260]	@ (8008220 <USB_SetTurnaroundTime+0x11c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d906      	bls.n	800812e <USB_SetTurnaroundTime+0x2a>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a40      	ldr	r2, [pc, #256]	@ (8008224 <USB_SetTurnaroundTime+0x120>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d202      	bcs.n	800812e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008128:	230f      	movs	r3, #15
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e062      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a3c      	ldr	r2, [pc, #240]	@ (8008224 <USB_SetTurnaroundTime+0x120>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d306      	bcc.n	8008144 <USB_SetTurnaroundTime+0x40>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a3b      	ldr	r2, [pc, #236]	@ (8008228 <USB_SetTurnaroundTime+0x124>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d202      	bcs.n	8008144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800813e:	230e      	movs	r3, #14
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e057      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a38      	ldr	r2, [pc, #224]	@ (8008228 <USB_SetTurnaroundTime+0x124>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d306      	bcc.n	800815a <USB_SetTurnaroundTime+0x56>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a37      	ldr	r2, [pc, #220]	@ (800822c <USB_SetTurnaroundTime+0x128>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d202      	bcs.n	800815a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008154:	230d      	movs	r3, #13
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e04c      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4a33      	ldr	r2, [pc, #204]	@ (800822c <USB_SetTurnaroundTime+0x128>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d306      	bcc.n	8008170 <USB_SetTurnaroundTime+0x6c>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4a32      	ldr	r2, [pc, #200]	@ (8008230 <USB_SetTurnaroundTime+0x12c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d802      	bhi.n	8008170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800816a:	230c      	movs	r3, #12
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e041      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4a2f      	ldr	r2, [pc, #188]	@ (8008230 <USB_SetTurnaroundTime+0x12c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d906      	bls.n	8008186 <USB_SetTurnaroundTime+0x82>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4a2e      	ldr	r2, [pc, #184]	@ (8008234 <USB_SetTurnaroundTime+0x130>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d802      	bhi.n	8008186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008180:	230b      	movs	r3, #11
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e036      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4a2a      	ldr	r2, [pc, #168]	@ (8008234 <USB_SetTurnaroundTime+0x130>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d906      	bls.n	800819c <USB_SetTurnaroundTime+0x98>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a29      	ldr	r2, [pc, #164]	@ (8008238 <USB_SetTurnaroundTime+0x134>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d802      	bhi.n	800819c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008196:	230a      	movs	r3, #10
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	e02b      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <USB_SetTurnaroundTime+0x134>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d906      	bls.n	80081b2 <USB_SetTurnaroundTime+0xae>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4a25      	ldr	r2, [pc, #148]	@ (800823c <USB_SetTurnaroundTime+0x138>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d202      	bcs.n	80081b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081ac:	2309      	movs	r3, #9
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e020      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a21      	ldr	r2, [pc, #132]	@ (800823c <USB_SetTurnaroundTime+0x138>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d306      	bcc.n	80081c8 <USB_SetTurnaroundTime+0xc4>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4a20      	ldr	r2, [pc, #128]	@ (8008240 <USB_SetTurnaroundTime+0x13c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d802      	bhi.n	80081c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081c2:	2308      	movs	r3, #8
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	e015      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008240 <USB_SetTurnaroundTime+0x13c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d906      	bls.n	80081de <USB_SetTurnaroundTime+0xda>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008244 <USB_SetTurnaroundTime+0x140>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d202      	bcs.n	80081de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081d8:	2307      	movs	r3, #7
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	e00a      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081de:	2306      	movs	r3, #6
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e007      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081ea:	2309      	movs	r3, #9
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e001      	b.n	80081f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80081f0:	2309      	movs	r3, #9
 80081f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	029b      	lsls	r3, r3, #10
 8008208:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	00d8acbf 	.word	0x00d8acbf
 8008224:	00e4e1c0 	.word	0x00e4e1c0
 8008228:	00f42400 	.word	0x00f42400
 800822c:	01067380 	.word	0x01067380
 8008230:	011a499f 	.word	0x011a499f
 8008234:	01312cff 	.word	0x01312cff
 8008238:	014ca43f 	.word	0x014ca43f
 800823c:	016e3600 	.word	0x016e3600
 8008240:	01a6ab1f 	.word	0x01a6ab1f
 8008244:	01e84800 	.word	0x01e84800

08008248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f043 0201 	orr.w	r2, r3, #1
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d115      	bne.n	80082da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082ba:	200a      	movs	r0, #10
 80082bc:	f7fb fd6e 	bl	8003d9c <HAL_Delay>
      ms += 10U;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	330a      	adds	r3, #10
 80082c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f93f 	bl	800954a <USB_GetMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d01e      	beq.n	8008310 <USB_SetCurrentMode+0x84>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80082d6:	d9f0      	bls.n	80082ba <USB_SetCurrentMode+0x2e>
 80082d8:	e01a      	b.n	8008310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082da:	78fb      	ldrb	r3, [r7, #3]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d115      	bne.n	800830c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082ec:	200a      	movs	r0, #10
 80082ee:	f7fb fd55 	bl	8003d9c <HAL_Delay>
      ms += 10U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	330a      	adds	r3, #10
 80082f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f926 	bl	800954a <USB_GetMode>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <USB_SetCurrentMode+0x84>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2bc7      	cmp	r3, #199	@ 0xc7
 8008308:	d9f0      	bls.n	80082ec <USB_SetCurrentMode+0x60>
 800830a:	e001      	b.n	8008310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e005      	b.n	800831c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2bc8      	cmp	r3, #200	@ 0xc8
 8008314:	d101      	bne.n	800831a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008324:	b084      	sub	sp, #16
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	e009      	b.n	8008358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	3340      	adds	r3, #64	@ 0x40
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	2200      	movs	r2, #0
 8008350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3301      	adds	r3, #1
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b0e      	cmp	r3, #14
 800835c:	d9f2      	bls.n	8008344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800835e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008362:	2b00      	cmp	r3, #0
 8008364:	d11c      	bne.n	80083a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008374:	f043 0302 	orr.w	r3, r3, #2
 8008378:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008396:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38
 800839e:	e00b      	b.n	80083b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083be:	461a      	mov	r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10d      	bne.n	80083e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083d4:	2100      	movs	r1, #0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f968 	bl	80086ac <USB_SetDevSpeed>
 80083dc:	e008      	b.n	80083f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083de:	2101      	movs	r1, #1
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f963 	bl	80086ac <USB_SetDevSpeed>
 80083e6:	e003      	b.n	80083f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083e8:	2103      	movs	r1, #3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f95e 	bl	80086ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f0:	2110      	movs	r1, #16
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8fa 	bl	80085ec <USB_FlushTxFifo>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f924 	bl	8008650 <USB_FlushRxFifo>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	461a      	mov	r2, r3
 800841a:	2300      	movs	r3, #0
 800841c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008424:	461a      	mov	r2, r3
 8008426:	2300      	movs	r3, #0
 8008428:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008430:	461a      	mov	r2, r3
 8008432:	2300      	movs	r3, #0
 8008434:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e043      	b.n	80084c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800844e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008452:	d118      	bne.n	8008486 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008466:	461a      	mov	r2, r3
 8008468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e013      	b.n	8008498 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847c:	461a      	mov	r2, r3
 800847e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e008      	b.n	8008498 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008492:	461a      	mov	r2, r3
 8008494:	2300      	movs	r3, #0
 8008496:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a4:	461a      	mov	r2, r3
 80084a6:	2300      	movs	r3, #0
 80084a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b6:	461a      	mov	r2, r3
 80084b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3301      	adds	r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084c8:	461a      	mov	r2, r3
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d3b5      	bcc.n	800843c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d0:	2300      	movs	r3, #0
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	e043      	b.n	800855e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084ec:	d118      	bne.n	8008520 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008500:	461a      	mov	r2, r3
 8008502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	e013      	b.n	8008532 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008516:	461a      	mov	r2, r3
 8008518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	e008      	b.n	8008532 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800852c:	461a      	mov	r2, r3
 800852e:	2300      	movs	r3, #0
 8008530:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853e:	461a      	mov	r2, r3
 8008540:	2300      	movs	r3, #0
 8008542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008550:	461a      	mov	r2, r3
 8008552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3301      	adds	r3, #1
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008562:	461a      	mov	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4293      	cmp	r3, r2
 8008568:	d3b5      	bcc.n	80084d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800857c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800858a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800858c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f043 0210 	orr.w	r2, r3, #16
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	4b10      	ldr	r3, [pc, #64]	@ (80085e8 <USB_DevInit+0x2c4>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f043 0208 	orr.w	r2, r3, #8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d107      	bne.n	80085d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085d0:	f043 0304 	orr.w	r3, r3, #4
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e4:	b004      	add	sp, #16
 80085e6:	4770      	bx	lr
 80085e8:	803c3800 	.word	0x803c3800

080085ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3301      	adds	r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008606:	d901      	bls.n	800860c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e01b      	b.n	8008644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	daf2      	bge.n	80085fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	019b      	lsls	r3, r3, #6
 800861c:	f043 0220 	orr.w	r2, r3, #32
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008630:	d901      	bls.n	8008636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e006      	b.n	8008644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b20      	cmp	r3, #32
 8008640:	d0f0      	beq.n	8008624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008668:	d901      	bls.n	800866e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e018      	b.n	80086a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	daf2      	bge.n	800865c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2210      	movs	r2, #16
 800867e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800868c:	d901      	bls.n	8008692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e006      	b.n	80086a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b10      	cmp	r3, #16
 800869c:	d0f0      	beq.n	8008680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	68f9      	ldr	r1, [r7, #12]
 80086c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086cc:	4313      	orrs	r3, r2
 80086ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0306 	and.w	r3, r3, #6
 80086f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
 8008702:	e00a      	b.n	800871a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USB_GetDevSpeed+0x32>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b06      	cmp	r3, #6
 800870e:	d102      	bne.n	8008716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008710:	2302      	movs	r3, #2
 8008712:	75fb      	strb	r3, [r7, #23]
 8008714:	e001      	b.n	800871a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008716:	230f      	movs	r3, #15
 8008718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
}
 800871c:	4618      	mov	r0, r3
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d13a      	bne.n	80087ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	2101      	movs	r1, #1
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	b29b      	uxth	r3, r3
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008762:	4313      	orrs	r3, r2
 8008764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d155      	bne.n	8008828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	791b      	ldrb	r3, [r3, #4]
 8008796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	059b      	lsls	r3, r3, #22
 800879e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087a0:	4313      	orrs	r3, r2
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e036      	b.n	8008828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c0:	69da      	ldr	r2, [r3, #28]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	2101      	movs	r1, #1
 80087cc:	fa01 f303 	lsl.w	r3, r1, r3
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087d8:	4313      	orrs	r3, r2
 80087da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11a      	bne.n	8008828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	791b      	ldrb	r3, [r3, #4]
 800880c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800880e:	430b      	orrs	r3, r1
 8008810:	4313      	orrs	r3, r2
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800881e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d161      	bne.n	8008918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800886a:	d11f      	bne.n	80088ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	440a      	add	r2, r1
 8008882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008886:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800888a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2101      	movs	r1, #1
 80088be:	fa01 f303 	lsl.w	r3, r1, r3
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088cc:	4013      	ands	r3, r2
 80088ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088d6:	69da      	ldr	r2, [r3, #28]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	43db      	mvns	r3, r3
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088f0:	4013      	ands	r3, r2
 80088f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	0159      	lsls	r1, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	440b      	add	r3, r1
 800890a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890e:	4619      	mov	r1, r3
 8008910:	4b35      	ldr	r3, [pc, #212]	@ (80089e8 <USB_DeactivateEndpoint+0x1b0>)
 8008912:	4013      	ands	r3, r2
 8008914:	600b      	str	r3, [r1, #0]
 8008916:	e060      	b.n	80089da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800892a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892e:	d11f      	bne.n	8008970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	440a      	add	r2, r1
 8008946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800894a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800894e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800896a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800896e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	2101      	movs	r1, #1
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	43db      	mvns	r3, r3
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008990:	4013      	ands	r3, r2
 8008992:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800899a:	69da      	ldr	r2, [r3, #28]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	2101      	movs	r1, #1
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	43db      	mvns	r3, r3
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089b4:	4013      	ands	r3, r2
 80089b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	0159      	lsls	r1, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	440b      	add	r3, r1
 80089ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d2:	4619      	mov	r1, r3
 80089d4:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <USB_DeactivateEndpoint+0x1b4>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	ec337800 	.word	0xec337800
 80089ec:	eff37800 	.word	0xeff37800

080089f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	@ 0x28
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	f040 817f 	bne.w	8008d10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d132      	bne.n	8008a80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a78:	0cdb      	lsrs	r3, r3, #19
 8008a7a:	04db      	lsls	r3, r3, #19
 8008a7c:	6113      	str	r3, [r2, #16]
 8008a7e:	e097      	b.n	8008bb0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a9a:	0cdb      	lsrs	r3, r3, #19
 8008a9c:	04db      	lsls	r3, r3, #19
 8008a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008abe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ac2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d11a      	bne.n	8008b00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d903      	bls.n	8008ade <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008afc:	6113      	str	r3, [r2, #16]
 8008afe:	e044      	b.n	8008b8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	4413      	add	r3, r2
 8008b0a:	1e5a      	subs	r2, r3, #1
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b22:	691a      	ldr	r2, [r3, #16]
 8008b24:	8afb      	ldrh	r3, [r7, #22]
 8008b26:	04d9      	lsls	r1, r3, #19
 8008b28:	4ba4      	ldr	r3, [pc, #656]	@ (8008dbc <USB_EPStartXfer+0x3cc>)
 8008b2a:	400b      	ands	r3, r1
 8008b2c:	69b9      	ldr	r1, [r7, #24]
 8008b2e:	0148      	lsls	r0, r1, #5
 8008b30:	69f9      	ldr	r1, [r7, #28]
 8008b32:	4401      	add	r1, r0
 8008b34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	791b      	ldrb	r3, [r3, #4]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d122      	bne.n	8008b8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	8afb      	ldrh	r3, [r7, #22]
 8008b74:	075b      	lsls	r3, r3, #29
 8008b76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008b7a:	69b9      	ldr	r1, [r7, #24]
 8008b7c:	0148      	lsls	r0, r1, #5
 8008b7e:	69f9      	ldr	r1, [r7, #28]
 8008b80:	4401      	add	r1, r0
 8008b82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b86:	4313      	orrs	r3, r2
 8008b88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ba0:	69b9      	ldr	r1, [r7, #24]
 8008ba2:	0148      	lsls	r0, r1, #5
 8008ba4:	69f9      	ldr	r1, [r7, #28]
 8008ba6:	4401      	add	r1, r0
 8008ba8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008bac:	4313      	orrs	r3, r2
 8008bae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d14b      	bne.n	8008c4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	791b      	ldrb	r3, [r3, #4]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d128      	bne.n	8008c2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d110      	bne.n	8008c0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	69fa      	ldr	r2, [r7, #28]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e00f      	b.n	8008c2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	0151      	lsls	r1, r2, #5
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	440a      	add	r2, r1
 8008c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	e166      	b.n	8008f1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	791b      	ldrb	r3, [r3, #4]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d015      	beq.n	8008ca2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 814e 	beq.w	8008f1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	2101      	movs	r1, #1
 8008c92:	fa01 f303 	lsl.w	r3, r1, r3
 8008c96:	69f9      	ldr	r1, [r7, #28]
 8008c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008ca0:	e13c      	b.n	8008f1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d110      	bne.n	8008cd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ccc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	e00f      	b.n	8008cf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	68d9      	ldr	r1, [r3, #12]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	b298      	uxth	r0, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4603      	mov	r3, r0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f9b9 	bl	8009080 <USB_WritePacket>
 8008d0e:	e105      	b.n	8008f1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d2a:	0cdb      	lsrs	r3, r3, #19
 8008d2c:	04db      	lsls	r3, r3, #19
 8008d2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d132      	bne.n	8008dc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	0148      	lsls	r0, r1, #5
 8008d8c:	69f9      	ldr	r1, [r7, #28]
 8008d8e:	4401      	add	r1, r0
 8008d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d94:	4313      	orrs	r3, r2
 8008d96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008db6:	6113      	str	r3, [r2, #16]
 8008db8:	e062      	b.n	8008e80 <USB_EPStartXfer+0x490>
 8008dba:	bf00      	nop
 8008dbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d123      	bne.n	8008e10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	0148      	lsls	r0, r1, #5
 8008de2:	69f9      	ldr	r1, [r7, #28]
 8008de4:	4401      	add	r1, r0
 8008de6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dea:	4313      	orrs	r3, r2
 8008dec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e0c:	6113      	str	r3, [r2, #16]
 8008e0e:	e037      	b.n	8008e80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	4413      	add	r3, r2
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	8afa      	ldrh	r2, [r7, #22]
 8008e2c:	fb03 f202 	mul.w	r2, r3, r2
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	04d9      	lsls	r1, r3, #19
 8008e46:	4b38      	ldr	r3, [pc, #224]	@ (8008f28 <USB_EPStartXfer+0x538>)
 8008e48:	400b      	ands	r3, r1
 8008e4a:	69b9      	ldr	r1, [r7, #24]
 8008e4c:	0148      	lsls	r0, r1, #5
 8008e4e:	69f9      	ldr	r1, [r7, #28]
 8008e50:	4401      	add	r1, r0
 8008e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e56:	4313      	orrs	r3, r2
 8008e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e70:	69b9      	ldr	r1, [r7, #24]
 8008e72:	0148      	lsls	r0, r1, #5
 8008e74:	69f9      	ldr	r1, [r7, #28]
 8008e76:	4401      	add	r1, r0
 8008e78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10d      	bne.n	8008ea2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	68d9      	ldr	r1, [r3, #12]
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	791b      	ldrb	r3, [r3, #4]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d128      	bne.n	8008efc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d110      	bne.n	8008edc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e00f      	b.n	8008efc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	1ff80000 	.word	0x1ff80000

08008f2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d14a      	bne.n	8008fe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f62:	f040 8086 	bne.w	8009072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	7812      	ldrb	r2, [r2, #0]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	7812      	ldrb	r2, [r2, #0]
 8008f9e:	0151      	lsls	r1, r2, #5
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d902      	bls.n	8008fc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc2:	e056      	b.n	8009072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fdc:	d0e7      	beq.n	8008fae <USB_EPStopXfer+0x82>
 8008fde:	e048      	b.n	8009072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ff8:	d13b      	bne.n	8009072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	0151      	lsls	r1, r2, #5
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	440a      	add	r2, r1
 8009014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009018:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800901c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800903c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3301      	adds	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800904e:	4293      	cmp	r3, r2
 8009050:	d902      	bls.n	8009058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	75fb      	strb	r3, [r7, #23]
          break;
 8009056:	e00c      	b.n	8009072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800906c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009070:	d0e7      	beq.n	8009042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
}
 8009074:	4618      	mov	r0, r3
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	@ 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4611      	mov	r1, r2
 800908c:	461a      	mov	r2, r3
 800908e:	460b      	mov	r3, r1
 8009090:	71fb      	strb	r3, [r7, #7]
 8009092:	4613      	mov	r3, r2
 8009094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800909e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d123      	bne.n	80090ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090a6:	88bb      	ldrh	r3, [r7, #4]
 80090a8:	3303      	adds	r3, #3
 80090aa:	089b      	lsrs	r3, r3, #2
 80090ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	e018      	b.n	80090e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	031a      	lsls	r2, r3, #12
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090c0:	461a      	mov	r2, r3
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3301      	adds	r3, #1
 80090cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	3301      	adds	r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3301      	adds	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d3e2      	bcc.n	80090b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3724      	adds	r7, #36	@ 0x24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b08b      	sub	sp, #44	@ 0x2c
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	089b      	lsrs	r3, r3, #2
 8009116:	b29b      	uxth	r3, r3
 8009118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	623b      	str	r3, [r7, #32]
 8009126:	e014      	b.n	8009152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	601a      	str	r2, [r3, #0]
    pDest++;
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	3301      	adds	r3, #1
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	3301      	adds	r3, #1
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	3301      	adds	r3, #1
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	3301      	adds	r3, #1
 800914a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	3301      	adds	r3, #1
 8009150:	623b      	str	r3, [r7, #32]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	429a      	cmp	r2, r3
 8009158:	d3e6      	bcc.n	8009128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800915a:	8bfb      	ldrh	r3, [r7, #30]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01e      	beq.n	800919e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800916a:	461a      	mov	r2, r3
 800916c:	f107 0310 	add.w	r3, r7, #16
 8009170:	6812      	ldr	r2, [r2, #0]
 8009172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
 8009180:	b2da      	uxtb	r2, r3
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	701a      	strb	r2, [r3, #0]
      i++;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	3301      	adds	r3, #1
 800918a:	623b      	str	r3, [r7, #32]
      pDest++;
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	3301      	adds	r3, #1
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009192:	8bfb      	ldrh	r3, [r7, #30]
 8009194:	3b01      	subs	r3, #1
 8009196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009198:	8bfb      	ldrh	r3, [r7, #30]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1ea      	bne.n	8009174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	372c      	adds	r7, #44	@ 0x2c
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d12c      	bne.n	8009222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	db12      	blt.n	8009200 <USB_EPSetStall+0x54>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00f      	beq.n	8009200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	0151      	lsls	r1, r2, #5
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	440a      	add	r2, r1
 8009216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800921a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	e02b      	b.n	800927a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	db12      	blt.n	800925a <USB_EPSetStall+0xae>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00f      	beq.n	800925a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d128      	bne.n	80092f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d003      	beq.n	80092d4 <USB_EPClearStall+0x4c>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	791b      	ldrb	r3, [r3, #4]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d138      	bne.n	8009346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	0151      	lsls	r1, r2, #5
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	440a      	add	r2, r1
 80092ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	e027      	b.n	8009346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	0151      	lsls	r1, r2, #5
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	440a      	add	r2, r1
 800930c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	791b      	ldrb	r3, [r3, #4]
 800931a:	2b03      	cmp	r3, #3
 800931c:	d003      	beq.n	8009326 <USB_EPClearStall+0x9e>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d10f      	bne.n	8009346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009372:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009388:	68f9      	ldr	r1, [r7, #12]
 800938a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800938e:	4313      	orrs	r3, r2
 8009390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093ce:	f023 0302 	bic.w	r3, r3, #2
 80093d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093fc:	f023 0303 	bic.w	r3, r3, #3
 8009400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009410:	f043 0302 	orr.w	r3, r3, #2
 8009414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4013      	ands	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800943c:	68fb      	ldr	r3, [r7, #12]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	4013      	ands	r3, r2
 800946c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	0c1b      	lsrs	r3, r3, #16
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	4013      	ands	r3, r2
 80094a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	b29b      	uxth	r3, r3
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4013      	ands	r3, r2
 80094de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094e0:	68bb      	ldr	r3, [r7, #8]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b087      	sub	sp, #28
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	fa22 f303 	lsr.w	r3, r2, r3
 800951e:	01db      	lsls	r3, r3, #7
 8009520:	b2db      	uxtb	r3, r3
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4013      	ands	r3, r2
 800953a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800953c:	68bb      	ldr	r3, [r7, #8]
}
 800953e:	4618      	mov	r0, r3
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	f003 0301 	and.w	r3, r3, #1
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800959c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	460b      	mov	r3, r1
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	333c      	adds	r3, #60	@ 0x3c
 80095c2:	3304      	adds	r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	4a26      	ldr	r2, [pc, #152]	@ (8009664 <USB_EP0_OutStart+0xb8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d90a      	bls.n	80095e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095e0:	d101      	bne.n	80095e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e037      	b.n	8009656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ec:	461a      	mov	r2, r3
 80095ee:	2300      	movs	r3, #0
 80095f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009614:	f043 0318 	orr.w	r3, r3, #24
 8009618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009628:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800962c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d10f      	bne.n	8009654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963a:	461a      	mov	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800964e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	4f54300a 	.word	0x4f54300a

08009668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3301      	adds	r3, #1
 8009678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009680:	d901      	bls.n	8009686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e01b      	b.n	80096be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	daf2      	bge.n	8009674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f043 0201 	orr.w	r2, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096aa:	d901      	bls.n	80096b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e006      	b.n	80096be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d0f0      	beq.n	800969e <USB_CoreReset+0x36>

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
	...

080096cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80096dc:	f002 fc9e 	bl	800c01c <USBD_static_malloc>
 80096e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d109      	bne.n	80096fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32b0      	adds	r2, #176	@ 0xb0
 80096f2:	2100      	movs	r1, #0
 80096f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80096f8:	2302      	movs	r3, #2
 80096fa:	e0d4      	b.n	80098a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80096fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009700:	2100      	movs	r1, #0
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f003 fb0f 	bl	800cd26 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	32b0      	adds	r2, #176	@ 0xb0
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	32b0      	adds	r2, #176	@ 0xb0
 8009722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7c1b      	ldrb	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d138      	bne.n	80097a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009734:	4b5e      	ldr	r3, [pc, #376]	@ (80098b0 <USBD_CDC_Init+0x1e4>)
 8009736:	7819      	ldrb	r1, [r3, #0]
 8009738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800973c:	2202      	movs	r2, #2
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f002 fb49 	bl	800bdd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009744:	4b5a      	ldr	r3, [pc, #360]	@ (80098b0 <USBD_CDC_Init+0x1e4>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3324      	adds	r3, #36	@ 0x24
 800975a:	2201      	movs	r2, #1
 800975c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800975e:	4b55      	ldr	r3, [pc, #340]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009766:	2202      	movs	r2, #2
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f002 fb34 	bl	800bdd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800976e:	4b51      	ldr	r3, [pc, #324]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 020f 	and.w	r2, r3, #15
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009786:	2201      	movs	r2, #1
 8009788:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800978a:	4b4b      	ldr	r3, [pc, #300]	@ (80098b8 <USBD_CDC_Init+0x1ec>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	3326      	adds	r3, #38	@ 0x26
 80097a0:	2210      	movs	r2, #16
 80097a2:	801a      	strh	r2, [r3, #0]
 80097a4:	e035      	b.n	8009812 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097a6:	4b42      	ldr	r3, [pc, #264]	@ (80098b0 <USBD_CDC_Init+0x1e4>)
 80097a8:	7819      	ldrb	r1, [r3, #0]
 80097aa:	2340      	movs	r3, #64	@ 0x40
 80097ac:	2202      	movs	r2, #2
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f002 fb11 	bl	800bdd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097b4:	4b3e      	ldr	r3, [pc, #248]	@ (80098b0 <USBD_CDC_Init+0x1e4>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 020f 	and.w	r2, r3, #15
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	3324      	adds	r3, #36	@ 0x24
 80097ca:	2201      	movs	r2, #1
 80097cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80097ce:	4b39      	ldr	r3, [pc, #228]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 80097d0:	7819      	ldrb	r1, [r3, #0]
 80097d2:	2340      	movs	r3, #64	@ 0x40
 80097d4:	2202      	movs	r2, #2
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f002 fafd 	bl	800bdd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097dc:	4b35      	ldr	r3, [pc, #212]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 020f 	and.w	r2, r3, #15
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097f4:	2201      	movs	r2, #1
 80097f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097f8:	4b2f      	ldr	r3, [pc, #188]	@ (80098b8 <USBD_CDC_Init+0x1ec>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 020f 	and.w	r2, r3, #15
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	3326      	adds	r3, #38	@ 0x26
 800980e:	2210      	movs	r2, #16
 8009810:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009812:	4b29      	ldr	r3, [pc, #164]	@ (80098b8 <USBD_CDC_Init+0x1ec>)
 8009814:	7819      	ldrb	r1, [r3, #0]
 8009816:	2308      	movs	r3, #8
 8009818:	2203      	movs	r2, #3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f002 fadb 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009820:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <USBD_CDC_Init+0x1ec>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 020f 	and.w	r2, r3, #15
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	3324      	adds	r3, #36	@ 0x24
 8009836:	2201      	movs	r2, #1
 8009838:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	33b0      	adds	r3, #176	@ 0xb0
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009870:	2302      	movs	r3, #2
 8009872:	e018      	b.n	80098a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7c1b      	ldrb	r3, [r3, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800987c:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 800987e:	7819      	ldrb	r1, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 fb92 	bl	800bfb4 <USBD_LL_PrepareReceive>
 8009890:	e008      	b.n	80098a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009892:	4b08      	ldr	r3, [pc, #32]	@ (80098b4 <USBD_CDC_Init+0x1e8>)
 8009894:	7819      	ldrb	r1, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800989c:	2340      	movs	r3, #64	@ 0x40
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f002 fb88 	bl	800bfb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20000093 	.word	0x20000093
 80098b4:	20000094 	.word	0x20000094
 80098b8:	20000095 	.word	0x20000095

080098bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80098c8:	4b3a      	ldr	r3, [pc, #232]	@ (80099b4 <USBD_CDC_DeInit+0xf8>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f002 faa7 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80098d4:	4b37      	ldr	r3, [pc, #220]	@ (80099b4 <USBD_CDC_DeInit+0xf8>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 020f 	and.w	r2, r3, #15
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	3324      	adds	r3, #36	@ 0x24
 80098ea:	2200      	movs	r2, #0
 80098ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80098ee:	4b32      	ldr	r3, [pc, #200]	@ (80099b8 <USBD_CDC_DeInit+0xfc>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 fa94 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80098fa:	4b2f      	ldr	r3, [pc, #188]	@ (80099b8 <USBD_CDC_DeInit+0xfc>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 020f 	and.w	r2, r3, #15
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009912:	2200      	movs	r2, #0
 8009914:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009916:	4b29      	ldr	r3, [pc, #164]	@ (80099bc <USBD_CDC_DeInit+0x100>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f002 fa80 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009922:	4b26      	ldr	r3, [pc, #152]	@ (80099bc <USBD_CDC_DeInit+0x100>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 020f 	and.w	r2, r3, #15
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	3324      	adds	r3, #36	@ 0x24
 8009938:	2200      	movs	r2, #0
 800993a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800993c:	4b1f      	ldr	r3, [pc, #124]	@ (80099bc <USBD_CDC_DeInit+0x100>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	3326      	adds	r3, #38	@ 0x26
 8009952:	2200      	movs	r2, #0
 8009954:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32b0      	adds	r2, #176	@ 0xb0
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01f      	beq.n	80099a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	33b0      	adds	r3, #176	@ 0xb0
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	32b0      	adds	r2, #176	@ 0xb0
 8009986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998a:	4618      	mov	r0, r3
 800998c:	f002 fb54 	bl	800c038 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	32b0      	adds	r2, #176	@ 0xb0
 800999a:	2100      	movs	r1, #0
 800999c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000093 	.word	0x20000093
 80099b8:	20000094 	.word	0x20000094
 80099bc:	20000095 	.word	0x20000095

080099c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	32b0      	adds	r2, #176	@ 0xb0
 80099d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e0bf      	b.n	8009b70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d050      	beq.n	8009a9e <USBD_CDC_Setup+0xde>
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	f040 80af 	bne.w	8009b60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	88db      	ldrh	r3, [r3, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d03a      	beq.n	8009a80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b25b      	sxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da1b      	bge.n	8009a4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	33b0      	adds	r3, #176	@ 0xb0
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009a2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	88d2      	ldrh	r2, [r2, #6]
 8009a30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	88db      	ldrh	r3, [r3, #6]
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	bf28      	it	cs
 8009a3a:	2307      	movcs	r3, #7
 8009a3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	89fa      	ldrh	r2, [r7, #14]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 fd93 	bl	800b570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a4a:	e090      	b.n	8009b6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	785a      	ldrb	r2, [r3, #1]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	88db      	ldrh	r3, [r3, #6]
 8009a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a5c:	d803      	bhi.n	8009a66 <USBD_CDC_Setup+0xa6>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	e000      	b.n	8009a68 <USBD_CDC_Setup+0xa8>
 8009a66:	2240      	movs	r2, #64	@ 0x40
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a6e:	6939      	ldr	r1, [r7, #16]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009a76:	461a      	mov	r2, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fda5 	bl	800b5c8 <USBD_CtlPrepareRx>
      break;
 8009a7e:	e076      	b.n	8009b6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	33b0      	adds	r3, #176	@ 0xb0
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	7850      	ldrb	r0, [r2, #1]
 8009a96:	2200      	movs	r2, #0
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	4798      	blx	r3
      break;
 8009a9c:	e067      	b.n	8009b6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b0b      	cmp	r3, #11
 8009aa4:	d851      	bhi.n	8009b4a <USBD_CDC_Setup+0x18a>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <USBD_CDC_Setup+0xec>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009b59 	.word	0x08009b59
 8009ab4:	08009b4b 	.word	0x08009b4b
 8009ab8:	08009b4b 	.word	0x08009b4b
 8009abc:	08009b4b 	.word	0x08009b4b
 8009ac0:	08009b4b 	.word	0x08009b4b
 8009ac4:	08009b4b 	.word	0x08009b4b
 8009ac8:	08009b4b 	.word	0x08009b4b
 8009acc:	08009b4b 	.word	0x08009b4b
 8009ad0:	08009b4b 	.word	0x08009b4b
 8009ad4:	08009b07 	.word	0x08009b07
 8009ad8:	08009b31 	.word	0x08009b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d107      	bne.n	8009af8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ae8:	f107 030a 	add.w	r3, r7, #10
 8009aec:	2202      	movs	r2, #2
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fd3d 	bl	800b570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009af6:	e032      	b.n	8009b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fcbb 	bl	800b476 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	75fb      	strb	r3, [r7, #23]
          break;
 8009b04:	e02b      	b.n	8009b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d107      	bne.n	8009b22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b12:	f107 030d 	add.w	r3, r7, #13
 8009b16:	2201      	movs	r2, #1
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 fd28 	bl	800b570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b20:	e01d      	b.n	8009b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fca6 	bl	800b476 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b2e:	e016      	b.n	8009b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d00f      	beq.n	8009b5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 fc99 	bl	800b476 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b44:	2303      	movs	r3, #3
 8009b46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b48:	e008      	b.n	8009b5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 fc92 	bl	800b476 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b52:	2303      	movs	r3, #3
 8009b54:	75fb      	strb	r3, [r7, #23]
          break;
 8009b56:	e002      	b.n	8009b5e <USBD_CDC_Setup+0x19e>
          break;
 8009b58:	bf00      	nop
 8009b5a:	e008      	b.n	8009b6e <USBD_CDC_Setup+0x1ae>
          break;
 8009b5c:	bf00      	nop
      }
      break;
 8009b5e:	e006      	b.n	8009b6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 fc87 	bl	800b476 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	32b0      	adds	r2, #176	@ 0xb0
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e065      	b.n	8009c6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	32b0      	adds	r2, #176	@ 0xb0
 8009bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	f003 020f 	and.w	r2, r3, #15
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3318      	adds	r3, #24
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d02f      	beq.n	8009c2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	f003 020f 	and.w	r2, r3, #15
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	3318      	adds	r3, #24
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	f003 010f 	and.w	r1, r3, #15
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	460b      	mov	r3, r1
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	440b      	add	r3, r1
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4403      	add	r3, r0
 8009bf4:	331c      	adds	r3, #28
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d112      	bne.n	8009c2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	f003 020f 	and.w	r2, r3, #15
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	440b      	add	r3, r1
 8009c18:	3318      	adds	r3, #24
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c1e:	78f9      	ldrb	r1, [r7, #3]
 8009c20:	2300      	movs	r3, #0
 8009c22:	2200      	movs	r2, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f002 f9a4 	bl	800bf72 <USBD_LL_Transmit>
 8009c2a:	e01f      	b.n	8009c6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	33b0      	adds	r3, #176	@ 0xb0
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d010      	beq.n	8009c6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	33b0      	adds	r3, #176	@ 0xb0
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	32b0      	adds	r2, #176	@ 0xb0
 8009c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	32b0      	adds	r2, #176	@ 0xb0
 8009c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e01a      	b.n	8009cde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 f9a2 	bl	800bff6 <USBD_LL_GetRxDataSize>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	33b0      	adds	r3, #176	@ 0xb0
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32b0      	adds	r2, #176	@ 0xb0
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e024      	b.n	8009d52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	33b0      	adds	r3, #176	@ 0xb0
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d019      	beq.n	8009d50 <USBD_CDC_EP0_RxReady+0x6a>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009d22:	2bff      	cmp	r3, #255	@ 0xff
 8009d24:	d014      	beq.n	8009d50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	33b0      	adds	r3, #176	@ 0xb0
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009d3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	22ff      	movs	r2, #255	@ 0xff
 8009d4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d64:	2182      	movs	r1, #130	@ 0x82
 8009d66:	4818      	ldr	r0, [pc, #96]	@ (8009dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d68:	f000 fd4f 	bl	800a80a <USBD_GetEpDesc>
 8009d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4815      	ldr	r0, [pc, #84]	@ (8009dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d72:	f000 fd4a 	bl	800a80a <USBD_GetEpDesc>
 8009d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d78:	2181      	movs	r1, #129	@ 0x81
 8009d7a:	4813      	ldr	r0, [pc, #76]	@ (8009dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d7c:	f000 fd45 	bl	800a80a <USBD_GetEpDesc>
 8009d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2210      	movs	r2, #16
 8009d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d006      	beq.n	8009da2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d9c:	711a      	strb	r2, [r3, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d006      	beq.n	8009db6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db0:	711a      	strb	r2, [r3, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2243      	movs	r2, #67	@ 0x43
 8009dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	@ (8009dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000050 	.word	0x20000050

08009dcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009dd4:	2182      	movs	r1, #130	@ 0x82
 8009dd6:	4818      	ldr	r0, [pc, #96]	@ (8009e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009dd8:	f000 fd17 	bl	800a80a <USBD_GetEpDesc>
 8009ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dde:	2101      	movs	r1, #1
 8009de0:	4815      	ldr	r0, [pc, #84]	@ (8009e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009de2:	f000 fd12 	bl	800a80a <USBD_GetEpDesc>
 8009de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009de8:	2181      	movs	r1, #129	@ 0x81
 8009dea:	4813      	ldr	r0, [pc, #76]	@ (8009e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009dec:	f000 fd0d 	bl	800a80a <USBD_GetEpDesc>
 8009df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2200      	movs	r2, #0
 8009e08:	711a      	strb	r2, [r3, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f042 0202 	orr.w	r2, r2, #2
 8009e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	711a      	strb	r2, [r3, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f042 0202 	orr.w	r2, r2, #2
 8009e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2243      	movs	r2, #67	@ 0x43
 8009e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000050 	.word	0x20000050

08009e3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e44:	2182      	movs	r1, #130	@ 0x82
 8009e46:	4818      	ldr	r0, [pc, #96]	@ (8009ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e48:	f000 fcdf 	bl	800a80a <USBD_GetEpDesc>
 8009e4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4815      	ldr	r0, [pc, #84]	@ (8009ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e52:	f000 fcda 	bl	800a80a <USBD_GetEpDesc>
 8009e56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e58:	2181      	movs	r1, #129	@ 0x81
 8009e5a:	4813      	ldr	r0, [pc, #76]	@ (8009ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e5c:	f000 fcd5 	bl	800a80a <USBD_GetEpDesc>
 8009e60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2210      	movs	r2, #16
 8009e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e7c:	711a      	strb	r2, [r3, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d006      	beq.n	8009e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e90:	711a      	strb	r2, [r3, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2243      	movs	r2, #67	@ 0x43
 8009e9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000050 	.word	0x20000050

08009eac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	220a      	movs	r2, #10
 8009eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009eba:	4b03      	ldr	r3, [pc, #12]	@ (8009ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	2000000c 	.word	0x2000000c

08009ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e009      	b.n	8009ef4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	33b0      	adds	r3, #176	@ 0xb0
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	32b0      	adds	r2, #176	@ 0xb0
 8009f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e008      	b.n	8009f38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	32b0      	adds	r2, #176	@ 0xb0
 8009f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e004      	b.n	8009f72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	32b0      	adds	r2, #176	@ 0xb0
 8009f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e025      	b.n	8009ff2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11f      	bne.n	8009ff0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009fb8:	4b10      	ldr	r3, [pc, #64]	@ (8009ffc <USBD_CDC_TransmitPacket+0x7c>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 020f 	and.w	r2, r3, #15
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4403      	add	r3, r0
 8009fd2:	3318      	adds	r3, #24
 8009fd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <USBD_CDC_TransmitPacket+0x7c>)
 8009fd8:	7819      	ldrb	r1, [r3, #0]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 ffc3 	bl	800bf72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000093 	.word	0x20000093

0800a000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	32b0      	adds	r2, #176	@ 0xb0
 800a012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a016:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	32b0      	adds	r2, #176	@ 0xb0
 800a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e018      	b.n	800a060 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7c1b      	ldrb	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a036:	4b0c      	ldr	r3, [pc, #48]	@ (800a068 <USBD_CDC_ReceivePacket+0x68>)
 800a038:	7819      	ldrb	r1, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f001 ffb5 	bl	800bfb4 <USBD_LL_PrepareReceive>
 800a04a:	e008      	b.n	800a05e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <USBD_CDC_ReceivePacket+0x68>)
 800a04e:	7819      	ldrb	r1, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a056:	2340      	movs	r3, #64	@ 0x40
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 ffab 	bl	800bfb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000094 	.word	0x20000094

0800a06c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e01f      	b.n	800a0c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	79fa      	ldrb	r2, [r7, #7]
 800a0b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f001 fe25 	bl	800bd08 <USBD_LL_Init>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e025      	b.n	800a130 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	32ae      	adds	r2, #174	@ 0xae
 800a0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00f      	beq.n	800a120 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	32ae      	adds	r2, #174	@ 0xae
 800a10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	f107 020e 	add.w	r2, r7, #14
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	4602      	mov	r2, r0
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 fe2d 	bl	800bda0 <USBD_LL_Start>
 800a146:	4603      	mov	r3, r0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	4611      	mov	r1, r2
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	78fa      	ldrb	r2, [r7, #3]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f001 f90c 	bl	800b402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d01a      	beq.n	800a244 <USBD_LL_SetupStage+0x72>
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d822      	bhi.n	800a258 <USBD_LL_SetupStage+0x86>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <USBD_LL_SetupStage+0x4a>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d00a      	beq.n	800a230 <USBD_LL_SetupStage+0x5e>
 800a21a:	e01d      	b.n	800a258 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fb63 	bl	800a8f0 <USBD_StdDevReq>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
      break;
 800a22e:	e020      	b.n	800a272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fbcb 	bl	800a9d4 <USBD_StdItfReq>
 800a23e:	4603      	mov	r3, r0
 800a240:	73fb      	strb	r3, [r7, #15]
      break;
 800a242:	e016      	b.n	800a272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fc2d 	bl	800aaac <USBD_StdEPReq>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
      break;
 800a256:	e00c      	b.n	800a272 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a25e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a262:	b2db      	uxtb	r3, r3
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 fdfa 	bl	800be60 <USBD_LL_StallEP>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
      break;
 800a270:	bf00      	nop
  }

  return ret;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	460b      	mov	r3, r1
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d16e      	bne.n	800a372 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a29a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	f040 8098 	bne.w	800a3d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d913      	bls.n	800a2dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	1ad2      	subs	r2, r2, r3
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bf28      	it	cs
 800a2ce:	4613      	movcs	r3, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f001 f994 	bl	800b602 <USBD_CtlContinueRx>
 800a2da:	e07d      	b.n	800a3d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a2e2:	f003 031f 	and.w	r3, r3, #31
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d014      	beq.n	800a314 <USBD_LL_DataOutStage+0x98>
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d81d      	bhi.n	800a32a <USBD_LL_DataOutStage+0xae>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <USBD_LL_DataOutStage+0x7c>
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d003      	beq.n	800a2fe <USBD_LL_DataOutStage+0x82>
 800a2f6:	e018      	b.n	800a32a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75bb      	strb	r3, [r7, #22]
            break;
 800a2fc:	e018      	b.n	800a330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a304:	b2db      	uxtb	r3, r3
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 fa64 	bl	800a7d6 <USBD_CoreFindIF>
 800a30e:	4603      	mov	r3, r0
 800a310:	75bb      	strb	r3, [r7, #22]
            break;
 800a312:	e00d      	b.n	800a330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	4619      	mov	r1, r3
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fa66 	bl	800a7f0 <USBD_CoreFindEP>
 800a324:	4603      	mov	r3, r0
 800a326:	75bb      	strb	r3, [r7, #22]
            break;
 800a328:	e002      	b.n	800a330 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75bb      	strb	r3, [r7, #22]
            break;
 800a32e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a330:	7dbb      	ldrb	r3, [r7, #22]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d119      	bne.n	800a36a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d113      	bne.n	800a36a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a342:	7dba      	ldrb	r2, [r7, #22]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	32ae      	adds	r2, #174	@ 0xae
 800a348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00b      	beq.n	800a36a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a352:	7dba      	ldrb	r2, [r7, #22]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a35a:	7dba      	ldrb	r2, [r7, #22]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	32ae      	adds	r2, #174	@ 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f001 f95a 	bl	800b624 <USBD_CtlSendStatus>
 800a370:	e032      	b.n	800a3d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a372:	7afb      	ldrb	r3, [r7, #11]
 800a374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	4619      	mov	r1, r3
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 fa37 	bl	800a7f0 <USBD_CoreFindEP>
 800a382:	4603      	mov	r3, r0
 800a384:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a386:	7dbb      	ldrb	r3, [r7, #22]
 800a388:	2bff      	cmp	r3, #255	@ 0xff
 800a38a:	d025      	beq.n	800a3d8 <USBD_LL_DataOutStage+0x15c>
 800a38c:	7dbb      	ldrb	r3, [r7, #22]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d122      	bne.n	800a3d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d117      	bne.n	800a3ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a39e:	7dba      	ldrb	r2, [r7, #22]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	32ae      	adds	r2, #174	@ 0xae
 800a3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00f      	beq.n	800a3ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a3ae:	7dba      	ldrb	r2, [r7, #22]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a3b6:	7dba      	ldrb	r2, [r7, #22]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	32ae      	adds	r2, #174	@ 0xae
 800a3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	7afa      	ldrb	r2, [r7, #11]
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	4798      	blx	r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	e000      	b.n	800a3da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d16f      	bne.n	800a4d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a402:	2b02      	cmp	r3, #2
 800a404:	d15a      	bne.n	800a4bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d914      	bls.n	800a43c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	1ad2      	subs	r2, r2, r3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	461a      	mov	r2, r3
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f001 f8bc 	bl	800b5a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a42e:	2300      	movs	r3, #0
 800a430:	2200      	movs	r2, #0
 800a432:	2100      	movs	r1, #0
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f001 fdbd 	bl	800bfb4 <USBD_LL_PrepareReceive>
 800a43a:	e03f      	b.n	800a4bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68da      	ldr	r2, [r3, #12]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	429a      	cmp	r2, r3
 800a446:	d11c      	bne.n	800a482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a450:	429a      	cmp	r2, r3
 800a452:	d316      	bcc.n	800a482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a45e:	429a      	cmp	r2, r3
 800a460:	d20f      	bcs.n	800a482 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a462:	2200      	movs	r2, #0
 800a464:	2100      	movs	r1, #0
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f001 f89d 	bl	800b5a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a474:	2300      	movs	r3, #0
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f001 fd9a 	bl	800bfb4 <USBD_LL_PrepareReceive>
 800a480:	e01c      	b.n	800a4bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d10f      	bne.n	800a4ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4ae:	2180      	movs	r1, #128	@ 0x80
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f001 fcd5 	bl	800be60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f001 f8c7 	bl	800b64a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d03a      	beq.n	800a53c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fe42 	bl	800a150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a4d4:	e032      	b.n	800a53c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a4d6:	7afb      	ldrb	r3, [r7, #11]
 800a4d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f985 	bl	800a7f0 <USBD_CoreFindEP>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2bff      	cmp	r3, #255	@ 0xff
 800a4ee:	d025      	beq.n	800a53c <USBD_LL_DataInStage+0x15a>
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d122      	bne.n	800a53c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d11c      	bne.n	800a53c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a502:	7dfa      	ldrb	r2, [r7, #23]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	32ae      	adds	r2, #174	@ 0xae
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d014      	beq.n	800a53c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a512:	7dfa      	ldrb	r2, [r7, #23]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a51a:	7dfa      	ldrb	r2, [r7, #23]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	32ae      	adds	r2, #174	@ 0xae
 800a520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	7afa      	ldrb	r2, [r7, #11]
 800a528:	4611      	mov	r1, r2
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	4798      	blx	r3
 800a52e:	4603      	mov	r3, r0
 800a530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a538:	7dbb      	ldrb	r3, [r7, #22]
 800a53a:	e000      	b.n	800a53e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d014      	beq.n	800a5ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6852      	ldr	r2, [r2, #4]
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	4611      	mov	r1, r2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fc0f 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2240      	movs	r2, #64	@ 0x40
 800a5c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5c8:	2340      	movs	r3, #64	@ 0x40
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2180      	movs	r1, #128	@ 0x80
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fc01 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2240      	movs	r2, #64	@ 0x40
 800a5de:	621a      	str	r2, [r3, #32]

  return ret;
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	78fa      	ldrb	r2, [r7, #3]
 800a5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	d006      	beq.n	800a62c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a624:	b2da      	uxtb	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2204      	movs	r2, #4
 800a630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b04      	cmp	r3, #4
 800a654:	d106      	bne.n	800a664 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b03      	cmp	r3, #3
 800a684:	d110      	bne.n	800a6a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	32ae      	adds	r2, #174	@ 0xae
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e01c      	b.n	800a70e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d115      	bne.n	800a70c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	32ae      	adds	r2, #174	@ 0xae
 800a6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32ae      	adds	r2, #174	@ 0xae
 800a6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	78fa      	ldrb	r2, [r7, #3]
 800a706:	4611      	mov	r1, r2
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	32ae      	adds	r2, #174	@ 0xae
 800a72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	e01c      	b.n	800a772 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b03      	cmp	r3, #3
 800a742:	d115      	bne.n	800a770 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	32ae      	adds	r2, #174	@ 0xae
 800a74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	32ae      	adds	r2, #174	@ 0xae
 800a762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	4611      	mov	r1, r2
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00e      	beq.n	800a7cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6852      	ldr	r2, [r2, #4]
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	4611      	mov	r1, r2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b086      	sub	sp, #24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	460b      	mov	r3, r1
 800a814:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	885b      	ldrh	r3, [r3, #2]
 800a826:	b29b      	uxth	r3, r3
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	7812      	ldrb	r2, [r2, #0]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d91f      	bls.n	800a870 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a836:	e013      	b.n	800a860 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a838:	f107 030a 	add.w	r3, r7, #10
 800a83c:	4619      	mov	r1, r3
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	f000 f81b 	bl	800a87a <USBD_GetNextDesc>
 800a844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	785b      	ldrb	r3, [r3, #1]
 800a84a:	2b05      	cmp	r3, #5
 800a84c:	d108      	bne.n	800a860 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	789b      	ldrb	r3, [r3, #2]
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d008      	beq.n	800a86e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	885b      	ldrh	r3, [r3, #2]
 800a864:	b29a      	uxth	r2, r3
 800a866:	897b      	ldrh	r3, [r7, #10]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d8e5      	bhi.n	800a838 <USBD_GetEpDesc+0x2e>
 800a86c:	e000      	b.n	800a870 <USBD_GetEpDesc+0x66>
          break;
 800a86e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a870:	693b      	ldr	r3, [r7, #16]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	4413      	add	r3, r2
 800a892:	b29a      	uxth	r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b087      	sub	sp, #28
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b21b      	sxth	r3, r3
 800a8e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8e2:	89fb      	ldrh	r3, [r7, #14]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	371c      	adds	r7, #28
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a906:	2b40      	cmp	r3, #64	@ 0x40
 800a908:	d005      	beq.n	800a916 <USBD_StdDevReq+0x26>
 800a90a:	2b40      	cmp	r3, #64	@ 0x40
 800a90c:	d857      	bhi.n	800a9be <USBD_StdDevReq+0xce>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00f      	beq.n	800a932 <USBD_StdDevReq+0x42>
 800a912:	2b20      	cmp	r3, #32
 800a914:	d153      	bne.n	800a9be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	32ae      	adds	r2, #174	@ 0xae
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
      break;
 800a930:	e04a      	b.n	800a9c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b09      	cmp	r3, #9
 800a938:	d83b      	bhi.n	800a9b2 <USBD_StdDevReq+0xc2>
 800a93a:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <USBD_StdDevReq+0x50>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a9a9 	.word	0x0800a9a9
 800a948:	0800a9b3 	.word	0x0800a9b3
 800a94c:	0800a99f 	.word	0x0800a99f
 800a950:	0800a9b3 	.word	0x0800a9b3
 800a954:	0800a973 	.word	0x0800a973
 800a958:	0800a969 	.word	0x0800a969
 800a95c:	0800a9b3 	.word	0x0800a9b3
 800a960:	0800a98b 	.word	0x0800a98b
 800a964:	0800a97d 	.word	0x0800a97d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa3c 	bl	800ade8 <USBD_GetDescriptor>
          break;
 800a970:	e024      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fba1 	bl	800b0bc <USBD_SetAddress>
          break;
 800a97a:	e01f      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fbe0 	bl	800b144 <USBD_SetConfig>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
          break;
 800a988:	e018      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fc83 	bl	800b298 <USBD_GetConfig>
          break;
 800a992:	e013      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fcb4 	bl	800b304 <USBD_GetStatus>
          break;
 800a99c:	e00e      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fce3 	bl	800b36c <USBD_SetFeature>
          break;
 800a9a6:	e009      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fd07 	bl	800b3be <USBD_ClrFeature>
          break;
 800a9b0:	e004      	b.n	800a9bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fd5e 	bl	800b476 <USBD_CtlError>
          break;
 800a9ba:	bf00      	nop
      }
      break;
 800a9bc:	e004      	b.n	800a9c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fd58 	bl	800b476 <USBD_CtlError>
      break;
 800a9c6:	bf00      	nop
  }

  return ret;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop

0800a9d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9ea:	2b40      	cmp	r3, #64	@ 0x40
 800a9ec:	d005      	beq.n	800a9fa <USBD_StdItfReq+0x26>
 800a9ee:	2b40      	cmp	r3, #64	@ 0x40
 800a9f0:	d852      	bhi.n	800aa98 <USBD_StdItfReq+0xc4>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <USBD_StdItfReq+0x26>
 800a9f6:	2b20      	cmp	r3, #32
 800a9f8:	d14e      	bne.n	800aa98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d840      	bhi.n	800aa8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	889b      	ldrh	r3, [r3, #4]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d836      	bhi.n	800aa80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	889b      	ldrh	r3, [r3, #4]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fedb 	bl	800a7d6 <USBD_CoreFindIF>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2bff      	cmp	r3, #255	@ 0xff
 800aa28:	d01d      	beq.n	800aa66 <USBD_StdItfReq+0x92>
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d11a      	bne.n	800aa66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aa30:	7bba      	ldrb	r2, [r7, #14]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	32ae      	adds	r2, #174	@ 0xae
 800aa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00f      	beq.n	800aa60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aa40:	7bba      	ldrb	r2, [r7, #14]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa48:	7bba      	ldrb	r2, [r7, #14]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32ae      	adds	r2, #174	@ 0xae
 800aa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	4798      	blx	r3
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa5e:	e004      	b.n	800aa6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa60:	2303      	movs	r3, #3
 800aa62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa64:	e001      	b.n	800aa6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa66:	2303      	movs	r3, #3
 800aa68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	88db      	ldrh	r3, [r3, #6]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d110      	bne.n	800aa94 <USBD_StdItfReq+0xc0>
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10d      	bne.n	800aa94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fdd3 	bl	800b624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa7e:	e009      	b.n	800aa94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fcf7 	bl	800b476 <USBD_CtlError>
          break;
 800aa88:	e004      	b.n	800aa94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fcf2 	bl	800b476 <USBD_CtlError>
          break;
 800aa92:	e000      	b.n	800aa96 <USBD_StdItfReq+0xc2>
          break;
 800aa94:	bf00      	nop
      }
      break;
 800aa96:	e004      	b.n	800aaa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fceb 	bl	800b476 <USBD_CtlError>
      break;
 800aaa0:	bf00      	nop
  }

  return ret;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	889b      	ldrh	r3, [r3, #4]
 800aabe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aac8:	2b40      	cmp	r3, #64	@ 0x40
 800aaca:	d007      	beq.n	800aadc <USBD_StdEPReq+0x30>
 800aacc:	2b40      	cmp	r3, #64	@ 0x40
 800aace:	f200 817f 	bhi.w	800add0 <USBD_StdEPReq+0x324>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d02a      	beq.n	800ab2c <USBD_StdEPReq+0x80>
 800aad6:	2b20      	cmp	r3, #32
 800aad8:	f040 817a 	bne.w	800add0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff fe85 	bl	800a7f0 <USBD_CoreFindEP>
 800aae6:	4603      	mov	r3, r0
 800aae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaea:	7b7b      	ldrb	r3, [r7, #13]
 800aaec:	2bff      	cmp	r3, #255	@ 0xff
 800aaee:	f000 8174 	beq.w	800adda <USBD_StdEPReq+0x32e>
 800aaf2:	7b7b      	ldrb	r3, [r7, #13]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f040 8170 	bne.w	800adda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aafa:	7b7a      	ldrb	r2, [r7, #13]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab02:	7b7a      	ldrb	r2, [r7, #13]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	32ae      	adds	r2, #174	@ 0xae
 800ab08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 8163 	beq.w	800adda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ab14:	7b7a      	ldrb	r2, [r7, #13]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32ae      	adds	r2, #174	@ 0xae
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab2a:	e156      	b.n	800adda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	785b      	ldrb	r3, [r3, #1]
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d008      	beq.n	800ab46 <USBD_StdEPReq+0x9a>
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	f300 8145 	bgt.w	800adc4 <USBD_StdEPReq+0x318>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 809b 	beq.w	800ac76 <USBD_StdEPReq+0x1ca>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d03c      	beq.n	800abbe <USBD_StdEPReq+0x112>
 800ab44:	e13e      	b.n	800adc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d002      	beq.n	800ab58 <USBD_StdEPReq+0xac>
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d016      	beq.n	800ab84 <USBD_StdEPReq+0xd8>
 800ab56:	e02c      	b.n	800abb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00d      	beq.n	800ab7a <USBD_StdEPReq+0xce>
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	2b80      	cmp	r3, #128	@ 0x80
 800ab62:	d00a      	beq.n	800ab7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 f979 	bl	800be60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab6e:	2180      	movs	r1, #128	@ 0x80
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f975 	bl	800be60 <USBD_LL_StallEP>
 800ab76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab78:	e020      	b.n	800abbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fc7a 	bl	800b476 <USBD_CtlError>
              break;
 800ab82:	e01b      	b.n	800abbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	885b      	ldrh	r3, [r3, #2]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10e      	bne.n	800abaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00b      	beq.n	800abaa <USBD_StdEPReq+0xfe>
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b80      	cmp	r3, #128	@ 0x80
 800ab96:	d008      	beq.n	800abaa <USBD_StdEPReq+0xfe>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	88db      	ldrh	r3, [r3, #6]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f95b 	bl	800be60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fd3a 	bl	800b624 <USBD_CtlSendStatus>

              break;
 800abb0:	e004      	b.n	800abbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fc5e 	bl	800b476 <USBD_CtlError>
              break;
 800abba:	bf00      	nop
          }
          break;
 800abbc:	e107      	b.n	800adce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d002      	beq.n	800abd0 <USBD_StdEPReq+0x124>
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d016      	beq.n	800abfc <USBD_StdEPReq+0x150>
 800abce:	e04b      	b.n	800ac68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00d      	beq.n	800abf2 <USBD_StdEPReq+0x146>
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	2b80      	cmp	r3, #128	@ 0x80
 800abda:	d00a      	beq.n	800abf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f001 f93d 	bl	800be60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abe6:	2180      	movs	r1, #128	@ 0x80
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 f939 	bl	800be60 <USBD_LL_StallEP>
 800abee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abf0:	e040      	b.n	800ac74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc3e 	bl	800b476 <USBD_CtlError>
              break;
 800abfa:	e03b      	b.n	800ac74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	885b      	ldrh	r3, [r3, #2]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d136      	bne.n	800ac72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f001 f943 	bl	800be9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fd03 	bl	800b624 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff fde4 	bl	800a7f0 <USBD_CoreFindEP>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac2c:	7b7b      	ldrb	r3, [r7, #13]
 800ac2e:	2bff      	cmp	r3, #255	@ 0xff
 800ac30:	d01f      	beq.n	800ac72 <USBD_StdEPReq+0x1c6>
 800ac32:	7b7b      	ldrb	r3, [r7, #13]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11c      	bne.n	800ac72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ac38:	7b7a      	ldrb	r2, [r7, #13]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ac40:	7b7a      	ldrb	r2, [r7, #13]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d010      	beq.n	800ac72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac50:	7b7a      	ldrb	r2, [r7, #13]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	32ae      	adds	r2, #174	@ 0xae
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac66:	e004      	b.n	800ac72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fc03 	bl	800b476 <USBD_CtlError>
              break;
 800ac70:	e000      	b.n	800ac74 <USBD_StdEPReq+0x1c8>
              break;
 800ac72:	bf00      	nop
          }
          break;
 800ac74:	e0ab      	b.n	800adce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d002      	beq.n	800ac88 <USBD_StdEPReq+0x1dc>
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d032      	beq.n	800acec <USBD_StdEPReq+0x240>
 800ac86:	e097      	b.n	800adb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d007      	beq.n	800ac9e <USBD_StdEPReq+0x1f2>
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	2b80      	cmp	r3, #128	@ 0x80
 800ac92:	d004      	beq.n	800ac9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fbed 	bl	800b476 <USBD_CtlError>
                break;
 800ac9c:	e091      	b.n	800adc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	da0b      	bge.n	800acbe <USBD_StdEPReq+0x212>
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	3310      	adds	r3, #16
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4413      	add	r3, r2
 800acba:	3304      	adds	r3, #4
 800acbc:	e00b      	b.n	800acd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4413      	add	r3, r2
 800acd4:	3304      	adds	r3, #4
 800acd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2202      	movs	r2, #2
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fc43 	bl	800b570 <USBD_CtlSendData>
              break;
 800acea:	e06a      	b.n	800adc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800acec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da11      	bge.n	800ad18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	f003 020f 	and.w	r2, r3, #15
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	3324      	adds	r3, #36	@ 0x24
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d117      	bne.n	800ad3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fbb0 	bl	800b476 <USBD_CtlError>
                  break;
 800ad16:	e054      	b.n	800adc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	f003 020f 	and.w	r2, r3, #15
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fb9d 	bl	800b476 <USBD_CtlError>
                  break;
 800ad3c:	e041      	b.n	800adc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da0b      	bge.n	800ad5e <USBD_StdEPReq+0x2b2>
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	3310      	adds	r3, #16
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	4413      	add	r3, r2
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	e00b      	b.n	800ad76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	3304      	adds	r3, #4
 800ad76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <USBD_StdEPReq+0x2d8>
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	2b80      	cmp	r3, #128	@ 0x80
 800ad82:	d103      	bne.n	800ad8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e00e      	b.n	800adaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 f8a3 	bl	800bedc <USBD_LL_IsStallEP>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d003      	beq.n	800ada4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	e002      	b.n	800adaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2202      	movs	r2, #2
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fbdd 	bl	800b570 <USBD_CtlSendData>
              break;
 800adb6:	e004      	b.n	800adc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fb5b 	bl	800b476 <USBD_CtlError>
              break;
 800adc0:	bf00      	nop
          }
          break;
 800adc2:	e004      	b.n	800adce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fb55 	bl	800b476 <USBD_CtlError>
          break;
 800adcc:	bf00      	nop
      }
      break;
 800adce:	e005      	b.n	800addc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fb4f 	bl	800b476 <USBD_CtlError>
      break;
 800add8:	e000      	b.n	800addc <USBD_StdEPReq+0x330>
      break;
 800adda:	bf00      	nop
  }

  return ret;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	885b      	ldrh	r3, [r3, #2]
 800ae02:	0a1b      	lsrs	r3, r3, #8
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b06      	cmp	r3, #6
 800ae0a:	f200 8128 	bhi.w	800b05e <USBD_GetDescriptor+0x276>
 800ae0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae14 <USBD_GetDescriptor+0x2c>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae31 	.word	0x0800ae31
 800ae18:	0800ae49 	.word	0x0800ae49
 800ae1c:	0800ae89 	.word	0x0800ae89
 800ae20:	0800b05f 	.word	0x0800b05f
 800ae24:	0800b05f 	.word	0x0800b05f
 800ae28:	0800afff 	.word	0x0800afff
 800ae2c:	0800b02b 	.word	0x0800b02b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7c12      	ldrb	r2, [r2, #16]
 800ae3c:	f107 0108 	add.w	r1, r7, #8
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	60f8      	str	r0, [r7, #12]
      break;
 800ae46:	e112      	b.n	800b06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7c1b      	ldrb	r3, [r3, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10d      	bne.n	800ae6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae58:	f107 0208 	add.w	r2, r7, #8
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3301      	adds	r3, #1
 800ae66:	2202      	movs	r2, #2
 800ae68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae6a:	e100      	b.n	800b06e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	f107 0208 	add.w	r2, r7, #8
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3301      	adds	r3, #1
 800ae82:	2202      	movs	r2, #2
 800ae84:	701a      	strb	r2, [r3, #0]
      break;
 800ae86:	e0f2      	b.n	800b06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	885b      	ldrh	r3, [r3, #2]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	f200 80ac 	bhi.w	800afec <USBD_GetDescriptor+0x204>
 800ae94:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <USBD_GetDescriptor+0xb4>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800aeb5 	.word	0x0800aeb5
 800aea0:	0800aee9 	.word	0x0800aee9
 800aea4:	0800af1d 	.word	0x0800af1d
 800aea8:	0800af51 	.word	0x0800af51
 800aeac:	0800af85 	.word	0x0800af85
 800aeb0:	0800afb9 	.word	0x0800afb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	7c12      	ldrb	r2, [r2, #16]
 800aecc:	f107 0108 	add.w	r1, r7, #8
 800aed0:	4610      	mov	r0, r2
 800aed2:	4798      	blx	r3
 800aed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed6:	e091      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 facb 	bl	800b476 <USBD_CtlError>
            err++;
 800aee0:	7afb      	ldrb	r3, [r7, #11]
 800aee2:	3301      	adds	r3, #1
 800aee4:	72fb      	strb	r3, [r7, #11]
          break;
 800aee6:	e089      	b.n	800affc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00b      	beq.n	800af0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	7c12      	ldrb	r2, [r2, #16]
 800af00:	f107 0108 	add.w	r1, r7, #8
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af0a:	e077      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fab1 	bl	800b476 <USBD_CtlError>
            err++;
 800af14:	7afb      	ldrb	r3, [r7, #11]
 800af16:	3301      	adds	r3, #1
 800af18:	72fb      	strb	r3, [r7, #11]
          break;
 800af1a:	e06f      	b.n	800affc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	7c12      	ldrb	r2, [r2, #16]
 800af34:	f107 0108 	add.w	r1, r7, #8
 800af38:	4610      	mov	r0, r2
 800af3a:	4798      	blx	r3
 800af3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3e:	e05d      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa97 	bl	800b476 <USBD_CtlError>
            err++;
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	3301      	adds	r3, #1
 800af4c:	72fb      	strb	r3, [r7, #11]
          break;
 800af4e:	e055      	b.n	800affc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00b      	beq.n	800af74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	7c12      	ldrb	r2, [r2, #16]
 800af68:	f107 0108 	add.w	r1, r7, #8
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
 800af70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af72:	e043      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fa7d 	bl	800b476 <USBD_CtlError>
            err++;
 800af7c:	7afb      	ldrb	r3, [r7, #11]
 800af7e:	3301      	adds	r3, #1
 800af80:	72fb      	strb	r3, [r7, #11]
          break;
 800af82:	e03b      	b.n	800affc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	7c12      	ldrb	r2, [r2, #16]
 800af9c:	f107 0108 	add.w	r1, r7, #8
 800afa0:	4610      	mov	r0, r2
 800afa2:	4798      	blx	r3
 800afa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afa6:	e029      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa63 	bl	800b476 <USBD_CtlError>
            err++;
 800afb0:	7afb      	ldrb	r3, [r7, #11]
 800afb2:	3301      	adds	r3, #1
 800afb4:	72fb      	strb	r3, [r7, #11]
          break;
 800afb6:	e021      	b.n	800affc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00b      	beq.n	800afdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	7c12      	ldrb	r2, [r2, #16]
 800afd0:	f107 0108 	add.w	r1, r7, #8
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afda:	e00f      	b.n	800affc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fa49 	bl	800b476 <USBD_CtlError>
            err++;
 800afe4:	7afb      	ldrb	r3, [r7, #11]
 800afe6:	3301      	adds	r3, #1
 800afe8:	72fb      	strb	r3, [r7, #11]
          break;
 800afea:	e007      	b.n	800affc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa41 	bl	800b476 <USBD_CtlError>
          err++;
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	3301      	adds	r3, #1
 800aff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800affa:	bf00      	nop
      }
      break;
 800affc:	e037      	b.n	800b06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	7c1b      	ldrb	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b00e:	f107 0208 	add.w	r2, r7, #8
 800b012:	4610      	mov	r0, r2
 800b014:	4798      	blx	r3
 800b016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b018:	e029      	b.n	800b06e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fa2a 	bl	800b476 <USBD_CtlError>
        err++;
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	3301      	adds	r3, #1
 800b026:	72fb      	strb	r3, [r7, #11]
      break;
 800b028:	e021      	b.n	800b06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	7c1b      	ldrb	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10d      	bne.n	800b04e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b03a:	f107 0208 	add.w	r2, r7, #8
 800b03e:	4610      	mov	r0, r2
 800b040:	4798      	blx	r3
 800b042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	2207      	movs	r2, #7
 800b04a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b04c:	e00f      	b.n	800b06e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fa10 	bl	800b476 <USBD_CtlError>
        err++;
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	3301      	adds	r3, #1
 800b05a:	72fb      	strb	r3, [r7, #11]
      break;
 800b05c:	e007      	b.n	800b06e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fa08 	bl	800b476 <USBD_CtlError>
      err++;
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	3301      	adds	r3, #1
 800b06a:	72fb      	strb	r3, [r7, #11]
      break;
 800b06c:	bf00      	nop
  }

  if (err != 0U)
 800b06e:	7afb      	ldrb	r3, [r7, #11]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d11e      	bne.n	800b0b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d016      	beq.n	800b0aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b07c:	893b      	ldrh	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00e      	beq.n	800b0a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	88da      	ldrh	r2, [r3, #6]
 800b086:	893b      	ldrh	r3, [r7, #8]
 800b088:	4293      	cmp	r3, r2
 800b08a:	bf28      	it	cs
 800b08c:	4613      	movcs	r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b092:	893b      	ldrh	r3, [r7, #8]
 800b094:	461a      	mov	r2, r3
 800b096:	68f9      	ldr	r1, [r7, #12]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fa69 	bl	800b570 <USBD_CtlSendData>
 800b09e:	e009      	b.n	800b0b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9e7 	bl	800b476 <USBD_CtlError>
 800b0a8:	e004      	b.n	800b0b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 faba 	bl	800b624 <USBD_CtlSendStatus>
 800b0b0:	e000      	b.n	800b0b4 <USBD_GetDescriptor+0x2cc>
    return;
 800b0b2:	bf00      	nop
  }
}
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop

0800b0bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	889b      	ldrh	r3, [r3, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d131      	bne.n	800b132 <USBD_SetAddress+0x76>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	88db      	ldrh	r3, [r3, #6]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d12d      	bne.n	800b132 <USBD_SetAddress+0x76>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0dc:	d829      	bhi.n	800b132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	885b      	ldrh	r3, [r3, #2]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d104      	bne.n	800b100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f9bc 	bl	800b476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fe:	e01d      	b.n	800b13c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7bfa      	ldrb	r2, [r7, #15]
 800b104:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 ff11 	bl	800bf34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa86 	bl	800b624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d004      	beq.n	800b128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2202      	movs	r2, #2
 800b122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b126:	e009      	b.n	800b13c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b130:	e004      	b.n	800b13c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f99e 	bl	800b476 <USBD_CtlError>
  }
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	4b4e      	ldr	r3, [pc, #312]	@ (800b294 <USBD_SetConfig+0x150>)
 800b15a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b15c:	4b4d      	ldr	r3, [pc, #308]	@ (800b294 <USBD_SetConfig+0x150>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d905      	bls.n	800b170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f985 	bl	800b476 <USBD_CtlError>
    return USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e08c      	b.n	800b28a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d002      	beq.n	800b182 <USBD_SetConfig+0x3e>
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d029      	beq.n	800b1d4 <USBD_SetConfig+0x90>
 800b180:	e075      	b.n	800b26e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b182:	4b44      	ldr	r3, [pc, #272]	@ (800b294 <USBD_SetConfig+0x150>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d020      	beq.n	800b1cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b18a:	4b42      	ldr	r3, [pc, #264]	@ (800b294 <USBD_SetConfig+0x150>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b194:	4b3f      	ldr	r3, [pc, #252]	@ (800b294 <USBD_SetConfig+0x150>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7fe ffe3 	bl	800a166 <USBD_SetClassConfig>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d008      	beq.n	800b1bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f962 	bl	800b476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1ba:	e065      	b.n	800b288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fa31 	bl	800b624 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b1ca:	e05d      	b.n	800b288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa29 	bl	800b624 <USBD_CtlSendStatus>
      break;
 800b1d2:	e059      	b.n	800b288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b294 <USBD_SetConfig+0x150>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d112      	bne.n	800b202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2202      	movs	r2, #2
 800b1e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b1e4:	4b2b      	ldr	r3, [pc, #172]	@ (800b294 <USBD_SetConfig+0x150>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ee:	4b29      	ldr	r3, [pc, #164]	@ (800b294 <USBD_SetConfig+0x150>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7fe ffd2 	bl	800a19e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa12 	bl	800b624 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b200:	e042      	b.n	800b288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b202:	4b24      	ldr	r3, [pc, #144]	@ (800b294 <USBD_SetConfig+0x150>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d02a      	beq.n	800b266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	b2db      	uxtb	r3, r3
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7fe ffc0 	bl	800a19e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b21e:	4b1d      	ldr	r3, [pc, #116]	@ (800b294 <USBD_SetConfig+0x150>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b228:	4b1a      	ldr	r3, [pc, #104]	@ (800b294 <USBD_SetConfig+0x150>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe ff99 	bl	800a166 <USBD_SetClassConfig>
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00f      	beq.n	800b25e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f918 	bl	800b476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7fe ffa5 	bl	800a19e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b25c:	e014      	b.n	800b288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f9e0 	bl	800b624 <USBD_CtlSendStatus>
      break;
 800b264:	e010      	b.n	800b288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f9dc 	bl	800b624 <USBD_CtlSendStatus>
      break;
 800b26c:	e00c      	b.n	800b288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f900 	bl	800b476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b276:	4b07      	ldr	r3, [pc, #28]	@ (800b294 <USBD_SetConfig+0x150>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7fe ff8e 	bl	800a19e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
      break;
 800b286:	bf00      	nop
  }

  return ret;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20000594 	.word	0x20000594

0800b298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	88db      	ldrh	r3, [r3, #6]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d004      	beq.n	800b2b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8e2 	bl	800b476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2b2:	e023      	b.n	800b2fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	dc02      	bgt.n	800b2c6 <USBD_GetConfig+0x2e>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc03      	bgt.n	800b2cc <USBD_GetConfig+0x34>
 800b2c4:	e015      	b.n	800b2f2 <USBD_GetConfig+0x5a>
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d00b      	beq.n	800b2e2 <USBD_GetConfig+0x4a>
 800b2ca:	e012      	b.n	800b2f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f948 	bl	800b570 <USBD_CtlSendData>
        break;
 800b2e0:	e00c      	b.n	800b2fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f940 	bl	800b570 <USBD_CtlSendData>
        break;
 800b2f0:	e004      	b.n	800b2fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f8be 	bl	800b476 <USBD_CtlError>
        break;
 800b2fa:	bf00      	nop
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d81e      	bhi.n	800b35a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	88db      	ldrh	r3, [r3, #6]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d004      	beq.n	800b32e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f8a5 	bl	800b476 <USBD_CtlError>
        break;
 800b32c:	e01a      	b.n	800b364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	f043 0202 	orr.w	r2, r3, #2
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	330c      	adds	r3, #12
 800b34e:	2202      	movs	r2, #2
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f90c 	bl	800b570 <USBD_CtlSendData>
      break;
 800b358:	e004      	b.n	800b364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f88a 	bl	800b476 <USBD_CtlError>
      break;
 800b362:	bf00      	nop
  }
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	885b      	ldrh	r3, [r3, #2]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d107      	bne.n	800b38e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f94c 	bl	800b624 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b38c:	e013      	b.n	800b3b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	885b      	ldrh	r3, [r3, #2]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d10b      	bne.n	800b3ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	889b      	ldrh	r3, [r3, #4]
 800b39a:	0a1b      	lsrs	r3, r3, #8
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f93c 	bl	800b624 <USBD_CtlSendStatus>
}
 800b3ac:	e003      	b.n	800b3b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f860 	bl	800b476 <USBD_CtlError>
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d80b      	bhi.n	800b3ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	885b      	ldrh	r3, [r3, #2]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d10c      	bne.n	800b3f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f91c 	bl	800b624 <USBD_CtlSendStatus>
      }
      break;
 800b3ec:	e004      	b.n	800b3f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f840 	bl	800b476 <USBD_CtlError>
      break;
 800b3f6:	e000      	b.n	800b3fa <USBD_ClrFeature+0x3c>
      break;
 800b3f8:	bf00      	nop
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3301      	adds	r3, #1
 800b41c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3301      	adds	r3, #1
 800b42a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff fa40 	bl	800a8b2 <SWAPBYTE>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3301      	adds	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fa33 	bl	800a8b2 <SWAPBYTE>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3301      	adds	r3, #1
 800b458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff fa26 	bl	800a8b2 <SWAPBYTE>
 800b466:	4603      	mov	r3, r0
 800b468:	461a      	mov	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	80da      	strh	r2, [r3, #6]
}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b480:	2180      	movs	r1, #128	@ 0x80
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fcec 	bl	800be60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b488:	2100      	movs	r1, #0
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fce8 	bl	800be60 <USBD_LL_StallEP>
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d042      	beq.n	800b534 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b4b2:	6938      	ldr	r0, [r7, #16]
 800b4b4:	f000 f842 	bl	800b53c <USBD_GetLen>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4c2:	d808      	bhi.n	800b4d6 <USBD_GetString+0x3e>
 800b4c4:	6938      	ldr	r0, [r7, #16]
 800b4c6:	f000 f839 	bl	800b53c <USBD_GetLen>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	e001      	b.n	800b4da <USBD_GetString+0x42>
 800b4d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	7812      	ldrb	r2, [r2, #0]
 800b4e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	2203      	movs	r2, #3
 800b4f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b500:	e013      	b.n	800b52a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	4413      	add	r3, r2
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3301      	adds	r3, #1
 800b512:	613b      	str	r3, [r7, #16]
    idx++;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	3301      	adds	r3, #1
 800b518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	4413      	add	r3, r2
 800b520:	2200      	movs	r2, #0
 800b522:	701a      	strb	r2, [r3, #0]
    idx++;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	3301      	adds	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e7      	bne.n	800b502 <USBD_GetString+0x6a>
 800b532:	e000      	b.n	800b536 <USBD_GetString+0x9e>
    return;
 800b534:	bf00      	nop
  }
}
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b54c:	e005      	b.n	800b55a <USBD_GetLen+0x1e>
  {
    len++;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	3301      	adds	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3301      	adds	r3, #1
 800b558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f5      	bne.n	800b54e <USBD_GetLen+0x12>
  }

  return len;
 800b562:	7bfb      	ldrb	r3, [r7, #15]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2202      	movs	r2, #2
 800b580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	2100      	movs	r1, #0
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 fceb 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 fcda 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2203      	movs	r2, #3
 800b5d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fcde 	bl	800bfb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	2100      	movs	r1, #0
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fccd 	bl	800bfb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2204      	movs	r2, #4
 800b630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc99 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2205      	movs	r2, #5
 800b656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b65a:	2300      	movs	r3, #0
 800b65c:	2200      	movs	r2, #0
 800b65e:	2100      	movs	r1, #0
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fca7 	bl	800bfb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b674:	2200      	movs	r2, #0
 800b676:	4912      	ldr	r1, [pc, #72]	@ (800b6c0 <MX_USB_DEVICE_Init+0x50>)
 800b678:	4812      	ldr	r0, [pc, #72]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b67a:	f7fe fcf7 	bl	800a06c <USBD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b684:	f7f8 f8c2 	bl	800380c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b688:	490f      	ldr	r1, [pc, #60]	@ (800b6c8 <MX_USB_DEVICE_Init+0x58>)
 800b68a:	480e      	ldr	r0, [pc, #56]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b68c:	f7fe fd1e 	bl	800a0cc <USBD_RegisterClass>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b696:	f7f8 f8b9 	bl	800380c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b69a:	490c      	ldr	r1, [pc, #48]	@ (800b6cc <MX_USB_DEVICE_Init+0x5c>)
 800b69c:	4809      	ldr	r0, [pc, #36]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b69e:	f7fe fc15 	bl	8009ecc <USBD_CDC_RegisterInterface>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6a8:	f7f8 f8b0 	bl	800380c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6ac:	4805      	ldr	r0, [pc, #20]	@ (800b6c4 <MX_USB_DEVICE_Init+0x54>)
 800b6ae:	f7fe fd43 	bl	800a138 <USBD_Start>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6b8:	f7f8 f8a8 	bl	800380c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	200000ac 	.word	0x200000ac
 800b6c4:	20000598 	.word	0x20000598
 800b6c8:	20000018 	.word	0x20000018
 800b6cc:	20000098 	.word	0x20000098

0800b6d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4905      	ldr	r1, [pc, #20]	@ (800b6ec <CDC_Init_FS+0x1c>)
 800b6d8:	4805      	ldr	r0, [pc, #20]	@ (800b6f0 <CDC_Init_FS+0x20>)
 800b6da:	f7fe fc11 	bl	8009f00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6de:	4905      	ldr	r1, [pc, #20]	@ (800b6f4 <CDC_Init_FS+0x24>)
 800b6e0:	4803      	ldr	r0, [pc, #12]	@ (800b6f0 <CDC_Init_FS+0x20>)
 800b6e2:	f7fe fc2f 	bl	8009f44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20001074 	.word	0x20001074
 800b6f0:	20000598 	.word	0x20000598
 800b6f4:	20000874 	.word	0x20000874

0800b6f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
 800b714:	4613      	mov	r3, r2
 800b716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	2b23      	cmp	r3, #35	@ 0x23
 800b71c:	d84a      	bhi.n	800b7b4 <CDC_Control_FS+0xac>
 800b71e:	a201      	add	r2, pc, #4	@ (adr r2, 800b724 <CDC_Control_FS+0x1c>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b7b5 	.word	0x0800b7b5
 800b728:	0800b7b5 	.word	0x0800b7b5
 800b72c:	0800b7b5 	.word	0x0800b7b5
 800b730:	0800b7b5 	.word	0x0800b7b5
 800b734:	0800b7b5 	.word	0x0800b7b5
 800b738:	0800b7b5 	.word	0x0800b7b5
 800b73c:	0800b7b5 	.word	0x0800b7b5
 800b740:	0800b7b5 	.word	0x0800b7b5
 800b744:	0800b7b5 	.word	0x0800b7b5
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b7b5 	.word	0x0800b7b5
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	0800b7b5 	.word	0x0800b7b5
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b7b5 	.word	0x0800b7b5
 800b768:	0800b7b5 	.word	0x0800b7b5
 800b76c:	0800b7b5 	.word	0x0800b7b5
 800b770:	0800b7b5 	.word	0x0800b7b5
 800b774:	0800b7b5 	.word	0x0800b7b5
 800b778:	0800b7b5 	.word	0x0800b7b5
 800b77c:	0800b7b5 	.word	0x0800b7b5
 800b780:	0800b7b5 	.word	0x0800b7b5
 800b784:	0800b7b5 	.word	0x0800b7b5
 800b788:	0800b7b5 	.word	0x0800b7b5
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b7b5 	.word	0x0800b7b5
 800b79c:	0800b7b5 	.word	0x0800b7b5
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7b5 	.word	0x0800b7b5
 800b7ac:	0800b7b5 	.word	0x0800b7b5
 800b7b0:	0800b7b5 	.word	0x0800b7b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7b4:	bf00      	nop
  }

  return (USBD_OK);
 800b7b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	4805      	ldr	r0, [pc, #20]	@ (800b7e8 <CDC_Receive_FS+0x24>)
 800b7d2:	f7fe fbb7 	bl	8009f44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7d6:	4804      	ldr	r0, [pc, #16]	@ (800b7e8 <CDC_Receive_FS+0x24>)
 800b7d8:	f7fe fc12 	bl	800a000 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000598 	.word	0x20000598

0800b7ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b834 <CDC_Transmit_FS+0x48>)
 800b7fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b802:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b80e:	2301      	movs	r3, #1
 800b810:	e00b      	b.n	800b82a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b812:	887b      	ldrh	r3, [r7, #2]
 800b814:	461a      	mov	r2, r3
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	4806      	ldr	r0, [pc, #24]	@ (800b834 <CDC_Transmit_FS+0x48>)
 800b81a:	f7fe fb71 	bl	8009f00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b81e:	4805      	ldr	r0, [pc, #20]	@ (800b834 <CDC_Transmit_FS+0x48>)
 800b820:	f7fe fbae 	bl	8009f80 <USBD_CDC_TransmitPacket>
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000598 	.word	0x20000598

0800b838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
	...

0800b85c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	4603      	mov	r3, r0
 800b864:	6039      	str	r1, [r7, #0]
 800b866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2212      	movs	r2, #18
 800b86c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b86e:	4b03      	ldr	r3, [pc, #12]	@ (800b87c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	200000c8 	.word	0x200000c8

0800b880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2204      	movs	r2, #4
 800b890:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b892:	4b03      	ldr	r3, [pc, #12]	@ (800b8a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	200000dc 	.word	0x200000dc

0800b8a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	6039      	str	r1, [r7, #0]
 800b8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d105      	bne.n	800b8c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	4907      	ldr	r1, [pc, #28]	@ (800b8d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8ba:	4808      	ldr	r0, [pc, #32]	@ (800b8dc <USBD_FS_ProductStrDescriptor+0x38>)
 800b8bc:	f7ff fdec 	bl	800b498 <USBD_GetString>
 800b8c0:	e004      	b.n	800b8cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4904      	ldr	r1, [pc, #16]	@ (800b8d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8c6:	4805      	ldr	r0, [pc, #20]	@ (800b8dc <USBD_FS_ProductStrDescriptor+0x38>)
 800b8c8:	f7ff fde6 	bl	800b498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8cc:	4b02      	ldr	r3, [pc, #8]	@ (800b8d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20001874 	.word	0x20001874
 800b8dc:	0800e9c0 	.word	0x0800e9c0

0800b8e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	4904      	ldr	r1, [pc, #16]	@ (800b900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8f0:	4804      	ldr	r0, [pc, #16]	@ (800b904 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8f2:	f7ff fdd1 	bl	800b498 <USBD_GetString>
  return USBD_StrDesc;
 800b8f6:	4b02      	ldr	r3, [pc, #8]	@ (800b900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20001874 	.word	0x20001874
 800b904:	0800e9d8 	.word	0x0800e9d8

0800b908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	221a      	movs	r2, #26
 800b918:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b91a:	f000 f843 	bl	800b9a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b91e:	4b02      	ldr	r3, [pc, #8]	@ (800b928 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	200000e0 	.word	0x200000e0

0800b92c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	6039      	str	r1, [r7, #0]
 800b936:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d105      	bne.n	800b94a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	4907      	ldr	r1, [pc, #28]	@ (800b960 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b942:	4808      	ldr	r0, [pc, #32]	@ (800b964 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b944:	f7ff fda8 	bl	800b498 <USBD_GetString>
 800b948:	e004      	b.n	800b954 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	4904      	ldr	r1, [pc, #16]	@ (800b960 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b94e:	4805      	ldr	r0, [pc, #20]	@ (800b964 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b950:	f7ff fda2 	bl	800b498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b954:	4b02      	ldr	r3, [pc, #8]	@ (800b960 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20001874 	.word	0x20001874
 800b964:	0800e9ec 	.word	0x0800e9ec

0800b968 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d105      	bne.n	800b986 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	4907      	ldr	r1, [pc, #28]	@ (800b99c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b97e:	4808      	ldr	r0, [pc, #32]	@ (800b9a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b980:	f7ff fd8a 	bl	800b498 <USBD_GetString>
 800b984:	e004      	b.n	800b990 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4904      	ldr	r1, [pc, #16]	@ (800b99c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b98a:	4805      	ldr	r0, [pc, #20]	@ (800b9a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b98c:	f7ff fd84 	bl	800b498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b990:	4b02      	ldr	r3, [pc, #8]	@ (800b99c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20001874 	.word	0x20001874
 800b9a0:	0800e9f8 	.word	0x0800e9f8

0800b9a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e8 <Get_SerialNum+0x44>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ec <Get_SerialNum+0x48>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f0 <Get_SerialNum+0x4c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d009      	beq.n	800b9de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	4909      	ldr	r1, [pc, #36]	@ (800b9f4 <Get_SerialNum+0x50>)
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 f814 	bl	800b9fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	4908      	ldr	r1, [pc, #32]	@ (800b9f8 <Get_SerialNum+0x54>)
 800b9d8:	68b8      	ldr	r0, [r7, #8]
 800b9da:	f000 f80f 	bl	800b9fc <IntToUnicode>
  }
}
 800b9de:	bf00      	nop
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	1fff7a10 	.word	0x1fff7a10
 800b9ec:	1fff7a14 	.word	0x1fff7a14
 800b9f0:	1fff7a18 	.word	0x1fff7a18
 800b9f4:	200000e2 	.word	0x200000e2
 800b9f8:	200000f2 	.word	0x200000f2

0800b9fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	4613      	mov	r3, r2
 800ba08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75fb      	strb	r3, [r7, #23]
 800ba12:	e027      	b.n	800ba64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	0f1b      	lsrs	r3, r3, #28
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d80b      	bhi.n	800ba34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	0f1b      	lsrs	r3, r3, #28
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	4619      	mov	r1, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3230      	adds	r2, #48	@ 0x30
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e00a      	b.n	800ba4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	0f1b      	lsrs	r3, r3, #28
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	4619      	mov	r1, r3
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	440b      	add	r3, r1
 800ba44:	3237      	adds	r2, #55	@ 0x37
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	011b      	lsls	r3, r3, #4
 800ba4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	3301      	adds	r3, #1
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	4413      	add	r3, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	3301      	adds	r3, #1
 800ba62:	75fb      	strb	r3, [r7, #23]
 800ba64:	7dfa      	ldrb	r2, [r7, #23]
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d3d3      	bcc.n	800ba14 <IntToUnicode+0x18>
  }
}
 800ba6c:	bf00      	nop
 800ba6e:	bf00      	nop
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
	...

0800ba7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08a      	sub	sp, #40	@ 0x28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba84:	f107 0314 	add.w	r3, r7, #20
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
 800ba8e:	609a      	str	r2, [r3, #8]
 800ba90:	60da      	str	r2, [r3, #12]
 800ba92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba9c:	d13a      	bne.n	800bb14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba9e:	2300      	movs	r3, #0
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa6:	4a1d      	ldr	r2, [pc, #116]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baa8:	f043 0301 	orr.w	r3, r3, #1
 800baac:	6313      	str	r3, [r2, #48]	@ 0x30
 800baae:	4b1b      	ldr	r3, [pc, #108]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	613b      	str	r3, [r7, #16]
 800bab8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800baba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800babe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bac0:	2302      	movs	r3, #2
 800bac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bac8:	2303      	movs	r3, #3
 800baca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bacc:	230a      	movs	r3, #10
 800bace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4619      	mov	r1, r3
 800bad6:	4812      	ldr	r0, [pc, #72]	@ (800bb20 <HAL_PCD_MspInit+0xa4>)
 800bad8:	f7f8 fa96 	bl	8004008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800badc:	4b0f      	ldr	r3, [pc, #60]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bae0:	4a0e      	ldr	r2, [pc, #56]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae6:	6353      	str	r3, [r2, #52]	@ 0x34
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	4b0b      	ldr	r3, [pc, #44]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baf0:	4a0a      	ldr	r2, [pc, #40]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800baf6:	6453      	str	r3, [r2, #68]	@ 0x44
 800baf8:	4b08      	ldr	r3, [pc, #32]	@ (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bafa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bafc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	2043      	movs	r0, #67	@ 0x43
 800bb0a:	f7f8 fa46 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb0e:	2043      	movs	r0, #67	@ 0x43
 800bb10:	f7f8 fa5f 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb14:	bf00      	nop
 800bb16:	3728      	adds	r7, #40	@ 0x28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	40023800 	.word	0x40023800
 800bb20:	40020000 	.word	0x40020000

0800bb24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7fe fb49 	bl	800a1d2 <USBD_LL_SetupStage>
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	440b      	add	r3, r1
 800bb68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7fe fb83 	bl	800a27c <USBD_LL_DataOutStage>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb90:	78fa      	ldrb	r2, [r7, #3]
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3320      	adds	r3, #32
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7fe fc1c 	bl	800a3e2 <USBD_LL_DataInStage>
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fd56 	bl	800a672 <USBD_LL_SOF>
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	79db      	ldrb	r3, [r3, #7]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
 800bbe6:	e008      	b.n	800bbfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	79db      	ldrb	r3, [r3, #7]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d102      	bne.n	800bbf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	73fb      	strb	r3, [r7, #15]
 800bbf4:	e001      	b.n	800bbfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bbf6:	f7f7 fe09 	bl	800380c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc00:	7bfa      	ldrb	r2, [r7, #15]
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe fcf0 	bl	800a5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fc98 	bl	800a546 <USBD_LL_Reset>
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fceb 	bl	800a60a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc46:	f043 0301 	orr.w	r3, r3, #1
 800bc4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7adb      	ldrb	r3, [r3, #11]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc54:	4b04      	ldr	r3, [pc, #16]	@ (800bc68 <HAL_PCD_SuspendCallback+0x48>)
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	4a03      	ldr	r2, [pc, #12]	@ (800bc68 <HAL_PCD_SuspendCallback+0x48>)
 800bc5a:	f043 0306 	orr.w	r3, r3, #6
 800bc5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	e000ed00 	.word	0xe000ed00

0800bc6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe fce1 	bl	800a642 <USBD_LL_Resume>
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc9a:	78fa      	ldrb	r2, [r7, #3]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fe fd39 	bl	800a716 <USBD_LL_IsoOUTIncomplete>
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fcf5 	bl	800a6b2 <USBD_LL_IsoINIncomplete>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fd4b 	bl	800a77a <USBD_LL_DevConnected>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe fd48 	bl	800a790 <USBD_LL_DevDisconnected>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d13c      	bne.n	800bd92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd18:	4a20      	ldr	r2, [pc, #128]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a1e      	ldr	r2, [pc, #120]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd28:	4b1c      	ldr	r3, [pc, #112]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd30:	4b1a      	ldr	r3, [pc, #104]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd32:	2204      	movs	r2, #4
 800bd34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd36:	4b19      	ldr	r3, [pc, #100]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd38:	2202      	movs	r2, #2
 800bd3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd3c:	4b17      	ldr	r3, [pc, #92]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd42:	4b16      	ldr	r3, [pc, #88]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd44:	2202      	movs	r2, #2
 800bd46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd48:	4b14      	ldr	r3, [pc, #80]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd4e:	4b13      	ldr	r3, [pc, #76]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd54:	4b11      	ldr	r3, [pc, #68]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd5a:	4b10      	ldr	r3, [pc, #64]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd60:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd66:	480d      	ldr	r0, [pc, #52]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd68:	f7f8 faea 	bl	8004340 <HAL_PCD_Init>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd72:	f7f7 fd4b 	bl	800380c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd76:	2180      	movs	r1, #128	@ 0x80
 800bd78:	4808      	ldr	r0, [pc, #32]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd7a:	f7f9 fd16 	bl	80057aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd7e:	2240      	movs	r2, #64	@ 0x40
 800bd80:	2100      	movs	r1, #0
 800bd82:	4806      	ldr	r0, [pc, #24]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd84:	f7f9 fcca 	bl	800571c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd88:	2280      	movs	r2, #128	@ 0x80
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	4803      	ldr	r0, [pc, #12]	@ (800bd9c <USBD_LL_Init+0x94>)
 800bd8e:	f7f9 fcc5 	bl	800571c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	20001a74 	.word	0x20001a74

0800bda0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7f8 fbd1 	bl	800455e <HAL_PCD_Start>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 f942 	bl	800c04c <USBD_Get_USB_Status>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	461a      	mov	r2, r3
 800bde4:	4603      	mov	r3, r0
 800bde6:	70fb      	strb	r3, [r7, #3]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70bb      	strb	r3, [r7, #2]
 800bdec:	4613      	mov	r3, r2
 800bdee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdfe:	78bb      	ldrb	r3, [r7, #2]
 800be00:	883a      	ldrh	r2, [r7, #0]
 800be02:	78f9      	ldrb	r1, [r7, #3]
 800be04:	f7f9 f8a5 	bl	8004f52 <HAL_PCD_EP_Open>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 f91c 	bl	800c04c <USBD_Get_USB_Status>
 800be14:	4603      	mov	r3, r0
 800be16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be18:	7bbb      	ldrb	r3, [r7, #14]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	4611      	mov	r1, r2
 800be40:	4618      	mov	r0, r3
 800be42:	f7f9 f8f0 	bl	8005026 <HAL_PCD_EP_Close>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 f8fd 	bl	800c04c <USBD_Get_USB_Status>
 800be52:	4603      	mov	r3, r0
 800be54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be56:	7bbb      	ldrb	r3, [r7, #14]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f9 f9a8 	bl	80051d4 <HAL_PCD_EP_SetStall>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f8de 	bl	800c04c <USBD_Get_USB_Status>
 800be90:	4603      	mov	r3, r0
 800be92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be94:	7bbb      	ldrb	r3, [r7, #14]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f9 f9ec 	bl	800529a <HAL_PCD_EP_ClrStall>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 f8bf 	bl	800c04c <USBD_Get_USB_Status>
 800bece:	4603      	mov	r3, r0
 800bed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da0b      	bge.n	800bf10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	4613      	mov	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	3316      	adds	r3, #22
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	e00b      	b.n	800bf28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bf26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf4e:	78fa      	ldrb	r2, [r7, #3]
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7f8 ffd9 	bl	8004f0a <HAL_PCD_SetAddress>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f874 	bl	800c04c <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf90:	7af9      	ldrb	r1, [r7, #11]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f7f9 f8e3 	bl	8005160 <HAL_PCD_EP_Transmit>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 f853 	bl	800c04c <USBD_Get_USB_Status>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	607a      	str	r2, [r7, #4]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfd2:	7af9      	ldrb	r1, [r7, #11]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	f7f9 f86f 	bl	80050ba <HAL_PCD_EP_Receive>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f832 	bl	800c04c <USBD_Get_USB_Status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfec:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b082      	sub	sp, #8
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f9 f88f 	bl	8005130 <HAL_PCD_EP_GetRxCount>
 800c012:	4603      	mov	r3, r0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c024:	4b03      	ldr	r3, [pc, #12]	@ (800c034 <USBD_static_malloc+0x18>)
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20001f58 	.word	0x20001f58

0800c038 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]

}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d817      	bhi.n	800c090 <USBD_Get_USB_Status+0x44>
 800c060:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <USBD_Get_USB_Status+0x1c>)
 800c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c066:	bf00      	nop
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	0800c07f 	.word	0x0800c07f
 800c070:	0800c085 	.word	0x0800c085
 800c074:	0800c08b 	.word	0x0800c08b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
    break;
 800c07c:	e00b      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	73fb      	strb	r3, [r7, #15]
    break;
 800c082:	e008      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c084:	2301      	movs	r3, #1
 800c086:	73fb      	strb	r3, [r7, #15]
    break;
 800c088:	e005      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	73fb      	strb	r3, [r7, #15]
    break;
 800c08e:	e002      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	bf00      	nop
  }
  return usb_status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <__assert_func>:
 800c0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0a6:	4614      	mov	r4, r2
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <__assert_func+0x2c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	68d8      	ldr	r0, [r3, #12]
 800c0b2:	b14c      	cbz	r4, 800c0c8 <__assert_func+0x24>
 800c0b4:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <__assert_func+0x30>)
 800c0b6:	9100      	str	r1, [sp, #0]
 800c0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0bc:	4906      	ldr	r1, [pc, #24]	@ (800c0d8 <__assert_func+0x34>)
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f000 fdbe 	bl	800cc40 <fiprintf>
 800c0c4:	f000 febf 	bl	800ce46 <abort>
 800c0c8:	4b04      	ldr	r3, [pc, #16]	@ (800c0dc <__assert_func+0x38>)
 800c0ca:	461c      	mov	r4, r3
 800c0cc:	e7f3      	b.n	800c0b6 <__assert_func+0x12>
 800c0ce:	bf00      	nop
 800c0d0:	20000108 	.word	0x20000108
 800c0d4:	0800ea7c 	.word	0x0800ea7c
 800c0d8:	0800ea89 	.word	0x0800ea89
 800c0dc:	0800eab7 	.word	0x0800eab7

0800c0e0 <malloc>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ec <malloc+0xc>)
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f000 b825 	b.w	800c134 <_malloc_r>
 800c0ea:	bf00      	nop
 800c0ec:	20000108 	.word	0x20000108

0800c0f0 <sbrk_aligned>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800c130 <sbrk_aligned+0x40>)
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	6831      	ldr	r1, [r6, #0]
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	b911      	cbnz	r1, 800c102 <sbrk_aligned+0x12>
 800c0fc:	f000 fe54 	bl	800cda8 <_sbrk_r>
 800c100:	6030      	str	r0, [r6, #0]
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 fe4f 	bl	800cda8 <_sbrk_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d103      	bne.n	800c116 <sbrk_aligned+0x26>
 800c10e:	f04f 34ff 	mov.w	r4, #4294967295
 800c112:	4620      	mov	r0, r4
 800c114:	bd70      	pop	{r4, r5, r6, pc}
 800c116:	1cc4      	adds	r4, r0, #3
 800c118:	f024 0403 	bic.w	r4, r4, #3
 800c11c:	42a0      	cmp	r0, r4
 800c11e:	d0f8      	beq.n	800c112 <sbrk_aligned+0x22>
 800c120:	1a21      	subs	r1, r4, r0
 800c122:	4628      	mov	r0, r5
 800c124:	f000 fe40 	bl	800cda8 <_sbrk_r>
 800c128:	3001      	adds	r0, #1
 800c12a:	d1f2      	bne.n	800c112 <sbrk_aligned+0x22>
 800c12c:	e7ef      	b.n	800c10e <sbrk_aligned+0x1e>
 800c12e:	bf00      	nop
 800c130:	20002178 	.word	0x20002178

0800c134 <_malloc_r>:
 800c134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c138:	1ccd      	adds	r5, r1, #3
 800c13a:	f025 0503 	bic.w	r5, r5, #3
 800c13e:	3508      	adds	r5, #8
 800c140:	2d0c      	cmp	r5, #12
 800c142:	bf38      	it	cc
 800c144:	250c      	movcc	r5, #12
 800c146:	2d00      	cmp	r5, #0
 800c148:	4606      	mov	r6, r0
 800c14a:	db01      	blt.n	800c150 <_malloc_r+0x1c>
 800c14c:	42a9      	cmp	r1, r5
 800c14e:	d904      	bls.n	800c15a <_malloc_r+0x26>
 800c150:	230c      	movs	r3, #12
 800c152:	6033      	str	r3, [r6, #0]
 800c154:	2000      	movs	r0, #0
 800c156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c230 <_malloc_r+0xfc>
 800c15e:	f000 f869 	bl	800c234 <__malloc_lock>
 800c162:	f8d8 3000 	ldr.w	r3, [r8]
 800c166:	461c      	mov	r4, r3
 800c168:	bb44      	cbnz	r4, 800c1bc <_malloc_r+0x88>
 800c16a:	4629      	mov	r1, r5
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff ffbf 	bl	800c0f0 <sbrk_aligned>
 800c172:	1c43      	adds	r3, r0, #1
 800c174:	4604      	mov	r4, r0
 800c176:	d158      	bne.n	800c22a <_malloc_r+0xf6>
 800c178:	f8d8 4000 	ldr.w	r4, [r8]
 800c17c:	4627      	mov	r7, r4
 800c17e:	2f00      	cmp	r7, #0
 800c180:	d143      	bne.n	800c20a <_malloc_r+0xd6>
 800c182:	2c00      	cmp	r4, #0
 800c184:	d04b      	beq.n	800c21e <_malloc_r+0xea>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	4639      	mov	r1, r7
 800c18a:	4630      	mov	r0, r6
 800c18c:	eb04 0903 	add.w	r9, r4, r3
 800c190:	f000 fe0a 	bl	800cda8 <_sbrk_r>
 800c194:	4581      	cmp	r9, r0
 800c196:	d142      	bne.n	800c21e <_malloc_r+0xea>
 800c198:	6821      	ldr	r1, [r4, #0]
 800c19a:	1a6d      	subs	r5, r5, r1
 800c19c:	4629      	mov	r1, r5
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ffa6 	bl	800c0f0 <sbrk_aligned>
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d03a      	beq.n	800c21e <_malloc_r+0xea>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	442b      	add	r3, r5
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	bb62      	cbnz	r2, 800c210 <_malloc_r+0xdc>
 800c1b6:	f8c8 7000 	str.w	r7, [r8]
 800c1ba:	e00f      	b.n	800c1dc <_malloc_r+0xa8>
 800c1bc:	6822      	ldr	r2, [r4, #0]
 800c1be:	1b52      	subs	r2, r2, r5
 800c1c0:	d420      	bmi.n	800c204 <_malloc_r+0xd0>
 800c1c2:	2a0b      	cmp	r2, #11
 800c1c4:	d917      	bls.n	800c1f6 <_malloc_r+0xc2>
 800c1c6:	1961      	adds	r1, r4, r5
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	6025      	str	r5, [r4, #0]
 800c1cc:	bf18      	it	ne
 800c1ce:	6059      	strne	r1, [r3, #4]
 800c1d0:	6863      	ldr	r3, [r4, #4]
 800c1d2:	bf08      	it	eq
 800c1d4:	f8c8 1000 	streq.w	r1, [r8]
 800c1d8:	5162      	str	r2, [r4, r5]
 800c1da:	604b      	str	r3, [r1, #4]
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f000 f82f 	bl	800c240 <__malloc_unlock>
 800c1e2:	f104 000b 	add.w	r0, r4, #11
 800c1e6:	1d23      	adds	r3, r4, #4
 800c1e8:	f020 0007 	bic.w	r0, r0, #7
 800c1ec:	1ac2      	subs	r2, r0, r3
 800c1ee:	bf1c      	itt	ne
 800c1f0:	1a1b      	subne	r3, r3, r0
 800c1f2:	50a3      	strne	r3, [r4, r2]
 800c1f4:	e7af      	b.n	800c156 <_malloc_r+0x22>
 800c1f6:	6862      	ldr	r2, [r4, #4]
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	bf0c      	ite	eq
 800c1fc:	f8c8 2000 	streq.w	r2, [r8]
 800c200:	605a      	strne	r2, [r3, #4]
 800c202:	e7eb      	b.n	800c1dc <_malloc_r+0xa8>
 800c204:	4623      	mov	r3, r4
 800c206:	6864      	ldr	r4, [r4, #4]
 800c208:	e7ae      	b.n	800c168 <_malloc_r+0x34>
 800c20a:	463c      	mov	r4, r7
 800c20c:	687f      	ldr	r7, [r7, #4]
 800c20e:	e7b6      	b.n	800c17e <_malloc_r+0x4a>
 800c210:	461a      	mov	r2, r3
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	42a3      	cmp	r3, r4
 800c216:	d1fb      	bne.n	800c210 <_malloc_r+0xdc>
 800c218:	2300      	movs	r3, #0
 800c21a:	6053      	str	r3, [r2, #4]
 800c21c:	e7de      	b.n	800c1dc <_malloc_r+0xa8>
 800c21e:	230c      	movs	r3, #12
 800c220:	6033      	str	r3, [r6, #0]
 800c222:	4630      	mov	r0, r6
 800c224:	f000 f80c 	bl	800c240 <__malloc_unlock>
 800c228:	e794      	b.n	800c154 <_malloc_r+0x20>
 800c22a:	6005      	str	r5, [r0, #0]
 800c22c:	e7d6      	b.n	800c1dc <_malloc_r+0xa8>
 800c22e:	bf00      	nop
 800c230:	2000217c 	.word	0x2000217c

0800c234 <__malloc_lock>:
 800c234:	4801      	ldr	r0, [pc, #4]	@ (800c23c <__malloc_lock+0x8>)
 800c236:	f000 be04 	b.w	800ce42 <__retarget_lock_acquire_recursive>
 800c23a:	bf00      	nop
 800c23c:	200022c0 	.word	0x200022c0

0800c240 <__malloc_unlock>:
 800c240:	4801      	ldr	r0, [pc, #4]	@ (800c248 <__malloc_unlock+0x8>)
 800c242:	f000 bdff 	b.w	800ce44 <__retarget_lock_release_recursive>
 800c246:	bf00      	nop
 800c248:	200022c0 	.word	0x200022c0

0800c24c <__cvt>:
 800c24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c250:	ec57 6b10 	vmov	r6, r7, d0
 800c254:	2f00      	cmp	r7, #0
 800c256:	460c      	mov	r4, r1
 800c258:	4619      	mov	r1, r3
 800c25a:	463b      	mov	r3, r7
 800c25c:	bfbb      	ittet	lt
 800c25e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c262:	461f      	movlt	r7, r3
 800c264:	2300      	movge	r3, #0
 800c266:	232d      	movlt	r3, #45	@ 0x2d
 800c268:	700b      	strb	r3, [r1, #0]
 800c26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c26c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c270:	4691      	mov	r9, r2
 800c272:	f023 0820 	bic.w	r8, r3, #32
 800c276:	bfbc      	itt	lt
 800c278:	4632      	movlt	r2, r6
 800c27a:	4616      	movlt	r6, r2
 800c27c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c280:	d005      	beq.n	800c28e <__cvt+0x42>
 800c282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c286:	d100      	bne.n	800c28a <__cvt+0x3e>
 800c288:	3401      	adds	r4, #1
 800c28a:	2102      	movs	r1, #2
 800c28c:	e000      	b.n	800c290 <__cvt+0x44>
 800c28e:	2103      	movs	r1, #3
 800c290:	ab03      	add	r3, sp, #12
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	ab02      	add	r3, sp, #8
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	ec47 6b10 	vmov	d0, r6, r7
 800c29c:	4653      	mov	r3, sl
 800c29e:	4622      	mov	r2, r4
 800c2a0:	f000 fe62 	bl	800cf68 <_dtoa_r>
 800c2a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	d119      	bne.n	800c2e0 <__cvt+0x94>
 800c2ac:	f019 0f01 	tst.w	r9, #1
 800c2b0:	d00e      	beq.n	800c2d0 <__cvt+0x84>
 800c2b2:	eb00 0904 	add.w	r9, r0, r4
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f4 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2c2:	b108      	cbz	r0, 800c2c8 <__cvt+0x7c>
 800c2c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2c8:	2230      	movs	r2, #48	@ 0x30
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	454b      	cmp	r3, r9
 800c2ce:	d31e      	bcc.n	800c30e <__cvt+0xc2>
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2d4:	1b5b      	subs	r3, r3, r5
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	b004      	add	sp, #16
 800c2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2e4:	eb00 0904 	add.w	r9, r0, r4
 800c2e8:	d1e5      	bne.n	800c2b6 <__cvt+0x6a>
 800c2ea:	7803      	ldrb	r3, [r0, #0]
 800c2ec:	2b30      	cmp	r3, #48	@ 0x30
 800c2ee:	d10a      	bne.n	800c306 <__cvt+0xba>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	f7f4 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2fc:	b918      	cbnz	r0, 800c306 <__cvt+0xba>
 800c2fe:	f1c4 0401 	rsb	r4, r4, #1
 800c302:	f8ca 4000 	str.w	r4, [sl]
 800c306:	f8da 3000 	ldr.w	r3, [sl]
 800c30a:	4499      	add	r9, r3
 800c30c:	e7d3      	b.n	800c2b6 <__cvt+0x6a>
 800c30e:	1c59      	adds	r1, r3, #1
 800c310:	9103      	str	r1, [sp, #12]
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	e7d9      	b.n	800c2ca <__cvt+0x7e>

0800c316 <__exponent>:
 800c316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c318:	2900      	cmp	r1, #0
 800c31a:	bfba      	itte	lt
 800c31c:	4249      	neglt	r1, r1
 800c31e:	232d      	movlt	r3, #45	@ 0x2d
 800c320:	232b      	movge	r3, #43	@ 0x2b
 800c322:	2909      	cmp	r1, #9
 800c324:	7002      	strb	r2, [r0, #0]
 800c326:	7043      	strb	r3, [r0, #1]
 800c328:	dd29      	ble.n	800c37e <__exponent+0x68>
 800c32a:	f10d 0307 	add.w	r3, sp, #7
 800c32e:	461d      	mov	r5, r3
 800c330:	270a      	movs	r7, #10
 800c332:	461a      	mov	r2, r3
 800c334:	fbb1 f6f7 	udiv	r6, r1, r7
 800c338:	fb07 1416 	mls	r4, r7, r6, r1
 800c33c:	3430      	adds	r4, #48	@ 0x30
 800c33e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c342:	460c      	mov	r4, r1
 800c344:	2c63      	cmp	r4, #99	@ 0x63
 800c346:	f103 33ff 	add.w	r3, r3, #4294967295
 800c34a:	4631      	mov	r1, r6
 800c34c:	dcf1      	bgt.n	800c332 <__exponent+0x1c>
 800c34e:	3130      	adds	r1, #48	@ 0x30
 800c350:	1e94      	subs	r4, r2, #2
 800c352:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c356:	1c41      	adds	r1, r0, #1
 800c358:	4623      	mov	r3, r4
 800c35a:	42ab      	cmp	r3, r5
 800c35c:	d30a      	bcc.n	800c374 <__exponent+0x5e>
 800c35e:	f10d 0309 	add.w	r3, sp, #9
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	42ac      	cmp	r4, r5
 800c366:	bf88      	it	hi
 800c368:	2300      	movhi	r3, #0
 800c36a:	3302      	adds	r3, #2
 800c36c:	4403      	add	r3, r0
 800c36e:	1a18      	subs	r0, r3, r0
 800c370:	b003      	add	sp, #12
 800c372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c374:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c37c:	e7ed      	b.n	800c35a <__exponent+0x44>
 800c37e:	2330      	movs	r3, #48	@ 0x30
 800c380:	3130      	adds	r1, #48	@ 0x30
 800c382:	7083      	strb	r3, [r0, #2]
 800c384:	70c1      	strb	r1, [r0, #3]
 800c386:	1d03      	adds	r3, r0, #4
 800c388:	e7f1      	b.n	800c36e <__exponent+0x58>
	...

0800c38c <_printf_float>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	b08d      	sub	sp, #52	@ 0x34
 800c392:	460c      	mov	r4, r1
 800c394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c398:	4616      	mov	r6, r2
 800c39a:	461f      	mov	r7, r3
 800c39c:	4605      	mov	r5, r0
 800c39e:	f000 fccb 	bl	800cd38 <_localeconv_r>
 800c3a2:	6803      	ldr	r3, [r0, #0]
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f3 ff62 	bl	8000270 <strlen>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3b4:	9005      	str	r0, [sp, #20]
 800c3b6:	3307      	adds	r3, #7
 800c3b8:	f023 0307 	bic.w	r3, r3, #7
 800c3bc:	f103 0208 	add.w	r2, r3, #8
 800c3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800c3c8:	f8c8 2000 	str.w	r2, [r8]
 800c3cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3e2:	4b9c      	ldr	r3, [pc, #624]	@ (800c654 <_printf_float+0x2c8>)
 800c3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e8:	f7f4 fba0 	bl	8000b2c <__aeabi_dcmpun>
 800c3ec:	bb70      	cbnz	r0, 800c44c <_printf_float+0xc0>
 800c3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3f2:	4b98      	ldr	r3, [pc, #608]	@ (800c654 <_printf_float+0x2c8>)
 800c3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f8:	f7f4 fb7a 	bl	8000af0 <__aeabi_dcmple>
 800c3fc:	bb30      	cbnz	r0, 800c44c <_printf_float+0xc0>
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f4 fb69 	bl	8000adc <__aeabi_dcmplt>
 800c40a:	b110      	cbz	r0, 800c412 <_printf_float+0x86>
 800c40c:	232d      	movs	r3, #45	@ 0x2d
 800c40e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c412:	4a91      	ldr	r2, [pc, #580]	@ (800c658 <_printf_float+0x2cc>)
 800c414:	4b91      	ldr	r3, [pc, #580]	@ (800c65c <_printf_float+0x2d0>)
 800c416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c41a:	bf8c      	ite	hi
 800c41c:	4690      	movhi	r8, r2
 800c41e:	4698      	movls	r8, r3
 800c420:	2303      	movs	r3, #3
 800c422:	6123      	str	r3, [r4, #16]
 800c424:	f02b 0304 	bic.w	r3, fp, #4
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	f04f 0900 	mov.w	r9, #0
 800c42e:	9700      	str	r7, [sp, #0]
 800c430:	4633      	mov	r3, r6
 800c432:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c434:	4621      	mov	r1, r4
 800c436:	4628      	mov	r0, r5
 800c438:	f000 f9d2 	bl	800c7e0 <_printf_common>
 800c43c:	3001      	adds	r0, #1
 800c43e:	f040 808d 	bne.w	800c55c <_printf_float+0x1d0>
 800c442:	f04f 30ff 	mov.w	r0, #4294967295
 800c446:	b00d      	add	sp, #52	@ 0x34
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	4642      	mov	r2, r8
 800c44e:	464b      	mov	r3, r9
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	f7f4 fb6a 	bl	8000b2c <__aeabi_dcmpun>
 800c458:	b140      	cbz	r0, 800c46c <_printf_float+0xe0>
 800c45a:	464b      	mov	r3, r9
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bfbc      	itt	lt
 800c460:	232d      	movlt	r3, #45	@ 0x2d
 800c462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c466:	4a7e      	ldr	r2, [pc, #504]	@ (800c660 <_printf_float+0x2d4>)
 800c468:	4b7e      	ldr	r3, [pc, #504]	@ (800c664 <_printf_float+0x2d8>)
 800c46a:	e7d4      	b.n	800c416 <_printf_float+0x8a>
 800c46c:	6863      	ldr	r3, [r4, #4]
 800c46e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c472:	9206      	str	r2, [sp, #24]
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	d13b      	bne.n	800c4f0 <_printf_float+0x164>
 800c478:	2306      	movs	r3, #6
 800c47a:	6063      	str	r3, [r4, #4]
 800c47c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c480:	2300      	movs	r3, #0
 800c482:	6022      	str	r2, [r4, #0]
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	ab0a      	add	r3, sp, #40	@ 0x28
 800c488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c48c:	ab09      	add	r3, sp, #36	@ 0x24
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	6861      	ldr	r1, [r4, #4]
 800c492:	ec49 8b10 	vmov	d0, r8, r9
 800c496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7ff fed6 	bl	800c24c <__cvt>
 800c4a0:	9b06      	ldr	r3, [sp, #24]
 800c4a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4a4:	2b47      	cmp	r3, #71	@ 0x47
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	d129      	bne.n	800c4fe <_printf_float+0x172>
 800c4aa:	1cc8      	adds	r0, r1, #3
 800c4ac:	db02      	blt.n	800c4b4 <_printf_float+0x128>
 800c4ae:	6863      	ldr	r3, [r4, #4]
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	dd41      	ble.n	800c538 <_printf_float+0x1ac>
 800c4b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4b8:	fa5f fa8a 	uxtb.w	sl, sl
 800c4bc:	3901      	subs	r1, #1
 800c4be:	4652      	mov	r2, sl
 800c4c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4c6:	f7ff ff26 	bl	800c316 <__exponent>
 800c4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4cc:	1813      	adds	r3, r2, r0
 800c4ce:	2a01      	cmp	r2, #1
 800c4d0:	4681      	mov	r9, r0
 800c4d2:	6123      	str	r3, [r4, #16]
 800c4d4:	dc02      	bgt.n	800c4dc <_printf_float+0x150>
 800c4d6:	6822      	ldr	r2, [r4, #0]
 800c4d8:	07d2      	lsls	r2, r2, #31
 800c4da:	d501      	bpl.n	800c4e0 <_printf_float+0x154>
 800c4dc:	3301      	adds	r3, #1
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0a2      	beq.n	800c42e <_printf_float+0xa2>
 800c4e8:	232d      	movs	r3, #45	@ 0x2d
 800c4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4ee:	e79e      	b.n	800c42e <_printf_float+0xa2>
 800c4f0:	9a06      	ldr	r2, [sp, #24]
 800c4f2:	2a47      	cmp	r2, #71	@ 0x47
 800c4f4:	d1c2      	bne.n	800c47c <_printf_float+0xf0>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1c0      	bne.n	800c47c <_printf_float+0xf0>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e7bd      	b.n	800c47a <_printf_float+0xee>
 800c4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c502:	d9db      	bls.n	800c4bc <_printf_float+0x130>
 800c504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c508:	d118      	bne.n	800c53c <_printf_float+0x1b0>
 800c50a:	2900      	cmp	r1, #0
 800c50c:	6863      	ldr	r3, [r4, #4]
 800c50e:	dd0b      	ble.n	800c528 <_printf_float+0x19c>
 800c510:	6121      	str	r1, [r4, #16]
 800c512:	b913      	cbnz	r3, 800c51a <_printf_float+0x18e>
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	07d0      	lsls	r0, r2, #31
 800c518:	d502      	bpl.n	800c520 <_printf_float+0x194>
 800c51a:	3301      	adds	r3, #1
 800c51c:	440b      	add	r3, r1
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c522:	f04f 0900 	mov.w	r9, #0
 800c526:	e7db      	b.n	800c4e0 <_printf_float+0x154>
 800c528:	b913      	cbnz	r3, 800c530 <_printf_float+0x1a4>
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	07d2      	lsls	r2, r2, #31
 800c52e:	d501      	bpl.n	800c534 <_printf_float+0x1a8>
 800c530:	3302      	adds	r3, #2
 800c532:	e7f4      	b.n	800c51e <_printf_float+0x192>
 800c534:	2301      	movs	r3, #1
 800c536:	e7f2      	b.n	800c51e <_printf_float+0x192>
 800c538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c53e:	4299      	cmp	r1, r3
 800c540:	db05      	blt.n	800c54e <_printf_float+0x1c2>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6121      	str	r1, [r4, #16]
 800c546:	07d8      	lsls	r0, r3, #31
 800c548:	d5ea      	bpl.n	800c520 <_printf_float+0x194>
 800c54a:	1c4b      	adds	r3, r1, #1
 800c54c:	e7e7      	b.n	800c51e <_printf_float+0x192>
 800c54e:	2900      	cmp	r1, #0
 800c550:	bfd4      	ite	le
 800c552:	f1c1 0202 	rsble	r2, r1, #2
 800c556:	2201      	movgt	r2, #1
 800c558:	4413      	add	r3, r2
 800c55a:	e7e0      	b.n	800c51e <_printf_float+0x192>
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	055a      	lsls	r2, r3, #21
 800c560:	d407      	bmi.n	800c572 <_printf_float+0x1e6>
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	4642      	mov	r2, r8
 800c566:	4631      	mov	r1, r6
 800c568:	4628      	mov	r0, r5
 800c56a:	47b8      	blx	r7
 800c56c:	3001      	adds	r0, #1
 800c56e:	d12b      	bne.n	800c5c8 <_printf_float+0x23c>
 800c570:	e767      	b.n	800c442 <_printf_float+0xb6>
 800c572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c576:	f240 80dd 	bls.w	800c734 <_printf_float+0x3a8>
 800c57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c57e:	2200      	movs	r2, #0
 800c580:	2300      	movs	r3, #0
 800c582:	f7f4 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c586:	2800      	cmp	r0, #0
 800c588:	d033      	beq.n	800c5f2 <_printf_float+0x266>
 800c58a:	4a37      	ldr	r2, [pc, #220]	@ (800c668 <_printf_float+0x2dc>)
 800c58c:	2301      	movs	r3, #1
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	f43f af54 	beq.w	800c442 <_printf_float+0xb6>
 800c59a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c59e:	4543      	cmp	r3, r8
 800c5a0:	db02      	blt.n	800c5a8 <_printf_float+0x21c>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	07d8      	lsls	r0, r3, #31
 800c5a6:	d50f      	bpl.n	800c5c8 <_printf_float+0x23c>
 800c5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	f43f af45 	beq.w	800c442 <_printf_float+0xb6>
 800c5b8:	f04f 0900 	mov.w	r9, #0
 800c5bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5c0:	f104 0a1a 	add.w	sl, r4, #26
 800c5c4:	45c8      	cmp	r8, r9
 800c5c6:	dc09      	bgt.n	800c5dc <_printf_float+0x250>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	079b      	lsls	r3, r3, #30
 800c5cc:	f100 8103 	bmi.w	800c7d6 <_printf_float+0x44a>
 800c5d0:	68e0      	ldr	r0, [r4, #12]
 800c5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5d4:	4298      	cmp	r0, r3
 800c5d6:	bfb8      	it	lt
 800c5d8:	4618      	movlt	r0, r3
 800c5da:	e734      	b.n	800c446 <_printf_float+0xba>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	4652      	mov	r2, sl
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	47b8      	blx	r7
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f43f af2b 	beq.w	800c442 <_printf_float+0xb6>
 800c5ec:	f109 0901 	add.w	r9, r9, #1
 800c5f0:	e7e8      	b.n	800c5c4 <_printf_float+0x238>
 800c5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	dc39      	bgt.n	800c66c <_printf_float+0x2e0>
 800c5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c668 <_printf_float+0x2dc>)
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4628      	mov	r0, r5
 800c600:	47b8      	blx	r7
 800c602:	3001      	adds	r0, #1
 800c604:	f43f af1d 	beq.w	800c442 <_printf_float+0xb6>
 800c608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c60c:	ea59 0303 	orrs.w	r3, r9, r3
 800c610:	d102      	bne.n	800c618 <_printf_float+0x28c>
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	07d9      	lsls	r1, r3, #31
 800c616:	d5d7      	bpl.n	800c5c8 <_printf_float+0x23c>
 800c618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c61c:	4631      	mov	r1, r6
 800c61e:	4628      	mov	r0, r5
 800c620:	47b8      	blx	r7
 800c622:	3001      	adds	r0, #1
 800c624:	f43f af0d 	beq.w	800c442 <_printf_float+0xb6>
 800c628:	f04f 0a00 	mov.w	sl, #0
 800c62c:	f104 0b1a 	add.w	fp, r4, #26
 800c630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c632:	425b      	negs	r3, r3
 800c634:	4553      	cmp	r3, sl
 800c636:	dc01      	bgt.n	800c63c <_printf_float+0x2b0>
 800c638:	464b      	mov	r3, r9
 800c63a:	e793      	b.n	800c564 <_printf_float+0x1d8>
 800c63c:	2301      	movs	r3, #1
 800c63e:	465a      	mov	r2, fp
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	f43f aefb 	beq.w	800c442 <_printf_float+0xb6>
 800c64c:	f10a 0a01 	add.w	sl, sl, #1
 800c650:	e7ee      	b.n	800c630 <_printf_float+0x2a4>
 800c652:	bf00      	nop
 800c654:	7fefffff 	.word	0x7fefffff
 800c658:	0800eabc 	.word	0x0800eabc
 800c65c:	0800eab8 	.word	0x0800eab8
 800c660:	0800eac4 	.word	0x0800eac4
 800c664:	0800eac0 	.word	0x0800eac0
 800c668:	0800eac8 	.word	0x0800eac8
 800c66c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c66e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c672:	4553      	cmp	r3, sl
 800c674:	bfa8      	it	ge
 800c676:	4653      	movge	r3, sl
 800c678:	2b00      	cmp	r3, #0
 800c67a:	4699      	mov	r9, r3
 800c67c:	dc36      	bgt.n	800c6ec <_printf_float+0x360>
 800c67e:	f04f 0b00 	mov.w	fp, #0
 800c682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c686:	f104 021a 	add.w	r2, r4, #26
 800c68a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c68c:	9306      	str	r3, [sp, #24]
 800c68e:	eba3 0309 	sub.w	r3, r3, r9
 800c692:	455b      	cmp	r3, fp
 800c694:	dc31      	bgt.n	800c6fa <_printf_float+0x36e>
 800c696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c698:	459a      	cmp	sl, r3
 800c69a:	dc3a      	bgt.n	800c712 <_printf_float+0x386>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	07da      	lsls	r2, r3, #31
 800c6a0:	d437      	bmi.n	800c712 <_printf_float+0x386>
 800c6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a4:	ebaa 0903 	sub.w	r9, sl, r3
 800c6a8:	9b06      	ldr	r3, [sp, #24]
 800c6aa:	ebaa 0303 	sub.w	r3, sl, r3
 800c6ae:	4599      	cmp	r9, r3
 800c6b0:	bfa8      	it	ge
 800c6b2:	4699      	movge	r9, r3
 800c6b4:	f1b9 0f00 	cmp.w	r9, #0
 800c6b8:	dc33      	bgt.n	800c722 <_printf_float+0x396>
 800c6ba:	f04f 0800 	mov.w	r8, #0
 800c6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6c2:	f104 0b1a 	add.w	fp, r4, #26
 800c6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800c6cc:	eba3 0309 	sub.w	r3, r3, r9
 800c6d0:	4543      	cmp	r3, r8
 800c6d2:	f77f af79 	ble.w	800c5c8 <_printf_float+0x23c>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	465a      	mov	r2, fp
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b8      	blx	r7
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	f43f aeae 	beq.w	800c442 <_printf_float+0xb6>
 800c6e6:	f108 0801 	add.w	r8, r8, #1
 800c6ea:	e7ec      	b.n	800c6c6 <_printf_float+0x33a>
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b8      	blx	r7
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d1c2      	bne.n	800c67e <_printf_float+0x2f2>
 800c6f8:	e6a3      	b.n	800c442 <_printf_float+0xb6>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4628      	mov	r0, r5
 800c700:	9206      	str	r2, [sp, #24]
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f ae9c 	beq.w	800c442 <_printf_float+0xb6>
 800c70a:	9a06      	ldr	r2, [sp, #24]
 800c70c:	f10b 0b01 	add.w	fp, fp, #1
 800c710:	e7bb      	b.n	800c68a <_printf_float+0x2fe>
 800c712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c716:	4631      	mov	r1, r6
 800c718:	4628      	mov	r0, r5
 800c71a:	47b8      	blx	r7
 800c71c:	3001      	adds	r0, #1
 800c71e:	d1c0      	bne.n	800c6a2 <_printf_float+0x316>
 800c720:	e68f      	b.n	800c442 <_printf_float+0xb6>
 800c722:	9a06      	ldr	r2, [sp, #24]
 800c724:	464b      	mov	r3, r9
 800c726:	4442      	add	r2, r8
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	47b8      	blx	r7
 800c72e:	3001      	adds	r0, #1
 800c730:	d1c3      	bne.n	800c6ba <_printf_float+0x32e>
 800c732:	e686      	b.n	800c442 <_printf_float+0xb6>
 800c734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c738:	f1ba 0f01 	cmp.w	sl, #1
 800c73c:	dc01      	bgt.n	800c742 <_printf_float+0x3b6>
 800c73e:	07db      	lsls	r3, r3, #31
 800c740:	d536      	bpl.n	800c7b0 <_printf_float+0x424>
 800c742:	2301      	movs	r3, #1
 800c744:	4642      	mov	r2, r8
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	f43f ae78 	beq.w	800c442 <_printf_float+0xb6>
 800c752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	f43f ae70 	beq.w	800c442 <_printf_float+0xb6>
 800c762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c766:	2200      	movs	r2, #0
 800c768:	2300      	movs	r3, #0
 800c76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c76e:	f7f4 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800c772:	b9c0      	cbnz	r0, 800c7a6 <_printf_float+0x41a>
 800c774:	4653      	mov	r3, sl
 800c776:	f108 0201 	add.w	r2, r8, #1
 800c77a:	4631      	mov	r1, r6
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b8      	blx	r7
 800c780:	3001      	adds	r0, #1
 800c782:	d10c      	bne.n	800c79e <_printf_float+0x412>
 800c784:	e65d      	b.n	800c442 <_printf_float+0xb6>
 800c786:	2301      	movs	r3, #1
 800c788:	465a      	mov	r2, fp
 800c78a:	4631      	mov	r1, r6
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b8      	blx	r7
 800c790:	3001      	adds	r0, #1
 800c792:	f43f ae56 	beq.w	800c442 <_printf_float+0xb6>
 800c796:	f108 0801 	add.w	r8, r8, #1
 800c79a:	45d0      	cmp	r8, sl
 800c79c:	dbf3      	blt.n	800c786 <_printf_float+0x3fa>
 800c79e:	464b      	mov	r3, r9
 800c7a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c7a4:	e6df      	b.n	800c566 <_printf_float+0x1da>
 800c7a6:	f04f 0800 	mov.w	r8, #0
 800c7aa:	f104 0b1a 	add.w	fp, r4, #26
 800c7ae:	e7f4      	b.n	800c79a <_printf_float+0x40e>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	e7e1      	b.n	800c77a <_printf_float+0x3ee>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	464a      	mov	r2, r9
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	4628      	mov	r0, r5
 800c7be:	47b8      	blx	r7
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	f43f ae3e 	beq.w	800c442 <_printf_float+0xb6>
 800c7c6:	f108 0801 	add.w	r8, r8, #1
 800c7ca:	68e3      	ldr	r3, [r4, #12]
 800c7cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	4543      	cmp	r3, r8
 800c7d2:	dcf0      	bgt.n	800c7b6 <_printf_float+0x42a>
 800c7d4:	e6fc      	b.n	800c5d0 <_printf_float+0x244>
 800c7d6:	f04f 0800 	mov.w	r8, #0
 800c7da:	f104 0919 	add.w	r9, r4, #25
 800c7de:	e7f4      	b.n	800c7ca <_printf_float+0x43e>

0800c7e0 <_printf_common>:
 800c7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e4:	4616      	mov	r6, r2
 800c7e6:	4698      	mov	r8, r3
 800c7e8:	688a      	ldr	r2, [r1, #8]
 800c7ea:	690b      	ldr	r3, [r1, #16]
 800c7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	bfb8      	it	lt
 800c7f4:	4613      	movlt	r3, r2
 800c7f6:	6033      	str	r3, [r6, #0]
 800c7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	b10a      	cbz	r2, 800c806 <_printf_common+0x26>
 800c802:	3301      	adds	r3, #1
 800c804:	6033      	str	r3, [r6, #0]
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	0699      	lsls	r1, r3, #26
 800c80a:	bf42      	ittt	mi
 800c80c:	6833      	ldrmi	r3, [r6, #0]
 800c80e:	3302      	addmi	r3, #2
 800c810:	6033      	strmi	r3, [r6, #0]
 800c812:	6825      	ldr	r5, [r4, #0]
 800c814:	f015 0506 	ands.w	r5, r5, #6
 800c818:	d106      	bne.n	800c828 <_printf_common+0x48>
 800c81a:	f104 0a19 	add.w	sl, r4, #25
 800c81e:	68e3      	ldr	r3, [r4, #12]
 800c820:	6832      	ldr	r2, [r6, #0]
 800c822:	1a9b      	subs	r3, r3, r2
 800c824:	42ab      	cmp	r3, r5
 800c826:	dc26      	bgt.n	800c876 <_printf_common+0x96>
 800c828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	3b00      	subs	r3, #0
 800c830:	bf18      	it	ne
 800c832:	2301      	movne	r3, #1
 800c834:	0692      	lsls	r2, r2, #26
 800c836:	d42b      	bmi.n	800c890 <_printf_common+0xb0>
 800c838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c83c:	4641      	mov	r1, r8
 800c83e:	4638      	mov	r0, r7
 800c840:	47c8      	blx	r9
 800c842:	3001      	adds	r0, #1
 800c844:	d01e      	beq.n	800c884 <_printf_common+0xa4>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	6922      	ldr	r2, [r4, #16]
 800c84a:	f003 0306 	and.w	r3, r3, #6
 800c84e:	2b04      	cmp	r3, #4
 800c850:	bf02      	ittt	eq
 800c852:	68e5      	ldreq	r5, [r4, #12]
 800c854:	6833      	ldreq	r3, [r6, #0]
 800c856:	1aed      	subeq	r5, r5, r3
 800c858:	68a3      	ldr	r3, [r4, #8]
 800c85a:	bf0c      	ite	eq
 800c85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c860:	2500      	movne	r5, #0
 800c862:	4293      	cmp	r3, r2
 800c864:	bfc4      	itt	gt
 800c866:	1a9b      	subgt	r3, r3, r2
 800c868:	18ed      	addgt	r5, r5, r3
 800c86a:	2600      	movs	r6, #0
 800c86c:	341a      	adds	r4, #26
 800c86e:	42b5      	cmp	r5, r6
 800c870:	d11a      	bne.n	800c8a8 <_printf_common+0xc8>
 800c872:	2000      	movs	r0, #0
 800c874:	e008      	b.n	800c888 <_printf_common+0xa8>
 800c876:	2301      	movs	r3, #1
 800c878:	4652      	mov	r2, sl
 800c87a:	4641      	mov	r1, r8
 800c87c:	4638      	mov	r0, r7
 800c87e:	47c8      	blx	r9
 800c880:	3001      	adds	r0, #1
 800c882:	d103      	bne.n	800c88c <_printf_common+0xac>
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88c:	3501      	adds	r5, #1
 800c88e:	e7c6      	b.n	800c81e <_printf_common+0x3e>
 800c890:	18e1      	adds	r1, r4, r3
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	2030      	movs	r0, #48	@ 0x30
 800c896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c89a:	4422      	add	r2, r4
 800c89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8a4:	3302      	adds	r3, #2
 800c8a6:	e7c7      	b.n	800c838 <_printf_common+0x58>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	4641      	mov	r1, r8
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	47c8      	blx	r9
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d0e6      	beq.n	800c884 <_printf_common+0xa4>
 800c8b6:	3601      	adds	r6, #1
 800c8b8:	e7d9      	b.n	800c86e <_printf_common+0x8e>
	...

0800c8bc <_printf_i>:
 800c8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c0:	7e0f      	ldrb	r7, [r1, #24]
 800c8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8c4:	2f78      	cmp	r7, #120	@ 0x78
 800c8c6:	4691      	mov	r9, r2
 800c8c8:	4680      	mov	r8, r0
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	469a      	mov	sl, r3
 800c8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8d2:	d807      	bhi.n	800c8e4 <_printf_i+0x28>
 800c8d4:	2f62      	cmp	r7, #98	@ 0x62
 800c8d6:	d80a      	bhi.n	800c8ee <_printf_i+0x32>
 800c8d8:	2f00      	cmp	r7, #0
 800c8da:	f000 80d1 	beq.w	800ca80 <_printf_i+0x1c4>
 800c8de:	2f58      	cmp	r7, #88	@ 0x58
 800c8e0:	f000 80b8 	beq.w	800ca54 <_printf_i+0x198>
 800c8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8ec:	e03a      	b.n	800c964 <_printf_i+0xa8>
 800c8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8f2:	2b15      	cmp	r3, #21
 800c8f4:	d8f6      	bhi.n	800c8e4 <_printf_i+0x28>
 800c8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800c8fc <_printf_i+0x40>)
 800c8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8fc:	0800c955 	.word	0x0800c955
 800c900:	0800c969 	.word	0x0800c969
 800c904:	0800c8e5 	.word	0x0800c8e5
 800c908:	0800c8e5 	.word	0x0800c8e5
 800c90c:	0800c8e5 	.word	0x0800c8e5
 800c910:	0800c8e5 	.word	0x0800c8e5
 800c914:	0800c969 	.word	0x0800c969
 800c918:	0800c8e5 	.word	0x0800c8e5
 800c91c:	0800c8e5 	.word	0x0800c8e5
 800c920:	0800c8e5 	.word	0x0800c8e5
 800c924:	0800c8e5 	.word	0x0800c8e5
 800c928:	0800ca67 	.word	0x0800ca67
 800c92c:	0800c993 	.word	0x0800c993
 800c930:	0800ca21 	.word	0x0800ca21
 800c934:	0800c8e5 	.word	0x0800c8e5
 800c938:	0800c8e5 	.word	0x0800c8e5
 800c93c:	0800ca89 	.word	0x0800ca89
 800c940:	0800c8e5 	.word	0x0800c8e5
 800c944:	0800c993 	.word	0x0800c993
 800c948:	0800c8e5 	.word	0x0800c8e5
 800c94c:	0800c8e5 	.word	0x0800c8e5
 800c950:	0800ca29 	.word	0x0800ca29
 800c954:	6833      	ldr	r3, [r6, #0]
 800c956:	1d1a      	adds	r2, r3, #4
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6032      	str	r2, [r6, #0]
 800c95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c964:	2301      	movs	r3, #1
 800c966:	e09c      	b.n	800caa2 <_printf_i+0x1e6>
 800c968:	6833      	ldr	r3, [r6, #0]
 800c96a:	6820      	ldr	r0, [r4, #0]
 800c96c:	1d19      	adds	r1, r3, #4
 800c96e:	6031      	str	r1, [r6, #0]
 800c970:	0606      	lsls	r6, r0, #24
 800c972:	d501      	bpl.n	800c978 <_printf_i+0xbc>
 800c974:	681d      	ldr	r5, [r3, #0]
 800c976:	e003      	b.n	800c980 <_printf_i+0xc4>
 800c978:	0645      	lsls	r5, r0, #25
 800c97a:	d5fb      	bpl.n	800c974 <_printf_i+0xb8>
 800c97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c980:	2d00      	cmp	r5, #0
 800c982:	da03      	bge.n	800c98c <_printf_i+0xd0>
 800c984:	232d      	movs	r3, #45	@ 0x2d
 800c986:	426d      	negs	r5, r5
 800c988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c98c:	4858      	ldr	r0, [pc, #352]	@ (800caf0 <_printf_i+0x234>)
 800c98e:	230a      	movs	r3, #10
 800c990:	e011      	b.n	800c9b6 <_printf_i+0xfa>
 800c992:	6821      	ldr	r1, [r4, #0]
 800c994:	6833      	ldr	r3, [r6, #0]
 800c996:	0608      	lsls	r0, r1, #24
 800c998:	f853 5b04 	ldr.w	r5, [r3], #4
 800c99c:	d402      	bmi.n	800c9a4 <_printf_i+0xe8>
 800c99e:	0649      	lsls	r1, r1, #25
 800c9a0:	bf48      	it	mi
 800c9a2:	b2ad      	uxthmi	r5, r5
 800c9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9a6:	4852      	ldr	r0, [pc, #328]	@ (800caf0 <_printf_i+0x234>)
 800c9a8:	6033      	str	r3, [r6, #0]
 800c9aa:	bf14      	ite	ne
 800c9ac:	230a      	movne	r3, #10
 800c9ae:	2308      	moveq	r3, #8
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9b6:	6866      	ldr	r6, [r4, #4]
 800c9b8:	60a6      	str	r6, [r4, #8]
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	db05      	blt.n	800c9ca <_printf_i+0x10e>
 800c9be:	6821      	ldr	r1, [r4, #0]
 800c9c0:	432e      	orrs	r6, r5
 800c9c2:	f021 0104 	bic.w	r1, r1, #4
 800c9c6:	6021      	str	r1, [r4, #0]
 800c9c8:	d04b      	beq.n	800ca62 <_printf_i+0x1a6>
 800c9ca:	4616      	mov	r6, r2
 800c9cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9d0:	fb03 5711 	mls	r7, r3, r1, r5
 800c9d4:	5dc7      	ldrb	r7, [r0, r7]
 800c9d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9da:	462f      	mov	r7, r5
 800c9dc:	42bb      	cmp	r3, r7
 800c9de:	460d      	mov	r5, r1
 800c9e0:	d9f4      	bls.n	800c9cc <_printf_i+0x110>
 800c9e2:	2b08      	cmp	r3, #8
 800c9e4:	d10b      	bne.n	800c9fe <_printf_i+0x142>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	07df      	lsls	r7, r3, #31
 800c9ea:	d508      	bpl.n	800c9fe <_printf_i+0x142>
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	6861      	ldr	r1, [r4, #4]
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	bfde      	ittt	le
 800c9f4:	2330      	movle	r3, #48	@ 0x30
 800c9f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9fe:	1b92      	subs	r2, r2, r6
 800ca00:	6122      	str	r2, [r4, #16]
 800ca02:	f8cd a000 	str.w	sl, [sp]
 800ca06:	464b      	mov	r3, r9
 800ca08:	aa03      	add	r2, sp, #12
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	f7ff fee7 	bl	800c7e0 <_printf_common>
 800ca12:	3001      	adds	r0, #1
 800ca14:	d14a      	bne.n	800caac <_printf_i+0x1f0>
 800ca16:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1a:	b004      	add	sp, #16
 800ca1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	f043 0320 	orr.w	r3, r3, #32
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	4832      	ldr	r0, [pc, #200]	@ (800caf4 <_printf_i+0x238>)
 800ca2a:	2778      	movs	r7, #120	@ 0x78
 800ca2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	6831      	ldr	r1, [r6, #0]
 800ca34:	061f      	lsls	r7, r3, #24
 800ca36:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca3a:	d402      	bmi.n	800ca42 <_printf_i+0x186>
 800ca3c:	065f      	lsls	r7, r3, #25
 800ca3e:	bf48      	it	mi
 800ca40:	b2ad      	uxthmi	r5, r5
 800ca42:	6031      	str	r1, [r6, #0]
 800ca44:	07d9      	lsls	r1, r3, #31
 800ca46:	bf44      	itt	mi
 800ca48:	f043 0320 	orrmi.w	r3, r3, #32
 800ca4c:	6023      	strmi	r3, [r4, #0]
 800ca4e:	b11d      	cbz	r5, 800ca58 <_printf_i+0x19c>
 800ca50:	2310      	movs	r3, #16
 800ca52:	e7ad      	b.n	800c9b0 <_printf_i+0xf4>
 800ca54:	4826      	ldr	r0, [pc, #152]	@ (800caf0 <_printf_i+0x234>)
 800ca56:	e7e9      	b.n	800ca2c <_printf_i+0x170>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	f023 0320 	bic.w	r3, r3, #32
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	e7f6      	b.n	800ca50 <_printf_i+0x194>
 800ca62:	4616      	mov	r6, r2
 800ca64:	e7bd      	b.n	800c9e2 <_printf_i+0x126>
 800ca66:	6833      	ldr	r3, [r6, #0]
 800ca68:	6825      	ldr	r5, [r4, #0]
 800ca6a:	6961      	ldr	r1, [r4, #20]
 800ca6c:	1d18      	adds	r0, r3, #4
 800ca6e:	6030      	str	r0, [r6, #0]
 800ca70:	062e      	lsls	r6, r5, #24
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	d501      	bpl.n	800ca7a <_printf_i+0x1be>
 800ca76:	6019      	str	r1, [r3, #0]
 800ca78:	e002      	b.n	800ca80 <_printf_i+0x1c4>
 800ca7a:	0668      	lsls	r0, r5, #25
 800ca7c:	d5fb      	bpl.n	800ca76 <_printf_i+0x1ba>
 800ca7e:	8019      	strh	r1, [r3, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	6123      	str	r3, [r4, #16]
 800ca84:	4616      	mov	r6, r2
 800ca86:	e7bc      	b.n	800ca02 <_printf_i+0x146>
 800ca88:	6833      	ldr	r3, [r6, #0]
 800ca8a:	1d1a      	adds	r2, r3, #4
 800ca8c:	6032      	str	r2, [r6, #0]
 800ca8e:	681e      	ldr	r6, [r3, #0]
 800ca90:	6862      	ldr	r2, [r4, #4]
 800ca92:	2100      	movs	r1, #0
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7f3 fb9b 	bl	80001d0 <memchr>
 800ca9a:	b108      	cbz	r0, 800caa0 <_printf_i+0x1e4>
 800ca9c:	1b80      	subs	r0, r0, r6
 800ca9e:	6060      	str	r0, [r4, #4]
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	6123      	str	r3, [r4, #16]
 800caa4:	2300      	movs	r3, #0
 800caa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caaa:	e7aa      	b.n	800ca02 <_printf_i+0x146>
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	4632      	mov	r2, r6
 800cab0:	4649      	mov	r1, r9
 800cab2:	4640      	mov	r0, r8
 800cab4:	47d0      	blx	sl
 800cab6:	3001      	adds	r0, #1
 800cab8:	d0ad      	beq.n	800ca16 <_printf_i+0x15a>
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	079b      	lsls	r3, r3, #30
 800cabe:	d413      	bmi.n	800cae8 <_printf_i+0x22c>
 800cac0:	68e0      	ldr	r0, [r4, #12]
 800cac2:	9b03      	ldr	r3, [sp, #12]
 800cac4:	4298      	cmp	r0, r3
 800cac6:	bfb8      	it	lt
 800cac8:	4618      	movlt	r0, r3
 800caca:	e7a6      	b.n	800ca1a <_printf_i+0x15e>
 800cacc:	2301      	movs	r3, #1
 800cace:	4632      	mov	r2, r6
 800cad0:	4649      	mov	r1, r9
 800cad2:	4640      	mov	r0, r8
 800cad4:	47d0      	blx	sl
 800cad6:	3001      	adds	r0, #1
 800cad8:	d09d      	beq.n	800ca16 <_printf_i+0x15a>
 800cada:	3501      	adds	r5, #1
 800cadc:	68e3      	ldr	r3, [r4, #12]
 800cade:	9903      	ldr	r1, [sp, #12]
 800cae0:	1a5b      	subs	r3, r3, r1
 800cae2:	42ab      	cmp	r3, r5
 800cae4:	dcf2      	bgt.n	800cacc <_printf_i+0x210>
 800cae6:	e7eb      	b.n	800cac0 <_printf_i+0x204>
 800cae8:	2500      	movs	r5, #0
 800caea:	f104 0619 	add.w	r6, r4, #25
 800caee:	e7f5      	b.n	800cadc <_printf_i+0x220>
 800caf0:	0800eaca 	.word	0x0800eaca
 800caf4:	0800eadb 	.word	0x0800eadb

0800caf8 <std>:
 800caf8:	2300      	movs	r3, #0
 800cafa:	b510      	push	{r4, lr}
 800cafc:	4604      	mov	r4, r0
 800cafe:	e9c0 3300 	strd	r3, r3, [r0]
 800cb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb06:	6083      	str	r3, [r0, #8]
 800cb08:	8181      	strh	r1, [r0, #12]
 800cb0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb0c:	81c2      	strh	r2, [r0, #14]
 800cb0e:	6183      	str	r3, [r0, #24]
 800cb10:	4619      	mov	r1, r3
 800cb12:	2208      	movs	r2, #8
 800cb14:	305c      	adds	r0, #92	@ 0x5c
 800cb16:	f000 f906 	bl	800cd26 <memset>
 800cb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb50 <std+0x58>)
 800cb1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb54 <std+0x5c>)
 800cb20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb22:	4b0d      	ldr	r3, [pc, #52]	@ (800cb58 <std+0x60>)
 800cb24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb26:	4b0d      	ldr	r3, [pc, #52]	@ (800cb5c <std+0x64>)
 800cb28:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb60 <std+0x68>)
 800cb2c:	6224      	str	r4, [r4, #32]
 800cb2e:	429c      	cmp	r4, r3
 800cb30:	d006      	beq.n	800cb40 <std+0x48>
 800cb32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb36:	4294      	cmp	r4, r2
 800cb38:	d002      	beq.n	800cb40 <std+0x48>
 800cb3a:	33d0      	adds	r3, #208	@ 0xd0
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	d105      	bne.n	800cb4c <std+0x54>
 800cb40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb48:	f000 b97a 	b.w	800ce40 <__retarget_lock_init_recursive>
 800cb4c:	bd10      	pop	{r4, pc}
 800cb4e:	bf00      	nop
 800cb50:	0800cca1 	.word	0x0800cca1
 800cb54:	0800ccc3 	.word	0x0800ccc3
 800cb58:	0800ccfb 	.word	0x0800ccfb
 800cb5c:	0800cd1f 	.word	0x0800cd1f
 800cb60:	20002180 	.word	0x20002180

0800cb64 <stdio_exit_handler>:
 800cb64:	4a02      	ldr	r2, [pc, #8]	@ (800cb70 <stdio_exit_handler+0xc>)
 800cb66:	4903      	ldr	r1, [pc, #12]	@ (800cb74 <stdio_exit_handler+0x10>)
 800cb68:	4803      	ldr	r0, [pc, #12]	@ (800cb78 <stdio_exit_handler+0x14>)
 800cb6a:	f000 b87b 	b.w	800cc64 <_fwalk_sglue>
 800cb6e:	bf00      	nop
 800cb70:	200000fc 	.word	0x200000fc
 800cb74:	0800e61d 	.word	0x0800e61d
 800cb78:	2000010c 	.word	0x2000010c

0800cb7c <cleanup_stdio>:
 800cb7c:	6841      	ldr	r1, [r0, #4]
 800cb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb0 <cleanup_stdio+0x34>)
 800cb80:	4299      	cmp	r1, r3
 800cb82:	b510      	push	{r4, lr}
 800cb84:	4604      	mov	r4, r0
 800cb86:	d001      	beq.n	800cb8c <cleanup_stdio+0x10>
 800cb88:	f001 fd48 	bl	800e61c <_fflush_r>
 800cb8c:	68a1      	ldr	r1, [r4, #8]
 800cb8e:	4b09      	ldr	r3, [pc, #36]	@ (800cbb4 <cleanup_stdio+0x38>)
 800cb90:	4299      	cmp	r1, r3
 800cb92:	d002      	beq.n	800cb9a <cleanup_stdio+0x1e>
 800cb94:	4620      	mov	r0, r4
 800cb96:	f001 fd41 	bl	800e61c <_fflush_r>
 800cb9a:	68e1      	ldr	r1, [r4, #12]
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <cleanup_stdio+0x3c>)
 800cb9e:	4299      	cmp	r1, r3
 800cba0:	d004      	beq.n	800cbac <cleanup_stdio+0x30>
 800cba2:	4620      	mov	r0, r4
 800cba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba8:	f001 bd38 	b.w	800e61c <_fflush_r>
 800cbac:	bd10      	pop	{r4, pc}
 800cbae:	bf00      	nop
 800cbb0:	20002180 	.word	0x20002180
 800cbb4:	200021e8 	.word	0x200021e8
 800cbb8:	20002250 	.word	0x20002250

0800cbbc <global_stdio_init.part.0>:
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	4b0b      	ldr	r3, [pc, #44]	@ (800cbec <global_stdio_init.part.0+0x30>)
 800cbc0:	4c0b      	ldr	r4, [pc, #44]	@ (800cbf0 <global_stdio_init.part.0+0x34>)
 800cbc2:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf4 <global_stdio_init.part.0+0x38>)
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2104      	movs	r1, #4
 800cbcc:	f7ff ff94 	bl	800caf8 <std>
 800cbd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	2109      	movs	r1, #9
 800cbd8:	f7ff ff8e 	bl	800caf8 <std>
 800cbdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe6:	2112      	movs	r1, #18
 800cbe8:	f7ff bf86 	b.w	800caf8 <std>
 800cbec:	200022b8 	.word	0x200022b8
 800cbf0:	20002180 	.word	0x20002180
 800cbf4:	0800cb65 	.word	0x0800cb65

0800cbf8 <__sfp_lock_acquire>:
 800cbf8:	4801      	ldr	r0, [pc, #4]	@ (800cc00 <__sfp_lock_acquire+0x8>)
 800cbfa:	f000 b922 	b.w	800ce42 <__retarget_lock_acquire_recursive>
 800cbfe:	bf00      	nop
 800cc00:	200022c1 	.word	0x200022c1

0800cc04 <__sfp_lock_release>:
 800cc04:	4801      	ldr	r0, [pc, #4]	@ (800cc0c <__sfp_lock_release+0x8>)
 800cc06:	f000 b91d 	b.w	800ce44 <__retarget_lock_release_recursive>
 800cc0a:	bf00      	nop
 800cc0c:	200022c1 	.word	0x200022c1

0800cc10 <__sinit>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	f7ff fff0 	bl	800cbf8 <__sfp_lock_acquire>
 800cc18:	6a23      	ldr	r3, [r4, #32]
 800cc1a:	b11b      	cbz	r3, 800cc24 <__sinit+0x14>
 800cc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc20:	f7ff bff0 	b.w	800cc04 <__sfp_lock_release>
 800cc24:	4b04      	ldr	r3, [pc, #16]	@ (800cc38 <__sinit+0x28>)
 800cc26:	6223      	str	r3, [r4, #32]
 800cc28:	4b04      	ldr	r3, [pc, #16]	@ (800cc3c <__sinit+0x2c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1f5      	bne.n	800cc1c <__sinit+0xc>
 800cc30:	f7ff ffc4 	bl	800cbbc <global_stdio_init.part.0>
 800cc34:	e7f2      	b.n	800cc1c <__sinit+0xc>
 800cc36:	bf00      	nop
 800cc38:	0800cb7d 	.word	0x0800cb7d
 800cc3c:	200022b8 	.word	0x200022b8

0800cc40 <fiprintf>:
 800cc40:	b40e      	push	{r1, r2, r3}
 800cc42:	b503      	push	{r0, r1, lr}
 800cc44:	4601      	mov	r1, r0
 800cc46:	ab03      	add	r3, sp, #12
 800cc48:	4805      	ldr	r0, [pc, #20]	@ (800cc60 <fiprintf+0x20>)
 800cc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4e:	6800      	ldr	r0, [r0, #0]
 800cc50:	9301      	str	r3, [sp, #4]
 800cc52:	f001 fb47 	bl	800e2e4 <_vfiprintf_r>
 800cc56:	b002      	add	sp, #8
 800cc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc5c:	b003      	add	sp, #12
 800cc5e:	4770      	bx	lr
 800cc60:	20000108 	.word	0x20000108

0800cc64 <_fwalk_sglue>:
 800cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	4607      	mov	r7, r0
 800cc6a:	4688      	mov	r8, r1
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	2600      	movs	r6, #0
 800cc70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc74:	f1b9 0901 	subs.w	r9, r9, #1
 800cc78:	d505      	bpl.n	800cc86 <_fwalk_sglue+0x22>
 800cc7a:	6824      	ldr	r4, [r4, #0]
 800cc7c:	2c00      	cmp	r4, #0
 800cc7e:	d1f7      	bne.n	800cc70 <_fwalk_sglue+0xc>
 800cc80:	4630      	mov	r0, r6
 800cc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d907      	bls.n	800cc9c <_fwalk_sglue+0x38>
 800cc8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc90:	3301      	adds	r3, #1
 800cc92:	d003      	beq.n	800cc9c <_fwalk_sglue+0x38>
 800cc94:	4629      	mov	r1, r5
 800cc96:	4638      	mov	r0, r7
 800cc98:	47c0      	blx	r8
 800cc9a:	4306      	orrs	r6, r0
 800cc9c:	3568      	adds	r5, #104	@ 0x68
 800cc9e:	e7e9      	b.n	800cc74 <_fwalk_sglue+0x10>

0800cca0 <__sread>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	460c      	mov	r4, r1
 800cca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca8:	f000 f86c 	bl	800cd84 <_read_r>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	bfab      	itete	ge
 800ccb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccb2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccb4:	181b      	addge	r3, r3, r0
 800ccb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccba:	bfac      	ite	ge
 800ccbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccbe:	81a3      	strhlt	r3, [r4, #12]
 800ccc0:	bd10      	pop	{r4, pc}

0800ccc2 <__swrite>:
 800ccc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	461f      	mov	r7, r3
 800ccc8:	898b      	ldrh	r3, [r1, #12]
 800ccca:	05db      	lsls	r3, r3, #23
 800cccc:	4605      	mov	r5, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	d505      	bpl.n	800cce0 <__swrite+0x1e>
 800ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd8:	2302      	movs	r3, #2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f000 f840 	bl	800cd60 <_lseek_r>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	4632      	mov	r2, r6
 800ccee:	463b      	mov	r3, r7
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf6:	f000 b867 	b.w	800cdc8 <_write_r>

0800ccfa <__sseek>:
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd02:	f000 f82d 	bl	800cd60 <_lseek_r>
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	bf15      	itete	ne
 800cd0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd16:	81a3      	strheq	r3, [r4, #12]
 800cd18:	bf18      	it	ne
 800cd1a:	81a3      	strhne	r3, [r4, #12]
 800cd1c:	bd10      	pop	{r4, pc}

0800cd1e <__sclose>:
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	f000 b80d 	b.w	800cd40 <_close_r>

0800cd26 <memset>:
 800cd26:	4402      	add	r2, r0
 800cd28:	4603      	mov	r3, r0
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d100      	bne.n	800cd30 <memset+0xa>
 800cd2e:	4770      	bx	lr
 800cd30:	f803 1b01 	strb.w	r1, [r3], #1
 800cd34:	e7f9      	b.n	800cd2a <memset+0x4>
	...

0800cd38 <_localeconv_r>:
 800cd38:	4800      	ldr	r0, [pc, #0]	@ (800cd3c <_localeconv_r+0x4>)
 800cd3a:	4770      	bx	lr
 800cd3c:	20000248 	.word	0x20000248

0800cd40 <_close_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d06      	ldr	r5, [pc, #24]	@ (800cd5c <_close_r+0x1c>)
 800cd44:	2300      	movs	r3, #0
 800cd46:	4604      	mov	r4, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	602b      	str	r3, [r5, #0]
 800cd4c:	f7f6 ff0e 	bl	8003b6c <_close>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_close_r+0x1a>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_close_r+0x1a>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	200022bc 	.word	0x200022bc

0800cd60 <_lseek_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d07      	ldr	r5, [pc, #28]	@ (800cd80 <_lseek_r+0x20>)
 800cd64:	4604      	mov	r4, r0
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	602a      	str	r2, [r5, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f7f6 ff23 	bl	8003bba <_lseek>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_lseek_r+0x1e>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_lseek_r+0x1e>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	200022bc 	.word	0x200022bc

0800cd84 <_read_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	@ (800cda4 <_read_r+0x20>)
 800cd88:	4604      	mov	r4, r0
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	2200      	movs	r2, #0
 800cd90:	602a      	str	r2, [r5, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f7f6 fecd 	bl	8003b32 <_read>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_read_r+0x1e>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_read_r+0x1e>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	200022bc 	.word	0x200022bc

0800cda8 <_sbrk_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	@ (800cdc4 <_sbrk_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f6 ff0e 	bl	8003bd4 <_sbrk>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_sbrk_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_sbrk_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	200022bc 	.word	0x200022bc

0800cdc8 <_write_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	@ (800cde8 <_write_r+0x20>)
 800cdcc:	4604      	mov	r4, r0
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	602a      	str	r2, [r5, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f7f5 fe46 	bl	8002a68 <_write>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_write_r+0x1e>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_write_r+0x1e>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	200022bc 	.word	0x200022bc

0800cdec <__errno>:
 800cdec:	4b01      	ldr	r3, [pc, #4]	@ (800cdf4 <__errno+0x8>)
 800cdee:	6818      	ldr	r0, [r3, #0]
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000108 	.word	0x20000108

0800cdf8 <__libc_init_array>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ce30 <__libc_init_array+0x38>)
 800cdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ce34 <__libc_init_array+0x3c>)
 800cdfe:	1b64      	subs	r4, r4, r5
 800ce00:	10a4      	asrs	r4, r4, #2
 800ce02:	2600      	movs	r6, #0
 800ce04:	42a6      	cmp	r6, r4
 800ce06:	d109      	bne.n	800ce1c <__libc_init_array+0x24>
 800ce08:	4d0b      	ldr	r5, [pc, #44]	@ (800ce38 <__libc_init_array+0x40>)
 800ce0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ce3c <__libc_init_array+0x44>)
 800ce0c:	f001 fdcc 	bl	800e9a8 <_init>
 800ce10:	1b64      	subs	r4, r4, r5
 800ce12:	10a4      	asrs	r4, r4, #2
 800ce14:	2600      	movs	r6, #0
 800ce16:	42a6      	cmp	r6, r4
 800ce18:	d105      	bne.n	800ce26 <__libc_init_array+0x2e>
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce20:	4798      	blx	r3
 800ce22:	3601      	adds	r6, #1
 800ce24:	e7ee      	b.n	800ce04 <__libc_init_array+0xc>
 800ce26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2a:	4798      	blx	r3
 800ce2c:	3601      	adds	r6, #1
 800ce2e:	e7f2      	b.n	800ce16 <__libc_init_array+0x1e>
 800ce30:	0800edfc 	.word	0x0800edfc
 800ce34:	0800edfc 	.word	0x0800edfc
 800ce38:	0800edfc 	.word	0x0800edfc
 800ce3c:	0800ee00 	.word	0x0800ee00

0800ce40 <__retarget_lock_init_recursive>:
 800ce40:	4770      	bx	lr

0800ce42 <__retarget_lock_acquire_recursive>:
 800ce42:	4770      	bx	lr

0800ce44 <__retarget_lock_release_recursive>:
 800ce44:	4770      	bx	lr

0800ce46 <abort>:
 800ce46:	b508      	push	{r3, lr}
 800ce48:	2006      	movs	r0, #6
 800ce4a:	f001 fccb 	bl	800e7e4 <raise>
 800ce4e:	2001      	movs	r0, #1
 800ce50:	f7f6 fe64 	bl	8003b1c <_exit>

0800ce54 <quorem>:
 800ce54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	6903      	ldr	r3, [r0, #16]
 800ce5a:	690c      	ldr	r4, [r1, #16]
 800ce5c:	42a3      	cmp	r3, r4
 800ce5e:	4607      	mov	r7, r0
 800ce60:	db7e      	blt.n	800cf60 <quorem+0x10c>
 800ce62:	3c01      	subs	r4, #1
 800ce64:	f101 0814 	add.w	r8, r1, #20
 800ce68:	00a3      	lsls	r3, r4, #2
 800ce6a:	f100 0514 	add.w	r5, r0, #20
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	429a      	cmp	r2, r3
 800ce82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce86:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce8a:	d32e      	bcc.n	800ceea <quorem+0x96>
 800ce8c:	f04f 0a00 	mov.w	sl, #0
 800ce90:	46c4      	mov	ip, r8
 800ce92:	46ae      	mov	lr, r5
 800ce94:	46d3      	mov	fp, sl
 800ce96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce9a:	b298      	uxth	r0, r3
 800ce9c:	fb06 a000 	mla	r0, r6, r0, sl
 800cea0:	0c02      	lsrs	r2, r0, #16
 800cea2:	0c1b      	lsrs	r3, r3, #16
 800cea4:	fb06 2303 	mla	r3, r6, r3, r2
 800cea8:	f8de 2000 	ldr.w	r2, [lr]
 800ceac:	b280      	uxth	r0, r0
 800ceae:	b292      	uxth	r2, r2
 800ceb0:	1a12      	subs	r2, r2, r0
 800ceb2:	445a      	add	r2, fp
 800ceb4:	f8de 0000 	ldr.w	r0, [lr]
 800ceb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cec2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cec6:	b292      	uxth	r2, r2
 800cec8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cecc:	45e1      	cmp	r9, ip
 800cece:	f84e 2b04 	str.w	r2, [lr], #4
 800ced2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ced6:	d2de      	bcs.n	800ce96 <quorem+0x42>
 800ced8:	9b00      	ldr	r3, [sp, #0]
 800ceda:	58eb      	ldr	r3, [r5, r3]
 800cedc:	b92b      	cbnz	r3, 800ceea <quorem+0x96>
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	3b04      	subs	r3, #4
 800cee2:	429d      	cmp	r5, r3
 800cee4:	461a      	mov	r2, r3
 800cee6:	d32f      	bcc.n	800cf48 <quorem+0xf4>
 800cee8:	613c      	str	r4, [r7, #16]
 800ceea:	4638      	mov	r0, r7
 800ceec:	f001 f8c8 	bl	800e080 <__mcmp>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	db25      	blt.n	800cf40 <quorem+0xec>
 800cef4:	4629      	mov	r1, r5
 800cef6:	2000      	movs	r0, #0
 800cef8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cefc:	f8d1 c000 	ldr.w	ip, [r1]
 800cf00:	fa1f fe82 	uxth.w	lr, r2
 800cf04:	fa1f f38c 	uxth.w	r3, ip
 800cf08:	eba3 030e 	sub.w	r3, r3, lr
 800cf0c:	4403      	add	r3, r0
 800cf0e:	0c12      	lsrs	r2, r2, #16
 800cf10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cf14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf1e:	45c1      	cmp	r9, r8
 800cf20:	f841 3b04 	str.w	r3, [r1], #4
 800cf24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf28:	d2e6      	bcs.n	800cef8 <quorem+0xa4>
 800cf2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf32:	b922      	cbnz	r2, 800cf3e <quorem+0xea>
 800cf34:	3b04      	subs	r3, #4
 800cf36:	429d      	cmp	r5, r3
 800cf38:	461a      	mov	r2, r3
 800cf3a:	d30b      	bcc.n	800cf54 <quorem+0x100>
 800cf3c:	613c      	str	r4, [r7, #16]
 800cf3e:	3601      	adds	r6, #1
 800cf40:	4630      	mov	r0, r6
 800cf42:	b003      	add	sp, #12
 800cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	3b04      	subs	r3, #4
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d1cb      	bne.n	800cee8 <quorem+0x94>
 800cf50:	3c01      	subs	r4, #1
 800cf52:	e7c6      	b.n	800cee2 <quorem+0x8e>
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	3b04      	subs	r3, #4
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	d1ef      	bne.n	800cf3c <quorem+0xe8>
 800cf5c:	3c01      	subs	r4, #1
 800cf5e:	e7ea      	b.n	800cf36 <quorem+0xe2>
 800cf60:	2000      	movs	r0, #0
 800cf62:	e7ee      	b.n	800cf42 <quorem+0xee>
 800cf64:	0000      	movs	r0, r0
	...

0800cf68 <_dtoa_r>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	69c7      	ldr	r7, [r0, #28]
 800cf6e:	b097      	sub	sp, #92	@ 0x5c
 800cf70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf74:	ec55 4b10 	vmov	r4, r5, d0
 800cf78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf7a:	9107      	str	r1, [sp, #28]
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf80:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf82:	b97f      	cbnz	r7, 800cfa4 <_dtoa_r+0x3c>
 800cf84:	2010      	movs	r0, #16
 800cf86:	f7ff f8ab 	bl	800c0e0 <malloc>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cf90:	b920      	cbnz	r0, 800cf9c <_dtoa_r+0x34>
 800cf92:	4ba9      	ldr	r3, [pc, #676]	@ (800d238 <_dtoa_r+0x2d0>)
 800cf94:	21ef      	movs	r1, #239	@ 0xef
 800cf96:	48a9      	ldr	r0, [pc, #676]	@ (800d23c <_dtoa_r+0x2d4>)
 800cf98:	f7ff f884 	bl	800c0a4 <__assert_func>
 800cf9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cfa0:	6007      	str	r7, [r0, #0]
 800cfa2:	60c7      	str	r7, [r0, #12]
 800cfa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfa8:	6819      	ldr	r1, [r3, #0]
 800cfaa:	b159      	cbz	r1, 800cfc4 <_dtoa_r+0x5c>
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	604a      	str	r2, [r1, #4]
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4093      	lsls	r3, r2
 800cfb4:	608b      	str	r3, [r1, #8]
 800cfb6:	4648      	mov	r0, r9
 800cfb8:	f000 fe30 	bl	800dc1c <_Bfree>
 800cfbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	1e2b      	subs	r3, r5, #0
 800cfc6:	bfb9      	ittee	lt
 800cfc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfcc:	9305      	strlt	r3, [sp, #20]
 800cfce:	2300      	movge	r3, #0
 800cfd0:	6033      	strge	r3, [r6, #0]
 800cfd2:	9f05      	ldr	r7, [sp, #20]
 800cfd4:	4b9a      	ldr	r3, [pc, #616]	@ (800d240 <_dtoa_r+0x2d8>)
 800cfd6:	bfbc      	itt	lt
 800cfd8:	2201      	movlt	r2, #1
 800cfda:	6032      	strlt	r2, [r6, #0]
 800cfdc:	43bb      	bics	r3, r7
 800cfde:	d112      	bne.n	800d006 <_dtoa_r+0x9e>
 800cfe0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfec:	4323      	orrs	r3, r4
 800cfee:	f000 855a 	beq.w	800daa6 <_dtoa_r+0xb3e>
 800cff2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cff4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d254 <_dtoa_r+0x2ec>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 855c 	beq.w	800dab6 <_dtoa_r+0xb4e>
 800cffe:	f10a 0303 	add.w	r3, sl, #3
 800d002:	f000 bd56 	b.w	800dab2 <_dtoa_r+0xb4a>
 800d006:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d00a:	2200      	movs	r2, #0
 800d00c:	ec51 0b17 	vmov	r0, r1, d7
 800d010:	2300      	movs	r3, #0
 800d012:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d016:	f7f3 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800d01a:	4680      	mov	r8, r0
 800d01c:	b158      	cbz	r0, 800d036 <_dtoa_r+0xce>
 800d01e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d020:	2301      	movs	r3, #1
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d026:	b113      	cbz	r3, 800d02e <_dtoa_r+0xc6>
 800d028:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d02a:	4b86      	ldr	r3, [pc, #536]	@ (800d244 <_dtoa_r+0x2dc>)
 800d02c:	6013      	str	r3, [r2, #0]
 800d02e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d258 <_dtoa_r+0x2f0>
 800d032:	f000 bd40 	b.w	800dab6 <_dtoa_r+0xb4e>
 800d036:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d03a:	aa14      	add	r2, sp, #80	@ 0x50
 800d03c:	a915      	add	r1, sp, #84	@ 0x54
 800d03e:	4648      	mov	r0, r9
 800d040:	f001 f8ce 	bl	800e1e0 <__d2b>
 800d044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d048:	9002      	str	r0, [sp, #8]
 800d04a:	2e00      	cmp	r6, #0
 800d04c:	d078      	beq.n	800d140 <_dtoa_r+0x1d8>
 800d04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d050:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d05c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d068:	4619      	mov	r1, r3
 800d06a:	2200      	movs	r2, #0
 800d06c:	4b76      	ldr	r3, [pc, #472]	@ (800d248 <_dtoa_r+0x2e0>)
 800d06e:	f7f3 f90b 	bl	8000288 <__aeabi_dsub>
 800d072:	a36b      	add	r3, pc, #428	@ (adr r3, 800d220 <_dtoa_r+0x2b8>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 fabe 	bl	80005f8 <__aeabi_dmul>
 800d07c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d228 <_dtoa_r+0x2c0>)
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	f7f3 f903 	bl	800028c <__adddf3>
 800d086:	4604      	mov	r4, r0
 800d088:	4630      	mov	r0, r6
 800d08a:	460d      	mov	r5, r1
 800d08c:	f7f3 fa4a 	bl	8000524 <__aeabi_i2d>
 800d090:	a367      	add	r3, pc, #412	@ (adr r3, 800d230 <_dtoa_r+0x2c8>)
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	f7f3 faaf 	bl	80005f8 <__aeabi_dmul>
 800d09a:	4602      	mov	r2, r0
 800d09c:	460b      	mov	r3, r1
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 f8f3 	bl	800028c <__adddf3>
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	f7f3 fd55 	bl	8000b58 <__aeabi_d2iz>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 fd10 	bl	8000adc <__aeabi_dcmplt>
 800d0bc:	b140      	cbz	r0, 800d0d0 <_dtoa_r+0x168>
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f7f3 fa30 	bl	8000524 <__aeabi_i2d>
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	462b      	mov	r3, r5
 800d0c8:	f7f3 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0cc:	b900      	cbnz	r0, 800d0d0 <_dtoa_r+0x168>
 800d0ce:	3f01      	subs	r7, #1
 800d0d0:	2f16      	cmp	r7, #22
 800d0d2:	d852      	bhi.n	800d17a <_dtoa_r+0x212>
 800d0d4:	4b5d      	ldr	r3, [pc, #372]	@ (800d24c <_dtoa_r+0x2e4>)
 800d0d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d0e2:	f7f3 fcfb 	bl	8000adc <__aeabi_dcmplt>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d049      	beq.n	800d17e <_dtoa_r+0x216>
 800d0ea:	3f01      	subs	r7, #1
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0f2:	1b9b      	subs	r3, r3, r6
 800d0f4:	1e5a      	subs	r2, r3, #1
 800d0f6:	bf45      	ittet	mi
 800d0f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d0fc:	9300      	strmi	r3, [sp, #0]
 800d0fe:	2300      	movpl	r3, #0
 800d100:	2300      	movmi	r3, #0
 800d102:	9206      	str	r2, [sp, #24]
 800d104:	bf54      	ite	pl
 800d106:	9300      	strpl	r3, [sp, #0]
 800d108:	9306      	strmi	r3, [sp, #24]
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	db39      	blt.n	800d182 <_dtoa_r+0x21a>
 800d10e:	9b06      	ldr	r3, [sp, #24]
 800d110:	970d      	str	r7, [sp, #52]	@ 0x34
 800d112:	443b      	add	r3, r7
 800d114:	9306      	str	r3, [sp, #24]
 800d116:	2300      	movs	r3, #0
 800d118:	9308      	str	r3, [sp, #32]
 800d11a:	9b07      	ldr	r3, [sp, #28]
 800d11c:	2b09      	cmp	r3, #9
 800d11e:	d863      	bhi.n	800d1e8 <_dtoa_r+0x280>
 800d120:	2b05      	cmp	r3, #5
 800d122:	bfc4      	itt	gt
 800d124:	3b04      	subgt	r3, #4
 800d126:	9307      	strgt	r3, [sp, #28]
 800d128:	9b07      	ldr	r3, [sp, #28]
 800d12a:	f1a3 0302 	sub.w	r3, r3, #2
 800d12e:	bfcc      	ite	gt
 800d130:	2400      	movgt	r4, #0
 800d132:	2401      	movle	r4, #1
 800d134:	2b03      	cmp	r3, #3
 800d136:	d863      	bhi.n	800d200 <_dtoa_r+0x298>
 800d138:	e8df f003 	tbb	[pc, r3]
 800d13c:	2b375452 	.word	0x2b375452
 800d140:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d144:	441e      	add	r6, r3
 800d146:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	bfc1      	itttt	gt
 800d14e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d152:	409f      	lslgt	r7, r3
 800d154:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d158:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d15c:	bfd6      	itet	le
 800d15e:	f1c3 0320 	rsble	r3, r3, #32
 800d162:	ea47 0003 	orrgt.w	r0, r7, r3
 800d166:	fa04 f003 	lslle.w	r0, r4, r3
 800d16a:	f7f3 f9cb 	bl	8000504 <__aeabi_ui2d>
 800d16e:	2201      	movs	r2, #1
 800d170:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d174:	3e01      	subs	r6, #1
 800d176:	9212      	str	r2, [sp, #72]	@ 0x48
 800d178:	e776      	b.n	800d068 <_dtoa_r+0x100>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e7b7      	b.n	800d0ee <_dtoa_r+0x186>
 800d17e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d180:	e7b6      	b.n	800d0f0 <_dtoa_r+0x188>
 800d182:	9b00      	ldr	r3, [sp, #0]
 800d184:	1bdb      	subs	r3, r3, r7
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	427b      	negs	r3, r7
 800d18a:	9308      	str	r3, [sp, #32]
 800d18c:	2300      	movs	r3, #0
 800d18e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d190:	e7c3      	b.n	800d11a <_dtoa_r+0x1b2>
 800d192:	2301      	movs	r3, #1
 800d194:	9309      	str	r3, [sp, #36]	@ 0x24
 800d196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d198:	eb07 0b03 	add.w	fp, r7, r3
 800d19c:	f10b 0301 	add.w	r3, fp, #1
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	9303      	str	r3, [sp, #12]
 800d1a4:	bfb8      	it	lt
 800d1a6:	2301      	movlt	r3, #1
 800d1a8:	e006      	b.n	800d1b8 <_dtoa_r+0x250>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dd28      	ble.n	800d206 <_dtoa_r+0x29e>
 800d1b4:	469b      	mov	fp, r3
 800d1b6:	9303      	str	r3, [sp, #12]
 800d1b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	2204      	movs	r2, #4
 800d1c0:	f102 0514 	add.w	r5, r2, #20
 800d1c4:	429d      	cmp	r5, r3
 800d1c6:	d926      	bls.n	800d216 <_dtoa_r+0x2ae>
 800d1c8:	6041      	str	r1, [r0, #4]
 800d1ca:	4648      	mov	r0, r9
 800d1cc:	f000 fce6 	bl	800db9c <_Balloc>
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d142      	bne.n	800d25c <_dtoa_r+0x2f4>
 800d1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800d250 <_dtoa_r+0x2e8>)
 800d1d8:	4602      	mov	r2, r0
 800d1da:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1de:	e6da      	b.n	800cf96 <_dtoa_r+0x2e>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	e7e3      	b.n	800d1ac <_dtoa_r+0x244>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	e7d5      	b.n	800d194 <_dtoa_r+0x22c>
 800d1e8:	2401      	movs	r4, #1
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9307      	str	r3, [sp, #28]
 800d1ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800d1f0:	f04f 3bff 	mov.w	fp, #4294967295
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1fa:	2312      	movs	r3, #18
 800d1fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1fe:	e7db      	b.n	800d1b8 <_dtoa_r+0x250>
 800d200:	2301      	movs	r3, #1
 800d202:	9309      	str	r3, [sp, #36]	@ 0x24
 800d204:	e7f4      	b.n	800d1f0 <_dtoa_r+0x288>
 800d206:	f04f 0b01 	mov.w	fp, #1
 800d20a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d20e:	465b      	mov	r3, fp
 800d210:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d214:	e7d0      	b.n	800d1b8 <_dtoa_r+0x250>
 800d216:	3101      	adds	r1, #1
 800d218:	0052      	lsls	r2, r2, #1
 800d21a:	e7d1      	b.n	800d1c0 <_dtoa_r+0x258>
 800d21c:	f3af 8000 	nop.w
 800d220:	636f4361 	.word	0x636f4361
 800d224:	3fd287a7 	.word	0x3fd287a7
 800d228:	8b60c8b3 	.word	0x8b60c8b3
 800d22c:	3fc68a28 	.word	0x3fc68a28
 800d230:	509f79fb 	.word	0x509f79fb
 800d234:	3fd34413 	.word	0x3fd34413
 800d238:	0800eaf9 	.word	0x0800eaf9
 800d23c:	0800eb10 	.word	0x0800eb10
 800d240:	7ff00000 	.word	0x7ff00000
 800d244:	0800eac9 	.word	0x0800eac9
 800d248:	3ff80000 	.word	0x3ff80000
 800d24c:	0800ec28 	.word	0x0800ec28
 800d250:	0800eb68 	.word	0x0800eb68
 800d254:	0800eaf5 	.word	0x0800eaf5
 800d258:	0800eac8 	.word	0x0800eac8
 800d25c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d260:	6018      	str	r0, [r3, #0]
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	2b0e      	cmp	r3, #14
 800d266:	f200 80a1 	bhi.w	800d3ac <_dtoa_r+0x444>
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	f000 809e 	beq.w	800d3ac <_dtoa_r+0x444>
 800d270:	2f00      	cmp	r7, #0
 800d272:	dd33      	ble.n	800d2dc <_dtoa_r+0x374>
 800d274:	4b9c      	ldr	r3, [pc, #624]	@ (800d4e8 <_dtoa_r+0x580>)
 800d276:	f007 020f 	and.w	r2, r7, #15
 800d27a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d27e:	ed93 7b00 	vldr	d7, [r3]
 800d282:	05f8      	lsls	r0, r7, #23
 800d284:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d288:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d28c:	d516      	bpl.n	800d2bc <_dtoa_r+0x354>
 800d28e:	4b97      	ldr	r3, [pc, #604]	@ (800d4ec <_dtoa_r+0x584>)
 800d290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d298:	f7f3 fad8 	bl	800084c <__aeabi_ddiv>
 800d29c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2a0:	f004 040f 	and.w	r4, r4, #15
 800d2a4:	2603      	movs	r6, #3
 800d2a6:	4d91      	ldr	r5, [pc, #580]	@ (800d4ec <_dtoa_r+0x584>)
 800d2a8:	b954      	cbnz	r4, 800d2c0 <_dtoa_r+0x358>
 800d2aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2b2:	f7f3 facb 	bl	800084c <__aeabi_ddiv>
 800d2b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2ba:	e028      	b.n	800d30e <_dtoa_r+0x3a6>
 800d2bc:	2602      	movs	r6, #2
 800d2be:	e7f2      	b.n	800d2a6 <_dtoa_r+0x33e>
 800d2c0:	07e1      	lsls	r1, r4, #31
 800d2c2:	d508      	bpl.n	800d2d6 <_dtoa_r+0x36e>
 800d2c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2cc:	f7f3 f994 	bl	80005f8 <__aeabi_dmul>
 800d2d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2d4:	3601      	adds	r6, #1
 800d2d6:	1064      	asrs	r4, r4, #1
 800d2d8:	3508      	adds	r5, #8
 800d2da:	e7e5      	b.n	800d2a8 <_dtoa_r+0x340>
 800d2dc:	f000 80af 	beq.w	800d43e <_dtoa_r+0x4d6>
 800d2e0:	427c      	negs	r4, r7
 800d2e2:	4b81      	ldr	r3, [pc, #516]	@ (800d4e8 <_dtoa_r+0x580>)
 800d2e4:	4d81      	ldr	r5, [pc, #516]	@ (800d4ec <_dtoa_r+0x584>)
 800d2e6:	f004 020f 	and.w	r2, r4, #15
 800d2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2f6:	f7f3 f97f 	bl	80005f8 <__aeabi_dmul>
 800d2fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2fe:	1124      	asrs	r4, r4, #4
 800d300:	2300      	movs	r3, #0
 800d302:	2602      	movs	r6, #2
 800d304:	2c00      	cmp	r4, #0
 800d306:	f040 808f 	bne.w	800d428 <_dtoa_r+0x4c0>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d1d3      	bne.n	800d2b6 <_dtoa_r+0x34e>
 800d30e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d310:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 8094 	beq.w	800d442 <_dtoa_r+0x4da>
 800d31a:	4b75      	ldr	r3, [pc, #468]	@ (800d4f0 <_dtoa_r+0x588>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	4620      	mov	r0, r4
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800d326:	2800      	cmp	r0, #0
 800d328:	f000 808b 	beq.w	800d442 <_dtoa_r+0x4da>
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 8087 	beq.w	800d442 <_dtoa_r+0x4da>
 800d334:	f1bb 0f00 	cmp.w	fp, #0
 800d338:	dd34      	ble.n	800d3a4 <_dtoa_r+0x43c>
 800d33a:	4620      	mov	r0, r4
 800d33c:	4b6d      	ldr	r3, [pc, #436]	@ (800d4f4 <_dtoa_r+0x58c>)
 800d33e:	2200      	movs	r2, #0
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 f959 	bl	80005f8 <__aeabi_dmul>
 800d346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d34a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d34e:	3601      	adds	r6, #1
 800d350:	465c      	mov	r4, fp
 800d352:	4630      	mov	r0, r6
 800d354:	f7f3 f8e6 	bl	8000524 <__aeabi_i2d>
 800d358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d35c:	f7f3 f94c 	bl	80005f8 <__aeabi_dmul>
 800d360:	4b65      	ldr	r3, [pc, #404]	@ (800d4f8 <_dtoa_r+0x590>)
 800d362:	2200      	movs	r2, #0
 800d364:	f7f2 ff92 	bl	800028c <__adddf3>
 800d368:	4605      	mov	r5, r0
 800d36a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d36e:	2c00      	cmp	r4, #0
 800d370:	d16a      	bne.n	800d448 <_dtoa_r+0x4e0>
 800d372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d376:	4b61      	ldr	r3, [pc, #388]	@ (800d4fc <_dtoa_r+0x594>)
 800d378:	2200      	movs	r2, #0
 800d37a:	f7f2 ff85 	bl	8000288 <__aeabi_dsub>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d386:	462a      	mov	r2, r5
 800d388:	4633      	mov	r3, r6
 800d38a:	f7f3 fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800d38e:	2800      	cmp	r0, #0
 800d390:	f040 8298 	bne.w	800d8c4 <_dtoa_r+0x95c>
 800d394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d398:	462a      	mov	r2, r5
 800d39a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d39e:	f7f3 fb9d 	bl	8000adc <__aeabi_dcmplt>
 800d3a2:	bb38      	cbnz	r0, 800d3f4 <_dtoa_r+0x48c>
 800d3a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d3a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d3ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f2c0 8157 	blt.w	800d662 <_dtoa_r+0x6fa>
 800d3b4:	2f0e      	cmp	r7, #14
 800d3b6:	f300 8154 	bgt.w	800d662 <_dtoa_r+0x6fa>
 800d3ba:	4b4b      	ldr	r3, [pc, #300]	@ (800d4e8 <_dtoa_r+0x580>)
 800d3bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3c0:	ed93 7b00 	vldr	d7, [r3]
 800d3c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	ed8d 7b00 	vstr	d7, [sp]
 800d3cc:	f280 80e5 	bge.w	800d59a <_dtoa_r+0x632>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f300 80e1 	bgt.w	800d59a <_dtoa_r+0x632>
 800d3d8:	d10c      	bne.n	800d3f4 <_dtoa_r+0x48c>
 800d3da:	4b48      	ldr	r3, [pc, #288]	@ (800d4fc <_dtoa_r+0x594>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	ec51 0b17 	vmov	r0, r1, d7
 800d3e2:	f7f3 f909 	bl	80005f8 <__aeabi_dmul>
 800d3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ea:	f7f3 fb8b 	bl	8000b04 <__aeabi_dcmpge>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f000 8266 	beq.w	800d8c0 <_dtoa_r+0x958>
 800d3f4:	2400      	movs	r4, #0
 800d3f6:	4625      	mov	r5, r4
 800d3f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3fa:	4656      	mov	r6, sl
 800d3fc:	ea6f 0803 	mvn.w	r8, r3
 800d400:	2700      	movs	r7, #0
 800d402:	4621      	mov	r1, r4
 800d404:	4648      	mov	r0, r9
 800d406:	f000 fc09 	bl	800dc1c <_Bfree>
 800d40a:	2d00      	cmp	r5, #0
 800d40c:	f000 80bd 	beq.w	800d58a <_dtoa_r+0x622>
 800d410:	b12f      	cbz	r7, 800d41e <_dtoa_r+0x4b6>
 800d412:	42af      	cmp	r7, r5
 800d414:	d003      	beq.n	800d41e <_dtoa_r+0x4b6>
 800d416:	4639      	mov	r1, r7
 800d418:	4648      	mov	r0, r9
 800d41a:	f000 fbff 	bl	800dc1c <_Bfree>
 800d41e:	4629      	mov	r1, r5
 800d420:	4648      	mov	r0, r9
 800d422:	f000 fbfb 	bl	800dc1c <_Bfree>
 800d426:	e0b0      	b.n	800d58a <_dtoa_r+0x622>
 800d428:	07e2      	lsls	r2, r4, #31
 800d42a:	d505      	bpl.n	800d438 <_dtoa_r+0x4d0>
 800d42c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d430:	f7f3 f8e2 	bl	80005f8 <__aeabi_dmul>
 800d434:	3601      	adds	r6, #1
 800d436:	2301      	movs	r3, #1
 800d438:	1064      	asrs	r4, r4, #1
 800d43a:	3508      	adds	r5, #8
 800d43c:	e762      	b.n	800d304 <_dtoa_r+0x39c>
 800d43e:	2602      	movs	r6, #2
 800d440:	e765      	b.n	800d30e <_dtoa_r+0x3a6>
 800d442:	9c03      	ldr	r4, [sp, #12]
 800d444:	46b8      	mov	r8, r7
 800d446:	e784      	b.n	800d352 <_dtoa_r+0x3ea>
 800d448:	4b27      	ldr	r3, [pc, #156]	@ (800d4e8 <_dtoa_r+0x580>)
 800d44a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d44c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d454:	4454      	add	r4, sl
 800d456:	2900      	cmp	r1, #0
 800d458:	d054      	beq.n	800d504 <_dtoa_r+0x59c>
 800d45a:	4929      	ldr	r1, [pc, #164]	@ (800d500 <_dtoa_r+0x598>)
 800d45c:	2000      	movs	r0, #0
 800d45e:	f7f3 f9f5 	bl	800084c <__aeabi_ddiv>
 800d462:	4633      	mov	r3, r6
 800d464:	462a      	mov	r2, r5
 800d466:	f7f2 ff0f 	bl	8000288 <__aeabi_dsub>
 800d46a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d46e:	4656      	mov	r6, sl
 800d470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d474:	f7f3 fb70 	bl	8000b58 <__aeabi_d2iz>
 800d478:	4605      	mov	r5, r0
 800d47a:	f7f3 f853 	bl	8000524 <__aeabi_i2d>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d486:	f7f2 feff 	bl	8000288 <__aeabi_dsub>
 800d48a:	3530      	adds	r5, #48	@ 0x30
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d494:	f806 5b01 	strb.w	r5, [r6], #1
 800d498:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d49c:	f7f3 fb1e 	bl	8000adc <__aeabi_dcmplt>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d172      	bne.n	800d58a <_dtoa_r+0x622>
 800d4a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4a8:	4911      	ldr	r1, [pc, #68]	@ (800d4f0 <_dtoa_r+0x588>)
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f7f2 feec 	bl	8000288 <__aeabi_dsub>
 800d4b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4b4:	f7f3 fb12 	bl	8000adc <__aeabi_dcmplt>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	f040 80b4 	bne.w	800d626 <_dtoa_r+0x6be>
 800d4be:	42a6      	cmp	r6, r4
 800d4c0:	f43f af70 	beq.w	800d3a4 <_dtoa_r+0x43c>
 800d4c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4f4 <_dtoa_r+0x58c>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f7f3 f894 	bl	80005f8 <__aeabi_dmul>
 800d4d0:	4b08      	ldr	r3, [pc, #32]	@ (800d4f4 <_dtoa_r+0x58c>)
 800d4d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4dc:	f7f3 f88c 	bl	80005f8 <__aeabi_dmul>
 800d4e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4e4:	e7c4      	b.n	800d470 <_dtoa_r+0x508>
 800d4e6:	bf00      	nop
 800d4e8:	0800ec28 	.word	0x0800ec28
 800d4ec:	0800ec00 	.word	0x0800ec00
 800d4f0:	3ff00000 	.word	0x3ff00000
 800d4f4:	40240000 	.word	0x40240000
 800d4f8:	401c0000 	.word	0x401c0000
 800d4fc:	40140000 	.word	0x40140000
 800d500:	3fe00000 	.word	0x3fe00000
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d510:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d512:	4656      	mov	r6, sl
 800d514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d518:	f7f3 fb1e 	bl	8000b58 <__aeabi_d2iz>
 800d51c:	4605      	mov	r5, r0
 800d51e:	f7f3 f801 	bl	8000524 <__aeabi_i2d>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d52a:	f7f2 fead 	bl	8000288 <__aeabi_dsub>
 800d52e:	3530      	adds	r5, #48	@ 0x30
 800d530:	f806 5b01 	strb.w	r5, [r6], #1
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	42a6      	cmp	r6, r4
 800d53a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	d124      	bne.n	800d58e <_dtoa_r+0x626>
 800d544:	4baf      	ldr	r3, [pc, #700]	@ (800d804 <_dtoa_r+0x89c>)
 800d546:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d54a:	f7f2 fe9f 	bl	800028c <__adddf3>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d556:	f7f3 fadf 	bl	8000b18 <__aeabi_dcmpgt>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d163      	bne.n	800d626 <_dtoa_r+0x6be>
 800d55e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d562:	49a8      	ldr	r1, [pc, #672]	@ (800d804 <_dtoa_r+0x89c>)
 800d564:	2000      	movs	r0, #0
 800d566:	f7f2 fe8f 	bl	8000288 <__aeabi_dsub>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d572:	f7f3 fab3 	bl	8000adc <__aeabi_dcmplt>
 800d576:	2800      	cmp	r0, #0
 800d578:	f43f af14 	beq.w	800d3a4 <_dtoa_r+0x43c>
 800d57c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d57e:	1e73      	subs	r3, r6, #1
 800d580:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d586:	2b30      	cmp	r3, #48	@ 0x30
 800d588:	d0f8      	beq.n	800d57c <_dtoa_r+0x614>
 800d58a:	4647      	mov	r7, r8
 800d58c:	e03b      	b.n	800d606 <_dtoa_r+0x69e>
 800d58e:	4b9e      	ldr	r3, [pc, #632]	@ (800d808 <_dtoa_r+0x8a0>)
 800d590:	f7f3 f832 	bl	80005f8 <__aeabi_dmul>
 800d594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d598:	e7bc      	b.n	800d514 <_dtoa_r+0x5ac>
 800d59a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d59e:	4656      	mov	r6, sl
 800d5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f7f3 f950 	bl	800084c <__aeabi_ddiv>
 800d5ac:	f7f3 fad4 	bl	8000b58 <__aeabi_d2iz>
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	f7f2 ffb7 	bl	8000524 <__aeabi_i2d>
 800d5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ba:	f7f3 f81d 	bl	80005f8 <__aeabi_dmul>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5ca:	f7f2 fe5d 	bl	8000288 <__aeabi_dsub>
 800d5ce:	f806 4b01 	strb.w	r4, [r6], #1
 800d5d2:	9d03      	ldr	r5, [sp, #12]
 800d5d4:	eba6 040a 	sub.w	r4, r6, sl
 800d5d8:	42a5      	cmp	r5, r4
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	d133      	bne.n	800d648 <_dtoa_r+0x6e0>
 800d5e0:	f7f2 fe54 	bl	800028c <__adddf3>
 800d5e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	f7f3 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 800d5f0:	b9c0      	cbnz	r0, 800d624 <_dtoa_r+0x6bc>
 800d5f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f3 fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5fe:	b110      	cbz	r0, 800d606 <_dtoa_r+0x69e>
 800d600:	f018 0f01 	tst.w	r8, #1
 800d604:	d10e      	bne.n	800d624 <_dtoa_r+0x6bc>
 800d606:	9902      	ldr	r1, [sp, #8]
 800d608:	4648      	mov	r0, r9
 800d60a:	f000 fb07 	bl	800dc1c <_Bfree>
 800d60e:	2300      	movs	r3, #0
 800d610:	7033      	strb	r3, [r6, #0]
 800d612:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d614:	3701      	adds	r7, #1
 800d616:	601f      	str	r7, [r3, #0]
 800d618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f000 824b 	beq.w	800dab6 <_dtoa_r+0xb4e>
 800d620:	601e      	str	r6, [r3, #0]
 800d622:	e248      	b.n	800dab6 <_dtoa_r+0xb4e>
 800d624:	46b8      	mov	r8, r7
 800d626:	4633      	mov	r3, r6
 800d628:	461e      	mov	r6, r3
 800d62a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d62e:	2a39      	cmp	r2, #57	@ 0x39
 800d630:	d106      	bne.n	800d640 <_dtoa_r+0x6d8>
 800d632:	459a      	cmp	sl, r3
 800d634:	d1f8      	bne.n	800d628 <_dtoa_r+0x6c0>
 800d636:	2230      	movs	r2, #48	@ 0x30
 800d638:	f108 0801 	add.w	r8, r8, #1
 800d63c:	f88a 2000 	strb.w	r2, [sl]
 800d640:	781a      	ldrb	r2, [r3, #0]
 800d642:	3201      	adds	r2, #1
 800d644:	701a      	strb	r2, [r3, #0]
 800d646:	e7a0      	b.n	800d58a <_dtoa_r+0x622>
 800d648:	4b6f      	ldr	r3, [pc, #444]	@ (800d808 <_dtoa_r+0x8a0>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	f7f2 ffd4 	bl	80005f8 <__aeabi_dmul>
 800d650:	2200      	movs	r2, #0
 800d652:	2300      	movs	r3, #0
 800d654:	4604      	mov	r4, r0
 800d656:	460d      	mov	r5, r1
 800d658:	f7f3 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d09f      	beq.n	800d5a0 <_dtoa_r+0x638>
 800d660:	e7d1      	b.n	800d606 <_dtoa_r+0x69e>
 800d662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d664:	2a00      	cmp	r2, #0
 800d666:	f000 80ea 	beq.w	800d83e <_dtoa_r+0x8d6>
 800d66a:	9a07      	ldr	r2, [sp, #28]
 800d66c:	2a01      	cmp	r2, #1
 800d66e:	f300 80cd 	bgt.w	800d80c <_dtoa_r+0x8a4>
 800d672:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d674:	2a00      	cmp	r2, #0
 800d676:	f000 80c1 	beq.w	800d7fc <_dtoa_r+0x894>
 800d67a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d67e:	9c08      	ldr	r4, [sp, #32]
 800d680:	9e00      	ldr	r6, [sp, #0]
 800d682:	9a00      	ldr	r2, [sp, #0]
 800d684:	441a      	add	r2, r3
 800d686:	9200      	str	r2, [sp, #0]
 800d688:	9a06      	ldr	r2, [sp, #24]
 800d68a:	2101      	movs	r1, #1
 800d68c:	441a      	add	r2, r3
 800d68e:	4648      	mov	r0, r9
 800d690:	9206      	str	r2, [sp, #24]
 800d692:	f000 fb77 	bl	800dd84 <__i2b>
 800d696:	4605      	mov	r5, r0
 800d698:	b166      	cbz	r6, 800d6b4 <_dtoa_r+0x74c>
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	dd09      	ble.n	800d6b4 <_dtoa_r+0x74c>
 800d6a0:	42b3      	cmp	r3, r6
 800d6a2:	9a00      	ldr	r2, [sp, #0]
 800d6a4:	bfa8      	it	ge
 800d6a6:	4633      	movge	r3, r6
 800d6a8:	1ad2      	subs	r2, r2, r3
 800d6aa:	9200      	str	r2, [sp, #0]
 800d6ac:	9a06      	ldr	r2, [sp, #24]
 800d6ae:	1af6      	subs	r6, r6, r3
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	9306      	str	r3, [sp, #24]
 800d6b4:	9b08      	ldr	r3, [sp, #32]
 800d6b6:	b30b      	cbz	r3, 800d6fc <_dtoa_r+0x794>
 800d6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 80c6 	beq.w	800d84c <_dtoa_r+0x8e4>
 800d6c0:	2c00      	cmp	r4, #0
 800d6c2:	f000 80c0 	beq.w	800d846 <_dtoa_r+0x8de>
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4622      	mov	r2, r4
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	f000 fc12 	bl	800def4 <__pow5mult>
 800d6d0:	9a02      	ldr	r2, [sp, #8]
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	4648      	mov	r0, r9
 800d6d8:	f000 fb6a 	bl	800ddb0 <__multiply>
 800d6dc:	9902      	ldr	r1, [sp, #8]
 800d6de:	4680      	mov	r8, r0
 800d6e0:	4648      	mov	r0, r9
 800d6e2:	f000 fa9b 	bl	800dc1c <_Bfree>
 800d6e6:	9b08      	ldr	r3, [sp, #32]
 800d6e8:	1b1b      	subs	r3, r3, r4
 800d6ea:	9308      	str	r3, [sp, #32]
 800d6ec:	f000 80b1 	beq.w	800d852 <_dtoa_r+0x8ea>
 800d6f0:	9a08      	ldr	r2, [sp, #32]
 800d6f2:	4641      	mov	r1, r8
 800d6f4:	4648      	mov	r0, r9
 800d6f6:	f000 fbfd 	bl	800def4 <__pow5mult>
 800d6fa:	9002      	str	r0, [sp, #8]
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	4648      	mov	r0, r9
 800d700:	f000 fb40 	bl	800dd84 <__i2b>
 800d704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d706:	4604      	mov	r4, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 81d8 	beq.w	800dabe <_dtoa_r+0xb56>
 800d70e:	461a      	mov	r2, r3
 800d710:	4601      	mov	r1, r0
 800d712:	4648      	mov	r0, r9
 800d714:	f000 fbee 	bl	800def4 <__pow5mult>
 800d718:	9b07      	ldr	r3, [sp, #28]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	4604      	mov	r4, r0
 800d71e:	f300 809f 	bgt.w	800d860 <_dtoa_r+0x8f8>
 800d722:	9b04      	ldr	r3, [sp, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f040 8097 	bne.w	800d858 <_dtoa_r+0x8f0>
 800d72a:	9b05      	ldr	r3, [sp, #20]
 800d72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 8093 	bne.w	800d85c <_dtoa_r+0x8f4>
 800d736:	9b05      	ldr	r3, [sp, #20]
 800d738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d73c:	0d1b      	lsrs	r3, r3, #20
 800d73e:	051b      	lsls	r3, r3, #20
 800d740:	b133      	cbz	r3, 800d750 <_dtoa_r+0x7e8>
 800d742:	9b00      	ldr	r3, [sp, #0]
 800d744:	3301      	adds	r3, #1
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	9b06      	ldr	r3, [sp, #24]
 800d74a:	3301      	adds	r3, #1
 800d74c:	9306      	str	r3, [sp, #24]
 800d74e:	2301      	movs	r3, #1
 800d750:	9308      	str	r3, [sp, #32]
 800d752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 81b8 	beq.w	800daca <_dtoa_r+0xb62>
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d760:	6918      	ldr	r0, [r3, #16]
 800d762:	f000 fac3 	bl	800dcec <__hi0bits>
 800d766:	f1c0 0020 	rsb	r0, r0, #32
 800d76a:	9b06      	ldr	r3, [sp, #24]
 800d76c:	4418      	add	r0, r3
 800d76e:	f010 001f 	ands.w	r0, r0, #31
 800d772:	f000 8082 	beq.w	800d87a <_dtoa_r+0x912>
 800d776:	f1c0 0320 	rsb	r3, r0, #32
 800d77a:	2b04      	cmp	r3, #4
 800d77c:	dd73      	ble.n	800d866 <_dtoa_r+0x8fe>
 800d77e:	9b00      	ldr	r3, [sp, #0]
 800d780:	f1c0 001c 	rsb	r0, r0, #28
 800d784:	4403      	add	r3, r0
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	4403      	add	r3, r0
 800d78c:	4406      	add	r6, r0
 800d78e:	9306      	str	r3, [sp, #24]
 800d790:	9b00      	ldr	r3, [sp, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	dd05      	ble.n	800d7a2 <_dtoa_r+0x83a>
 800d796:	9902      	ldr	r1, [sp, #8]
 800d798:	461a      	mov	r2, r3
 800d79a:	4648      	mov	r0, r9
 800d79c:	f000 fc04 	bl	800dfa8 <__lshift>
 800d7a0:	9002      	str	r0, [sp, #8]
 800d7a2:	9b06      	ldr	r3, [sp, #24]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dd05      	ble.n	800d7b4 <_dtoa_r+0x84c>
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4648      	mov	r0, r9
 800d7ae:	f000 fbfb 	bl	800dfa8 <__lshift>
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d061      	beq.n	800d87e <_dtoa_r+0x916>
 800d7ba:	9802      	ldr	r0, [sp, #8]
 800d7bc:	4621      	mov	r1, r4
 800d7be:	f000 fc5f 	bl	800e080 <__mcmp>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	da5b      	bge.n	800d87e <_dtoa_r+0x916>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	9902      	ldr	r1, [sp, #8]
 800d7ca:	220a      	movs	r2, #10
 800d7cc:	4648      	mov	r0, r9
 800d7ce:	f000 fa47 	bl	800dc60 <__multadd>
 800d7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7d4:	9002      	str	r0, [sp, #8]
 800d7d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 8177 	beq.w	800dace <_dtoa_r+0xb66>
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	220a      	movs	r2, #10
 800d7e6:	4648      	mov	r0, r9
 800d7e8:	f000 fa3a 	bl	800dc60 <__multadd>
 800d7ec:	f1bb 0f00 	cmp.w	fp, #0
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	dc6f      	bgt.n	800d8d4 <_dtoa_r+0x96c>
 800d7f4:	9b07      	ldr	r3, [sp, #28]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	dc49      	bgt.n	800d88e <_dtoa_r+0x926>
 800d7fa:	e06b      	b.n	800d8d4 <_dtoa_r+0x96c>
 800d7fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d802:	e73c      	b.n	800d67e <_dtoa_r+0x716>
 800d804:	3fe00000 	.word	0x3fe00000
 800d808:	40240000 	.word	0x40240000
 800d80c:	9b03      	ldr	r3, [sp, #12]
 800d80e:	1e5c      	subs	r4, r3, #1
 800d810:	9b08      	ldr	r3, [sp, #32]
 800d812:	42a3      	cmp	r3, r4
 800d814:	db09      	blt.n	800d82a <_dtoa_r+0x8c2>
 800d816:	1b1c      	subs	r4, r3, r4
 800d818:	9b03      	ldr	r3, [sp, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f6bf af30 	bge.w	800d680 <_dtoa_r+0x718>
 800d820:	9b00      	ldr	r3, [sp, #0]
 800d822:	9a03      	ldr	r2, [sp, #12]
 800d824:	1a9e      	subs	r6, r3, r2
 800d826:	2300      	movs	r3, #0
 800d828:	e72b      	b.n	800d682 <_dtoa_r+0x71a>
 800d82a:	9b08      	ldr	r3, [sp, #32]
 800d82c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d82e:	9408      	str	r4, [sp, #32]
 800d830:	1ae3      	subs	r3, r4, r3
 800d832:	441a      	add	r2, r3
 800d834:	9e00      	ldr	r6, [sp, #0]
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	920d      	str	r2, [sp, #52]	@ 0x34
 800d83a:	2400      	movs	r4, #0
 800d83c:	e721      	b.n	800d682 <_dtoa_r+0x71a>
 800d83e:	9c08      	ldr	r4, [sp, #32]
 800d840:	9e00      	ldr	r6, [sp, #0]
 800d842:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d844:	e728      	b.n	800d698 <_dtoa_r+0x730>
 800d846:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d84a:	e751      	b.n	800d6f0 <_dtoa_r+0x788>
 800d84c:	9a08      	ldr	r2, [sp, #32]
 800d84e:	9902      	ldr	r1, [sp, #8]
 800d850:	e750      	b.n	800d6f4 <_dtoa_r+0x78c>
 800d852:	f8cd 8008 	str.w	r8, [sp, #8]
 800d856:	e751      	b.n	800d6fc <_dtoa_r+0x794>
 800d858:	2300      	movs	r3, #0
 800d85a:	e779      	b.n	800d750 <_dtoa_r+0x7e8>
 800d85c:	9b04      	ldr	r3, [sp, #16]
 800d85e:	e777      	b.n	800d750 <_dtoa_r+0x7e8>
 800d860:	2300      	movs	r3, #0
 800d862:	9308      	str	r3, [sp, #32]
 800d864:	e779      	b.n	800d75a <_dtoa_r+0x7f2>
 800d866:	d093      	beq.n	800d790 <_dtoa_r+0x828>
 800d868:	9a00      	ldr	r2, [sp, #0]
 800d86a:	331c      	adds	r3, #28
 800d86c:	441a      	add	r2, r3
 800d86e:	9200      	str	r2, [sp, #0]
 800d870:	9a06      	ldr	r2, [sp, #24]
 800d872:	441a      	add	r2, r3
 800d874:	441e      	add	r6, r3
 800d876:	9206      	str	r2, [sp, #24]
 800d878:	e78a      	b.n	800d790 <_dtoa_r+0x828>
 800d87a:	4603      	mov	r3, r0
 800d87c:	e7f4      	b.n	800d868 <_dtoa_r+0x900>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	46b8      	mov	r8, r7
 800d884:	dc20      	bgt.n	800d8c8 <_dtoa_r+0x960>
 800d886:	469b      	mov	fp, r3
 800d888:	9b07      	ldr	r3, [sp, #28]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	dd1e      	ble.n	800d8cc <_dtoa_r+0x964>
 800d88e:	f1bb 0f00 	cmp.w	fp, #0
 800d892:	f47f adb1 	bne.w	800d3f8 <_dtoa_r+0x490>
 800d896:	4621      	mov	r1, r4
 800d898:	465b      	mov	r3, fp
 800d89a:	2205      	movs	r2, #5
 800d89c:	4648      	mov	r0, r9
 800d89e:	f000 f9df 	bl	800dc60 <__multadd>
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	9802      	ldr	r0, [sp, #8]
 800d8a8:	f000 fbea 	bl	800e080 <__mcmp>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	f77f ada3 	ble.w	800d3f8 <_dtoa_r+0x490>
 800d8b2:	4656      	mov	r6, sl
 800d8b4:	2331      	movs	r3, #49	@ 0x31
 800d8b6:	f806 3b01 	strb.w	r3, [r6], #1
 800d8ba:	f108 0801 	add.w	r8, r8, #1
 800d8be:	e59f      	b.n	800d400 <_dtoa_r+0x498>
 800d8c0:	9c03      	ldr	r4, [sp, #12]
 800d8c2:	46b8      	mov	r8, r7
 800d8c4:	4625      	mov	r5, r4
 800d8c6:	e7f4      	b.n	800d8b2 <_dtoa_r+0x94a>
 800d8c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f000 8101 	beq.w	800dad6 <_dtoa_r+0xb6e>
 800d8d4:	2e00      	cmp	r6, #0
 800d8d6:	dd05      	ble.n	800d8e4 <_dtoa_r+0x97c>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4632      	mov	r2, r6
 800d8dc:	4648      	mov	r0, r9
 800d8de:	f000 fb63 	bl	800dfa8 <__lshift>
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	9b08      	ldr	r3, [sp, #32]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d05c      	beq.n	800d9a4 <_dtoa_r+0xa3c>
 800d8ea:	6869      	ldr	r1, [r5, #4]
 800d8ec:	4648      	mov	r0, r9
 800d8ee:	f000 f955 	bl	800db9c <_Balloc>
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	b928      	cbnz	r0, 800d902 <_dtoa_r+0x99a>
 800d8f6:	4b82      	ldr	r3, [pc, #520]	@ (800db00 <_dtoa_r+0xb98>)
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d8fe:	f7ff bb4a 	b.w	800cf96 <_dtoa_r+0x2e>
 800d902:	692a      	ldr	r2, [r5, #16]
 800d904:	3202      	adds	r2, #2
 800d906:	0092      	lsls	r2, r2, #2
 800d908:	f105 010c 	add.w	r1, r5, #12
 800d90c:	300c      	adds	r0, #12
 800d90e:	f000 ff85 	bl	800e81c <memcpy>
 800d912:	2201      	movs	r2, #1
 800d914:	4631      	mov	r1, r6
 800d916:	4648      	mov	r0, r9
 800d918:	f000 fb46 	bl	800dfa8 <__lshift>
 800d91c:	f10a 0301 	add.w	r3, sl, #1
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	eb0a 030b 	add.w	r3, sl, fp
 800d926:	9308      	str	r3, [sp, #32]
 800d928:	9b04      	ldr	r3, [sp, #16]
 800d92a:	f003 0301 	and.w	r3, r3, #1
 800d92e:	462f      	mov	r7, r5
 800d930:	9306      	str	r3, [sp, #24]
 800d932:	4605      	mov	r5, r0
 800d934:	9b00      	ldr	r3, [sp, #0]
 800d936:	9802      	ldr	r0, [sp, #8]
 800d938:	4621      	mov	r1, r4
 800d93a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d93e:	f7ff fa89 	bl	800ce54 <quorem>
 800d942:	4603      	mov	r3, r0
 800d944:	3330      	adds	r3, #48	@ 0x30
 800d946:	9003      	str	r0, [sp, #12]
 800d948:	4639      	mov	r1, r7
 800d94a:	9802      	ldr	r0, [sp, #8]
 800d94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d94e:	f000 fb97 	bl	800e080 <__mcmp>
 800d952:	462a      	mov	r2, r5
 800d954:	9004      	str	r0, [sp, #16]
 800d956:	4621      	mov	r1, r4
 800d958:	4648      	mov	r0, r9
 800d95a:	f000 fbad 	bl	800e0b8 <__mdiff>
 800d95e:	68c2      	ldr	r2, [r0, #12]
 800d960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d962:	4606      	mov	r6, r0
 800d964:	bb02      	cbnz	r2, 800d9a8 <_dtoa_r+0xa40>
 800d966:	4601      	mov	r1, r0
 800d968:	9802      	ldr	r0, [sp, #8]
 800d96a:	f000 fb89 	bl	800e080 <__mcmp>
 800d96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d970:	4602      	mov	r2, r0
 800d972:	4631      	mov	r1, r6
 800d974:	4648      	mov	r0, r9
 800d976:	920c      	str	r2, [sp, #48]	@ 0x30
 800d978:	9309      	str	r3, [sp, #36]	@ 0x24
 800d97a:	f000 f94f 	bl	800dc1c <_Bfree>
 800d97e:	9b07      	ldr	r3, [sp, #28]
 800d980:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d982:	9e00      	ldr	r6, [sp, #0]
 800d984:	ea42 0103 	orr.w	r1, r2, r3
 800d988:	9b06      	ldr	r3, [sp, #24]
 800d98a:	4319      	orrs	r1, r3
 800d98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98e:	d10d      	bne.n	800d9ac <_dtoa_r+0xa44>
 800d990:	2b39      	cmp	r3, #57	@ 0x39
 800d992:	d027      	beq.n	800d9e4 <_dtoa_r+0xa7c>
 800d994:	9a04      	ldr	r2, [sp, #16]
 800d996:	2a00      	cmp	r2, #0
 800d998:	dd01      	ble.n	800d99e <_dtoa_r+0xa36>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	3331      	adds	r3, #49	@ 0x31
 800d99e:	f88b 3000 	strb.w	r3, [fp]
 800d9a2:	e52e      	b.n	800d402 <_dtoa_r+0x49a>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e7b9      	b.n	800d91c <_dtoa_r+0x9b4>
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	e7e2      	b.n	800d972 <_dtoa_r+0xa0a>
 800d9ac:	9904      	ldr	r1, [sp, #16]
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	db04      	blt.n	800d9bc <_dtoa_r+0xa54>
 800d9b2:	9807      	ldr	r0, [sp, #28]
 800d9b4:	4301      	orrs	r1, r0
 800d9b6:	9806      	ldr	r0, [sp, #24]
 800d9b8:	4301      	orrs	r1, r0
 800d9ba:	d120      	bne.n	800d9fe <_dtoa_r+0xa96>
 800d9bc:	2a00      	cmp	r2, #0
 800d9be:	ddee      	ble.n	800d99e <_dtoa_r+0xa36>
 800d9c0:	9902      	ldr	r1, [sp, #8]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	4648      	mov	r0, r9
 800d9c8:	f000 faee 	bl	800dfa8 <__lshift>
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	9002      	str	r0, [sp, #8]
 800d9d0:	f000 fb56 	bl	800e080 <__mcmp>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	9b00      	ldr	r3, [sp, #0]
 800d9d8:	dc02      	bgt.n	800d9e0 <_dtoa_r+0xa78>
 800d9da:	d1e0      	bne.n	800d99e <_dtoa_r+0xa36>
 800d9dc:	07da      	lsls	r2, r3, #31
 800d9de:	d5de      	bpl.n	800d99e <_dtoa_r+0xa36>
 800d9e0:	2b39      	cmp	r3, #57	@ 0x39
 800d9e2:	d1da      	bne.n	800d99a <_dtoa_r+0xa32>
 800d9e4:	2339      	movs	r3, #57	@ 0x39
 800d9e6:	f88b 3000 	strb.w	r3, [fp]
 800d9ea:	4633      	mov	r3, r6
 800d9ec:	461e      	mov	r6, r3
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d9f4:	2a39      	cmp	r2, #57	@ 0x39
 800d9f6:	d04e      	beq.n	800da96 <_dtoa_r+0xb2e>
 800d9f8:	3201      	adds	r2, #1
 800d9fa:	701a      	strb	r2, [r3, #0]
 800d9fc:	e501      	b.n	800d402 <_dtoa_r+0x49a>
 800d9fe:	2a00      	cmp	r2, #0
 800da00:	dd03      	ble.n	800da0a <_dtoa_r+0xaa2>
 800da02:	2b39      	cmp	r3, #57	@ 0x39
 800da04:	d0ee      	beq.n	800d9e4 <_dtoa_r+0xa7c>
 800da06:	3301      	adds	r3, #1
 800da08:	e7c9      	b.n	800d99e <_dtoa_r+0xa36>
 800da0a:	9a00      	ldr	r2, [sp, #0]
 800da0c:	9908      	ldr	r1, [sp, #32]
 800da0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da12:	428a      	cmp	r2, r1
 800da14:	d028      	beq.n	800da68 <_dtoa_r+0xb00>
 800da16:	9902      	ldr	r1, [sp, #8]
 800da18:	2300      	movs	r3, #0
 800da1a:	220a      	movs	r2, #10
 800da1c:	4648      	mov	r0, r9
 800da1e:	f000 f91f 	bl	800dc60 <__multadd>
 800da22:	42af      	cmp	r7, r5
 800da24:	9002      	str	r0, [sp, #8]
 800da26:	f04f 0300 	mov.w	r3, #0
 800da2a:	f04f 020a 	mov.w	r2, #10
 800da2e:	4639      	mov	r1, r7
 800da30:	4648      	mov	r0, r9
 800da32:	d107      	bne.n	800da44 <_dtoa_r+0xadc>
 800da34:	f000 f914 	bl	800dc60 <__multadd>
 800da38:	4607      	mov	r7, r0
 800da3a:	4605      	mov	r5, r0
 800da3c:	9b00      	ldr	r3, [sp, #0]
 800da3e:	3301      	adds	r3, #1
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	e777      	b.n	800d934 <_dtoa_r+0x9cc>
 800da44:	f000 f90c 	bl	800dc60 <__multadd>
 800da48:	4629      	mov	r1, r5
 800da4a:	4607      	mov	r7, r0
 800da4c:	2300      	movs	r3, #0
 800da4e:	220a      	movs	r2, #10
 800da50:	4648      	mov	r0, r9
 800da52:	f000 f905 	bl	800dc60 <__multadd>
 800da56:	4605      	mov	r5, r0
 800da58:	e7f0      	b.n	800da3c <_dtoa_r+0xad4>
 800da5a:	f1bb 0f00 	cmp.w	fp, #0
 800da5e:	bfcc      	ite	gt
 800da60:	465e      	movgt	r6, fp
 800da62:	2601      	movle	r6, #1
 800da64:	4456      	add	r6, sl
 800da66:	2700      	movs	r7, #0
 800da68:	9902      	ldr	r1, [sp, #8]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2201      	movs	r2, #1
 800da6e:	4648      	mov	r0, r9
 800da70:	f000 fa9a 	bl	800dfa8 <__lshift>
 800da74:	4621      	mov	r1, r4
 800da76:	9002      	str	r0, [sp, #8]
 800da78:	f000 fb02 	bl	800e080 <__mcmp>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	dcb4      	bgt.n	800d9ea <_dtoa_r+0xa82>
 800da80:	d102      	bne.n	800da88 <_dtoa_r+0xb20>
 800da82:	9b00      	ldr	r3, [sp, #0]
 800da84:	07db      	lsls	r3, r3, #31
 800da86:	d4b0      	bmi.n	800d9ea <_dtoa_r+0xa82>
 800da88:	4633      	mov	r3, r6
 800da8a:	461e      	mov	r6, r3
 800da8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da90:	2a30      	cmp	r2, #48	@ 0x30
 800da92:	d0fa      	beq.n	800da8a <_dtoa_r+0xb22>
 800da94:	e4b5      	b.n	800d402 <_dtoa_r+0x49a>
 800da96:	459a      	cmp	sl, r3
 800da98:	d1a8      	bne.n	800d9ec <_dtoa_r+0xa84>
 800da9a:	2331      	movs	r3, #49	@ 0x31
 800da9c:	f108 0801 	add.w	r8, r8, #1
 800daa0:	f88a 3000 	strb.w	r3, [sl]
 800daa4:	e4ad      	b.n	800d402 <_dtoa_r+0x49a>
 800daa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800daa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800db04 <_dtoa_r+0xb9c>
 800daac:	b11b      	cbz	r3, 800dab6 <_dtoa_r+0xb4e>
 800daae:	f10a 0308 	add.w	r3, sl, #8
 800dab2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	4650      	mov	r0, sl
 800dab8:	b017      	add	sp, #92	@ 0x5c
 800daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabe:	9b07      	ldr	r3, [sp, #28]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	f77f ae2e 	ble.w	800d722 <_dtoa_r+0x7ba>
 800dac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dac8:	9308      	str	r3, [sp, #32]
 800daca:	2001      	movs	r0, #1
 800dacc:	e64d      	b.n	800d76a <_dtoa_r+0x802>
 800dace:	f1bb 0f00 	cmp.w	fp, #0
 800dad2:	f77f aed9 	ble.w	800d888 <_dtoa_r+0x920>
 800dad6:	4656      	mov	r6, sl
 800dad8:	9802      	ldr	r0, [sp, #8]
 800dada:	4621      	mov	r1, r4
 800dadc:	f7ff f9ba 	bl	800ce54 <quorem>
 800dae0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dae4:	f806 3b01 	strb.w	r3, [r6], #1
 800dae8:	eba6 020a 	sub.w	r2, r6, sl
 800daec:	4593      	cmp	fp, r2
 800daee:	ddb4      	ble.n	800da5a <_dtoa_r+0xaf2>
 800daf0:	9902      	ldr	r1, [sp, #8]
 800daf2:	2300      	movs	r3, #0
 800daf4:	220a      	movs	r2, #10
 800daf6:	4648      	mov	r0, r9
 800daf8:	f000 f8b2 	bl	800dc60 <__multadd>
 800dafc:	9002      	str	r0, [sp, #8]
 800dafe:	e7eb      	b.n	800dad8 <_dtoa_r+0xb70>
 800db00:	0800eb68 	.word	0x0800eb68
 800db04:	0800eaec 	.word	0x0800eaec

0800db08 <_free_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4605      	mov	r5, r0
 800db0c:	2900      	cmp	r1, #0
 800db0e:	d041      	beq.n	800db94 <_free_r+0x8c>
 800db10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db14:	1f0c      	subs	r4, r1, #4
 800db16:	2b00      	cmp	r3, #0
 800db18:	bfb8      	it	lt
 800db1a:	18e4      	addlt	r4, r4, r3
 800db1c:	f7fe fb8a 	bl	800c234 <__malloc_lock>
 800db20:	4a1d      	ldr	r2, [pc, #116]	@ (800db98 <_free_r+0x90>)
 800db22:	6813      	ldr	r3, [r2, #0]
 800db24:	b933      	cbnz	r3, 800db34 <_free_r+0x2c>
 800db26:	6063      	str	r3, [r4, #4]
 800db28:	6014      	str	r4, [r2, #0]
 800db2a:	4628      	mov	r0, r5
 800db2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db30:	f7fe bb86 	b.w	800c240 <__malloc_unlock>
 800db34:	42a3      	cmp	r3, r4
 800db36:	d908      	bls.n	800db4a <_free_r+0x42>
 800db38:	6820      	ldr	r0, [r4, #0]
 800db3a:	1821      	adds	r1, r4, r0
 800db3c:	428b      	cmp	r3, r1
 800db3e:	bf01      	itttt	eq
 800db40:	6819      	ldreq	r1, [r3, #0]
 800db42:	685b      	ldreq	r3, [r3, #4]
 800db44:	1809      	addeq	r1, r1, r0
 800db46:	6021      	streq	r1, [r4, #0]
 800db48:	e7ed      	b.n	800db26 <_free_r+0x1e>
 800db4a:	461a      	mov	r2, r3
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	b10b      	cbz	r3, 800db54 <_free_r+0x4c>
 800db50:	42a3      	cmp	r3, r4
 800db52:	d9fa      	bls.n	800db4a <_free_r+0x42>
 800db54:	6811      	ldr	r1, [r2, #0]
 800db56:	1850      	adds	r0, r2, r1
 800db58:	42a0      	cmp	r0, r4
 800db5a:	d10b      	bne.n	800db74 <_free_r+0x6c>
 800db5c:	6820      	ldr	r0, [r4, #0]
 800db5e:	4401      	add	r1, r0
 800db60:	1850      	adds	r0, r2, r1
 800db62:	4283      	cmp	r3, r0
 800db64:	6011      	str	r1, [r2, #0]
 800db66:	d1e0      	bne.n	800db2a <_free_r+0x22>
 800db68:	6818      	ldr	r0, [r3, #0]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	6053      	str	r3, [r2, #4]
 800db6e:	4408      	add	r0, r1
 800db70:	6010      	str	r0, [r2, #0]
 800db72:	e7da      	b.n	800db2a <_free_r+0x22>
 800db74:	d902      	bls.n	800db7c <_free_r+0x74>
 800db76:	230c      	movs	r3, #12
 800db78:	602b      	str	r3, [r5, #0]
 800db7a:	e7d6      	b.n	800db2a <_free_r+0x22>
 800db7c:	6820      	ldr	r0, [r4, #0]
 800db7e:	1821      	adds	r1, r4, r0
 800db80:	428b      	cmp	r3, r1
 800db82:	bf04      	itt	eq
 800db84:	6819      	ldreq	r1, [r3, #0]
 800db86:	685b      	ldreq	r3, [r3, #4]
 800db88:	6063      	str	r3, [r4, #4]
 800db8a:	bf04      	itt	eq
 800db8c:	1809      	addeq	r1, r1, r0
 800db8e:	6021      	streq	r1, [r4, #0]
 800db90:	6054      	str	r4, [r2, #4]
 800db92:	e7ca      	b.n	800db2a <_free_r+0x22>
 800db94:	bd38      	pop	{r3, r4, r5, pc}
 800db96:	bf00      	nop
 800db98:	2000217c 	.word	0x2000217c

0800db9c <_Balloc>:
 800db9c:	b570      	push	{r4, r5, r6, lr}
 800db9e:	69c6      	ldr	r6, [r0, #28]
 800dba0:	4604      	mov	r4, r0
 800dba2:	460d      	mov	r5, r1
 800dba4:	b976      	cbnz	r6, 800dbc4 <_Balloc+0x28>
 800dba6:	2010      	movs	r0, #16
 800dba8:	f7fe fa9a 	bl	800c0e0 <malloc>
 800dbac:	4602      	mov	r2, r0
 800dbae:	61e0      	str	r0, [r4, #28]
 800dbb0:	b920      	cbnz	r0, 800dbbc <_Balloc+0x20>
 800dbb2:	4b18      	ldr	r3, [pc, #96]	@ (800dc14 <_Balloc+0x78>)
 800dbb4:	4818      	ldr	r0, [pc, #96]	@ (800dc18 <_Balloc+0x7c>)
 800dbb6:	216b      	movs	r1, #107	@ 0x6b
 800dbb8:	f7fe fa74 	bl	800c0a4 <__assert_func>
 800dbbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbc0:	6006      	str	r6, [r0, #0]
 800dbc2:	60c6      	str	r6, [r0, #12]
 800dbc4:	69e6      	ldr	r6, [r4, #28]
 800dbc6:	68f3      	ldr	r3, [r6, #12]
 800dbc8:	b183      	cbz	r3, 800dbec <_Balloc+0x50>
 800dbca:	69e3      	ldr	r3, [r4, #28]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbd2:	b9b8      	cbnz	r0, 800dc04 <_Balloc+0x68>
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	fa01 f605 	lsl.w	r6, r1, r5
 800dbda:	1d72      	adds	r2, r6, #5
 800dbdc:	0092      	lsls	r2, r2, #2
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f000 fe2a 	bl	800e838 <_calloc_r>
 800dbe4:	b160      	cbz	r0, 800dc00 <_Balloc+0x64>
 800dbe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbea:	e00e      	b.n	800dc0a <_Balloc+0x6e>
 800dbec:	2221      	movs	r2, #33	@ 0x21
 800dbee:	2104      	movs	r1, #4
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fe21 	bl	800e838 <_calloc_r>
 800dbf6:	69e3      	ldr	r3, [r4, #28]
 800dbf8:	60f0      	str	r0, [r6, #12]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1e4      	bne.n	800dbca <_Balloc+0x2e>
 800dc00:	2000      	movs	r0, #0
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	6802      	ldr	r2, [r0, #0]
 800dc06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc10:	e7f7      	b.n	800dc02 <_Balloc+0x66>
 800dc12:	bf00      	nop
 800dc14:	0800eaf9 	.word	0x0800eaf9
 800dc18:	0800eb79 	.word	0x0800eb79

0800dc1c <_Bfree>:
 800dc1c:	b570      	push	{r4, r5, r6, lr}
 800dc1e:	69c6      	ldr	r6, [r0, #28]
 800dc20:	4605      	mov	r5, r0
 800dc22:	460c      	mov	r4, r1
 800dc24:	b976      	cbnz	r6, 800dc44 <_Bfree+0x28>
 800dc26:	2010      	movs	r0, #16
 800dc28:	f7fe fa5a 	bl	800c0e0 <malloc>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	61e8      	str	r0, [r5, #28]
 800dc30:	b920      	cbnz	r0, 800dc3c <_Bfree+0x20>
 800dc32:	4b09      	ldr	r3, [pc, #36]	@ (800dc58 <_Bfree+0x3c>)
 800dc34:	4809      	ldr	r0, [pc, #36]	@ (800dc5c <_Bfree+0x40>)
 800dc36:	218f      	movs	r1, #143	@ 0x8f
 800dc38:	f7fe fa34 	bl	800c0a4 <__assert_func>
 800dc3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc40:	6006      	str	r6, [r0, #0]
 800dc42:	60c6      	str	r6, [r0, #12]
 800dc44:	b13c      	cbz	r4, 800dc56 <_Bfree+0x3a>
 800dc46:	69eb      	ldr	r3, [r5, #28]
 800dc48:	6862      	ldr	r2, [r4, #4]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc50:	6021      	str	r1, [r4, #0]
 800dc52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	0800eaf9 	.word	0x0800eaf9
 800dc5c:	0800eb79 	.word	0x0800eb79

0800dc60 <__multadd>:
 800dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	690d      	ldr	r5, [r1, #16]
 800dc66:	4607      	mov	r7, r0
 800dc68:	460c      	mov	r4, r1
 800dc6a:	461e      	mov	r6, r3
 800dc6c:	f101 0c14 	add.w	ip, r1, #20
 800dc70:	2000      	movs	r0, #0
 800dc72:	f8dc 3000 	ldr.w	r3, [ip]
 800dc76:	b299      	uxth	r1, r3
 800dc78:	fb02 6101 	mla	r1, r2, r1, r6
 800dc7c:	0c1e      	lsrs	r6, r3, #16
 800dc7e:	0c0b      	lsrs	r3, r1, #16
 800dc80:	fb02 3306 	mla	r3, r2, r6, r3
 800dc84:	b289      	uxth	r1, r1
 800dc86:	3001      	adds	r0, #1
 800dc88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc8c:	4285      	cmp	r5, r0
 800dc8e:	f84c 1b04 	str.w	r1, [ip], #4
 800dc92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc96:	dcec      	bgt.n	800dc72 <__multadd+0x12>
 800dc98:	b30e      	cbz	r6, 800dcde <__multadd+0x7e>
 800dc9a:	68a3      	ldr	r3, [r4, #8]
 800dc9c:	42ab      	cmp	r3, r5
 800dc9e:	dc19      	bgt.n	800dcd4 <__multadd+0x74>
 800dca0:	6861      	ldr	r1, [r4, #4]
 800dca2:	4638      	mov	r0, r7
 800dca4:	3101      	adds	r1, #1
 800dca6:	f7ff ff79 	bl	800db9c <_Balloc>
 800dcaa:	4680      	mov	r8, r0
 800dcac:	b928      	cbnz	r0, 800dcba <__multadd+0x5a>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dce4 <__multadd+0x84>)
 800dcb2:	480d      	ldr	r0, [pc, #52]	@ (800dce8 <__multadd+0x88>)
 800dcb4:	21ba      	movs	r1, #186	@ 0xba
 800dcb6:	f7fe f9f5 	bl	800c0a4 <__assert_func>
 800dcba:	6922      	ldr	r2, [r4, #16]
 800dcbc:	3202      	adds	r2, #2
 800dcbe:	f104 010c 	add.w	r1, r4, #12
 800dcc2:	0092      	lsls	r2, r2, #2
 800dcc4:	300c      	adds	r0, #12
 800dcc6:	f000 fda9 	bl	800e81c <memcpy>
 800dcca:	4621      	mov	r1, r4
 800dccc:	4638      	mov	r0, r7
 800dcce:	f7ff ffa5 	bl	800dc1c <_Bfree>
 800dcd2:	4644      	mov	r4, r8
 800dcd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcd8:	3501      	adds	r5, #1
 800dcda:	615e      	str	r6, [r3, #20]
 800dcdc:	6125      	str	r5, [r4, #16]
 800dcde:	4620      	mov	r0, r4
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce4:	0800eb68 	.word	0x0800eb68
 800dce8:	0800eb79 	.word	0x0800eb79

0800dcec <__hi0bits>:
 800dcec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	bf36      	itet	cc
 800dcf4:	0403      	lslcc	r3, r0, #16
 800dcf6:	2000      	movcs	r0, #0
 800dcf8:	2010      	movcc	r0, #16
 800dcfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dcfe:	bf3c      	itt	cc
 800dd00:	021b      	lslcc	r3, r3, #8
 800dd02:	3008      	addcc	r0, #8
 800dd04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd08:	bf3c      	itt	cc
 800dd0a:	011b      	lslcc	r3, r3, #4
 800dd0c:	3004      	addcc	r0, #4
 800dd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd12:	bf3c      	itt	cc
 800dd14:	009b      	lslcc	r3, r3, #2
 800dd16:	3002      	addcc	r0, #2
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	db05      	blt.n	800dd28 <__hi0bits+0x3c>
 800dd1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd20:	f100 0001 	add.w	r0, r0, #1
 800dd24:	bf08      	it	eq
 800dd26:	2020      	moveq	r0, #32
 800dd28:	4770      	bx	lr

0800dd2a <__lo0bits>:
 800dd2a:	6803      	ldr	r3, [r0, #0]
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	f013 0007 	ands.w	r0, r3, #7
 800dd32:	d00b      	beq.n	800dd4c <__lo0bits+0x22>
 800dd34:	07d9      	lsls	r1, r3, #31
 800dd36:	d421      	bmi.n	800dd7c <__lo0bits+0x52>
 800dd38:	0798      	lsls	r0, r3, #30
 800dd3a:	bf49      	itett	mi
 800dd3c:	085b      	lsrmi	r3, r3, #1
 800dd3e:	089b      	lsrpl	r3, r3, #2
 800dd40:	2001      	movmi	r0, #1
 800dd42:	6013      	strmi	r3, [r2, #0]
 800dd44:	bf5c      	itt	pl
 800dd46:	6013      	strpl	r3, [r2, #0]
 800dd48:	2002      	movpl	r0, #2
 800dd4a:	4770      	bx	lr
 800dd4c:	b299      	uxth	r1, r3
 800dd4e:	b909      	cbnz	r1, 800dd54 <__lo0bits+0x2a>
 800dd50:	0c1b      	lsrs	r3, r3, #16
 800dd52:	2010      	movs	r0, #16
 800dd54:	b2d9      	uxtb	r1, r3
 800dd56:	b909      	cbnz	r1, 800dd5c <__lo0bits+0x32>
 800dd58:	3008      	adds	r0, #8
 800dd5a:	0a1b      	lsrs	r3, r3, #8
 800dd5c:	0719      	lsls	r1, r3, #28
 800dd5e:	bf04      	itt	eq
 800dd60:	091b      	lsreq	r3, r3, #4
 800dd62:	3004      	addeq	r0, #4
 800dd64:	0799      	lsls	r1, r3, #30
 800dd66:	bf04      	itt	eq
 800dd68:	089b      	lsreq	r3, r3, #2
 800dd6a:	3002      	addeq	r0, #2
 800dd6c:	07d9      	lsls	r1, r3, #31
 800dd6e:	d403      	bmi.n	800dd78 <__lo0bits+0x4e>
 800dd70:	085b      	lsrs	r3, r3, #1
 800dd72:	f100 0001 	add.w	r0, r0, #1
 800dd76:	d003      	beq.n	800dd80 <__lo0bits+0x56>
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	4770      	bx	lr
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	4770      	bx	lr
 800dd80:	2020      	movs	r0, #32
 800dd82:	4770      	bx	lr

0800dd84 <__i2b>:
 800dd84:	b510      	push	{r4, lr}
 800dd86:	460c      	mov	r4, r1
 800dd88:	2101      	movs	r1, #1
 800dd8a:	f7ff ff07 	bl	800db9c <_Balloc>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	b928      	cbnz	r0, 800dd9e <__i2b+0x1a>
 800dd92:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <__i2b+0x24>)
 800dd94:	4805      	ldr	r0, [pc, #20]	@ (800ddac <__i2b+0x28>)
 800dd96:	f240 1145 	movw	r1, #325	@ 0x145
 800dd9a:	f7fe f983 	bl	800c0a4 <__assert_func>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	6144      	str	r4, [r0, #20]
 800dda2:	6103      	str	r3, [r0, #16]
 800dda4:	bd10      	pop	{r4, pc}
 800dda6:	bf00      	nop
 800dda8:	0800eb68 	.word	0x0800eb68
 800ddac:	0800eb79 	.word	0x0800eb79

0800ddb0 <__multiply>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	4617      	mov	r7, r2
 800ddb6:	690a      	ldr	r2, [r1, #16]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	bfa8      	it	ge
 800ddbe:	463b      	movge	r3, r7
 800ddc0:	4689      	mov	r9, r1
 800ddc2:	bfa4      	itt	ge
 800ddc4:	460f      	movge	r7, r1
 800ddc6:	4699      	movge	r9, r3
 800ddc8:	693d      	ldr	r5, [r7, #16]
 800ddca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	eb05 060a 	add.w	r6, r5, sl
 800ddd6:	42b3      	cmp	r3, r6
 800ddd8:	b085      	sub	sp, #20
 800ddda:	bfb8      	it	lt
 800dddc:	3101      	addlt	r1, #1
 800ddde:	f7ff fedd 	bl	800db9c <_Balloc>
 800dde2:	b930      	cbnz	r0, 800ddf2 <__multiply+0x42>
 800dde4:	4602      	mov	r2, r0
 800dde6:	4b41      	ldr	r3, [pc, #260]	@ (800deec <__multiply+0x13c>)
 800dde8:	4841      	ldr	r0, [pc, #260]	@ (800def0 <__multiply+0x140>)
 800ddea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ddee:	f7fe f959 	bl	800c0a4 <__assert_func>
 800ddf2:	f100 0414 	add.w	r4, r0, #20
 800ddf6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ddfa:	4623      	mov	r3, r4
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	4573      	cmp	r3, lr
 800de00:	d320      	bcc.n	800de44 <__multiply+0x94>
 800de02:	f107 0814 	add.w	r8, r7, #20
 800de06:	f109 0114 	add.w	r1, r9, #20
 800de0a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800de0e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	1beb      	subs	r3, r5, r7
 800de16:	3b15      	subs	r3, #21
 800de18:	f023 0303 	bic.w	r3, r3, #3
 800de1c:	3304      	adds	r3, #4
 800de1e:	3715      	adds	r7, #21
 800de20:	42bd      	cmp	r5, r7
 800de22:	bf38      	it	cc
 800de24:	2304      	movcc	r3, #4
 800de26:	9301      	str	r3, [sp, #4]
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	9103      	str	r1, [sp, #12]
 800de2c:	428b      	cmp	r3, r1
 800de2e:	d80c      	bhi.n	800de4a <__multiply+0x9a>
 800de30:	2e00      	cmp	r6, #0
 800de32:	dd03      	ble.n	800de3c <__multiply+0x8c>
 800de34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d055      	beq.n	800dee8 <__multiply+0x138>
 800de3c:	6106      	str	r6, [r0, #16]
 800de3e:	b005      	add	sp, #20
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de44:	f843 2b04 	str.w	r2, [r3], #4
 800de48:	e7d9      	b.n	800ddfe <__multiply+0x4e>
 800de4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800de4e:	f1ba 0f00 	cmp.w	sl, #0
 800de52:	d01f      	beq.n	800de94 <__multiply+0xe4>
 800de54:	46c4      	mov	ip, r8
 800de56:	46a1      	mov	r9, r4
 800de58:	2700      	movs	r7, #0
 800de5a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de5e:	f8d9 3000 	ldr.w	r3, [r9]
 800de62:	fa1f fb82 	uxth.w	fp, r2
 800de66:	b29b      	uxth	r3, r3
 800de68:	fb0a 330b 	mla	r3, sl, fp, r3
 800de6c:	443b      	add	r3, r7
 800de6e:	f8d9 7000 	ldr.w	r7, [r9]
 800de72:	0c12      	lsrs	r2, r2, #16
 800de74:	0c3f      	lsrs	r7, r7, #16
 800de76:	fb0a 7202 	mla	r2, sl, r2, r7
 800de7a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800de7e:	b29b      	uxth	r3, r3
 800de80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de84:	4565      	cmp	r5, ip
 800de86:	f849 3b04 	str.w	r3, [r9], #4
 800de8a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800de8e:	d8e4      	bhi.n	800de5a <__multiply+0xaa>
 800de90:	9b01      	ldr	r3, [sp, #4]
 800de92:	50e7      	str	r7, [r4, r3]
 800de94:	9b03      	ldr	r3, [sp, #12]
 800de96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de9a:	3104      	adds	r1, #4
 800de9c:	f1b9 0f00 	cmp.w	r9, #0
 800dea0:	d020      	beq.n	800dee4 <__multiply+0x134>
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	4647      	mov	r7, r8
 800dea6:	46a4      	mov	ip, r4
 800dea8:	f04f 0a00 	mov.w	sl, #0
 800deac:	f8b7 b000 	ldrh.w	fp, [r7]
 800deb0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800deb4:	fb09 220b 	mla	r2, r9, fp, r2
 800deb8:	4452      	add	r2, sl
 800deba:	b29b      	uxth	r3, r3
 800debc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dec0:	f84c 3b04 	str.w	r3, [ip], #4
 800dec4:	f857 3b04 	ldr.w	r3, [r7], #4
 800dec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800decc:	f8bc 3000 	ldrh.w	r3, [ip]
 800ded0:	fb09 330a 	mla	r3, r9, sl, r3
 800ded4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ded8:	42bd      	cmp	r5, r7
 800deda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dede:	d8e5      	bhi.n	800deac <__multiply+0xfc>
 800dee0:	9a01      	ldr	r2, [sp, #4]
 800dee2:	50a3      	str	r3, [r4, r2]
 800dee4:	3404      	adds	r4, #4
 800dee6:	e79f      	b.n	800de28 <__multiply+0x78>
 800dee8:	3e01      	subs	r6, #1
 800deea:	e7a1      	b.n	800de30 <__multiply+0x80>
 800deec:	0800eb68 	.word	0x0800eb68
 800def0:	0800eb79 	.word	0x0800eb79

0800def4 <__pow5mult>:
 800def4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def8:	4615      	mov	r5, r2
 800defa:	f012 0203 	ands.w	r2, r2, #3
 800defe:	4607      	mov	r7, r0
 800df00:	460e      	mov	r6, r1
 800df02:	d007      	beq.n	800df14 <__pow5mult+0x20>
 800df04:	4c25      	ldr	r4, [pc, #148]	@ (800df9c <__pow5mult+0xa8>)
 800df06:	3a01      	subs	r2, #1
 800df08:	2300      	movs	r3, #0
 800df0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df0e:	f7ff fea7 	bl	800dc60 <__multadd>
 800df12:	4606      	mov	r6, r0
 800df14:	10ad      	asrs	r5, r5, #2
 800df16:	d03d      	beq.n	800df94 <__pow5mult+0xa0>
 800df18:	69fc      	ldr	r4, [r7, #28]
 800df1a:	b97c      	cbnz	r4, 800df3c <__pow5mult+0x48>
 800df1c:	2010      	movs	r0, #16
 800df1e:	f7fe f8df 	bl	800c0e0 <malloc>
 800df22:	4602      	mov	r2, r0
 800df24:	61f8      	str	r0, [r7, #28]
 800df26:	b928      	cbnz	r0, 800df34 <__pow5mult+0x40>
 800df28:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa0 <__pow5mult+0xac>)
 800df2a:	481e      	ldr	r0, [pc, #120]	@ (800dfa4 <__pow5mult+0xb0>)
 800df2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800df30:	f7fe f8b8 	bl	800c0a4 <__assert_func>
 800df34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df38:	6004      	str	r4, [r0, #0]
 800df3a:	60c4      	str	r4, [r0, #12]
 800df3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800df40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df44:	b94c      	cbnz	r4, 800df5a <__pow5mult+0x66>
 800df46:	f240 2171 	movw	r1, #625	@ 0x271
 800df4a:	4638      	mov	r0, r7
 800df4c:	f7ff ff1a 	bl	800dd84 <__i2b>
 800df50:	2300      	movs	r3, #0
 800df52:	f8c8 0008 	str.w	r0, [r8, #8]
 800df56:	4604      	mov	r4, r0
 800df58:	6003      	str	r3, [r0, #0]
 800df5a:	f04f 0900 	mov.w	r9, #0
 800df5e:	07eb      	lsls	r3, r5, #31
 800df60:	d50a      	bpl.n	800df78 <__pow5mult+0x84>
 800df62:	4631      	mov	r1, r6
 800df64:	4622      	mov	r2, r4
 800df66:	4638      	mov	r0, r7
 800df68:	f7ff ff22 	bl	800ddb0 <__multiply>
 800df6c:	4631      	mov	r1, r6
 800df6e:	4680      	mov	r8, r0
 800df70:	4638      	mov	r0, r7
 800df72:	f7ff fe53 	bl	800dc1c <_Bfree>
 800df76:	4646      	mov	r6, r8
 800df78:	106d      	asrs	r5, r5, #1
 800df7a:	d00b      	beq.n	800df94 <__pow5mult+0xa0>
 800df7c:	6820      	ldr	r0, [r4, #0]
 800df7e:	b938      	cbnz	r0, 800df90 <__pow5mult+0x9c>
 800df80:	4622      	mov	r2, r4
 800df82:	4621      	mov	r1, r4
 800df84:	4638      	mov	r0, r7
 800df86:	f7ff ff13 	bl	800ddb0 <__multiply>
 800df8a:	6020      	str	r0, [r4, #0]
 800df8c:	f8c0 9000 	str.w	r9, [r0]
 800df90:	4604      	mov	r4, r0
 800df92:	e7e4      	b.n	800df5e <__pow5mult+0x6a>
 800df94:	4630      	mov	r0, r6
 800df96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9a:	bf00      	nop
 800df9c:	0800ebf0 	.word	0x0800ebf0
 800dfa0:	0800eaf9 	.word	0x0800eaf9
 800dfa4:	0800eb79 	.word	0x0800eb79

0800dfa8 <__lshift>:
 800dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfac:	460c      	mov	r4, r1
 800dfae:	6849      	ldr	r1, [r1, #4]
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dfb6:	68a3      	ldr	r3, [r4, #8]
 800dfb8:	4607      	mov	r7, r0
 800dfba:	4691      	mov	r9, r2
 800dfbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfc0:	f108 0601 	add.w	r6, r8, #1
 800dfc4:	42b3      	cmp	r3, r6
 800dfc6:	db0b      	blt.n	800dfe0 <__lshift+0x38>
 800dfc8:	4638      	mov	r0, r7
 800dfca:	f7ff fde7 	bl	800db9c <_Balloc>
 800dfce:	4605      	mov	r5, r0
 800dfd0:	b948      	cbnz	r0, 800dfe6 <__lshift+0x3e>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	4b28      	ldr	r3, [pc, #160]	@ (800e078 <__lshift+0xd0>)
 800dfd6:	4829      	ldr	r0, [pc, #164]	@ (800e07c <__lshift+0xd4>)
 800dfd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dfdc:	f7fe f862 	bl	800c0a4 <__assert_func>
 800dfe0:	3101      	adds	r1, #1
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	e7ee      	b.n	800dfc4 <__lshift+0x1c>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f100 0114 	add.w	r1, r0, #20
 800dfec:	f100 0210 	add.w	r2, r0, #16
 800dff0:	4618      	mov	r0, r3
 800dff2:	4553      	cmp	r3, sl
 800dff4:	db33      	blt.n	800e05e <__lshift+0xb6>
 800dff6:	6920      	ldr	r0, [r4, #16]
 800dff8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dffc:	f104 0314 	add.w	r3, r4, #20
 800e000:	f019 091f 	ands.w	r9, r9, #31
 800e004:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e008:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e00c:	d02b      	beq.n	800e066 <__lshift+0xbe>
 800e00e:	f1c9 0e20 	rsb	lr, r9, #32
 800e012:	468a      	mov	sl, r1
 800e014:	2200      	movs	r2, #0
 800e016:	6818      	ldr	r0, [r3, #0]
 800e018:	fa00 f009 	lsl.w	r0, r0, r9
 800e01c:	4310      	orrs	r0, r2
 800e01e:	f84a 0b04 	str.w	r0, [sl], #4
 800e022:	f853 2b04 	ldr.w	r2, [r3], #4
 800e026:	459c      	cmp	ip, r3
 800e028:	fa22 f20e 	lsr.w	r2, r2, lr
 800e02c:	d8f3      	bhi.n	800e016 <__lshift+0x6e>
 800e02e:	ebac 0304 	sub.w	r3, ip, r4
 800e032:	3b15      	subs	r3, #21
 800e034:	f023 0303 	bic.w	r3, r3, #3
 800e038:	3304      	adds	r3, #4
 800e03a:	f104 0015 	add.w	r0, r4, #21
 800e03e:	4560      	cmp	r0, ip
 800e040:	bf88      	it	hi
 800e042:	2304      	movhi	r3, #4
 800e044:	50ca      	str	r2, [r1, r3]
 800e046:	b10a      	cbz	r2, 800e04c <__lshift+0xa4>
 800e048:	f108 0602 	add.w	r6, r8, #2
 800e04c:	3e01      	subs	r6, #1
 800e04e:	4638      	mov	r0, r7
 800e050:	612e      	str	r6, [r5, #16]
 800e052:	4621      	mov	r1, r4
 800e054:	f7ff fde2 	bl	800dc1c <_Bfree>
 800e058:	4628      	mov	r0, r5
 800e05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e05e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e062:	3301      	adds	r3, #1
 800e064:	e7c5      	b.n	800dff2 <__lshift+0x4a>
 800e066:	3904      	subs	r1, #4
 800e068:	f853 2b04 	ldr.w	r2, [r3], #4
 800e06c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e070:	459c      	cmp	ip, r3
 800e072:	d8f9      	bhi.n	800e068 <__lshift+0xc0>
 800e074:	e7ea      	b.n	800e04c <__lshift+0xa4>
 800e076:	bf00      	nop
 800e078:	0800eb68 	.word	0x0800eb68
 800e07c:	0800eb79 	.word	0x0800eb79

0800e080 <__mcmp>:
 800e080:	690a      	ldr	r2, [r1, #16]
 800e082:	4603      	mov	r3, r0
 800e084:	6900      	ldr	r0, [r0, #16]
 800e086:	1a80      	subs	r0, r0, r2
 800e088:	b530      	push	{r4, r5, lr}
 800e08a:	d10e      	bne.n	800e0aa <__mcmp+0x2a>
 800e08c:	3314      	adds	r3, #20
 800e08e:	3114      	adds	r1, #20
 800e090:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e094:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e098:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e09c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0a0:	4295      	cmp	r5, r2
 800e0a2:	d003      	beq.n	800e0ac <__mcmp+0x2c>
 800e0a4:	d205      	bcs.n	800e0b2 <__mcmp+0x32>
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0aa:	bd30      	pop	{r4, r5, pc}
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	d3f3      	bcc.n	800e098 <__mcmp+0x18>
 800e0b0:	e7fb      	b.n	800e0aa <__mcmp+0x2a>
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	e7f9      	b.n	800e0aa <__mcmp+0x2a>
	...

0800e0b8 <__mdiff>:
 800e0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	4689      	mov	r9, r1
 800e0be:	4606      	mov	r6, r0
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	4648      	mov	r0, r9
 800e0c4:	4614      	mov	r4, r2
 800e0c6:	f7ff ffdb 	bl	800e080 <__mcmp>
 800e0ca:	1e05      	subs	r5, r0, #0
 800e0cc:	d112      	bne.n	800e0f4 <__mdiff+0x3c>
 800e0ce:	4629      	mov	r1, r5
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f7ff fd63 	bl	800db9c <_Balloc>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	b928      	cbnz	r0, 800e0e6 <__mdiff+0x2e>
 800e0da:	4b3f      	ldr	r3, [pc, #252]	@ (800e1d8 <__mdiff+0x120>)
 800e0dc:	f240 2137 	movw	r1, #567	@ 0x237
 800e0e0:	483e      	ldr	r0, [pc, #248]	@ (800e1dc <__mdiff+0x124>)
 800e0e2:	f7fd ffdf 	bl	800c0a4 <__assert_func>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	b003      	add	sp, #12
 800e0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f4:	bfbc      	itt	lt
 800e0f6:	464b      	movlt	r3, r9
 800e0f8:	46a1      	movlt	r9, r4
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e100:	bfba      	itte	lt
 800e102:	461c      	movlt	r4, r3
 800e104:	2501      	movlt	r5, #1
 800e106:	2500      	movge	r5, #0
 800e108:	f7ff fd48 	bl	800db9c <_Balloc>
 800e10c:	4602      	mov	r2, r0
 800e10e:	b918      	cbnz	r0, 800e118 <__mdiff+0x60>
 800e110:	4b31      	ldr	r3, [pc, #196]	@ (800e1d8 <__mdiff+0x120>)
 800e112:	f240 2145 	movw	r1, #581	@ 0x245
 800e116:	e7e3      	b.n	800e0e0 <__mdiff+0x28>
 800e118:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e11c:	6926      	ldr	r6, [r4, #16]
 800e11e:	60c5      	str	r5, [r0, #12]
 800e120:	f109 0310 	add.w	r3, r9, #16
 800e124:	f109 0514 	add.w	r5, r9, #20
 800e128:	f104 0e14 	add.w	lr, r4, #20
 800e12c:	f100 0b14 	add.w	fp, r0, #20
 800e130:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e134:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	46d9      	mov	r9, fp
 800e13c:	f04f 0c00 	mov.w	ip, #0
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e146:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	fa1f f38a 	uxth.w	r3, sl
 800e150:	4619      	mov	r1, r3
 800e152:	b283      	uxth	r3, r0
 800e154:	1acb      	subs	r3, r1, r3
 800e156:	0c00      	lsrs	r0, r0, #16
 800e158:	4463      	add	r3, ip
 800e15a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e15e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e162:	b29b      	uxth	r3, r3
 800e164:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e168:	4576      	cmp	r6, lr
 800e16a:	f849 3b04 	str.w	r3, [r9], #4
 800e16e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e172:	d8e5      	bhi.n	800e140 <__mdiff+0x88>
 800e174:	1b33      	subs	r3, r6, r4
 800e176:	3b15      	subs	r3, #21
 800e178:	f023 0303 	bic.w	r3, r3, #3
 800e17c:	3415      	adds	r4, #21
 800e17e:	3304      	adds	r3, #4
 800e180:	42a6      	cmp	r6, r4
 800e182:	bf38      	it	cc
 800e184:	2304      	movcc	r3, #4
 800e186:	441d      	add	r5, r3
 800e188:	445b      	add	r3, fp
 800e18a:	461e      	mov	r6, r3
 800e18c:	462c      	mov	r4, r5
 800e18e:	4544      	cmp	r4, r8
 800e190:	d30e      	bcc.n	800e1b0 <__mdiff+0xf8>
 800e192:	f108 0103 	add.w	r1, r8, #3
 800e196:	1b49      	subs	r1, r1, r5
 800e198:	f021 0103 	bic.w	r1, r1, #3
 800e19c:	3d03      	subs	r5, #3
 800e19e:	45a8      	cmp	r8, r5
 800e1a0:	bf38      	it	cc
 800e1a2:	2100      	movcc	r1, #0
 800e1a4:	440b      	add	r3, r1
 800e1a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1aa:	b191      	cbz	r1, 800e1d2 <__mdiff+0x11a>
 800e1ac:	6117      	str	r7, [r2, #16]
 800e1ae:	e79d      	b.n	800e0ec <__mdiff+0x34>
 800e1b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e1b4:	46e6      	mov	lr, ip
 800e1b6:	0c08      	lsrs	r0, r1, #16
 800e1b8:	fa1c fc81 	uxtah	ip, ip, r1
 800e1bc:	4471      	add	r1, lr
 800e1be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e1c2:	b289      	uxth	r1, r1
 800e1c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e1c8:	f846 1b04 	str.w	r1, [r6], #4
 800e1cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1d0:	e7dd      	b.n	800e18e <__mdiff+0xd6>
 800e1d2:	3f01      	subs	r7, #1
 800e1d4:	e7e7      	b.n	800e1a6 <__mdiff+0xee>
 800e1d6:	bf00      	nop
 800e1d8:	0800eb68 	.word	0x0800eb68
 800e1dc:	0800eb79 	.word	0x0800eb79

0800e1e0 <__d2b>:
 800e1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	460f      	mov	r7, r1
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	ec59 8b10 	vmov	r8, r9, d0
 800e1ec:	4616      	mov	r6, r2
 800e1ee:	f7ff fcd5 	bl	800db9c <_Balloc>
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	b930      	cbnz	r0, 800e204 <__d2b+0x24>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	4b23      	ldr	r3, [pc, #140]	@ (800e288 <__d2b+0xa8>)
 800e1fa:	4824      	ldr	r0, [pc, #144]	@ (800e28c <__d2b+0xac>)
 800e1fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e200:	f7fd ff50 	bl	800c0a4 <__assert_func>
 800e204:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e20c:	b10d      	cbz	r5, 800e212 <__d2b+0x32>
 800e20e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e212:	9301      	str	r3, [sp, #4]
 800e214:	f1b8 0300 	subs.w	r3, r8, #0
 800e218:	d023      	beq.n	800e262 <__d2b+0x82>
 800e21a:	4668      	mov	r0, sp
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	f7ff fd84 	bl	800dd2a <__lo0bits>
 800e222:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e226:	b1d0      	cbz	r0, 800e25e <__d2b+0x7e>
 800e228:	f1c0 0320 	rsb	r3, r0, #32
 800e22c:	fa02 f303 	lsl.w	r3, r2, r3
 800e230:	430b      	orrs	r3, r1
 800e232:	40c2      	lsrs	r2, r0
 800e234:	6163      	str	r3, [r4, #20]
 800e236:	9201      	str	r2, [sp, #4]
 800e238:	9b01      	ldr	r3, [sp, #4]
 800e23a:	61a3      	str	r3, [r4, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bf0c      	ite	eq
 800e240:	2201      	moveq	r2, #1
 800e242:	2202      	movne	r2, #2
 800e244:	6122      	str	r2, [r4, #16]
 800e246:	b1a5      	cbz	r5, 800e272 <__d2b+0x92>
 800e248:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e24c:	4405      	add	r5, r0
 800e24e:	603d      	str	r5, [r7, #0]
 800e250:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e254:	6030      	str	r0, [r6, #0]
 800e256:	4620      	mov	r0, r4
 800e258:	b003      	add	sp, #12
 800e25a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e25e:	6161      	str	r1, [r4, #20]
 800e260:	e7ea      	b.n	800e238 <__d2b+0x58>
 800e262:	a801      	add	r0, sp, #4
 800e264:	f7ff fd61 	bl	800dd2a <__lo0bits>
 800e268:	9b01      	ldr	r3, [sp, #4]
 800e26a:	6163      	str	r3, [r4, #20]
 800e26c:	3020      	adds	r0, #32
 800e26e:	2201      	movs	r2, #1
 800e270:	e7e8      	b.n	800e244 <__d2b+0x64>
 800e272:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e276:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e27a:	6038      	str	r0, [r7, #0]
 800e27c:	6918      	ldr	r0, [r3, #16]
 800e27e:	f7ff fd35 	bl	800dcec <__hi0bits>
 800e282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e286:	e7e5      	b.n	800e254 <__d2b+0x74>
 800e288:	0800eb68 	.word	0x0800eb68
 800e28c:	0800eb79 	.word	0x0800eb79

0800e290 <__sfputc_r>:
 800e290:	6893      	ldr	r3, [r2, #8]
 800e292:	3b01      	subs	r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	b410      	push	{r4}
 800e298:	6093      	str	r3, [r2, #8]
 800e29a:	da08      	bge.n	800e2ae <__sfputc_r+0x1e>
 800e29c:	6994      	ldr	r4, [r2, #24]
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	db01      	blt.n	800e2a6 <__sfputc_r+0x16>
 800e2a2:	290a      	cmp	r1, #10
 800e2a4:	d103      	bne.n	800e2ae <__sfputc_r+0x1e>
 800e2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2aa:	f000 b9df 	b.w	800e66c <__swbuf_r>
 800e2ae:	6813      	ldr	r3, [r2, #0]
 800e2b0:	1c58      	adds	r0, r3, #1
 800e2b2:	6010      	str	r0, [r2, #0]
 800e2b4:	7019      	strb	r1, [r3, #0]
 800e2b6:	4608      	mov	r0, r1
 800e2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <__sfputs_r>:
 800e2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	460f      	mov	r7, r1
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	18d5      	adds	r5, r2, r3
 800e2c8:	42ac      	cmp	r4, r5
 800e2ca:	d101      	bne.n	800e2d0 <__sfputs_r+0x12>
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e007      	b.n	800e2e0 <__sfputs_r+0x22>
 800e2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d4:	463a      	mov	r2, r7
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	f7ff ffda 	bl	800e290 <__sfputc_r>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d1f3      	bne.n	800e2c8 <__sfputs_r+0xa>
 800e2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e2e4 <_vfiprintf_r>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	b09d      	sub	sp, #116	@ 0x74
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	4698      	mov	r8, r3
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	b118      	cbz	r0, 800e2fc <_vfiprintf_r+0x18>
 800e2f4:	6a03      	ldr	r3, [r0, #32]
 800e2f6:	b90b      	cbnz	r3, 800e2fc <_vfiprintf_r+0x18>
 800e2f8:	f7fe fc8a 	bl	800cc10 <__sinit>
 800e2fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2fe:	07d9      	lsls	r1, r3, #31
 800e300:	d405      	bmi.n	800e30e <_vfiprintf_r+0x2a>
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	059a      	lsls	r2, r3, #22
 800e306:	d402      	bmi.n	800e30e <_vfiprintf_r+0x2a>
 800e308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e30a:	f7fe fd9a 	bl	800ce42 <__retarget_lock_acquire_recursive>
 800e30e:	89ab      	ldrh	r3, [r5, #12]
 800e310:	071b      	lsls	r3, r3, #28
 800e312:	d501      	bpl.n	800e318 <_vfiprintf_r+0x34>
 800e314:	692b      	ldr	r3, [r5, #16]
 800e316:	b99b      	cbnz	r3, 800e340 <_vfiprintf_r+0x5c>
 800e318:	4629      	mov	r1, r5
 800e31a:	4630      	mov	r0, r6
 800e31c:	f000 f9e4 	bl	800e6e8 <__swsetup_r>
 800e320:	b170      	cbz	r0, 800e340 <_vfiprintf_r+0x5c>
 800e322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e324:	07dc      	lsls	r4, r3, #31
 800e326:	d504      	bpl.n	800e332 <_vfiprintf_r+0x4e>
 800e328:	f04f 30ff 	mov.w	r0, #4294967295
 800e32c:	b01d      	add	sp, #116	@ 0x74
 800e32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e332:	89ab      	ldrh	r3, [r5, #12]
 800e334:	0598      	lsls	r0, r3, #22
 800e336:	d4f7      	bmi.n	800e328 <_vfiprintf_r+0x44>
 800e338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e33a:	f7fe fd83 	bl	800ce44 <__retarget_lock_release_recursive>
 800e33e:	e7f3      	b.n	800e328 <_vfiprintf_r+0x44>
 800e340:	2300      	movs	r3, #0
 800e342:	9309      	str	r3, [sp, #36]	@ 0x24
 800e344:	2320      	movs	r3, #32
 800e346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e34a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e34e:	2330      	movs	r3, #48	@ 0x30
 800e350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e500 <_vfiprintf_r+0x21c>
 800e354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e358:	f04f 0901 	mov.w	r9, #1
 800e35c:	4623      	mov	r3, r4
 800e35e:	469a      	mov	sl, r3
 800e360:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e364:	b10a      	cbz	r2, 800e36a <_vfiprintf_r+0x86>
 800e366:	2a25      	cmp	r2, #37	@ 0x25
 800e368:	d1f9      	bne.n	800e35e <_vfiprintf_r+0x7a>
 800e36a:	ebba 0b04 	subs.w	fp, sl, r4
 800e36e:	d00b      	beq.n	800e388 <_vfiprintf_r+0xa4>
 800e370:	465b      	mov	r3, fp
 800e372:	4622      	mov	r2, r4
 800e374:	4629      	mov	r1, r5
 800e376:	4630      	mov	r0, r6
 800e378:	f7ff ffa1 	bl	800e2be <__sfputs_r>
 800e37c:	3001      	adds	r0, #1
 800e37e:	f000 80a7 	beq.w	800e4d0 <_vfiprintf_r+0x1ec>
 800e382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e384:	445a      	add	r2, fp
 800e386:	9209      	str	r2, [sp, #36]	@ 0x24
 800e388:	f89a 3000 	ldrb.w	r3, [sl]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f000 809f 	beq.w	800e4d0 <_vfiprintf_r+0x1ec>
 800e392:	2300      	movs	r3, #0
 800e394:	f04f 32ff 	mov.w	r2, #4294967295
 800e398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e39c:	f10a 0a01 	add.w	sl, sl, #1
 800e3a0:	9304      	str	r3, [sp, #16]
 800e3a2:	9307      	str	r3, [sp, #28]
 800e3a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3aa:	4654      	mov	r4, sl
 800e3ac:	2205      	movs	r2, #5
 800e3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b2:	4853      	ldr	r0, [pc, #332]	@ (800e500 <_vfiprintf_r+0x21c>)
 800e3b4:	f7f1 ff0c 	bl	80001d0 <memchr>
 800e3b8:	9a04      	ldr	r2, [sp, #16]
 800e3ba:	b9d8      	cbnz	r0, 800e3f4 <_vfiprintf_r+0x110>
 800e3bc:	06d1      	lsls	r1, r2, #27
 800e3be:	bf44      	itt	mi
 800e3c0:	2320      	movmi	r3, #32
 800e3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3c6:	0713      	lsls	r3, r2, #28
 800e3c8:	bf44      	itt	mi
 800e3ca:	232b      	movmi	r3, #43	@ 0x2b
 800e3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3d6:	d015      	beq.n	800e404 <_vfiprintf_r+0x120>
 800e3d8:	9a07      	ldr	r2, [sp, #28]
 800e3da:	4654      	mov	r4, sl
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f04f 0c0a 	mov.w	ip, #10
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3e8:	3b30      	subs	r3, #48	@ 0x30
 800e3ea:	2b09      	cmp	r3, #9
 800e3ec:	d94b      	bls.n	800e486 <_vfiprintf_r+0x1a2>
 800e3ee:	b1b0      	cbz	r0, 800e41e <_vfiprintf_r+0x13a>
 800e3f0:	9207      	str	r2, [sp, #28]
 800e3f2:	e014      	b.n	800e41e <_vfiprintf_r+0x13a>
 800e3f4:	eba0 0308 	sub.w	r3, r0, r8
 800e3f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	9304      	str	r3, [sp, #16]
 800e400:	46a2      	mov	sl, r4
 800e402:	e7d2      	b.n	800e3aa <_vfiprintf_r+0xc6>
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	1d19      	adds	r1, r3, #4
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	9103      	str	r1, [sp, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	bfbb      	ittet	lt
 800e410:	425b      	neglt	r3, r3
 800e412:	f042 0202 	orrlt.w	r2, r2, #2
 800e416:	9307      	strge	r3, [sp, #28]
 800e418:	9307      	strlt	r3, [sp, #28]
 800e41a:	bfb8      	it	lt
 800e41c:	9204      	strlt	r2, [sp, #16]
 800e41e:	7823      	ldrb	r3, [r4, #0]
 800e420:	2b2e      	cmp	r3, #46	@ 0x2e
 800e422:	d10a      	bne.n	800e43a <_vfiprintf_r+0x156>
 800e424:	7863      	ldrb	r3, [r4, #1]
 800e426:	2b2a      	cmp	r3, #42	@ 0x2a
 800e428:	d132      	bne.n	800e490 <_vfiprintf_r+0x1ac>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	1d1a      	adds	r2, r3, #4
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	9203      	str	r2, [sp, #12]
 800e432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e436:	3402      	adds	r4, #2
 800e438:	9305      	str	r3, [sp, #20]
 800e43a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e510 <_vfiprintf_r+0x22c>
 800e43e:	7821      	ldrb	r1, [r4, #0]
 800e440:	2203      	movs	r2, #3
 800e442:	4650      	mov	r0, sl
 800e444:	f7f1 fec4 	bl	80001d0 <memchr>
 800e448:	b138      	cbz	r0, 800e45a <_vfiprintf_r+0x176>
 800e44a:	9b04      	ldr	r3, [sp, #16]
 800e44c:	eba0 000a 	sub.w	r0, r0, sl
 800e450:	2240      	movs	r2, #64	@ 0x40
 800e452:	4082      	lsls	r2, r0
 800e454:	4313      	orrs	r3, r2
 800e456:	3401      	adds	r4, #1
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e45e:	4829      	ldr	r0, [pc, #164]	@ (800e504 <_vfiprintf_r+0x220>)
 800e460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e464:	2206      	movs	r2, #6
 800e466:	f7f1 feb3 	bl	80001d0 <memchr>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d03f      	beq.n	800e4ee <_vfiprintf_r+0x20a>
 800e46e:	4b26      	ldr	r3, [pc, #152]	@ (800e508 <_vfiprintf_r+0x224>)
 800e470:	bb1b      	cbnz	r3, 800e4ba <_vfiprintf_r+0x1d6>
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	3307      	adds	r3, #7
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	3308      	adds	r3, #8
 800e47c:	9303      	str	r3, [sp, #12]
 800e47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e480:	443b      	add	r3, r7
 800e482:	9309      	str	r3, [sp, #36]	@ 0x24
 800e484:	e76a      	b.n	800e35c <_vfiprintf_r+0x78>
 800e486:	fb0c 3202 	mla	r2, ip, r2, r3
 800e48a:	460c      	mov	r4, r1
 800e48c:	2001      	movs	r0, #1
 800e48e:	e7a8      	b.n	800e3e2 <_vfiprintf_r+0xfe>
 800e490:	2300      	movs	r3, #0
 800e492:	3401      	adds	r4, #1
 800e494:	9305      	str	r3, [sp, #20]
 800e496:	4619      	mov	r1, r3
 800e498:	f04f 0c0a 	mov.w	ip, #10
 800e49c:	4620      	mov	r0, r4
 800e49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4a2:	3a30      	subs	r2, #48	@ 0x30
 800e4a4:	2a09      	cmp	r2, #9
 800e4a6:	d903      	bls.n	800e4b0 <_vfiprintf_r+0x1cc>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0c6      	beq.n	800e43a <_vfiprintf_r+0x156>
 800e4ac:	9105      	str	r1, [sp, #20]
 800e4ae:	e7c4      	b.n	800e43a <_vfiprintf_r+0x156>
 800e4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e7f0      	b.n	800e49c <_vfiprintf_r+0x1b8>
 800e4ba:	ab03      	add	r3, sp, #12
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4b12      	ldr	r3, [pc, #72]	@ (800e50c <_vfiprintf_r+0x228>)
 800e4c2:	a904      	add	r1, sp, #16
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f7fd ff61 	bl	800c38c <_printf_float>
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	1c78      	adds	r0, r7, #1
 800e4ce:	d1d6      	bne.n	800e47e <_vfiprintf_r+0x19a>
 800e4d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4d2:	07d9      	lsls	r1, r3, #31
 800e4d4:	d405      	bmi.n	800e4e2 <_vfiprintf_r+0x1fe>
 800e4d6:	89ab      	ldrh	r3, [r5, #12]
 800e4d8:	059a      	lsls	r2, r3, #22
 800e4da:	d402      	bmi.n	800e4e2 <_vfiprintf_r+0x1fe>
 800e4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4de:	f7fe fcb1 	bl	800ce44 <__retarget_lock_release_recursive>
 800e4e2:	89ab      	ldrh	r3, [r5, #12]
 800e4e4:	065b      	lsls	r3, r3, #25
 800e4e6:	f53f af1f 	bmi.w	800e328 <_vfiprintf_r+0x44>
 800e4ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4ec:	e71e      	b.n	800e32c <_vfiprintf_r+0x48>
 800e4ee:	ab03      	add	r3, sp, #12
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	462a      	mov	r2, r5
 800e4f4:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <_vfiprintf_r+0x228>)
 800e4f6:	a904      	add	r1, sp, #16
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f7fe f9df 	bl	800c8bc <_printf_i>
 800e4fe:	e7e4      	b.n	800e4ca <_vfiprintf_r+0x1e6>
 800e500:	0800ebd2 	.word	0x0800ebd2
 800e504:	0800ebdc 	.word	0x0800ebdc
 800e508:	0800c38d 	.word	0x0800c38d
 800e50c:	0800e2bf 	.word	0x0800e2bf
 800e510:	0800ebd8 	.word	0x0800ebd8

0800e514 <__sflush_r>:
 800e514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	0716      	lsls	r6, r2, #28
 800e51e:	4605      	mov	r5, r0
 800e520:	460c      	mov	r4, r1
 800e522:	d454      	bmi.n	800e5ce <__sflush_r+0xba>
 800e524:	684b      	ldr	r3, [r1, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc02      	bgt.n	800e530 <__sflush_r+0x1c>
 800e52a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd48      	ble.n	800e5c2 <__sflush_r+0xae>
 800e530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e532:	2e00      	cmp	r6, #0
 800e534:	d045      	beq.n	800e5c2 <__sflush_r+0xae>
 800e536:	2300      	movs	r3, #0
 800e538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e53c:	682f      	ldr	r7, [r5, #0]
 800e53e:	6a21      	ldr	r1, [r4, #32]
 800e540:	602b      	str	r3, [r5, #0]
 800e542:	d030      	beq.n	800e5a6 <__sflush_r+0x92>
 800e544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	0759      	lsls	r1, r3, #29
 800e54a:	d505      	bpl.n	800e558 <__sflush_r+0x44>
 800e54c:	6863      	ldr	r3, [r4, #4]
 800e54e:	1ad2      	subs	r2, r2, r3
 800e550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e552:	b10b      	cbz	r3, 800e558 <__sflush_r+0x44>
 800e554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e556:	1ad2      	subs	r2, r2, r3
 800e558:	2300      	movs	r3, #0
 800e55a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e55c:	6a21      	ldr	r1, [r4, #32]
 800e55e:	4628      	mov	r0, r5
 800e560:	47b0      	blx	r6
 800e562:	1c43      	adds	r3, r0, #1
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	d106      	bne.n	800e576 <__sflush_r+0x62>
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	291d      	cmp	r1, #29
 800e56c:	d82b      	bhi.n	800e5c6 <__sflush_r+0xb2>
 800e56e:	4a2a      	ldr	r2, [pc, #168]	@ (800e618 <__sflush_r+0x104>)
 800e570:	40ca      	lsrs	r2, r1
 800e572:	07d6      	lsls	r6, r2, #31
 800e574:	d527      	bpl.n	800e5c6 <__sflush_r+0xb2>
 800e576:	2200      	movs	r2, #0
 800e578:	6062      	str	r2, [r4, #4]
 800e57a:	04d9      	lsls	r1, r3, #19
 800e57c:	6922      	ldr	r2, [r4, #16]
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	d504      	bpl.n	800e58c <__sflush_r+0x78>
 800e582:	1c42      	adds	r2, r0, #1
 800e584:	d101      	bne.n	800e58a <__sflush_r+0x76>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b903      	cbnz	r3, 800e58c <__sflush_r+0x78>
 800e58a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	b1b9      	cbz	r1, 800e5c2 <__sflush_r+0xae>
 800e592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e596:	4299      	cmp	r1, r3
 800e598:	d002      	beq.n	800e5a0 <__sflush_r+0x8c>
 800e59a:	4628      	mov	r0, r5
 800e59c:	f7ff fab4 	bl	800db08 <_free_r>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5a4:	e00d      	b.n	800e5c2 <__sflush_r+0xae>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	47b0      	blx	r6
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	1c50      	adds	r0, r2, #1
 800e5b0:	d1c9      	bne.n	800e546 <__sflush_r+0x32>
 800e5b2:	682b      	ldr	r3, [r5, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0c6      	beq.n	800e546 <__sflush_r+0x32>
 800e5b8:	2b1d      	cmp	r3, #29
 800e5ba:	d001      	beq.n	800e5c0 <__sflush_r+0xac>
 800e5bc:	2b16      	cmp	r3, #22
 800e5be:	d11e      	bne.n	800e5fe <__sflush_r+0xea>
 800e5c0:	602f      	str	r7, [r5, #0]
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e022      	b.n	800e60c <__sflush_r+0xf8>
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ca:	b21b      	sxth	r3, r3
 800e5cc:	e01b      	b.n	800e606 <__sflush_r+0xf2>
 800e5ce:	690f      	ldr	r7, [r1, #16]
 800e5d0:	2f00      	cmp	r7, #0
 800e5d2:	d0f6      	beq.n	800e5c2 <__sflush_r+0xae>
 800e5d4:	0793      	lsls	r3, r2, #30
 800e5d6:	680e      	ldr	r6, [r1, #0]
 800e5d8:	bf08      	it	eq
 800e5da:	694b      	ldreq	r3, [r1, #20]
 800e5dc:	600f      	str	r7, [r1, #0]
 800e5de:	bf18      	it	ne
 800e5e0:	2300      	movne	r3, #0
 800e5e2:	eba6 0807 	sub.w	r8, r6, r7
 800e5e6:	608b      	str	r3, [r1, #8]
 800e5e8:	f1b8 0f00 	cmp.w	r8, #0
 800e5ec:	dde9      	ble.n	800e5c2 <__sflush_r+0xae>
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5f2:	4643      	mov	r3, r8
 800e5f4:	463a      	mov	r2, r7
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b0      	blx	r6
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	dc08      	bgt.n	800e610 <__sflush_r+0xfc>
 800e5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	4407      	add	r7, r0
 800e612:	eba8 0800 	sub.w	r8, r8, r0
 800e616:	e7e7      	b.n	800e5e8 <__sflush_r+0xd4>
 800e618:	20400001 	.word	0x20400001

0800e61c <_fflush_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	4605      	mov	r5, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b913      	cbnz	r3, 800e62c <_fflush_r+0x10>
 800e626:	2500      	movs	r5, #0
 800e628:	4628      	mov	r0, r5
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	b118      	cbz	r0, 800e636 <_fflush_r+0x1a>
 800e62e:	6a03      	ldr	r3, [r0, #32]
 800e630:	b90b      	cbnz	r3, 800e636 <_fflush_r+0x1a>
 800e632:	f7fe faed 	bl	800cc10 <__sinit>
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0f3      	beq.n	800e626 <_fflush_r+0xa>
 800e63e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e640:	07d0      	lsls	r0, r2, #31
 800e642:	d404      	bmi.n	800e64e <_fflush_r+0x32>
 800e644:	0599      	lsls	r1, r3, #22
 800e646:	d402      	bmi.n	800e64e <_fflush_r+0x32>
 800e648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e64a:	f7fe fbfa 	bl	800ce42 <__retarget_lock_acquire_recursive>
 800e64e:	4628      	mov	r0, r5
 800e650:	4621      	mov	r1, r4
 800e652:	f7ff ff5f 	bl	800e514 <__sflush_r>
 800e656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e658:	07da      	lsls	r2, r3, #31
 800e65a:	4605      	mov	r5, r0
 800e65c:	d4e4      	bmi.n	800e628 <_fflush_r+0xc>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	059b      	lsls	r3, r3, #22
 800e662:	d4e1      	bmi.n	800e628 <_fflush_r+0xc>
 800e664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e666:	f7fe fbed 	bl	800ce44 <__retarget_lock_release_recursive>
 800e66a:	e7dd      	b.n	800e628 <_fflush_r+0xc>

0800e66c <__swbuf_r>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	460e      	mov	r6, r1
 800e670:	4614      	mov	r4, r2
 800e672:	4605      	mov	r5, r0
 800e674:	b118      	cbz	r0, 800e67e <__swbuf_r+0x12>
 800e676:	6a03      	ldr	r3, [r0, #32]
 800e678:	b90b      	cbnz	r3, 800e67e <__swbuf_r+0x12>
 800e67a:	f7fe fac9 	bl	800cc10 <__sinit>
 800e67e:	69a3      	ldr	r3, [r4, #24]
 800e680:	60a3      	str	r3, [r4, #8]
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	071a      	lsls	r2, r3, #28
 800e686:	d501      	bpl.n	800e68c <__swbuf_r+0x20>
 800e688:	6923      	ldr	r3, [r4, #16]
 800e68a:	b943      	cbnz	r3, 800e69e <__swbuf_r+0x32>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 f82a 	bl	800e6e8 <__swsetup_r>
 800e694:	b118      	cbz	r0, 800e69e <__swbuf_r+0x32>
 800e696:	f04f 37ff 	mov.w	r7, #4294967295
 800e69a:	4638      	mov	r0, r7
 800e69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	6922      	ldr	r2, [r4, #16]
 800e6a2:	1a98      	subs	r0, r3, r2
 800e6a4:	6963      	ldr	r3, [r4, #20]
 800e6a6:	b2f6      	uxtb	r6, r6
 800e6a8:	4283      	cmp	r3, r0
 800e6aa:	4637      	mov	r7, r6
 800e6ac:	dc05      	bgt.n	800e6ba <__swbuf_r+0x4e>
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7ff ffb3 	bl	800e61c <_fflush_r>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d1ed      	bne.n	800e696 <__swbuf_r+0x2a>
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	60a3      	str	r3, [r4, #8]
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	6022      	str	r2, [r4, #0]
 800e6c6:	701e      	strb	r6, [r3, #0]
 800e6c8:	6962      	ldr	r2, [r4, #20]
 800e6ca:	1c43      	adds	r3, r0, #1
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d004      	beq.n	800e6da <__swbuf_r+0x6e>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	07db      	lsls	r3, r3, #31
 800e6d4:	d5e1      	bpl.n	800e69a <__swbuf_r+0x2e>
 800e6d6:	2e0a      	cmp	r6, #10
 800e6d8:	d1df      	bne.n	800e69a <__swbuf_r+0x2e>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7ff ff9d 	bl	800e61c <_fflush_r>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	d0d9      	beq.n	800e69a <__swbuf_r+0x2e>
 800e6e6:	e7d6      	b.n	800e696 <__swbuf_r+0x2a>

0800e6e8 <__swsetup_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	4b29      	ldr	r3, [pc, #164]	@ (800e790 <__swsetup_r+0xa8>)
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	6818      	ldr	r0, [r3, #0]
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	b118      	cbz	r0, 800e6fc <__swsetup_r+0x14>
 800e6f4:	6a03      	ldr	r3, [r0, #32]
 800e6f6:	b90b      	cbnz	r3, 800e6fc <__swsetup_r+0x14>
 800e6f8:	f7fe fa8a 	bl	800cc10 <__sinit>
 800e6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e700:	0719      	lsls	r1, r3, #28
 800e702:	d422      	bmi.n	800e74a <__swsetup_r+0x62>
 800e704:	06da      	lsls	r2, r3, #27
 800e706:	d407      	bmi.n	800e718 <__swsetup_r+0x30>
 800e708:	2209      	movs	r2, #9
 800e70a:	602a      	str	r2, [r5, #0]
 800e70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	f04f 30ff 	mov.w	r0, #4294967295
 800e716:	e033      	b.n	800e780 <__swsetup_r+0x98>
 800e718:	0758      	lsls	r0, r3, #29
 800e71a:	d512      	bpl.n	800e742 <__swsetup_r+0x5a>
 800e71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e71e:	b141      	cbz	r1, 800e732 <__swsetup_r+0x4a>
 800e720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e724:	4299      	cmp	r1, r3
 800e726:	d002      	beq.n	800e72e <__swsetup_r+0x46>
 800e728:	4628      	mov	r0, r5
 800e72a:	f7ff f9ed 	bl	800db08 <_free_r>
 800e72e:	2300      	movs	r3, #0
 800e730:	6363      	str	r3, [r4, #52]	@ 0x34
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e738:	81a3      	strh	r3, [r4, #12]
 800e73a:	2300      	movs	r3, #0
 800e73c:	6063      	str	r3, [r4, #4]
 800e73e:	6923      	ldr	r3, [r4, #16]
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f043 0308 	orr.w	r3, r3, #8
 800e748:	81a3      	strh	r3, [r4, #12]
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	b94b      	cbnz	r3, 800e762 <__swsetup_r+0x7a>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e758:	d003      	beq.n	800e762 <__swsetup_r+0x7a>
 800e75a:	4621      	mov	r1, r4
 800e75c:	4628      	mov	r0, r5
 800e75e:	f000 f8c4 	bl	800e8ea <__smakebuf_r>
 800e762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e766:	f013 0201 	ands.w	r2, r3, #1
 800e76a:	d00a      	beq.n	800e782 <__swsetup_r+0x9a>
 800e76c:	2200      	movs	r2, #0
 800e76e:	60a2      	str	r2, [r4, #8]
 800e770:	6962      	ldr	r2, [r4, #20]
 800e772:	4252      	negs	r2, r2
 800e774:	61a2      	str	r2, [r4, #24]
 800e776:	6922      	ldr	r2, [r4, #16]
 800e778:	b942      	cbnz	r2, 800e78c <__swsetup_r+0xa4>
 800e77a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e77e:	d1c5      	bne.n	800e70c <__swsetup_r+0x24>
 800e780:	bd38      	pop	{r3, r4, r5, pc}
 800e782:	0799      	lsls	r1, r3, #30
 800e784:	bf58      	it	pl
 800e786:	6962      	ldrpl	r2, [r4, #20]
 800e788:	60a2      	str	r2, [r4, #8]
 800e78a:	e7f4      	b.n	800e776 <__swsetup_r+0x8e>
 800e78c:	2000      	movs	r0, #0
 800e78e:	e7f7      	b.n	800e780 <__swsetup_r+0x98>
 800e790:	20000108 	.word	0x20000108

0800e794 <_raise_r>:
 800e794:	291f      	cmp	r1, #31
 800e796:	b538      	push	{r3, r4, r5, lr}
 800e798:	4605      	mov	r5, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	d904      	bls.n	800e7a8 <_raise_r+0x14>
 800e79e:	2316      	movs	r3, #22
 800e7a0:	6003      	str	r3, [r0, #0]
 800e7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}
 800e7a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e7aa:	b112      	cbz	r2, 800e7b2 <_raise_r+0x1e>
 800e7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b0:	b94b      	cbnz	r3, 800e7c6 <_raise_r+0x32>
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f000 f830 	bl	800e818 <_getpid_r>
 800e7b8:	4622      	mov	r2, r4
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	4628      	mov	r0, r5
 800e7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c2:	f000 b817 	b.w	800e7f4 <_kill_r>
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d00a      	beq.n	800e7e0 <_raise_r+0x4c>
 800e7ca:	1c59      	adds	r1, r3, #1
 800e7cc:	d103      	bne.n	800e7d6 <_raise_r+0x42>
 800e7ce:	2316      	movs	r3, #22
 800e7d0:	6003      	str	r3, [r0, #0]
 800e7d2:	2001      	movs	r0, #1
 800e7d4:	e7e7      	b.n	800e7a6 <_raise_r+0x12>
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4798      	blx	r3
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	e7e0      	b.n	800e7a6 <_raise_r+0x12>

0800e7e4 <raise>:
 800e7e4:	4b02      	ldr	r3, [pc, #8]	@ (800e7f0 <raise+0xc>)
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	f7ff bfd3 	b.w	800e794 <_raise_r>
 800e7ee:	bf00      	nop
 800e7f0:	20000108 	.word	0x20000108

0800e7f4 <_kill_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	@ (800e814 <_kill_r+0x20>)
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	4608      	mov	r0, r1
 800e7fe:	4611      	mov	r1, r2
 800e800:	602b      	str	r3, [r5, #0]
 800e802:	f7f5 f97b 	bl	8003afc <_kill>
 800e806:	1c43      	adds	r3, r0, #1
 800e808:	d102      	bne.n	800e810 <_kill_r+0x1c>
 800e80a:	682b      	ldr	r3, [r5, #0]
 800e80c:	b103      	cbz	r3, 800e810 <_kill_r+0x1c>
 800e80e:	6023      	str	r3, [r4, #0]
 800e810:	bd38      	pop	{r3, r4, r5, pc}
 800e812:	bf00      	nop
 800e814:	200022bc 	.word	0x200022bc

0800e818 <_getpid_r>:
 800e818:	f7f5 b968 	b.w	8003aec <_getpid>

0800e81c <memcpy>:
 800e81c:	440a      	add	r2, r1
 800e81e:	4291      	cmp	r1, r2
 800e820:	f100 33ff 	add.w	r3, r0, #4294967295
 800e824:	d100      	bne.n	800e828 <memcpy+0xc>
 800e826:	4770      	bx	lr
 800e828:	b510      	push	{r4, lr}
 800e82a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e82e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e832:	4291      	cmp	r1, r2
 800e834:	d1f9      	bne.n	800e82a <memcpy+0xe>
 800e836:	bd10      	pop	{r4, pc}

0800e838 <_calloc_r>:
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	fba1 5402 	umull	r5, r4, r1, r2
 800e83e:	b934      	cbnz	r4, 800e84e <_calloc_r+0x16>
 800e840:	4629      	mov	r1, r5
 800e842:	f7fd fc77 	bl	800c134 <_malloc_r>
 800e846:	4606      	mov	r6, r0
 800e848:	b928      	cbnz	r0, 800e856 <_calloc_r+0x1e>
 800e84a:	4630      	mov	r0, r6
 800e84c:	bd70      	pop	{r4, r5, r6, pc}
 800e84e:	220c      	movs	r2, #12
 800e850:	6002      	str	r2, [r0, #0]
 800e852:	2600      	movs	r6, #0
 800e854:	e7f9      	b.n	800e84a <_calloc_r+0x12>
 800e856:	462a      	mov	r2, r5
 800e858:	4621      	mov	r1, r4
 800e85a:	f7fe fa64 	bl	800cd26 <memset>
 800e85e:	e7f4      	b.n	800e84a <_calloc_r+0x12>

0800e860 <__ascii_mbtowc>:
 800e860:	b082      	sub	sp, #8
 800e862:	b901      	cbnz	r1, 800e866 <__ascii_mbtowc+0x6>
 800e864:	a901      	add	r1, sp, #4
 800e866:	b142      	cbz	r2, 800e87a <__ascii_mbtowc+0x1a>
 800e868:	b14b      	cbz	r3, 800e87e <__ascii_mbtowc+0x1e>
 800e86a:	7813      	ldrb	r3, [r2, #0]
 800e86c:	600b      	str	r3, [r1, #0]
 800e86e:	7812      	ldrb	r2, [r2, #0]
 800e870:	1e10      	subs	r0, r2, #0
 800e872:	bf18      	it	ne
 800e874:	2001      	movne	r0, #1
 800e876:	b002      	add	sp, #8
 800e878:	4770      	bx	lr
 800e87a:	4610      	mov	r0, r2
 800e87c:	e7fb      	b.n	800e876 <__ascii_mbtowc+0x16>
 800e87e:	f06f 0001 	mvn.w	r0, #1
 800e882:	e7f8      	b.n	800e876 <__ascii_mbtowc+0x16>

0800e884 <__ascii_wctomb>:
 800e884:	4603      	mov	r3, r0
 800e886:	4608      	mov	r0, r1
 800e888:	b141      	cbz	r1, 800e89c <__ascii_wctomb+0x18>
 800e88a:	2aff      	cmp	r2, #255	@ 0xff
 800e88c:	d904      	bls.n	800e898 <__ascii_wctomb+0x14>
 800e88e:	228a      	movs	r2, #138	@ 0x8a
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	f04f 30ff 	mov.w	r0, #4294967295
 800e896:	4770      	bx	lr
 800e898:	700a      	strb	r2, [r1, #0]
 800e89a:	2001      	movs	r0, #1
 800e89c:	4770      	bx	lr

0800e89e <__swhatbuf_r>:
 800e89e:	b570      	push	{r4, r5, r6, lr}
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	b096      	sub	sp, #88	@ 0x58
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	461e      	mov	r6, r3
 800e8ae:	da0d      	bge.n	800e8cc <__swhatbuf_r+0x2e>
 800e8b0:	89a3      	ldrh	r3, [r4, #12]
 800e8b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8b6:	f04f 0100 	mov.w	r1, #0
 800e8ba:	bf14      	ite	ne
 800e8bc:	2340      	movne	r3, #64	@ 0x40
 800e8be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	6031      	str	r1, [r6, #0]
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	b016      	add	sp, #88	@ 0x58
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	466a      	mov	r2, sp
 800e8ce:	f000 f849 	bl	800e964 <_fstat_r>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	dbec      	blt.n	800e8b0 <__swhatbuf_r+0x12>
 800e8d6:	9901      	ldr	r1, [sp, #4]
 800e8d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8e0:	4259      	negs	r1, r3
 800e8e2:	4159      	adcs	r1, r3
 800e8e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8e8:	e7eb      	b.n	800e8c2 <__swhatbuf_r+0x24>

0800e8ea <__smakebuf_r>:
 800e8ea:	898b      	ldrh	r3, [r1, #12]
 800e8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8ee:	079d      	lsls	r5, r3, #30
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	d507      	bpl.n	800e906 <__smakebuf_r+0x1c>
 800e8f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	6123      	str	r3, [r4, #16]
 800e8fe:	2301      	movs	r3, #1
 800e900:	6163      	str	r3, [r4, #20]
 800e902:	b003      	add	sp, #12
 800e904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e906:	ab01      	add	r3, sp, #4
 800e908:	466a      	mov	r2, sp
 800e90a:	f7ff ffc8 	bl	800e89e <__swhatbuf_r>
 800e90e:	9f00      	ldr	r7, [sp, #0]
 800e910:	4605      	mov	r5, r0
 800e912:	4639      	mov	r1, r7
 800e914:	4630      	mov	r0, r6
 800e916:	f7fd fc0d 	bl	800c134 <_malloc_r>
 800e91a:	b948      	cbnz	r0, 800e930 <__smakebuf_r+0x46>
 800e91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e920:	059a      	lsls	r2, r3, #22
 800e922:	d4ee      	bmi.n	800e902 <__smakebuf_r+0x18>
 800e924:	f023 0303 	bic.w	r3, r3, #3
 800e928:	f043 0302 	orr.w	r3, r3, #2
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	e7e2      	b.n	800e8f6 <__smakebuf_r+0xc>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	6020      	str	r0, [r4, #0]
 800e934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	9b01      	ldr	r3, [sp, #4]
 800e93c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e940:	b15b      	cbz	r3, 800e95a <__smakebuf_r+0x70>
 800e942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e946:	4630      	mov	r0, r6
 800e948:	f000 f81e 	bl	800e988 <_isatty_r>
 800e94c:	b128      	cbz	r0, 800e95a <__smakebuf_r+0x70>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	f043 0301 	orr.w	r3, r3, #1
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	431d      	orrs	r5, r3
 800e95e:	81a5      	strh	r5, [r4, #12]
 800e960:	e7cf      	b.n	800e902 <__smakebuf_r+0x18>
	...

0800e964 <_fstat_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d07      	ldr	r5, [pc, #28]	@ (800e984 <_fstat_r+0x20>)
 800e968:	2300      	movs	r3, #0
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	4611      	mov	r1, r2
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	f7f5 f907 	bl	8003b84 <_fstat>
 800e976:	1c43      	adds	r3, r0, #1
 800e978:	d102      	bne.n	800e980 <_fstat_r+0x1c>
 800e97a:	682b      	ldr	r3, [r5, #0]
 800e97c:	b103      	cbz	r3, 800e980 <_fstat_r+0x1c>
 800e97e:	6023      	str	r3, [r4, #0]
 800e980:	bd38      	pop	{r3, r4, r5, pc}
 800e982:	bf00      	nop
 800e984:	200022bc 	.word	0x200022bc

0800e988 <_isatty_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4d06      	ldr	r5, [pc, #24]	@ (800e9a4 <_isatty_r+0x1c>)
 800e98c:	2300      	movs	r3, #0
 800e98e:	4604      	mov	r4, r0
 800e990:	4608      	mov	r0, r1
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	f7f5 f906 	bl	8003ba4 <_isatty>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d102      	bne.n	800e9a2 <_isatty_r+0x1a>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	b103      	cbz	r3, 800e9a2 <_isatty_r+0x1a>
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	200022bc 	.word	0x200022bc

0800e9a8 <_init>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	bf00      	nop
 800e9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ae:	bc08      	pop	{r3}
 800e9b0:	469e      	mov	lr, r3
 800e9b2:	4770      	bx	lr

0800e9b4 <_fini>:
 800e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b6:	bf00      	nop
 800e9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ba:	bc08      	pop	{r3}
 800e9bc:	469e      	mov	lr, r3
 800e9be:	4770      	bx	lr
