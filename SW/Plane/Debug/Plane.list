
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800eb70  0800eb70  0000fb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efa4  0800efa4  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800efa4  0800efa4  0000ffa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efac  0800efac  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efac  0800efac  0000ffac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800efb0  0800efb0  0000ffb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800efb4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00001f4c  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002210  20002210  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e97  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050b8  00000000  00000000  0002818b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102f  00000000  00000000  0002e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b578  00000000  00000000  0002f87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0b0  00000000  00000000  0005adf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e60  00000000  00000000  00079ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015dd07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000677c  00000000  00000000  0015dd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001644c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb54 	.word	0x0800eb54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800eb54 	.word	0x0800eb54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:
#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note, uint16_t time)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f72:	f7ff ffcf 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <BuzzerPlayNote+0x7c>)
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	@ (8000fdc <BuzzerPlayNote+0x80>)
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fc58 	bl	800084c <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4c0c      	ldr	r4, [pc, #48]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fdff 	bl	8000ba8 <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	63d3      	str	r3, [r2, #60]	@ 0x3c

	HAL_Delay(time);
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fbf4 	bl	80047a8 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fc6:	f7ff ffb6 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8000fca:	bf00      	nop
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	0501bd00 	.word	0x0501bd00
 8000fdc:	0800ebb8 	.word	0x0800ebb8

08000fe0 <BuzzerPlayInit>:

void BuzzerPlayInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000fea:	f7ff ff93 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff0:	2215      	movs	r2, #21
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <BuzzerPlayInit+0x58>)
 8001000:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	@ 0x64
 8001008:	f003 fbce 	bl	80047a8 <HAL_Delay>
	TIM4->PSC = 1500;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <BuzzerPlayInit+0x58>)
 800100e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	@ 0x64
 8001016:	f003 fbc7 	bl	80047a8 <HAL_Delay>
	TIM4->PSC = 1000;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <BuzzerPlayInit+0x58>)
 800101c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f003 fbc0 	bl	80047a8 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <BuzzerPlayInit+0x58>)
 800102e:	f7ff ff82 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000800 	.word	0x40000800

0800103c <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	e008      	b.n	800105a <BuzzerPlayOneCycle+0x1e>
		BuzzerPlayNote(i, 150);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2196      	movs	r1, #150	@ 0x96
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff84 	bl	8000f5c <BuzzerPlayNote>
	for (int i=0; i<8; i++){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b07      	cmp	r3, #7
 800105e:	ddf3      	ble.n	8001048 <BuzzerPlayOneCycle+0xc>
	}
	return;
 8001060:	bf00      	nop
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BuzzerEnableThrottleHigh>:


/* Functions (RC Alarm) ------------------------------------------------------*/
void BuzzerEnableThrottleHigh(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800106c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001072:	f7ff ff4f 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001078:	2215      	movs	r2, #21
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM4->PSC = 2000;
 8001086:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001088:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 800108e:	bf00      	nop
}
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000800 	.word	0x40000800

08001098 <BuzzerDisableThrottleHigh>:

void BuzzerDisableThrottleHigh(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800109c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <BuzzerDisableThrottleHigh+0x14>)
 80010a2:	f7ff ff48 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 80010a6:	bf00      	nop
}
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40000800 	.word	0x40000800

080010b0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <FS_mannualMode>:
#include <FC_Failsafe/Failsafe.h>

uint8_t fsFlag = 0;

void FS_mannualMode(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <FS_mannualMode+0x14>)
 80010d4:	f7ff ffec 	bl	80010b0 <LL_GPIO_SetOutputPin>
	// RTH가 있는지 확인

	// RTH가 없으면 쓰로틀 끄고 서보 중립
	// 추후 원주 비행 구현
	SERVO_setFailsafe();
 80010d8:	f001 fcf0 	bl	8002abc <SERVO_setFailsafe>

	return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0210 	bic.w	r2, r3, #16
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	605a      	str	r2, [r3, #4]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d101      	bne.n	8001168 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	330c      	adds	r3, #12
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	330c      	adds	r3, #12
 80011a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_GPIO_SetOutputPin>:
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	041a      	lsls	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800

08001220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001236:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800

08001250 <ICM42688_GPIO_SPI_Initialization>:

int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	@ 0x40
 8001254:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2228      	movs	r2, #40	@ 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00b fe39 	bl	800ced6 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001274:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001278:	f7ff ffd2 	bl	8001220 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff ffb7 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001282:	2010      	movs	r0, #16
 8001284:	f7ff ffb4 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001288:	23e0      	movs	r3, #224	@ 0xe0
 800128a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800128c:	2302      	movs	r3, #2
 800128e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800129c:	2305      	movs	r3, #5
 800129e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	@ (8001328 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 80012a6:	f005 ff4f 	bl	8007148 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80012ae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80012b2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80012b8:	2302      	movs	r3, #2
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80012c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80012c6:	2310      	movs	r3, #16
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80012d2:	230a      	movs	r3, #10
 80012d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4619      	mov	r1, r3
 80012dc:	4813      	ldr	r0, [pc, #76]	@ (800132c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80012de:	f006 f90e 	bl	80074fe <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80012e2:	2100      	movs	r1, #0
 80012e4:	4811      	ldr	r0, [pc, #68]	@ (800132c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80012e6:	f7ff ff0d 	bl	8001104 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 80012ea:	2120      	movs	r1, #32
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80012ee:	f7ff ff70 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 80012f2:	2320      	movs	r3, #32
 80012f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4809      	ldr	r0, [pc, #36]	@ (8001330 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800130c:	f005 ff1c 	bl	8007148 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001312:	f7ff fee7 	bl	80010e4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 8001316:	2120      	movs	r1, #32
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800131a:	f7ff ff4c 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 800131e:	bf00      	nop
 8001320:	3740      	adds	r7, #64	@ 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020000 	.word	0x40020000
 800132c:	40013000 	.word	0x40013000
 8001330:	40021000 	.word	0x40021000

08001334 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 800133e:	bf00      	nop
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <SPI1_SendByte+0x40>)
 8001342:	f7ff ff05 	bl	8001150 <LL_SPI_IsActiveFlag_TXE>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4619      	mov	r1, r3
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <SPI1_SendByte+0x40>)
 8001352:	f7ff ff1e 	bl	8001192 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 8001356:	bf00      	nop
 8001358:	4806      	ldr	r0, [pc, #24]	@ (8001374 <SPI1_SendByte+0x40>)
 800135a:	f7ff fee6 	bl	800112a <LL_SPI_IsActiveFlag_RXNE>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f9      	beq.n	8001358 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <SPI1_SendByte+0x40>)
 8001366:	f7ff ff06 	bl	8001176 <LL_SPI_ReceiveData8>
 800136a:	4603      	mov	r3, r0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013000 	.word	0x40013000

08001378 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001382:	2120      	movs	r1, #32
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <ICM42688_Readbyte+0x3c>)
 8001386:	f7ff ff24 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ffce 	bl	8001334 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ffcb 	bl	8001334 <SPI1_SendByte>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 80013a2:	2120      	movs	r1, #32
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <ICM42688_Readbyte+0x3c>)
 80013a6:	f7ff ff06 	bl	80011b6 <LL_GPIO_SetOutputPin>
	
	return val;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	603a      	str	r2, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	460b      	mov	r3, r1
 80013c6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 80013cc:	2120      	movs	r1, #32
 80013ce:	4810      	ldr	r0, [pc, #64]	@ (8001410 <ICM42688_Readbytes+0x58>)
 80013d0:	f7ff feff 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ffa9 	bl	8001334 <SPI1_SendByte>
	while(i < len)
 80013e2:	e009      	b.n	80013f8 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60fa      	str	r2, [r7, #12]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	18d4      	adds	r4, r2, r3
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ffa0 	bl	8001334 <SPI1_SendByte>
 80013f4:	4603      	mov	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3f1      	bcc.n	80013e4 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 8001400:	2120      	movs	r1, #32
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <ICM42688_Readbytes+0x58>)
 8001404:	f7ff fed7 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	40021000 	.word	0x40021000

08001414 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 8001424:	2120      	movs	r1, #32
 8001426:	480b      	ldr	r0, [pc, #44]	@ (8001454 <ICM42688_Writebyte+0x40>)
 8001428:	f7ff fed3 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff7d 	bl	8001334 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff79 	bl	8001334 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 8001442:	2120      	movs	r1, #32
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <ICM42688_Writebyte+0x40>)
 8001446:	f7ff feb6 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 8001474:	f7ff feec 	bl	8001250 <ICM42688_GPIO_SPI_Initialization>
	
	// printf("Checking ICM42688...\n\r");
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 8001478:	2075      	movs	r0, #117	@ 0x75
 800147a:	f7ff ff7d 	bl	8001378 <ICM42688_Readbyte>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b47      	cmp	r3, #71	@ 0x47
 8001486:	d00c      	beq.n	80014a2 <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b47      	cmp	r3, #71	@ 0x47
 800148c:	d009      	beq.n	80014a2 <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800148e:	2075      	movs	r0, #117	@ 0x75
 8001490:	f7ff ff72 	bl	8001378 <ICM42688_Readbyte>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b12      	cmp	r3, #18
 800149c:	d001      	beq.n	80014a2 <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 800149e:	2301      	movs	r3, #1
 80014a0:	e02a      	b.n	80014f8 <ICM42688_Initialization+0xa0>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 80014a2:	210f      	movs	r1, #15
 80014a4:	204e      	movs	r0, #78	@ 0x4e
 80014a6:	f7ff ffb5 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f003 f97c 	bl	80047a8 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 80014b0:	2106      	movs	r1, #6
 80014b2:	204f      	movs	r0, #79	@ 0x4f
 80014b4:	f7ff ffae 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014b8:	2032      	movs	r0, #50	@ 0x32
 80014ba:	f003 f975 	bl	80047a8 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 80014be:	2100      	movs	r1, #0
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff ffa7 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	@ 0x32
 80014c8:	f003 f96e 	bl	80047a8 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 80014cc:	2106      	movs	r1, #6
 80014ce:	2050      	movs	r0, #80	@ 0x50
 80014d0:	f7ff ffa0 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014d4:	2032      	movs	r0, #50	@ 0x32
 80014d6:	f003 f967 	bl	80047a8 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 80014da:	2100      	movs	r1, #0
 80014dc:	2053      	movs	r0, #83	@ 0x53
 80014de:	f7ff ff99 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014e2:	2032      	movs	r0, #50	@ 0x32
 80014e4:	f003 f960 	bl	80047a8 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80014e8:	2111      	movs	r1, #17
 80014ea:	2052      	movs	r0, #82	@ 0x52
 80014ec:	f7ff ff92 	bl	8001414 <ICM42688_Writebyte>
	HAL_Delay(50);
 80014f0:	2032      	movs	r0, #50	@ 0x32
 80014f2:	f003 f959 	bl	80047a8 <HAL_Delay>
//	ICM42688_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
//	HAL_Delay(50);
	
	
	// Remove Gyro X offset
	return 0; //OK
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(TEMP_DATA1, 14, data);
 8001506:	463b      	mov	r3, r7
 8001508:	461a      	mov	r2, r3
 800150a:	210e      	movs	r1, #14
 800150c:	201d      	movs	r0, #29
 800150e:	f7ff ff53 	bl	80013b8 <ICM42688_Readbytes>
	
	raw_imu.time_usec = system_time.time_unix_usec;
 8001512:	4928      	ldr	r1, [pc, #160]	@ (80015b4 <ICM42688_Get6AxisRawData+0xb4>)
 8001514:	680a      	ldr	r2, [r1, #0]
 8001516:	684b      	ldr	r3, [r1, #4]
 8001518:	4927      	ldr	r1, [pc, #156]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 800151a:	600a      	str	r2, [r1, #0]
 800151c:	604b      	str	r3, [r1, #4]
	raw_imu.temperature = (data[0] << 8) | data[1];
 800151e:	783b      	ldrb	r3, [r7, #0]
 8001520:	b21b      	sxth	r3, r3
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	787b      	ldrb	r3, [r7, #1]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 8001530:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 8001534:	78bb      	ldrb	r3, [r7, #2]
 8001536:	b21b      	sxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 8001546:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	b21b      	sxth	r3, r3
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 800155a:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 800156e:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 8001570:	7a3b      	ldrb	r3, [r7, #8]
 8001572:	b21b      	sxth	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	7a7b      	ldrb	r3, [r7, #9]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 8001582:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 8001584:	7abb      	ldrb	r3, [r7, #10]
 8001586:	b21b      	sxth	r3, r3
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 8001596:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	b21b      	sxth	r3, r3
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <ICM42688_Get6AxisRawData+0xb8>)
 80015aa:	825a      	strh	r2, [r3, #18]

	return;
 80015ac:	bf00      	nop
}
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000458 	.word	0x20000458
 80015b8:	20000464 	.word	0x20000464

080015bc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015cc:	2b80      	cmp	r3, #128	@ 0x80
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	605a      	str	r2, [r3, #4]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <Log_Send>:
#include <GCS_MAVLink/GCS_Common.h>


/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	// 4Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 250)) return -1;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <Log_Send+0x30>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <Log_Send+0x34>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001610:	d802      	bhi.n	8001618 <Log_Send+0x18>
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e008      	b.n	800162a <Log_Send+0x2a>
	previous_time = system_time.time_boot_ms;
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <Log_Send+0x30>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <Log_Send+0x34>)
 800161e:	6013      	str	r3, [r2, #0]

//	Log_transmit((uint8_t*)&raw_imu, sizeof(raw_imu));
//	Log_transmit((uint8_t *)&servo_output_raw, sizeof(servo_output_raw));
	Log_transmit((uint8_t*)&RC_channels, sizeof(RC_channels));
 8001620:	212a      	movs	r1, #42	@ 0x2a
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <Log_Send+0x38>)
 8001624:	f000 f80a 	bl	800163c <Log_transmit>
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000458 	.word	0x20000458
 8001634:	200002e4 	.word	0x200002e4
 8001638:	200004ac 	.word	0x200004ac

0800163c <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
    const uint8_t code = 0xFD;
 8001648:	23fd      	movs	r3, #253	@ 0xfd
 800164a:	72fb      	strb	r3, [r7, #11]

    uint8_t packetLen = len+sizeof(uint8_t)*3;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	3303      	adds	r3, #3
 8001650:	74fb      	strb	r3, [r7, #19]
    uint8_t* packet = malloc(packetLen);
 8001652:	7cfb      	ldrb	r3, [r7, #19]
 8001654:	4618      	mov	r0, r3
 8001656:	f00a fe13 	bl	800c280 <malloc>
 800165a:	4603      	mov	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]

    memcpy(packet, &code, sizeof(uint8_t));
 800165e:	7afa      	ldrb	r2, [r7, #11]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	701a      	strb	r2, [r3, #0]
    memcpy(packet + sizeof(uint8_t), p, len);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f00b fcc2 	bl	800cff6 <memcpy>

    uint16_t crc = calculate_crc(packet, packetLen);
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	4619      	mov	r1, r3
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fd70 	bl	800215c <calculate_crc>
 800167c:	4603      	mov	r3, r0
 800167e:	813b      	strh	r3, [r7, #8]

    memcpy(packet + sizeof(uint8_t) + len, &crc, sizeof(uint16_t));
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	3301      	adds	r3, #1
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	893a      	ldrh	r2, [r7, #8]
 800168a:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(packet, packetLen);
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f00a f97b 	bl	800b98c <CDC_Transmit_FS>

	for(int i=0; i<packetLen; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e011      	b.n	80016c0 <Log_transmit+0x84>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}
 800169c:	bf00      	nop
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <Log_transmit+0x9c>)
 80016a0:	f7ff ff8c 	bl	80015bc <LL_USART_IsActiveFlag_TXE>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f9      	beq.n	800169e <Log_transmit+0x62>
		LL_USART_TransmitData8(USART2, packet[i]);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <Log_transmit+0x9c>)
 80016b6:	f7ff ff94 	bl	80015e2 <LL_USART_TransmitData8>
	for(int i=0; i<packetLen; i++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbe9      	blt.n	800169c <Log_transmit+0x60>
	}

    free(packet);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f00a fde1 	bl	800c290 <free>

	return packetLen;
 80016ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40004400 	.word	0x40004400

080016dc <PARM_load>:

#include <FC_Param/Param.h>
#include <FC_RC/RadioControl.h>


int PARM_load(void){
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 80016e2:	4b74      	ldr	r3, [pc, #464]	@ (80018b4 <PARM_load+0x1d8>)
 80016e4:	607b      	str	r3, [r7, #4]
	PARAM_SERVO_CH* servo_ch = paramServoCH;
 80016e6:	4b74      	ldr	r3, [pc, #464]	@ (80018b8 <PARM_load+0x1dc>)
 80016e8:	603b      	str	r3, [r7, #0]

	paramRc.OPTIONS = 0;
 80016ea:	4b74      	ldr	r3, [pc, #464]	@ (80018bc <PARM_load+0x1e0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	711a      	strb	r2, [r3, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	715a      	strb	r2, [r3, #5]
	paramRc.OVERRIDE_TIME = 0.0;
 80016f4:	4b71      	ldr	r3, [pc, #452]	@ (80018bc <PARM_load+0x1e0>)
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
//	paramRc.PROTOCOLS = (0x00);
//	paramRc.PROTOCOLS = (0x1<<SRXL2);
	paramRc.PROTOCOLS = (0x1<<PPM);
 80016fc:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <PARM_load+0x1e0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f042 0202 	orr.w	r2, r2, #2
 8001704:	719a      	strb	r2, [r3, #6]
 8001706:	2200      	movs	r2, #0
 8001708:	71da      	strb	r2, [r3, #7]
	paramRc.FS_TIMEOUT = 1.0;
 800170a:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <PARM_load+0x1e0>)
 800170c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001710:	609a      	str	r2, [r3, #8]
	paramRc.reversedMask = 0x00;
 8001712:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <PARM_load+0x1e0>)
 8001714:	2200      	movs	r2, #0
 8001716:	731a      	strb	r2, [r3, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	735a      	strb	r2, [r3, #13]
 800171c:	2200      	movs	r2, #0
 800171e:	739a      	strb	r2, [r3, #14]
 8001720:	2200      	movs	r2, #0
 8001722:	73da      	strb	r2, [r3, #15]

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e03b      	b.n	80017a2 <PARM_load+0xc6>
	{
		paramRcCH[i].MIN = 1000;
 800172a:	4965      	ldr	r1, [pc, #404]	@ (80018c0 <PARM_load+0x1e4>)
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	440b      	add	r3, r1
 8001736:	2200      	movs	r2, #0
 8001738:	f062 0217 	orn	r2, r2, #23
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	f042 0203 	orr.w	r2, r2, #3
 8001744:	705a      	strb	r2, [r3, #1]
		paramRcCH[i].MAX = 2000;
 8001746:	495e      	ldr	r1, [pc, #376]	@ (80018c0 <PARM_load+0x1e4>)
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	440b      	add	r3, r1
 8001752:	2200      	movs	r2, #0
 8001754:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001758:	709a      	strb	r2, [r3, #2]
 800175a:	2200      	movs	r2, #0
 800175c:	f042 0207 	orr.w	r2, r2, #7
 8001760:	70da      	strb	r2, [r3, #3]
		paramRcCH[i].TRIM = 0;
 8001762:	4957      	ldr	r1, [pc, #348]	@ (80018c0 <PARM_load+0x1e4>)
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	440b      	add	r3, r1
 800176e:	2200      	movs	r2, #0
 8001770:	711a      	strb	r2, [r3, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	715a      	strb	r2, [r3, #5]
		paramRcCH[i].DZ = 0;
 8001776:	4952      	ldr	r1, [pc, #328]	@ (80018c0 <PARM_load+0x1e4>)
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	440b      	add	r3, r1
 8001782:	3306      	adds	r3, #6
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
		paramRcCH[i].OPTION = 0;
 8001788:	494d      	ldr	r1, [pc, #308]	@ (80018c0 <PARM_load+0x1e4>)
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	440b      	add	r3, r1
 8001794:	2200      	movs	r2, #0
 8001796:	71da      	strb	r2, [r3, #7]
 8001798:	2200      	movs	r2, #0
 800179a:	721a      	strb	r2, [r3, #8]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	ddc0      	ble.n	800172a <PARM_load+0x4e>

//	paramRcMap.THR = 0;
//	paramRcMap.ROL = 1;
//	paramRcMap.PIT = 2;
//	paramRcMap.YAW = 3;
	paramRcMap.THR = 2;
 80017a8:	4b46      	ldr	r3, [pc, #280]	@ (80018c4 <PARM_load+0x1e8>)
 80017aa:	2202      	movs	r2, #2
 80017ac:	701a      	strb	r2, [r3, #0]
	paramRcMap.ROL = 3;
 80017ae:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <PARM_load+0x1e8>)
 80017b0:	2203      	movs	r2, #3
 80017b2:	705a      	strb	r2, [r3, #1]
	paramRcMap.PIT = 1;
 80017b4:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <PARM_load+0x1e8>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	709a      	strb	r2, [r3, #2]
	paramRcMap.YAW = 0;
 80017ba:	4b42      	ldr	r3, [pc, #264]	@ (80018c4 <PARM_load+0x1e8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	70da      	strb	r2, [r3, #3]

	servo->AUTO_TRIM = 0;
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	7813      	ldrb	r3, [r2, #0]
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	7013      	strb	r3, [r2, #0]
	servo->DSHOT_ESC = 0;
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	78d3      	ldrb	r3, [r2, #3]
 80017ce:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80017d2:	70d3      	strb	r3, [r2, #3]
	servo->DSHOT_RATE = 0;
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	78d3      	ldrb	r3, [r2, #3]
 80017d8:	f023 0307 	bic.w	r3, r3, #7
 80017dc:	70d3      	strb	r3, [r2, #3]
	servo->RATE = 50;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80017e6:	705a      	strb	r2, [r3, #1]
 80017e8:	2200      	movs	r2, #0
 80017ea:	709a      	strb	r2, [r3, #2]
	servo->GPIO_MASK = 0xFF;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	711a      	strb	r2, [r3, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	715a      	strb	r2, [r3, #5]
 80017f8:	2200      	movs	r2, #0
 80017fa:	719a      	strb	r2, [r3, #6]
 80017fc:	2200      	movs	r2, #0
 80017fe:	71da      	strb	r2, [r3, #7]
	servo->RC_FS_MSK = 0xFF;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 32ff 	mov.w	r2, #4294967295
 8001806:	721a      	strb	r2, [r3, #8]
 8001808:	2200      	movs	r2, #0
 800180a:	725a      	strb	r2, [r3, #9]
	servo->_32_ENABLE = 0;
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	7a93      	ldrb	r3, [r2, #10]
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	7293      	strb	r3, [r2, #10]

	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	e040      	b.n	800189e <PARM_load+0x1c2>
		servo_ch[i].FUNCTION = 0;
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	71da      	strb	r2, [r3, #7]
 800182c:	2200      	movs	r2, #0
 800182e:	721a      	strb	r2, [r3, #8]
		servo_ch[i].MAX = 2000;
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	2200      	movs	r2, #0
 800183e:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001842:	709a      	strb	r2, [r3, #2]
 8001844:	2200      	movs	r2, #0
 8001846:	f042 0207 	orr.w	r2, r2, #7
 800184a:	70da      	strb	r2, [r3, #3]
		servo_ch[i].MIN = 1000;
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4413      	add	r3, r2
 8001858:	2200      	movs	r2, #0
 800185a:	f062 0217 	orn	r2, r2, #23
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	f042 0203 	orr.w	r2, r2, #3
 8001866:	705a      	strb	r2, [r3, #1]
		servo_ch[i].TRIM = 1500;
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	f062 0223 	orn	r2, r2, #35	@ 0x23
 800187a:	711a      	strb	r2, [r3, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f042 0205 	orr.w	r2, r2, #5
 8001882:	715a      	strb	r2, [r3, #5]
		servo_ch[i].REVERSED = 0;
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	441a      	add	r2, r3
 8001890:	7993      	ldrb	r3, [r2, #6]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	7193      	strb	r3, [r2, #6]
	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	3301      	adds	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b0b      	cmp	r3, #11
 80018a2:	ddbb      	ble.n	800181c <PARM_load+0x140>
	}
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200002e8 	.word	0x200002e8
 80018b8:	200002f4 	.word	0x200002f4
 80018bc:	20000360 	.word	0x20000360
 80018c0:	20000370 	.word	0x20000370
 80018c4:	20000414 	.word	0x20000414

080018c8 <LL_TIM_EnableCounter>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_TIM_CC_EnableChannel>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	621a      	str	r2, [r3, #32]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <PPM_init>:
 * @brief PPM 입력을 위한 타이머 설정
 * @detail RC_Initialization()에서 실행됨
 * @retval 0 : 정상 수신
 */
int PPM_init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	/*
	 * TIM1은 168MHz이고 PPM은 일반적으로 20ms 이므로
	 */
	const int hz = 50;
 8001912:	2332      	movs	r3, #50	@ 0x32
 8001914:	607b      	str	r3, [r7, #4]
	TIM1->ARR = 1000000/hz-1;
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <PPM_init+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	fb92 f3f3 	sdiv	r3, r2, r3
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <PPM_init+0x44>)
 8001922:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 168-1;
 8001924:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <PPM_init+0x44>)
 8001926:	22a7      	movs	r2, #167	@ 0xa7
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->CCR4 = TIM1->ARR;
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <PPM_init+0x44>)
 800192c:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <PPM_init+0x44>)
 800192e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001930:	6413      	str	r3, [r2, #64]	@ 0x40

	LL_TIM_EnableCounter(TIM1);
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <PPM_init+0x44>)
 8001934:	f7ff ffc8 	bl	80018c8 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8001938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <PPM_init+0x44>)
 800193e:	f7ff ffd3 	bl	80018e8 <LL_TIM_CC_EnableChannel>
	return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	000f4240 	.word	0x000f4240
 8001950:	40010000 	.word	0x40010000

08001954 <PPM_readData>:
 * @parm timer 데이터 (ms 단위)
 * @retval 0 : 정상 수신
 * @retval 1 : 이상 데이터
 */
int PPM_readData(uint16_t data)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
	static uint16_t previous = 0;
    static uint8_t cnt = 0;
	uint16_t rx = system_time.time_unix_usec - previous;
 800195e:	491b      	ldr	r1, [pc, #108]	@ (80019cc <PPM_readData+0x78>)
 8001960:	680a      	ldr	r2, [r1, #0]
 8001962:	684b      	ldr	r3, [r1, #4]
 8001964:	b292      	uxth	r2, r2
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <PPM_readData+0x7c>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	81fb      	strh	r3, [r7, #14]

	previous = system_time.time_unix_usec;
 800196e:	4917      	ldr	r1, [pc, #92]	@ (80019cc <PPM_readData+0x78>)
 8001970:	680a      	ldr	r2, [r1, #0]
 8001972:	684b      	ldr	r3, [r1, #4]
 8001974:	b292      	uxth	r2, r2
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <PPM_readData+0x7c>)
 8001978:	801a      	strh	r2, [r3, #0]

    if(rx>2500) cnt = 0;
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001980:	4293      	cmp	r3, r2
 8001982:	d902      	bls.n	800198a <PPM_readData+0x36>
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <PPM_readData+0x80>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	if(rx>2200 || rx<800) return 1;
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	f640 0298 	movw	r2, #2200	@ 0x898
 8001990:	4293      	cmp	r3, r2
 8001992:	d803      	bhi.n	800199c <PPM_readData+0x48>
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800199a:	d201      	bcs.n	80019a0 <PPM_readData+0x4c>
 800199c:	2301      	movs	r3, #1
 800199e:	e00e      	b.n	80019be <PPM_readData+0x6a>

	((uint16_t*)RC_Buffer)[cnt] = rx;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <PPM_readData+0x84>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <PPM_readData+0x80>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	89fa      	ldrh	r2, [r7, #14]
 80019ae:	801a      	strh	r2, [r3, #0]
//	RC_channels.value[cnt] = rx;
    cnt++;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <PPM_readData+0x80>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <PPM_readData+0x80>)
 80019ba:	701a      	strb	r2, [r3, #0]

	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000458 	.word	0x20000458
 80019d0:	20000418 	.word	0x20000418
 80019d4:	2000041a 	.word	0x2000041a
 80019d8:	20000450 	.word	0x20000450

080019dc <PPM_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval 0xf2 : FailSafe
 */
int PPM_getControlData(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
	PARAM_RC* param = &paramRc;
 80019e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b54 <PPM_getControlData+0x178>)
 80019e4:	613b      	str	r3, [r7, #16]
	PARAM_RC_CH* paramCh = paramRcCH;
 80019e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b58 <PPM_getControlData+0x17c>)
 80019e8:	60fb      	str	r3, [r7, #12]
	RC_CHANNELS* rc = &RC_channels;
 80019ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <PPM_getControlData+0x180>)
 80019ec:	60bb      	str	r3, [r7, #8]

	if(RC_isBufferInit() != 0) return -1;
 80019ee:	f000 fd85 	bl	80024fc <RC_isBufferInit>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <PPM_getControlData+0x22>
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e0a5      	b.n	8001b4a <PPM_getControlData+0x16e>

	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e09d      	b.n	8001b40 <PPM_getControlData+0x164>
		// Reverse 처리
		uint16_t value = ((uint16_t*)RC_Buffer)[i];
 8001a04:	4b56      	ldr	r3, [pc, #344]	@ (8001b60 <PPM_getControlData+0x184>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	80fb      	strh	r3, [r7, #6]
		if((param->reversedMask>>i)&0x01)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d02c      	beq.n	8001a7e <PPM_getControlData+0xa2>
		{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001a30:	885b      	ldrh	r3, [r3, #2]
 8001a32:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	88f8      	ldrh	r0, [r7, #6]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a52:	f000 fe1b 	bl	800268c <map>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	460a      	mov	r2, r1
 8001a78:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001a7c:	e02b      	b.n	8001ad6 <PPM_getControlData+0xfa>
		}
		else{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001a9a:	885b      	ldrh	r3, [r3, #2]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	88f8      	ldrh	r0, [r7, #6]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001aa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aac:	f000 fdee 	bl	800268c <map>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	799b      	ldrb	r3, [r3, #6]
 8001af4:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001af8:	3304      	adds	r3, #4
 8001afa:	4299      	cmp	r1, r3
 8001afc:	dd1d      	ble.n	8001b3a <PPM_getControlData+0x15e>
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	799b      	ldrb	r3, [r3, #6]
 8001b0c:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	440b      	add	r3, r1
 8001b18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	db0b      	blt.n	8001b3a <PPM_getControlData+0x15e>
			rc->value[i] = 1500;
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001b30:	715a      	strb	r2, [r3, #5]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f042 0205 	orr.w	r2, r2, #5
 8001b38:	719a      	strb	r2, [r3, #6]
	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	f77f af5e 	ble.w	8001a04 <PPM_getControlData+0x28>
		}
	}

	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000360 	.word	0x20000360
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	200004ac 	.word	0x200004ac
 8001b60:	20000450 	.word	0x20000450

08001b64 <SRXL2_connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_connect(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <SRXL2_connect+0xa8>)
 8001b6c:	617b      	str	r3, [r7, #20]

	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001b6e:	f000 fa97 	bl	80020a0 <SRXL2_isReceived>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d138      	bne.n	8001bea <SRXL2_connect+0x86>

		switch(header->pType)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b21      	cmp	r3, #33	@ 0x21
 8001b7e:	d003      	beq.n	8001b88 <SRXL2_connect+0x24>
 8001b80:	2bcd      	cmp	r3, #205	@ 0xcd
 8001b82:	d134      	bne.n	8001bee <SRXL2_connect+0x8a>
		{
		case SRXL_CTRL_ID:
			//Bind 정보 요청 또는 unbind 후 재 연결하도록 작성
			return 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	e03c      	b.n	8001c02 <SRXL2_connect+0x9e>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <SRXL2_connect+0xac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10e      	bne.n	8001bba <SRXL2_connect+0x56>
			{
				receiver_info.SrcID = rx->SrcID;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <SRXL2_connect+0xb0>)
 8001ba2:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	791a      	ldrb	r2, [r3, #4]
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <SRXL2_connect+0xb0>)
 8001baa:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <SRXL2_connect+0xb0>)
 8001bb4:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 8001bb8:	e000      	b.n	8001bbc <SRXL2_connect+0x58>
			}
			break;
 8001bba:	bf00      	nop
		default:
			continue;
		}

		break;
 8001bbc:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 8001bbe:	23a6      	movs	r3, #166	@ 0xa6
 8001bc0:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 8001bc2:	2321      	movs	r3, #33	@ 0x21
 8001bc4:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 8001bca:	2330      	movs	r3, #48	@ 0x30
 8001bcc:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <SRXL2_connect+0xb0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 8001bd4:	2360      	movs	r3, #96	@ 0x60
 8001bd6:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <SRXL2_connect+0xb4>)
 8001be2:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 8001be4:	2300      	movs	r3, #0
 8001be6:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 8001be8:	e003      	b.n	8001bf2 <SRXL2_connect+0x8e>
		if(SRXL2_isReceived()!=0) continue;
 8001bea:	bf00      	nop
 8001bec:	e7bf      	b.n	8001b6e <SRXL2_connect+0xa>
			continue;
 8001bee:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001bf0:	e7bd      	b.n	8001b6e <SRXL2_connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f96f 	bl	8001ed8 <SRXL2_doHandshake>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f8      	bne.n	8001bf2 <SRXL2_connect+0x8e>

	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000041c 	.word	0x2000041c
 8001c10:	20000450 	.word	0x20000450
 8001c14:	20000434 	.word	0x20000434
 8001c18:	12345678 	.word	0x12345678

08001c1c <SRXL2_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int SRXL2_getControlData(void){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	SRXL2_Header* header = &packet.header;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <SRXL2_getControlData+0x70>)
 8001c24:	607b      	str	r3, [r7, #4]
	SRXL2_Control_Packet* rx = (SRXL2_Control_Packet*)RC_Buffer;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <SRXL2_getControlData+0x74>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	603b      	str	r3, [r7, #0]

	if(SRXL2_isReceived()!=0) return -1;
 8001c2c:	f000 fa38 	bl	80020a0 <SRXL2_isReceived>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <SRXL2_getControlData+0x20>
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e022      	b.n	8001c82 <SRXL2_getControlData+0x66>
	if(header->pType != SRXL_CTRL_ID) return -2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	785b      	ldrb	r3, [r3, #1]
 8001c40:	2bcd      	cmp	r3, #205	@ 0xcd
 8001c42:	d002      	beq.n	8001c4a <SRXL2_getControlData+0x2e>
 8001c44:	f06f 0301 	mvn.w	r3, #1
 8001c48:	e01b      	b.n	8001c82 <SRXL2_getControlData+0x66>

	// rssi, frameLoss, Fail-safe 기능 등 구현

	switch(rx->Command){
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d816      	bhi.n	8001c80 <SRXL2_getControlData+0x64>
 8001c52:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <SRXL2_getControlData+0x3c>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c81 	.word	0x08001c81
 8001c64:	08001c81 	.word	0x08001c81
	case SRXL_CTRL_CMD_CHANNEL:
		// SRXL2_SendTelemetryData();
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <SRXL2_getControlData+0x74>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f811 	bl	8001c94 <SRXL2_parseControlData>
		break;
 8001c72:	e005      	b.n	8001c80 <SRXL2_getControlData+0x64>
	case SRXL_CTRL_CMD_CHANNEL_FS:
		return RC_setFailsafe(0x1<<8);
 8001c74:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c78:	f000 fcaa 	bl	80025d0 <RC_setFailsafe>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	e000      	b.n	8001c82 <SRXL2_getControlData+0x66>
		break;
	case SRXL_CTRL_CMD_FWDPGM:
		break;
	}

	return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000041c 	.word	0x2000041c
 8001c90:	20000450 	.word	0x20000450

08001c94 <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	6078      	str	r0, [r7, #4]
	PARAM_RC* param = &paramRc;
 8001c9c:	4b88      	ldr	r3, [pc, #544]	@ (8001ec0 <SRXL2_parseControlData+0x22c>)
 8001c9e:	617b      	str	r3, [r7, #20]
	PARAM_RC_CH* paramCh = paramRcCH;
 8001ca0:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <SRXL2_parseControlData+0x230>)
 8001ca2:	613b      	str	r3, [r7, #16]
	RC_CHANNELS* rc = &RC_channels;
 8001ca4:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <SRXL2_parseControlData+0x234>)
 8001ca6:	60fb      	str	r3, [r7, #12]

	uint8_t channelCnt = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e0c2      	b.n	8001e38 <SRXL2_parseControlData+0x1a4>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80b5 	beq.w	8001e30 <SRXL2_parseControlData+0x19c>
		if(i>=RC_CHANNEL_MAX) break;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b11      	cmp	r3, #17
 8001cca:	f300 80ba 	bgt.w	8001e42 <SRXL2_parseControlData+0x1ae>

		uint16_t value = rx->data.values[channelCnt];
 8001cce:	7ff9      	ldrb	r1, [r7, #31]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	004b      	lsls	r3, r1, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	7b18      	ldrb	r0, [r3, #12]
 8001cd8:	004b      	lsls	r3, r1, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	7b5b      	ldrb	r3, [r3, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	4303      	orrs	r3, r0
 8001ce2:	817b      	strh	r3, [r7, #10]
		channelCnt++;
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf38      	it	cc
 8001cf4:	4613      	movcc	r3, r2
 8001cf6:	817b      	strh	r3, [r7, #10]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bf28      	it	cs
 8001d02:	4613      	movcs	r3, r2
 8001d04:	817b      	strh	r3, [r7, #10]

		// Reverse 처리
		if((param->reversedMask>>i)&0x01)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02c      	beq.n	8001d72 <SRXL2_parseControlData+0xde>
		{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d24:	885b      	ldrh	r3, [r3, #2]
 8001d26:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	8978      	ldrh	r0, [r7, #10]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001d42:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001d46:	f000 fca1 	bl	800268c <map>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	440b      	add	r3, r1
 8001d60:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001d70:	e02b      	b.n	8001dca <SRXL2_parseControlData+0x136>
		}
		else{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	8978      	ldrh	r0, [r7, #10]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001d9c:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001da0:	f000 fc74 	bl	800268c <map>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	440b      	add	r3, r1
 8001dba:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	799b      	ldrb	r3, [r3, #6]
 8001de8:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001dec:	3304      	adds	r3, #4
 8001dee:	4299      	cmp	r1, r3
 8001df0:	dd1f      	ble.n	8001e32 <SRXL2_parseControlData+0x19e>
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	429a      	cmp	r2, r3
 8001e14:	db0d      	blt.n	8001e32 <SRXL2_parseControlData+0x19e>
			rc->value[i] = 1500;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001e24:	715a      	strb	r2, [r3, #5]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f042 0205 	orr.w	r2, r2, #5
 8001e2c:	719a      	strb	r2, [r3, #6]
 8001e2e:	e000      	b.n	8001e32 <SRXL2_parseControlData+0x19e>
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001e30:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b1f      	cmp	r3, #31
 8001e3c:	f77f af39 	ble.w	8001cb2 <SRXL2_parseControlData+0x1e>
 8001e40:	e000      	b.n	8001e44 <SRXL2_parseControlData+0x1b0>
		if(i>=RC_CHANNEL_MAX) break;
 8001e42:	bf00      	nop
		}
	}

	if(system_time.time_boot_ms - previousTime > 2000){
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <SRXL2_parseControlData+0x238>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <SRXL2_parseControlData+0x23c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e52:	d906      	bls.n	8001e62 <SRXL2_parseControlData+0x1ce>
		previousTime = system_time.time_boot_ms;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <SRXL2_parseControlData+0x238>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <SRXL2_parseControlData+0x23c>)
 8001e5a:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <SRXL2_parseControlData+0x240>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	}

	channelMask |= rx->data.mask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <SRXL2_parseControlData+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <SRXL2_parseControlData+0x240>)
 8001e6e:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <SRXL2_parseControlData+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f9d4 	bl	8002222 <countSetBits>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <SRXL2_parseControlData+0x238>)
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]

	/*
	 * SRXL2에서 rssi가 양수면 %값, 음수면 dBm 값임.
	 * MAVLink는 %값을 0-254 범위로 표현함
	 */
	if(!(rx->data.rssi&0x80)){
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0f      	blt.n	8001eb4 <SRXL2_parseControlData+0x220>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001e9a:	b298      	uxth	r0, r3
 8001e9c:	23fe      	movs	r3, #254	@ 0xfe
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2264      	movs	r2, #100	@ 0x64
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f000 fbf1 	bl	800268c <map>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000360 	.word	0x20000360
 8001ec4:	20000370 	.word	0x20000370
 8001ec8:	200004ac 	.word	0x200004ac
 8001ecc:	20000458 	.word	0x20000458
 8001ed0:	20000440 	.word	0x20000440
 8001ed4:	20000444 	.word	0x20000444

08001ed8 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3303      	adds	r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	2b0e      	cmp	r3, #14
 8001ef0:	d002      	beq.n	8001ef8 <SRXL2_doHandshake+0x20>
 8001ef2:	f06f 0301 	mvn.w	r3, #1
 8001ef6:	e029      	b.n	8001f4c <SRXL2_doHandshake+0x74>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001ef8:	f000 f8d2 	bl	80020a0 <SRXL2_isReceived>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d114      	bne.n	8001f2c <SRXL2_doHandshake+0x54>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <SRXL2_doHandshake+0x7c>)
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b21      	cmp	r3, #33	@ 0x21
 8001f08:	d112      	bne.n	8001f30 <SRXL2_doHandshake+0x58>

		rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <SRXL2_doHandshake+0x80>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3303      	adds	r3, #3
 8001f10:	60fb      	str	r3, [r7, #12]

		if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1ec      	bne.n	8001ef8 <SRXL2_doHandshake+0x20>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	785a      	ldrb	r2, [r3, #1]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d004      	beq.n	8001f34 <SRXL2_doHandshake+0x5c>
 8001f2a:	e7e5      	b.n	8001ef8 <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8001f2c:	bf00      	nop
 8001f2e:	e7e3      	b.n	8001ef8 <SRXL2_doHandshake+0x20>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8001f30:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001f32:	e7e1      	b.n	8001ef8 <SRXL2_doHandshake+0x20>
		{
			break;
 8001f34:	bf00      	nop
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f94f 	bl	80021de <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb5f 	bl	8002608 <RC_halfDuplex_Transmit>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000041c 	.word	0x2000041c
 8001f58:	20000450 	.word	0x20000450

08001f5c <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 8001f66:	f000 fac9 	bl	80024fc <RC_isBufferInit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <SRXL2_readByteIRQ2+0x1a>
 8001f70:	f06f 0301 	mvn.w	r3, #1
 8001f74:	e089      	b.n	800208a <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8001f7c:	d902      	bls.n	8001f84 <SRXL2_readByteIRQ2+0x28>
 8001f7e:	f06f 0301 	mvn.w	r3, #1
 8001f82:	e082      	b.n	800208a <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 8001f84:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <SRXL2_readByteIRQ2+0x36>
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d011      	beq.n	8001fb4 <SRXL2_readByteIRQ2+0x58>
 8001f90:	e052      	b.n	8002038 <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == SPEKTRUM_SRXL_ID){
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2ba6      	cmp	r3, #166	@ 0xa6
 8001f96:	d176      	bne.n	8002086 <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 8001f98:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <SRXL2_readByteIRQ2+0x13c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	701a      	strb	r2, [r3, #0]
			cnt++;
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8001fb0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001fb2:	e068      	b.n	8002086 <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	2bcd      	cmp	r3, #205	@ 0xcd
 8001fb8:	d026      	beq.n	8002008 <SRXL2_readByteIRQ2+0xac>
 8001fba:	2bcd      	cmp	r3, #205	@ 0xcd
 8001fbc:	dc28      	bgt.n	8002010 <SRXL2_readByteIRQ2+0xb4>
 8001fbe:	2b80      	cmp	r3, #128	@ 0x80
 8001fc0:	d01e      	beq.n	8002000 <SRXL2_readByteIRQ2+0xa4>
 8001fc2:	2b80      	cmp	r3, #128	@ 0x80
 8001fc4:	dc24      	bgt.n	8002010 <SRXL2_readByteIRQ2+0xb4>
 8001fc6:	2b55      	cmp	r3, #85	@ 0x55
 8001fc8:	d016      	beq.n	8001ff8 <SRXL2_readByteIRQ2+0x9c>
 8001fca:	2b55      	cmp	r3, #85	@ 0x55
 8001fcc:	dc20      	bgt.n	8002010 <SRXL2_readByteIRQ2+0xb4>
 8001fce:	2b50      	cmp	r3, #80	@ 0x50
 8001fd0:	d00e      	beq.n	8001ff0 <SRXL2_readByteIRQ2+0x94>
 8001fd2:	2b50      	cmp	r3, #80	@ 0x50
 8001fd4:	dc1c      	bgt.n	8002010 <SRXL2_readByteIRQ2+0xb4>
 8001fd6:	2b21      	cmp	r3, #33	@ 0x21
 8001fd8:	d002      	beq.n	8001fe0 <SRXL2_readByteIRQ2+0x84>
 8001fda:	2b41      	cmp	r3, #65	@ 0x41
 8001fdc:	d004      	beq.n	8001fe8 <SRXL2_readByteIRQ2+0x8c>
 8001fde:	e017      	b.n	8002010 <SRXL2_readByteIRQ2+0xb4>
		case SRXL_HANDSHAKE_ID:
			maxLen = 14;
 8001fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8001fe2:	220e      	movs	r2, #14
 8001fe4:	701a      	strb	r2, [r3, #0]
			break;
 8001fe6:	e019      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_BIND_ID:
			maxLen = 21;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8001fea:	2215      	movs	r2, #21
 8001fec:	701a      	strb	r2, [r3, #0]
			break;
 8001fee:	e015      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_PARAM_ID:
			maxLen = 14;
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8001ff2:	220e      	movs	r2, #14
 8001ff4:	701a      	strb	r2, [r3, #0]
			break;
 8001ff6:	e011      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_RSSI_ID:
			maxLen = 10;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8001ffa:	220a      	movs	r2, #10
 8001ffc:	701a      	strb	r2, [r3, #0]
			break;
 8001ffe:	e00d      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_TELEM_ID:
			maxLen = 22;
 8002000:	4b26      	ldr	r3, [pc, #152]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8002002:	2216      	movs	r2, #22
 8002004:	701a      	strb	r2, [r3, #0]
			break;
 8002006:	e009      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_CTRL_ID:
			maxLen = 80;
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 800200a:	2250      	movs	r2, #80	@ 0x50
 800200c:	701a      	strb	r2, [r3, #0]
			break;
 800200e:	e005      	b.n	800201c <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8002010:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
			return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e036      	b.n	800208a <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <SRXL2_readByteIRQ2+0x13c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	701a      	strb	r2, [r3, #0]
		cnt++;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002034:	701a      	strb	r2, [r3, #0]
		break;
 8002036:	e027      	b.n	8002088 <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <SRXL2_readByteIRQ2+0x13c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a15      	ldr	r2, [pc, #84]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4413      	add	r3, r2
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b50      	cmp	r3, #80	@ 0x50
 800204c:	d107      	bne.n	800205e <SRXL2_readByteIRQ2+0x102>
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <SRXL2_readByteIRQ2+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4413      	add	r3, r2
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 800205c:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <SRXL2_readByteIRQ2+0x140>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	429a      	cmp	r2, r3
 800206c:	d104      	bne.n	8002078 <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			return 0;
 8002074:	2300      	movs	r3, #0
 8002076:	e008      	b.n	800208a <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SRXL2_readByteIRQ2+0x138>)
 8002082:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002084:	e000      	b.n	8002088 <SRXL2_readByteIRQ2+0x12c>
		break;
 8002086:	bf00      	nop
	}
	return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000448 	.word	0x20000448
 8002098:	20000450 	.word	0x20000450
 800209c:	20000449 	.word	0x20000449

080020a0 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <SRXL2_isReceived+0xb0>)
 80020a8:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]

	if(RC_rxFlag.uart == 0)
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <SRXL2_isReceived+0xb4>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <SRXL2_isReceived+0x22>
	{
		return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e042      	b.n	8002148 <SRXL2_isReceived+0xa8>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 80020c2:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <SRXL2_isReceived+0xb4>)
 80020c4:	7813      	ldrb	r3, [r2, #0]
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	7013      	strb	r3, [r2, #0]

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	22a6      	movs	r2, #166	@ 0xa6
 80020d0:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 80020d2:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <SRXL2_isReceived+0xb8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	785a      	ldrb	r2, [r3, #1]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <SRXL2_isReceived+0xb8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	789a      	ldrb	r2, [r3, #2]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <SRXL2_isReceived+0xb8>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <SRXL2_isReceived+0xb8>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	789b      	ldrb	r3, [r3, #2]
 80020f8:	3b02      	subs	r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b21b      	sxth	r3, r3
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <SRXL2_isReceived+0xb8>)
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	3b01      	subs	r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21b      	sxth	r3, r3
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <SRXL2_isReceived+0xb8>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 f816 	bl	800215c <calculate_crc>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 800213a:	b29b      	uxth	r3, r3
 800213c:	429a      	cmp	r2, r3
 800213e:	d002      	beq.n	8002146 <SRXL2_isReceived+0xa6>
		return -2;
 8002140:	f06f 0301 	mvn.w	r3, #1
 8002144:	e000      	b.n	8002148 <SRXL2_isReceived+0xa8>
	}

	return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000041c 	.word	0x2000041c
 8002154:	2000044c 	.word	0x2000044c
 8002158:	20000450 	.word	0x20000450

0800215c <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8002168:	2300      	movs	r3, #0
 800216a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 800216c:	2300      	movs	r3, #0
 800216e:	737b      	strb	r3, [r7, #13]
 8002170:	e029      	b.n	80021c6 <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8002172:	7b7b      	ldrb	r3, [r7, #13]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b21b      	sxth	r3, r3
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002184:	4053      	eors	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 800218a:	2300      	movs	r3, #0
 800218c:	733b      	strb	r3, [r7, #12]
 800218e:	e014      	b.n	80021ba <calculate_crc+0x5e>
			if (crc & 0x8000)
 8002190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0a      	bge.n	80021ae <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8002198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	b21b      	sxth	r3, r3
 80021a0:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	81fb      	strh	r3, [r7, #14]
 80021ac:	e002      	b.n	80021b4 <calculate_crc+0x58>
			else
				crc = (crc << 1);
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80021b4:	7b3b      	ldrb	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	733b      	strb	r3, [r7, #12]
 80021ba:	7b3b      	ldrb	r3, [r7, #12]
 80021bc:	2b07      	cmp	r3, #7
 80021be:	d9e7      	bls.n	8002190 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	3301      	adds	r3, #1
 80021c4:	737b      	strb	r3, [r7, #13]
 80021c6:	7b7a      	ldrb	r2, [r7, #13]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	3b02      	subs	r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbd0      	blt.n	8002172 <calculate_crc+0x16>
		}
	}

	return crc;
 80021d0:	89fb      	ldrh	r3, [r7, #14]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffb4 	bl	800215c <calculate_crc>
 80021f4:	4603      	mov	r3, r0
 80021f6:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b299      	uxth	r1, r3
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	3b02      	subs	r3, #2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	3b01      	subs	r3, #1
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	89fa      	ldrh	r2, [r7, #14]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]

	return crc;
 8002218:	89fb      	ldrh	r3, [r7, #14]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002246:	4413      	add	r3, r2
 8002248:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	091a      	lsrs	r2, r3, #4
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002256:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	4413      	add	r3, r2
 8002260:	041a      	lsls	r2, r3, #16
 8002262:	4413      	add	r3, r2
 8002264:	0e1b      	lsrs	r3, r3, #24
 8002266:	b2db      	uxtb	r3, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_USART_IsActiveFlag_TXE>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b80      	cmp	r3, #128	@ 0x80
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_USART_TransmitData8>:
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_GPIO_SetOutputPin>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	619a      	str	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_GPIO_ResetOutputPin>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <RC_Initialization>:
/* Functions -----------------------------------------------------------------*/
/*
 * @brief RC 초기 설정
 */
int RC_Initialization(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80022fa:	2101      	movs	r1, #1
 80022fc:	482b      	ldr	r0, [pc, #172]	@ (80023ac <RC_Initialization+0xb8>)
 80022fe:	f7ff ffdb 	bl	80022b8 <LL_GPIO_SetOutputPin>

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	e031      	b.n	800236c <RC_Initialization+0x78>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <RC_Initialization+0xbc>)
 800230a:	88db      	ldrh	r3, [r3, #6]
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	fa42 f303 	asr.w	r3, r2, r3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d022      	beq.n	8002364 <RC_Initialization+0x70>

		switch(i){
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d003      	beq.n	800232c <RC_Initialization+0x38>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b08      	cmp	r3, #8
 8002328:	d00a      	beq.n	8002340 <RC_Initialization+0x4c>
 800232a:	e013      	b.n	8002354 <RC_Initialization+0x60>
		case PPM:
			RC_Buffer = malloc(PPM_MAX_BUFFER_SIZE*sizeof(uint16_t));
 800232c:	2010      	movs	r0, #16
 800232e:	f009 ffa7 	bl	800c280 <malloc>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <RC_Initialization+0xc0>)
 8002338:	601a      	str	r2, [r3, #0]
			PPM_init();
 800233a:	f7ff fae7 	bl	800190c <PPM_init>
			break;
 800233e:	e009      	b.n	8002354 <RC_Initialization+0x60>
		case SRXL2:
			RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 8002340:	2050      	movs	r0, #80	@ 0x50
 8002342:	f009 ff9d 	bl	800c280 <malloc>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <RC_Initialization+0xc0>)
 800234c:	601a      	str	r2, [r3, #0]
			SRXL2_connect();
 800234e:	f7ff fc09 	bl	8001b64 <SRXL2_connect>
			break;
 8002352:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <RC_Initialization+0xbc>)
 8002356:	889b      	ldrh	r3, [r3, #4]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <RC_Initialization+0x80>
 8002362:	e000      	b.n	8002366 <RC_Initialization+0x72>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002364:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3301      	adds	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d9ca      	bls.n	8002308 <RC_Initialization+0x14>
 8002372:	e008      	b.n	8002386 <RC_Initialization+0x92>
		else break;
 8002374:	bf00      	nop
	}

	while(RC_checkThrottle()){
 8002376:	e006      	b.n	8002386 <RC_Initialization+0x92>
		BuzzerEnableThrottleHigh();
 8002378:	f7fe fe76 	bl	8001068 <BuzzerEnableThrottleHigh>

		// ESC Calibration
		if(RC_enterESCcalibration()==0) break;
 800237c:	f000 f8ee 	bl	800255c <RC_enterESCcalibration>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <RC_Initialization+0x9e>
	while(RC_checkThrottle()){
 8002386:	f000 f8cb 	bl	8002520 <RC_checkThrottle>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f3      	bne.n	8002378 <RC_Initialization+0x84>
 8002390:	e000      	b.n	8002394 <RC_Initialization+0xa0>
		if(RC_enterESCcalibration()==0) break;
 8002392:	bf00      	nop
	}

	BuzzerDisableThrottleHigh();
 8002394:	f7fe fe80 	bl	8001098 <BuzzerDisableThrottleHigh>
	LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002398:	2101      	movs	r1, #1
 800239a:	4804      	ldr	r0, [pc, #16]	@ (80023ac <RC_Initialization+0xb8>)
 800239c:	f7ff ff9a 	bl	80022d4 <LL_GPIO_ResetOutputPin>

	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	20000360 	.word	0x20000360
 80023b4:	20000450 	.word	0x20000450

080023b8 <RC_GetData>:
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int RC_GetData(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	int retVal = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	e025      	b.n	8002414 <RC_GetData+0x5c>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <RC_GetData+0x90>)
 80023ca:	88db      	ldrh	r3, [r3, #6]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	fa42 f303 	asr.w	r3, r2, r3
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <RC_GetData+0x54>

		switch(i){
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d003      	beq.n	80023ec <RC_GetData+0x34>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d004      	beq.n	80023f4 <RC_GetData+0x3c>
 80023ea:	e007      	b.n	80023fc <RC_GetData+0x44>
		case PPM:
			retVal = PPM_getControlData();
 80023ec:	f7ff faf6 	bl	80019dc <PPM_getControlData>
 80023f0:	6078      	str	r0, [r7, #4]
			break;
 80023f2:	e003      	b.n	80023fc <RC_GetData+0x44>
		case SRXL2:
			retVal = SRXL2_getControlData();
 80023f4:	f7ff fc12 	bl	8001c1c <SRXL2_getControlData>
 80023f8:	6078      	str	r0, [r7, #4]
			break;
 80023fa:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <RC_GetData+0x90>)
 80023fe:	889b      	ldrh	r3, [r3, #4]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <RC_GetData+0x64>
 800240a:	e000      	b.n	800240e <RC_GetData+0x56>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 800240c:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d9d6      	bls.n	80023c8 <RC_GetData+0x10>
 800241a:	e000      	b.n	800241e <RC_GetData+0x66>
		else break;
 800241c:	bf00      	nop
	}

	if(retVal == -1 || retVal ==-2) return retVal;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d003      	beq.n	800242e <RC_GetData+0x76>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f113 0f02 	cmn.w	r3, #2
 800242c:	d101      	bne.n	8002432 <RC_GetData+0x7a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e006      	b.n	8002440 <RC_GetData+0x88>
	if(retVal!=0xf2) fsFlag = 0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2bf2      	cmp	r3, #242	@ 0xf2
 8002436:	d002      	beq.n	800243e <RC_GetData+0x86>
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <RC_GetData+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]

	return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000360 	.word	0x20000360
 800244c:	200002e0 	.word	0x200002e0

08002450 <RC_receiveIRQ2>:
 * @retval 0 : IRQ2 처리 완료
 *
 * 모든 수신 패킷을 처리하면 RC_rxFlag를 1로 처리함.
 */
int RC_receiveIRQ2(const uint16_t data)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]

	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e03e      	b.n	80024de <RC_receiveIRQ2+0x8e>
	{
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <RC_receiveIRQ2+0xa4>)
 8002462:	88db      	ldrh	r3, [r3, #6]
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	fa42 f303 	asr.w	r3, r2, r3
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02f      	beq.n	80024d6 <RC_receiveIRQ2+0x86>

		switch(i){
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d003      	beq.n	8002484 <RC_receiveIRQ2+0x34>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d005      	beq.n	800248e <RC_receiveIRQ2+0x3e>
 8002482:	e020      	b.n	80024c6 <RC_receiveIRQ2+0x76>
		case PPM:
			PPM_readData(data);
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fa64 	bl	8001954 <PPM_readData>
			break;
 800248c:	e01b      	b.n	80024c6 <RC_receiveIRQ2+0x76>
		case SRXL2:
			// Half-Duplex에서 송신한 패킷을 무시
			if(RC_rxFlag.half_tx == 1) return 1;
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <RC_receiveIRQ2+0xa8>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <RC_receiveIRQ2+0x50>
 800249c:	2301      	movs	r3, #1
 800249e:	e024      	b.n	80024ea <RC_receiveIRQ2+0x9a>

			// 모든 바이트를 읽었는지 검사
			if(SRXL2_readByteIRQ2(data) == 0){
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fd59 	bl	8001f5c <SRXL2_readByteIRQ2>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <RC_receiveIRQ2+0x74>
				RC_rxFlag.uart = 1;
 80024b0:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <RC_receiveIRQ2+0xa8>)
 80024b2:	7813      	ldrb	r3, [r2, #0]
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	7013      	strb	r3, [r2, #0]
				RC_rxFlag.half_using = 0;
 80024ba:	4a0f      	ldr	r2, [pc, #60]	@ (80024f8 <RC_receiveIRQ2+0xa8>)
 80024bc:	7813      	ldrb	r3, [r2, #0]
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	7013      	strb	r3, [r2, #0]
			}
			break;
 80024c4:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(paramRc.OPTIONS&(0x1<<10)) continue;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <RC_receiveIRQ2+0xa4>)
 80024c8:	889b      	ldrh	r3, [r3, #4]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <RC_receiveIRQ2+0x96>
 80024d4:	e000      	b.n	80024d8 <RC_receiveIRQ2+0x88>
		if(!(paramRc.PROTOCOLS&(0x1<<i))) continue;
 80024d6:	bf00      	nop
	for(int i=0; i<8*sizeof(paramRc.PROTOCOLS); i++)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d9bd      	bls.n	8002460 <RC_receiveIRQ2+0x10>
 80024e4:	e000      	b.n	80024e8 <RC_receiveIRQ2+0x98>
		else break;
 80024e6:	bf00      	nop
	}



	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000360 	.word	0x20000360
 80024f8:	2000044c 	.word	0x2000044c

080024fc <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <RC_isBufferInit+0x20>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <RC_isBufferInit+0x12>
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	e000      	b.n	8002510 <RC_isBufferInit+0x14>
	return 0;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000450 	.word	0x20000450

08002520 <RC_checkThrottle>:
 * @parm None
 * @retval 0 : 쓰로틀 정상
 * @retval -1 : 쓰로틀 비정상
 */
int RC_checkThrottle(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	while(RC_GetData()){}
 8002524:	bf00      	nop
 8002526:	f7ff ff47 	bl	80023b8 <RC_GetData>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1fa      	bne.n	8002526 <RC_checkThrottle+0x6>
	if(RC_channels.value[paramRcMap.THR]>1050) return -1;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <RC_checkThrottle+0x34>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4a08      	ldr	r2, [pc, #32]	@ (8002558 <RC_checkThrottle+0x38>)
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002544:	4293      	cmp	r3, r2
 8002546:	d902      	bls.n	800254e <RC_checkThrottle+0x2e>
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	e000      	b.n	8002550 <RC_checkThrottle+0x30>

	return 0;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000414 	.word	0x20000414
 8002558:	200004ac 	.word	0x200004ac

0800255c <RC_enterESCcalibration>:
 * @parm None
 * @retval 1 : 5초가 지속되지 않았음.
 * @retval 0 : 캘리브레이션 수행됨
 */
int RC_enterESCcalibration()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	if(!(system_time.time_boot_ms - previous_time > 5000)) return 1;
 8002560:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <RC_enterESCcalibration+0x64>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <RC_enterESCcalibration+0x68>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d801      	bhi.n	8002576 <RC_enterESCcalibration+0x1a>
 8002572:	2301      	movs	r3, #1
 8002574:	e021      	b.n	80025ba <RC_enterESCcalibration+0x5e>
	previous_time = system_time.time_boot_ms;
 8002576:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <RC_enterESCcalibration+0x64>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <RC_enterESCcalibration+0x68>)
 800257c:	6013      	str	r3, [r2, #0]
	BuzzerDisableThrottleHigh();
 800257e:	f7fe fd8b 	bl	8001098 <BuzzerDisableThrottleHigh>

	while(1)
	{
		while(RC_GetData()){}
 8002582:	bf00      	nop
 8002584:	f7ff ff18 	bl	80023b8 <RC_GetData>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1fa      	bne.n	8002584 <RC_enterESCcalibration+0x28>
		if(RC_channels.value[paramRcMap.THR] > 1800){
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <RC_enterESCcalibration+0x6c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4a0e      	ldr	r2, [pc, #56]	@ (80025cc <RC_enterESCcalibration+0x70>)
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80025a2:	d903      	bls.n	80025ac <RC_enterESCcalibration+0x50>
			SERVO_doCalibrate(1);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f000 faa5 	bl	8002af4 <SERVO_doCalibrate>
			continue;
 80025aa:	e005      	b.n	80025b8 <RC_enterESCcalibration+0x5c>
		}
		SERVO_doCalibrate(0);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 faa1 	bl	8002af4 <SERVO_doCalibrate>
		break;
 80025b2:	bf00      	nop
	}
	return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <RC_enterESCcalibration+0x5e>
		while(RC_GetData()){}
 80025b8:	e7e3      	b.n	8002582 <RC_enterESCcalibration+0x26>
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000458 	.word	0x20000458
 80025c4:	20000454 	.word	0x20000454
 80025c8:	20000414 	.word	0x20000414
 80025cc:	200004ac 	.word	0x200004ac

080025d0 <RC_setFailsafe>:
 * @brief Failsafe 모드로 진입
 *
 * @retval 0 : Failsafe 해제됨
 */
int RC_setFailsafe(uint16_t protocol)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
	if(paramRc.OPTIONS&(0x1<<10)){
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <RC_setFailsafe+0x30>)
 80025dc:	889b      	ldrh	r3, [r3, #4]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <RC_setFailsafe+0x1c>
		// 수신기 하나에서 FS 임을 알림
		return 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e003      	b.n	80025f4 <RC_setFailsafe+0x24>
	}

	fsFlag = 1;
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <RC_setFailsafe+0x34>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]

	return 0xf2;
 80025f2:	23f2      	movs	r3, #242	@ 0xf2
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20000360 	.word	0x20000360
 8002604:	200002e0 	.word	0x200002e0

08002608 <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 8002614:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <RC_halfDuplex_Transmit+0x7c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <RC_halfDuplex_Transmit+0x20>
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e028      	b.n	800267a <RC_halfDuplex_Transmit+0x72>

	RC_rxFlag.half_using = 1;
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <RC_halfDuplex_Transmit+0x7c>)
 800262a:	7813      	ldrb	r3, [r2, #0]
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 8002632:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <RC_halfDuplex_Transmit+0x7c>)
 8002634:	7813      	ldrb	r3, [r2, #0]
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e011      	b.n	8002666 <RC_halfDuplex_Transmit+0x5e>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 8002642:	bf00      	nop
 8002644:	4810      	ldr	r0, [pc, #64]	@ (8002688 <RC_halfDuplex_Transmit+0x80>)
 8002646:	f7ff fe15 	bl	8002274 <LL_USART_IsActiveFlag_TXE>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f9      	beq.n	8002644 <RC_halfDuplex_Transmit+0x3c>
		LL_USART_TransmitData8(USART1, data[i]);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	480b      	ldr	r0, [pc, #44]	@ (8002688 <RC_halfDuplex_Transmit+0x80>)
 800265c:	f7ff fe1d 	bl	800229a <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbe9      	blt.n	8002642 <RC_halfDuplex_Transmit+0x3a>
	}

	RC_rxFlag.half_tx = 0;
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <RC_halfDuplex_Transmit+0x7c>)
 8002670:	7813      	ldrb	r3, [r2, #0]
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	7013      	strb	r3, [r2, #0]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000044c 	.word	0x2000044c
 8002688:	40011000 	.word	0x40011000

0800268c <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800268c:	b490      	push	{r4, r7}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4623      	mov	r3, r4
 800269c:	80fb      	strh	r3, [r7, #6]
 800269e:	4603      	mov	r3, r0
 80026a0:	80bb      	strh	r3, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
 80026a6:	4613      	mov	r3, r2
 80026a8:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	88bb      	ldrh	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	8a39      	ldrh	r1, [r7, #16]
 80026b2:	883a      	ldrh	r2, [r7, #0]
 80026b4:	1a8a      	subs	r2, r1, r2
 80026b6:	fb03 f202 	mul.w	r2, r3, r2
 80026ba:	8879      	ldrh	r1, [r7, #2]
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	883b      	ldrh	r3, [r7, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	b29b      	uxth	r3, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc90      	pop	{r4, r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_TIM_EnableCounter>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_TIM_CC_EnableChannel>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	621a      	str	r2, [r3, #32]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
void SERVO_Initialization(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	// PARAM_SERVO* servo = &paramServo;

	LL_TIM_EnableCounter(TIM1);
 800273c:	4807      	ldr	r0, [pc, #28]	@ (800275c <SERVO_Initialization+0x24>)
 800273e:	f7ff ffca 	bl	80026d6 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8002742:	4807      	ldr	r0, [pc, #28]	@ (8002760 <SERVO_Initialization+0x28>)
 8002744:	f7ff ffc7 	bl	80026d6 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM4);
 8002748:	4806      	ldr	r0, [pc, #24]	@ (8002764 <SERVO_Initialization+0x2c>)
 800274a:	f7ff ffc4 	bl	80026d6 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 800274e:	4806      	ldr	r0, [pc, #24]	@ (8002768 <SERVO_Initialization+0x30>)
 8002750:	f7ff ffc1 	bl	80026d6 <LL_TIM_EnableCounter>

	SERVO_doDisarm();
 8002754:	f000 f8ca 	bl	80028ec <SERVO_doDisarm>

	return;
 8002758:	bf00      	nop
}
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00

0800276c <configurePWM>:
 * @parm uint16_t hz 50-490
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 800277c:	d802      	bhi.n	8002784 <configurePWM+0x18>
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	2b31      	cmp	r3, #49	@ 0x31
 8002782:	d801      	bhi.n	8002788 <configurePWM+0x1c>
 8002784:	2301      	movs	r3, #1
 8002786:	e028      	b.n	80027da <configurePWM+0x6e>

	// PPM 입력이 활성화 되어 있으면 50Hz 고정하도록
	TIM1->ARR = 1000000/hz-1;
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <configurePWM+0x7c>)
 800278c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <configurePWM+0x80>)
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 84-1;
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <configurePWM+0x80>)
 8002798:	2253      	movs	r2, #83	@ 0x53
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->ARR = 1000000/hz-1;
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <configurePWM+0x7c>)
 80027a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <configurePWM+0x84>)
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 84-1;
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <configurePWM+0x84>)
 80027ac:	2253      	movs	r2, #83	@ 0x53
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM4->ARR = 1000000/hz-1;
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <configurePWM+0x7c>)
 80027b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <configurePWM+0x88>)
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 84-1;
 80027be:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <configurePWM+0x88>)
 80027c0:	2253      	movs	r2, #83	@ 0x53
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM5->ARR = 1000000/hz-1;
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <configurePWM+0x7c>)
 80027c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <configurePWM+0x8c>)
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM5->PSC = 84-1;
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <configurePWM+0x8c>)
 80027d4:	2253      	movs	r2, #83	@ 0x53
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28

	return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	000f4240 	.word	0x000f4240
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40000c00 	.word	0x40000c00

080027fc <SERVO_doArm>:


void SERVO_doArm(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <SERVO_doArm+0xd8>)
 8002804:	603b      	str	r3, [r7, #0]
	configurePWM(servo->RATE);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800280c:	b29b      	uxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ffac 	bl	800276c <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e055      	b.n	80028c6 <SERVO_doArm+0xca>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d048      	beq.n	80028be <SERVO_doArm+0xc2>

		TIM_TypeDef* timer;
		uint32_t ch;
		switch(SERVO_TIMER_MAP[i]>>4){
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	4a2a      	ldr	r2, [pc, #168]	@ (80028d8 <SERVO_doArm+0xdc>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	2b04      	cmp	r3, #4
 800283a:	d819      	bhi.n	8002870 <SERVO_doArm+0x74>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <SERVO_doArm+0x48>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002859 	.word	0x08002859
 8002848:	08002871 	.word	0x08002871
 800284c:	0800285f 	.word	0x0800285f
 8002850:	08002865 	.word	0x08002865
 8002854:	0800286b 	.word	0x0800286b
		case 1:
			timer = TIM1;
 8002858:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <SERVO_doArm+0xe0>)
 800285a:	60bb      	str	r3, [r7, #8]
			break;
 800285c:	e008      	b.n	8002870 <SERVO_doArm+0x74>
		case 3:
			timer = TIM3;
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <SERVO_doArm+0xe4>)
 8002860:	60bb      	str	r3, [r7, #8]
			break;
 8002862:	e005      	b.n	8002870 <SERVO_doArm+0x74>
		case 4:
			timer = TIM4;
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <SERVO_doArm+0xe8>)
 8002866:	60bb      	str	r3, [r7, #8]
			break;
 8002868:	e002      	b.n	8002870 <SERVO_doArm+0x74>
		case 5:
			timer = TIM5;
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <SERVO_doArm+0xec>)
 800286c:	60bb      	str	r3, [r7, #8]
			break;
 800286e:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <SERVO_doArm+0xdc>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b01      	subs	r3, #1
 800287c:	2b03      	cmp	r3, #3
 800287e:	d819      	bhi.n	80028b4 <SERVO_doArm+0xb8>
 8002880:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <SERVO_doArm+0x8c>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	0800289f 	.word	0x0800289f
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028ad 	.word	0x080028ad
		case 1:
			ch = LL_TIM_CHANNEL_CH1;
 8002898:	2301      	movs	r3, #1
 800289a:	607b      	str	r3, [r7, #4]
			break;
 800289c:	e00a      	b.n	80028b4 <SERVO_doArm+0xb8>
		case 2:
			ch = LL_TIM_CHANNEL_CH2;
 800289e:	2310      	movs	r3, #16
 80028a0:	607b      	str	r3, [r7, #4]
			break;
 80028a2:	e007      	b.n	80028b4 <SERVO_doArm+0xb8>
		case 3:
			ch = LL_TIM_CHANNEL_CH3;
 80028a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a8:	607b      	str	r3, [r7, #4]
			break;
 80028aa:	e003      	b.n	80028b4 <SERVO_doArm+0xb8>
		case 4:
			ch = LL_TIM_CHANNEL_CH4;
 80028ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b0:	607b      	str	r3, [r7, #4]
			break;
 80028b2:	bf00      	nop
		}

		LL_TIM_CC_EnableChannel(timer, ch);
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7ff ff1d 	bl	80026f6 <LL_TIM_CC_EnableChannel>
 80028bc:	e000      	b.n	80028c0 <SERVO_doArm+0xc4>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80028be:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	3301      	adds	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b0b      	cmp	r3, #11
 80028ca:	d9a6      	bls.n	800281a <SERVO_doArm+0x1e>
	}

	return;
 80028cc:	bf00      	nop
}
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200002e8 	.word	0x200002e8
 80028d8:	0800ebf8 	.word	0x0800ebf8
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40000c00 	.word	0x40000c00

080028ec <SERVO_doDisarm>:


void SERVO_doDisarm(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	LL_TIM_DisableAllOutputs(TIM1);
 80028f0:	4806      	ldr	r0, [pc, #24]	@ (800290c <SERVO_doDisarm+0x20>)
 80028f2:	f7ff ff11 	bl	8002718 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM3);
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <SERVO_doDisarm+0x24>)
 80028f8:	f7ff ff0e 	bl	8002718 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM4);
 80028fc:	4805      	ldr	r0, [pc, #20]	@ (8002914 <SERVO_doDisarm+0x28>)
 80028fe:	f7ff ff0b 	bl	8002718 <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM5);
 8002902:	4805      	ldr	r0, [pc, #20]	@ (8002918 <SERVO_doDisarm+0x2c>)
 8002904:	f7ff ff08 	bl	8002718 <LL_TIM_DisableAllOutputs>

	return;
 8002908:	bf00      	nop
}
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00

0800291c <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	calculateServoOutput();
 8002920:	f000 f804 	bl	800292c <calculateServoOutput>

	controlPWM();
 8002924:	f000 f83c 	bl	80029a0 <controlPWM>
	return;
 8002928:	bf00      	nop
}
 800292a:	bd80      	pop	{r7, pc}

0800292c <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 8002932:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <calculateServoOutput+0x64>)
 8002934:	603b      	str	r3, [r7, #0]

	servo_output_raw.time_usec = system_time.time_boot_ms;
 8002936:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <calculateServoOutput+0x68>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <calculateServoOutput+0x6c>)
 800293c:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e01b      	b.n	800297c <calculateServoOutput+0x50>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	79fa      	ldrb	r2, [r7, #7]
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00e      	beq.n	8002974 <calculateServoOutput+0x48>

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	79fa      	ldrb	r2, [r7, #7]
 800295a:	4910      	ldr	r1, [pc, #64]	@ (800299c <calculateServoOutput+0x70>)
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002964:	b298      	uxth	r0, r3
 8002966:	490c      	ldr	r1, [pc, #48]	@ (8002998 <calculateServoOutput+0x6c>)
 8002968:	0053      	lsls	r3, r2, #1
 800296a:	440b      	add	r3, r1
 800296c:	4602      	mov	r2, r0
 800296e:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002972:	e000      	b.n	8002976 <calculateServoOutput+0x4a>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002974:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	3301      	adds	r3, #1
 800297a:	71fb      	strb	r3, [r7, #7]
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2b0b      	cmp	r3, #11
 8002980:	d9e0      	bls.n	8002944 <calculateServoOutput+0x18>
	}

	return;
 8002982:	bf00      	nop
}
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200002e8 	.word	0x200002e8
 8002994:	20000458 	.word	0x20000458
 8002998:	20000484 	.word	0x20000484
 800299c:	200004ac 	.word	0x200004ac

080029a0 <controlPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void controlPWM(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
	PARAM_SERVO* servo = &paramServo;
 80029a6:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa0 <controlPWM+0x100>)
 80029a8:	607b      	str	r3, [r7, #4]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e06d      	b.n	8002a8c <controlPWM+0xec>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f202 	lsl.w	r2, r1, r2
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d060      	beq.n	8002a84 <controlPWM+0xe4>

		TIM_TypeDef* timer;
		switch(SERVO_TIMER_MAP[i]>>4){
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <controlPWM+0x104>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d818      	bhi.n	8002a04 <controlPWM+0x64>
 80029d2:	a201      	add	r2, pc, #4	@ (adr r2, 80029d8 <controlPWM+0x38>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029ed 	.word	0x080029ed
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	080029f3 	.word	0x080029f3
 80029e4:	080029f9 	.word	0x080029f9
 80029e8:	080029ff 	.word	0x080029ff
		case 1:
			timer = TIM1;
 80029ec:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa8 <controlPWM+0x108>)
 80029ee:	60bb      	str	r3, [r7, #8]
			break;
 80029f0:	e008      	b.n	8002a04 <controlPWM+0x64>
		case 3:
			timer = TIM3;
 80029f2:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <controlPWM+0x10c>)
 80029f4:	60bb      	str	r3, [r7, #8]
			break;
 80029f6:	e005      	b.n	8002a04 <controlPWM+0x64>
		case 4:
			timer = TIM4;
 80029f8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <controlPWM+0x110>)
 80029fa:	60bb      	str	r3, [r7, #8]
			break;
 80029fc:	e002      	b.n	8002a04 <controlPWM+0x64>
		case 5:
			timer = TIM5;
 80029fe:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <controlPWM+0x114>)
 8002a00:	60bb      	str	r3, [r7, #8]
			break;
 8002a02:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	4a27      	ldr	r2, [pc, #156]	@ (8002aa4 <controlPWM+0x104>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d838      	bhi.n	8002a86 <controlPWM+0xe6>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <controlPWM+0x7c>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a43 	.word	0x08002a43
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a6f 	.word	0x08002a6f
		case 1:
			timer->CCR1 = servo_output_raw.servo_raw[i];
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	4a22      	ldr	r2, [pc, #136]	@ (8002ab8 <controlPWM+0x118>)
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002a40:	e021      	b.n	8002a86 <controlPWM+0xe6>
		case 2:
			timer->CCR2 = servo_output_raw.servo_raw[i];
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <controlPWM+0x118>)
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002a56:	e016      	b.n	8002a86 <controlPWM+0xe6>
		case 3:
			timer->CCR3 = servo_output_raw.servo_raw[i];
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	@ (8002ab8 <controlPWM+0x118>)
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002a6c:	e00b      	b.n	8002a86 <controlPWM+0xe6>
		case 4:
			timer->CCR4 = servo_output_raw.servo_raw[i];
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <controlPWM+0x118>)
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002a82:	e000      	b.n	8002a86 <controlPWM+0xe6>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002a84:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b0b      	cmp	r3, #11
 8002a90:	d98e      	bls.n	80029b0 <controlPWM+0x10>
		}
	}

	return;
 8002a92:	bf00      	nop
}
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200002e8 	.word	0x200002e8
 8002aa4:	0800ebf8 	.word	0x0800ebf8
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	20000484 	.word	0x20000484

08002abc <SERVO_setFailsafe>:


void SERVO_setFailsafe(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 1000;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <SERVO_setFailsafe+0x30>)
 8002ac2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ac6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR1 = 1500;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <SERVO_setFailsafe+0x34>)
 8002aca:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ace:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 1500;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <SERVO_setFailsafe+0x34>)
 8002ad2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ad6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR4 = 1500;
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <SERVO_setFailsafe+0x30>)
 8002ada:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
	return;
 8002ae0:	bf00      	nop
}
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40000800 	.word	0x40000800
 8002af0:	40000400 	.word	0x40000400

08002af4 <SERVO_doCalibrate>:


void SERVO_doCalibrate(uint8_t mode)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
	if(mode)
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d024      	beq.n	8002b4e <SERVO_doCalibrate+0x5a>
	{
		configurePWM(50);
 8002b04:	2032      	movs	r0, #50	@ 0x32
 8002b06:	f7ff fe31 	bl	800276c <configurePWM>

		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	481a      	ldr	r0, [pc, #104]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b0e:	f7ff fdf2 	bl	80026f6 <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002b12:	2101      	movs	r1, #1
 8002b14:	4819      	ldr	r0, [pc, #100]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b16:	f7ff fdee 	bl	80026f6 <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	4817      	ldr	r0, [pc, #92]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b1e:	f7ff fdea 	bl	80026f6 <LL_TIM_CC_EnableChannel>
		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 8002b22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b26:	4814      	ldr	r0, [pc, #80]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b28:	f7ff fde5 	bl	80026f6 <LL_TIM_CC_EnableChannel>

		TIM4->CCR2 = 2000;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b2e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b32:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = 2000;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b36:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b3a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 2000;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b42:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR4 = 2000;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b46:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR2 = 1000;
		TIM3->CCR1 = 1000;
		TIM3->CCR2 = 1000;
		TIM4->CCR4 = 1000;
	}
	return;
 8002b4c:	e010      	b.n	8002b70 <SERVO_doCalibrate+0x7c>
		TIM4->CCR2 = 1000;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b54:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = 1000;
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 1000;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <SERVO_doCalibrate+0x88>)
 8002b60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b64:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR4 = 1000;
 8002b66:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <SERVO_doCalibrate+0x84>)
 8002b68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40
	return;
 8002b6e:	bf00      	nop
}
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000400 	.word	0x40000400

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	@ (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	@ (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	@ (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	@ 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b089      	sub	sp, #36	@ 0x24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	332c      	adds	r3, #44	@ 0x2c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002cae:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	e003      	b.n	8002cce <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	211f      	movs	r1, #31
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f003 011f 	and.w	r1, r3, #31
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d00:	bf00      	nop
 8002d02:	3724      	adds	r7, #36	@ 0x24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b08f      	sub	sp, #60	@ 0x3c
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	330c      	adds	r3, #12
 8002d42:	4619      	mov	r1, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d4e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	fa92 f2a2 	rbit	r2, r2
 8002d56:	613a      	str	r2, [r7, #16]
  return result;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8002d62:	2220      	movs	r2, #32
 8002d64:	e003      	b.n	8002d6e <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	40d3      	lsrs	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002d80:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002d84:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	6a39      	ldr	r1, [r7, #32]
 8002d88:	fa91 f1a1 	rbit	r1, r1
 8002d8c:	61f9      	str	r1, [r7, #28]
  return result;
 8002d8e:	69f9      	ldr	r1, [r7, #28]
 8002d90:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d94:	2900      	cmp	r1, #0
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8002d98:	2120      	movs	r1, #32
 8002d9a:	e003      	b.n	8002da4 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8002d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d9e:	fab1 f181 	clz	r1, r1
 8002da2:	b2c9      	uxtb	r1, r1
 8002da4:	40cb      	lsrs	r3, r1
 8002da6:	2107      	movs	r1, #7
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002db6:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002dba:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dbe:	fa91 f1a1 	rbit	r1, r1
 8002dc2:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8002dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dc6:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dca:	2900      	cmp	r1, #0
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8002dce:	2120      	movs	r1, #32
 8002dd0:	e003      	b.n	8002dda <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8002dd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dd4:	fab1 f181 	clz	r1, r1
 8002dd8:	b2c9      	uxtb	r1, r1
 8002dda:	40cb      	lsrs	r3, r1
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	431a      	orrs	r2, r3
 8002de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de6:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002de8:	bf00      	nop
 8002dea:	373c      	adds	r7, #60	@ 0x3c
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_SPI_SetStandard>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	605a      	str	r2, [r3, #4]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_TIM_EnableCounter>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_TIM_DisableARRPreload>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <LL_TIM_OC_DisableFast>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d01c      	beq.n	8002ea6 <LL_TIM_OC_DisableFast+0x4a>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d017      	beq.n	8002ea2 <LL_TIM_OC_DisableFast+0x46>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d012      	beq.n	8002e9e <LL_TIM_OC_DisableFast+0x42>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b40      	cmp	r3, #64	@ 0x40
 8002e7c:	d00d      	beq.n	8002e9a <LL_TIM_OC_DisableFast+0x3e>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e84:	d007      	beq.n	8002e96 <LL_TIM_OC_DisableFast+0x3a>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8c:	d101      	bne.n	8002e92 <LL_TIM_OC_DisableFast+0x36>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e00a      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e008      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e006      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_TIM_OC_DisableFast+0x4c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3318      	adds	r3, #24
 8002eae:	4619      	mov	r1, r3
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <LL_TIM_OC_DisableFast+0x84>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <LL_TIM_OC_DisableFast+0x88>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	408b      	lsls	r3, r1
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	401a      	ands	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	601a      	str	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	0800ec04 	.word	0x0800ec04
 8002ee4:	0800ec0c 	.word	0x0800ec0c

08002ee8 <LL_TIM_OC_EnablePreload>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d01c      	beq.n	8002f32 <LL_TIM_OC_EnablePreload+0x4a>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d017      	beq.n	8002f2e <LL_TIM_OC_EnablePreload+0x46>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d012      	beq.n	8002f2a <LL_TIM_OC_EnablePreload+0x42>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b40      	cmp	r3, #64	@ 0x40
 8002f08:	d00d      	beq.n	8002f26 <LL_TIM_OC_EnablePreload+0x3e>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f10:	d007      	beq.n	8002f22 <LL_TIM_OC_EnablePreload+0x3a>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f18:	d101      	bne.n	8002f1e <LL_TIM_OC_EnablePreload+0x36>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e00a      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f1e:	2306      	movs	r3, #6
 8002f20:	e008      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_TIM_OC_EnablePreload+0x4c>
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <LL_TIM_OC_EnablePreload+0x80>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	440b      	add	r3, r1
 8002f44:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <LL_TIM_OC_EnablePreload+0x84>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	4619      	mov	r1, r3
 8002f52:	2308      	movs	r3, #8
 8002f54:	408b      	lsls	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	0800ec04 	.word	0x0800ec04
 8002f6c:	0800ec0c 	.word	0x0800ec0c

08002f70 <LL_TIM_SetClockSource>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_TIM_SetTriggerOutput>:
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	605a      	str	r2, [r3, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_TIM_DisableMasterSlaveMode>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_USART_Enable>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_USART_ConfigAsyncMode>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	615a      	str	r2, [r3, #20]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_USART_ConfigHalfDuplexMode>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f043 0208 	orr.w	r2, r3, #8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	615a      	str	r2, [r3, #20]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_USART_EnableIT_RXNE>:
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	330c      	adds	r3, #12
 8003090:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	60bb      	str	r3, [r7, #8]
   return(result);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f043 0320 	orr.w	r3, r3, #32
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	330c      	adds	r3, #12
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	61ba      	str	r2, [r7, #24]
 80030aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	613b      	str	r3, [r7, #16]
   return(result);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e7      	bne.n	800308c <LL_USART_EnableIT_RXNE+0x8>
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <LL_SYSCFG_SetEXTISource+0x68>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	43db      	mvns	r3, r3
 80030e8:	ea02 0103 	and.w	r1, r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	60fb      	str	r3, [r7, #12]
  return result;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	fa03 f202 	lsl.w	r2, r3, r2
 8003118:	4806      	ldr	r0, [pc, #24]	@ (8003134 <LL_SYSCFG_SetEXTISource+0x68>)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	430a      	orrs	r2, r1
 8003120:	3302      	adds	r3, #2
 8003122:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40013800 	.word	0x40013800

08003138 <LL_GPIO_SetPinMode>:
{
 8003138:	b480      	push	{r7}
 800313a:	b08b      	sub	sp, #44	@ 0x2c
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	613b      	str	r3, [r7, #16]
  return result;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e003      	b.n	800316a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2103      	movs	r1, #3
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	401a      	ands	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	61fb      	str	r3, [r7, #28]
  return result;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	372c      	adds	r7, #44	@ 0x2c
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_GPIO_SetPinPull>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b08b      	sub	sp, #44	@ 0x2c
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	613b      	str	r3, [r7, #16]
  return result;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2103      	movs	r1, #3
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	61fb      	str	r3, [r7, #28]
  return result;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	bf00      	nop
 8003222:	372c      	adds	r7, #44	@ 0x2c
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_GPIO_ResetOutputPin>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <LL_EXTI_EnableIT_0_31+0x20>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4904      	ldr	r1, [pc, #16]	@ (800326c <LL_EXTI_EnableIT_0_31+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40013c00 	.word	0x40013c00

08003270 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4904      	ldr	r1, [pc, #16]	@ (8003290 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4313      	orrs	r3, r2
 8003282:	60cb      	str	r3, [r1, #12]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40013c00 	.word	0x40013c00

08003294 <LL_AHB1_GRP1_EnableClock>:
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800329e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a0:	4907      	ldr	r1, [pc, #28]	@ (80032c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4013      	ands	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40023800 	.word	0x40023800

080032c4 <LL_APB1_GRP1_EnableClock>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032d0:	4907      	ldr	r1, [pc, #28]	@ (80032f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40023800 	.word	0x40023800

080032f4 <LL_APB2_GRP1_EnableClock>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80032fc:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003300:	4907      	ldr	r1, [pc, #28]	@ (8003320 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <LL_APB2_GRP1_EnableClock+0x2c>)
 800330a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4013      	ands	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40023800 	.word	0x40023800

08003324 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8003330:	bf00      	nop
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b29b      	uxth	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f008 fb27 	bl	800b98c <CDC_Transmit_FS>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d0f6      	beq.n	8003332 <_write+0xe>
	return len;
 8003344:	687b      	ldr	r3, [r7, #4]
#endif
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003354:	f001 f9b6 	bl	80046c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003358:	f000 f862 	bl	8003420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800335c:	f000 fed2 	bl	8004104 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003360:	f000 fdc0 	bl	8003ee4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003364:	f000 f98e 	bl	8003684 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003368:	f000 fa3e 	bl	80037e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800336c:	f000 faf6 	bl	800395c <MX_TIM4_Init>
  MX_TIM5_Init();
 8003370:	f000 fba0 	bl	8003ab4 <MX_TIM5_Init>
  MX_TIM13_Init();
 8003374:	f000 fc42 	bl	8003bfc <MX_TIM13_Init>
  MX_TIM14_Init();
 8003378:	f000 fc94 	bl	8003ca4 <MX_TIM14_Init>
  MX_SPI1_Init();
 800337c:	f000 f930 	bl	80035e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003380:	f000 fe0e 	bl	8003fa0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003384:	f000 fe6c 	bl	8004060 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8003388:	f000 fce2 	bl	8003d50 <MX_UART4_Init>
  MX_UART5_Init();
 800338c:	f000 fd32 	bl	8003df4 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8003390:	f008 fa3e 	bl	800b810 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8003394:	f000 f8ae 	bl	80034f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8003398:	4819      	ldr	r0, [pc, #100]	@ (8003400 <main+0xb0>)
 800339a:	f7ff fd3e 	bl	8002e1a <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 800339e:	4819      	ldr	r0, [pc, #100]	@ (8003404 <main+0xb4>)
 80033a0:	f7ff fd3b 	bl	8002e1a <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 80033a4:	4818      	ldr	r0, [pc, #96]	@ (8003408 <main+0xb8>)
 80033a6:	f7ff fd38 	bl	8002e1a <LL_TIM_EnableCounter>

  PARM_load();
 80033aa:	f7fe f997 	bl	80016dc <PARM_load>

  SERVO_Initialization();
 80033ae:	f7ff f9c3 	bl	8002738 <SERVO_Initialization>
  BuzzerPlayInit();
 80033b2:	f7fd fe15 	bl	8000fe0 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 80033b6:	4815      	ldr	r0, [pc, #84]	@ (800340c <main+0xbc>)
 80033b8:	f7ff fe64 	bl	8003084 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80033bc:	4814      	ldr	r0, [pc, #80]	@ (8003410 <main+0xc0>)
 80033be:	f7ff fe61 	bl	8003084 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 80033c2:	4814      	ldr	r0, [pc, #80]	@ (8003414 <main+0xc4>)
 80033c4:	f7ff fe5e 	bl	8003084 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  RC_Initialization();
 80033c8:	f7fe ff94 	bl	80022f4 <RC_Initialization>
  ICM42688_Initialization();
 80033cc:	f7fe f844 	bl	8001458 <ICM42688_Initialization>
  BuzzerPlayOneCycle();
 80033d0:	f7fd fe34 	bl	800103c <BuzzerPlayOneCycle>
  SERVO_doArm();
 80033d4:	f7ff fa12 	bl	80027fc <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RC_GetData();
 80033d8:	f7fe ffee 	bl	80023b8 <RC_GetData>

	  ICM42688_Get6AxisRawData();
 80033dc:	f7fe f890 	bl	8001500 <ICM42688_Get6AxisRawData>

	  if(fsFlag == 1){
 80033e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <main+0xc8>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <main+0x9e>
		  FS_mannualMode();
 80033e8:	f7fd fe70 	bl	80010cc <FS_mannualMode>
 80033ec:	e005      	b.n	80033fa <main+0xaa>
	  }
	  else{
		  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80033ee:	2101      	movs	r1, #1
 80033f0:	480a      	ldr	r0, [pc, #40]	@ (800341c <main+0xcc>)
 80033f2:	f7ff ff1b 	bl	800322c <LL_GPIO_ResetOutputPin>
		  SERVO_control();
 80033f6:	f7ff fa91 	bl	800291c <SERVO_control>
	  }

	  Log_Send();
 80033fa:	f7fe f901 	bl	8001600 <Log_Send>
	  RC_GetData();
 80033fe:	e7eb      	b.n	80033d8 <main+0x88>
 8003400:	40000800 	.word	0x40000800
 8003404:	40001c00 	.word	0x40001c00
 8003408:	40002000 	.word	0x40002000
 800340c:	40011000 	.word	0x40011000
 8003410:	40004400 	.word	0x40004400
 8003414:	40004800 	.word	0x40004800
 8003418:	200002e0 	.word	0x200002e0
 800341c:	40021000 	.word	0x40021000

08003420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b094      	sub	sp, #80	@ 0x50
 8003424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	2230      	movs	r2, #48	@ 0x30
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f009 fd51 	bl	800ced6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	4b28      	ldr	r3, [pc, #160]	@ (80034ec <SystemClock_Config+0xcc>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <SystemClock_Config+0xcc>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	6413      	str	r3, [r2, #64]	@ 0x40
 8003454:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <SystemClock_Config+0xcc>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003460:	2300      	movs	r3, #0
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <SystemClock_Config+0xd0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <SystemClock_Config+0xd0>)
 800346a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <SystemClock_Config+0xd0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800347c:	2301      	movs	r3, #1
 800347e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003486:	2302      	movs	r3, #2
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800348a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003490:	2308      	movs	r3, #8
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003494:	23a8      	movs	r3, #168	@ 0xa8
 8003496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003498:	2302      	movs	r3, #2
 800349a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800349c:	2307      	movs	r3, #7
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fea3 	bl	80061f0 <HAL_RCC_OscConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034b0:	f000 feb2 	bl	8004218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b4:	230f      	movs	r3, #15
 80034b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b8:	2302      	movs	r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2105      	movs	r1, #5
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 f904 	bl	80066e0 <HAL_RCC_ClockConfig>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034de:	f000 fe9b 	bl	8004218 <Error_Handler>
  }
}
 80034e2:	bf00      	nop
 80034e4:	3750      	adds	r7, #80	@ 0x50
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b092      	sub	sp, #72	@ 0x48
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80034fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003516:	f107 0318 	add.w	r3, r7, #24
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	463b      	mov	r3, r7
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	611a      	str	r2, [r3, #16]
 8003532:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003534:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003538:	f7ff fedc 	bl	80032f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800353c:	2004      	movs	r0, #4
 800353e:	f7ff fea9 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8003542:	2302      	movs	r3, #2
 8003544:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003546:	2303      	movs	r3, #3
 8003548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 800354e:	463b      	mov	r3, r7
 8003550:	4619      	mov	r1, r3
 8003552:	481f      	ldr	r0, [pc, #124]	@ (80035d0 <MX_ADC1_Init+0xdc>)
 8003554:	f003 fdf8 	bl	8007148 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003558:	2300      	movs	r3, #0
 800355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003564:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003568:	4619      	mov	r1, r3
 800356a:	481a      	ldr	r0, [pc, #104]	@ (80035d4 <MX_ADC1_Init+0xe0>)
 800356c:	f003 fb1c 	bl	8006ba8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003570:	2300      	movs	r3, #0
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800357c:	2300      	movs	r3, #0
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8003580:	2300      	movs	r3, #0
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003588:	4619      	mov	r1, r3
 800358a:	4812      	ldr	r0, [pc, #72]	@ (80035d4 <MX_ADC1_Init+0xe0>)
 800358c:	f003 fb38 	bl	8006c00 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8003590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003594:	480f      	ldr	r0, [pc, #60]	@ (80035d4 <MX_ADC1_Init+0xe0>)
 8003596:	f7ff fbb9 	bl	8002d0c <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800359a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800359e:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4619      	mov	r1, r3
 80035aa:	480b      	ldr	r0, [pc, #44]	@ (80035d8 <MX_ADC1_Init+0xe4>)
 80035ac:	f003 fab4 	bl	8006b18 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 80035b0:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <MX_ADC1_Init+0xe8>)
 80035b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035b6:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <MX_ADC1_Init+0xe0>)
 80035b8:	f7ff fb6b 	bl	8002c92 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80035bc:	2200      	movs	r2, #0
 80035be:	4907      	ldr	r1, [pc, #28]	@ (80035dc <MX_ADC1_Init+0xe8>)
 80035c0:	4804      	ldr	r0, [pc, #16]	@ (80035d4 <MX_ADC1_Init+0xe0>)
 80035c2:	f7ff fbb6 	bl	8002d32 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80035c6:	bf00      	nop
 80035c8:	3748      	adds	r7, #72	@ 0x48
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40012000 	.word	0x40012000
 80035d8:	40012300 	.word	0x40012300
 80035dc:	0030000b 	.word	0x0030000b

080035e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b090      	sub	sp, #64	@ 0x40
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80035e6:	f107 0318 	add.w	r3, r7, #24
 80035ea:	2228      	movs	r2, #40	@ 0x28
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f009 fc71 	bl	800ced6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	463b      	mov	r3, r7
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003604:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003608:	f7ff fe74 	bl	80032f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800360c:	2001      	movs	r0, #1
 800360e:	f7ff fe41 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003612:	23e0      	movs	r3, #224	@ 0xe0
 8003614:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003616:	2302      	movs	r3, #2
 8003618:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003626:	2305      	movs	r3, #5
 8003628:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	463b      	mov	r3, r7
 800362c:	4619      	mov	r1, r3
 800362e:	4813      	ldr	r0, [pc, #76]	@ (800367c <MX_SPI1_Init+0x9c>)
 8003630:	f003 fd8a 	bl	8007148 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003638:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800363c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003642:	2302      	movs	r3, #2
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003646:	2301      	movs	r3, #1
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800364a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003650:	2318      	movs	r3, #24
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800365c:	230a      	movs	r3, #10
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	4619      	mov	r1, r3
 8003666:	4806      	ldr	r0, [pc, #24]	@ (8003680 <MX_SPI1_Init+0xa0>)
 8003668:	f003 ff49 	bl	80074fe <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800366c:	2100      	movs	r1, #0
 800366e:	4804      	ldr	r0, [pc, #16]	@ (8003680 <MX_SPI1_Init+0xa0>)
 8003670:	f7ff fbc0 	bl	8002df4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003674:	bf00      	nop
 8003676:	3740      	adds	r7, #64	@ 0x40
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40020000 	.word	0x40020000
 8003680:	40013000 	.word	0x40013000

08003684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b09a      	sub	sp, #104	@ 0x68
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800368a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800369a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800369e:	2220      	movs	r2, #32
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f009 fc17 	bl	800ced6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80036a8:	f107 031c 	add.w	r3, r7, #28
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7ff fe12 	bl	80032f4 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80036d0:	f7ff fa56 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff faa6 	bl	8002c2c <NVIC_EncodePriority>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4619      	mov	r1, r3
 80036e4:	201b      	movs	r0, #27
 80036e6:	f7ff fa77 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036ea:	201b      	movs	r0, #27
 80036ec:	f7ff fa56 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80036f6:	2300      	movs	r3, #0
 80036f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 65535;
 80036fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003700:	2300      	movs	r3, #0
 8003702:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003708:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800370c:	4619      	mov	r1, r3
 800370e:	4834      	ldr	r0, [pc, #208]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 8003710:	f003 ffba 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003714:	4832      	ldr	r0, [pc, #200]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 8003716:	f7ff fb90 	bl	8002e3a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800371a:	2100      	movs	r1, #0
 800371c:	4830      	ldr	r0, [pc, #192]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 800371e:	f7ff fc27 	bl	8002f70 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003722:	2300      	movs	r3, #0
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003732:	2300      	movs	r3, #0
 8003734:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003736:	2300      	movs	r3, #0
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003742:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003746:	461a      	mov	r2, r3
 8003748:	2110      	movs	r1, #16
 800374a:	4825      	ldr	r0, [pc, #148]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 800374c:	f004 f836 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8003750:	2110      	movs	r1, #16
 8003752:	4823      	ldr	r0, [pc, #140]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 8003754:	f7ff fb82 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003758:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003762:	481f      	ldr	r0, [pc, #124]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 8003764:	f004 f82a 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800376c:	481c      	ldr	r0, [pc, #112]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 800376e:	f7ff fb75 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003772:	2100      	movs	r1, #0
 8003774:	481a      	ldr	r0, [pc, #104]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 8003776:	f7ff fc10 	bl	8002f9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800377a:	4819      	ldr	r0, [pc, #100]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 800377c:	f7ff fc20 	bl	8002fc0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003784:	2300      	movs	r3, #0
 8003786:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	480e      	ldr	r0, [pc, #56]	@ (80037e0 <MX_TIM1_Init+0x15c>)
 80037a8:	f004 f849 	bl	800783e <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80037ac:	2010      	movs	r0, #16
 80037ae:	f7ff fd71 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = MAIN_CH11_Pin|MAIN_CH12_Pin;
 80037b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80037b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80037b8:	2302      	movs	r3, #2
 80037ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4804      	ldr	r0, [pc, #16]	@ (80037e4 <MX_TIM1_Init+0x160>)
 80037d2:	f003 fcb9 	bl	8007148 <LL_GPIO_Init>

}
 80037d6:	bf00      	nop
 80037d8:	3768      	adds	r7, #104	@ 0x68
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40021000 	.word	0x40021000

080037e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b094      	sub	sp, #80	@ 0x50
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80037fe:	f107 031c 	add.w	r3, r7, #28
 8003802:	2220      	movs	r2, #32
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f009 fb65 	bl	800ced6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800381c:	2002      	movs	r0, #2
 800381e:	f7ff fd51 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003822:	2353      	movs	r3, #83	@ 0x53
 8003824:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003826:	2300      	movs	r3, #0
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 800382a:	4b48      	ldr	r3, [pc, #288]	@ (800394c <MX_TIM3_Init+0x164>)
 800382c:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003832:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003836:	4619      	mov	r1, r3
 8003838:	4845      	ldr	r0, [pc, #276]	@ (8003950 <MX_TIM3_Init+0x168>)
 800383a:	f003 ff25 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800383e:	4844      	ldr	r0, [pc, #272]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003840:	f7ff fafb 	bl	8002e3a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003844:	2100      	movs	r1, #0
 8003846:	4842      	ldr	r0, [pc, #264]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003848:	f7ff fb92 	bl	8002f70 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800384c:	2101      	movs	r1, #1
 800384e:	4840      	ldr	r0, [pc, #256]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003850:	f7ff fb4a 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003854:	2360      	movs	r3, #96	@ 0x60
 8003856:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	461a      	mov	r2, r3
 800386e:	2101      	movs	r1, #1
 8003870:	4837      	ldr	r0, [pc, #220]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003872:	f003 ffa3 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003876:	2101      	movs	r1, #1
 8003878:	4835      	ldr	r0, [pc, #212]	@ (8003950 <MX_TIM3_Init+0x168>)
 800387a:	f7ff faef 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 800387e:	2110      	movs	r1, #16
 8003880:	4833      	ldr	r0, [pc, #204]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003882:	f7ff fb31 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	461a      	mov	r2, r3
 800388c:	2110      	movs	r1, #16
 800388e:	4830      	ldr	r0, [pc, #192]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003890:	f003 ff94 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003894:	2110      	movs	r1, #16
 8003896:	482e      	ldr	r0, [pc, #184]	@ (8003950 <MX_TIM3_Init+0x168>)
 8003898:	f7ff fae0 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 800389c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038a0:	482b      	ldr	r0, [pc, #172]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038a2:	f7ff fb21 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	461a      	mov	r2, r3
 80038ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038b0:	4827      	ldr	r0, [pc, #156]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038b2:	f003 ff83 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 80038b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ba:	4825      	ldr	r0, [pc, #148]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038bc:	f7ff face 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80038c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038c4:	4822      	ldr	r0, [pc, #136]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038c6:	f7ff fb0f 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	461a      	mov	r2, r3
 80038d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038d4:	481e      	ldr	r0, [pc, #120]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038d6:	f003 ff71 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80038da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038de:	481c      	ldr	r0, [pc, #112]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038e0:	f7ff fabc 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80038e4:	2100      	movs	r1, #0
 80038e6:	481a      	ldr	r0, [pc, #104]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038e8:	f7ff fb57 	bl	8002f9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80038ec:	4818      	ldr	r0, [pc, #96]	@ (8003950 <MX_TIM3_Init+0x168>)
 80038ee:	f7ff fb67 	bl	8002fc0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80038f2:	2002      	movs	r0, #2
 80038f4:	f7ff fcce 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80038f8:	2004      	movs	r0, #4
 80038fa:	f7ff fccb 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 80038fe:	2303      	movs	r3, #3
 8003900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003902:	2302      	movs	r3, #2
 8003904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003912:	2302      	movs	r3, #2
 8003914:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	4619      	mov	r1, r3
 800391a:	480e      	ldr	r0, [pc, #56]	@ (8003954 <MX_TIM3_Init+0x16c>)
 800391c:	f003 fc14 	bl	8007148 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8003920:	23c0      	movs	r3, #192	@ 0xc0
 8003922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003924:	2302      	movs	r3, #2
 8003926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003934:	2302      	movs	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4806      	ldr	r0, [pc, #24]	@ (8003958 <MX_TIM3_Init+0x170>)
 800393e:	f003 fc03 	bl	8007148 <LL_GPIO_Init>

}
 8003942:	bf00      	nop
 8003944:	3750      	adds	r7, #80	@ 0x50
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	fff04e20 	.word	0xfff04e20
 8003950:	40000400 	.word	0x40000400
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800

0800395c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b094      	sub	sp, #80	@ 0x50
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003962:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003972:	f107 031c 	add.w	r3, r7, #28
 8003976:	2220      	movs	r2, #32
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f009 faab 	bl	800ced6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003990:	2004      	movs	r0, #4
 8003992:	f7ff fc97 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8003996:	2304      	movs	r3, #4
 8003998:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800399a:	2300      	movs	r3, #0
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 800399e:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <MX_TIM4_Init+0x148>)
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80039a2:	2300      	movs	r3, #0
 80039a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80039a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039aa:	4619      	mov	r1, r3
 80039ac:	483e      	ldr	r0, [pc, #248]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039ae:	f003 fe6b 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80039b2:	483d      	ldr	r0, [pc, #244]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039b4:	f7ff fa41 	bl	8002e3a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80039b8:	2100      	movs	r1, #0
 80039ba:	483b      	ldr	r0, [pc, #236]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039bc:	f7ff fad8 	bl	8002f70 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80039c0:	2110      	movs	r1, #16
 80039c2:	4839      	ldr	r0, [pc, #228]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039c4:	f7ff fa90 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80039c8:	2360      	movs	r3, #96	@ 0x60
 80039ca:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	461a      	mov	r2, r3
 80039e2:	2110      	movs	r1, #16
 80039e4:	4830      	ldr	r0, [pc, #192]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039e6:	f003 fee9 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80039ea:	2110      	movs	r1, #16
 80039ec:	482e      	ldr	r0, [pc, #184]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039ee:	f7ff fa35 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80039f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039f6:	482c      	ldr	r0, [pc, #176]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 80039f8:	f7ff fa76 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	461a      	mov	r2, r3
 8003a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a06:	4828      	ldr	r0, [pc, #160]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a08:	f003 fed8 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8003a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a10:	4825      	ldr	r0, [pc, #148]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a12:	f7ff fa23 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8003a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a1a:	4823      	ldr	r0, [pc, #140]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a1c:	f7ff fa64 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	461a      	mov	r2, r3
 8003a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a2a:	481f      	ldr	r0, [pc, #124]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a2c:	f003 fec6 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003a30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a34:	481c      	ldr	r0, [pc, #112]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a36:	f7ff fa11 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	481a      	ldr	r0, [pc, #104]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a3e:	f7ff faac 	bl	8002f9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003a42:	4819      	ldr	r0, [pc, #100]	@ (8003aa8 <MX_TIM4_Init+0x14c>)
 8003a44:	f7ff fabc 	bl	8002fc0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003a48:	2008      	movs	r0, #8
 8003a4a:	f7ff fc23 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f7ff fc20 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8003a54:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	480e      	ldr	r0, [pc, #56]	@ (8003aac <MX_TIM4_Init+0x150>)
 8003a74:	f003 fb68 	bl	8007148 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4806      	ldr	r0, [pc, #24]	@ (8003ab0 <MX_TIM4_Init+0x154>)
 8003a96:	f003 fb57 	bl	8007148 <LL_GPIO_Init>

}
 8003a9a:	bf00      	nop
 8003a9c:	3750      	adds	r7, #80	@ 0x50
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	fff0fadc 	.word	0xfff0fadc
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40020c00 	.word	0x40020c00
 8003ab0:	40020400 	.word	0x40020400

08003ab4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b094      	sub	sp, #80	@ 0x50
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003aba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	2220      	movs	r2, #32
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f009 f9ff 	bl	800ced6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	60da      	str	r2, [r3, #12]
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003ae8:	2008      	movs	r0, #8
 8003aea:	f7ff fbeb 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003aee:	2353      	movs	r3, #83	@ 0x53
 8003af0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003af2:	2300      	movs	r3, #0
 8003af4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003af6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf0 <MX_TIM5_Init+0x13c>)
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003afa:	2300      	movs	r3, #0
 8003afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003afe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b02:	4619      	mov	r1, r3
 8003b04:	483b      	ldr	r0, [pc, #236]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b06:	f003 fdbf 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8003b0a:	483a      	ldr	r0, [pc, #232]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b0c:	f7ff f995 	bl	8002e3a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003b10:	2100      	movs	r1, #0
 8003b12:	4838      	ldr	r0, [pc, #224]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b14:	f7ff fa2c 	bl	8002f70 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4836      	ldr	r0, [pc, #216]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b1c:	f7ff f9e4 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003b20:	2360      	movs	r3, #96	@ 0x60
 8003b22:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003b34:	f107 031c 	add.w	r3, r7, #28
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	482d      	ldr	r0, [pc, #180]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b3e:	f003 fe3d 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003b42:	2101      	movs	r1, #1
 8003b44:	482b      	ldr	r0, [pc, #172]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b46:	f7ff f989 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	4829      	ldr	r0, [pc, #164]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b4e:	f7ff f9cb 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	461a      	mov	r2, r3
 8003b58:	2110      	movs	r1, #16
 8003b5a:	4826      	ldr	r0, [pc, #152]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b5c:	f003 fe2e 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003b60:	2110      	movs	r1, #16
 8003b62:	4824      	ldr	r0, [pc, #144]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b64:	f7ff f97a 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b6c:	4821      	ldr	r0, [pc, #132]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b6e:	f7ff f9bb 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	461a      	mov	r2, r3
 8003b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b7c:	481d      	ldr	r0, [pc, #116]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b7e:	f003 fe1d 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003b82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b86:	481b      	ldr	r0, [pc, #108]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b88:	f7ff f968 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003b8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b90:	4818      	ldr	r0, [pc, #96]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003b92:	f7ff f9a9 	bl	8002ee8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003b96:	f107 031c 	add.w	r3, r7, #28
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ba0:	4814      	ldr	r0, [pc, #80]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003ba2:	f003 fe0b 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003baa:	4812      	ldr	r0, [pc, #72]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003bac:	f7ff f956 	bl	8002e5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4810      	ldr	r0, [pc, #64]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003bb4:	f7ff f9f1 	bl	8002f9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003bb8:	480e      	ldr	r0, [pc, #56]	@ (8003bf4 <MX_TIM5_Init+0x140>)
 8003bba:	f7ff fa01 	bl	8002fc0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f7ff fb68 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	@ (8003bf8 <MX_TIM5_Init+0x144>)
 8003be2:	f003 fab1 	bl	8007148 <LL_GPIO_Init>

}
 8003be6:	bf00      	nop
 8003be8:	3750      	adds	r7, #80	@ 0x50
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	fff04e20 	.word	0xfff04e20
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40020000 	.word	0x40020000

08003bfc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	@ 0x38
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	2220      	movs	r2, #32
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f009 f95c 	bl	800ced6 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8003c1e:	2080      	movs	r0, #128	@ 0x80
 8003c20:	f7ff fb50 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003c24:	f7fe ffac 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fffc 	bl	8002c2c <NVIC_EncodePriority>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4619      	mov	r1, r3
 8003c38:	202c      	movs	r0, #44	@ 0x2c
 8003c3a:	f7fe ffcd 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003c3e:	202c      	movs	r0, #44	@ 0x2c
 8003c40:	f7fe ffac 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8003c44:	2301      	movs	r3, #1
 8003c46:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <MX_TIM13_Init+0xa0>)
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003c50:	2300      	movs	r3, #0
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 8003c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4811      	ldr	r0, [pc, #68]	@ (8003ca0 <MX_TIM13_Init+0xa4>)
 8003c5c:	f003 fd14 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8003c60:	480f      	ldr	r0, [pc, #60]	@ (8003ca0 <MX_TIM13_Init+0xa4>)
 8003c62:	f7ff f8ea 	bl	8002e3a <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <MX_TIM13_Init+0xa4>)
 8003c82:	f003 fd9b 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 8003c86:	2101      	movs	r1, #1
 8003c88:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <MX_TIM13_Init+0xa4>)
 8003c8a:	f7ff f8e7 	bl	8002e5c <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 8003c8e:	4804      	ldr	r0, [pc, #16]	@ (8003ca0 <MX_TIM13_Init+0xa4>)
 8003c90:	f7ff f9a6 	bl	8002fe0 <LL_TIM_EnableIT_UPDATE>
//  TIM13->ARR = 42000;
//  TIM13->PSC = 2;

  /* USER CODE END TIM13_Init 2 */

}
 8003c94:	bf00      	nop
 8003c96:	3738      	adds	r7, #56	@ 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	fff0a410 	.word	0xfff0a410
 8003ca0:	40001c00 	.word	0x40001c00

08003ca4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08e      	sub	sp, #56	@ 0x38
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f009 f908 	bl	800ced6 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8003cc6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003cca:	f7ff fafb 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003cce:	f7fe ff57 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe ffa7 	bl	8002c2c <NVIC_EncodePriority>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	202d      	movs	r0, #45	@ 0x2d
 8003ce4:	f7fe ff78 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003ce8:	202d      	movs	r0, #45	@ 0x2d
 8003cea:	f7fe ff57 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <MX_TIM14_Init+0xa4>)
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8003cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d02:	4619      	mov	r1, r3
 8003d04:	4811      	ldr	r0, [pc, #68]	@ (8003d4c <MX_TIM14_Init+0xa8>)
 8003d06:	f003 fcbf 	bl	8007688 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 8003d0a:	4810      	ldr	r0, [pc, #64]	@ (8003d4c <MX_TIM14_Init+0xa8>)
 8003d0c:	f7ff f895 	bl	8002e3a <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003d10:	2300      	movs	r3, #0
 8003d12:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	461a      	mov	r2, r3
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <MX_TIM14_Init+0xa8>)
 8003d2c:	f003 fd46 	bl	80077bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 8003d30:	2101      	movs	r1, #1
 8003d32:	4806      	ldr	r0, [pc, #24]	@ (8003d4c <MX_TIM14_Init+0xa8>)
 8003d34:	f7ff f892 	bl	8002e5c <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 8003d38:	4804      	ldr	r0, [pc, #16]	@ (8003d4c <MX_TIM14_Init+0xa8>)
 8003d3a:	f7ff f951 	bl	8002fe0 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM14_Init 2 */

}
 8003d3e:	bf00      	nop
 8003d40:	3738      	adds	r7, #56	@ 0x38
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	fff00054 	.word	0xfff00054
 8003d4c:	40002000 	.word	0x40002000

08003d50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	@ 0x38
 8003d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	611a      	str	r2, [r3, #16]
 8003d66:	615a      	str	r2, [r3, #20]
 8003d68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8003d7a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d7e:	f7ff faa1 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003d82:	2004      	movs	r0, #4
 8003d84:	f7ff fa86 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 8003d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d92:	2303      	movs	r3, #3
 8003d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4811      	ldr	r0, [pc, #68]	@ (8003dec <MX_UART4_Init+0x9c>)
 8003da8:	f003 f9ce 	bl	8007148 <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003dac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003db0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4807      	ldr	r0, [pc, #28]	@ (8003df0 <MX_UART4_Init+0xa0>)
 8003dd2:	f004 f983 	bl	80080dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8003dd6:	4806      	ldr	r0, [pc, #24]	@ (8003df0 <MX_UART4_Init+0xa0>)
 8003dd8:	f7ff f922 	bl	8003020 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003ddc:	4804      	ldr	r0, [pc, #16]	@ (8003df0 <MX_UART4_Init+0xa0>)
 8003dde:	f7ff f90f 	bl	8003000 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003de2:	bf00      	nop
 8003de4:	3738      	adds	r7, #56	@ 0x38
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40004c00 	.word	0x40004c00

08003df4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08e      	sub	sp, #56	@ 0x38
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003dfa:	f107 031c 	add.w	r3, r7, #28
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	615a      	str	r2, [r3, #20]
 8003e0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8003e1e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003e22:	f7ff fa4f 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003e26:	2004      	movs	r0, #4
 8003e28:	f7ff fa34 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003e2c:	2008      	movs	r0, #8
 8003e2e:	f7ff fa31 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 8003e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003e48:	2308      	movs	r3, #8
 8003e4a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4821      	ldr	r0, [pc, #132]	@ (8003ed8 <MX_UART5_Init+0xe4>)
 8003e52:	f003 f979 	bl	8007148 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 8003e56:	2304      	movs	r3, #4
 8003e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	481a      	ldr	r0, [pc, #104]	@ (8003edc <MX_UART5_Init+0xe8>)
 8003e74:	f003 f968 	bl	8007148 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003e78:	f7fe fe82 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fed2 	bl	8002c2c <NVIC_EncodePriority>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	2035      	movs	r0, #53	@ 0x35
 8003e8e:	f7fe fea3 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003e92:	2035      	movs	r0, #53	@ 0x35
 8003e94:	f7fe fe82 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003e98:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003e9c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003eaa:	230c      	movs	r3, #12
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4808      	ldr	r0, [pc, #32]	@ (8003ee0 <MX_UART5_Init+0xec>)
 8003ebe:	f004 f90d 	bl	80080dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8003ec2:	4807      	ldr	r0, [pc, #28]	@ (8003ee0 <MX_UART5_Init+0xec>)
 8003ec4:	f7ff f8ac 	bl	8003020 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8003ec8:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <MX_UART5_Init+0xec>)
 8003eca:	f7ff f899 	bl	8003000 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003ece:	bf00      	nop
 8003ed0:	3738      	adds	r7, #56	@ 0x38
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40020800 	.word	0x40020800
 8003edc:	40020c00 	.word	0x40020c00
 8003ee0:	40005000 	.word	0x40005000

08003ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	@ 0x38
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003eea:	f107 031c 	add.w	r3, r7, #28
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003f0e:	2010      	movs	r0, #16
 8003f10:	f7ff f9f0 	bl	80032f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7ff f9bd 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8003f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f20:	2302      	movs	r3, #2
 8003f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003f30:	2307      	movs	r3, #7
 8003f32:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4817      	ldr	r0, [pc, #92]	@ (8003f98 <MX_USART1_UART_Init+0xb4>)
 8003f3a:	f003 f905 	bl	8007148 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003f3e:	f7fe fe1f 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fe6f 	bl	8002c2c <NVIC_EncodePriority>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4619      	mov	r1, r3
 8003f52:	2025      	movs	r0, #37	@ 0x25
 8003f54:	f7fe fe40 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003f58:	2025      	movs	r0, #37	@ 0x25
 8003f5a:	f7fe fe1f 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003f5e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003f62:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003f64:	2300      	movs	r3, #0
 8003f66:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003f70:	230c      	movs	r3, #12
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003f74:	2300      	movs	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8003f78:	f107 031c 	add.w	r3, r7, #28
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4807      	ldr	r0, [pc, #28]	@ (8003f9c <MX_USART1_UART_Init+0xb8>)
 8003f80:	f004 f8ac 	bl	80080dc <LL_USART_Init>
  LL_USART_Enable(USART1);
 8003f84:	4805      	ldr	r0, [pc, #20]	@ (8003f9c <MX_USART1_UART_Init+0xb8>)
 8003f86:	f7ff f83b 	bl	8003000 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8003f8a:	4804      	ldr	r0, [pc, #16]	@ (8003f9c <MX_USART1_UART_Init+0xb8>)
 8003f8c:	f7ff f85e 	bl	800304c <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	3738      	adds	r7, #56	@ 0x38
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	40011000 	.word	0x40011000

08003fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08e      	sub	sp, #56	@ 0x38
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003fa6:	f107 031c 	add.w	r3, r7, #28
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	615a      	str	r2, [r3, #20]
 8003fb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003fca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003fce:	f7ff f979 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003fd2:	2008      	movs	r0, #8
 8003fd4:	f7ff f95e 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8003fd8:	2378      	movs	r3, #120	@ 0x78
 8003fda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003fec:	2307      	movs	r3, #7
 8003fee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4818      	ldr	r0, [pc, #96]	@ (8004058 <MX_USART2_UART_Init+0xb8>)
 8003ff6:	f003 f8a7 	bl	8007148 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003ffa:	f7fe fdc1 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2200      	movs	r2, #0
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fe11 	bl	8002c2c <NVIC_EncodePriority>
 800400a:	4603      	mov	r3, r0
 800400c:	4619      	mov	r1, r3
 800400e:	2026      	movs	r0, #38	@ 0x26
 8004010:	f7fe fde2 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004014:	2026      	movs	r0, #38	@ 0x26
 8004016:	f7fe fdc1 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 800401a:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800401e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004028:	2300      	movs	r3, #0
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800402c:	230c      	movs	r3, #12
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	4619      	mov	r1, r3
 800403e:	4807      	ldr	r0, [pc, #28]	@ (800405c <MX_USART2_UART_Init+0xbc>)
 8004040:	f004 f84c 	bl	80080dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004044:	4805      	ldr	r0, [pc, #20]	@ (800405c <MX_USART2_UART_Init+0xbc>)
 8004046:	f7fe ffeb 	bl	8003020 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800404a:	4804      	ldr	r0, [pc, #16]	@ (800405c <MX_USART2_UART_Init+0xbc>)
 800404c:	f7fe ffd8 	bl	8003000 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004050:	bf00      	nop
 8004052:	3738      	adds	r7, #56	@ 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40020c00 	.word	0x40020c00
 800405c:	40004400 	.word	0x40004400

08004060 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	@ 0x38
 8004064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004066:	f107 031c 	add.w	r3, r7, #28
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	60da      	str	r2, [r3, #12]
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	615a      	str	r2, [r3, #20]
 8004078:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
 8004088:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800408a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800408e:	f7ff f919 	bl	80032c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004092:	2008      	movs	r0, #8
 8004094:	f7ff f8fe 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004098:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 800409c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800409e:	2302      	movs	r3, #2
 80040a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80040ae:	2307      	movs	r3, #7
 80040b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4811      	ldr	r0, [pc, #68]	@ (80040fc <MX_USART3_UART_Init+0x9c>)
 80040b8:	f003 f846 	bl	8007148 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80040bc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80040c0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80040ce:	230c      	movs	r3, #12
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80040da:	f107 031c 	add.w	r3, r7, #28
 80040de:	4619      	mov	r1, r3
 80040e0:	4807      	ldr	r0, [pc, #28]	@ (8004100 <MX_USART3_UART_Init+0xa0>)
 80040e2:	f003 fffb 	bl	80080dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80040e6:	4806      	ldr	r0, [pc, #24]	@ (8004100 <MX_USART3_UART_Init+0xa0>)
 80040e8:	f7fe ff9a 	bl	8003020 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80040ec:	4804      	ldr	r0, [pc, #16]	@ (8004100 <MX_USART3_UART_Init+0xa0>)
 80040ee:	f7fe ff87 	bl	8003000 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040f2:	bf00      	nop
 80040f4:	3738      	adds	r7, #56	@ 0x38
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40004800 	.word	0x40004800

08004104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800410a:	f107 0318 	add.w	r3, r7, #24
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	463b      	mov	r3, r7
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8004124:	2010      	movs	r0, #16
 8004126:	f7ff f8b5 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800412a:	2080      	movs	r0, #128	@ 0x80
 800412c:	f7ff f8b2 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004130:	2004      	movs	r0, #4
 8004132:	f7ff f8af 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004136:	2001      	movs	r0, #1
 8004138:	f7ff f8ac 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800413c:	2002      	movs	r0, #2
 800413e:	f7ff f8a9 	bl	8003294 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004142:	2008      	movs	r0, #8
 8004144:	f7ff f8a6 	bl	8003294 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 8004148:	2127      	movs	r1, #39	@ 0x27
 800414a:	4830      	ldr	r0, [pc, #192]	@ (800420c <MX_GPIO_Init+0x108>)
 800414c:	f7ff f86e 	bl	800322c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 8004150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004154:	482e      	ldr	r0, [pc, #184]	@ (8004210 <MX_GPIO_Init+0x10c>)
 8004156:	f7ff f869 	bl	800322c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 800415a:	2327      	movs	r3, #39	@ 0x27
 800415c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800415e:	2301      	movs	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800416e:	463b      	mov	r3, r7
 8004170:	4619      	mov	r1, r3
 8004172:	4826      	ldr	r0, [pc, #152]	@ (800420c <MX_GPIO_Init+0x108>)
 8004174:	f002 ffe8 	bl	8007148 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 8004178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800417c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800417e:	2301      	movs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 800418e:	463b      	mov	r3, r7
 8004190:	4619      	mov	r1, r3
 8004192:	481f      	ldr	r0, [pc, #124]	@ (8004210 <MX_GPIO_Init+0x10c>)
 8004194:	f002 ffd8 	bl	8007148 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE14);
 8004198:	491e      	ldr	r1, [pc, #120]	@ (8004214 <MX_GPIO_Init+0x110>)
 800419a:	2004      	movs	r0, #4
 800419c:	f7fe ff96 	bl	80030cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80041a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041a4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80041a6:	2301      	movs	r3, #1
 80041a8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80041aa:	2300      	movs	r3, #0
 80041ac:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80041ae:	2302      	movs	r3, #2
 80041b0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80041b2:	f107 0318 	add.w	r3, r7, #24
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 fdfc 	bl	8006db4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_PULL_NO);
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041c2:	4812      	ldr	r0, [pc, #72]	@ (800420c <MX_GPIO_Init+0x108>)
 80041c4:	f7fe fff5 	bl	80031b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_MODE_INPUT);
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ce:	480f      	ldr	r0, [pc, #60]	@ (800420c <MX_GPIO_Init+0x108>)
 80041d0:	f7fe ffb2 	bl	8003138 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80041d4:	f7fe fcd4 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 80041d8:	4603      	mov	r3, r0
 80041da:	2200      	movs	r2, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fd24 	bl	8002c2c <NVIC_EncodePriority>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4619      	mov	r1, r3
 80041e8:	2028      	movs	r0, #40	@ 0x28
 80041ea:	f7fe fcf5 	bl	8002bd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041ee:	2028      	movs	r0, #40	@ 0x28
 80041f0:	f7fe fcd4 	bl	8002b9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_14);
 80041f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80041f8:	f7ff f828 	bl	800324c <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_14);
 80041fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004200:	f7ff f836 	bl	8003270 <LL_EXTI_EnableFallingTrig_0_31>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004204:	bf00      	nop
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	40020c00 	.word	0x40020c00
 8004214:	0f000003 	.word	0x0f000003

08004218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <Error_Handler+0x8>

08004224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <HAL_MspInit+0x4c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <HAL_MspInit+0x4c>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004238:	6453      	str	r3, [r2, #68]	@ 0x44
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <HAL_MspInit+0x4c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_MspInit+0x4c>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a08      	ldr	r2, [pc, #32]	@ (8004270 <HAL_MspInit+0x4c>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_MspInit+0x4c>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <LL_TIM_ClearFlag_UPDATE>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f06f 0201 	mvn.w	r2, #1
 8004282:	611a      	str	r2, [r3, #16]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_USART_IsActiveFlag_RXNE>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_USART_ClearFlag_RXNE>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f06f 0220 	mvn.w	r2, #32
 80042ea:	601a      	str	r2, [r3, #0]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_USART_ReceiveData8>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2db      	uxtb	r3, r3
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800431c:	4b07      	ldr	r3, [pc, #28]	@ (800433c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40013c00 	.word	0x40013c00

08004340 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004348:	4a04      	ldr	r2, [pc, #16]	@ (800435c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6153      	str	r3, [r2, #20]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40013c00 	.word	0x40013c00

08004360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <NMI_Handler+0x4>

08004368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <HardFault_Handler+0x4>

08004370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <MemManage_Handler+0x4>

08004378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <BusFault_Handler+0x4>

08004380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <UsageFault_Handler+0x4>

08004388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b6:	f000 f9d7 	bl	8004768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}

080043be <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80043d2:	480e      	ldr	r0, [pc, #56]	@ (800440c <USART1_IRQHandler+0x40>)
 80043d4:	f7ff ff6f 	bl	80042b6 <LL_USART_IsActiveFlag_RXNE>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <USART1_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 80043de:	480b      	ldr	r0, [pc, #44]	@ (800440c <USART1_IRQHandler+0x40>)
 80043e0:	f7ff ff7c 	bl	80042dc <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 80043e4:	4809      	ldr	r0, [pc, #36]	@ (800440c <USART1_IRQHandler+0x40>)
 80043e6:	f7ff ff87 	bl	80042f8 <LL_USART_ReceiveData8>
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <USART1_IRQHandler+0x44>)
 80043f0:	7813      	ldrb	r3, [r2, #0]
 80043f2:	f043 0302 	orr.w	r3, r3, #2
 80043f6:	7013      	strb	r3, [r2, #0]

		// IRQ2 수행
		RC_receiveIRQ2(uart1_rx_data);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe f827 	bl	8002450 <RC_receiveIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40011000 	.word	0x40011000
 8004410:	2000044c 	.word	0x2000044c

08004414 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8004418:	480a      	ldr	r0, [pc, #40]	@ (8004444 <USART2_IRQHandler+0x30>)
 800441a:	f7ff ff4c 	bl	80042b6 <LL_USART_IsActiveFlag_RXNE>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00c      	beq.n	800443e <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8004424:	4807      	ldr	r0, [pc, #28]	@ (8004444 <USART2_IRQHandler+0x30>)
 8004426:	f7ff ff59 	bl	80042dc <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 800442a:	4806      	ldr	r0, [pc, #24]	@ (8004444 <USART2_IRQHandler+0x30>)
 800442c:	f7ff ff64 	bl	80042f8 <LL_USART_ReceiveData8>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b04      	ldr	r3, [pc, #16]	@ (8004448 <USART2_IRQHandler+0x34>)
 8004436:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <USART2_IRQHandler+0x38>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40004400 	.word	0x40004400
 8004448:	200004d7 	.word	0x200004d7
 800444c:	200004d6 	.word	0x200004d6

08004450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004454:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004458:	f7ff ff5c 	bl	8004314 <LL_EXTI_IsActiveFlag_0_31>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004462:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004466:	f7ff ff6b 	bl	8004340 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
		// IRQ2 수행
	RC_receiveIRQ2(0);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fd fff0 	bl	8002450 <RC_receiveIRQ2>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}

08004474 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8004478:	4807      	ldr	r0, [pc, #28]	@ (8004498 <TIM8_UP_TIM13_IRQHandler+0x24>)
 800447a:	f7ff ff09 	bl	8004290 <LL_TIM_IsActiveFlag_UPDATE>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8004484:	4804      	ldr	r0, [pc, #16]	@ (8004498 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004486:	f7ff fef5 	bl	8004274 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <TIM8_UP_TIM13_IRQHandler+0x28>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	3301      	adds	r3, #1
 8004490:	4a02      	ldr	r2, [pc, #8]	@ (800449c <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004492:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004494:	bf00      	nop
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40001c00 	.word	0x40001c00
 800449c:	20000458 	.word	0x20000458

080044a0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 80044a4:	4809      	ldr	r0, [pc, #36]	@ (80044cc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80044a6:	f7ff fef3 	bl	8004290 <LL_TIM_IsActiveFlag_UPDATE>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	{
		LL_TIM_ClearFlag_UPDATE(TIM14);
 80044b0:	4806      	ldr	r0, [pc, #24]	@ (80044cc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80044b2:	f7ff fedf 	bl	8004274 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_unix_usec++;
 80044b6:	4906      	ldr	r1, [pc, #24]	@ (80044d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80044b8:	680a      	ldr	r2, [r1, #0]
 80044ba:	684b      	ldr	r3, [r1, #4]
 80044bc:	1c54      	adds	r4, r2, #1
 80044be:	f143 0500 	adc.w	r5, r3, #0
 80044c2:	4b03      	ldr	r3, [pc, #12]	@ (80044d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80044c4:	601c      	str	r4, [r3, #0]
 80044c6:	605d      	str	r5, [r3, #4]

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	bdb0      	pop	{r4, r5, r7, pc}
 80044cc:	40002000 	.word	0x40002000
 80044d0:	20000458 	.word	0x20000458

080044d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80044e8:	4802      	ldr	r0, [pc, #8]	@ (80044f4 <OTG_FS_IRQHandler+0x10>)
 80044ea:	f000 fd73 	bl	8004fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200019c0 	.word	0x200019c0

080044f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return 1;
 80044fc:	2301      	movs	r3, #1
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_kill>:

int _kill(int pid, int sig)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004512:	f008 fd43 	bl	800cf9c <__errno>
 8004516:	4603      	mov	r3, r0
 8004518:	2216      	movs	r2, #22
 800451a:	601a      	str	r2, [r3, #0]
  return -1;
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_exit>:

void _exit (int status)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004530:	f04f 31ff 	mov.w	r1, #4294967295
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ffe7 	bl	8004508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <_exit+0x12>

0800453e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e00a      	b.n	8004566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004550:	f3af 8000 	nop.w
 8004554:	4601      	mov	r1, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	60ba      	str	r2, [r7, #8]
 800455c:	b2ca      	uxtb	r2, r1
 800455e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3301      	adds	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	dbf0      	blt.n	8004550 <_read+0x12>
  }

  return len;
 800456e:	687b      	ldr	r3, [r7, #4]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045a0:	605a      	str	r2, [r3, #4]
  return 0;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <_isatty>:

int _isatty(int file)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e8:	4a14      	ldr	r2, [pc, #80]	@ (800463c <_sbrk+0x5c>)
 80045ea:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <_sbrk+0x60>)
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045f4:	4b13      	ldr	r3, [pc, #76]	@ (8004644 <_sbrk+0x64>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <_sbrk+0x64>)
 80045fe:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <_sbrk+0x68>)
 8004600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <_sbrk+0x64>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	429a      	cmp	r2, r3
 800460e:	d207      	bcs.n	8004620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004610:	f008 fcc4 	bl	800cf9c <__errno>
 8004614:	4603      	mov	r3, r0
 8004616:	220c      	movs	r2, #12
 8004618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e009      	b.n	8004634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <_sbrk+0x64>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004626:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <_sbrk+0x64>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	4a05      	ldr	r2, [pc, #20]	@ (8004644 <_sbrk+0x64>)
 8004630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20020000 	.word	0x20020000
 8004640:	00000400 	.word	0x00000400
 8004644:	200004d8 	.word	0x200004d8
 8004648:	20002210 	.word	0x20002210

0800464c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <SystemInit+0x20>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	4a05      	ldr	r2, [pc, #20]	@ (800466c <SystemInit+0x20>)
 8004658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800465c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004674:	f7ff ffea 	bl	800464c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004678:	480c      	ldr	r0, [pc, #48]	@ (80046ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800467a:	490d      	ldr	r1, [pc, #52]	@ (80046b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800467c:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800467e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004680:	e002      	b.n	8004688 <LoopCopyDataInit>

08004682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004686:	3304      	adds	r3, #4

08004688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800468a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800468c:	d3f9      	bcc.n	8004682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004690:	4c0a      	ldr	r4, [pc, #40]	@ (80046bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004694:	e001      	b.n	800469a <LoopFillZerobss>

08004696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004698:	3204      	adds	r2, #4

0800469a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800469a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800469c:	d3fb      	bcc.n	8004696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800469e:	f008 fc83 	bl	800cfa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046a2:	f7fe fe55 	bl	8003350 <main>
  bx  lr    
 80046a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80046b4:	0800efb4 	.word	0x0800efb4
  ldr r2, =_sbss
 80046b8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80046bc:	20002210 	.word	0x20002210

080046c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046c0:	e7fe      	b.n	80046c0 <ADC_IRQHandler>
	...

080046c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004704 <HAL_Init+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004704 <HAL_Init+0x40>)
 80046ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_Init+0x40>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <HAL_Init+0x40>)
 80046da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <HAL_Init+0x40>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a07      	ldr	r2, [pc, #28]	@ (8004704 <HAL_Init+0x40>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f000 f94f 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046f2:	200f      	movs	r0, #15
 80046f4:	f000 f808 	bl	8004708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f8:	f7ff fd94 	bl	8004224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_InitTick+0x54>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <HAL_InitTick+0x58>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800471e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f967 	bl	80049fa <HAL_SYSTICK_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00e      	b.n	8004754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d80a      	bhi.n	8004752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800473c:	2200      	movs	r2, #0
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f000 f92f 	bl	80049a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004748:	4a06      	ldr	r2, [pc, #24]	@ (8004764 <HAL_InitTick+0x5c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000000 	.word	0x20000000
 8004760:	20000008 	.word	0x20000008
 8004764:	20000004 	.word	0x20000004

08004768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_IncTick+0x20>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_IncTick+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	4a04      	ldr	r2, [pc, #16]	@ (800478c <HAL_IncTick+0x24>)
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000008 	.word	0x20000008
 800478c:	200004dc 	.word	0x200004dc

08004790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return uwTick;
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <HAL_GetTick+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	200004dc 	.word	0x200004dc

080047a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b0:	f7ff ffee 	bl	8004790 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d005      	beq.n	80047ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047c2:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <HAL_Delay+0x44>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047ce:	bf00      	nop
 80047d0:	f7ff ffde 	bl	8004790 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d8f7      	bhi.n	80047d0 <HAL_Delay+0x28>
  {
  }
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000008 	.word	0x20000008

080047f0 <__NVIC_SetPriorityGrouping>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	@ (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4907      	ldr	r1, [pc, #28]	@ (800488c <__NVIC_EnableIRQ+0x38>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000e100 	.word	0xe000e100

08004890 <__NVIC_SetPriority>:
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0a      	blt.n	80048ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	490c      	ldr	r1, [pc, #48]	@ (80048dc <__NVIC_SetPriority+0x4c>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	440b      	add	r3, r1
 80048b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048b8:	e00a      	b.n	80048d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4908      	ldr	r1, [pc, #32]	@ (80048e0 <__NVIC_SetPriority+0x50>)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3b04      	subs	r3, #4
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	761a      	strb	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000e100 	.word	0xe000e100
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <NVIC_EncodePriority>:
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	@ 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf28      	it	cs
 8004902:	2304      	movcs	r3, #4
 8004904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3304      	adds	r3, #4
 800490a:	2b06      	cmp	r3, #6
 800490c:	d902      	bls.n	8004914 <NVIC_EncodePriority+0x30>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3b03      	subs	r3, #3
 8004912:	e000      	b.n	8004916 <NVIC_EncodePriority+0x32>
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	401a      	ands	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800492c:	f04f 31ff 	mov.w	r1, #4294967295
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	43d9      	mvns	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800493c:	4313      	orrs	r3, r2
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	@ 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495c:	d301      	bcc.n	8004962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800495e:	2301      	movs	r3, #1
 8004960:	e00f      	b.n	8004982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004962:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <SysTick_Config+0x40>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496a:	210f      	movs	r1, #15
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	f7ff ff8e 	bl	8004890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <SysTick_Config+0x40>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497a:	4b04      	ldr	r3, [pc, #16]	@ (800498c <SysTick_Config+0x40>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff29 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b8:	f7ff ff3e 	bl	8004838 <__NVIC_GetPriorityGrouping>
 80049bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7ff ff8e 	bl	80048e4 <NVIC_EncodePriority>
 80049c8:	4602      	mov	r2, r0
 80049ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff5d 	bl	8004890 <__NVIC_SetPriority>
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff31 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffa2 	bl	800494c <SysTick_Config>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e16b      	b.n	8004d08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a30:	2201      	movs	r2, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	f040 815a 	bne.w	8004d02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d005      	beq.n	8004a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d130      	bne.n	8004ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2203      	movs	r2, #3
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 0201 	and.w	r2, r3, #1
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d017      	beq.n	8004b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	2203      	movs	r2, #3
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d123      	bne.n	8004b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	08da      	lsrs	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3208      	adds	r2, #8
 8004b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	220f      	movs	r2, #15
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	08da      	lsrs	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3208      	adds	r2, #8
 8004b52:	69b9      	ldr	r1, [r7, #24]
 8004b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2203      	movs	r2, #3
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0203 	and.w	r2, r3, #3
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80b4 	beq.w	8004d02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b60      	ldr	r3, [pc, #384]	@ (8004d20 <HAL_GPIO_Init+0x30c>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8004d20 <HAL_GPIO_Init+0x30c>)
 8004ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004baa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_GPIO_Init+0x30c>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_GPIO_Init+0x310>)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	220f      	movs	r2, #15
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a52      	ldr	r2, [pc, #328]	@ (8004d28 <HAL_GPIO_Init+0x314>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02b      	beq.n	8004c3a <HAL_GPIO_Init+0x226>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a51      	ldr	r2, [pc, #324]	@ (8004d2c <HAL_GPIO_Init+0x318>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d025      	beq.n	8004c36 <HAL_GPIO_Init+0x222>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a50      	ldr	r2, [pc, #320]	@ (8004d30 <HAL_GPIO_Init+0x31c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <HAL_GPIO_Init+0x21e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8004d34 <HAL_GPIO_Init+0x320>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d019      	beq.n	8004c2e <HAL_GPIO_Init+0x21a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8004d38 <HAL_GPIO_Init+0x324>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_GPIO_Init+0x216>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a4d      	ldr	r2, [pc, #308]	@ (8004d3c <HAL_GPIO_Init+0x328>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00d      	beq.n	8004c26 <HAL_GPIO_Init+0x212>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8004d40 <HAL_GPIO_Init+0x32c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <HAL_GPIO_Init+0x20e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <HAL_GPIO_Init+0x330>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_GPIO_Init+0x20a>
 8004c1a:	2307      	movs	r3, #7
 8004c1c:	e00e      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	e00c      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c22:	2306      	movs	r3, #6
 8004c24:	e00a      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c26:	2305      	movs	r3, #5
 8004c28:	e008      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	e006      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e004      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e002      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_GPIO_Init+0x228>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	f002 0203 	and.w	r2, r2, #3
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	4093      	lsls	r3, r2
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c4c:	4935      	ldr	r1, [pc, #212]	@ (8004d24 <HAL_GPIO_Init+0x310>)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	3302      	adds	r3, #2
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c7e:	4a32      	ldr	r2, [pc, #200]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c84:	4b30      	ldr	r3, [pc, #192]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca8:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cae:	4b26      	ldr	r3, [pc, #152]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfc:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <HAL_GPIO_Init+0x334>)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	f67f ae90 	bls.w	8004a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	@ 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40013800 	.word	0x40013800
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	40020800 	.word	0x40020800
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40021400 	.word	0x40021400
 8004d40:	40021800 	.word	0x40021800
 8004d44:	40021c00 	.word	0x40021c00
 8004d48:	40013c00 	.word	0x40013c00

08004d4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e101      	b.n	8004f62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f006 ff4f 	bl	800bc1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8c:	d102      	bne.n	8004d94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f003 fb36 	bl	800840a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7c1a      	ldrb	r2, [r3, #16]
 8004da6:	f88d 2000 	strb.w	r2, [sp]
 8004daa:	3304      	adds	r3, #4
 8004dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dae:	f003 fa15 	bl	80081dc <USB_CoreInit>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0ce      	b.n	8004f62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 fb2e 	bl	800842c <USB_SetCurrentMode>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0bf      	b.n	8004f62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e04a      	b.n	8004e7e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	3315      	adds	r3, #21
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	b298      	uxth	r0, r3
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	332e      	adds	r3, #46	@ 0x2e
 8004e24:	4602      	mov	r2, r0
 8004e26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e28:	7bfa      	ldrb	r2, [r7, #15]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3318      	adds	r3, #24
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	331c      	adds	r3, #28
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3320      	adds	r3, #32
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3324      	adds	r3, #36	@ 0x24
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	791b      	ldrb	r3, [r3, #4]
 8004e82:	7bfa      	ldrb	r2, [r7, #15]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d3af      	bcc.n	8004de8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e044      	b.n	8004f18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004efc:	7bfa      	ldrb	r2, [r7, #15]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3301      	adds	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3b5      	bcc.n	8004e8e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7c1a      	ldrb	r2, [r3, #16]
 8004f2a:	f88d 2000 	strb.w	r2, [sp]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f32:	f003 fac7 	bl	80084c4 <USB_DevInit>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e00c      	b.n	8004f62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fb11 	bl	8009582 <USB_DevDisconnect>

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_PCD_Start+0x1c>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e022      	b.n	8004fcc <HAL_PCD_Start+0x62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f003 fa18 	bl	80083e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 fabf 	bl	8009540 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b08d      	sub	sp, #52	@ 0x34
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fb7d 	bl	80096ea <USB_GetMode>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 848c 	bne.w	8005910 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f004 fae1 	bl	80095c4 <USB_ReadInterrupts>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8482 	beq.w	800590e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f004 face 	bl	80095c4 <USB_ReadInterrupts>
 8005028:	4603      	mov	r3, r0
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d107      	bne.n	8005042 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 0202 	and.w	r2, r2, #2
 8005040:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fabc 	bl	80095c4 <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d161      	bne.n	800511a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0210 	bic.w	r2, r2, #16
 8005064:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800508c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005090:	d124      	bne.n	80050dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d035      	beq.n	800510a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6a38      	ldr	r0, [r7, #32]
 80050b2:	f004 f8f3 	bl	800929c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c2:	441a      	add	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	615a      	str	r2, [r3, #20]
 80050da:	e016      	b.n	800510a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80050e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050e6:	d110      	bne.n	800510a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050ee:	2208      	movs	r2, #8
 80050f0:	4619      	mov	r1, r3
 80050f2:	6a38      	ldr	r0, [r7, #32]
 80050f4:	f004 f8d2 	bl	800929c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005104:	441a      	add	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0210 	orr.w	r2, r2, #16
 8005118:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fa50 	bl	80095c4 <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800512a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800512e:	f040 80a7 	bne.w	8005280 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fa55 	bl	80095ea <USB_ReadDevAllOutEpInterrupt>
 8005140:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005142:	e099      	b.n	8005278 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 808e 	beq.w	800526c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f004 fa79 	bl	8009652 <USB_ReadDevOutEPInterrupt>
 8005160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	2301      	movs	r3, #1
 800517c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800517e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fea3 	bl	8005ecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	461a      	mov	r2, r3
 800519e:	2308      	movs	r3, #8
 80051a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ff79 	bl	800609c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2310      	movs	r3, #16
 80051c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d030      	beq.n	8005232 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d8:	2b80      	cmp	r3, #128	@ 0x80
 80051da:	d109      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	3304      	adds	r3, #4
 8005204:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d108      	bne.n	8005220 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f006 fe04 	bl	800be28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	2302      	movs	r3, #2
 8005230:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2320      	movs	r3, #32
 800524c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d009      	beq.n	800526c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800526a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	3301      	adds	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	f47f af62 	bne.w	8005144 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f004 f99d 	bl	80095c4 <USB_ReadInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005290:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005294:	f040 80db 	bne.w	800544e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f004 f9be 	bl	800961e <USB_ReadDevAllInEpInterrupt>
 80052a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80052a8:	e0cd      	b.n	8005446 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80c2 	beq.w	800543a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 f9e4 	bl	800968e <USB_ReadDevInEPInterrupt>
 80052c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d057      	beq.n	8005382 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2201      	movs	r2, #1
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052f2:	4013      	ands	r3, r2
 80052f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005302:	461a      	mov	r2, r3
 8005304:	2301      	movs	r3, #1
 8005306:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	799b      	ldrb	r3, [r3, #6]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d132      	bne.n	8005376 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3320      	adds	r3, #32
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4403      	add	r3, r0
 8005330:	331c      	adds	r3, #28
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4419      	add	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4403      	add	r3, r0
 8005344:	3320      	adds	r3, #32
 8005346:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <HAL_PCD_IRQHandler+0x3a2>
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005352:	4613      	mov	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3324      	adds	r3, #36	@ 0x24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800536e:	461a      	mov	r2, r3
 8005370:	2101      	movs	r1, #1
 8005372:	f004 f9eb 	bl	800974c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f006 fcce 	bl	800bd1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005398:	461a      	mov	r2, r3
 800539a:	2308      	movs	r3, #8
 800539c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	2310      	movs	r3, #16
 80053b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2340      	movs	r3, #64	@ 0x40
 80053d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d023      	beq.n	8005428 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053e2:	6a38      	ldr	r0, [r7, #32]
 80053e4:	f003 f9d2 	bl	800878c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	3310      	adds	r3, #16
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	3304      	adds	r3, #4
 80053fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	78db      	ldrb	r3, [r3, #3]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d108      	bne.n	8005416 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f006 fd1b 	bl	800be4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005422:	461a      	mov	r2, r3
 8005424:	2302      	movs	r3, #2
 8005426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fcbd 	bl	8005db4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	3301      	adds	r3, #1
 800543e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f af2e 	bne.w	80052aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f004 f8b6 	bl	80095c4 <USB_ReadInterrupts>
 8005458:	4603      	mov	r3, r0
 800545a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800545e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005462:	d122      	bne.n	80054aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800547e:	2b01      	cmp	r3, #1
 8005480:	d108      	bne.n	8005494 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fea3 	bl	80061d8 <HAL_PCDEx_LPM_Callback>
 8005492:	e002      	b.n	800549a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f006 fcb9 	bl	800be0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80054a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 f888 	bl	80095c4 <USB_ReadInterrupts>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054be:	d112      	bne.n	80054e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d102      	bne.n	80054d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f006 fc75 	bl	800bdc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 f86a 	bl	80095c4 <USB_ReadInterrupts>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fa:	f040 80b7 	bne.w	800566c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2110      	movs	r1, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f003 f937 	bl	800878c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005522:	e046      	b.n	80055b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005536:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800556a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005586:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800558a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ae:	3301      	adds	r3, #1
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d3b2      	bcc.n	8005524 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	7bdb      	ldrb	r3, [r3, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ea:	f043 030b 	orr.w	r3, r3, #11
 80055ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005600:	f043 030b 	orr.w	r3, r3, #11
 8005604:	6453      	str	r3, [r2, #68]	@ 0x44
 8005606:	e015      	b.n	8005634 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800561a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800561e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800562e:	f043 030b 	orr.w	r3, r3, #11
 8005632:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005642:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005646:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005656:	461a      	mov	r2, r3
 8005658:	f004 f878 	bl	800974c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800566a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f003 ffa7 	bl	80095c4 <USB_ReadInterrupts>
 8005676:	4603      	mov	r3, r0
 8005678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800567c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005680:	d123      	bne.n	80056ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f004 f83d 	bl	8009706 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f003 f8f4 	bl	800887e <USB_GetDevSpeed>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681c      	ldr	r4, [r3, #0]
 80056a2:	f001 fa07 	bl	8006ab4 <HAL_RCC_GetHCLKFreq>
 80056a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056ac:	461a      	mov	r2, r3
 80056ae:	4620      	mov	r0, r4
 80056b0:	f002 fdf8 	bl	80082a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f006 fb5a 	bl	800bd6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80056c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f003 ff78 	bl	80095c4 <USB_ReadInterrupts>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d10a      	bne.n	80056f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f006 fb37 	bl	800bd52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f002 0208 	and.w	r2, r2, #8
 80056f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f003 ff63 	bl	80095c4 <USB_ReadInterrupts>
 80056fe:	4603      	mov	r3, r0
 8005700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005704:	2b80      	cmp	r3, #128	@ 0x80
 8005706:	d123      	bne.n	8005750 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	e014      	b.n	8005744 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	b2db      	uxtb	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fb0a 	bl	8005d52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	3301      	adds	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	791b      	ldrb	r3, [r3, #4]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	4293      	cmp	r3, r2
 800574e:	d3e4      	bcc.n	800571a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f003 ff35 	bl	80095c4 <USB_ReadInterrupts>
 800575a:	4603      	mov	r3, r0
 800575c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005764:	d13c      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005766:	2301      	movs	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
 800576a:	e02b      	b.n	80057c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3318      	adds	r3, #24
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d115      	bne.n	80057be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005792:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005794:	2b00      	cmp	r3, #0
 8005796:	da12      	bge.n	80057be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3317      	adds	r3, #23
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 faca 	bl	8005d52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	3301      	adds	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	791b      	ldrb	r3, [r3, #4]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d3cd      	bcc.n	800576c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f003 feed 	bl	80095c4 <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057f4:	d156      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f6:	2301      	movs	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fa:	e045      	b.n	8005888 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d12e      	bne.n	8005882 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005824:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005826:	2b00      	cmp	r3, #0
 8005828:	da2b      	bge.n	8005882 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005836:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800583a:	429a      	cmp	r2, r3
 800583c:	d121      	bne.n	8005882 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800587a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800587e:	6053      	str	r3, [r2, #4]
            break;
 8005880:	e008      	b.n	8005894 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	791b      	ldrb	r3, [r3, #4]
 800588c:	461a      	mov	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	4293      	cmp	r3, r2
 8005892:	d3b3      	bcc.n	80057fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f003 fe8b 	bl	80095c4 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b8:	d10a      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f006 fad8 	bl	800be70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 fe75 	bl	80095c4 <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d115      	bne.n	8005910 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f006 fac8 	bl	800be8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e000      	b.n	8005910 <HAL_PCD_IRQHandler+0x93c>
      return;
 800590e:	bf00      	nop
    }
  }
}
 8005910:	3734      	adds	r7, #52	@ 0x34
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}

08005916 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_PCD_SetAddress+0x1a>
 800592c:	2302      	movs	r3, #2
 800592e:	e012      	b.n	8005956 <HAL_PCD_SetAddress+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f003 fdd4 	bl	80094f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	461a      	mov	r2, r3
 800596c:	4603      	mov	r3, r0
 800596e:	70fb      	strb	r3, [r7, #3]
 8005970:	460b      	mov	r3, r1
 8005972:	803b      	strh	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800597c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	da0f      	bge.n	80059a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3310      	adds	r3, #16
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	705a      	strb	r2, [r3, #1]
 80059a2:	e00f      	b.n	80059c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80059d0:	883b      	ldrh	r3, [r7, #0]
 80059d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	78ba      	ldrb	r2, [r7, #2]
 80059de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059f2:	78bb      	ldrb	r3, [r7, #2]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d102      	bne.n	80059fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_PCD_EP_Open+0xae>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e00e      	b.n	8005a2a <HAL_PCD_EP_Open+0xcc>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68f9      	ldr	r1, [r7, #12]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f002 ff54 	bl	80088c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a28:	7afb      	ldrb	r3, [r7, #11]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da0f      	bge.n	8005a66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	f003 020f 	and.w	r2, r3, #15
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	3310      	adds	r3, #16
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	705a      	strb	r2, [r3, #1]
 8005a64:	e00f      	b.n	8005a86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_PCD_EP_Close+0x6e>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e00e      	b.n	8005abe <HAL_PCD_EP_Close+0x8c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 ff92 	bl	80089d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2200      	movs	r2, #0
 8005b00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	799b      	ldrb	r3, [r3, #6]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d102      	bne.n	8005b22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	799b      	ldrb	r3, [r3, #6]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	f003 f82f 	bl	8008b90 <USB_EPStartXfer>

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 020f 	and.w	r2, r3, #15
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	f003 020f 	and.w	r2, r3, #15
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	3310      	adds	r3, #16
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	3304      	adds	r3, #4
 8005b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	799b      	ldrb	r3, [r3, #6]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	799b      	ldrb	r3, [r3, #6]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	f002 ffdd 	bl	8008b90 <USB_EPStartXfer>

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	7912      	ldrb	r2, [r2, #4]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e04f      	b.n	8005c9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da0f      	bge.n	8005c26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	3310      	adds	r3, #16
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	705a      	strb	r2, [r3, #1]
 8005c24:	e00d      	b.n	8005c42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_PCD_EP_SetStall+0x82>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e01d      	b.n	8005c9e <HAL_PCD_EP_SetStall+0xbe>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f003 fb6b 	bl	800934c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7999      	ldrb	r1, [r3, #6]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f003 fd5c 	bl	800974c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7912      	ldrb	r2, [r2, #4]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e042      	b.n	8005d4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da0f      	bge.n	8005cec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	3310      	adds	r3, #16
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	4413      	add	r3, r2
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	705a      	strb	r2, [r3, #1]
 8005cea:	e00f      	b.n	8005d0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 020f 	and.w	r2, r3, #15
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	3304      	adds	r3, #4
 8005d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_PCD_EP_ClrStall+0x86>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e00e      	b.n	8005d4a <HAL_PCD_EP_ClrStall+0xa4>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68f9      	ldr	r1, [r7, #12]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f003 fb74 	bl	8009428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da0c      	bge.n	8005d80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	f003 020f 	and.w	r2, r3, #15
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	3310      	adds	r3, #16
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e00c      	b.n	8005d9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	f003 020f 	and.w	r2, r3, #15
 8005d86:	4613      	mov	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	3304      	adds	r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f003 f993 	bl	80090cc <USB_EPStopXfer>
 8005da6:	4603      	mov	r3, r0
 8005da8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005daa:	7afb      	ldrb	r3, [r7, #11]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3304      	adds	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d901      	bls.n	8005dec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e06b      	b.n	8005ec4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d902      	bls.n	8005e08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3303      	adds	r3, #3
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e10:	e02a      	b.n	8005e68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d902      	bls.n	8005e2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3303      	adds	r3, #3
 8005e32:	089b      	lsrs	r3, r3, #2
 8005e34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68d9      	ldr	r1, [r3, #12]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4603      	mov	r3, r0
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f003 f9e8 	bl	8009220 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	441a      	add	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	441a      	add	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d809      	bhi.n	8005e92 <PCD_WriteEmptyTxFifo+0xde>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d203      	bcs.n	8005e92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1bf      	bne.n	8005e12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d811      	bhi.n	8005ec2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	6939      	ldr	r1, [r7, #16]
 8005eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	333c      	adds	r3, #60	@ 0x3c
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	799b      	ldrb	r3, [r3, #6]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d17b      	bne.n	8005ffa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4a61      	ldr	r2, [pc, #388]	@ (8006094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	f240 80b9 	bls.w	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80b3 	beq.w	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f34:	6093      	str	r3, [r2, #8]
 8005f36:	e0a7      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2320      	movs	r3, #32
 8005f52:	6093      	str	r3, [r2, #8]
 8005f54:	e098      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 8093 	bne.w	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4a4b      	ldr	r2, [pc, #300]	@ (8006094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d90f      	bls.n	8005f8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f86:	6093      	str	r3, [r2, #8]
 8005f88:	e07e      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	0159      	lsls	r1, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	440b      	add	r3, r1
 8005fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d114      	bne.n	8005fec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	f003 fbb8 	bl	800974c <USB_EP0_OutStart>
 8005fdc:	e006      	b.n	8005fec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	441a      	add	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f005 fe78 	bl	800bce8 <HAL_PCD_DataOutStageCallback>
 8005ff8:	e046      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d124      	bne.n	800604c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601e:	6093      	str	r3, [r2, #8]
 8006020:	e032      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	2320      	movs	r3, #32
 800603c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f005 fe4f 	bl	800bce8 <HAL_PCD_DataOutStageCallback>
 800604a:	e01d      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d114      	bne.n	800607c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006074:	461a      	mov	r2, r3
 8006076:	2100      	movs	r1, #0
 8006078:	f003 fb68 	bl	800974c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f005 fe30 	bl	800bce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	4f54300a 	.word	0x4f54300a
 8006098:	4f54310a 	.word	0x4f54310a

0800609c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	333c      	adds	r3, #60	@ 0x3c
 80060b4:	3304      	adds	r3, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a15      	ldr	r2, [pc, #84]	@ (8006124 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d90e      	bls.n	80060f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f005 fde7 	bl	800bcc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <PCD_EP_OutSetupPacket_int+0x88>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d90c      	bls.n	8006118 <PCD_EP_OutSetupPacket_int+0x7c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	799b      	ldrb	r3, [r3, #6]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d108      	bne.n	8006118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006110:	461a      	mov	r2, r3
 8006112:	2101      	movs	r1, #1
 8006114:	f003 fb1a 	bl	800974c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	4f54300a 	.word	0x4f54300a

08006128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
 8006134:	4613      	mov	r3, r2
 8006136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d107      	bne.n	8006156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006146:	883b      	ldrh	r3, [r7, #0]
 8006148:	0419      	lsls	r1, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	430a      	orrs	r2, r1
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
 8006154:	e028      	b.n	80061a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
 8006168:	e00d      	b.n	8006186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	3340      	adds	r3, #64	@ 0x40
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	3301      	adds	r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	3b01      	subs	r3, #1
 800618c:	429a      	cmp	r2, r3
 800618e:	d3ec      	bcc.n	800616a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006190:	883b      	ldrh	r3, [r7, #0]
 8006192:	0418      	lsls	r0, r3, #16
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b01      	subs	r3, #1
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	4302      	orrs	r2, r0
 80061a0:	3340      	adds	r3, #64	@ 0x40
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	887a      	ldrh	r2, [r7, #2]
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e267      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d075      	beq.n	80062fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800620e:	4b88      	ldr	r3, [pc, #544]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b04      	cmp	r3, #4
 8006218:	d00c      	beq.n	8006234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621a:	4b85      	ldr	r3, [pc, #532]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006222:	2b08      	cmp	r3, #8
 8006224:	d112      	bne.n	800624c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006226:	4b82      	ldr	r3, [pc, #520]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006232:	d10b      	bne.n	800624c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006234:	4b7e      	ldr	r3, [pc, #504]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05b      	beq.n	80062f8 <HAL_RCC_OscConfig+0x108>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d157      	bne.n	80062f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e242      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006254:	d106      	bne.n	8006264 <HAL_RCC_OscConfig+0x74>
 8006256:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e01d      	b.n	80062a0 <HAL_RCC_OscConfig+0xb0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x98>
 800626e:	4b70      	ldr	r3, [pc, #448]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a6f      	ldr	r2, [pc, #444]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	4b6d      	ldr	r3, [pc, #436]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a6c      	ldr	r2, [pc, #432]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e00b      	b.n	80062a0 <HAL_RCC_OscConfig+0xb0>
 8006288:	4b69      	ldr	r3, [pc, #420]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800628e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b66      	ldr	r3, [pc, #408]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a65      	ldr	r2, [pc, #404]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800629a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800629e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d013      	beq.n	80062d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fe fa72 	bl	8004790 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b0:	f7fe fa6e 	bl	8004790 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	@ 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e207      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0xc0>
 80062ce:	e014      	b.n	80062fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fe fa5e 	bl	8004790 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d8:	f7fe fa5a 	bl	8004790 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e1f3      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ea:	4b51      	ldr	r3, [pc, #324]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0xe8>
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d063      	beq.n	80063ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006306:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006312:	4b47      	ldr	r3, [pc, #284]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800631a:	2b08      	cmp	r3, #8
 800631c:	d11c      	bne.n	8006358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800631e:	4b44      	ldr	r3, [pc, #272]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d116      	bne.n	8006358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_RCC_OscConfig+0x152>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e1c7      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006342:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4937      	ldr	r1, [pc, #220]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006352:	4313      	orrs	r3, r2
 8006354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	e03a      	b.n	80063ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006360:	4b34      	ldr	r3, [pc, #208]	@ (8006434 <HAL_RCC_OscConfig+0x244>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006366:	f7fe fa13 	bl	8004790 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800636e:	f7fe fa0f 	bl	8004790 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e1a8      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006380:	4b2b      	ldr	r3, [pc, #172]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638c:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4925      	ldr	r1, [pc, #148]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]
 80063a0:	e015      	b.n	80063ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a2:	4b24      	ldr	r3, [pc, #144]	@ (8006434 <HAL_RCC_OscConfig+0x244>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fe f9f2 	bl	8004790 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b0:	f7fe f9ee 	bl	8004790 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e187      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d036      	beq.n	8006448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e2:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <HAL_RCC_OscConfig+0x248>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fe f9d2 	bl	8004790 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f0:	f7fe f9ce 	bl	8004790 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e167      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x200>
 800640e:	e01b      	b.n	8006448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <HAL_RCC_OscConfig+0x248>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006416:	f7fe f9bb 	bl	8004790 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	e00e      	b.n	800643c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800641e:	f7fe f9b7 	bl	8004790 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d907      	bls.n	800643c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e150      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
 8006430:	40023800 	.word	0x40023800
 8006434:	42470000 	.word	0x42470000
 8006438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800643c:	4b88      	ldr	r3, [pc, #544]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800643e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1ea      	bne.n	800641e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8097 	beq.w	8006584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800645a:	4b81      	ldr	r3, [pc, #516]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	4b7d      	ldr	r3, [pc, #500]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006474:	6413      	str	r3, [r2, #64]	@ 0x40
 8006476:	4b7a      	ldr	r3, [pc, #488]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006486:	4b77      	ldr	r3, [pc, #476]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d118      	bne.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006492:	4b74      	ldr	r3, [pc, #464]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a73      	ldr	r2, [pc, #460]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800649e:	f7fe f977 	bl	8004790 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a6:	f7fe f973 	bl	8004790 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e10c      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f0      	beq.n	80064a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d106      	bne.n	80064da <HAL_RCC_OscConfig+0x2ea>
 80064cc:	4b64      	ldr	r3, [pc, #400]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	4a63      	ldr	r2, [pc, #396]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d8:	e01c      	b.n	8006514 <HAL_RCC_OscConfig+0x324>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d10c      	bne.n	80064fc <HAL_RCC_OscConfig+0x30c>
 80064e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064e8:	f043 0304 	orr.w	r3, r3, #4
 80064ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fa:	e00b      	b.n	8006514 <HAL_RCC_OscConfig+0x324>
 80064fc:	4b58      	ldr	r3, [pc, #352]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a57      	ldr	r2, [pc, #348]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	4b55      	ldr	r3, [pc, #340]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650c:	4a54      	ldr	r2, [pc, #336]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800650e:	f023 0304 	bic.w	r3, r3, #4
 8006512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fe f938 	bl	8004790 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fe f934 	bl	8004790 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0cb      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	4b49      	ldr	r3, [pc, #292]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0ee      	beq.n	8006524 <HAL_RCC_OscConfig+0x334>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006548:	f7fe f922 	bl	8004790 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fe f91e 	bl	8004790 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0b5      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006566:	4b3e      	ldr	r3, [pc, #248]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ee      	bne.n	8006550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d105      	bne.n	8006584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006578:	4b39      	ldr	r3, [pc, #228]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	4a38      	ldr	r2, [pc, #224]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800657e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80a1 	beq.w	80066d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800658e:	4b34      	ldr	r3, [pc, #208]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
 8006596:	2b08      	cmp	r3, #8
 8006598:	d05c      	beq.n	8006654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d141      	bne.n	8006626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a2:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a8:	f7fe f8f2 	bl	8004790 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fe f8ee 	bl	8004790 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e087      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	4b27      	ldr	r3, [pc, #156]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69da      	ldr	r2, [r3, #28]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	019b      	lsls	r3, r3, #6
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	3b01      	subs	r3, #1
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	491b      	ldr	r1, [pc, #108]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fe:	f7fe f8c7 	bl	8004790 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006606:	f7fe f8c3 	bl	8004790 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e05c      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006618:	4b11      	ldr	r3, [pc, #68]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x416>
 8006624:	e054      	b.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006626:	4b10      	ldr	r3, [pc, #64]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7fe f8b0 	bl	8004790 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006634:	f7fe f8ac 	bl	8004790 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e045      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCC_OscConfig+0x444>
 8006652:	e03d      	b.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d107      	bne.n	800666c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e038      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
 8006660:	40023800 	.word	0x40023800
 8006664:	40007000 	.word	0x40007000
 8006668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800666c:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x4ec>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d028      	beq.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d121      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	429a      	cmp	r2, r3
 8006694:	d11a      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d111      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d107      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d001      	beq.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800

080066e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0cc      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b68      	ldr	r3, [pc, #416]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d90c      	bls.n	800671c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b65      	ldr	r3, [pc, #404]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b63      	ldr	r3, [pc, #396]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0b8      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006734:	4b59      	ldr	r3, [pc, #356]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a58      	ldr	r2, [pc, #352]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800673e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800674c:	4b53      	ldr	r3, [pc, #332]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a52      	ldr	r2, [pc, #328]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006758:	4b50      	ldr	r3, [pc, #320]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	494d      	ldr	r1, [pc, #308]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	4b47      	ldr	r3, [pc, #284]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d119      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e07f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d003      	beq.n	800679e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679a:	2b03      	cmp	r3, #3
 800679c:	d107      	bne.n	80067ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679e:	4b3f      	ldr	r3, [pc, #252]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e06f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ae:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e067      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067be:	4b37      	ldr	r3, [pc, #220]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f023 0203 	bic.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4934      	ldr	r1, [pc, #208]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d0:	f7fd ffde 	bl	8004790 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	e00a      	b.n	80067ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d8:	f7fd ffda 	bl	8004790 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e04f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 020c 	and.w	r2, r3, #12
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1eb      	bne.n	80067d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006800:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20c      	bcs.n	8006828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b22      	ldr	r3, [pc, #136]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b20      	ldr	r3, [pc, #128]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e032      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006834:	4b19      	ldr	r3, [pc, #100]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4916      	ldr	r1, [pc, #88]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006852:	4b12      	ldr	r3, [pc, #72]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	490e      	ldr	r1, [pc, #56]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	4313      	orrs	r3, r2
 8006864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006866:	f000 f821 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490a      	ldr	r1, [pc, #40]	@ (80068a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	fa22 f303 	lsr.w	r3, r2, r3
 800687e:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006882:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7fd ff3e 	bl	8004708 <HAL_InitTick>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023c00 	.word	0x40023c00
 800689c:	40023800 	.word	0x40023800
 80068a0:	0800ec14 	.word	0x0800ec14
 80068a4:	20000000 	.word	0x20000000
 80068a8:	20000004 	.word	0x20000004

080068ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b094      	sub	sp, #80	@ 0x50
 80068b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068c4:	4b79      	ldr	r3, [pc, #484]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 030c 	and.w	r3, r3, #12
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d00d      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x40>
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	f200 80e1 	bhi.w	8006a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x34>
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d003      	beq.n	80068e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068de:	e0db      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e0:	4b73      	ldr	r3, [pc, #460]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068e4:	e0db      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068e6:	4b72      	ldr	r3, [pc, #456]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ea:	e0d8      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068ec:	4b6f      	ldr	r3, [pc, #444]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f6:	4b6d      	ldr	r3, [pc, #436]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006902:	4b6a      	ldr	r3, [pc, #424]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	2200      	movs	r2, #0
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006914:	633b      	str	r3, [r7, #48]	@ 0x30
 8006916:	2300      	movs	r3, #0
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
 800691a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	0159      	lsls	r1, r3, #5
 800692c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006930:	0150      	lsls	r0, r2, #5
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4621      	mov	r1, r4
 8006938:	1a51      	subs	r1, r2, r1
 800693a:	6139      	str	r1, [r7, #16]
 800693c:	4629      	mov	r1, r5
 800693e:	eb63 0301 	sbc.w	r3, r3, r1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006950:	4659      	mov	r1, fp
 8006952:	018b      	lsls	r3, r1, #6
 8006954:	4651      	mov	r1, sl
 8006956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800695a:	4651      	mov	r1, sl
 800695c:	018a      	lsls	r2, r1, #6
 800695e:	4651      	mov	r1, sl
 8006960:	ebb2 0801 	subs.w	r8, r2, r1
 8006964:	4659      	mov	r1, fp
 8006966:	eb63 0901 	sbc.w	r9, r3, r1
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800697a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800697e:	4690      	mov	r8, r2
 8006980:	4699      	mov	r9, r3
 8006982:	4623      	mov	r3, r4
 8006984:	eb18 0303 	adds.w	r3, r8, r3
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	462b      	mov	r3, r5
 800698c:	eb49 0303 	adc.w	r3, r9, r3
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800699e:	4629      	mov	r1, r5
 80069a0:	028b      	lsls	r3, r1, #10
 80069a2:	4621      	mov	r1, r4
 80069a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069a8:	4621      	mov	r1, r4
 80069aa:	028a      	lsls	r2, r1, #10
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b2:	2200      	movs	r2, #0
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069bc:	f7fa f914 	bl	8000be8 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4613      	mov	r3, r2
 80069c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c8:	e058      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	2200      	movs	r2, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	4611      	mov	r1, r2
 80069d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	2300      	movs	r3, #0
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	0159      	lsls	r1, r3, #5
 80069f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069f6:	0150      	lsls	r0, r2, #5
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4641      	mov	r1, r8
 80069fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a02:	4649      	mov	r1, r9
 8006a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a20:	eb63 050b 	sbc.w	r5, r3, fp
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	00eb      	lsls	r3, r5, #3
 8006a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a32:	00e2      	lsls	r2, r4, #3
 8006a34:	4614      	mov	r4, r2
 8006a36:	461d      	mov	r5, r3
 8006a38:	4643      	mov	r3, r8
 8006a3a:	18e3      	adds	r3, r4, r3
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	464b      	mov	r3, r9
 8006a40:	eb45 0303 	adc.w	r3, r5, r3
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a52:	4629      	mov	r1, r5
 8006a54:	028b      	lsls	r3, r1, #10
 8006a56:	4621      	mov	r1, r4
 8006a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	028a      	lsls	r2, r1, #10
 8006a60:	4610      	mov	r0, r2
 8006a62:	4619      	mov	r1, r3
 8006a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a66:	2200      	movs	r2, #0
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	61fa      	str	r2, [r7, #28]
 8006a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a70:	f7fa f8ba 	bl	8000be8 <__aeabi_uldivmod>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4613      	mov	r3, r2
 8006a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	3301      	adds	r3, #1
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a96:	e002      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3750      	adds	r7, #80	@ 0x50
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aaa:	bf00      	nop
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	00f42400 	.word	0x00f42400

08006ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab8:	4b03      	ldr	r3, [pc, #12]	@ (8006ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aba:	681b      	ldr	r3, [r3, #0]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000000 	.word	0x20000000

08006acc <LL_ADC_REG_SetSequencerLength>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8006b26:	481c      	ldr	r0, [pc, #112]	@ (8006b98 <LL_ADC_CommonInit+0x80>)
 8006b28:	f7ff ffe3 	bl	8006af2 <LL_ADC_IsEnabled>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	481b      	ldr	r0, [pc, #108]	@ (8006b9c <LL_ADC_CommonInit+0x84>)
 8006b30:	f7ff ffdf 	bl	8006af2 <LL_ADC_IsEnabled>
 8006b34:	4603      	mov	r3, r0
 8006b36:	431c      	orrs	r4, r3
 8006b38:	4819      	ldr	r0, [pc, #100]	@ (8006ba0 <LL_ADC_CommonInit+0x88>)
 8006b3a:	f7ff ffda 	bl	8006af2 <LL_ADC_IsEnabled>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4323      	orrs	r3, r4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d120      	bne.n	8006b88 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d012      	beq.n	8006b74 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4b14      	ldr	r3, [pc, #80]	@ (8006ba4 <LL_ADC_CommonInit+0x8c>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	6811      	ldr	r1, [r2, #0]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	6852      	ldr	r2, [r2, #4]
 8006b5e:	4311      	orrs	r1, r2
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	6892      	ldr	r2, [r2, #8]
 8006b64:	4311      	orrs	r1, r2
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	68d2      	ldr	r2, [r2, #12]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	e00b      	b.n	8006b8c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <LL_ADC_CommonInit+0x8c>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	e001      	b.n	8006b8c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40012000 	.word	0x40012000
 8006b9c:	40012100 	.word	0x40012100
 8006ba0:	40012200 	.word	0x40012200
 8006ba4:	fffc10e0 	.word	0xfffc10e0

08006ba8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff ff9b 	bl	8006af2 <LL_ADC_IsEnabled>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d117      	bne.n	8006bf2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006bca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	6811      	ldr	r1, [r2, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	e001      	b.n	8006bf6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff ff6f 	bl	8006af2 <LL_ADC_IsEnabled>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d12b      	bne.n	8006c72 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	e005      	b.n	8006c42 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <LL_ADC_REG_Init+0x80>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	68d2      	ldr	r2, [r2, #12]
 8006c56:	4311      	orrs	r1, r2
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6912      	ldr	r2, [r2, #16]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff ff2e 	bl	8006acc <LL_ADC_REG_SetSequencerLength>
 8006c70:	e001      	b.n	8006c76 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	c0fffcfd 	.word	0xc0fffcfd

08006c84 <LL_EXTI_EnableIT_0_31>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006c8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ca4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4904      	ldr	r1, [pc, #16]	@ (8006ca4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	600b      	str	r3, [r1, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40013c00 	.word	0x40013c00

08006ca8 <LL_EXTI_DisableIT_0_31>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006cb0:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <LL_EXTI_DisableIT_0_31+0x24>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	4904      	ldr	r1, [pc, #16]	@ (8006ccc <LL_EXTI_DisableIT_0_31+0x24>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40013c00 	.word	0x40013c00

08006cd0 <LL_EXTI_EnableEvent_0_31>:
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40013c00 	.word	0x40013c00

08006cf4 <LL_EXTI_DisableEvent_0_31>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	4904      	ldr	r1, [pc, #16]	@ (8006d18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	604b      	str	r3, [r1, #4]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40013c00 	.word	0x40013c00

08006d1c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	4904      	ldr	r1, [pc, #16]	@ (8006d3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40013c00 	.word	0x40013c00

08006d40 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006d48:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	4904      	ldr	r1, [pc, #16]	@ (8006d64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40013c00 	.word	0x40013c00

08006d68 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006d70:	4b05      	ldr	r3, [pc, #20]	@ (8006d88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	4904      	ldr	r1, [pc, #16]	@ (8006d88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60cb      	str	r3, [r1, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40013c00 	.word	0x40013c00

08006d8c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	4904      	ldr	r1, [pc, #16]	@ (8006db0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60cb      	str	r3, [r1, #12]
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40013c00 	.word	0x40013c00

08006db4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d065      	beq.n	8006e94 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d06b      	beq.n	8006ea8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	795b      	ldrb	r3, [r3, #5]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d01c      	beq.n	8006e12 <LL_EXTI_Init+0x5e>
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	dc25      	bgt.n	8006e28 <LL_EXTI_Init+0x74>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <LL_EXTI_Init+0x32>
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d00b      	beq.n	8006dfc <LL_EXTI_Init+0x48>
 8006de4:	e020      	b.n	8006e28 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff ff82 	bl	8006cf4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff ff45 	bl	8006c84 <LL_EXTI_EnableIT_0_31>
          break;
 8006dfa:	e018      	b.n	8006e2e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff ff51 	bl	8006ca8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff ff60 	bl	8006cd0 <LL_EXTI_EnableEvent_0_31>
          break;
 8006e10:	e00d      	b.n	8006e2e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff ff34 	bl	8006c84 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ff55 	bl	8006cd0 <LL_EXTI_EnableEvent_0_31>
          break;
 8006e26:	e002      	b.n	8006e2e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8006e2c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	799b      	ldrb	r3, [r3, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d038      	beq.n	8006ea8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	799b      	ldrb	r3, [r3, #6]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d01c      	beq.n	8006e78 <LL_EXTI_Init+0xc4>
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	dc25      	bgt.n	8006e8e <LL_EXTI_Init+0xda>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d002      	beq.n	8006e4c <LL_EXTI_Init+0x98>
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d00b      	beq.n	8006e62 <LL_EXTI_Init+0xae>
 8006e4a:	e020      	b.n	8006e8e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff ff9b 	bl	8006d8c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff ff5e 	bl	8006d1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006e60:	e022      	b.n	8006ea8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff6a 	bl	8006d40 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ff79 	bl	8006d68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006e76:	e017      	b.n	8006ea8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ff4d 	bl	8006d1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff ff6e 	bl	8006d68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006e8c:	e00c      	b.n	8006ea8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
            break;
 8006e92:	e009      	b.n	8006ea8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff ff05 	bl	8006ca8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff ff26 	bl	8006cf4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <LL_GPIO_SetPinMode>:
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b08b      	sub	sp, #44	@ 0x2c
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	fa93 f3a3 	rbit	r3, r3
 8006ecc:	613b      	str	r3, [r7, #16]
  return result;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006ed8:	2320      	movs	r3, #32
 8006eda:	e003      	b.n	8006ee4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	fab3 f383 	clz	r3, r3
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	2103      	movs	r1, #3
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	401a      	ands	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	fa93 f3a3 	rbit	r3, r3
 8006efa:	61fb      	str	r3, [r7, #28]
  return result;
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006f06:	2320      	movs	r3, #32
 8006f08:	e003      	b.n	8006f12 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	fab3 f383 	clz	r3, r3
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]
}
 8006f20:	bf00      	nop
 8006f22:	372c      	adds	r7, #44	@ 0x2c
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <LL_GPIO_SetPinOutputType>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	401a      	ands	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	605a      	str	r2, [r3, #4]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <LL_GPIO_SetPinSpeed>:
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b08b      	sub	sp, #44	@ 0x2c
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	613b      	str	r3, [r7, #16]
  return result;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006f82:	2320      	movs	r3, #32
 8006f84:	e003      	b.n	8006f8e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	fab3 f383 	clz	r3, r3
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	2103      	movs	r1, #3
 8006f92:	fa01 f303 	lsl.w	r3, r1, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	401a      	ands	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	fa93 f3a3 	rbit	r3, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
  return result;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	e003      	b.n	8006fbc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	fab3 f383 	clz	r3, r3
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
}
 8006fca:	bf00      	nop
 8006fcc:	372c      	adds	r7, #44	@ 0x2c
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <LL_GPIO_SetPinPull>:
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b08b      	sub	sp, #44	@ 0x2c
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	fa93 f3a3 	rbit	r3, r3
 8006ff0:	613b      	str	r3, [r7, #16]
  return result;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	e003      	b.n	8007008 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	2103      	movs	r1, #3
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	fa93 f3a3 	rbit	r3, r3
 800701e:	61fb      	str	r3, [r7, #28]
  return result;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800702a:	2320      	movs	r3, #32
 800702c:	e003      	b.n	8007036 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	fab3 f383 	clz	r3, r3
 8007034:	b2db      	uxtb	r3, r3
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	431a      	orrs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	60da      	str	r2, [r3, #12]
}
 8007044:	bf00      	nop
 8007046:	372c      	adds	r7, #44	@ 0x2c
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <LL_GPIO_SetAFPin_0_7>:
{
 8007050:	b480      	push	{r7}
 8007052:	b08b      	sub	sp, #44	@ 0x2c
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	fa93 f3a3 	rbit	r3, r3
 800706a:	613b      	str	r3, [r7, #16]
  return result;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007076:	2320      	movs	r3, #32
 8007078:	e003      	b.n	8007082 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	fab3 f383 	clz	r3, r3
 8007080:	b2db      	uxtb	r3, r3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	210f      	movs	r1, #15
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	43db      	mvns	r3, r3
 800708c:	401a      	ands	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	fa93 f3a3 	rbit	r3, r3
 8007098:	61fb      	str	r3, [r7, #28]
  return result;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80070a4:	2320      	movs	r3, #32
 80070a6:	e003      	b.n	80070b0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	fab3 f383 	clz	r3, r3
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	fa01 f303 	lsl.w	r3, r1, r3
 80070b8:	431a      	orrs	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	372c      	adds	r7, #44	@ 0x2c
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_GPIO_SetAFPin_8_15>:
{
 80070ca:	b480      	push	{r7}
 80070cc:	b08b      	sub	sp, #44	@ 0x2c
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	fa93 f3a3 	rbit	r3, r3
 80070e6:	613b      	str	r3, [r7, #16]
  return result;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80070f2:	2320      	movs	r3, #32
 80070f4:	e003      	b.n	80070fe <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	fab3 f383 	clz	r3, r3
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	210f      	movs	r1, #15
 8007102:	fa01 f303 	lsl.w	r3, r1, r3
 8007106:	43db      	mvns	r3, r3
 8007108:	401a      	ands	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	fa93 f3a3 	rbit	r3, r3
 8007116:	61fb      	str	r3, [r7, #28]
  return result;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007122:	2320      	movs	r3, #32
 8007124:	e003      	b.n	800712e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	fab3 f383 	clz	r3, r3
 800712c:	b2db      	uxtb	r3, r3
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	431a      	orrs	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800713c:	bf00      	nop
 800713e:	372c      	adds	r7, #44	@ 0x2c
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	@ 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8007156:	2300      	movs	r3, #0
 8007158:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	fa93 f3a3 	rbit	r3, r3
 8007166:	617b      	str	r3, [r7, #20]
  return result;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <LL_GPIO_Init+0x2e>
    return 32U;
 8007172:	2320      	movs	r3, #32
 8007174:	e003      	b.n	800717e <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	fab3 f383 	clz	r3, r3
 800717c:	b2db      	uxtb	r3, r3
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007180:	e057      	b.n	8007232 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	2101      	movs	r1, #1
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	fa01 f303 	lsl.w	r3, r1, r3
 800718e:	4013      	ands	r3, r2
 8007190:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d049      	beq.n	800722c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d003      	beq.n	80071a8 <LL_GPIO_Init+0x60>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d10d      	bne.n	80071c4 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6a39      	ldr	r1, [r7, #32]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fed3 	bl	8006f5c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6a39      	ldr	r1, [r7, #32]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff feb4 	bl	8006f2c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6a39      	ldr	r1, [r7, #32]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ff02 	bl	8006fd6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d121      	bne.n	800721e <LL_GPIO_Init+0xd6>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	fa93 f3a3 	rbit	r3, r3
 80071e4:	60bb      	str	r3, [r7, #8]
  return result;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <LL_GPIO_Init+0xac>
    return 32U;
 80071f0:	2320      	movs	r3, #32
 80071f2:	e003      	b.n	80071fc <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	d807      	bhi.n	8007210 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	461a      	mov	r2, r3
 8007206:	6a39      	ldr	r1, [r7, #32]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ff21 	bl	8007050 <LL_GPIO_SetAFPin_0_7>
 800720e:	e006      	b.n	800721e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	461a      	mov	r2, r3
 8007216:	6a39      	ldr	r1, [r7, #32]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff56 	bl	80070ca <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	461a      	mov	r2, r3
 8007224:	6a39      	ldr	r1, [r7, #32]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff fe43 	bl	8006eb2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	3301      	adds	r3, #1
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1a0      	bne.n	8007182 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3728      	adds	r7, #40	@ 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007250:	4b04      	ldr	r3, [pc, #16]	@ (8007264 <LL_RCC_GetSysClkSource+0x18>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 030c 	and.w	r3, r3, #12
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800

08007268 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800726c:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <LL_RCC_GetAHBPrescaler+0x18>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007274:	4618      	mov	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800

08007284 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007288:	4b04      	ldr	r3, [pc, #16]	@ (800729c <LL_RCC_GetAPB1Prescaler+0x18>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8007290:	4618      	mov	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40023800 	.word	0x40023800

080072a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80072a4:	4b04      	ldr	r3, [pc, #16]	@ (80072b8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800

080072bc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072c0:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <LL_RCC_PLL_GetMainSource+0x18>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40023800 	.word	0x40023800

080072d8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80072dc:	4b04      	ldr	r3, [pc, #16]	@ (80072f0 <LL_RCC_PLL_GetN+0x18>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	099b      	lsrs	r3, r3, #6
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	40023800 	.word	0x40023800

080072f4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80072f8:	4b04      	ldr	r3, [pc, #16]	@ (800730c <LL_RCC_PLL_GetP+0x18>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007300:	4618      	mov	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40023800 	.word	0x40023800

08007310 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007314:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <LL_RCC_PLL_GetDivider+0x18>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800731c:	4618      	mov	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800

0800732c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007334:	f000 f820 	bl	8007378 <RCC_GetSystemClockFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f83e 	bl	80073c4 <RCC_GetHCLKClockFreq>
 8007348:	4602      	mov	r2, r0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 f84c 	bl	80073f0 <RCC_GetPCLK1ClockFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f858 	bl	8007418 <RCC_GetPCLK2ClockFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007382:	f7ff ff63 	bl	800724c <LL_RCC_GetSysClkSource>
 8007386:	4603      	mov	r3, r0
 8007388:	2b08      	cmp	r3, #8
 800738a:	d00c      	beq.n	80073a6 <RCC_GetSystemClockFreq+0x2e>
 800738c:	2b08      	cmp	r3, #8
 800738e:	d80f      	bhi.n	80073b0 <RCC_GetSystemClockFreq+0x38>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <RCC_GetSystemClockFreq+0x22>
 8007394:	2b04      	cmp	r3, #4
 8007396:	d003      	beq.n	80073a0 <RCC_GetSystemClockFreq+0x28>
 8007398:	e00a      	b.n	80073b0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800739a:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <RCC_GetSystemClockFreq+0x48>)
 800739c:	607b      	str	r3, [r7, #4]
      break;
 800739e:	e00a      	b.n	80073b6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80073a0:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <RCC_GetSystemClockFreq+0x48>)
 80073a2:	607b      	str	r3, [r7, #4]
      break;
 80073a4:	e007      	b.n	80073b6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80073a6:	2008      	movs	r0, #8
 80073a8:	f000 f84a 	bl	8007440 <RCC_PLL_GetFreqDomain_SYS>
 80073ac:	6078      	str	r0, [r7, #4]
      break;
 80073ae:	e002      	b.n	80073b6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80073b0:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <RCC_GetSystemClockFreq+0x48>)
 80073b2:	607b      	str	r3, [r7, #4]
      break;
 80073b4:	bf00      	nop
  }

  return frequency;
 80073b6:	687b      	ldr	r3, [r7, #4]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	00f42400 	.word	0x00f42400

080073c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80073cc:	f7ff ff4c 	bl	8007268 <LL_RCC_GetAHBPrescaler>
 80073d0:	4603      	mov	r3, r0
 80073d2:	091b      	lsrs	r3, r3, #4
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	4a04      	ldr	r2, [pc, #16]	@ (80073ec <RCC_GetHCLKClockFreq+0x28>)
 80073da:	5cd3      	ldrb	r3, [r2, r3]
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	40d3      	lsrs	r3, r2
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	0800ec14 	.word	0x0800ec14

080073f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80073f8:	f7ff ff44 	bl	8007284 <LL_RCC_GetAPB1Prescaler>
 80073fc:	4603      	mov	r3, r0
 80073fe:	0a9b      	lsrs	r3, r3, #10
 8007400:	4a04      	ldr	r2, [pc, #16]	@ (8007414 <RCC_GetPCLK1ClockFreq+0x24>)
 8007402:	5cd3      	ldrb	r3, [r2, r3]
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	40d3      	lsrs	r3, r2
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	0800ec24 	.word	0x0800ec24

08007418 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007420:	f7ff ff3e 	bl	80072a0 <LL_RCC_GetAPB2Prescaler>
 8007424:	4603      	mov	r3, r0
 8007426:	0b5b      	lsrs	r3, r3, #13
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <RCC_GetPCLK2ClockFreq+0x24>)
 800742a:	5cd3      	ldrb	r3, [r2, r3]
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	40d3      	lsrs	r3, r2
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	0800ec24 	.word	0x0800ec24

08007440 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007454:	f7ff ff32 	bl	80072bc <LL_RCC_PLL_GetMainSource>
 8007458:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007466:	d003      	beq.n	8007470 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007468:	e005      	b.n	8007476 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800746a:	4b12      	ldr	r3, [pc, #72]	@ (80074b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800746c:	617b      	str	r3, [r7, #20]
      break;
 800746e:	e005      	b.n	800747c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007470:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007472:	617b      	str	r3, [r7, #20]
      break;
 8007474:	e002      	b.n	800747c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007476:	4b0f      	ldr	r3, [pc, #60]	@ (80074b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007478:	617b      	str	r3, [r7, #20]
      break;
 800747a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b08      	cmp	r3, #8
 8007480:	d113      	bne.n	80074aa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007482:	f7ff ff45 	bl	8007310 <LL_RCC_PLL_GetDivider>
 8007486:	4602      	mov	r2, r0
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	fbb3 f4f2 	udiv	r4, r3, r2
 800748e:	f7ff ff23 	bl	80072d8 <LL_RCC_PLL_GetN>
 8007492:	4603      	mov	r3, r0
 8007494:	fb03 f404 	mul.w	r4, r3, r4
 8007498:	f7ff ff2c 	bl	80072f4 <LL_RCC_PLL_GetP>
 800749c:	4603      	mov	r3, r0
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	3301      	adds	r3, #1
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80074a8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80074aa:	693b      	ldr	r3, [r7, #16]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	00f42400 	.word	0x00f42400

080074b8 <LL_SPI_IsEnabled>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c8:	2b40      	cmp	r3, #64	@ 0x40
 80074ca:	d101      	bne.n	80074d0 <LL_SPI_IsEnabled+0x18>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <LL_SPI_IsEnabled+0x1a>
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <LL_SPI_SetCRCPolynomial>:
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	611a      	str	r2, [r3, #16]
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ffd3 	bl	80074b8 <LL_SPI_IsEnabled>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d139      	bne.n	800758c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007520:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	6811      	ldr	r1, [r2, #0]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	6852      	ldr	r2, [r2, #4]
 800752c:	4311      	orrs	r1, r2
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	6892      	ldr	r2, [r2, #8]
 8007532:	4311      	orrs	r1, r2
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	68d2      	ldr	r2, [r2, #12]
 8007538:	4311      	orrs	r1, r2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	6912      	ldr	r2, [r2, #16]
 800753e:	4311      	orrs	r1, r2
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	6952      	ldr	r2, [r2, #20]
 8007544:	4311      	orrs	r1, r2
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	6992      	ldr	r2, [r2, #24]
 800754a:	4311      	orrs	r1, r2
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	69d2      	ldr	r2, [r2, #28]
 8007550:	4311      	orrs	r1, r2
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	6a12      	ldr	r2, [r2, #32]
 8007556:	430a      	orrs	r2, r1
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f023 0204 	bic.w	r2, r3, #4
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800757a:	d105      	bne.n	8007588 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ffab 	bl	80074de <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007588:	2300      	movs	r3, #0
 800758a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	61da      	str	r2, [r3, #28]
  return status;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <LL_TIM_SetPrescaler>:
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <LL_TIM_SetAutoReload>:
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <LL_TIM_SetRepetitionCounter>:
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <LL_TIM_OC_SetCompareCH1>:
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_TIM_OC_SetCompareCH2>:
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_TIM_OC_SetCompareCH3>:
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_TIM_OC_SetCompareCH4>:
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f043 0201 	orr.w	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	615a      	str	r2, [r3, #20]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3d      	ldr	r2, [pc, #244]	@ (8007790 <LL_TIM_Init+0x108>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <LL_TIM_Init+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a6:	d00f      	beq.n	80076c8 <LL_TIM_Init+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3a      	ldr	r2, [pc, #232]	@ (8007794 <LL_TIM_Init+0x10c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <LL_TIM_Init+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a39      	ldr	r2, [pc, #228]	@ (8007798 <LL_TIM_Init+0x110>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d007      	beq.n	80076c8 <LL_TIM_Init+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a38      	ldr	r2, [pc, #224]	@ (800779c <LL_TIM_Init+0x114>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <LL_TIM_Init+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a37      	ldr	r2, [pc, #220]	@ (80077a0 <LL_TIM_Init+0x118>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d106      	bne.n	80076d6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007790 <LL_TIM_Init+0x108>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d02b      	beq.n	8007736 <LL_TIM_Init+0xae>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e4:	d027      	beq.n	8007736 <LL_TIM_Init+0xae>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007794 <LL_TIM_Init+0x10c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d023      	beq.n	8007736 <LL_TIM_Init+0xae>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a29      	ldr	r2, [pc, #164]	@ (8007798 <LL_TIM_Init+0x110>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01f      	beq.n	8007736 <LL_TIM_Init+0xae>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a28      	ldr	r2, [pc, #160]	@ (800779c <LL_TIM_Init+0x114>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01b      	beq.n	8007736 <LL_TIM_Init+0xae>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a27      	ldr	r2, [pc, #156]	@ (80077a0 <LL_TIM_Init+0x118>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d017      	beq.n	8007736 <LL_TIM_Init+0xae>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a26      	ldr	r2, [pc, #152]	@ (80077a4 <LL_TIM_Init+0x11c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d013      	beq.n	8007736 <LL_TIM_Init+0xae>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a25      	ldr	r2, [pc, #148]	@ (80077a8 <LL_TIM_Init+0x120>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00f      	beq.n	8007736 <LL_TIM_Init+0xae>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a24      	ldr	r2, [pc, #144]	@ (80077ac <LL_TIM_Init+0x124>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00b      	beq.n	8007736 <LL_TIM_Init+0xae>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a23      	ldr	r2, [pc, #140]	@ (80077b0 <LL_TIM_Init+0x128>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d007      	beq.n	8007736 <LL_TIM_Init+0xae>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a22      	ldr	r2, [pc, #136]	@ (80077b4 <LL_TIM_Init+0x12c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d003      	beq.n	8007736 <LL_TIM_Init+0xae>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a21      	ldr	r2, [pc, #132]	@ (80077b8 <LL_TIM_Init+0x130>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d106      	bne.n	8007744 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ff34 	bl	80075be <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ff20 	bl	80075a2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a0a      	ldr	r2, [pc, #40]	@ (8007790 <LL_TIM_Init+0x108>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <LL_TIM_Init+0xea>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a0c      	ldr	r2, [pc, #48]	@ (80077a0 <LL_TIM_Init+0x118>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d105      	bne.n	800777e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff ff2e 	bl	80075da <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ff71 	bl	8007666 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40010400 	.word	0x40010400
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40014400 	.word	0x40014400
 80077ac:	40014800 	.word	0x40014800
 80077b0:	40001800 	.word	0x40001800
 80077b4:	40001c00 	.word	0x40001c00
 80077b8:	40002000 	.word	0x40002000

080077bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d2:	d027      	beq.n	8007824 <LL_TIM_OC_Init+0x68>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077da:	d82a      	bhi.n	8007832 <LL_TIM_OC_Init+0x76>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e2:	d018      	beq.n	8007816 <LL_TIM_OC_Init+0x5a>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	d822      	bhi.n	8007832 <LL_TIM_OC_Init+0x76>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d003      	beq.n	80077fa <LL_TIM_OC_Init+0x3e>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d007      	beq.n	8007808 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80077f8:	e01b      	b.n	8007832 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f861 	bl	80078c4 <OC1Config>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
      break;
 8007806:	e015      	b.n	8007834 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f8c6 	bl	800799c <OC2Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	e00e      	b.n	8007834 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f92f 	bl	8007a7c <OC3Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
      break;
 8007822:	e007      	b.n	8007834 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f998 	bl	8007b5c <OC4Config>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	e000      	b.n	8007834 <LL_TIM_OC_Init+0x78>
      break;
 8007832:	bf00      	nop
  }

  return result;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	7b12      	ldrb	r2, [r2, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	89d2      	ldrh	r2, [r2, #14]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 0202 	bic.w	r2, r3, #2
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1c      	ldr	r2, [pc, #112]	@ (8007994 <OC1Config+0xd0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <OC1Config+0x6a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1b      	ldr	r2, [pc, #108]	@ (8007998 <OC1Config+0xd4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d11e      	bne.n	800796c <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0208 	bic.w	r2, r3, #8
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 0204 	bic.w	r2, r3, #4
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fe39 	bl	80075f6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40010000 	.word	0x40010000
 8007998:	40010400 	.word	0x40010400

0800799c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0210 	bic.w	r2, r3, #16
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f023 0220 	bic.w	r2, r3, #32
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 0210 	bic.w	r2, r3, #16
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a1d      	ldr	r2, [pc, #116]	@ (8007a74 <OC2Config+0xd8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <OC2Config+0x70>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a1c      	ldr	r2, [pc, #112]	@ (8007a78 <OC2Config+0xdc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d11f      	bne.n	8007a4c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	019b      	lsls	r3, r3, #6
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	019b      	lsls	r3, r3, #6
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fdd7 	bl	8007612 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40010400 	.word	0x40010400

08007a7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b54 <OC3Config+0xd8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d003      	beq.n	8007aea <OC3Config+0x6e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b58 <OC3Config+0xdc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d11f      	bne.n	8007b2a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	029b      	lsls	r3, r3, #10
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	015b      	lsls	r3, r3, #5
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fd76 	bl	800762e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	031b      	lsls	r3, r3, #12
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	031b      	lsls	r3, r3, #12
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a11      	ldr	r2, [pc, #68]	@ (8007c04 <OC4Config+0xa8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <OC4Config+0x70>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a10      	ldr	r2, [pc, #64]	@ (8007c08 <OC4Config+0xac>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d107      	bne.n	8007bdc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	019b      	lsls	r3, r3, #6
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fd2b 	bl	800764a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40010000 	.word	0x40010000
 8007c08:	40010400 	.word	0x40010400

08007c0c <LL_USART_IsEnabled>:
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c20:	bf0c      	ite	eq
 8007c22:	2301      	moveq	r3, #1
 8007c24:	2300      	movne	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <LL_USART_SetStopBitsLength>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	611a      	str	r2, [r3, #16]
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_USART_SetHWFlowCtrl>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	615a      	str	r2, [r3, #20]
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <LL_USART_SetBaudRate>:
{
 8007c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c84:	b0c0      	sub	sp, #256	@ 0x100
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c8c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007c90:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007c94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca0:	f040 810c 	bne.w	8007ebc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007ca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	1891      	adds	r1, r2, r2
 8007cbc:	6639      	str	r1, [r7, #96]	@ 0x60
 8007cbe:	415b      	adcs	r3, r3
 8007cc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	eb12 0801 	adds.w	r8, r2, r1
 8007ccc:	4629      	mov	r1, r5
 8007cce:	eb43 0901 	adc.w	r9, r3, r1
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ce6:	4690      	mov	r8, r2
 8007ce8:	4699      	mov	r9, r3
 8007cea:	4623      	mov	r3, r4
 8007cec:	eb18 0303 	adds.w	r3, r8, r3
 8007cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	eb49 0303 	adc.w	r3, r9, r3
 8007cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d02:	2200      	movs	r2, #0
 8007d04:	469a      	mov	sl, r3
 8007d06:	4693      	mov	fp, r2
 8007d08:	eb1a 030a 	adds.w	r3, sl, sl
 8007d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d0e:	eb4b 030b 	adc.w	r3, fp, fp
 8007d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d1c:	f7f8 ff64 	bl	8000be8 <__aeabi_uldivmod>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4b64      	ldr	r3, [pc, #400]	@ (8007eb8 <LL_USART_SetBaudRate+0x238>)
 8007d26:	fba3 2302 	umull	r2, r3, r3, r2
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	b29c      	uxth	r4, r3
 8007d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d3c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	1891      	adds	r1, r2, r2
 8007d4a:	6539      	str	r1, [r7, #80]	@ 0x50
 8007d4c:	415b      	adcs	r3, r3
 8007d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d54:	4641      	mov	r1, r8
 8007d56:	1851      	adds	r1, r2, r1
 8007d58:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	414b      	adcs	r3, r1
 8007d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	00cb      	lsls	r3, r1, #3
 8007d70:	4651      	mov	r1, sl
 8007d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d76:	4651      	mov	r1, sl
 8007d78:	00ca      	lsls	r2, r1, #3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4642      	mov	r2, r8
 8007d82:	189b      	adds	r3, r3, r2
 8007d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d88:	464b      	mov	r3, r9
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	eb42 0303 	adc.w	r3, r2, r3
 8007d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d9e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007da2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007da6:	460b      	mov	r3, r1
 8007da8:	18db      	adds	r3, r3, r3
 8007daa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dac:	4613      	mov	r3, r2
 8007dae:	eb42 0303 	adc.w	r3, r2, r3
 8007db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007db8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007dbc:	f7f8 ff14 	bl	8000be8 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8007eb8 <LL_USART_SetBaudRate+0x238>)
 8007dc8:	fba3 2301 	umull	r2, r3, r3, r1
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	2264      	movs	r2, #100	@ 0x64
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	1acb      	subs	r3, r1, r3
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ddc:	4b36      	ldr	r3, [pc, #216]	@ (8007eb8 <LL_USART_SetBaudRate+0x238>)
 8007dde:	fba3 2302 	umull	r2, r3, r3, r2
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4423      	add	r3, r4
 8007df2:	b29c      	uxth	r4, r3
 8007df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dfe:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e02:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	1891      	adds	r1, r2, r2
 8007e0c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e0e:	415b      	adcs	r3, r3
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e16:	4641      	mov	r1, r8
 8007e18:	1851      	adds	r1, r2, r1
 8007e1a:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	414b      	adcs	r3, r1
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e2e:	4659      	mov	r1, fp
 8007e30:	00cb      	lsls	r3, r1, #3
 8007e32:	4651      	mov	r1, sl
 8007e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e38:	4651      	mov	r1, sl
 8007e3a:	00ca      	lsls	r2, r1, #3
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4603      	mov	r3, r0
 8007e42:	4642      	mov	r2, r8
 8007e44:	189b      	adds	r3, r3, r2
 8007e46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	eb42 0303 	adc.w	r3, r2, r3
 8007e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e60:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007e64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	18db      	adds	r3, r3, r3
 8007e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e6e:	4613      	mov	r3, r2
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007e7e:	f7f8 feb3 	bl	8000be8 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb8 <LL_USART_SetBaudRate+0x238>)
 8007e88:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	2164      	movs	r1, #100	@ 0x64
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	3332      	adds	r3, #50	@ 0x32
 8007e9a:	4a07      	ldr	r2, [pc, #28]	@ (8007eb8 <LL_USART_SetBaudRate+0x238>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4423      	add	r3, r4
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eb4:	609a      	str	r2, [r3, #8]
}
 8007eb6:	e108      	b.n	80080ca <LL_USART_SetBaudRate+0x44a>
 8007eb8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007ebc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ec6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007eca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007ece:	4642      	mov	r2, r8
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	6239      	str	r1, [r7, #32]
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ede:	4641      	mov	r1, r8
 8007ee0:	1854      	adds	r4, r2, r1
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	eb43 0501 	adc.w	r5, r3, r1
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	00eb      	lsls	r3, r5, #3
 8007ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef6:	00e2      	lsls	r2, r4, #3
 8007ef8:	4614      	mov	r4, r2
 8007efa:	461d      	mov	r5, r3
 8007efc:	4643      	mov	r3, r8
 8007efe:	18e3      	adds	r3, r4, r3
 8007f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f04:	464b      	mov	r3, r9
 8007f06:	eb45 0303 	adc.w	r3, r5, r3
 8007f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007f28:	4629      	mov	r1, r5
 8007f2a:	008b      	lsls	r3, r1, #2
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f32:	4621      	mov	r1, r4
 8007f34:	008a      	lsls	r2, r1, #2
 8007f36:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007f3a:	f7f8 fe55 	bl	8000be8 <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4b65      	ldr	r3, [pc, #404]	@ (80080d8 <LL_USART_SetBaudRate+0x458>)
 8007f44:	fba3 2302 	umull	r2, r3, r3, r2
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	b29c      	uxth	r4, r3
 8007f50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f5e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007f62:	4642      	mov	r2, r8
 8007f64:	464b      	mov	r3, r9
 8007f66:	1891      	adds	r1, r2, r2
 8007f68:	61b9      	str	r1, [r7, #24]
 8007f6a:	415b      	adcs	r3, r3
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f72:	4641      	mov	r1, r8
 8007f74:	1851      	adds	r1, r2, r1
 8007f76:	6139      	str	r1, [r7, #16]
 8007f78:	4649      	mov	r1, r9
 8007f7a:	414b      	adcs	r3, r1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f8a:	4659      	mov	r1, fp
 8007f8c:	00cb      	lsls	r3, r1, #3
 8007f8e:	4651      	mov	r1, sl
 8007f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f94:	4651      	mov	r1, sl
 8007f96:	00ca      	lsls	r2, r1, #3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4642      	mov	r2, r8
 8007fa0:	189b      	adds	r3, r3, r2
 8007fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	460a      	mov	r2, r1
 8007faa:	eb42 0303 	adc.w	r3, r2, r3
 8007fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007fcc:	4649      	mov	r1, r9
 8007fce:	008b      	lsls	r3, r1, #2
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	008a      	lsls	r2, r1, #2
 8007fda:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007fde:	f7f8 fe03 	bl	8000be8 <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80080d8 <LL_USART_SetBaudRate+0x458>)
 8007fea:	fba3 2301 	umull	r2, r3, r3, r1
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2264      	movs	r2, #100	@ 0x64
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	1acb      	subs	r3, r1, r3
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	3332      	adds	r3, #50	@ 0x32
 8007ffc:	4a36      	ldr	r2, [pc, #216]	@ (80080d8 <LL_USART_SetBaudRate+0x458>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	b29b      	uxth	r3, r3
 8008006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800800a:	b29b      	uxth	r3, r3
 800800c:	4423      	add	r3, r4
 800800e:	b29c      	uxth	r4, r3
 8008010:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008014:	2200      	movs	r2, #0
 8008016:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008018:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800801a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	1891      	adds	r1, r2, r2
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	415b      	adcs	r3, r3
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800802e:	4641      	mov	r1, r8
 8008030:	1851      	adds	r1, r2, r1
 8008032:	6039      	str	r1, [r7, #0]
 8008034:	4649      	mov	r1, r9
 8008036:	414b      	adcs	r3, r1
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008046:	4659      	mov	r1, fp
 8008048:	00cb      	lsls	r3, r1, #3
 800804a:	4651      	mov	r1, sl
 800804c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008050:	4651      	mov	r1, sl
 8008052:	00ca      	lsls	r2, r1, #3
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	4603      	mov	r3, r0
 800805a:	4642      	mov	r2, r8
 800805c:	189b      	adds	r3, r3, r2
 800805e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008060:	464b      	mov	r3, r9
 8008062:	460a      	mov	r2, r1
 8008064:	eb42 0303 	adc.w	r3, r2, r3
 8008068:	677b      	str	r3, [r7, #116]	@ 0x74
 800806a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800806e:	2200      	movs	r2, #0
 8008070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8008080:	4649      	mov	r1, r9
 8008082:	008b      	lsls	r3, r1, #2
 8008084:	4641      	mov	r1, r8
 8008086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800808a:	4641      	mov	r1, r8
 800808c:	008a      	lsls	r2, r1, #2
 800808e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008092:	f7f8 fda9 	bl	8000be8 <__aeabi_uldivmod>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <LL_USART_SetBaudRate+0x458>)
 800809c:	fba3 1302 	umull	r1, r3, r3, r2
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	2164      	movs	r1, #100	@ 0x64
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	3332      	adds	r3, #50	@ 0x32
 80080ae:	4a0a      	ldr	r2, [pc, #40]	@ (80080d8 <LL_USART_SetBaudRate+0x458>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	095b      	lsrs	r3, r3, #5
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4423      	add	r3, r4
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080c8:	609a      	str	r2, [r3, #8]
}
 80080ca:	bf00      	nop
 80080cc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080d0:	46bd      	mov	sp, r7
 80080d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d6:	bf00      	nop
 80080d8:	51eb851f 	.word	0x51eb851f

080080dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fd8c 	bl	8007c0c <LL_USART_IsEnabled>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d15e      	bne.n	80081b8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008102:	f023 030c 	bic.w	r3, r3, #12
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	6851      	ldr	r1, [r2, #4]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	68d2      	ldr	r2, [r2, #12]
 800810e:	4311      	orrs	r1, r2
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	6912      	ldr	r2, [r2, #16]
 8008114:	4311      	orrs	r1, r2
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	6992      	ldr	r2, [r2, #24]
 800811a:	430a      	orrs	r2, r1
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff fd83 	bl	8007c34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fd90 	bl	8007c5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff f8f4 	bl	800732c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1f      	ldr	r2, [pc, #124]	@ (80081c4 <LL_USART_Init+0xe8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d102      	bne.n	8008152 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	e021      	b.n	8008196 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1c      	ldr	r2, [pc, #112]	@ (80081c8 <LL_USART_Init+0xec>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d102      	bne.n	8008160 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	e01a      	b.n	8008196 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <LL_USART_Init+0xf0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d102      	bne.n	800816e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e013      	b.n	8008196 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a17      	ldr	r2, [pc, #92]	@ (80081d0 <LL_USART_Init+0xf4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d102      	bne.n	800817c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	e00c      	b.n	8008196 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <LL_USART_Init+0xf8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d102      	bne.n	800818a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	e005      	b.n	8008196 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a12      	ldr	r2, [pc, #72]	@ (80081d8 <LL_USART_Init+0xfc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d101      	bne.n	8008196 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80081a4:	2300      	movs	r3, #0
 80081a6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80081b0:	69b9      	ldr	r1, [r7, #24]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff fd64 	bl	8007c80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40011000 	.word	0x40011000
 80081c8:	40004400 	.word	0x40004400
 80081cc:	40004800 	.word	0x40004800
 80081d0:	40011400 	.word	0x40011400
 80081d4:	40004c00 	.word	0x40004c00
 80081d8:	40005000 	.word	0x40005000

080081dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081dc:	b084      	sub	sp, #16
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	f107 001c 	add.w	r0, r7, #28
 80081ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d123      	bne.n	800823e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800820a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800821e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008222:	2b01      	cmp	r3, #1
 8008224:	d105      	bne.n	8008232 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fae8 	bl	8009808 <USB_CoreReset>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e01b      	b.n	8008276 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fadc 	bl	8009808 <USB_CoreReset>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008254:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	639a      	str	r2, [r3, #56]	@ 0x38
 8008268:	e005      	b.n	8008276 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008276:	7fbb      	ldrb	r3, [r7, #30]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d10b      	bne.n	8008294 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f043 0206 	orr.w	r2, r3, #6
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f043 0220 	orr.w	r2, r3, #32
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082a0:	b004      	add	sp, #16
 80082a2:	4770      	bx	lr

080082a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d165      	bne.n	8008384 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4a41      	ldr	r2, [pc, #260]	@ (80083c0 <USB_SetTurnaroundTime+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d906      	bls.n	80082ce <USB_SetTurnaroundTime+0x2a>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4a40      	ldr	r2, [pc, #256]	@ (80083c4 <USB_SetTurnaroundTime+0x120>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d202      	bcs.n	80082ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80082c8:	230f      	movs	r3, #15
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	e062      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4a3c      	ldr	r2, [pc, #240]	@ (80083c4 <USB_SetTurnaroundTime+0x120>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d306      	bcc.n	80082e4 <USB_SetTurnaroundTime+0x40>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	4a3b      	ldr	r2, [pc, #236]	@ (80083c8 <USB_SetTurnaroundTime+0x124>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d202      	bcs.n	80082e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082de:	230e      	movs	r3, #14
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e057      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4a38      	ldr	r2, [pc, #224]	@ (80083c8 <USB_SetTurnaroundTime+0x124>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d306      	bcc.n	80082fa <USB_SetTurnaroundTime+0x56>
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4a37      	ldr	r2, [pc, #220]	@ (80083cc <USB_SetTurnaroundTime+0x128>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d202      	bcs.n	80082fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082f4:	230d      	movs	r3, #13
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e04c      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4a33      	ldr	r2, [pc, #204]	@ (80083cc <USB_SetTurnaroundTime+0x128>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d306      	bcc.n	8008310 <USB_SetTurnaroundTime+0x6c>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	4a32      	ldr	r2, [pc, #200]	@ (80083d0 <USB_SetTurnaroundTime+0x12c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d802      	bhi.n	8008310 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800830a:	230c      	movs	r3, #12
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e041      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4a2f      	ldr	r2, [pc, #188]	@ (80083d0 <USB_SetTurnaroundTime+0x12c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d906      	bls.n	8008326 <USB_SetTurnaroundTime+0x82>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4a2e      	ldr	r2, [pc, #184]	@ (80083d4 <USB_SetTurnaroundTime+0x130>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d802      	bhi.n	8008326 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008320:	230b      	movs	r3, #11
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e036      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	4a2a      	ldr	r2, [pc, #168]	@ (80083d4 <USB_SetTurnaroundTime+0x130>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d906      	bls.n	800833c <USB_SetTurnaroundTime+0x98>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	4a29      	ldr	r2, [pc, #164]	@ (80083d8 <USB_SetTurnaroundTime+0x134>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d802      	bhi.n	800833c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008336:	230a      	movs	r3, #10
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	e02b      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4a26      	ldr	r2, [pc, #152]	@ (80083d8 <USB_SetTurnaroundTime+0x134>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d906      	bls.n	8008352 <USB_SetTurnaroundTime+0xae>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4a25      	ldr	r2, [pc, #148]	@ (80083dc <USB_SetTurnaroundTime+0x138>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d202      	bcs.n	8008352 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800834c:	2309      	movs	r3, #9
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e020      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4a21      	ldr	r2, [pc, #132]	@ (80083dc <USB_SetTurnaroundTime+0x138>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d306      	bcc.n	8008368 <USB_SetTurnaroundTime+0xc4>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4a20      	ldr	r2, [pc, #128]	@ (80083e0 <USB_SetTurnaroundTime+0x13c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d802      	bhi.n	8008368 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008362:	2308      	movs	r3, #8
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	e015      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4a1d      	ldr	r2, [pc, #116]	@ (80083e0 <USB_SetTurnaroundTime+0x13c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d906      	bls.n	800837e <USB_SetTurnaroundTime+0xda>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4a1c      	ldr	r2, [pc, #112]	@ (80083e4 <USB_SetTurnaroundTime+0x140>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d202      	bcs.n	800837e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008378:	2307      	movs	r3, #7
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e00a      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800837e:	2306      	movs	r3, #6
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e007      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800838a:	2309      	movs	r3, #9
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e001      	b.n	8008394 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008390:	2309      	movs	r3, #9
 8008392:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80083ac:	431a      	orrs	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	00d8acbf 	.word	0x00d8acbf
 80083c4:	00e4e1c0 	.word	0x00e4e1c0
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	01067380 	.word	0x01067380
 80083d0:	011a499f 	.word	0x011a499f
 80083d4:	01312cff 	.word	0x01312cff
 80083d8:	014ca43f 	.word	0x014ca43f
 80083dc:	016e3600 	.word	0x016e3600
 80083e0:	01a6ab1f 	.word	0x01a6ab1f
 80083e4:	01e84800 	.word	0x01e84800

080083e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f043 0201 	orr.w	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f023 0201 	bic.w	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d115      	bne.n	800847a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800845a:	200a      	movs	r0, #10
 800845c:	f7fc f9a4 	bl	80047a8 <HAL_Delay>
      ms += 10U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	330a      	adds	r3, #10
 8008464:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f93f 	bl	80096ea <USB_GetMode>
 800846c:	4603      	mov	r3, r0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d01e      	beq.n	80084b0 <USB_SetCurrentMode+0x84>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2bc7      	cmp	r3, #199	@ 0xc7
 8008476:	d9f0      	bls.n	800845a <USB_SetCurrentMode+0x2e>
 8008478:	e01a      	b.n	80084b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d115      	bne.n	80084ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800848c:	200a      	movs	r0, #10
 800848e:	f7fc f98b 	bl	80047a8 <HAL_Delay>
      ms += 10U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	330a      	adds	r3, #10
 8008496:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f926 	bl	80096ea <USB_GetMode>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <USB_SetCurrentMode+0x84>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80084a8:	d9f0      	bls.n	800848c <USB_SetCurrentMode+0x60>
 80084aa:	e001      	b.n	80084b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e005      	b.n	80084bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80084b4:	d101      	bne.n	80084ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084c4:	b084      	sub	sp, #16
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b086      	sub	sp, #24
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80084d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	e009      	b.n	80084f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3340      	adds	r3, #64	@ 0x40
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	3301      	adds	r3, #1
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b0e      	cmp	r3, #14
 80084fc:	d9f2      	bls.n	80084e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11c      	bne.n	8008540 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008514:	f043 0302 	orr.w	r3, r3, #2
 8008518:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008536:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	639a      	str	r2, [r3, #56]	@ 0x38
 800853e:	e00b      	b.n	8008558 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008550:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800855e:	461a      	mov	r2, r3
 8008560:	2300      	movs	r3, #0
 8008562:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008564:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008568:	2b01      	cmp	r3, #1
 800856a:	d10d      	bne.n	8008588 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800856c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f968 	bl	800884c <USB_SetDevSpeed>
 800857c:	e008      	b.n	8008590 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800857e:	2101      	movs	r1, #1
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f963 	bl	800884c <USB_SetDevSpeed>
 8008586:	e003      	b.n	8008590 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008588:	2103      	movs	r1, #3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f95e 	bl	800884c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008590:	2110      	movs	r1, #16
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8fa 	bl	800878c <USB_FlushTxFifo>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f924 	bl	80087f0 <USB_FlushRxFifo>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b8:	461a      	mov	r2, r3
 80085ba:	2300      	movs	r3, #0
 80085bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c4:	461a      	mov	r2, r3
 80085c6:	2300      	movs	r3, #0
 80085c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d0:	461a      	mov	r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	e043      	b.n	8008664 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f2:	d118      	bne.n	8008626 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10a      	bne.n	8008610 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008606:	461a      	mov	r2, r3
 8008608:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	e013      	b.n	8008638 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800861c:	461a      	mov	r2, r3
 800861e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	e008      	b.n	8008638 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008632:	461a      	mov	r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008644:	461a      	mov	r2, r3
 8008646:	2300      	movs	r3, #0
 8008648:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008656:	461a      	mov	r2, r3
 8008658:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800865c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3301      	adds	r3, #1
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008668:	461a      	mov	r2, r3
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4293      	cmp	r3, r2
 800866e:	d3b5      	bcc.n	80085dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	e043      	b.n	80086fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800868c:	d118      	bne.n	80086c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a0:	461a      	mov	r2, r3
 80086a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e013      	b.n	80086d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b6:	461a      	mov	r2, r3
 80086b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e008      	b.n	80086d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	461a      	mov	r2, r3
 80086ce:	2300      	movs	r3, #0
 80086d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086de:	461a      	mov	r2, r3
 80086e0:	2300      	movs	r3, #0
 80086e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f0:	461a      	mov	r2, r3
 80086f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3301      	adds	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008702:	461a      	mov	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4293      	cmp	r3, r2
 8008708:	d3b5      	bcc.n	8008676 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800871c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800872a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800872c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	f043 0210 	orr.w	r2, r3, #16
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <USB_DevInit+0x2c4>)
 8008746:	4313      	orrs	r3, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800874c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f043 0208 	orr.w	r2, r3, #8
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008760:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008764:	2b01      	cmp	r3, #1
 8008766:	d107      	bne.n	8008778 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008770:	f043 0304 	orr.w	r3, r3, #4
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008784:	b004      	add	sp, #16
 8008786:	4770      	bx	lr
 8008788:	803c3800 	.word	0x803c3800

0800878c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3301      	adds	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087a6:	d901      	bls.n	80087ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e01b      	b.n	80087e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	daf2      	bge.n	800879a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	019b      	lsls	r3, r3, #6
 80087bc:	f043 0220 	orr.w	r2, r3, #32
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087d0:	d901      	bls.n	80087d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e006      	b.n	80087e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d0f0      	beq.n	80087c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008808:	d901      	bls.n	800880e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e018      	b.n	8008840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	daf2      	bge.n	80087fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2210      	movs	r2, #16
 800881e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800882c:	d901      	bls.n	8008832 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e006      	b.n	8008840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0310 	and.w	r3, r3, #16
 800883a:	2b10      	cmp	r3, #16
 800883c:	d0f0      	beq.n	8008820 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800886c:	4313      	orrs	r3, r2
 800886e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f003 0306 	and.w	r3, r3, #6
 8008896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	e00a      	b.n	80088ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d002      	beq.n	80088b0 <USB_GetDevSpeed+0x32>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	d102      	bne.n	80088b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80088b0:	2302      	movs	r3, #2
 80088b2:	75fb      	strb	r3, [r7, #23]
 80088b4:	e001      	b.n	80088ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80088b6:	230f      	movs	r3, #15
 80088b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d13a      	bne.n	800895a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008902:	4313      	orrs	r3, r2
 8008904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d155      	bne.n	80089c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	059b      	lsls	r3, r3, #22
 800893e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008940:	4313      	orrs	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800894e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e036      	b.n	80089c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008960:	69da      	ldr	r2, [r3, #28]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	2101      	movs	r1, #1
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008978:	4313      	orrs	r3, r2
 800897a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d11a      	bne.n	80089c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	791b      	ldrb	r3, [r3, #4]
 80089ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089ae:	430b      	orrs	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d161      	bne.n	8008ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a0a:	d11f      	bne.n	8008a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 030f 	and.w	r3, r3, #15
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	43db      	mvns	r3, r3
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f303 	lsl.w	r3, r1, r3
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	68f9      	ldr	r1, [r7, #12]
 8008a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a90:	4013      	ands	r3, r2
 8008a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	0159      	lsls	r1, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	440b      	add	r3, r1
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4b35      	ldr	r3, [pc, #212]	@ (8008b88 <USB_DeactivateEndpoint+0x1b0>)
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]
 8008ab6:	e060      	b.n	8008b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ace:	d11f      	bne.n	8008b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	2101      	movs	r1, #1
 8008b22:	fa01 f303 	lsl.w	r3, r1, r3
 8008b26:	041b      	lsls	r3, r3, #16
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b30:	4013      	ands	r3, r2
 8008b32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	2101      	movs	r1, #1
 8008b46:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4a:	041b      	lsls	r3, r3, #16
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b54:	4013      	ands	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	0159      	lsls	r1, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b72:	4619      	mov	r1, r3
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <USB_DeactivateEndpoint+0x1b4>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	ec337800 	.word	0xec337800
 8008b8c:	eff37800 	.word	0xeff37800

08008b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08a      	sub	sp, #40	@ 0x28
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	f040 817f 	bne.w	8008eb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d132      	bne.n	8008c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008bd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c18:	0cdb      	lsrs	r3, r3, #19
 8008c1a:	04db      	lsls	r3, r3, #19
 8008c1c:	6113      	str	r3, [r2, #16]
 8008c1e:	e097      	b.n	8008d50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3a:	0cdb      	lsrs	r3, r3, #19
 8008c3c:	04db      	lsls	r3, r3, #19
 8008c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d11a      	bne.n	8008ca0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d903      	bls.n	8008c7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c9c:	6113      	str	r3, [r2, #16]
 8008c9e:	e044      	b.n	8008d2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	1e5a      	subs	r2, r3, #1
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	8afb      	ldrh	r3, [r7, #22]
 8008cc6:	04d9      	lsls	r1, r3, #19
 8008cc8:	4ba4      	ldr	r3, [pc, #656]	@ (8008f5c <USB_EPStartXfer+0x3cc>)
 8008cca:	400b      	ands	r3, r1
 8008ccc:	69b9      	ldr	r1, [r7, #24]
 8008cce:	0148      	lsls	r0, r1, #5
 8008cd0:	69f9      	ldr	r1, [r7, #28]
 8008cd2:	4401      	add	r1, r0
 8008cd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	791b      	ldrb	r3, [r3, #4]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d122      	bne.n	8008d2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cfe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008d02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d10:	691a      	ldr	r2, [r3, #16]
 8008d12:	8afb      	ldrh	r3, [r7, #22]
 8008d14:	075b      	lsls	r3, r3, #29
 8008d16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008d1a:	69b9      	ldr	r1, [r7, #24]
 8008d1c:	0148      	lsls	r0, r1, #5
 8008d1e:	69f9      	ldr	r1, [r7, #28]
 8008d20:	4401      	add	r1, r0
 8008d22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d26:	4313      	orrs	r3, r2
 8008d28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	0148      	lsls	r0, r1, #5
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	4401      	add	r1, r0
 8008d48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d14b      	bne.n	8008dee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	791b      	ldrb	r3, [r3, #4]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d128      	bne.n	8008dcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d110      	bne.n	8008dac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e00f      	b.n	8008dcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008de6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	e166      	b.n	80090bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d015      	beq.n	8008e42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 814e 	beq.w	80090bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f303 	lsl.w	r3, r1, r3
 8008e36:	69f9      	ldr	r1, [r7, #28]
 8008e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e40:	e13c      	b.n	80090bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d110      	bne.n	8008e74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	e00f      	b.n	8008e94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	68d9      	ldr	r1, [r3, #12]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	b298      	uxth	r0, r3
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f9b9 	bl	8009220 <USB_WritePacket>
 8008eae:	e105      	b.n	80090bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eca:	0cdb      	lsrs	r3, r3, #19
 8008ecc:	04db      	lsls	r3, r3, #19
 8008ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	0151      	lsls	r1, r2, #5
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008eee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ef2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d132      	bne.n	8008f60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	689a      	ldr	r2, [r3, #8]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	0148      	lsls	r0, r1, #5
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	4401      	add	r1, r0
 8008f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f34:	4313      	orrs	r3, r2
 8008f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f56:	6113      	str	r3, [r2, #16]
 8008f58:	e062      	b.n	8009020 <USB_EPStartXfer+0x490>
 8008f5a:	bf00      	nop
 8008f5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d123      	bne.n	8008fb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f7e:	69b9      	ldr	r1, [r7, #24]
 8008f80:	0148      	lsls	r0, r1, #5
 8008f82:	69f9      	ldr	r1, [r7, #28]
 8008f84:	4401      	add	r1, r0
 8008f86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	0151      	lsls	r1, r2, #5
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fac:	6113      	str	r3, [r2, #16]
 8008fae:	e037      	b.n	8009020 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	4413      	add	r3, r2
 8008fba:	1e5a      	subs	r2, r3, #1
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	8afa      	ldrh	r2, [r7, #22]
 8008fcc:	fb03 f202 	mul.w	r2, r3, r2
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	8afb      	ldrh	r3, [r7, #22]
 8008fe4:	04d9      	lsls	r1, r3, #19
 8008fe6:	4b38      	ldr	r3, [pc, #224]	@ (80090c8 <USB_EPStartXfer+0x538>)
 8008fe8:	400b      	ands	r3, r1
 8008fea:	69b9      	ldr	r1, [r7, #24]
 8008fec:	0148      	lsls	r0, r1, #5
 8008fee:	69f9      	ldr	r1, [r7, #28]
 8008ff0:	4401      	add	r1, r0
 8008ff2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009010:	69b9      	ldr	r1, [r7, #24]
 8009012:	0148      	lsls	r0, r1, #5
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	4401      	add	r1, r0
 8009018:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800901c:	4313      	orrs	r3, r2
 800901e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d10d      	bne.n	8009042 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	68d9      	ldr	r1, [r3, #12]
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800903e:	460a      	mov	r2, r1
 8009040:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d128      	bne.n	800909c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d110      	bne.n	800907c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e00f      	b.n	800909c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800909a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	1ff80000 	.word	0x1ff80000

080090cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d14a      	bne.n	8009180 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009102:	f040 8086 	bne.w	8009212 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	7812      	ldrb	r2, [r2, #0]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	440a      	add	r2, r1
 8009120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009124:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009128:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	7812      	ldrb	r2, [r2, #0]
 800913e:	0151      	lsls	r1, r2, #5
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	440a      	add	r2, r1
 8009144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800914c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f242 7210 	movw	r2, #10000	@ 0x2710
 800915a:	4293      	cmp	r3, r2
 800915c:	d902      	bls.n	8009164 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
          break;
 8009162:	e056      	b.n	8009212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800917c:	d0e7      	beq.n	800914e <USB_EPStopXfer+0x82>
 800917e:	e048      	b.n	8009212 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009198:	d13b      	bne.n	8009212 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80091bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3301      	adds	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d902      	bls.n	80091f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
          break;
 80091f6:	e00c      	b.n	8009212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800920c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009210:	d0e7      	beq.n	80091e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
}
 8009214:	4618      	mov	r0, r3
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009220:	b480      	push	{r7}
 8009222:	b089      	sub	sp, #36	@ 0x24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	460b      	mov	r3, r1
 8009230:	71fb      	strb	r3, [r7, #7]
 8009232:	4613      	mov	r3, r2
 8009234:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800923e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009242:	2b00      	cmp	r3, #0
 8009244:	d123      	bne.n	800928e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009246:	88bb      	ldrh	r3, [r7, #4]
 8009248:	3303      	adds	r3, #3
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800924e:	2300      	movs	r3, #0
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e018      	b.n	8009286 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	031a      	lsls	r2, r3, #12
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	4413      	add	r3, r2
 800925c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009260:	461a      	mov	r2, r3
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	3301      	adds	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	3301      	adds	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	3301      	adds	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	3301      	adds	r3, #1
 800927e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	3301      	adds	r3, #1
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	429a      	cmp	r2, r3
 800928c:	d3e2      	bcc.n	8009254 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3724      	adds	r7, #36	@ 0x24
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800929c:	b480      	push	{r7}
 800929e:	b08b      	sub	sp, #44	@ 0x2c
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	089b      	lsrs	r3, r3, #2
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092c2:	2300      	movs	r3, #0
 80092c4:	623b      	str	r3, [r7, #32]
 80092c6:	e014      	b.n	80092f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	3301      	adds	r3, #1
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	3301      	adds	r3, #1
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	3301      	adds	r3, #1
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	3301      	adds	r3, #1
 80092ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	3301      	adds	r3, #1
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3e6      	bcc.n	80092c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092fa:	8bfb      	ldrh	r3, [r7, #30]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01e      	beq.n	800933e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800930a:	461a      	mov	r2, r3
 800930c:	f107 0310 	add.w	r3, r7, #16
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	b2da      	uxtb	r2, r3
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	701a      	strb	r2, [r3, #0]
      i++;
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	3301      	adds	r3, #1
 800932a:	623b      	str	r3, [r7, #32]
      pDest++;
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	3301      	adds	r3, #1
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009332:	8bfb      	ldrh	r3, [r7, #30]
 8009334:	3b01      	subs	r3, #1
 8009336:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009338:	8bfb      	ldrh	r3, [r7, #30]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1ea      	bne.n	8009314 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009340:	4618      	mov	r0, r3
 8009342:	372c      	adds	r7, #44	@ 0x2c
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	785b      	ldrb	r3, [r3, #1]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d12c      	bne.n	80093c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	db12      	blt.n	80093a0 <USB_EPSetStall+0x54>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00f      	beq.n	80093a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	0151      	lsls	r1, r2, #5
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	440a      	add	r2, r1
 8009396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800939a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800939e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	0151      	lsls	r1, r2, #5
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	440a      	add	r2, r1
 80093b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	e02b      	b.n	800941a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	db12      	blt.n	80093fa <USB_EPSetStall+0xae>
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00f      	beq.n	80093fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80093f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009418:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d128      	bne.n	8009496 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800945e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009462:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	791b      	ldrb	r3, [r3, #4]
 8009468:	2b03      	cmp	r3, #3
 800946a:	d003      	beq.n	8009474 <USB_EPClearStall+0x4c>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	791b      	ldrb	r3, [r3, #4]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d138      	bne.n	80094e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800948e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	e027      	b.n	80094e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	791b      	ldrb	r3, [r3, #4]
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d003      	beq.n	80094c6 <USB_EPClearStall+0x9e>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d10f      	bne.n	80094e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009516:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009528:	68f9      	ldr	r1, [r7, #12]
 800952a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800952e:	4313      	orrs	r3, r2
 8009530:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800956e:	f023 0302 	bic.w	r3, r3, #2
 8009572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009582:	b480      	push	{r7}
 8009584:	b085      	sub	sp, #20
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800959c:	f023 0303 	bic.w	r3, r3, #3
 80095a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095b0:	f043 0302 	orr.w	r3, r3, #2
 80095b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4013      	ands	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095dc:	68fb      	ldr	r3, [r7, #12]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4013      	ands	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	0c1b      	lsrs	r3, r3, #16
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	4013      	ands	r3, r2
 8009640:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	b29b      	uxth	r3, r3
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	4013      	ands	r3, r2
 800967e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009680:	68bb      	ldr	r3, [r7, #8]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800968e:	b480      	push	{r7}
 8009690:	b087      	sub	sp, #28
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	fa22 f303 	lsr.w	r3, r2, r3
 80096be:	01db      	lsls	r3, r3, #7
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4013      	ands	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096dc:	68bb      	ldr	r3, [r7, #8]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	f003 0301 	and.w	r3, r3, #1
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009720:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009724:	f023 0307 	bic.w	r3, r3, #7
 8009728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800973c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	460b      	mov	r3, r1
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	333c      	adds	r3, #60	@ 0x3c
 8009762:	3304      	adds	r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4a26      	ldr	r2, [pc, #152]	@ (8009804 <USB_EP0_OutStart+0xb8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d90a      	bls.n	8009786 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009780:	d101      	bne.n	8009786 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e037      	b.n	80097f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978c:	461a      	mov	r2, r3
 800978e:	2300      	movs	r3, #0
 8009790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097b4:	f043 0318 	orr.w	r3, r3, #24
 80097b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80097cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d10f      	bne.n	80097f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80097f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	4f54300a 	.word	0x4f54300a

08009808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009820:	d901      	bls.n	8009826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e01b      	b.n	800985e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	daf2      	bge.n	8009814 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f043 0201 	orr.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800984a:	d901      	bls.n	8009850 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e006      	b.n	800985e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	d0f0      	beq.n	800983e <USB_CoreReset+0x36>

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009878:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800987c:	f002 fc9e 	bl	800c1bc <USBD_static_malloc>
 8009880:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	32b0      	adds	r2, #176	@ 0xb0
 8009892:	2100      	movs	r1, #0
 8009894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009898:	2302      	movs	r3, #2
 800989a:	e0d4      	b.n	8009a46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800989c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f003 fb17 	bl	800ced6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	32b0      	adds	r2, #176	@ 0xb0
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32b0      	adds	r2, #176	@ 0xb0
 80098c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7c1b      	ldrb	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d138      	bne.n	8009946 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098d4:	4b5e      	ldr	r3, [pc, #376]	@ (8009a50 <USBD_CDC_Init+0x1e4>)
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098dc:	2202      	movs	r2, #2
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f002 fb49 	bl	800bf76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098e4:	4b5a      	ldr	r3, [pc, #360]	@ (8009a50 <USBD_CDC_Init+0x1e4>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 020f 	and.w	r2, r3, #15
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	3324      	adds	r3, #36	@ 0x24
 80098fa:	2201      	movs	r2, #1
 80098fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098fe:	4b55      	ldr	r3, [pc, #340]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 8009900:	7819      	ldrb	r1, [r3, #0]
 8009902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009906:	2202      	movs	r2, #2
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f002 fb34 	bl	800bf76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800990e:	4b51      	ldr	r3, [pc, #324]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	f003 020f 	and.w	r2, r3, #15
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009926:	2201      	movs	r2, #1
 8009928:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800992a:	4b4b      	ldr	r3, [pc, #300]	@ (8009a58 <USBD_CDC_Init+0x1ec>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f003 020f 	and.w	r2, r3, #15
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	4613      	mov	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	3326      	adds	r3, #38	@ 0x26
 8009940:	2210      	movs	r2, #16
 8009942:	801a      	strh	r2, [r3, #0]
 8009944:	e035      	b.n	80099b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009946:	4b42      	ldr	r3, [pc, #264]	@ (8009a50 <USBD_CDC_Init+0x1e4>)
 8009948:	7819      	ldrb	r1, [r3, #0]
 800994a:	2340      	movs	r3, #64	@ 0x40
 800994c:	2202      	movs	r2, #2
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f002 fb11 	bl	800bf76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009954:	4b3e      	ldr	r3, [pc, #248]	@ (8009a50 <USBD_CDC_Init+0x1e4>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	f003 020f 	and.w	r2, r3, #15
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	3324      	adds	r3, #36	@ 0x24
 800996a:	2201      	movs	r2, #1
 800996c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800996e:	4b39      	ldr	r3, [pc, #228]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 8009970:	7819      	ldrb	r1, [r3, #0]
 8009972:	2340      	movs	r3, #64	@ 0x40
 8009974:	2202      	movs	r2, #2
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f002 fafd 	bl	800bf76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800997c:	4b35      	ldr	r3, [pc, #212]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 020f 	and.w	r2, r3, #15
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009994:	2201      	movs	r2, #1
 8009996:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009998:	4b2f      	ldr	r3, [pc, #188]	@ (8009a58 <USBD_CDC_Init+0x1ec>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 020f 	and.w	r2, r3, #15
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	3326      	adds	r3, #38	@ 0x26
 80099ae:	2210      	movs	r2, #16
 80099b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099b2:	4b29      	ldr	r3, [pc, #164]	@ (8009a58 <USBD_CDC_Init+0x1ec>)
 80099b4:	7819      	ldrb	r1, [r3, #0]
 80099b6:	2308      	movs	r3, #8
 80099b8:	2203      	movs	r2, #3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f002 fadb 	bl	800bf76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099c0:	4b25      	ldr	r3, [pc, #148]	@ (8009a58 <USBD_CDC_Init+0x1ec>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	f003 020f 	and.w	r2, r3, #15
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	3324      	adds	r3, #36	@ 0x24
 80099d6:	2201      	movs	r2, #1
 80099d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	33b0      	adds	r3, #176	@ 0xb0
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a10:	2302      	movs	r3, #2
 8009a12:	e018      	b.n	8009a46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7c1b      	ldrb	r3, [r3, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 8009a1e:	7819      	ldrb	r1, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f002 fb92 	bl	800c154 <USBD_LL_PrepareReceive>
 8009a30:	e008      	b.n	8009a44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a32:	4b08      	ldr	r3, [pc, #32]	@ (8009a54 <USBD_CDC_Init+0x1e8>)
 8009a34:	7819      	ldrb	r1, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a3c:	2340      	movs	r3, #64	@ 0x40
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 fb88 	bl	800c154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000093 	.word	0x20000093
 8009a54:	20000094 	.word	0x20000094
 8009a58:	20000095 	.word	0x20000095

08009a5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a68:	4b3a      	ldr	r3, [pc, #232]	@ (8009b54 <USBD_CDC_DeInit+0xf8>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f002 faa7 	bl	800bfc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a74:	4b37      	ldr	r3, [pc, #220]	@ (8009b54 <USBD_CDC_DeInit+0xf8>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	f003 020f 	and.w	r2, r3, #15
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	3324      	adds	r3, #36	@ 0x24
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a8e:	4b32      	ldr	r3, [pc, #200]	@ (8009b58 <USBD_CDC_DeInit+0xfc>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f002 fa94 	bl	800bfc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <USBD_CDC_DeInit+0xfc>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	f003 020f 	and.w	r2, r3, #15
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ab6:	4b29      	ldr	r3, [pc, #164]	@ (8009b5c <USBD_CDC_DeInit+0x100>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f002 fa80 	bl	800bfc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ac2:	4b26      	ldr	r3, [pc, #152]	@ (8009b5c <USBD_CDC_DeInit+0x100>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 020f 	and.w	r2, r3, #15
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	440b      	add	r3, r1
 8009ad6:	3324      	adds	r3, #36	@ 0x24
 8009ad8:	2200      	movs	r2, #0
 8009ada:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009adc:	4b1f      	ldr	r3, [pc, #124]	@ (8009b5c <USBD_CDC_DeInit+0x100>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 020f 	and.w	r2, r3, #15
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	3326      	adds	r3, #38	@ 0x26
 8009af2:	2200      	movs	r2, #0
 8009af4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	32b0      	adds	r2, #176	@ 0xb0
 8009b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01f      	beq.n	8009b48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	33b0      	adds	r3, #176	@ 0xb0
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32b0      	adds	r2, #176	@ 0xb0
 8009b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f002 fb54 	bl	800c1d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32b0      	adds	r2, #176	@ 0xb0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000093 	.word	0x20000093
 8009b58:	20000094 	.word	0x20000094
 8009b5c:	20000095 	.word	0x20000095

08009b60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	32b0      	adds	r2, #176	@ 0xb0
 8009b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e0bf      	b.n	8009d10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d050      	beq.n	8009c3e <USBD_CDC_Setup+0xde>
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	f040 80af 	bne.w	8009d00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d03a      	beq.n	8009c20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b25b      	sxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da1b      	bge.n	8009bec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	33b0      	adds	r3, #176	@ 0xb0
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	88d2      	ldrh	r2, [r2, #6]
 8009bd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	88db      	ldrh	r3, [r3, #6]
 8009bd6:	2b07      	cmp	r3, #7
 8009bd8:	bf28      	it	cs
 8009bda:	2307      	movcs	r3, #7
 8009bdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	89fa      	ldrh	r2, [r7, #14]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fd93 	bl	800b710 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bea:	e090      	b.n	8009d0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	785a      	ldrb	r2, [r3, #1]
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	88db      	ldrh	r3, [r3, #6]
 8009bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8009bfc:	d803      	bhi.n	8009c06 <USBD_CDC_Setup+0xa6>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	88db      	ldrh	r3, [r3, #6]
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	e000      	b.n	8009c08 <USBD_CDC_Setup+0xa8>
 8009c06:	2240      	movs	r2, #64	@ 0x40
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c0e:	6939      	ldr	r1, [r7, #16]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c16:	461a      	mov	r2, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 fda5 	bl	800b768 <USBD_CtlPrepareRx>
      break;
 8009c1e:	e076      	b.n	8009d0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	33b0      	adds	r3, #176	@ 0xb0
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	7850      	ldrb	r0, [r2, #1]
 8009c36:	2200      	movs	r2, #0
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	4798      	blx	r3
      break;
 8009c3c:	e067      	b.n	8009d0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b0b      	cmp	r3, #11
 8009c44:	d851      	bhi.n	8009cea <USBD_CDC_Setup+0x18a>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USBD_CDC_Setup+0xec>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c7d 	.word	0x08009c7d
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009ceb 	.word	0x08009ceb
 8009c58:	08009ceb 	.word	0x08009ceb
 8009c5c:	08009ceb 	.word	0x08009ceb
 8009c60:	08009ceb 	.word	0x08009ceb
 8009c64:	08009ceb 	.word	0x08009ceb
 8009c68:	08009ceb 	.word	0x08009ceb
 8009c6c:	08009ceb 	.word	0x08009ceb
 8009c70:	08009ceb 	.word	0x08009ceb
 8009c74:	08009ca7 	.word	0x08009ca7
 8009c78:	08009cd1 	.word	0x08009cd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d107      	bne.n	8009c98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c88:	f107 030a 	add.w	r3, r7, #10
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fd3d 	bl	800b710 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c96:	e032      	b.n	8009cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 fcbb 	bl	800b616 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ca4:	e02b      	b.n	8009cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d107      	bne.n	8009cc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cb2:	f107 030d 	add.w	r3, r7, #13
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 fd28 	bl	800b710 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cc0:	e01d      	b.n	8009cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 fca6 	bl	800b616 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8009cce:	e016      	b.n	8009cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d00f      	beq.n	8009cfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fc99 	bl	800b616 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ce8:	e008      	b.n	8009cfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fc92 	bl	800b616 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cf6:	e002      	b.n	8009cfe <USBD_CDC_Setup+0x19e>
          break;
 8009cf8:	bf00      	nop
 8009cfa:	e008      	b.n	8009d0e <USBD_CDC_Setup+0x1ae>
          break;
 8009cfc:	bf00      	nop
      }
      break;
 8009cfe:	e006      	b.n	8009d0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fc87 	bl	800b616 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32b0      	adds	r2, #176	@ 0xb0
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e065      	b.n	8009e0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	32b0      	adds	r2, #176	@ 0xb0
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f003 020f 	and.w	r2, r3, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	3318      	adds	r3, #24
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02f      	beq.n	8009dcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	f003 020f 	and.w	r2, r3, #15
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	3318      	adds	r3, #24
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	f003 010f 	and.w	r1, r3, #15
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	440b      	add	r3, r1
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4403      	add	r3, r0
 8009d94:	331c      	adds	r3, #28
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d112      	bne.n	8009dcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	f003 020f 	and.w	r2, r3, #15
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	440b      	add	r3, r1
 8009db8:	3318      	adds	r3, #24
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dbe:	78f9      	ldrb	r1, [r7, #3]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f002 f9a4 	bl	800c112 <USBD_LL_Transmit>
 8009dca:	e01f      	b.n	8009e0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	33b0      	adds	r3, #176	@ 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d010      	beq.n	8009e0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	33b0      	adds	r3, #176	@ 0xb0
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	32b0      	adds	r2, #176	@ 0xb0
 8009e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	32b0      	adds	r2, #176	@ 0xb0
 8009e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e01a      	b.n	8009e7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f9a2 	bl	800c196 <USBD_LL_GetRxDataSize>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	33b0      	adds	r3, #176	@ 0xb0
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	32b0      	adds	r2, #176	@ 0xb0
 8009e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e024      	b.n	8009ef2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	33b0      	adds	r3, #176	@ 0xb0
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d019      	beq.n	8009ef0 <USBD_CDC_EP0_RxReady+0x6a>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009ec2:	2bff      	cmp	r3, #255	@ 0xff
 8009ec4:	d014      	beq.n	8009ef0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	33b0      	adds	r3, #176	@ 0xb0
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009ede:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ee6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	22ff      	movs	r2, #255	@ 0xff
 8009eec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f04:	2182      	movs	r1, #130	@ 0x82
 8009f06:	4818      	ldr	r0, [pc, #96]	@ (8009f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f08:	f000 fd4f 	bl	800a9aa <USBD_GetEpDesc>
 8009f0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4815      	ldr	r0, [pc, #84]	@ (8009f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f12:	f000 fd4a 	bl	800a9aa <USBD_GetEpDesc>
 8009f16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f18:	2181      	movs	r1, #129	@ 0x81
 8009f1a:	4813      	ldr	r0, [pc, #76]	@ (8009f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f1c:	f000 fd45 	bl	800a9aa <USBD_GetEpDesc>
 8009f20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2210      	movs	r2, #16
 8009f2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f3c:	711a      	strb	r2, [r3, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f50:	711a      	strb	r2, [r3, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2243      	movs	r2, #67	@ 0x43
 8009f5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f5c:	4b02      	ldr	r3, [pc, #8]	@ (8009f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000050 	.word	0x20000050

08009f6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f74:	2182      	movs	r1, #130	@ 0x82
 8009f76:	4818      	ldr	r0, [pc, #96]	@ (8009fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f78:	f000 fd17 	bl	800a9aa <USBD_GetEpDesc>
 8009f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4815      	ldr	r0, [pc, #84]	@ (8009fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f82:	f000 fd12 	bl	800a9aa <USBD_GetEpDesc>
 8009f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f88:	2181      	movs	r1, #129	@ 0x81
 8009f8a:	4813      	ldr	r0, [pc, #76]	@ (8009fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f8c:	f000 fd0d 	bl	800a9aa <USBD_GetEpDesc>
 8009f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	711a      	strb	r2, [r3, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f042 0202 	orr.w	r2, r2, #2
 8009fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d006      	beq.n	8009fc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	711a      	strb	r2, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f042 0202 	orr.w	r2, r2, #2
 8009fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2243      	movs	r2, #67	@ 0x43
 8009fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000050 	.word	0x20000050

08009fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fe4:	2182      	movs	r1, #130	@ 0x82
 8009fe6:	4818      	ldr	r0, [pc, #96]	@ (800a048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fe8:	f000 fcdf 	bl	800a9aa <USBD_GetEpDesc>
 8009fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4815      	ldr	r0, [pc, #84]	@ (800a048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ff2:	f000 fcda 	bl	800a9aa <USBD_GetEpDesc>
 8009ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ff8:	2181      	movs	r1, #129	@ 0x81
 8009ffa:	4813      	ldr	r0, [pc, #76]	@ (800a048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ffc:	f000 fcd5 	bl	800a9aa <USBD_GetEpDesc>
 800a000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2210      	movs	r2, #16
 800a00c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d006      	beq.n	800a022 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2200      	movs	r2, #0
 800a018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a01c:	711a      	strb	r2, [r3, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d006      	beq.n	800a036 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a030:	711a      	strb	r2, [r3, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2243      	movs	r2, #67	@ 0x43
 800a03a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a03c:	4b02      	ldr	r3, [pc, #8]	@ (800a048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20000050 	.word	0x20000050

0800a04c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	220a      	movs	r2, #10
 800a058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a05a:	4b03      	ldr	r3, [pc, #12]	@ (800a068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	2000000c 	.word	0x2000000c

0800a06c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e009      	b.n	800a094 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	33b0      	adds	r3, #176	@ 0xb0
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	32b0      	adds	r2, #176	@ 0xb0
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e008      	b.n	800a0d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	32b0      	adds	r2, #176	@ 0xb0
 800a0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a104:	2303      	movs	r3, #3
 800a106:	e004      	b.n	800a112 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	32b0      	adds	r2, #176	@ 0xb0
 800a132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a136:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	e025      	b.n	800a192 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11f      	bne.n	800a190 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2201      	movs	r2, #1
 800a154:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a158:	4b10      	ldr	r3, [pc, #64]	@ (800a19c <USBD_CDC_TransmitPacket+0x7c>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 020f 	and.w	r2, r3, #15
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4403      	add	r3, r0
 800a172:	3318      	adds	r3, #24
 800a174:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a176:	4b09      	ldr	r3, [pc, #36]	@ (800a19c <USBD_CDC_TransmitPacket+0x7c>)
 800a178:	7819      	ldrb	r1, [r3, #0]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 ffc3 	bl	800c112 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000093 	.word	0x20000093

0800a1a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	32b0      	adds	r2, #176	@ 0xb0
 800a1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	32b0      	adds	r2, #176	@ 0xb0
 800a1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e018      	b.n	800a200 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7c1b      	ldrb	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <USBD_CDC_ReceivePacket+0x68>)
 800a1d8:	7819      	ldrb	r1, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 ffb5 	bl	800c154 <USBD_LL_PrepareReceive>
 800a1ea:	e008      	b.n	800a1fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1ec:	4b06      	ldr	r3, [pc, #24]	@ (800a208 <USBD_CDC_ReceivePacket+0x68>)
 800a1ee:	7819      	ldrb	r1, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1f6:	2340      	movs	r3, #64	@ 0x40
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 ffab 	bl	800c154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000094 	.word	0x20000094

0800a20c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a220:	2303      	movs	r3, #3
 800a222:	e01f      	b.n	800a264 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	79fa      	ldrb	r2, [r7, #7]
 800a256:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f001 fe25 	bl	800bea8 <USBD_LL_Init>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	e025      	b.n	800a2d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	32ae      	adds	r2, #174	@ 0xae
 800a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00f      	beq.n	800a2c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	32ae      	adds	r2, #174	@ 0xae
 800a2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	f107 020e 	add.w	r2, r7, #14
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 fe2d 	bl	800bf40 <USBD_LL_Start>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d009      	beq.n	800a334 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	4611      	mov	r1, r2
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	4798      	blx	r3
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	4611      	mov	r1, r2
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f90c 	bl	800b5a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3a6:	f003 031f 	and.w	r3, r3, #31
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d01a      	beq.n	800a3e4 <USBD_LL_SetupStage+0x72>
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d822      	bhi.n	800a3f8 <USBD_LL_SetupStage+0x86>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <USBD_LL_SetupStage+0x4a>
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d00a      	beq.n	800a3d0 <USBD_LL_SetupStage+0x5e>
 800a3ba:	e01d      	b.n	800a3f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fb63 	bl	800aa90 <USBD_StdDevReq>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ce:	e020      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fbcb 	bl	800ab74 <USBD_StdItfReq>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e2:	e016      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fc2d 	bl	800ac4c <USBD_StdEPReq>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f6:	e00c      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 fdfa 	bl	800c000 <USBD_LL_StallEP>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]
      break;
 800a410:	bf00      	nop
  }

  return ret;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	460b      	mov	r3, r1
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d16e      	bne.n	800a512 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a43a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a442:	2b03      	cmp	r3, #3
 800a444:	f040 8098 	bne.w	800a578 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	429a      	cmp	r2, r3
 800a452:	d913      	bls.n	800a47c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	1ad2      	subs	r2, r2, r3
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	4293      	cmp	r3, r2
 800a46c:	bf28      	it	cs
 800a46e:	4613      	movcs	r3, r2
 800a470:	461a      	mov	r2, r3
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f001 f994 	bl	800b7a2 <USBD_CtlContinueRx>
 800a47a:	e07d      	b.n	800a578 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a482:	f003 031f 	and.w	r3, r3, #31
 800a486:	2b02      	cmp	r3, #2
 800a488:	d014      	beq.n	800a4b4 <USBD_LL_DataOutStage+0x98>
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d81d      	bhi.n	800a4ca <USBD_LL_DataOutStage+0xae>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <USBD_LL_DataOutStage+0x7c>
 800a492:	2b01      	cmp	r3, #1
 800a494:	d003      	beq.n	800a49e <USBD_LL_DataOutStage+0x82>
 800a496:	e018      	b.n	800a4ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	75bb      	strb	r3, [r7, #22]
            break;
 800a49c:	e018      	b.n	800a4d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fa64 	bl	800a976 <USBD_CoreFindIF>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75bb      	strb	r3, [r7, #22]
            break;
 800a4b2:	e00d      	b.n	800a4d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fa66 	bl	800a990 <USBD_CoreFindEP>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75bb      	strb	r3, [r7, #22]
            break;
 800a4c8:	e002      	b.n	800a4d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	75bb      	strb	r3, [r7, #22]
            break;
 800a4ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4d0:	7dbb      	ldrb	r3, [r7, #22]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d119      	bne.n	800a50a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d113      	bne.n	800a50a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4e2:	7dba      	ldrb	r2, [r7, #22]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	32ae      	adds	r2, #174	@ 0xae
 800a4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00b      	beq.n	800a50a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4f2:	7dba      	ldrb	r2, [r7, #22]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a4fa:	7dba      	ldrb	r2, [r7, #22]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	32ae      	adds	r2, #174	@ 0xae
 800a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f001 f95a 	bl	800b7c4 <USBD_CtlSendStatus>
 800a510:	e032      	b.n	800a578 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	4619      	mov	r1, r3
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fa37 	bl	800a990 <USBD_CoreFindEP>
 800a522:	4603      	mov	r3, r0
 800a524:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a526:	7dbb      	ldrb	r3, [r7, #22]
 800a528:	2bff      	cmp	r3, #255	@ 0xff
 800a52a:	d025      	beq.n	800a578 <USBD_LL_DataOutStage+0x15c>
 800a52c:	7dbb      	ldrb	r3, [r7, #22]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d122      	bne.n	800a578 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d117      	bne.n	800a56e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a53e:	7dba      	ldrb	r2, [r7, #22]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	32ae      	adds	r2, #174	@ 0xae
 800a544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00f      	beq.n	800a56e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a54e:	7dba      	ldrb	r2, [r7, #22]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a556:	7dba      	ldrb	r2, [r7, #22]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	32ae      	adds	r2, #174	@ 0xae
 800a55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	7afa      	ldrb	r2, [r7, #11]
 800a564:	4611      	mov	r1, r2
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	4798      	blx	r3
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	e000      	b.n	800a57a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b086      	sub	sp, #24
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	460b      	mov	r3, r1
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d16f      	bne.n	800a676 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3314      	adds	r3, #20
 800a59a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d15a      	bne.n	800a65c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d914      	bls.n	800a5dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	1ad2      	subs	r2, r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f001 f8bc 	bl	800b746 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f001 fdbd 	bl	800c154 <USBD_LL_PrepareReceive>
 800a5da:	e03f      	b.n	800a65c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d11c      	bne.n	800a622 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d316      	bcc.n	800a622 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d20f      	bcs.n	800a622 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a602:	2200      	movs	r2, #0
 800a604:	2100      	movs	r1, #0
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f001 f89d 	bl	800b746 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a614:	2300      	movs	r3, #0
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f001 fd9a 	bl	800c154 <USBD_LL_PrepareReceive>
 800a620:	e01c      	b.n	800a65c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d10f      	bne.n	800a64e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d009      	beq.n	800a64e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a64e:	2180      	movs	r1, #128	@ 0x80
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f001 fcd5 	bl	800c000 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f001 f8c7 	bl	800b7ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d03a      	beq.n	800a6dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fe42 	bl	800a2f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a674:	e032      	b.n	800a6dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	4619      	mov	r1, r3
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f985 	bl	800a990 <USBD_CoreFindEP>
 800a686:	4603      	mov	r3, r0
 800a688:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	2bff      	cmp	r3, #255	@ 0xff
 800a68e:	d025      	beq.n	800a6dc <USBD_LL_DataInStage+0x15a>
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d122      	bne.n	800a6dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d11c      	bne.n	800a6dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6a2:	7dfa      	ldrb	r2, [r7, #23]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	32ae      	adds	r2, #174	@ 0xae
 800a6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d014      	beq.n	800a6dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6b2:	7dfa      	ldrb	r2, [r7, #23]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6ba:	7dfa      	ldrb	r2, [r7, #23]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	32ae      	adds	r2, #174	@ 0xae
 800a6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	7afa      	ldrb	r2, [r7, #11]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	4798      	blx	r3
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6d2:	7dbb      	ldrb	r3, [r7, #22]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6d8:	7dbb      	ldrb	r3, [r7, #22]
 800a6da:	e000      	b.n	800a6de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d014      	beq.n	800a74c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00e      	beq.n	800a74c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6852      	ldr	r2, [r2, #4]
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	4611      	mov	r1, r2
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a748:	2303      	movs	r3, #3
 800a74a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a74c:	2340      	movs	r3, #64	@ 0x40
 800a74e:	2200      	movs	r2, #0
 800a750:	2100      	movs	r1, #0
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f001 fc0f 	bl	800bf76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2240      	movs	r2, #64	@ 0x40
 800a764:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a768:	2340      	movs	r3, #64	@ 0x40
 800a76a:	2200      	movs	r2, #0
 800a76c:	2180      	movs	r1, #128	@ 0x80
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f001 fc01 	bl	800bf76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2240      	movs	r2, #64	@ 0x40
 800a77e:	621a      	str	r2, [r3, #32]

  return ret;
 800a780:	7bfb      	ldrb	r3, [r7, #15]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	78fa      	ldrb	r2, [r7, #3]
 800a79a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d006      	beq.n	800a7cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d106      	bne.n	800a804 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d110      	bne.n	800a848 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00b      	beq.n	800a848 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	32ae      	adds	r2, #174	@ 0xae
 800a868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a870:	2303      	movs	r3, #3
 800a872:	e01c      	b.n	800a8ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d115      	bne.n	800a8ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32ae      	adds	r2, #174	@ 0xae
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	32ae      	adds	r2, #174	@ 0xae
 800a89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	78fa      	ldrb	r2, [r7, #3]
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	32ae      	adds	r2, #174	@ 0xae
 800a8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e01c      	b.n	800a912 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d115      	bne.n	800a910 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	32ae      	adds	r2, #174	@ 0xae
 800a8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	32ae      	adds	r2, #174	@ 0xae
 800a902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	4611      	mov	r1, r2
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00e      	beq.n	800a96c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	6852      	ldr	r2, [r2, #4]
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	4611      	mov	r1, r2
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	4798      	blx	r3
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a968:	2303      	movs	r3, #3
 800a96a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a982:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a99c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	885b      	ldrh	r3, [r3, #2]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	7812      	ldrb	r2, [r2, #0]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d91f      	bls.n	800aa10 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9d6:	e013      	b.n	800aa00 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a9d8:	f107 030a 	add.w	r3, r7, #10
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6978      	ldr	r0, [r7, #20]
 800a9e0:	f000 f81b 	bl	800aa1a <USBD_GetNextDesc>
 800a9e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	d108      	bne.n	800aa00 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	789b      	ldrb	r3, [r3, #2]
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d008      	beq.n	800aa0e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	897b      	ldrh	r3, [r7, #10]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d8e5      	bhi.n	800a9d8 <USBD_GetEpDesc+0x2e>
 800aa0c:	e000      	b.n	800aa10 <USBD_GetEpDesc+0x66>
          break;
 800aa0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa10:	693b      	ldr	r3, [r7, #16]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	4413      	add	r3, r2
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa44:	68fb      	ldr	r3, [r7, #12]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b087      	sub	sp, #28
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	3301      	adds	r3, #1
 800aa68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	b21a      	sxth	r2, r3
 800aa78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	b21b      	sxth	r3, r3
 800aa80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa82:	89fb      	ldrh	r3, [r7, #14]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aaa6:	2b40      	cmp	r3, #64	@ 0x40
 800aaa8:	d005      	beq.n	800aab6 <USBD_StdDevReq+0x26>
 800aaaa:	2b40      	cmp	r3, #64	@ 0x40
 800aaac:	d857      	bhi.n	800ab5e <USBD_StdDevReq+0xce>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00f      	beq.n	800aad2 <USBD_StdDevReq+0x42>
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d153      	bne.n	800ab5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32ae      	adds	r2, #174	@ 0xae
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]
      break;
 800aad0:	e04a      	b.n	800ab68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d83b      	bhi.n	800ab52 <USBD_StdDevReq+0xc2>
 800aada:	a201      	add	r2, pc, #4	@ (adr r2, 800aae0 <USBD_StdDevReq+0x50>)
 800aadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800ab49 	.word	0x0800ab49
 800aae8:	0800ab53 	.word	0x0800ab53
 800aaec:	0800ab3f 	.word	0x0800ab3f
 800aaf0:	0800ab53 	.word	0x0800ab53
 800aaf4:	0800ab13 	.word	0x0800ab13
 800aaf8:	0800ab09 	.word	0x0800ab09
 800aafc:	0800ab53 	.word	0x0800ab53
 800ab00:	0800ab2b 	.word	0x0800ab2b
 800ab04:	0800ab1d 	.word	0x0800ab1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fa3c 	bl	800af88 <USBD_GetDescriptor>
          break;
 800ab10:	e024      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fba1 	bl	800b25c <USBD_SetAddress>
          break;
 800ab1a:	e01f      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fbe0 	bl	800b2e4 <USBD_SetConfig>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
          break;
 800ab28:	e018      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fc83 	bl	800b438 <USBD_GetConfig>
          break;
 800ab32:	e013      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fcb4 	bl	800b4a4 <USBD_GetStatus>
          break;
 800ab3c:	e00e      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fce3 	bl	800b50c <USBD_SetFeature>
          break;
 800ab46:	e009      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fd07 	bl	800b55e <USBD_ClrFeature>
          break;
 800ab50:	e004      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fd5e 	bl	800b616 <USBD_CtlError>
          break;
 800ab5a:	bf00      	nop
      }
      break;
 800ab5c:	e004      	b.n	800ab68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fd58 	bl	800b616 <USBD_CtlError>
      break;
 800ab66:	bf00      	nop
  }

  return ret;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop

0800ab74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab8a:	2b40      	cmp	r3, #64	@ 0x40
 800ab8c:	d005      	beq.n	800ab9a <USBD_StdItfReq+0x26>
 800ab8e:	2b40      	cmp	r3, #64	@ 0x40
 800ab90:	d852      	bhi.n	800ac38 <USBD_StdItfReq+0xc4>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <USBD_StdItfReq+0x26>
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d14e      	bne.n	800ac38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d840      	bhi.n	800ac2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	889b      	ldrh	r3, [r3, #4]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d836      	bhi.n	800ac20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	889b      	ldrh	r3, [r3, #4]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fedb 	bl	800a976 <USBD_CoreFindIF>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2bff      	cmp	r3, #255	@ 0xff
 800abc8:	d01d      	beq.n	800ac06 <USBD_StdItfReq+0x92>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d11a      	bne.n	800ac06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abd0:	7bba      	ldrb	r2, [r7, #14]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	32ae      	adds	r2, #174	@ 0xae
 800abd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00f      	beq.n	800ac00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abe0:	7bba      	ldrb	r2, [r7, #14]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abe8:	7bba      	ldrb	r2, [r7, #14]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	@ 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abfe:	e004      	b.n	800ac0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac00:	2303      	movs	r3, #3
 800ac02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac04:	e001      	b.n	800ac0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	88db      	ldrh	r3, [r3, #6]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d110      	bne.n	800ac34 <USBD_StdItfReq+0xc0>
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10d      	bne.n	800ac34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fdd3 	bl	800b7c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac1e:	e009      	b.n	800ac34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fcf7 	bl	800b616 <USBD_CtlError>
          break;
 800ac28:	e004      	b.n	800ac34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fcf2 	bl	800b616 <USBD_CtlError>
          break;
 800ac32:	e000      	b.n	800ac36 <USBD_StdItfReq+0xc2>
          break;
 800ac34:	bf00      	nop
      }
      break;
 800ac36:	e004      	b.n	800ac42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fceb 	bl	800b616 <USBD_CtlError>
      break;
 800ac40:	bf00      	nop
  }

  return ret;
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	889b      	ldrh	r3, [r3, #4]
 800ac5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac68:	2b40      	cmp	r3, #64	@ 0x40
 800ac6a:	d007      	beq.n	800ac7c <USBD_StdEPReq+0x30>
 800ac6c:	2b40      	cmp	r3, #64	@ 0x40
 800ac6e:	f200 817f 	bhi.w	800af70 <USBD_StdEPReq+0x324>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d02a      	beq.n	800accc <USBD_StdEPReq+0x80>
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	f040 817a 	bne.w	800af70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fe85 	bl	800a990 <USBD_CoreFindEP>
 800ac86:	4603      	mov	r3, r0
 800ac88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac8a:	7b7b      	ldrb	r3, [r7, #13]
 800ac8c:	2bff      	cmp	r3, #255	@ 0xff
 800ac8e:	f000 8174 	beq.w	800af7a <USBD_StdEPReq+0x32e>
 800ac92:	7b7b      	ldrb	r3, [r7, #13]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 8170 	bne.w	800af7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac9a:	7b7a      	ldrb	r2, [r7, #13]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aca2:	7b7a      	ldrb	r2, [r7, #13]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	32ae      	adds	r2, #174	@ 0xae
 800aca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 8163 	beq.w	800af7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acb4:	7b7a      	ldrb	r2, [r7, #13]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	32ae      	adds	r2, #174	@ 0xae
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acca:	e156      	b.n	800af7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d008      	beq.n	800ace6 <USBD_StdEPReq+0x9a>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	f300 8145 	bgt.w	800af64 <USBD_StdEPReq+0x318>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 809b 	beq.w	800ae16 <USBD_StdEPReq+0x1ca>
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d03c      	beq.n	800ad5e <USBD_StdEPReq+0x112>
 800ace4:	e13e      	b.n	800af64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d002      	beq.n	800acf8 <USBD_StdEPReq+0xac>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d016      	beq.n	800ad24 <USBD_StdEPReq+0xd8>
 800acf6:	e02c      	b.n	800ad52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00d      	beq.n	800ad1a <USBD_StdEPReq+0xce>
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	2b80      	cmp	r3, #128	@ 0x80
 800ad02:	d00a      	beq.n	800ad1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f979 	bl	800c000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0e:	2180      	movs	r1, #128	@ 0x80
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 f975 	bl	800c000 <USBD_LL_StallEP>
 800ad16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad18:	e020      	b.n	800ad5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fc7a 	bl	800b616 <USBD_CtlError>
              break;
 800ad22:	e01b      	b.n	800ad5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	885b      	ldrh	r3, [r3, #2]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10e      	bne.n	800ad4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <USBD_StdEPReq+0xfe>
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	2b80      	cmp	r3, #128	@ 0x80
 800ad36:	d008      	beq.n	800ad4a <USBD_StdEPReq+0xfe>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	88db      	ldrh	r3, [r3, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f001 f95b 	bl	800c000 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fd3a 	bl	800b7c4 <USBD_CtlSendStatus>

              break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc5e 	bl	800b616 <USBD_CtlError>
              break;
 800ad5a:	bf00      	nop
          }
          break;
 800ad5c:	e107      	b.n	800af6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d002      	beq.n	800ad70 <USBD_StdEPReq+0x124>
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d016      	beq.n	800ad9c <USBD_StdEPReq+0x150>
 800ad6e:	e04b      	b.n	800ae08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00d      	beq.n	800ad92 <USBD_StdEPReq+0x146>
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
 800ad78:	2b80      	cmp	r3, #128	@ 0x80
 800ad7a:	d00a      	beq.n	800ad92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f93d 	bl	800c000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad86:	2180      	movs	r1, #128	@ 0x80
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f001 f939 	bl	800c000 <USBD_LL_StallEP>
 800ad8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad90:	e040      	b.n	800ae14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc3e 	bl	800b616 <USBD_CtlError>
              break;
 800ad9a:	e03b      	b.n	800ae14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d136      	bne.n	800ae12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 f943 	bl	800c03e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fd03 	bl	800b7c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fde4 	bl	800a990 <USBD_CoreFindEP>
 800adc8:	4603      	mov	r3, r0
 800adca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adcc:	7b7b      	ldrb	r3, [r7, #13]
 800adce:	2bff      	cmp	r3, #255	@ 0xff
 800add0:	d01f      	beq.n	800ae12 <USBD_StdEPReq+0x1c6>
 800add2:	7b7b      	ldrb	r3, [r7, #13]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11c      	bne.n	800ae12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800add8:	7b7a      	ldrb	r2, [r7, #13]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ade0:	7b7a      	ldrb	r2, [r7, #13]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	32ae      	adds	r2, #174	@ 0xae
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adf0:	7b7a      	ldrb	r2, [r7, #13]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32ae      	adds	r2, #174	@ 0xae
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	4798      	blx	r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae06:	e004      	b.n	800ae12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fc03 	bl	800b616 <USBD_CtlError>
              break;
 800ae10:	e000      	b.n	800ae14 <USBD_StdEPReq+0x1c8>
              break;
 800ae12:	bf00      	nop
          }
          break;
 800ae14:	e0ab      	b.n	800af6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d002      	beq.n	800ae28 <USBD_StdEPReq+0x1dc>
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d032      	beq.n	800ae8c <USBD_StdEPReq+0x240>
 800ae26:	e097      	b.n	800af58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <USBD_StdEPReq+0x1f2>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b80      	cmp	r3, #128	@ 0x80
 800ae32:	d004      	beq.n	800ae3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fbed 	bl	800b616 <USBD_CtlError>
                break;
 800ae3c:	e091      	b.n	800af62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da0b      	bge.n	800ae5e <USBD_StdEPReq+0x212>
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	3310      	adds	r3, #16
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	e00b      	b.n	800ae76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
 800ae60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	4413      	add	r3, r2
 800ae74:	3304      	adds	r3, #4
 800ae76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2202      	movs	r2, #2
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc43 	bl	800b710 <USBD_CtlSendData>
              break;
 800ae8a:	e06a      	b.n	800af62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da11      	bge.n	800aeb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	f003 020f 	and.w	r2, r3, #15
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	3324      	adds	r3, #36	@ 0x24
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d117      	bne.n	800aede <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fbb0 	bl	800b616 <USBD_CtlError>
                  break;
 800aeb6:	e054      	b.n	800af62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	f003 020f 	and.w	r2, r3, #15
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	440b      	add	r3, r1
 800aeca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb9d 	bl	800b616 <USBD_CtlError>
                  break;
 800aedc:	e041      	b.n	800af62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da0b      	bge.n	800aefe <USBD_StdEPReq+0x2b2>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeec:	4613      	mov	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	3310      	adds	r3, #16
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	4413      	add	r3, r2
 800aefa:	3304      	adds	r3, #4
 800aefc:	e00b      	b.n	800af16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	4413      	add	r3, r2
 800af14:	3304      	adds	r3, #4
 800af16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0x2d8>
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b80      	cmp	r3, #128	@ 0x80
 800af22:	d103      	bne.n	800af2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e00e      	b.n	800af4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 f8a3 	bl	800c07c <USBD_LL_IsStallEP>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e002      	b.n	800af4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2202      	movs	r2, #2
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fbdd 	bl	800b710 <USBD_CtlSendData>
              break;
 800af56:	e004      	b.n	800af62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fb5b 	bl	800b616 <USBD_CtlError>
              break;
 800af60:	bf00      	nop
          }
          break;
 800af62:	e004      	b.n	800af6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fb55 	bl	800b616 <USBD_CtlError>
          break;
 800af6c:	bf00      	nop
      }
      break;
 800af6e:	e005      	b.n	800af7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fb4f 	bl	800b616 <USBD_CtlError>
      break;
 800af78:	e000      	b.n	800af7c <USBD_StdEPReq+0x330>
      break;
 800af7a:	bf00      	nop
  }

  return ret;
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	885b      	ldrh	r3, [r3, #2]
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	2b06      	cmp	r3, #6
 800afaa:	f200 8128 	bhi.w	800b1fe <USBD_GetDescriptor+0x276>
 800afae:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <USBD_GetDescriptor+0x2c>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800afd1 	.word	0x0800afd1
 800afb8:	0800afe9 	.word	0x0800afe9
 800afbc:	0800b029 	.word	0x0800b029
 800afc0:	0800b1ff 	.word	0x0800b1ff
 800afc4:	0800b1ff 	.word	0x0800b1ff
 800afc8:	0800b19f 	.word	0x0800b19f
 800afcc:	0800b1cb 	.word	0x0800b1cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	7c12      	ldrb	r2, [r2, #16]
 800afdc:	f107 0108 	add.w	r1, r7, #8
 800afe0:	4610      	mov	r0, r2
 800afe2:	4798      	blx	r3
 800afe4:	60f8      	str	r0, [r7, #12]
      break;
 800afe6:	e112      	b.n	800b20e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7c1b      	ldrb	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10d      	bne.n	800b00c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff8:	f107 0208 	add.w	r2, r7, #8
 800affc:	4610      	mov	r0, r2
 800affe:	4798      	blx	r3
 800b000:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	2202      	movs	r2, #2
 800b008:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b00a:	e100      	b.n	800b20e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	f107 0208 	add.w	r2, r7, #8
 800b018:	4610      	mov	r0, r2
 800b01a:	4798      	blx	r3
 800b01c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3301      	adds	r3, #1
 800b022:	2202      	movs	r2, #2
 800b024:	701a      	strb	r2, [r3, #0]
      break;
 800b026:	e0f2      	b.n	800b20e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	885b      	ldrh	r3, [r3, #2]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b05      	cmp	r3, #5
 800b030:	f200 80ac 	bhi.w	800b18c <USBD_GetDescriptor+0x204>
 800b034:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <USBD_GetDescriptor+0xb4>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b055 	.word	0x0800b055
 800b040:	0800b089 	.word	0x0800b089
 800b044:	0800b0bd 	.word	0x0800b0bd
 800b048:	0800b0f1 	.word	0x0800b0f1
 800b04c:	0800b125 	.word	0x0800b125
 800b050:	0800b159 	.word	0x0800b159
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	7c12      	ldrb	r2, [r2, #16]
 800b06c:	f107 0108 	add.w	r1, r7, #8
 800b070:	4610      	mov	r0, r2
 800b072:	4798      	blx	r3
 800b074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b076:	e091      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 facb 	bl	800b616 <USBD_CtlError>
            err++;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3301      	adds	r3, #1
 800b084:	72fb      	strb	r3, [r7, #11]
          break;
 800b086:	e089      	b.n	800b19c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7c12      	ldrb	r2, [r2, #16]
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3
 800b0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0aa:	e077      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fab1 	bl	800b616 <USBD_CtlError>
            err++;
 800b0b4:	7afb      	ldrb	r3, [r7, #11]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ba:	e06f      	b.n	800b19c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	7c12      	ldrb	r2, [r2, #16]
 800b0d4:	f107 0108 	add.w	r1, r7, #8
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4798      	blx	r3
 800b0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0de:	e05d      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fa97 	bl	800b616 <USBD_CtlError>
            err++;
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ee:	e055      	b.n	800b19c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	7c12      	ldrb	r2, [r2, #16]
 800b108:	f107 0108 	add.w	r1, r7, #8
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
 800b110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b112:	e043      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fa7d 	bl	800b616 <USBD_CtlError>
            err++;
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	3301      	adds	r3, #1
 800b120:	72fb      	strb	r3, [r7, #11]
          break;
 800b122:	e03b      	b.n	800b19c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00b      	beq.n	800b148 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	7c12      	ldrb	r2, [r2, #16]
 800b13c:	f107 0108 	add.w	r1, r7, #8
 800b140:	4610      	mov	r0, r2
 800b142:	4798      	blx	r3
 800b144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b146:	e029      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fa63 	bl	800b616 <USBD_CtlError>
            err++;
 800b150:	7afb      	ldrb	r3, [r7, #11]
 800b152:	3301      	adds	r3, #1
 800b154:	72fb      	strb	r3, [r7, #11]
          break;
 800b156:	e021      	b.n	800b19c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00b      	beq.n	800b17c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	7c12      	ldrb	r2, [r2, #16]
 800b170:	f107 0108 	add.w	r1, r7, #8
 800b174:	4610      	mov	r0, r2
 800b176:	4798      	blx	r3
 800b178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b17a:	e00f      	b.n	800b19c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa49 	bl	800b616 <USBD_CtlError>
            err++;
 800b184:	7afb      	ldrb	r3, [r7, #11]
 800b186:	3301      	adds	r3, #1
 800b188:	72fb      	strb	r3, [r7, #11]
          break;
 800b18a:	e007      	b.n	800b19c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fa41 	bl	800b616 <USBD_CtlError>
          err++;
 800b194:	7afb      	ldrb	r3, [r7, #11]
 800b196:	3301      	adds	r3, #1
 800b198:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b19a:	bf00      	nop
      }
      break;
 800b19c:	e037      	b.n	800b20e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7c1b      	ldrb	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ae:	f107 0208 	add.w	r2, r7, #8
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4798      	blx	r3
 800b1b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1b8:	e029      	b.n	800b20e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fa2a 	bl	800b616 <USBD_CtlError>
        err++;
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b1c8:	e021      	b.n	800b20e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	7c1b      	ldrb	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10d      	bne.n	800b1ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1da:	f107 0208 	add.w	r2, r7, #8
 800b1de:	4610      	mov	r0, r2
 800b1e0:	4798      	blx	r3
 800b1e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	2207      	movs	r2, #7
 800b1ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1ec:	e00f      	b.n	800b20e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa10 	bl	800b616 <USBD_CtlError>
        err++;
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b1fc:	e007      	b.n	800b20e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fa08 	bl	800b616 <USBD_CtlError>
      err++;
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	3301      	adds	r3, #1
 800b20a:	72fb      	strb	r3, [r7, #11]
      break;
 800b20c:	bf00      	nop
  }

  if (err != 0U)
 800b20e:	7afb      	ldrb	r3, [r7, #11]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d11e      	bne.n	800b252 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	88db      	ldrh	r3, [r3, #6]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d016      	beq.n	800b24a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b21c:	893b      	ldrh	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00e      	beq.n	800b240 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	88da      	ldrh	r2, [r3, #6]
 800b226:	893b      	ldrh	r3, [r7, #8]
 800b228:	4293      	cmp	r3, r2
 800b22a:	bf28      	it	cs
 800b22c:	4613      	movcs	r3, r2
 800b22e:	b29b      	uxth	r3, r3
 800b230:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b232:	893b      	ldrh	r3, [r7, #8]
 800b234:	461a      	mov	r2, r3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fa69 	bl	800b710 <USBD_CtlSendData>
 800b23e:	e009      	b.n	800b254 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f9e7 	bl	800b616 <USBD_CtlError>
 800b248:	e004      	b.n	800b254 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 faba 	bl	800b7c4 <USBD_CtlSendStatus>
 800b250:	e000      	b.n	800b254 <USBD_GetDescriptor+0x2cc>
    return;
 800b252:	bf00      	nop
  }
}
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop

0800b25c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	889b      	ldrh	r3, [r3, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d131      	bne.n	800b2d2 <USBD_SetAddress+0x76>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d12d      	bne.n	800b2d2 <USBD_SetAddress+0x76>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	885b      	ldrh	r3, [r3, #2]
 800b27a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b27c:	d829      	bhi.n	800b2d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b288:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b03      	cmp	r3, #3
 800b294:	d104      	bne.n	800b2a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9bc 	bl	800b616 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	e01d      	b.n	800b2dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7bfa      	ldrb	r2, [r7, #15]
 800b2a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 ff11 	bl	800c0d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa86 	bl	800b7c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d004      	beq.n	800b2c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c6:	e009      	b.n	800b2dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d0:	e004      	b.n	800b2dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f99e 	bl	800b616 <USBD_CtlError>
  }
}
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	885b      	ldrh	r3, [r3, #2]
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	4b4e      	ldr	r3, [pc, #312]	@ (800b434 <USBD_SetConfig+0x150>)
 800b2fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2fc:	4b4d      	ldr	r3, [pc, #308]	@ (800b434 <USBD_SetConfig+0x150>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d905      	bls.n	800b310 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f985 	bl	800b616 <USBD_CtlError>
    return USBD_FAIL;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e08c      	b.n	800b42a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d002      	beq.n	800b322 <USBD_SetConfig+0x3e>
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d029      	beq.n	800b374 <USBD_SetConfig+0x90>
 800b320:	e075      	b.n	800b40e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b322:	4b44      	ldr	r3, [pc, #272]	@ (800b434 <USBD_SetConfig+0x150>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d020      	beq.n	800b36c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b32a:	4b42      	ldr	r3, [pc, #264]	@ (800b434 <USBD_SetConfig+0x150>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b334:	4b3f      	ldr	r3, [pc, #252]	@ (800b434 <USBD_SetConfig+0x150>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fe ffe3 	bl	800a306 <USBD_SetClassConfig>
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d008      	beq.n	800b35c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f962 	bl	800b616 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2202      	movs	r2, #2
 800b356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b35a:	e065      	b.n	800b428 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa31 	bl	800b7c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2203      	movs	r2, #3
 800b366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b36a:	e05d      	b.n	800b428 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fa29 	bl	800b7c4 <USBD_CtlSendStatus>
      break;
 800b372:	e059      	b.n	800b428 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b374:	4b2f      	ldr	r3, [pc, #188]	@ (800b434 <USBD_SetConfig+0x150>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d112      	bne.n	800b3a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b384:	4b2b      	ldr	r3, [pc, #172]	@ (800b434 <USBD_SetConfig+0x150>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b38e:	4b29      	ldr	r3, [pc, #164]	@ (800b434 <USBD_SetConfig+0x150>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7fe ffd2 	bl	800a33e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fa12 	bl	800b7c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3a0:	e042      	b.n	800b428 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b3a2:	4b24      	ldr	r3, [pc, #144]	@ (800b434 <USBD_SetConfig+0x150>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d02a      	beq.n	800b406 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7fe ffc0 	bl	800a33e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b3be:	4b1d      	ldr	r3, [pc, #116]	@ (800b434 <USBD_SetConfig+0x150>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b434 <USBD_SetConfig+0x150>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fe ff99 	bl	800a306 <USBD_SetClassConfig>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00f      	beq.n	800b3fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f918 	bl	800b616 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fe ffa5 	bl	800a33e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3fc:	e014      	b.n	800b428 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f9e0 	bl	800b7c4 <USBD_CtlSendStatus>
      break;
 800b404:	e010      	b.n	800b428 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f9dc 	bl	800b7c4 <USBD_CtlSendStatus>
      break;
 800b40c:	e00c      	b.n	800b428 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f900 	bl	800b616 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b416:	4b07      	ldr	r3, [pc, #28]	@ (800b434 <USBD_SetConfig+0x150>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe ff8e 	bl	800a33e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	73fb      	strb	r3, [r7, #15]
      break;
 800b426:	bf00      	nop
  }

  return ret;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	200004e0 	.word	0x200004e0

0800b438 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	88db      	ldrh	r3, [r3, #6]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d004      	beq.n	800b454 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f8e2 	bl	800b616 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b452:	e023      	b.n	800b49c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	dc02      	bgt.n	800b466 <USBD_GetConfig+0x2e>
 800b460:	2b00      	cmp	r3, #0
 800b462:	dc03      	bgt.n	800b46c <USBD_GetConfig+0x34>
 800b464:	e015      	b.n	800b492 <USBD_GetConfig+0x5a>
 800b466:	2b03      	cmp	r3, #3
 800b468:	d00b      	beq.n	800b482 <USBD_GetConfig+0x4a>
 800b46a:	e012      	b.n	800b492 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3308      	adds	r3, #8
 800b476:	2201      	movs	r2, #1
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f948 	bl	800b710 <USBD_CtlSendData>
        break;
 800b480:	e00c      	b.n	800b49c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3304      	adds	r3, #4
 800b486:	2201      	movs	r2, #1
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f940 	bl	800b710 <USBD_CtlSendData>
        break;
 800b490:	e004      	b.n	800b49c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f8be 	bl	800b616 <USBD_CtlError>
        break;
 800b49a:	bf00      	nop
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d81e      	bhi.n	800b4fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	88db      	ldrh	r3, [r3, #6]
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d004      	beq.n	800b4ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f8a5 	bl	800b616 <USBD_CtlError>
        break;
 800b4cc:	e01a      	b.n	800b504 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d005      	beq.n	800b4ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f043 0202 	orr.w	r2, r3, #2
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	330c      	adds	r3, #12
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f90c 	bl	800b710 <USBD_CtlSendData>
      break;
 800b4f8:	e004      	b.n	800b504 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f88a 	bl	800b616 <USBD_CtlError>
      break;
 800b502:	bf00      	nop
  }
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	885b      	ldrh	r3, [r3, #2]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d107      	bne.n	800b52e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f94c 	bl	800b7c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b52c:	e013      	b.n	800b556 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	885b      	ldrh	r3, [r3, #2]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d10b      	bne.n	800b54e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	889b      	ldrh	r3, [r3, #4]
 800b53a:	0a1b      	lsrs	r3, r3, #8
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f93c 	bl	800b7c4 <USBD_CtlSendStatus>
}
 800b54c:	e003      	b.n	800b556 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f860 	bl	800b616 <USBD_CtlError>
}
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	3b01      	subs	r3, #1
 800b572:	2b02      	cmp	r3, #2
 800b574:	d80b      	bhi.n	800b58e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d10c      	bne.n	800b598 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f91c 	bl	800b7c4 <USBD_CtlSendStatus>
      }
      break;
 800b58c:	e004      	b.n	800b598 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f840 	bl	800b616 <USBD_CtlError>
      break;
 800b596:	e000      	b.n	800b59a <USBD_ClrFeature+0x3c>
      break;
 800b598:	bf00      	nop
  }
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	781a      	ldrb	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	781a      	ldrb	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f7ff fa40 	bl	800aa52 <SWAPBYTE>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7ff fa33 	bl	800aa52 <SWAPBYTE>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff fa26 	bl	800aa52 <SWAPBYTE>
 800b606:	4603      	mov	r3, r0
 800b608:	461a      	mov	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	80da      	strh	r2, [r3, #6]
}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b620:	2180      	movs	r1, #128	@ 0x80
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fcec 	bl	800c000 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b628:	2100      	movs	r1, #0
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fce8 	bl	800c000 <USBD_LL_StallEP>
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d042      	beq.n	800b6d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b652:	6938      	ldr	r0, [r7, #16]
 800b654:	f000 f842 	bl	800b6dc <USBD_GetLen>
 800b658:	4603      	mov	r3, r0
 800b65a:	3301      	adds	r3, #1
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b662:	d808      	bhi.n	800b676 <USBD_GetString+0x3e>
 800b664:	6938      	ldr	r0, [r7, #16]
 800b666:	f000 f839 	bl	800b6dc <USBD_GetLen>
 800b66a:	4603      	mov	r3, r0
 800b66c:	3301      	adds	r3, #1
 800b66e:	b29b      	uxth	r3, r3
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	b29a      	uxth	r2, r3
 800b674:	e001      	b.n	800b67a <USBD_GetString+0x42>
 800b676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	4413      	add	r3, r2
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	7812      	ldrb	r2, [r2, #0]
 800b688:	701a      	strb	r2, [r3, #0]
  idx++;
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	3301      	adds	r3, #1
 800b68e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	4413      	add	r3, r2
 800b696:	2203      	movs	r2, #3
 800b698:	701a      	strb	r2, [r3, #0]
  idx++;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	3301      	adds	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6a0:	e013      	b.n	800b6ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	613b      	str	r3, [r7, #16]
    idx++;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4413      	add	r3, r2
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e7      	bne.n	800b6a2 <USBD_GetString+0x6a>
 800b6d2:	e000      	b.n	800b6d6 <USBD_GetString+0x9e>
    return;
 800b6d4:	bf00      	nop
  }
}
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b6ec:	e005      	b.n	800b6fa <USBD_GetLen+0x1e>
  {
    len++;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f5      	bne.n	800b6ee <USBD_GetLen+0x12>
  }

  return len;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2202      	movs	r2, #2
 800b720:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fceb 	bl	800c112 <USBD_LL_Transmit>

  return USBD_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	2100      	movs	r1, #0
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 fcda 	bl	800c112 <USBD_LL_Transmit>

  return USBD_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2203      	movs	r2, #3
 800b778:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	2100      	movs	r1, #0
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 fcde 	bl	800c154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fccd 	bl	800c154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fc99 	bl	800c112 <USBD_LL_Transmit>

  return USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fca7 	bl	800c154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b814:	2200      	movs	r2, #0
 800b816:	4912      	ldr	r1, [pc, #72]	@ (800b860 <MX_USB_DEVICE_Init+0x50>)
 800b818:	4812      	ldr	r0, [pc, #72]	@ (800b864 <MX_USB_DEVICE_Init+0x54>)
 800b81a:	f7fe fcf7 	bl	800a20c <USBD_Init>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b824:	f7f8 fcf8 	bl	8004218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b828:	490f      	ldr	r1, [pc, #60]	@ (800b868 <MX_USB_DEVICE_Init+0x58>)
 800b82a:	480e      	ldr	r0, [pc, #56]	@ (800b864 <MX_USB_DEVICE_Init+0x54>)
 800b82c:	f7fe fd1e 	bl	800a26c <USBD_RegisterClass>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b836:	f7f8 fcef 	bl	8004218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b83a:	490c      	ldr	r1, [pc, #48]	@ (800b86c <MX_USB_DEVICE_Init+0x5c>)
 800b83c:	4809      	ldr	r0, [pc, #36]	@ (800b864 <MX_USB_DEVICE_Init+0x54>)
 800b83e:	f7fe fc15 	bl	800a06c <USBD_CDC_RegisterInterface>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b848:	f7f8 fce6 	bl	8004218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b84c:	4805      	ldr	r0, [pc, #20]	@ (800b864 <MX_USB_DEVICE_Init+0x54>)
 800b84e:	f7fe fd43 	bl	800a2d8 <USBD_Start>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b858:	f7f8 fcde 	bl	8004218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b85c:	bf00      	nop
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200000ac 	.word	0x200000ac
 800b864:	200004e4 	.word	0x200004e4
 800b868:	20000018 	.word	0x20000018
 800b86c:	20000098 	.word	0x20000098

0800b870 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b874:	2200      	movs	r2, #0
 800b876:	4905      	ldr	r1, [pc, #20]	@ (800b88c <CDC_Init_FS+0x1c>)
 800b878:	4805      	ldr	r0, [pc, #20]	@ (800b890 <CDC_Init_FS+0x20>)
 800b87a:	f7fe fc11 	bl	800a0a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b87e:	4905      	ldr	r1, [pc, #20]	@ (800b894 <CDC_Init_FS+0x24>)
 800b880:	4803      	ldr	r0, [pc, #12]	@ (800b890 <CDC_Init_FS+0x20>)
 800b882:	f7fe fc2f 	bl	800a0e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b886:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b888:	4618      	mov	r0, r3
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20000fc0 	.word	0x20000fc0
 800b890:	200004e4 	.word	0x200004e4
 800b894:	200007c0 	.word	0x200007c0

0800b898 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b898:	b480      	push	{r7}
 800b89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b89c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	71fb      	strb	r3, [r7, #7]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	2b23      	cmp	r3, #35	@ 0x23
 800b8bc:	d84a      	bhi.n	800b954 <CDC_Control_FS+0xac>
 800b8be:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c4 <CDC_Control_FS+0x1c>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b955 	.word	0x0800b955
 800b8c8:	0800b955 	.word	0x0800b955
 800b8cc:	0800b955 	.word	0x0800b955
 800b8d0:	0800b955 	.word	0x0800b955
 800b8d4:	0800b955 	.word	0x0800b955
 800b8d8:	0800b955 	.word	0x0800b955
 800b8dc:	0800b955 	.word	0x0800b955
 800b8e0:	0800b955 	.word	0x0800b955
 800b8e4:	0800b955 	.word	0x0800b955
 800b8e8:	0800b955 	.word	0x0800b955
 800b8ec:	0800b955 	.word	0x0800b955
 800b8f0:	0800b955 	.word	0x0800b955
 800b8f4:	0800b955 	.word	0x0800b955
 800b8f8:	0800b955 	.word	0x0800b955
 800b8fc:	0800b955 	.word	0x0800b955
 800b900:	0800b955 	.word	0x0800b955
 800b904:	0800b955 	.word	0x0800b955
 800b908:	0800b955 	.word	0x0800b955
 800b90c:	0800b955 	.word	0x0800b955
 800b910:	0800b955 	.word	0x0800b955
 800b914:	0800b955 	.word	0x0800b955
 800b918:	0800b955 	.word	0x0800b955
 800b91c:	0800b955 	.word	0x0800b955
 800b920:	0800b955 	.word	0x0800b955
 800b924:	0800b955 	.word	0x0800b955
 800b928:	0800b955 	.word	0x0800b955
 800b92c:	0800b955 	.word	0x0800b955
 800b930:	0800b955 	.word	0x0800b955
 800b934:	0800b955 	.word	0x0800b955
 800b938:	0800b955 	.word	0x0800b955
 800b93c:	0800b955 	.word	0x0800b955
 800b940:	0800b955 	.word	0x0800b955
 800b944:	0800b955 	.word	0x0800b955
 800b948:	0800b955 	.word	0x0800b955
 800b94c:	0800b955 	.word	0x0800b955
 800b950:	0800b955 	.word	0x0800b955
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b954:	bf00      	nop
  }

  return (USBD_OK);
 800b956:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b96e:	6879      	ldr	r1, [r7, #4]
 800b970:	4805      	ldr	r0, [pc, #20]	@ (800b988 <CDC_Receive_FS+0x24>)
 800b972:	f7fe fbb7 	bl	800a0e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b976:	4804      	ldr	r0, [pc, #16]	@ (800b988 <CDC_Receive_FS+0x24>)
 800b978:	f7fe fc12 	bl	800a1a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b97c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	200004e4 	.word	0x200004e4

0800b98c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b99c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d4 <CDC_Transmit_FS+0x48>)
 800b99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e00b      	b.n	800b9ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b9b2:	887b      	ldrh	r3, [r7, #2]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4806      	ldr	r0, [pc, #24]	@ (800b9d4 <CDC_Transmit_FS+0x48>)
 800b9ba:	f7fe fb71 	bl	800a0a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b9be:	4805      	ldr	r0, [pc, #20]	@ (800b9d4 <CDC_Transmit_FS+0x48>)
 800b9c0:	f7fe fbae 	bl	800a120 <USBD_CDC_TransmitPacket>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	200004e4 	.word	0x200004e4

0800b9d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
	...

0800b9fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	6039      	str	r1, [r7, #0]
 800ba06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2212      	movs	r2, #18
 800ba0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba0e:	4b03      	ldr	r3, [pc, #12]	@ (800ba1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	200000c8 	.word	0x200000c8

0800ba20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	6039      	str	r1, [r7, #0]
 800ba2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2204      	movs	r2, #4
 800ba30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba32:	4b03      	ldr	r3, [pc, #12]	@ (800ba40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	200000dc 	.word	0x200000dc

0800ba44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d105      	bne.n	800ba62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	4907      	ldr	r1, [pc, #28]	@ (800ba78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba5a:	4808      	ldr	r0, [pc, #32]	@ (800ba7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba5c:	f7ff fdec 	bl	800b638 <USBD_GetString>
 800ba60:	e004      	b.n	800ba6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	4904      	ldr	r1, [pc, #16]	@ (800ba78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba66:	4805      	ldr	r0, [pc, #20]	@ (800ba7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba68:	f7ff fde6 	bl	800b638 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba6c:	4b02      	ldr	r3, [pc, #8]	@ (800ba78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	200017c0 	.word	0x200017c0
 800ba7c:	0800eb70 	.word	0x0800eb70

0800ba80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	6039      	str	r1, [r7, #0]
 800ba8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	4904      	ldr	r1, [pc, #16]	@ (800baa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba90:	4804      	ldr	r0, [pc, #16]	@ (800baa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba92:	f7ff fdd1 	bl	800b638 <USBD_GetString>
  return USBD_StrDesc;
 800ba96:	4b02      	ldr	r3, [pc, #8]	@ (800baa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	200017c0 	.word	0x200017c0
 800baa4:	0800eb88 	.word	0x0800eb88

0800baa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	6039      	str	r1, [r7, #0]
 800bab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	221a      	movs	r2, #26
 800bab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baba:	f000 f843 	bl	800bb44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800babe:	4b02      	ldr	r3, [pc, #8]	@ (800bac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	200000e0 	.word	0x200000e0

0800bacc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	6039      	str	r1, [r7, #0]
 800bad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d105      	bne.n	800baea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	4907      	ldr	r1, [pc, #28]	@ (800bb00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bae2:	4808      	ldr	r0, [pc, #32]	@ (800bb04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bae4:	f7ff fda8 	bl	800b638 <USBD_GetString>
 800bae8:	e004      	b.n	800baf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	4904      	ldr	r1, [pc, #16]	@ (800bb00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800baee:	4805      	ldr	r0, [pc, #20]	@ (800bb04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baf0:	f7ff fda2 	bl	800b638 <USBD_GetString>
  }
  return USBD_StrDesc;
 800baf4:	4b02      	ldr	r3, [pc, #8]	@ (800bb00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200017c0 	.word	0x200017c0
 800bb04:	0800eb9c 	.word	0x0800eb9c

0800bb08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	6039      	str	r1, [r7, #0]
 800bb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	4907      	ldr	r1, [pc, #28]	@ (800bb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb1e:	4808      	ldr	r0, [pc, #32]	@ (800bb40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb20:	f7ff fd8a 	bl	800b638 <USBD_GetString>
 800bb24:	e004      	b.n	800bb30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	4904      	ldr	r1, [pc, #16]	@ (800bb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb2a:	4805      	ldr	r0, [pc, #20]	@ (800bb40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb2c:	f7ff fd84 	bl	800b638 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb30:	4b02      	ldr	r3, [pc, #8]	@ (800bb3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	200017c0 	.word	0x200017c0
 800bb40:	0800eba8 	.word	0x0800eba8

0800bb44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb88 <Get_SerialNum+0x44>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb50:	4b0e      	ldr	r3, [pc, #56]	@ (800bb8c <Get_SerialNum+0x48>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb56:	4b0e      	ldr	r3, [pc, #56]	@ (800bb90 <Get_SerialNum+0x4c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb6a:	2208      	movs	r2, #8
 800bb6c:	4909      	ldr	r1, [pc, #36]	@ (800bb94 <Get_SerialNum+0x50>)
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 f814 	bl	800bb9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb74:	2204      	movs	r2, #4
 800bb76:	4908      	ldr	r1, [pc, #32]	@ (800bb98 <Get_SerialNum+0x54>)
 800bb78:	68b8      	ldr	r0, [r7, #8]
 800bb7a:	f000 f80f 	bl	800bb9c <IntToUnicode>
  }
}
 800bb7e:	bf00      	nop
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	1fff7a10 	.word	0x1fff7a10
 800bb8c:	1fff7a14 	.word	0x1fff7a14
 800bb90:	1fff7a18 	.word	0x1fff7a18
 800bb94:	200000e2 	.word	0x200000e2
 800bb98:	200000f2 	.word	0x200000f2

0800bb9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbae:	2300      	movs	r3, #0
 800bbb0:	75fb      	strb	r3, [r7, #23]
 800bbb2:	e027      	b.n	800bc04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0f1b      	lsrs	r3, r3, #28
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	d80b      	bhi.n	800bbd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	0f1b      	lsrs	r3, r3, #28
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	440b      	add	r3, r1
 800bbcc:	3230      	adds	r2, #48	@ 0x30
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e00a      	b.n	800bbea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	0f1b      	lsrs	r3, r3, #28
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	4619      	mov	r1, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	440b      	add	r3, r1
 800bbe4:	3237      	adds	r2, #55	@ 0x37
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	3301      	adds	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]
 800bc04:	7dfa      	ldrb	r2, [r7, #23]
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d3d3      	bcc.n	800bbb4 <IntToUnicode+0x18>
  }
}
 800bc0c:	bf00      	nop
 800bc0e:	bf00      	nop
 800bc10:	371c      	adds	r7, #28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
	...

0800bc1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	@ 0x28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc24:	f107 0314 	add.w	r3, r7, #20
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	605a      	str	r2, [r3, #4]
 800bc2e:	609a      	str	r2, [r3, #8]
 800bc30:	60da      	str	r2, [r3, #12]
 800bc32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc3c:	d13a      	bne.n	800bcb4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc3e:	2300      	movs	r3, #0
 800bc40:	613b      	str	r3, [r7, #16]
 800bc42:	4b1e      	ldr	r3, [pc, #120]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc46:	4a1d      	ldr	r2, [pc, #116]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc48:	f043 0301 	orr.w	r3, r3, #1
 800bc4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	613b      	str	r3, [r7, #16]
 800bc58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bc5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc60:	2302      	movs	r3, #2
 800bc62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc6c:	230a      	movs	r3, #10
 800bc6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc70:	f107 0314 	add.w	r3, r7, #20
 800bc74:	4619      	mov	r1, r3
 800bc76:	4812      	ldr	r0, [pc, #72]	@ (800bcc0 <HAL_PCD_MspInit+0xa4>)
 800bc78:	f7f8 fecc 	bl	8004a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc80:	4a0e      	ldr	r2, [pc, #56]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc86:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc90:	4a0a      	ldr	r2, [pc, #40]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc96:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc98:	4b08      	ldr	r3, [pc, #32]	@ (800bcbc <HAL_PCD_MspInit+0xa0>)
 800bc9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bca4:	2200      	movs	r2, #0
 800bca6:	2100      	movs	r1, #0
 800bca8:	2043      	movs	r0, #67	@ 0x43
 800bcaa:	f7f8 fe7c 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bcae:	2043      	movs	r0, #67	@ 0x43
 800bcb0:	f7f8 fe95 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bcb4:	bf00      	nop
 800bcb6:	3728      	adds	r7, #40	@ 0x28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	40020000 	.word	0x40020000

0800bcc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bcd8:	4619      	mov	r1, r3
 800bcda:	4610      	mov	r0, r2
 800bcdc:	f7fe fb49 	bl	800a372 <USBD_LL_SetupStage>
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	78fb      	ldrb	r3, [r7, #3]
 800bd10:	4619      	mov	r1, r3
 800bd12:	f7fe fb83 	bl	800a41c <USBD_LL_DataOutStage>
}
 800bd16:	bf00      	nop
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bd30:	78fa      	ldrb	r2, [r7, #3]
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	4613      	mov	r3, r2
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	440b      	add	r3, r1
 800bd3e:	3320      	adds	r3, #32
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	4619      	mov	r1, r3
 800bd46:	f7fe fc1c 	bl	800a582 <USBD_LL_DataInStage>
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b082      	sub	sp, #8
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fd56 	bl	800a812 <USBD_LL_SOF>
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd76:	2301      	movs	r3, #1
 800bd78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	79db      	ldrb	r3, [r3, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
 800bd86:	e008      	b.n	800bd9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	79db      	ldrb	r3, [r3, #7]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d102      	bne.n	800bd96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd90:	2301      	movs	r3, #1
 800bd92:	73fb      	strb	r3, [r7, #15]
 800bd94:	e001      	b.n	800bd9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd96:	f7f8 fa3f 	bl	8004218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bda0:	7bfa      	ldrb	r2, [r7, #15]
 800bda2:	4611      	mov	r1, r2
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fe fcf0 	bl	800a78a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fc98 	bl	800a6e6 <USBD_LL_Reset>
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fceb 	bl	800a7aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bde6:	f043 0301 	orr.w	r3, r3, #1
 800bdea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7adb      	ldrb	r3, [r3, #11]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d005      	beq.n	800be00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdf4:	4b04      	ldr	r3, [pc, #16]	@ (800be08 <HAL_PCD_SuspendCallback+0x48>)
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	4a03      	ldr	r2, [pc, #12]	@ (800be08 <HAL_PCD_SuspendCallback+0x48>)
 800bdfa:	f043 0306 	orr.w	r3, r3, #6
 800bdfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	e000ed00 	.word	0xe000ed00

0800be0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fce1 	bl	800a7e2 <USBD_LL_Resume>
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be3a:	78fa      	ldrb	r2, [r7, #3]
 800be3c:	4611      	mov	r1, r2
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fd39 	bl	800a8b6 <USBD_LL_IsoOUTIncomplete>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fcf5 	bl	800a852 <USBD_LL_IsoINIncomplete>
}
 800be68:	bf00      	nop
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe fd4b 	bl	800a91a <USBD_LL_DevConnected>
}
 800be84:	bf00      	nop
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fd48 	bl	800a930 <USBD_LL_DevDisconnected>
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d13c      	bne.n	800bf32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800beb8:	4a20      	ldr	r2, [pc, #128]	@ (800bf3c <USBD_LL_Init+0x94>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a1e      	ldr	r2, [pc, #120]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bec4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bec8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf3c <USBD_LL_Init+0x94>)
 800beca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bed0:	4b1a      	ldr	r3, [pc, #104]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bed2:	2204      	movs	r2, #4
 800bed4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bed6:	4b19      	ldr	r3, [pc, #100]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bed8:	2202      	movs	r2, #2
 800beda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bedc:	4b17      	ldr	r3, [pc, #92]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bede:	2200      	movs	r2, #0
 800bee0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bee2:	4b16      	ldr	r3, [pc, #88]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bee4:	2202      	movs	r2, #2
 800bee6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bee8:	4b14      	ldr	r3, [pc, #80]	@ (800bf3c <USBD_LL_Init+0x94>)
 800beea:	2200      	movs	r2, #0
 800beec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800beee:	4b13      	ldr	r3, [pc, #76]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bef4:	4b11      	ldr	r3, [pc, #68]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800befa:	4b10      	ldr	r3, [pc, #64]	@ (800bf3c <USBD_LL_Init+0x94>)
 800befc:	2200      	movs	r2, #0
 800befe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf00:	4b0e      	ldr	r3, [pc, #56]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf06:	480d      	ldr	r0, [pc, #52]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bf08:	f7f8 ff20 	bl	8004d4c <HAL_PCD_Init>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf12:	f7f8 f981 	bl	8004218 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf16:	2180      	movs	r1, #128	@ 0x80
 800bf18:	4808      	ldr	r0, [pc, #32]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bf1a:	f7fa f94c 	bl	80061b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf1e:	2240      	movs	r2, #64	@ 0x40
 800bf20:	2100      	movs	r1, #0
 800bf22:	4806      	ldr	r0, [pc, #24]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bf24:	f7fa f900 	bl	8006128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf28:	2280      	movs	r2, #128	@ 0x80
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4803      	ldr	r0, [pc, #12]	@ (800bf3c <USBD_LL_Init+0x94>)
 800bf2e:	f7fa f8fb 	bl	8006128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	200019c0 	.word	0x200019c0

0800bf40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7f9 f807 	bl	8004f6a <HAL_PCD_Start>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f942 	bl	800c1ec <USBD_Get_USB_Status>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	4608      	mov	r0, r1
 800bf80:	4611      	mov	r1, r2
 800bf82:	461a      	mov	r2, r3
 800bf84:	4603      	mov	r3, r0
 800bf86:	70fb      	strb	r3, [r7, #3]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70bb      	strb	r3, [r7, #2]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf9e:	78bb      	ldrb	r3, [r7, #2]
 800bfa0:	883a      	ldrh	r2, [r7, #0]
 800bfa2:	78f9      	ldrb	r1, [r7, #3]
 800bfa4:	f7f9 fcdb 	bl	800595e <HAL_PCD_EP_Open>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f91c 	bl	800c1ec <USBD_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfdc:	78fa      	ldrb	r2, [r7, #3]
 800bfde:	4611      	mov	r1, r2
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f9 fd26 	bl	8005a32 <HAL_PCD_EP_Close>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 f8fd 	bl	800c1ec <USBD_Get_USB_Status>
 800bff2:	4603      	mov	r3, r0
 800bff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c01a:	78fa      	ldrb	r2, [r7, #3]
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f9 fdde 	bl	8005be0 <HAL_PCD_EP_SetStall>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 f8de 	bl	800c1ec <USBD_Get_USB_Status>
 800c030:	4603      	mov	r3, r0
 800c032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c034:	7bbb      	ldrb	r3, [r7, #14]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	460b      	mov	r3, r1
 800c048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c058:	78fa      	ldrb	r2, [r7, #3]
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f9 fe22 	bl	8005ca6 <HAL_PCD_EP_ClrStall>
 800c062:	4603      	mov	r3, r0
 800c064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 f8bf 	bl	800c1ec <USBD_Get_USB_Status>
 800c06e:	4603      	mov	r3, r0
 800c070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c072:	7bbb      	ldrb	r3, [r7, #14]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c08e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c094:	2b00      	cmp	r3, #0
 800c096:	da0b      	bge.n	800c0b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c098:	78fb      	ldrb	r3, [r7, #3]
 800c09a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c09e:	68f9      	ldr	r1, [r7, #12]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3316      	adds	r3, #22
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	e00b      	b.n	800c0c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	4413      	add	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	440b      	add	r3, r1
 800c0c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c0c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7f9 fc0f 	bl	8005916 <HAL_PCD_SetAddress>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f874 	bl	800c1ec <USBD_Get_USB_Status>
 800c104:	4603      	mov	r3, r0
 800c106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c108:	7bbb      	ldrb	r3, [r7, #14]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b086      	sub	sp, #24
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
 800c11e:	460b      	mov	r3, r1
 800c120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c130:	7af9      	ldrb	r1, [r7, #11]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	f7f9 fd19 	bl	8005b6c <HAL_PCD_EP_Transmit>
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 f853 	bl	800c1ec <USBD_Get_USB_Status>
 800c146:	4603      	mov	r3, r0
 800c148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c14a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3718      	adds	r7, #24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	607a      	str	r2, [r7, #4]
 800c15e:	603b      	str	r3, [r7, #0]
 800c160:	460b      	mov	r3, r1
 800c162:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c172:	7af9      	ldrb	r1, [r7, #11]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	f7f9 fca5 	bl	8005ac6 <HAL_PCD_EP_Receive>
 800c17c:	4603      	mov	r3, r0
 800c17e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	4618      	mov	r0, r3
 800c184:	f000 f832 	bl	800c1ec <USBD_Get_USB_Status>
 800c188:	4603      	mov	r3, r0
 800c18a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c18c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1a8:	78fa      	ldrb	r2, [r7, #3]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f9 fcc5 	bl	8005b3c <HAL_PCD_EP_GetRxCount>
 800c1b2:	4603      	mov	r3, r0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1c4:	4b03      	ldr	r3, [pc, #12]	@ (800c1d4 <USBD_static_malloc+0x18>)
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20001ea4 	.word	0x20001ea4

0800c1d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]

}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d817      	bhi.n	800c230 <USBD_Get_USB_Status+0x44>
 800c200:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <USBD_Get_USB_Status+0x1c>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c219 	.word	0x0800c219
 800c20c:	0800c21f 	.word	0x0800c21f
 800c210:	0800c225 	.word	0x0800c225
 800c214:	0800c22b 	.word	0x0800c22b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
    break;
 800c21c:	e00b      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c21e:	2303      	movs	r3, #3
 800c220:	73fb      	strb	r3, [r7, #15]
    break;
 800c222:	e008      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c224:	2301      	movs	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
    break;
 800c228:	e005      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c22a:	2303      	movs	r3, #3
 800c22c:	73fb      	strb	r3, [r7, #15]
    break;
 800c22e:	e002      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	73fb      	strb	r3, [r7, #15]
    break;
 800c234:	bf00      	nop
  }
  return usb_status;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <__assert_func>:
 800c244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c246:	4614      	mov	r4, r2
 800c248:	461a      	mov	r2, r3
 800c24a:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <__assert_func+0x2c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4605      	mov	r5, r0
 800c250:	68d8      	ldr	r0, [r3, #12]
 800c252:	b14c      	cbz	r4, 800c268 <__assert_func+0x24>
 800c254:	4b07      	ldr	r3, [pc, #28]	@ (800c274 <__assert_func+0x30>)
 800c256:	9100      	str	r1, [sp, #0]
 800c258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c25c:	4906      	ldr	r1, [pc, #24]	@ (800c278 <__assert_func+0x34>)
 800c25e:	462b      	mov	r3, r5
 800c260:	f000 fdc6 	bl	800cdf0 <fiprintf>
 800c264:	f000 fed5 	bl	800d012 <abort>
 800c268:	4b04      	ldr	r3, [pc, #16]	@ (800c27c <__assert_func+0x38>)
 800c26a:	461c      	mov	r4, r3
 800c26c:	e7f3      	b.n	800c256 <__assert_func+0x12>
 800c26e:	bf00      	nop
 800c270:	20000108 	.word	0x20000108
 800c274:	0800ec2c 	.word	0x0800ec2c
 800c278:	0800ec39 	.word	0x0800ec39
 800c27c:	0800ec67 	.word	0x0800ec67

0800c280 <malloc>:
 800c280:	4b02      	ldr	r3, [pc, #8]	@ (800c28c <malloc+0xc>)
 800c282:	4601      	mov	r1, r0
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	f000 b82d 	b.w	800c2e4 <_malloc_r>
 800c28a:	bf00      	nop
 800c28c:	20000108 	.word	0x20000108

0800c290 <free>:
 800c290:	4b02      	ldr	r3, [pc, #8]	@ (800c29c <free+0xc>)
 800c292:	4601      	mov	r1, r0
 800c294:	6818      	ldr	r0, [r3, #0]
 800c296:	f001 bd1b 	b.w	800dcd0 <_free_r>
 800c29a:	bf00      	nop
 800c29c:	20000108 	.word	0x20000108

0800c2a0 <sbrk_aligned>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c2e0 <sbrk_aligned+0x40>)
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	6831      	ldr	r1, [r6, #0]
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	b911      	cbnz	r1, 800c2b2 <sbrk_aligned+0x12>
 800c2ac:	f000 fe54 	bl	800cf58 <_sbrk_r>
 800c2b0:	6030      	str	r0, [r6, #0]
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 fe4f 	bl	800cf58 <_sbrk_r>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	d103      	bne.n	800c2c6 <sbrk_aligned+0x26>
 800c2be:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	bd70      	pop	{r4, r5, r6, pc}
 800c2c6:	1cc4      	adds	r4, r0, #3
 800c2c8:	f024 0403 	bic.w	r4, r4, #3
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d0f8      	beq.n	800c2c2 <sbrk_aligned+0x22>
 800c2d0:	1a21      	subs	r1, r4, r0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f000 fe40 	bl	800cf58 <_sbrk_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d1f2      	bne.n	800c2c2 <sbrk_aligned+0x22>
 800c2dc:	e7ef      	b.n	800c2be <sbrk_aligned+0x1e>
 800c2de:	bf00      	nop
 800c2e0:	200020c4 	.word	0x200020c4

0800c2e4 <_malloc_r>:
 800c2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e8:	1ccd      	adds	r5, r1, #3
 800c2ea:	f025 0503 	bic.w	r5, r5, #3
 800c2ee:	3508      	adds	r5, #8
 800c2f0:	2d0c      	cmp	r5, #12
 800c2f2:	bf38      	it	cc
 800c2f4:	250c      	movcc	r5, #12
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	db01      	blt.n	800c300 <_malloc_r+0x1c>
 800c2fc:	42a9      	cmp	r1, r5
 800c2fe:	d904      	bls.n	800c30a <_malloc_r+0x26>
 800c300:	230c      	movs	r3, #12
 800c302:	6033      	str	r3, [r6, #0]
 800c304:	2000      	movs	r0, #0
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3e0 <_malloc_r+0xfc>
 800c30e:	f000 f869 	bl	800c3e4 <__malloc_lock>
 800c312:	f8d8 3000 	ldr.w	r3, [r8]
 800c316:	461c      	mov	r4, r3
 800c318:	bb44      	cbnz	r4, 800c36c <_malloc_r+0x88>
 800c31a:	4629      	mov	r1, r5
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff ffbf 	bl	800c2a0 <sbrk_aligned>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	4604      	mov	r4, r0
 800c326:	d158      	bne.n	800c3da <_malloc_r+0xf6>
 800c328:	f8d8 4000 	ldr.w	r4, [r8]
 800c32c:	4627      	mov	r7, r4
 800c32e:	2f00      	cmp	r7, #0
 800c330:	d143      	bne.n	800c3ba <_malloc_r+0xd6>
 800c332:	2c00      	cmp	r4, #0
 800c334:	d04b      	beq.n	800c3ce <_malloc_r+0xea>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	4639      	mov	r1, r7
 800c33a:	4630      	mov	r0, r6
 800c33c:	eb04 0903 	add.w	r9, r4, r3
 800c340:	f000 fe0a 	bl	800cf58 <_sbrk_r>
 800c344:	4581      	cmp	r9, r0
 800c346:	d142      	bne.n	800c3ce <_malloc_r+0xea>
 800c348:	6821      	ldr	r1, [r4, #0]
 800c34a:	1a6d      	subs	r5, r5, r1
 800c34c:	4629      	mov	r1, r5
 800c34e:	4630      	mov	r0, r6
 800c350:	f7ff ffa6 	bl	800c2a0 <sbrk_aligned>
 800c354:	3001      	adds	r0, #1
 800c356:	d03a      	beq.n	800c3ce <_malloc_r+0xea>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	442b      	add	r3, r5
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	f8d8 3000 	ldr.w	r3, [r8]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	bb62      	cbnz	r2, 800c3c0 <_malloc_r+0xdc>
 800c366:	f8c8 7000 	str.w	r7, [r8]
 800c36a:	e00f      	b.n	800c38c <_malloc_r+0xa8>
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	1b52      	subs	r2, r2, r5
 800c370:	d420      	bmi.n	800c3b4 <_malloc_r+0xd0>
 800c372:	2a0b      	cmp	r2, #11
 800c374:	d917      	bls.n	800c3a6 <_malloc_r+0xc2>
 800c376:	1961      	adds	r1, r4, r5
 800c378:	42a3      	cmp	r3, r4
 800c37a:	6025      	str	r5, [r4, #0]
 800c37c:	bf18      	it	ne
 800c37e:	6059      	strne	r1, [r3, #4]
 800c380:	6863      	ldr	r3, [r4, #4]
 800c382:	bf08      	it	eq
 800c384:	f8c8 1000 	streq.w	r1, [r8]
 800c388:	5162      	str	r2, [r4, r5]
 800c38a:	604b      	str	r3, [r1, #4]
 800c38c:	4630      	mov	r0, r6
 800c38e:	f000 f82f 	bl	800c3f0 <__malloc_unlock>
 800c392:	f104 000b 	add.w	r0, r4, #11
 800c396:	1d23      	adds	r3, r4, #4
 800c398:	f020 0007 	bic.w	r0, r0, #7
 800c39c:	1ac2      	subs	r2, r0, r3
 800c39e:	bf1c      	itt	ne
 800c3a0:	1a1b      	subne	r3, r3, r0
 800c3a2:	50a3      	strne	r3, [r4, r2]
 800c3a4:	e7af      	b.n	800c306 <_malloc_r+0x22>
 800c3a6:	6862      	ldr	r2, [r4, #4]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	bf0c      	ite	eq
 800c3ac:	f8c8 2000 	streq.w	r2, [r8]
 800c3b0:	605a      	strne	r2, [r3, #4]
 800c3b2:	e7eb      	b.n	800c38c <_malloc_r+0xa8>
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	6864      	ldr	r4, [r4, #4]
 800c3b8:	e7ae      	b.n	800c318 <_malloc_r+0x34>
 800c3ba:	463c      	mov	r4, r7
 800c3bc:	687f      	ldr	r7, [r7, #4]
 800c3be:	e7b6      	b.n	800c32e <_malloc_r+0x4a>
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d1fb      	bne.n	800c3c0 <_malloc_r+0xdc>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	6053      	str	r3, [r2, #4]
 800c3cc:	e7de      	b.n	800c38c <_malloc_r+0xa8>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	6033      	str	r3, [r6, #0]
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 f80c 	bl	800c3f0 <__malloc_unlock>
 800c3d8:	e794      	b.n	800c304 <_malloc_r+0x20>
 800c3da:	6005      	str	r5, [r0, #0]
 800c3dc:	e7d6      	b.n	800c38c <_malloc_r+0xa8>
 800c3de:	bf00      	nop
 800c3e0:	200020c8 	.word	0x200020c8

0800c3e4 <__malloc_lock>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	@ (800c3ec <__malloc_lock+0x8>)
 800c3e6:	f000 be04 	b.w	800cff2 <__retarget_lock_acquire_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	2000220c 	.word	0x2000220c

0800c3f0 <__malloc_unlock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	@ (800c3f8 <__malloc_unlock+0x8>)
 800c3f2:	f000 bdff 	b.w	800cff4 <__retarget_lock_release_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	2000220c 	.word	0x2000220c

0800c3fc <__cvt>:
 800c3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	ec57 6b10 	vmov	r6, r7, d0
 800c404:	2f00      	cmp	r7, #0
 800c406:	460c      	mov	r4, r1
 800c408:	4619      	mov	r1, r3
 800c40a:	463b      	mov	r3, r7
 800c40c:	bfbb      	ittet	lt
 800c40e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c412:	461f      	movlt	r7, r3
 800c414:	2300      	movge	r3, #0
 800c416:	232d      	movlt	r3, #45	@ 0x2d
 800c418:	700b      	strb	r3, [r1, #0]
 800c41a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c41c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c420:	4691      	mov	r9, r2
 800c422:	f023 0820 	bic.w	r8, r3, #32
 800c426:	bfbc      	itt	lt
 800c428:	4632      	movlt	r2, r6
 800c42a:	4616      	movlt	r6, r2
 800c42c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c430:	d005      	beq.n	800c43e <__cvt+0x42>
 800c432:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c436:	d100      	bne.n	800c43a <__cvt+0x3e>
 800c438:	3401      	adds	r4, #1
 800c43a:	2102      	movs	r1, #2
 800c43c:	e000      	b.n	800c440 <__cvt+0x44>
 800c43e:	2103      	movs	r1, #3
 800c440:	ab03      	add	r3, sp, #12
 800c442:	9301      	str	r3, [sp, #4]
 800c444:	ab02      	add	r3, sp, #8
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	ec47 6b10 	vmov	d0, r6, r7
 800c44c:	4653      	mov	r3, sl
 800c44e:	4622      	mov	r2, r4
 800c450:	f000 fe6e 	bl	800d130 <_dtoa_r>
 800c454:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c458:	4605      	mov	r5, r0
 800c45a:	d119      	bne.n	800c490 <__cvt+0x94>
 800c45c:	f019 0f01 	tst.w	r9, #1
 800c460:	d00e      	beq.n	800c480 <__cvt+0x84>
 800c462:	eb00 0904 	add.w	r9, r0, r4
 800c466:	2200      	movs	r2, #0
 800c468:	2300      	movs	r3, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f4 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c472:	b108      	cbz	r0, 800c478 <__cvt+0x7c>
 800c474:	f8cd 900c 	str.w	r9, [sp, #12]
 800c478:	2230      	movs	r2, #48	@ 0x30
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	454b      	cmp	r3, r9
 800c47e:	d31e      	bcc.n	800c4be <__cvt+0xc2>
 800c480:	9b03      	ldr	r3, [sp, #12]
 800c482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c484:	1b5b      	subs	r3, r3, r5
 800c486:	4628      	mov	r0, r5
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	b004      	add	sp, #16
 800c48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c490:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c494:	eb00 0904 	add.w	r9, r0, r4
 800c498:	d1e5      	bne.n	800c466 <__cvt+0x6a>
 800c49a:	7803      	ldrb	r3, [r0, #0]
 800c49c:	2b30      	cmp	r3, #48	@ 0x30
 800c49e:	d10a      	bne.n	800c4b6 <__cvt+0xba>
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	f7f4 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4ac:	b918      	cbnz	r0, 800c4b6 <__cvt+0xba>
 800c4ae:	f1c4 0401 	rsb	r4, r4, #1
 800c4b2:	f8ca 4000 	str.w	r4, [sl]
 800c4b6:	f8da 3000 	ldr.w	r3, [sl]
 800c4ba:	4499      	add	r9, r3
 800c4bc:	e7d3      	b.n	800c466 <__cvt+0x6a>
 800c4be:	1c59      	adds	r1, r3, #1
 800c4c0:	9103      	str	r1, [sp, #12]
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e7d9      	b.n	800c47a <__cvt+0x7e>

0800c4c6 <__exponent>:
 800c4c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4c8:	2900      	cmp	r1, #0
 800c4ca:	bfba      	itte	lt
 800c4cc:	4249      	neglt	r1, r1
 800c4ce:	232d      	movlt	r3, #45	@ 0x2d
 800c4d0:	232b      	movge	r3, #43	@ 0x2b
 800c4d2:	2909      	cmp	r1, #9
 800c4d4:	7002      	strb	r2, [r0, #0]
 800c4d6:	7043      	strb	r3, [r0, #1]
 800c4d8:	dd29      	ble.n	800c52e <__exponent+0x68>
 800c4da:	f10d 0307 	add.w	r3, sp, #7
 800c4de:	461d      	mov	r5, r3
 800c4e0:	270a      	movs	r7, #10
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c4e8:	fb07 1416 	mls	r4, r7, r6, r1
 800c4ec:	3430      	adds	r4, #48	@ 0x30
 800c4ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	2c63      	cmp	r4, #99	@ 0x63
 800c4f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	dcf1      	bgt.n	800c4e2 <__exponent+0x1c>
 800c4fe:	3130      	adds	r1, #48	@ 0x30
 800c500:	1e94      	subs	r4, r2, #2
 800c502:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c506:	1c41      	adds	r1, r0, #1
 800c508:	4623      	mov	r3, r4
 800c50a:	42ab      	cmp	r3, r5
 800c50c:	d30a      	bcc.n	800c524 <__exponent+0x5e>
 800c50e:	f10d 0309 	add.w	r3, sp, #9
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	42ac      	cmp	r4, r5
 800c516:	bf88      	it	hi
 800c518:	2300      	movhi	r3, #0
 800c51a:	3302      	adds	r3, #2
 800c51c:	4403      	add	r3, r0
 800c51e:	1a18      	subs	r0, r3, r0
 800c520:	b003      	add	sp, #12
 800c522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c524:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c528:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c52c:	e7ed      	b.n	800c50a <__exponent+0x44>
 800c52e:	2330      	movs	r3, #48	@ 0x30
 800c530:	3130      	adds	r1, #48	@ 0x30
 800c532:	7083      	strb	r3, [r0, #2]
 800c534:	70c1      	strb	r1, [r0, #3]
 800c536:	1d03      	adds	r3, r0, #4
 800c538:	e7f1      	b.n	800c51e <__exponent+0x58>
	...

0800c53c <_printf_float>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	b08d      	sub	sp, #52	@ 0x34
 800c542:	460c      	mov	r4, r1
 800c544:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c548:	4616      	mov	r6, r2
 800c54a:	461f      	mov	r7, r3
 800c54c:	4605      	mov	r5, r0
 800c54e:	f000 fccb 	bl	800cee8 <_localeconv_r>
 800c552:	6803      	ldr	r3, [r0, #0]
 800c554:	9304      	str	r3, [sp, #16]
 800c556:	4618      	mov	r0, r3
 800c558:	f7f3 fe8a 	bl	8000270 <strlen>
 800c55c:	2300      	movs	r3, #0
 800c55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c560:	f8d8 3000 	ldr.w	r3, [r8]
 800c564:	9005      	str	r0, [sp, #20]
 800c566:	3307      	adds	r3, #7
 800c568:	f023 0307 	bic.w	r3, r3, #7
 800c56c:	f103 0208 	add.w	r2, r3, #8
 800c570:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c574:	f8d4 b000 	ldr.w	fp, [r4]
 800c578:	f8c8 2000 	str.w	r2, [r8]
 800c57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c580:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c584:	9307      	str	r3, [sp, #28]
 800c586:	f8cd 8018 	str.w	r8, [sp, #24]
 800c58a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c58e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c592:	4b9c      	ldr	r3, [pc, #624]	@ (800c804 <_printf_float+0x2c8>)
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	f7f4 fac8 	bl	8000b2c <__aeabi_dcmpun>
 800c59c:	bb70      	cbnz	r0, 800c5fc <_printf_float+0xc0>
 800c59e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a2:	4b98      	ldr	r3, [pc, #608]	@ (800c804 <_printf_float+0x2c8>)
 800c5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a8:	f7f4 faa2 	bl	8000af0 <__aeabi_dcmple>
 800c5ac:	bb30      	cbnz	r0, 800c5fc <_printf_float+0xc0>
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	f7f4 fa91 	bl	8000adc <__aeabi_dcmplt>
 800c5ba:	b110      	cbz	r0, 800c5c2 <_printf_float+0x86>
 800c5bc:	232d      	movs	r3, #45	@ 0x2d
 800c5be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5c2:	4a91      	ldr	r2, [pc, #580]	@ (800c808 <_printf_float+0x2cc>)
 800c5c4:	4b91      	ldr	r3, [pc, #580]	@ (800c80c <_printf_float+0x2d0>)
 800c5c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5ca:	bf8c      	ite	hi
 800c5cc:	4690      	movhi	r8, r2
 800c5ce:	4698      	movls	r8, r3
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	6123      	str	r3, [r4, #16]
 800c5d4:	f02b 0304 	bic.w	r3, fp, #4
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	f04f 0900 	mov.w	r9, #0
 800c5de:	9700      	str	r7, [sp, #0]
 800c5e0:	4633      	mov	r3, r6
 800c5e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f000 f9d2 	bl	800c990 <_printf_common>
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	f040 808d 	bne.w	800c70c <_printf_float+0x1d0>
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	b00d      	add	sp, #52	@ 0x34
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	464b      	mov	r3, r9
 800c600:	4640      	mov	r0, r8
 800c602:	4649      	mov	r1, r9
 800c604:	f7f4 fa92 	bl	8000b2c <__aeabi_dcmpun>
 800c608:	b140      	cbz	r0, 800c61c <_printf_float+0xe0>
 800c60a:	464b      	mov	r3, r9
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfbc      	itt	lt
 800c610:	232d      	movlt	r3, #45	@ 0x2d
 800c612:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c616:	4a7e      	ldr	r2, [pc, #504]	@ (800c810 <_printf_float+0x2d4>)
 800c618:	4b7e      	ldr	r3, [pc, #504]	@ (800c814 <_printf_float+0x2d8>)
 800c61a:	e7d4      	b.n	800c5c6 <_printf_float+0x8a>
 800c61c:	6863      	ldr	r3, [r4, #4]
 800c61e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c622:	9206      	str	r2, [sp, #24]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	d13b      	bne.n	800c6a0 <_printf_float+0x164>
 800c628:	2306      	movs	r3, #6
 800c62a:	6063      	str	r3, [r4, #4]
 800c62c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c630:	2300      	movs	r3, #0
 800c632:	6022      	str	r2, [r4, #0]
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	ab0a      	add	r3, sp, #40	@ 0x28
 800c638:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c63c:	ab09      	add	r3, sp, #36	@ 0x24
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	6861      	ldr	r1, [r4, #4]
 800c642:	ec49 8b10 	vmov	d0, r8, r9
 800c646:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7ff fed6 	bl	800c3fc <__cvt>
 800c650:	9b06      	ldr	r3, [sp, #24]
 800c652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c654:	2b47      	cmp	r3, #71	@ 0x47
 800c656:	4680      	mov	r8, r0
 800c658:	d129      	bne.n	800c6ae <_printf_float+0x172>
 800c65a:	1cc8      	adds	r0, r1, #3
 800c65c:	db02      	blt.n	800c664 <_printf_float+0x128>
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	4299      	cmp	r1, r3
 800c662:	dd41      	ble.n	800c6e8 <_printf_float+0x1ac>
 800c664:	f1aa 0a02 	sub.w	sl, sl, #2
 800c668:	fa5f fa8a 	uxtb.w	sl, sl
 800c66c:	3901      	subs	r1, #1
 800c66e:	4652      	mov	r2, sl
 800c670:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c674:	9109      	str	r1, [sp, #36]	@ 0x24
 800c676:	f7ff ff26 	bl	800c4c6 <__exponent>
 800c67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c67c:	1813      	adds	r3, r2, r0
 800c67e:	2a01      	cmp	r2, #1
 800c680:	4681      	mov	r9, r0
 800c682:	6123      	str	r3, [r4, #16]
 800c684:	dc02      	bgt.n	800c68c <_printf_float+0x150>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	07d2      	lsls	r2, r2, #31
 800c68a:	d501      	bpl.n	800c690 <_printf_float+0x154>
 800c68c:	3301      	adds	r3, #1
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0a2      	beq.n	800c5de <_printf_float+0xa2>
 800c698:	232d      	movs	r3, #45	@ 0x2d
 800c69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c69e:	e79e      	b.n	800c5de <_printf_float+0xa2>
 800c6a0:	9a06      	ldr	r2, [sp, #24]
 800c6a2:	2a47      	cmp	r2, #71	@ 0x47
 800c6a4:	d1c2      	bne.n	800c62c <_printf_float+0xf0>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1c0      	bne.n	800c62c <_printf_float+0xf0>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e7bd      	b.n	800c62a <_printf_float+0xee>
 800c6ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6b2:	d9db      	bls.n	800c66c <_printf_float+0x130>
 800c6b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c6b8:	d118      	bne.n	800c6ec <_printf_float+0x1b0>
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	dd0b      	ble.n	800c6d8 <_printf_float+0x19c>
 800c6c0:	6121      	str	r1, [r4, #16]
 800c6c2:	b913      	cbnz	r3, 800c6ca <_printf_float+0x18e>
 800c6c4:	6822      	ldr	r2, [r4, #0]
 800c6c6:	07d0      	lsls	r0, r2, #31
 800c6c8:	d502      	bpl.n	800c6d0 <_printf_float+0x194>
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	440b      	add	r3, r1
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c6d2:	f04f 0900 	mov.w	r9, #0
 800c6d6:	e7db      	b.n	800c690 <_printf_float+0x154>
 800c6d8:	b913      	cbnz	r3, 800c6e0 <_printf_float+0x1a4>
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	07d2      	lsls	r2, r2, #31
 800c6de:	d501      	bpl.n	800c6e4 <_printf_float+0x1a8>
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	e7f4      	b.n	800c6ce <_printf_float+0x192>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e7f2      	b.n	800c6ce <_printf_float+0x192>
 800c6e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ee:	4299      	cmp	r1, r3
 800c6f0:	db05      	blt.n	800c6fe <_printf_float+0x1c2>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	6121      	str	r1, [r4, #16]
 800c6f6:	07d8      	lsls	r0, r3, #31
 800c6f8:	d5ea      	bpl.n	800c6d0 <_printf_float+0x194>
 800c6fa:	1c4b      	adds	r3, r1, #1
 800c6fc:	e7e7      	b.n	800c6ce <_printf_float+0x192>
 800c6fe:	2900      	cmp	r1, #0
 800c700:	bfd4      	ite	le
 800c702:	f1c1 0202 	rsble	r2, r1, #2
 800c706:	2201      	movgt	r2, #1
 800c708:	4413      	add	r3, r2
 800c70a:	e7e0      	b.n	800c6ce <_printf_float+0x192>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	055a      	lsls	r2, r3, #21
 800c710:	d407      	bmi.n	800c722 <_printf_float+0x1e6>
 800c712:	6923      	ldr	r3, [r4, #16]
 800c714:	4642      	mov	r2, r8
 800c716:	4631      	mov	r1, r6
 800c718:	4628      	mov	r0, r5
 800c71a:	47b8      	blx	r7
 800c71c:	3001      	adds	r0, #1
 800c71e:	d12b      	bne.n	800c778 <_printf_float+0x23c>
 800c720:	e767      	b.n	800c5f2 <_printf_float+0xb6>
 800c722:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c726:	f240 80dd 	bls.w	800c8e4 <_printf_float+0x3a8>
 800c72a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c72e:	2200      	movs	r2, #0
 800c730:	2300      	movs	r3, #0
 800c732:	f7f4 f9c9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c736:	2800      	cmp	r0, #0
 800c738:	d033      	beq.n	800c7a2 <_printf_float+0x266>
 800c73a:	4a37      	ldr	r2, [pc, #220]	@ (800c818 <_printf_float+0x2dc>)
 800c73c:	2301      	movs	r3, #1
 800c73e:	4631      	mov	r1, r6
 800c740:	4628      	mov	r0, r5
 800c742:	47b8      	blx	r7
 800c744:	3001      	adds	r0, #1
 800c746:	f43f af54 	beq.w	800c5f2 <_printf_float+0xb6>
 800c74a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c74e:	4543      	cmp	r3, r8
 800c750:	db02      	blt.n	800c758 <_printf_float+0x21c>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	07d8      	lsls	r0, r3, #31
 800c756:	d50f      	bpl.n	800c778 <_printf_float+0x23c>
 800c758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	47b8      	blx	r7
 800c762:	3001      	adds	r0, #1
 800c764:	f43f af45 	beq.w	800c5f2 <_printf_float+0xb6>
 800c768:	f04f 0900 	mov.w	r9, #0
 800c76c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c770:	f104 0a1a 	add.w	sl, r4, #26
 800c774:	45c8      	cmp	r8, r9
 800c776:	dc09      	bgt.n	800c78c <_printf_float+0x250>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	079b      	lsls	r3, r3, #30
 800c77c:	f100 8103 	bmi.w	800c986 <_printf_float+0x44a>
 800c780:	68e0      	ldr	r0, [r4, #12]
 800c782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c784:	4298      	cmp	r0, r3
 800c786:	bfb8      	it	lt
 800c788:	4618      	movlt	r0, r3
 800c78a:	e734      	b.n	800c5f6 <_printf_float+0xba>
 800c78c:	2301      	movs	r3, #1
 800c78e:	4652      	mov	r2, sl
 800c790:	4631      	mov	r1, r6
 800c792:	4628      	mov	r0, r5
 800c794:	47b8      	blx	r7
 800c796:	3001      	adds	r0, #1
 800c798:	f43f af2b 	beq.w	800c5f2 <_printf_float+0xb6>
 800c79c:	f109 0901 	add.w	r9, r9, #1
 800c7a0:	e7e8      	b.n	800c774 <_printf_float+0x238>
 800c7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dc39      	bgt.n	800c81c <_printf_float+0x2e0>
 800c7a8:	4a1b      	ldr	r2, [pc, #108]	@ (800c818 <_printf_float+0x2dc>)
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	47b8      	blx	r7
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	f43f af1d 	beq.w	800c5f2 <_printf_float+0xb6>
 800c7b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c7bc:	ea59 0303 	orrs.w	r3, r9, r3
 800c7c0:	d102      	bne.n	800c7c8 <_printf_float+0x28c>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	07d9      	lsls	r1, r3, #31
 800c7c6:	d5d7      	bpl.n	800c778 <_printf_float+0x23c>
 800c7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f af0d 	beq.w	800c5f2 <_printf_float+0xb6>
 800c7d8:	f04f 0a00 	mov.w	sl, #0
 800c7dc:	f104 0b1a 	add.w	fp, r4, #26
 800c7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e2:	425b      	negs	r3, r3
 800c7e4:	4553      	cmp	r3, sl
 800c7e6:	dc01      	bgt.n	800c7ec <_printf_float+0x2b0>
 800c7e8:	464b      	mov	r3, r9
 800c7ea:	e793      	b.n	800c714 <_printf_float+0x1d8>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	465a      	mov	r2, fp
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47b8      	blx	r7
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	f43f aefb 	beq.w	800c5f2 <_printf_float+0xb6>
 800c7fc:	f10a 0a01 	add.w	sl, sl, #1
 800c800:	e7ee      	b.n	800c7e0 <_printf_float+0x2a4>
 800c802:	bf00      	nop
 800c804:	7fefffff 	.word	0x7fefffff
 800c808:	0800ec6c 	.word	0x0800ec6c
 800c80c:	0800ec68 	.word	0x0800ec68
 800c810:	0800ec74 	.word	0x0800ec74
 800c814:	0800ec70 	.word	0x0800ec70
 800c818:	0800ec78 	.word	0x0800ec78
 800c81c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c81e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c822:	4553      	cmp	r3, sl
 800c824:	bfa8      	it	ge
 800c826:	4653      	movge	r3, sl
 800c828:	2b00      	cmp	r3, #0
 800c82a:	4699      	mov	r9, r3
 800c82c:	dc36      	bgt.n	800c89c <_printf_float+0x360>
 800c82e:	f04f 0b00 	mov.w	fp, #0
 800c832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c836:	f104 021a 	add.w	r2, r4, #26
 800c83a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c83c:	9306      	str	r3, [sp, #24]
 800c83e:	eba3 0309 	sub.w	r3, r3, r9
 800c842:	455b      	cmp	r3, fp
 800c844:	dc31      	bgt.n	800c8aa <_printf_float+0x36e>
 800c846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c848:	459a      	cmp	sl, r3
 800c84a:	dc3a      	bgt.n	800c8c2 <_printf_float+0x386>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	07da      	lsls	r2, r3, #31
 800c850:	d437      	bmi.n	800c8c2 <_printf_float+0x386>
 800c852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c854:	ebaa 0903 	sub.w	r9, sl, r3
 800c858:	9b06      	ldr	r3, [sp, #24]
 800c85a:	ebaa 0303 	sub.w	r3, sl, r3
 800c85e:	4599      	cmp	r9, r3
 800c860:	bfa8      	it	ge
 800c862:	4699      	movge	r9, r3
 800c864:	f1b9 0f00 	cmp.w	r9, #0
 800c868:	dc33      	bgt.n	800c8d2 <_printf_float+0x396>
 800c86a:	f04f 0800 	mov.w	r8, #0
 800c86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c872:	f104 0b1a 	add.w	fp, r4, #26
 800c876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c878:	ebaa 0303 	sub.w	r3, sl, r3
 800c87c:	eba3 0309 	sub.w	r3, r3, r9
 800c880:	4543      	cmp	r3, r8
 800c882:	f77f af79 	ble.w	800c778 <_printf_float+0x23c>
 800c886:	2301      	movs	r3, #1
 800c888:	465a      	mov	r2, fp
 800c88a:	4631      	mov	r1, r6
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b8      	blx	r7
 800c890:	3001      	adds	r0, #1
 800c892:	f43f aeae 	beq.w	800c5f2 <_printf_float+0xb6>
 800c896:	f108 0801 	add.w	r8, r8, #1
 800c89a:	e7ec      	b.n	800c876 <_printf_float+0x33a>
 800c89c:	4642      	mov	r2, r8
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d1c2      	bne.n	800c82e <_printf_float+0x2f2>
 800c8a8:	e6a3      	b.n	800c5f2 <_printf_float+0xb6>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	9206      	str	r2, [sp, #24]
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	f43f ae9c 	beq.w	800c5f2 <_printf_float+0xb6>
 800c8ba:	9a06      	ldr	r2, [sp, #24]
 800c8bc:	f10b 0b01 	add.w	fp, fp, #1
 800c8c0:	e7bb      	b.n	800c83a <_printf_float+0x2fe>
 800c8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b8      	blx	r7
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d1c0      	bne.n	800c852 <_printf_float+0x316>
 800c8d0:	e68f      	b.n	800c5f2 <_printf_float+0xb6>
 800c8d2:	9a06      	ldr	r2, [sp, #24]
 800c8d4:	464b      	mov	r3, r9
 800c8d6:	4442      	add	r2, r8
 800c8d8:	4631      	mov	r1, r6
 800c8da:	4628      	mov	r0, r5
 800c8dc:	47b8      	blx	r7
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d1c3      	bne.n	800c86a <_printf_float+0x32e>
 800c8e2:	e686      	b.n	800c5f2 <_printf_float+0xb6>
 800c8e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c8e8:	f1ba 0f01 	cmp.w	sl, #1
 800c8ec:	dc01      	bgt.n	800c8f2 <_printf_float+0x3b6>
 800c8ee:	07db      	lsls	r3, r3, #31
 800c8f0:	d536      	bpl.n	800c960 <_printf_float+0x424>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	f43f ae78 	beq.w	800c5f2 <_printf_float+0xb6>
 800c902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	f43f ae70 	beq.w	800c5f2 <_printf_float+0xb6>
 800c912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c916:	2200      	movs	r2, #0
 800c918:	2300      	movs	r3, #0
 800c91a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c91e:	f7f4 f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c922:	b9c0      	cbnz	r0, 800c956 <_printf_float+0x41a>
 800c924:	4653      	mov	r3, sl
 800c926:	f108 0201 	add.w	r2, r8, #1
 800c92a:	4631      	mov	r1, r6
 800c92c:	4628      	mov	r0, r5
 800c92e:	47b8      	blx	r7
 800c930:	3001      	adds	r0, #1
 800c932:	d10c      	bne.n	800c94e <_printf_float+0x412>
 800c934:	e65d      	b.n	800c5f2 <_printf_float+0xb6>
 800c936:	2301      	movs	r3, #1
 800c938:	465a      	mov	r2, fp
 800c93a:	4631      	mov	r1, r6
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b8      	blx	r7
 800c940:	3001      	adds	r0, #1
 800c942:	f43f ae56 	beq.w	800c5f2 <_printf_float+0xb6>
 800c946:	f108 0801 	add.w	r8, r8, #1
 800c94a:	45d0      	cmp	r8, sl
 800c94c:	dbf3      	blt.n	800c936 <_printf_float+0x3fa>
 800c94e:	464b      	mov	r3, r9
 800c950:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c954:	e6df      	b.n	800c716 <_printf_float+0x1da>
 800c956:	f04f 0800 	mov.w	r8, #0
 800c95a:	f104 0b1a 	add.w	fp, r4, #26
 800c95e:	e7f4      	b.n	800c94a <_printf_float+0x40e>
 800c960:	2301      	movs	r3, #1
 800c962:	4642      	mov	r2, r8
 800c964:	e7e1      	b.n	800c92a <_printf_float+0x3ee>
 800c966:	2301      	movs	r3, #1
 800c968:	464a      	mov	r2, r9
 800c96a:	4631      	mov	r1, r6
 800c96c:	4628      	mov	r0, r5
 800c96e:	47b8      	blx	r7
 800c970:	3001      	adds	r0, #1
 800c972:	f43f ae3e 	beq.w	800c5f2 <_printf_float+0xb6>
 800c976:	f108 0801 	add.w	r8, r8, #1
 800c97a:	68e3      	ldr	r3, [r4, #12]
 800c97c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c97e:	1a5b      	subs	r3, r3, r1
 800c980:	4543      	cmp	r3, r8
 800c982:	dcf0      	bgt.n	800c966 <_printf_float+0x42a>
 800c984:	e6fc      	b.n	800c780 <_printf_float+0x244>
 800c986:	f04f 0800 	mov.w	r8, #0
 800c98a:	f104 0919 	add.w	r9, r4, #25
 800c98e:	e7f4      	b.n	800c97a <_printf_float+0x43e>

0800c990 <_printf_common>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	4616      	mov	r6, r2
 800c996:	4698      	mov	r8, r3
 800c998:	688a      	ldr	r2, [r1, #8]
 800c99a:	690b      	ldr	r3, [r1, #16]
 800c99c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	bfb8      	it	lt
 800c9a4:	4613      	movlt	r3, r2
 800c9a6:	6033      	str	r3, [r6, #0]
 800c9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	b10a      	cbz	r2, 800c9b6 <_printf_common+0x26>
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	6033      	str	r3, [r6, #0]
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	0699      	lsls	r1, r3, #26
 800c9ba:	bf42      	ittt	mi
 800c9bc:	6833      	ldrmi	r3, [r6, #0]
 800c9be:	3302      	addmi	r3, #2
 800c9c0:	6033      	strmi	r3, [r6, #0]
 800c9c2:	6825      	ldr	r5, [r4, #0]
 800c9c4:	f015 0506 	ands.w	r5, r5, #6
 800c9c8:	d106      	bne.n	800c9d8 <_printf_common+0x48>
 800c9ca:	f104 0a19 	add.w	sl, r4, #25
 800c9ce:	68e3      	ldr	r3, [r4, #12]
 800c9d0:	6832      	ldr	r2, [r6, #0]
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	42ab      	cmp	r3, r5
 800c9d6:	dc26      	bgt.n	800ca26 <_printf_common+0x96>
 800c9d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	3b00      	subs	r3, #0
 800c9e0:	bf18      	it	ne
 800c9e2:	2301      	movne	r3, #1
 800c9e4:	0692      	lsls	r2, r2, #26
 800c9e6:	d42b      	bmi.n	800ca40 <_printf_common+0xb0>
 800c9e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9ec:	4641      	mov	r1, r8
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	47c8      	blx	r9
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	d01e      	beq.n	800ca34 <_printf_common+0xa4>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	6922      	ldr	r2, [r4, #16]
 800c9fa:	f003 0306 	and.w	r3, r3, #6
 800c9fe:	2b04      	cmp	r3, #4
 800ca00:	bf02      	ittt	eq
 800ca02:	68e5      	ldreq	r5, [r4, #12]
 800ca04:	6833      	ldreq	r3, [r6, #0]
 800ca06:	1aed      	subeq	r5, r5, r3
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	bf0c      	ite	eq
 800ca0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca10:	2500      	movne	r5, #0
 800ca12:	4293      	cmp	r3, r2
 800ca14:	bfc4      	itt	gt
 800ca16:	1a9b      	subgt	r3, r3, r2
 800ca18:	18ed      	addgt	r5, r5, r3
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	341a      	adds	r4, #26
 800ca1e:	42b5      	cmp	r5, r6
 800ca20:	d11a      	bne.n	800ca58 <_printf_common+0xc8>
 800ca22:	2000      	movs	r0, #0
 800ca24:	e008      	b.n	800ca38 <_printf_common+0xa8>
 800ca26:	2301      	movs	r3, #1
 800ca28:	4652      	mov	r2, sl
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	47c8      	blx	r9
 800ca30:	3001      	adds	r0, #1
 800ca32:	d103      	bne.n	800ca3c <_printf_common+0xac>
 800ca34:	f04f 30ff 	mov.w	r0, #4294967295
 800ca38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca3c:	3501      	adds	r5, #1
 800ca3e:	e7c6      	b.n	800c9ce <_printf_common+0x3e>
 800ca40:	18e1      	adds	r1, r4, r3
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	2030      	movs	r0, #48	@ 0x30
 800ca46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca4a:	4422      	add	r2, r4
 800ca4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca54:	3302      	adds	r3, #2
 800ca56:	e7c7      	b.n	800c9e8 <_printf_common+0x58>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	4641      	mov	r1, r8
 800ca5e:	4638      	mov	r0, r7
 800ca60:	47c8      	blx	r9
 800ca62:	3001      	adds	r0, #1
 800ca64:	d0e6      	beq.n	800ca34 <_printf_common+0xa4>
 800ca66:	3601      	adds	r6, #1
 800ca68:	e7d9      	b.n	800ca1e <_printf_common+0x8e>
	...

0800ca6c <_printf_i>:
 800ca6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	7e0f      	ldrb	r7, [r1, #24]
 800ca72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca74:	2f78      	cmp	r7, #120	@ 0x78
 800ca76:	4691      	mov	r9, r2
 800ca78:	4680      	mov	r8, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	469a      	mov	sl, r3
 800ca7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca82:	d807      	bhi.n	800ca94 <_printf_i+0x28>
 800ca84:	2f62      	cmp	r7, #98	@ 0x62
 800ca86:	d80a      	bhi.n	800ca9e <_printf_i+0x32>
 800ca88:	2f00      	cmp	r7, #0
 800ca8a:	f000 80d1 	beq.w	800cc30 <_printf_i+0x1c4>
 800ca8e:	2f58      	cmp	r7, #88	@ 0x58
 800ca90:	f000 80b8 	beq.w	800cc04 <_printf_i+0x198>
 800ca94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca9c:	e03a      	b.n	800cb14 <_printf_i+0xa8>
 800ca9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800caa2:	2b15      	cmp	r3, #21
 800caa4:	d8f6      	bhi.n	800ca94 <_printf_i+0x28>
 800caa6:	a101      	add	r1, pc, #4	@ (adr r1, 800caac <_printf_i+0x40>)
 800caa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caac:	0800cb05 	.word	0x0800cb05
 800cab0:	0800cb19 	.word	0x0800cb19
 800cab4:	0800ca95 	.word	0x0800ca95
 800cab8:	0800ca95 	.word	0x0800ca95
 800cabc:	0800ca95 	.word	0x0800ca95
 800cac0:	0800ca95 	.word	0x0800ca95
 800cac4:	0800cb19 	.word	0x0800cb19
 800cac8:	0800ca95 	.word	0x0800ca95
 800cacc:	0800ca95 	.word	0x0800ca95
 800cad0:	0800ca95 	.word	0x0800ca95
 800cad4:	0800ca95 	.word	0x0800ca95
 800cad8:	0800cc17 	.word	0x0800cc17
 800cadc:	0800cb43 	.word	0x0800cb43
 800cae0:	0800cbd1 	.word	0x0800cbd1
 800cae4:	0800ca95 	.word	0x0800ca95
 800cae8:	0800ca95 	.word	0x0800ca95
 800caec:	0800cc39 	.word	0x0800cc39
 800caf0:	0800ca95 	.word	0x0800ca95
 800caf4:	0800cb43 	.word	0x0800cb43
 800caf8:	0800ca95 	.word	0x0800ca95
 800cafc:	0800ca95 	.word	0x0800ca95
 800cb00:	0800cbd9 	.word	0x0800cbd9
 800cb04:	6833      	ldr	r3, [r6, #0]
 800cb06:	1d1a      	adds	r2, r3, #4
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6032      	str	r2, [r6, #0]
 800cb0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb14:	2301      	movs	r3, #1
 800cb16:	e09c      	b.n	800cc52 <_printf_i+0x1e6>
 800cb18:	6833      	ldr	r3, [r6, #0]
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	1d19      	adds	r1, r3, #4
 800cb1e:	6031      	str	r1, [r6, #0]
 800cb20:	0606      	lsls	r6, r0, #24
 800cb22:	d501      	bpl.n	800cb28 <_printf_i+0xbc>
 800cb24:	681d      	ldr	r5, [r3, #0]
 800cb26:	e003      	b.n	800cb30 <_printf_i+0xc4>
 800cb28:	0645      	lsls	r5, r0, #25
 800cb2a:	d5fb      	bpl.n	800cb24 <_printf_i+0xb8>
 800cb2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb30:	2d00      	cmp	r5, #0
 800cb32:	da03      	bge.n	800cb3c <_printf_i+0xd0>
 800cb34:	232d      	movs	r3, #45	@ 0x2d
 800cb36:	426d      	negs	r5, r5
 800cb38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb3c:	4858      	ldr	r0, [pc, #352]	@ (800cca0 <_printf_i+0x234>)
 800cb3e:	230a      	movs	r3, #10
 800cb40:	e011      	b.n	800cb66 <_printf_i+0xfa>
 800cb42:	6821      	ldr	r1, [r4, #0]
 800cb44:	6833      	ldr	r3, [r6, #0]
 800cb46:	0608      	lsls	r0, r1, #24
 800cb48:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb4c:	d402      	bmi.n	800cb54 <_printf_i+0xe8>
 800cb4e:	0649      	lsls	r1, r1, #25
 800cb50:	bf48      	it	mi
 800cb52:	b2ad      	uxthmi	r5, r5
 800cb54:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb56:	4852      	ldr	r0, [pc, #328]	@ (800cca0 <_printf_i+0x234>)
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	bf14      	ite	ne
 800cb5c:	230a      	movne	r3, #10
 800cb5e:	2308      	moveq	r3, #8
 800cb60:	2100      	movs	r1, #0
 800cb62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb66:	6866      	ldr	r6, [r4, #4]
 800cb68:	60a6      	str	r6, [r4, #8]
 800cb6a:	2e00      	cmp	r6, #0
 800cb6c:	db05      	blt.n	800cb7a <_printf_i+0x10e>
 800cb6e:	6821      	ldr	r1, [r4, #0]
 800cb70:	432e      	orrs	r6, r5
 800cb72:	f021 0104 	bic.w	r1, r1, #4
 800cb76:	6021      	str	r1, [r4, #0]
 800cb78:	d04b      	beq.n	800cc12 <_printf_i+0x1a6>
 800cb7a:	4616      	mov	r6, r2
 800cb7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb80:	fb03 5711 	mls	r7, r3, r1, r5
 800cb84:	5dc7      	ldrb	r7, [r0, r7]
 800cb86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb8a:	462f      	mov	r7, r5
 800cb8c:	42bb      	cmp	r3, r7
 800cb8e:	460d      	mov	r5, r1
 800cb90:	d9f4      	bls.n	800cb7c <_printf_i+0x110>
 800cb92:	2b08      	cmp	r3, #8
 800cb94:	d10b      	bne.n	800cbae <_printf_i+0x142>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	07df      	lsls	r7, r3, #31
 800cb9a:	d508      	bpl.n	800cbae <_printf_i+0x142>
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	6861      	ldr	r1, [r4, #4]
 800cba0:	4299      	cmp	r1, r3
 800cba2:	bfde      	ittt	le
 800cba4:	2330      	movle	r3, #48	@ 0x30
 800cba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbae:	1b92      	subs	r2, r2, r6
 800cbb0:	6122      	str	r2, [r4, #16]
 800cbb2:	f8cd a000 	str.w	sl, [sp]
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	aa03      	add	r2, sp, #12
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4640      	mov	r0, r8
 800cbbe:	f7ff fee7 	bl	800c990 <_printf_common>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d14a      	bne.n	800cc5c <_printf_i+0x1f0>
 800cbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbca:	b004      	add	sp, #16
 800cbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	f043 0320 	orr.w	r3, r3, #32
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	4832      	ldr	r0, [pc, #200]	@ (800cca4 <_printf_i+0x238>)
 800cbda:	2778      	movs	r7, #120	@ 0x78
 800cbdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	6831      	ldr	r1, [r6, #0]
 800cbe4:	061f      	lsls	r7, r3, #24
 800cbe6:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbea:	d402      	bmi.n	800cbf2 <_printf_i+0x186>
 800cbec:	065f      	lsls	r7, r3, #25
 800cbee:	bf48      	it	mi
 800cbf0:	b2ad      	uxthmi	r5, r5
 800cbf2:	6031      	str	r1, [r6, #0]
 800cbf4:	07d9      	lsls	r1, r3, #31
 800cbf6:	bf44      	itt	mi
 800cbf8:	f043 0320 	orrmi.w	r3, r3, #32
 800cbfc:	6023      	strmi	r3, [r4, #0]
 800cbfe:	b11d      	cbz	r5, 800cc08 <_printf_i+0x19c>
 800cc00:	2310      	movs	r3, #16
 800cc02:	e7ad      	b.n	800cb60 <_printf_i+0xf4>
 800cc04:	4826      	ldr	r0, [pc, #152]	@ (800cca0 <_printf_i+0x234>)
 800cc06:	e7e9      	b.n	800cbdc <_printf_i+0x170>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	f023 0320 	bic.w	r3, r3, #32
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	e7f6      	b.n	800cc00 <_printf_i+0x194>
 800cc12:	4616      	mov	r6, r2
 800cc14:	e7bd      	b.n	800cb92 <_printf_i+0x126>
 800cc16:	6833      	ldr	r3, [r6, #0]
 800cc18:	6825      	ldr	r5, [r4, #0]
 800cc1a:	6961      	ldr	r1, [r4, #20]
 800cc1c:	1d18      	adds	r0, r3, #4
 800cc1e:	6030      	str	r0, [r6, #0]
 800cc20:	062e      	lsls	r6, r5, #24
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	d501      	bpl.n	800cc2a <_printf_i+0x1be>
 800cc26:	6019      	str	r1, [r3, #0]
 800cc28:	e002      	b.n	800cc30 <_printf_i+0x1c4>
 800cc2a:	0668      	lsls	r0, r5, #25
 800cc2c:	d5fb      	bpl.n	800cc26 <_printf_i+0x1ba>
 800cc2e:	8019      	strh	r1, [r3, #0]
 800cc30:	2300      	movs	r3, #0
 800cc32:	6123      	str	r3, [r4, #16]
 800cc34:	4616      	mov	r6, r2
 800cc36:	e7bc      	b.n	800cbb2 <_printf_i+0x146>
 800cc38:	6833      	ldr	r3, [r6, #0]
 800cc3a:	1d1a      	adds	r2, r3, #4
 800cc3c:	6032      	str	r2, [r6, #0]
 800cc3e:	681e      	ldr	r6, [r3, #0]
 800cc40:	6862      	ldr	r2, [r4, #4]
 800cc42:	2100      	movs	r1, #0
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7f3 fac3 	bl	80001d0 <memchr>
 800cc4a:	b108      	cbz	r0, 800cc50 <_printf_i+0x1e4>
 800cc4c:	1b80      	subs	r0, r0, r6
 800cc4e:	6060      	str	r0, [r4, #4]
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	6123      	str	r3, [r4, #16]
 800cc54:	2300      	movs	r3, #0
 800cc56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc5a:	e7aa      	b.n	800cbb2 <_printf_i+0x146>
 800cc5c:	6923      	ldr	r3, [r4, #16]
 800cc5e:	4632      	mov	r2, r6
 800cc60:	4649      	mov	r1, r9
 800cc62:	4640      	mov	r0, r8
 800cc64:	47d0      	blx	sl
 800cc66:	3001      	adds	r0, #1
 800cc68:	d0ad      	beq.n	800cbc6 <_printf_i+0x15a>
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	079b      	lsls	r3, r3, #30
 800cc6e:	d413      	bmi.n	800cc98 <_printf_i+0x22c>
 800cc70:	68e0      	ldr	r0, [r4, #12]
 800cc72:	9b03      	ldr	r3, [sp, #12]
 800cc74:	4298      	cmp	r0, r3
 800cc76:	bfb8      	it	lt
 800cc78:	4618      	movlt	r0, r3
 800cc7a:	e7a6      	b.n	800cbca <_printf_i+0x15e>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4632      	mov	r2, r6
 800cc80:	4649      	mov	r1, r9
 800cc82:	4640      	mov	r0, r8
 800cc84:	47d0      	blx	sl
 800cc86:	3001      	adds	r0, #1
 800cc88:	d09d      	beq.n	800cbc6 <_printf_i+0x15a>
 800cc8a:	3501      	adds	r5, #1
 800cc8c:	68e3      	ldr	r3, [r4, #12]
 800cc8e:	9903      	ldr	r1, [sp, #12]
 800cc90:	1a5b      	subs	r3, r3, r1
 800cc92:	42ab      	cmp	r3, r5
 800cc94:	dcf2      	bgt.n	800cc7c <_printf_i+0x210>
 800cc96:	e7eb      	b.n	800cc70 <_printf_i+0x204>
 800cc98:	2500      	movs	r5, #0
 800cc9a:	f104 0619 	add.w	r6, r4, #25
 800cc9e:	e7f5      	b.n	800cc8c <_printf_i+0x220>
 800cca0:	0800ec7a 	.word	0x0800ec7a
 800cca4:	0800ec8b 	.word	0x0800ec8b

0800cca8 <std>:
 800cca8:	2300      	movs	r3, #0
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	4604      	mov	r4, r0
 800ccae:	e9c0 3300 	strd	r3, r3, [r0]
 800ccb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccb6:	6083      	str	r3, [r0, #8]
 800ccb8:	8181      	strh	r1, [r0, #12]
 800ccba:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccbc:	81c2      	strh	r2, [r0, #14]
 800ccbe:	6183      	str	r3, [r0, #24]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	2208      	movs	r2, #8
 800ccc4:	305c      	adds	r0, #92	@ 0x5c
 800ccc6:	f000 f906 	bl	800ced6 <memset>
 800ccca:	4b0d      	ldr	r3, [pc, #52]	@ (800cd00 <std+0x58>)
 800cccc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccce:	4b0d      	ldr	r3, [pc, #52]	@ (800cd04 <std+0x5c>)
 800ccd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd08 <std+0x60>)
 800ccd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <std+0x64>)
 800ccd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccda:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <std+0x68>)
 800ccdc:	6224      	str	r4, [r4, #32]
 800ccde:	429c      	cmp	r4, r3
 800cce0:	d006      	beq.n	800ccf0 <std+0x48>
 800cce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cce6:	4294      	cmp	r4, r2
 800cce8:	d002      	beq.n	800ccf0 <std+0x48>
 800ccea:	33d0      	adds	r3, #208	@ 0xd0
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d105      	bne.n	800ccfc <std+0x54>
 800ccf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf8:	f000 b97a 	b.w	800cff0 <__retarget_lock_init_recursive>
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	0800ce51 	.word	0x0800ce51
 800cd04:	0800ce73 	.word	0x0800ce73
 800cd08:	0800ceab 	.word	0x0800ceab
 800cd0c:	0800cecf 	.word	0x0800cecf
 800cd10:	200020cc 	.word	0x200020cc

0800cd14 <stdio_exit_handler>:
 800cd14:	4a02      	ldr	r2, [pc, #8]	@ (800cd20 <stdio_exit_handler+0xc>)
 800cd16:	4903      	ldr	r1, [pc, #12]	@ (800cd24 <stdio_exit_handler+0x10>)
 800cd18:	4803      	ldr	r0, [pc, #12]	@ (800cd28 <stdio_exit_handler+0x14>)
 800cd1a:	f000 b87b 	b.w	800ce14 <_fwalk_sglue>
 800cd1e:	bf00      	nop
 800cd20:	200000fc 	.word	0x200000fc
 800cd24:	0800e7e5 	.word	0x0800e7e5
 800cd28:	2000010c 	.word	0x2000010c

0800cd2c <cleanup_stdio>:
 800cd2c:	6841      	ldr	r1, [r0, #4]
 800cd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd60 <cleanup_stdio+0x34>)
 800cd30:	4299      	cmp	r1, r3
 800cd32:	b510      	push	{r4, lr}
 800cd34:	4604      	mov	r4, r0
 800cd36:	d001      	beq.n	800cd3c <cleanup_stdio+0x10>
 800cd38:	f001 fd54 	bl	800e7e4 <_fflush_r>
 800cd3c:	68a1      	ldr	r1, [r4, #8]
 800cd3e:	4b09      	ldr	r3, [pc, #36]	@ (800cd64 <cleanup_stdio+0x38>)
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d002      	beq.n	800cd4a <cleanup_stdio+0x1e>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f001 fd4d 	bl	800e7e4 <_fflush_r>
 800cd4a:	68e1      	ldr	r1, [r4, #12]
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <cleanup_stdio+0x3c>)
 800cd4e:	4299      	cmp	r1, r3
 800cd50:	d004      	beq.n	800cd5c <cleanup_stdio+0x30>
 800cd52:	4620      	mov	r0, r4
 800cd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd58:	f001 bd44 	b.w	800e7e4 <_fflush_r>
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	bf00      	nop
 800cd60:	200020cc 	.word	0x200020cc
 800cd64:	20002134 	.word	0x20002134
 800cd68:	2000219c 	.word	0x2000219c

0800cd6c <global_stdio_init.part.0>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd9c <global_stdio_init.part.0+0x30>)
 800cd70:	4c0b      	ldr	r4, [pc, #44]	@ (800cda0 <global_stdio_init.part.0+0x34>)
 800cd72:	4a0c      	ldr	r2, [pc, #48]	@ (800cda4 <global_stdio_init.part.0+0x38>)
 800cd74:	601a      	str	r2, [r3, #0]
 800cd76:	4620      	mov	r0, r4
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2104      	movs	r1, #4
 800cd7c:	f7ff ff94 	bl	800cca8 <std>
 800cd80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd84:	2201      	movs	r2, #1
 800cd86:	2109      	movs	r1, #9
 800cd88:	f7ff ff8e 	bl	800cca8 <std>
 800cd8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd90:	2202      	movs	r2, #2
 800cd92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd96:	2112      	movs	r1, #18
 800cd98:	f7ff bf86 	b.w	800cca8 <std>
 800cd9c:	20002204 	.word	0x20002204
 800cda0:	200020cc 	.word	0x200020cc
 800cda4:	0800cd15 	.word	0x0800cd15

0800cda8 <__sfp_lock_acquire>:
 800cda8:	4801      	ldr	r0, [pc, #4]	@ (800cdb0 <__sfp_lock_acquire+0x8>)
 800cdaa:	f000 b922 	b.w	800cff2 <__retarget_lock_acquire_recursive>
 800cdae:	bf00      	nop
 800cdb0:	2000220d 	.word	0x2000220d

0800cdb4 <__sfp_lock_release>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	@ (800cdbc <__sfp_lock_release+0x8>)
 800cdb6:	f000 b91d 	b.w	800cff4 <__retarget_lock_release_recursive>
 800cdba:	bf00      	nop
 800cdbc:	2000220d 	.word	0x2000220d

0800cdc0 <__sinit>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	f7ff fff0 	bl	800cda8 <__sfp_lock_acquire>
 800cdc8:	6a23      	ldr	r3, [r4, #32]
 800cdca:	b11b      	cbz	r3, 800cdd4 <__sinit+0x14>
 800cdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd0:	f7ff bff0 	b.w	800cdb4 <__sfp_lock_release>
 800cdd4:	4b04      	ldr	r3, [pc, #16]	@ (800cde8 <__sinit+0x28>)
 800cdd6:	6223      	str	r3, [r4, #32]
 800cdd8:	4b04      	ldr	r3, [pc, #16]	@ (800cdec <__sinit+0x2c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f5      	bne.n	800cdcc <__sinit+0xc>
 800cde0:	f7ff ffc4 	bl	800cd6c <global_stdio_init.part.0>
 800cde4:	e7f2      	b.n	800cdcc <__sinit+0xc>
 800cde6:	bf00      	nop
 800cde8:	0800cd2d 	.word	0x0800cd2d
 800cdec:	20002204 	.word	0x20002204

0800cdf0 <fiprintf>:
 800cdf0:	b40e      	push	{r1, r2, r3}
 800cdf2:	b503      	push	{r0, r1, lr}
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	ab03      	add	r3, sp, #12
 800cdf8:	4805      	ldr	r0, [pc, #20]	@ (800ce10 <fiprintf+0x20>)
 800cdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdfe:	6800      	ldr	r0, [r0, #0]
 800ce00:	9301      	str	r3, [sp, #4]
 800ce02:	f001 fb53 	bl	800e4ac <_vfiprintf_r>
 800ce06:	b002      	add	sp, #8
 800ce08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce0c:	b003      	add	sp, #12
 800ce0e:	4770      	bx	lr
 800ce10:	20000108 	.word	0x20000108

0800ce14 <_fwalk_sglue>:
 800ce14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce18:	4607      	mov	r7, r0
 800ce1a:	4688      	mov	r8, r1
 800ce1c:	4614      	mov	r4, r2
 800ce1e:	2600      	movs	r6, #0
 800ce20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce24:	f1b9 0901 	subs.w	r9, r9, #1
 800ce28:	d505      	bpl.n	800ce36 <_fwalk_sglue+0x22>
 800ce2a:	6824      	ldr	r4, [r4, #0]
 800ce2c:	2c00      	cmp	r4, #0
 800ce2e:	d1f7      	bne.n	800ce20 <_fwalk_sglue+0xc>
 800ce30:	4630      	mov	r0, r6
 800ce32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce36:	89ab      	ldrh	r3, [r5, #12]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d907      	bls.n	800ce4c <_fwalk_sglue+0x38>
 800ce3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce40:	3301      	adds	r3, #1
 800ce42:	d003      	beq.n	800ce4c <_fwalk_sglue+0x38>
 800ce44:	4629      	mov	r1, r5
 800ce46:	4638      	mov	r0, r7
 800ce48:	47c0      	blx	r8
 800ce4a:	4306      	orrs	r6, r0
 800ce4c:	3568      	adds	r5, #104	@ 0x68
 800ce4e:	e7e9      	b.n	800ce24 <_fwalk_sglue+0x10>

0800ce50 <__sread>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce58:	f000 f86c 	bl	800cf34 <_read_r>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	bfab      	itete	ge
 800ce60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce62:	89a3      	ldrhlt	r3, [r4, #12]
 800ce64:	181b      	addge	r3, r3, r0
 800ce66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce6a:	bfac      	ite	ge
 800ce6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce6e:	81a3      	strhlt	r3, [r4, #12]
 800ce70:	bd10      	pop	{r4, pc}

0800ce72 <__swrite>:
 800ce72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce76:	461f      	mov	r7, r3
 800ce78:	898b      	ldrh	r3, [r1, #12]
 800ce7a:	05db      	lsls	r3, r3, #23
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	4616      	mov	r6, r2
 800ce82:	d505      	bpl.n	800ce90 <__swrite+0x1e>
 800ce84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce88:	2302      	movs	r3, #2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f000 f840 	bl	800cf10 <_lseek_r>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce9a:	81a3      	strh	r3, [r4, #12]
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	463b      	mov	r3, r7
 800cea0:	4628      	mov	r0, r5
 800cea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	f000 b867 	b.w	800cf78 <_write_r>

0800ceaa <__sseek>:
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	460c      	mov	r4, r1
 800ceae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb2:	f000 f82d 	bl	800cf10 <_lseek_r>
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	bf15      	itete	ne
 800cebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cec6:	81a3      	strheq	r3, [r4, #12]
 800cec8:	bf18      	it	ne
 800ceca:	81a3      	strhne	r3, [r4, #12]
 800cecc:	bd10      	pop	{r4, pc}

0800cece <__sclose>:
 800cece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced2:	f000 b80d 	b.w	800cef0 <_close_r>

0800ced6 <memset>:
 800ced6:	4402      	add	r2, r0
 800ced8:	4603      	mov	r3, r0
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d100      	bne.n	800cee0 <memset+0xa>
 800cede:	4770      	bx	lr
 800cee0:	f803 1b01 	strb.w	r1, [r3], #1
 800cee4:	e7f9      	b.n	800ceda <memset+0x4>
	...

0800cee8 <_localeconv_r>:
 800cee8:	4800      	ldr	r0, [pc, #0]	@ (800ceec <_localeconv_r+0x4>)
 800ceea:	4770      	bx	lr
 800ceec:	20000248 	.word	0x20000248

0800cef0 <_close_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4d06      	ldr	r5, [pc, #24]	@ (800cf0c <_close_r+0x1c>)
 800cef4:	2300      	movs	r3, #0
 800cef6:	4604      	mov	r4, r0
 800cef8:	4608      	mov	r0, r1
 800cefa:	602b      	str	r3, [r5, #0]
 800cefc:	f7f7 fb3c 	bl	8004578 <_close>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d102      	bne.n	800cf0a <_close_r+0x1a>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	b103      	cbz	r3, 800cf0a <_close_r+0x1a>
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	bd38      	pop	{r3, r4, r5, pc}
 800cf0c:	20002208 	.word	0x20002208

0800cf10 <_lseek_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	@ (800cf30 <_lseek_r+0x20>)
 800cf14:	4604      	mov	r4, r0
 800cf16:	4608      	mov	r0, r1
 800cf18:	4611      	mov	r1, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f7f7 fb51 	bl	80045c6 <_lseek>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d102      	bne.n	800cf2e <_lseek_r+0x1e>
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	b103      	cbz	r3, 800cf2e <_lseek_r+0x1e>
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	20002208 	.word	0x20002208

0800cf34 <_read_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4d07      	ldr	r5, [pc, #28]	@ (800cf54 <_read_r+0x20>)
 800cf38:	4604      	mov	r4, r0
 800cf3a:	4608      	mov	r0, r1
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	2200      	movs	r2, #0
 800cf40:	602a      	str	r2, [r5, #0]
 800cf42:	461a      	mov	r2, r3
 800cf44:	f7f7 fafb 	bl	800453e <_read>
 800cf48:	1c43      	adds	r3, r0, #1
 800cf4a:	d102      	bne.n	800cf52 <_read_r+0x1e>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	b103      	cbz	r3, 800cf52 <_read_r+0x1e>
 800cf50:	6023      	str	r3, [r4, #0]
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	20002208 	.word	0x20002208

0800cf58 <_sbrk_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4d06      	ldr	r5, [pc, #24]	@ (800cf74 <_sbrk_r+0x1c>)
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	f7f7 fb3c 	bl	80045e0 <_sbrk>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_sbrk_r+0x1a>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_sbrk_r+0x1a>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20002208 	.word	0x20002208

0800cf78 <_write_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d07      	ldr	r5, [pc, #28]	@ (800cf98 <_write_r+0x20>)
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	4608      	mov	r0, r1
 800cf80:	4611      	mov	r1, r2
 800cf82:	2200      	movs	r2, #0
 800cf84:	602a      	str	r2, [r5, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f7f6 f9cc 	bl	8003324 <_write>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d102      	bne.n	800cf96 <_write_r+0x1e>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	b103      	cbz	r3, 800cf96 <_write_r+0x1e>
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	20002208 	.word	0x20002208

0800cf9c <__errno>:
 800cf9c:	4b01      	ldr	r3, [pc, #4]	@ (800cfa4 <__errno+0x8>)
 800cf9e:	6818      	ldr	r0, [r3, #0]
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20000108 	.word	0x20000108

0800cfa8 <__libc_init_array>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4d0d      	ldr	r5, [pc, #52]	@ (800cfe0 <__libc_init_array+0x38>)
 800cfac:	4c0d      	ldr	r4, [pc, #52]	@ (800cfe4 <__libc_init_array+0x3c>)
 800cfae:	1b64      	subs	r4, r4, r5
 800cfb0:	10a4      	asrs	r4, r4, #2
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	42a6      	cmp	r6, r4
 800cfb6:	d109      	bne.n	800cfcc <__libc_init_array+0x24>
 800cfb8:	4d0b      	ldr	r5, [pc, #44]	@ (800cfe8 <__libc_init_array+0x40>)
 800cfba:	4c0c      	ldr	r4, [pc, #48]	@ (800cfec <__libc_init_array+0x44>)
 800cfbc:	f001 fdca 	bl	800eb54 <_init>
 800cfc0:	1b64      	subs	r4, r4, r5
 800cfc2:	10a4      	asrs	r4, r4, #2
 800cfc4:	2600      	movs	r6, #0
 800cfc6:	42a6      	cmp	r6, r4
 800cfc8:	d105      	bne.n	800cfd6 <__libc_init_array+0x2e>
 800cfca:	bd70      	pop	{r4, r5, r6, pc}
 800cfcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd0:	4798      	blx	r3
 800cfd2:	3601      	adds	r6, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__libc_init_array+0xc>
 800cfd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfda:	4798      	blx	r3
 800cfdc:	3601      	adds	r6, #1
 800cfde:	e7f2      	b.n	800cfc6 <__libc_init_array+0x1e>
 800cfe0:	0800efac 	.word	0x0800efac
 800cfe4:	0800efac 	.word	0x0800efac
 800cfe8:	0800efac 	.word	0x0800efac
 800cfec:	0800efb0 	.word	0x0800efb0

0800cff0 <__retarget_lock_init_recursive>:
 800cff0:	4770      	bx	lr

0800cff2 <__retarget_lock_acquire_recursive>:
 800cff2:	4770      	bx	lr

0800cff4 <__retarget_lock_release_recursive>:
 800cff4:	4770      	bx	lr

0800cff6 <memcpy>:
 800cff6:	440a      	add	r2, r1
 800cff8:	4291      	cmp	r1, r2
 800cffa:	f100 33ff 	add.w	r3, r0, #4294967295
 800cffe:	d100      	bne.n	800d002 <memcpy+0xc>
 800d000:	4770      	bx	lr
 800d002:	b510      	push	{r4, lr}
 800d004:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d00c:	4291      	cmp	r1, r2
 800d00e:	d1f9      	bne.n	800d004 <memcpy+0xe>
 800d010:	bd10      	pop	{r4, pc}

0800d012 <abort>:
 800d012:	b508      	push	{r3, lr}
 800d014:	2006      	movs	r0, #6
 800d016:	f001 fcc9 	bl	800e9ac <raise>
 800d01a:	2001      	movs	r0, #1
 800d01c:	f7f7 fa84 	bl	8004528 <_exit>

0800d020 <quorem>:
 800d020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	6903      	ldr	r3, [r0, #16]
 800d026:	690c      	ldr	r4, [r1, #16]
 800d028:	42a3      	cmp	r3, r4
 800d02a:	4607      	mov	r7, r0
 800d02c:	db7e      	blt.n	800d12c <quorem+0x10c>
 800d02e:	3c01      	subs	r4, #1
 800d030:	f101 0814 	add.w	r8, r1, #20
 800d034:	00a3      	lsls	r3, r4, #2
 800d036:	f100 0514 	add.w	r5, r0, #20
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d040:	9301      	str	r3, [sp, #4]
 800d042:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d04a:	3301      	adds	r3, #1
 800d04c:	429a      	cmp	r2, r3
 800d04e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d052:	fbb2 f6f3 	udiv	r6, r2, r3
 800d056:	d32e      	bcc.n	800d0b6 <quorem+0x96>
 800d058:	f04f 0a00 	mov.w	sl, #0
 800d05c:	46c4      	mov	ip, r8
 800d05e:	46ae      	mov	lr, r5
 800d060:	46d3      	mov	fp, sl
 800d062:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d066:	b298      	uxth	r0, r3
 800d068:	fb06 a000 	mla	r0, r6, r0, sl
 800d06c:	0c02      	lsrs	r2, r0, #16
 800d06e:	0c1b      	lsrs	r3, r3, #16
 800d070:	fb06 2303 	mla	r3, r6, r3, r2
 800d074:	f8de 2000 	ldr.w	r2, [lr]
 800d078:	b280      	uxth	r0, r0
 800d07a:	b292      	uxth	r2, r2
 800d07c:	1a12      	subs	r2, r2, r0
 800d07e:	445a      	add	r2, fp
 800d080:	f8de 0000 	ldr.w	r0, [lr]
 800d084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d088:	b29b      	uxth	r3, r3
 800d08a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d08e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d092:	b292      	uxth	r2, r2
 800d094:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d098:	45e1      	cmp	r9, ip
 800d09a:	f84e 2b04 	str.w	r2, [lr], #4
 800d09e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0a2:	d2de      	bcs.n	800d062 <quorem+0x42>
 800d0a4:	9b00      	ldr	r3, [sp, #0]
 800d0a6:	58eb      	ldr	r3, [r5, r3]
 800d0a8:	b92b      	cbnz	r3, 800d0b6 <quorem+0x96>
 800d0aa:	9b01      	ldr	r3, [sp, #4]
 800d0ac:	3b04      	subs	r3, #4
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	d32f      	bcc.n	800d114 <quorem+0xf4>
 800d0b4:	613c      	str	r4, [r7, #16]
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	f001 f8c6 	bl	800e248 <__mcmp>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	db25      	blt.n	800d10c <quorem+0xec>
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0c8:	f8d1 c000 	ldr.w	ip, [r1]
 800d0cc:	fa1f fe82 	uxth.w	lr, r2
 800d0d0:	fa1f f38c 	uxth.w	r3, ip
 800d0d4:	eba3 030e 	sub.w	r3, r3, lr
 800d0d8:	4403      	add	r3, r0
 800d0da:	0c12      	lsrs	r2, r2, #16
 800d0dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0ea:	45c1      	cmp	r9, r8
 800d0ec:	f841 3b04 	str.w	r3, [r1], #4
 800d0f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0f4:	d2e6      	bcs.n	800d0c4 <quorem+0xa4>
 800d0f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0fe:	b922      	cbnz	r2, 800d10a <quorem+0xea>
 800d100:	3b04      	subs	r3, #4
 800d102:	429d      	cmp	r5, r3
 800d104:	461a      	mov	r2, r3
 800d106:	d30b      	bcc.n	800d120 <quorem+0x100>
 800d108:	613c      	str	r4, [r7, #16]
 800d10a:	3601      	adds	r6, #1
 800d10c:	4630      	mov	r0, r6
 800d10e:	b003      	add	sp, #12
 800d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d114:	6812      	ldr	r2, [r2, #0]
 800d116:	3b04      	subs	r3, #4
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d1cb      	bne.n	800d0b4 <quorem+0x94>
 800d11c:	3c01      	subs	r4, #1
 800d11e:	e7c6      	b.n	800d0ae <quorem+0x8e>
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	3b04      	subs	r3, #4
 800d124:	2a00      	cmp	r2, #0
 800d126:	d1ef      	bne.n	800d108 <quorem+0xe8>
 800d128:	3c01      	subs	r4, #1
 800d12a:	e7ea      	b.n	800d102 <quorem+0xe2>
 800d12c:	2000      	movs	r0, #0
 800d12e:	e7ee      	b.n	800d10e <quorem+0xee>

0800d130 <_dtoa_r>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	69c7      	ldr	r7, [r0, #28]
 800d136:	b097      	sub	sp, #92	@ 0x5c
 800d138:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d13c:	ec55 4b10 	vmov	r4, r5, d0
 800d140:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d142:	9107      	str	r1, [sp, #28]
 800d144:	4681      	mov	r9, r0
 800d146:	920c      	str	r2, [sp, #48]	@ 0x30
 800d148:	9311      	str	r3, [sp, #68]	@ 0x44
 800d14a:	b97f      	cbnz	r7, 800d16c <_dtoa_r+0x3c>
 800d14c:	2010      	movs	r0, #16
 800d14e:	f7ff f897 	bl	800c280 <malloc>
 800d152:	4602      	mov	r2, r0
 800d154:	f8c9 001c 	str.w	r0, [r9, #28]
 800d158:	b920      	cbnz	r0, 800d164 <_dtoa_r+0x34>
 800d15a:	4ba9      	ldr	r3, [pc, #676]	@ (800d400 <_dtoa_r+0x2d0>)
 800d15c:	21ef      	movs	r1, #239	@ 0xef
 800d15e:	48a9      	ldr	r0, [pc, #676]	@ (800d404 <_dtoa_r+0x2d4>)
 800d160:	f7ff f870 	bl	800c244 <__assert_func>
 800d164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d168:	6007      	str	r7, [r0, #0]
 800d16a:	60c7      	str	r7, [r0, #12]
 800d16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d170:	6819      	ldr	r1, [r3, #0]
 800d172:	b159      	cbz	r1, 800d18c <_dtoa_r+0x5c>
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	604a      	str	r2, [r1, #4]
 800d178:	2301      	movs	r3, #1
 800d17a:	4093      	lsls	r3, r2
 800d17c:	608b      	str	r3, [r1, #8]
 800d17e:	4648      	mov	r0, r9
 800d180:	f000 fe30 	bl	800dde4 <_Bfree>
 800d184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	1e2b      	subs	r3, r5, #0
 800d18e:	bfb9      	ittee	lt
 800d190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d194:	9305      	strlt	r3, [sp, #20]
 800d196:	2300      	movge	r3, #0
 800d198:	6033      	strge	r3, [r6, #0]
 800d19a:	9f05      	ldr	r7, [sp, #20]
 800d19c:	4b9a      	ldr	r3, [pc, #616]	@ (800d408 <_dtoa_r+0x2d8>)
 800d19e:	bfbc      	itt	lt
 800d1a0:	2201      	movlt	r2, #1
 800d1a2:	6032      	strlt	r2, [r6, #0]
 800d1a4:	43bb      	bics	r3, r7
 800d1a6:	d112      	bne.n	800d1ce <_dtoa_r+0x9e>
 800d1a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d1aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1b4:	4323      	orrs	r3, r4
 800d1b6:	f000 855a 	beq.w	800dc6e <_dtoa_r+0xb3e>
 800d1ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d1bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d41c <_dtoa_r+0x2ec>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 855c 	beq.w	800dc7e <_dtoa_r+0xb4e>
 800d1c6:	f10a 0303 	add.w	r3, sl, #3
 800d1ca:	f000 bd56 	b.w	800dc7a <_dtoa_r+0xb4a>
 800d1ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	ec51 0b17 	vmov	r0, r1, d7
 800d1d8:	2300      	movs	r3, #0
 800d1da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d1de:	f7f3 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1e2:	4680      	mov	r8, r0
 800d1e4:	b158      	cbz	r0, 800d1fe <_dtoa_r+0xce>
 800d1e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d1ee:	b113      	cbz	r3, 800d1f6 <_dtoa_r+0xc6>
 800d1f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d1f2:	4b86      	ldr	r3, [pc, #536]	@ (800d40c <_dtoa_r+0x2dc>)
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d420 <_dtoa_r+0x2f0>
 800d1fa:	f000 bd40 	b.w	800dc7e <_dtoa_r+0xb4e>
 800d1fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d202:	aa14      	add	r2, sp, #80	@ 0x50
 800d204:	a915      	add	r1, sp, #84	@ 0x54
 800d206:	4648      	mov	r0, r9
 800d208:	f001 f8ce 	bl	800e3a8 <__d2b>
 800d20c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d210:	9002      	str	r0, [sp, #8]
 800d212:	2e00      	cmp	r6, #0
 800d214:	d078      	beq.n	800d308 <_dtoa_r+0x1d8>
 800d216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d218:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d22c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d230:	4619      	mov	r1, r3
 800d232:	2200      	movs	r2, #0
 800d234:	4b76      	ldr	r3, [pc, #472]	@ (800d410 <_dtoa_r+0x2e0>)
 800d236:	f7f3 f827 	bl	8000288 <__aeabi_dsub>
 800d23a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d3e8 <_dtoa_r+0x2b8>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	a36a      	add	r3, pc, #424	@ (adr r3, 800d3f0 <_dtoa_r+0x2c0>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f7f3 f81f 	bl	800028c <__adddf3>
 800d24e:	4604      	mov	r4, r0
 800d250:	4630      	mov	r0, r6
 800d252:	460d      	mov	r5, r1
 800d254:	f7f3 f966 	bl	8000524 <__aeabi_i2d>
 800d258:	a367      	add	r3, pc, #412	@ (adr r3, 800d3f8 <_dtoa_r+0x2c8>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 f80f 	bl	800028c <__adddf3>
 800d26e:	4604      	mov	r4, r0
 800d270:	460d      	mov	r5, r1
 800d272:	f7f3 fc71 	bl	8000b58 <__aeabi_d2iz>
 800d276:	2200      	movs	r2, #0
 800d278:	4607      	mov	r7, r0
 800d27a:	2300      	movs	r3, #0
 800d27c:	4620      	mov	r0, r4
 800d27e:	4629      	mov	r1, r5
 800d280:	f7f3 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800d284:	b140      	cbz	r0, 800d298 <_dtoa_r+0x168>
 800d286:	4638      	mov	r0, r7
 800d288:	f7f3 f94c 	bl	8000524 <__aeabi_i2d>
 800d28c:	4622      	mov	r2, r4
 800d28e:	462b      	mov	r3, r5
 800d290:	f7f3 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d294:	b900      	cbnz	r0, 800d298 <_dtoa_r+0x168>
 800d296:	3f01      	subs	r7, #1
 800d298:	2f16      	cmp	r7, #22
 800d29a:	d852      	bhi.n	800d342 <_dtoa_r+0x212>
 800d29c:	4b5d      	ldr	r3, [pc, #372]	@ (800d414 <_dtoa_r+0x2e4>)
 800d29e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2aa:	f7f3 fc17 	bl	8000adc <__aeabi_dcmplt>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d049      	beq.n	800d346 <_dtoa_r+0x216>
 800d2b2:	3f01      	subs	r7, #1
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d2ba:	1b9b      	subs	r3, r3, r6
 800d2bc:	1e5a      	subs	r2, r3, #1
 800d2be:	bf45      	ittet	mi
 800d2c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d2c4:	9300      	strmi	r3, [sp, #0]
 800d2c6:	2300      	movpl	r3, #0
 800d2c8:	2300      	movmi	r3, #0
 800d2ca:	9206      	str	r2, [sp, #24]
 800d2cc:	bf54      	ite	pl
 800d2ce:	9300      	strpl	r3, [sp, #0]
 800d2d0:	9306      	strmi	r3, [sp, #24]
 800d2d2:	2f00      	cmp	r7, #0
 800d2d4:	db39      	blt.n	800d34a <_dtoa_r+0x21a>
 800d2d6:	9b06      	ldr	r3, [sp, #24]
 800d2d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d2da:	443b      	add	r3, r7
 800d2dc:	9306      	str	r3, [sp, #24]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9308      	str	r3, [sp, #32]
 800d2e2:	9b07      	ldr	r3, [sp, #28]
 800d2e4:	2b09      	cmp	r3, #9
 800d2e6:	d863      	bhi.n	800d3b0 <_dtoa_r+0x280>
 800d2e8:	2b05      	cmp	r3, #5
 800d2ea:	bfc4      	itt	gt
 800d2ec:	3b04      	subgt	r3, #4
 800d2ee:	9307      	strgt	r3, [sp, #28]
 800d2f0:	9b07      	ldr	r3, [sp, #28]
 800d2f2:	f1a3 0302 	sub.w	r3, r3, #2
 800d2f6:	bfcc      	ite	gt
 800d2f8:	2400      	movgt	r4, #0
 800d2fa:	2401      	movle	r4, #1
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d863      	bhi.n	800d3c8 <_dtoa_r+0x298>
 800d300:	e8df f003 	tbb	[pc, r3]
 800d304:	2b375452 	.word	0x2b375452
 800d308:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d30c:	441e      	add	r6, r3
 800d30e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d312:	2b20      	cmp	r3, #32
 800d314:	bfc1      	itttt	gt
 800d316:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d31a:	409f      	lslgt	r7, r3
 800d31c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d320:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d324:	bfd6      	itet	le
 800d326:	f1c3 0320 	rsble	r3, r3, #32
 800d32a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d32e:	fa04 f003 	lslle.w	r0, r4, r3
 800d332:	f7f3 f8e7 	bl	8000504 <__aeabi_ui2d>
 800d336:	2201      	movs	r2, #1
 800d338:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d33c:	3e01      	subs	r6, #1
 800d33e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d340:	e776      	b.n	800d230 <_dtoa_r+0x100>
 800d342:	2301      	movs	r3, #1
 800d344:	e7b7      	b.n	800d2b6 <_dtoa_r+0x186>
 800d346:	9010      	str	r0, [sp, #64]	@ 0x40
 800d348:	e7b6      	b.n	800d2b8 <_dtoa_r+0x188>
 800d34a:	9b00      	ldr	r3, [sp, #0]
 800d34c:	1bdb      	subs	r3, r3, r7
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	427b      	negs	r3, r7
 800d352:	9308      	str	r3, [sp, #32]
 800d354:	2300      	movs	r3, #0
 800d356:	930d      	str	r3, [sp, #52]	@ 0x34
 800d358:	e7c3      	b.n	800d2e2 <_dtoa_r+0x1b2>
 800d35a:	2301      	movs	r3, #1
 800d35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d360:	eb07 0b03 	add.w	fp, r7, r3
 800d364:	f10b 0301 	add.w	r3, fp, #1
 800d368:	2b01      	cmp	r3, #1
 800d36a:	9303      	str	r3, [sp, #12]
 800d36c:	bfb8      	it	lt
 800d36e:	2301      	movlt	r3, #1
 800d370:	e006      	b.n	800d380 <_dtoa_r+0x250>
 800d372:	2301      	movs	r3, #1
 800d374:	9309      	str	r3, [sp, #36]	@ 0x24
 800d376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d378:	2b00      	cmp	r3, #0
 800d37a:	dd28      	ble.n	800d3ce <_dtoa_r+0x29e>
 800d37c:	469b      	mov	fp, r3
 800d37e:	9303      	str	r3, [sp, #12]
 800d380:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d384:	2100      	movs	r1, #0
 800d386:	2204      	movs	r2, #4
 800d388:	f102 0514 	add.w	r5, r2, #20
 800d38c:	429d      	cmp	r5, r3
 800d38e:	d926      	bls.n	800d3de <_dtoa_r+0x2ae>
 800d390:	6041      	str	r1, [r0, #4]
 800d392:	4648      	mov	r0, r9
 800d394:	f000 fce6 	bl	800dd64 <_Balloc>
 800d398:	4682      	mov	sl, r0
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d142      	bne.n	800d424 <_dtoa_r+0x2f4>
 800d39e:	4b1e      	ldr	r3, [pc, #120]	@ (800d418 <_dtoa_r+0x2e8>)
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3a6:	e6da      	b.n	800d15e <_dtoa_r+0x2e>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e7e3      	b.n	800d374 <_dtoa_r+0x244>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e7d5      	b.n	800d35c <_dtoa_r+0x22c>
 800d3b0:	2401      	movs	r4, #1
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9307      	str	r3, [sp, #28]
 800d3b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d3b8:	f04f 3bff 	mov.w	fp, #4294967295
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f8cd b00c 	str.w	fp, [sp, #12]
 800d3c2:	2312      	movs	r3, #18
 800d3c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3c6:	e7db      	b.n	800d380 <_dtoa_r+0x250>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3cc:	e7f4      	b.n	800d3b8 <_dtoa_r+0x288>
 800d3ce:	f04f 0b01 	mov.w	fp, #1
 800d3d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d3d6:	465b      	mov	r3, fp
 800d3d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d3dc:	e7d0      	b.n	800d380 <_dtoa_r+0x250>
 800d3de:	3101      	adds	r1, #1
 800d3e0:	0052      	lsls	r2, r2, #1
 800d3e2:	e7d1      	b.n	800d388 <_dtoa_r+0x258>
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	636f4361 	.word	0x636f4361
 800d3ec:	3fd287a7 	.word	0x3fd287a7
 800d3f0:	8b60c8b3 	.word	0x8b60c8b3
 800d3f4:	3fc68a28 	.word	0x3fc68a28
 800d3f8:	509f79fb 	.word	0x509f79fb
 800d3fc:	3fd34413 	.word	0x3fd34413
 800d400:	0800eca9 	.word	0x0800eca9
 800d404:	0800ecc0 	.word	0x0800ecc0
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	0800ec79 	.word	0x0800ec79
 800d410:	3ff80000 	.word	0x3ff80000
 800d414:	0800edd8 	.word	0x0800edd8
 800d418:	0800ed18 	.word	0x0800ed18
 800d41c:	0800eca5 	.word	0x0800eca5
 800d420:	0800ec78 	.word	0x0800ec78
 800d424:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d428:	6018      	str	r0, [r3, #0]
 800d42a:	9b03      	ldr	r3, [sp, #12]
 800d42c:	2b0e      	cmp	r3, #14
 800d42e:	f200 80a1 	bhi.w	800d574 <_dtoa_r+0x444>
 800d432:	2c00      	cmp	r4, #0
 800d434:	f000 809e 	beq.w	800d574 <_dtoa_r+0x444>
 800d438:	2f00      	cmp	r7, #0
 800d43a:	dd33      	ble.n	800d4a4 <_dtoa_r+0x374>
 800d43c:	4b9c      	ldr	r3, [pc, #624]	@ (800d6b0 <_dtoa_r+0x580>)
 800d43e:	f007 020f 	and.w	r2, r7, #15
 800d442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d446:	ed93 7b00 	vldr	d7, [r3]
 800d44a:	05f8      	lsls	r0, r7, #23
 800d44c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d450:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d454:	d516      	bpl.n	800d484 <_dtoa_r+0x354>
 800d456:	4b97      	ldr	r3, [pc, #604]	@ (800d6b4 <_dtoa_r+0x584>)
 800d458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d460:	f7f3 f9f4 	bl	800084c <__aeabi_ddiv>
 800d464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d468:	f004 040f 	and.w	r4, r4, #15
 800d46c:	2603      	movs	r6, #3
 800d46e:	4d91      	ldr	r5, [pc, #580]	@ (800d6b4 <_dtoa_r+0x584>)
 800d470:	b954      	cbnz	r4, 800d488 <_dtoa_r+0x358>
 800d472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d47a:	f7f3 f9e7 	bl	800084c <__aeabi_ddiv>
 800d47e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d482:	e028      	b.n	800d4d6 <_dtoa_r+0x3a6>
 800d484:	2602      	movs	r6, #2
 800d486:	e7f2      	b.n	800d46e <_dtoa_r+0x33e>
 800d488:	07e1      	lsls	r1, r4, #31
 800d48a:	d508      	bpl.n	800d49e <_dtoa_r+0x36e>
 800d48c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d490:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d494:	f7f3 f8b0 	bl	80005f8 <__aeabi_dmul>
 800d498:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d49c:	3601      	adds	r6, #1
 800d49e:	1064      	asrs	r4, r4, #1
 800d4a0:	3508      	adds	r5, #8
 800d4a2:	e7e5      	b.n	800d470 <_dtoa_r+0x340>
 800d4a4:	f000 80af 	beq.w	800d606 <_dtoa_r+0x4d6>
 800d4a8:	427c      	negs	r4, r7
 800d4aa:	4b81      	ldr	r3, [pc, #516]	@ (800d6b0 <_dtoa_r+0x580>)
 800d4ac:	4d81      	ldr	r5, [pc, #516]	@ (800d6b4 <_dtoa_r+0x584>)
 800d4ae:	f004 020f 	and.w	r2, r4, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4be:	f7f3 f89b 	bl	80005f8 <__aeabi_dmul>
 800d4c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4c6:	1124      	asrs	r4, r4, #4
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2602      	movs	r6, #2
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	f040 808f 	bne.w	800d5f0 <_dtoa_r+0x4c0>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1d3      	bne.n	800d47e <_dtoa_r+0x34e>
 800d4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 8094 	beq.w	800d60a <_dtoa_r+0x4da>
 800d4e2:	4b75      	ldr	r3, [pc, #468]	@ (800d6b8 <_dtoa_r+0x588>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7f3 faf7 	bl	8000adc <__aeabi_dcmplt>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f000 808b 	beq.w	800d60a <_dtoa_r+0x4da>
 800d4f4:	9b03      	ldr	r3, [sp, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 8087 	beq.w	800d60a <_dtoa_r+0x4da>
 800d4fc:	f1bb 0f00 	cmp.w	fp, #0
 800d500:	dd34      	ble.n	800d56c <_dtoa_r+0x43c>
 800d502:	4620      	mov	r0, r4
 800d504:	4b6d      	ldr	r3, [pc, #436]	@ (800d6bc <_dtoa_r+0x58c>)
 800d506:	2200      	movs	r2, #0
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f3 f875 	bl	80005f8 <__aeabi_dmul>
 800d50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d512:	f107 38ff 	add.w	r8, r7, #4294967295
 800d516:	3601      	adds	r6, #1
 800d518:	465c      	mov	r4, fp
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7f3 f802 	bl	8000524 <__aeabi_i2d>
 800d520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d524:	f7f3 f868 	bl	80005f8 <__aeabi_dmul>
 800d528:	4b65      	ldr	r3, [pc, #404]	@ (800d6c0 <_dtoa_r+0x590>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f7f2 feae 	bl	800028c <__adddf3>
 800d530:	4605      	mov	r5, r0
 800d532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d536:	2c00      	cmp	r4, #0
 800d538:	d16a      	bne.n	800d610 <_dtoa_r+0x4e0>
 800d53a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d53e:	4b61      	ldr	r3, [pc, #388]	@ (800d6c4 <_dtoa_r+0x594>)
 800d540:	2200      	movs	r2, #0
 800d542:	f7f2 fea1 	bl	8000288 <__aeabi_dsub>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d54e:	462a      	mov	r2, r5
 800d550:	4633      	mov	r3, r6
 800d552:	f7f3 fae1 	bl	8000b18 <__aeabi_dcmpgt>
 800d556:	2800      	cmp	r0, #0
 800d558:	f040 8298 	bne.w	800da8c <_dtoa_r+0x95c>
 800d55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d560:	462a      	mov	r2, r5
 800d562:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d566:	f7f3 fab9 	bl	8000adc <__aeabi_dcmplt>
 800d56a:	bb38      	cbnz	r0, 800d5bc <_dtoa_r+0x48c>
 800d56c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d576:	2b00      	cmp	r3, #0
 800d578:	f2c0 8157 	blt.w	800d82a <_dtoa_r+0x6fa>
 800d57c:	2f0e      	cmp	r7, #14
 800d57e:	f300 8154 	bgt.w	800d82a <_dtoa_r+0x6fa>
 800d582:	4b4b      	ldr	r3, [pc, #300]	@ (800d6b0 <_dtoa_r+0x580>)
 800d584:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d588:	ed93 7b00 	vldr	d7, [r3]
 800d58c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d58e:	2b00      	cmp	r3, #0
 800d590:	ed8d 7b00 	vstr	d7, [sp]
 800d594:	f280 80e5 	bge.w	800d762 <_dtoa_r+0x632>
 800d598:	9b03      	ldr	r3, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f300 80e1 	bgt.w	800d762 <_dtoa_r+0x632>
 800d5a0:	d10c      	bne.n	800d5bc <_dtoa_r+0x48c>
 800d5a2:	4b48      	ldr	r3, [pc, #288]	@ (800d6c4 <_dtoa_r+0x594>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	ec51 0b17 	vmov	r0, r1, d7
 800d5aa:	f7f3 f825 	bl	80005f8 <__aeabi_dmul>
 800d5ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5b2:	f7f3 faa7 	bl	8000b04 <__aeabi_dcmpge>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	f000 8266 	beq.w	800da88 <_dtoa_r+0x958>
 800d5bc:	2400      	movs	r4, #0
 800d5be:	4625      	mov	r5, r4
 800d5c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5c2:	4656      	mov	r6, sl
 800d5c4:	ea6f 0803 	mvn.w	r8, r3
 800d5c8:	2700      	movs	r7, #0
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4648      	mov	r0, r9
 800d5ce:	f000 fc09 	bl	800dde4 <_Bfree>
 800d5d2:	2d00      	cmp	r5, #0
 800d5d4:	f000 80bd 	beq.w	800d752 <_dtoa_r+0x622>
 800d5d8:	b12f      	cbz	r7, 800d5e6 <_dtoa_r+0x4b6>
 800d5da:	42af      	cmp	r7, r5
 800d5dc:	d003      	beq.n	800d5e6 <_dtoa_r+0x4b6>
 800d5de:	4639      	mov	r1, r7
 800d5e0:	4648      	mov	r0, r9
 800d5e2:	f000 fbff 	bl	800dde4 <_Bfree>
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4648      	mov	r0, r9
 800d5ea:	f000 fbfb 	bl	800dde4 <_Bfree>
 800d5ee:	e0b0      	b.n	800d752 <_dtoa_r+0x622>
 800d5f0:	07e2      	lsls	r2, r4, #31
 800d5f2:	d505      	bpl.n	800d600 <_dtoa_r+0x4d0>
 800d5f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5f8:	f7f2 fffe 	bl	80005f8 <__aeabi_dmul>
 800d5fc:	3601      	adds	r6, #1
 800d5fe:	2301      	movs	r3, #1
 800d600:	1064      	asrs	r4, r4, #1
 800d602:	3508      	adds	r5, #8
 800d604:	e762      	b.n	800d4cc <_dtoa_r+0x39c>
 800d606:	2602      	movs	r6, #2
 800d608:	e765      	b.n	800d4d6 <_dtoa_r+0x3a6>
 800d60a:	9c03      	ldr	r4, [sp, #12]
 800d60c:	46b8      	mov	r8, r7
 800d60e:	e784      	b.n	800d51a <_dtoa_r+0x3ea>
 800d610:	4b27      	ldr	r3, [pc, #156]	@ (800d6b0 <_dtoa_r+0x580>)
 800d612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d61c:	4454      	add	r4, sl
 800d61e:	2900      	cmp	r1, #0
 800d620:	d054      	beq.n	800d6cc <_dtoa_r+0x59c>
 800d622:	4929      	ldr	r1, [pc, #164]	@ (800d6c8 <_dtoa_r+0x598>)
 800d624:	2000      	movs	r0, #0
 800d626:	f7f3 f911 	bl	800084c <__aeabi_ddiv>
 800d62a:	4633      	mov	r3, r6
 800d62c:	462a      	mov	r2, r5
 800d62e:	f7f2 fe2b 	bl	8000288 <__aeabi_dsub>
 800d632:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d636:	4656      	mov	r6, sl
 800d638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d63c:	f7f3 fa8c 	bl	8000b58 <__aeabi_d2iz>
 800d640:	4605      	mov	r5, r0
 800d642:	f7f2 ff6f 	bl	8000524 <__aeabi_i2d>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d64e:	f7f2 fe1b 	bl	8000288 <__aeabi_dsub>
 800d652:	3530      	adds	r5, #48	@ 0x30
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d65c:	f806 5b01 	strb.w	r5, [r6], #1
 800d660:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d664:	f7f3 fa3a 	bl	8000adc <__aeabi_dcmplt>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d172      	bne.n	800d752 <_dtoa_r+0x622>
 800d66c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d670:	4911      	ldr	r1, [pc, #68]	@ (800d6b8 <_dtoa_r+0x588>)
 800d672:	2000      	movs	r0, #0
 800d674:	f7f2 fe08 	bl	8000288 <__aeabi_dsub>
 800d678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d67c:	f7f3 fa2e 	bl	8000adc <__aeabi_dcmplt>
 800d680:	2800      	cmp	r0, #0
 800d682:	f040 80b4 	bne.w	800d7ee <_dtoa_r+0x6be>
 800d686:	42a6      	cmp	r6, r4
 800d688:	f43f af70 	beq.w	800d56c <_dtoa_r+0x43c>
 800d68c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d690:	4b0a      	ldr	r3, [pc, #40]	@ (800d6bc <_dtoa_r+0x58c>)
 800d692:	2200      	movs	r2, #0
 800d694:	f7f2 ffb0 	bl	80005f8 <__aeabi_dmul>
 800d698:	4b08      	ldr	r3, [pc, #32]	@ (800d6bc <_dtoa_r+0x58c>)
 800d69a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d69e:	2200      	movs	r2, #0
 800d6a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6a4:	f7f2 ffa8 	bl	80005f8 <__aeabi_dmul>
 800d6a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6ac:	e7c4      	b.n	800d638 <_dtoa_r+0x508>
 800d6ae:	bf00      	nop
 800d6b0:	0800edd8 	.word	0x0800edd8
 800d6b4:	0800edb0 	.word	0x0800edb0
 800d6b8:	3ff00000 	.word	0x3ff00000
 800d6bc:	40240000 	.word	0x40240000
 800d6c0:	401c0000 	.word	0x401c0000
 800d6c4:	40140000 	.word	0x40140000
 800d6c8:	3fe00000 	.word	0x3fe00000
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7f2 ff92 	bl	80005f8 <__aeabi_dmul>
 800d6d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d6d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d6da:	4656      	mov	r6, sl
 800d6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6e0:	f7f3 fa3a 	bl	8000b58 <__aeabi_d2iz>
 800d6e4:	4605      	mov	r5, r0
 800d6e6:	f7f2 ff1d 	bl	8000524 <__aeabi_i2d>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6f2:	f7f2 fdc9 	bl	8000288 <__aeabi_dsub>
 800d6f6:	3530      	adds	r5, #48	@ 0x30
 800d6f8:	f806 5b01 	strb.w	r5, [r6], #1
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	42a6      	cmp	r6, r4
 800d702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	d124      	bne.n	800d756 <_dtoa_r+0x626>
 800d70c:	4baf      	ldr	r3, [pc, #700]	@ (800d9cc <_dtoa_r+0x89c>)
 800d70e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d712:	f7f2 fdbb 	bl	800028c <__adddf3>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d71e:	f7f3 f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 800d722:	2800      	cmp	r0, #0
 800d724:	d163      	bne.n	800d7ee <_dtoa_r+0x6be>
 800d726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d72a:	49a8      	ldr	r1, [pc, #672]	@ (800d9cc <_dtoa_r+0x89c>)
 800d72c:	2000      	movs	r0, #0
 800d72e:	f7f2 fdab 	bl	8000288 <__aeabi_dsub>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d73a:	f7f3 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800d73e:	2800      	cmp	r0, #0
 800d740:	f43f af14 	beq.w	800d56c <_dtoa_r+0x43c>
 800d744:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d746:	1e73      	subs	r3, r6, #1
 800d748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d74a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d74e:	2b30      	cmp	r3, #48	@ 0x30
 800d750:	d0f8      	beq.n	800d744 <_dtoa_r+0x614>
 800d752:	4647      	mov	r7, r8
 800d754:	e03b      	b.n	800d7ce <_dtoa_r+0x69e>
 800d756:	4b9e      	ldr	r3, [pc, #632]	@ (800d9d0 <_dtoa_r+0x8a0>)
 800d758:	f7f2 ff4e 	bl	80005f8 <__aeabi_dmul>
 800d75c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d760:	e7bc      	b.n	800d6dc <_dtoa_r+0x5ac>
 800d762:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d766:	4656      	mov	r6, sl
 800d768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d76c:	4620      	mov	r0, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f3 f86c 	bl	800084c <__aeabi_ddiv>
 800d774:	f7f3 f9f0 	bl	8000b58 <__aeabi_d2iz>
 800d778:	4680      	mov	r8, r0
 800d77a:	f7f2 fed3 	bl	8000524 <__aeabi_i2d>
 800d77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d782:	f7f2 ff39 	bl	80005f8 <__aeabi_dmul>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d792:	f7f2 fd79 	bl	8000288 <__aeabi_dsub>
 800d796:	f806 4b01 	strb.w	r4, [r6], #1
 800d79a:	9d03      	ldr	r5, [sp, #12]
 800d79c:	eba6 040a 	sub.w	r4, r6, sl
 800d7a0:	42a5      	cmp	r5, r4
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	d133      	bne.n	800d810 <_dtoa_r+0x6e0>
 800d7a8:	f7f2 fd70 	bl	800028c <__adddf3>
 800d7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	f7f3 f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 800d7b8:	b9c0      	cbnz	r0, 800d7ec <_dtoa_r+0x6bc>
 800d7ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f3 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7c6:	b110      	cbz	r0, 800d7ce <_dtoa_r+0x69e>
 800d7c8:	f018 0f01 	tst.w	r8, #1
 800d7cc:	d10e      	bne.n	800d7ec <_dtoa_r+0x6bc>
 800d7ce:	9902      	ldr	r1, [sp, #8]
 800d7d0:	4648      	mov	r0, r9
 800d7d2:	f000 fb07 	bl	800dde4 <_Bfree>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	7033      	strb	r3, [r6, #0]
 800d7da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7dc:	3701      	adds	r7, #1
 800d7de:	601f      	str	r7, [r3, #0]
 800d7e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 824b 	beq.w	800dc7e <_dtoa_r+0xb4e>
 800d7e8:	601e      	str	r6, [r3, #0]
 800d7ea:	e248      	b.n	800dc7e <_dtoa_r+0xb4e>
 800d7ec:	46b8      	mov	r8, r7
 800d7ee:	4633      	mov	r3, r6
 800d7f0:	461e      	mov	r6, r3
 800d7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7f6:	2a39      	cmp	r2, #57	@ 0x39
 800d7f8:	d106      	bne.n	800d808 <_dtoa_r+0x6d8>
 800d7fa:	459a      	cmp	sl, r3
 800d7fc:	d1f8      	bne.n	800d7f0 <_dtoa_r+0x6c0>
 800d7fe:	2230      	movs	r2, #48	@ 0x30
 800d800:	f108 0801 	add.w	r8, r8, #1
 800d804:	f88a 2000 	strb.w	r2, [sl]
 800d808:	781a      	ldrb	r2, [r3, #0]
 800d80a:	3201      	adds	r2, #1
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	e7a0      	b.n	800d752 <_dtoa_r+0x622>
 800d810:	4b6f      	ldr	r3, [pc, #444]	@ (800d9d0 <_dtoa_r+0x8a0>)
 800d812:	2200      	movs	r2, #0
 800d814:	f7f2 fef0 	bl	80005f8 <__aeabi_dmul>
 800d818:	2200      	movs	r2, #0
 800d81a:	2300      	movs	r3, #0
 800d81c:	4604      	mov	r4, r0
 800d81e:	460d      	mov	r5, r1
 800d820:	f7f3 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 800d824:	2800      	cmp	r0, #0
 800d826:	d09f      	beq.n	800d768 <_dtoa_r+0x638>
 800d828:	e7d1      	b.n	800d7ce <_dtoa_r+0x69e>
 800d82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d82c:	2a00      	cmp	r2, #0
 800d82e:	f000 80ea 	beq.w	800da06 <_dtoa_r+0x8d6>
 800d832:	9a07      	ldr	r2, [sp, #28]
 800d834:	2a01      	cmp	r2, #1
 800d836:	f300 80cd 	bgt.w	800d9d4 <_dtoa_r+0x8a4>
 800d83a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d83c:	2a00      	cmp	r2, #0
 800d83e:	f000 80c1 	beq.w	800d9c4 <_dtoa_r+0x894>
 800d842:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d846:	9c08      	ldr	r4, [sp, #32]
 800d848:	9e00      	ldr	r6, [sp, #0]
 800d84a:	9a00      	ldr	r2, [sp, #0]
 800d84c:	441a      	add	r2, r3
 800d84e:	9200      	str	r2, [sp, #0]
 800d850:	9a06      	ldr	r2, [sp, #24]
 800d852:	2101      	movs	r1, #1
 800d854:	441a      	add	r2, r3
 800d856:	4648      	mov	r0, r9
 800d858:	9206      	str	r2, [sp, #24]
 800d85a:	f000 fb77 	bl	800df4c <__i2b>
 800d85e:	4605      	mov	r5, r0
 800d860:	b166      	cbz	r6, 800d87c <_dtoa_r+0x74c>
 800d862:	9b06      	ldr	r3, [sp, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	dd09      	ble.n	800d87c <_dtoa_r+0x74c>
 800d868:	42b3      	cmp	r3, r6
 800d86a:	9a00      	ldr	r2, [sp, #0]
 800d86c:	bfa8      	it	ge
 800d86e:	4633      	movge	r3, r6
 800d870:	1ad2      	subs	r2, r2, r3
 800d872:	9200      	str	r2, [sp, #0]
 800d874:	9a06      	ldr	r2, [sp, #24]
 800d876:	1af6      	subs	r6, r6, r3
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	9306      	str	r3, [sp, #24]
 800d87c:	9b08      	ldr	r3, [sp, #32]
 800d87e:	b30b      	cbz	r3, 800d8c4 <_dtoa_r+0x794>
 800d880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 80c6 	beq.w	800da14 <_dtoa_r+0x8e4>
 800d888:	2c00      	cmp	r4, #0
 800d88a:	f000 80c0 	beq.w	800da0e <_dtoa_r+0x8de>
 800d88e:	4629      	mov	r1, r5
 800d890:	4622      	mov	r2, r4
 800d892:	4648      	mov	r0, r9
 800d894:	f000 fc12 	bl	800e0bc <__pow5mult>
 800d898:	9a02      	ldr	r2, [sp, #8]
 800d89a:	4601      	mov	r1, r0
 800d89c:	4605      	mov	r5, r0
 800d89e:	4648      	mov	r0, r9
 800d8a0:	f000 fb6a 	bl	800df78 <__multiply>
 800d8a4:	9902      	ldr	r1, [sp, #8]
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	4648      	mov	r0, r9
 800d8aa:	f000 fa9b 	bl	800dde4 <_Bfree>
 800d8ae:	9b08      	ldr	r3, [sp, #32]
 800d8b0:	1b1b      	subs	r3, r3, r4
 800d8b2:	9308      	str	r3, [sp, #32]
 800d8b4:	f000 80b1 	beq.w	800da1a <_dtoa_r+0x8ea>
 800d8b8:	9a08      	ldr	r2, [sp, #32]
 800d8ba:	4641      	mov	r1, r8
 800d8bc:	4648      	mov	r0, r9
 800d8be:	f000 fbfd 	bl	800e0bc <__pow5mult>
 800d8c2:	9002      	str	r0, [sp, #8]
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4648      	mov	r0, r9
 800d8c8:	f000 fb40 	bl	800df4c <__i2b>
 800d8cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81d8 	beq.w	800dc86 <_dtoa_r+0xb56>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4648      	mov	r0, r9
 800d8dc:	f000 fbee 	bl	800e0bc <__pow5mult>
 800d8e0:	9b07      	ldr	r3, [sp, #28]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	f300 809f 	bgt.w	800da28 <_dtoa_r+0x8f8>
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8097 	bne.w	800da20 <_dtoa_r+0x8f0>
 800d8f2:	9b05      	ldr	r3, [sp, #20]
 800d8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f040 8093 	bne.w	800da24 <_dtoa_r+0x8f4>
 800d8fe:	9b05      	ldr	r3, [sp, #20]
 800d900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d904:	0d1b      	lsrs	r3, r3, #20
 800d906:	051b      	lsls	r3, r3, #20
 800d908:	b133      	cbz	r3, 800d918 <_dtoa_r+0x7e8>
 800d90a:	9b00      	ldr	r3, [sp, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	9b06      	ldr	r3, [sp, #24]
 800d912:	3301      	adds	r3, #1
 800d914:	9306      	str	r3, [sp, #24]
 800d916:	2301      	movs	r3, #1
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 81b8 	beq.w	800dc92 <_dtoa_r+0xb62>
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d928:	6918      	ldr	r0, [r3, #16]
 800d92a:	f000 fac3 	bl	800deb4 <__hi0bits>
 800d92e:	f1c0 0020 	rsb	r0, r0, #32
 800d932:	9b06      	ldr	r3, [sp, #24]
 800d934:	4418      	add	r0, r3
 800d936:	f010 001f 	ands.w	r0, r0, #31
 800d93a:	f000 8082 	beq.w	800da42 <_dtoa_r+0x912>
 800d93e:	f1c0 0320 	rsb	r3, r0, #32
 800d942:	2b04      	cmp	r3, #4
 800d944:	dd73      	ble.n	800da2e <_dtoa_r+0x8fe>
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	f1c0 001c 	rsb	r0, r0, #28
 800d94c:	4403      	add	r3, r0
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	9b06      	ldr	r3, [sp, #24]
 800d952:	4403      	add	r3, r0
 800d954:	4406      	add	r6, r0
 800d956:	9306      	str	r3, [sp, #24]
 800d958:	9b00      	ldr	r3, [sp, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	dd05      	ble.n	800d96a <_dtoa_r+0x83a>
 800d95e:	9902      	ldr	r1, [sp, #8]
 800d960:	461a      	mov	r2, r3
 800d962:	4648      	mov	r0, r9
 800d964:	f000 fc04 	bl	800e170 <__lshift>
 800d968:	9002      	str	r0, [sp, #8]
 800d96a:	9b06      	ldr	r3, [sp, #24]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	dd05      	ble.n	800d97c <_dtoa_r+0x84c>
 800d970:	4621      	mov	r1, r4
 800d972:	461a      	mov	r2, r3
 800d974:	4648      	mov	r0, r9
 800d976:	f000 fbfb 	bl	800e170 <__lshift>
 800d97a:	4604      	mov	r4, r0
 800d97c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d061      	beq.n	800da46 <_dtoa_r+0x916>
 800d982:	9802      	ldr	r0, [sp, #8]
 800d984:	4621      	mov	r1, r4
 800d986:	f000 fc5f 	bl	800e248 <__mcmp>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	da5b      	bge.n	800da46 <_dtoa_r+0x916>
 800d98e:	2300      	movs	r3, #0
 800d990:	9902      	ldr	r1, [sp, #8]
 800d992:	220a      	movs	r2, #10
 800d994:	4648      	mov	r0, r9
 800d996:	f000 fa47 	bl	800de28 <__multadd>
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	9002      	str	r0, [sp, #8]
 800d99e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8177 	beq.w	800dc96 <_dtoa_r+0xb66>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	220a      	movs	r2, #10
 800d9ae:	4648      	mov	r0, r9
 800d9b0:	f000 fa3a 	bl	800de28 <__multadd>
 800d9b4:	f1bb 0f00 	cmp.w	fp, #0
 800d9b8:	4605      	mov	r5, r0
 800d9ba:	dc6f      	bgt.n	800da9c <_dtoa_r+0x96c>
 800d9bc:	9b07      	ldr	r3, [sp, #28]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	dc49      	bgt.n	800da56 <_dtoa_r+0x926>
 800d9c2:	e06b      	b.n	800da9c <_dtoa_r+0x96c>
 800d9c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9ca:	e73c      	b.n	800d846 <_dtoa_r+0x716>
 800d9cc:	3fe00000 	.word	0x3fe00000
 800d9d0:	40240000 	.word	0x40240000
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	1e5c      	subs	r4, r3, #1
 800d9d8:	9b08      	ldr	r3, [sp, #32]
 800d9da:	42a3      	cmp	r3, r4
 800d9dc:	db09      	blt.n	800d9f2 <_dtoa_r+0x8c2>
 800d9de:	1b1c      	subs	r4, r3, r4
 800d9e0:	9b03      	ldr	r3, [sp, #12]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f6bf af30 	bge.w	800d848 <_dtoa_r+0x718>
 800d9e8:	9b00      	ldr	r3, [sp, #0]
 800d9ea:	9a03      	ldr	r2, [sp, #12]
 800d9ec:	1a9e      	subs	r6, r3, r2
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e72b      	b.n	800d84a <_dtoa_r+0x71a>
 800d9f2:	9b08      	ldr	r3, [sp, #32]
 800d9f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9f6:	9408      	str	r4, [sp, #32]
 800d9f8:	1ae3      	subs	r3, r4, r3
 800d9fa:	441a      	add	r2, r3
 800d9fc:	9e00      	ldr	r6, [sp, #0]
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	920d      	str	r2, [sp, #52]	@ 0x34
 800da02:	2400      	movs	r4, #0
 800da04:	e721      	b.n	800d84a <_dtoa_r+0x71a>
 800da06:	9c08      	ldr	r4, [sp, #32]
 800da08:	9e00      	ldr	r6, [sp, #0]
 800da0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800da0c:	e728      	b.n	800d860 <_dtoa_r+0x730>
 800da0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800da12:	e751      	b.n	800d8b8 <_dtoa_r+0x788>
 800da14:	9a08      	ldr	r2, [sp, #32]
 800da16:	9902      	ldr	r1, [sp, #8]
 800da18:	e750      	b.n	800d8bc <_dtoa_r+0x78c>
 800da1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800da1e:	e751      	b.n	800d8c4 <_dtoa_r+0x794>
 800da20:	2300      	movs	r3, #0
 800da22:	e779      	b.n	800d918 <_dtoa_r+0x7e8>
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	e777      	b.n	800d918 <_dtoa_r+0x7e8>
 800da28:	2300      	movs	r3, #0
 800da2a:	9308      	str	r3, [sp, #32]
 800da2c:	e779      	b.n	800d922 <_dtoa_r+0x7f2>
 800da2e:	d093      	beq.n	800d958 <_dtoa_r+0x828>
 800da30:	9a00      	ldr	r2, [sp, #0]
 800da32:	331c      	adds	r3, #28
 800da34:	441a      	add	r2, r3
 800da36:	9200      	str	r2, [sp, #0]
 800da38:	9a06      	ldr	r2, [sp, #24]
 800da3a:	441a      	add	r2, r3
 800da3c:	441e      	add	r6, r3
 800da3e:	9206      	str	r2, [sp, #24]
 800da40:	e78a      	b.n	800d958 <_dtoa_r+0x828>
 800da42:	4603      	mov	r3, r0
 800da44:	e7f4      	b.n	800da30 <_dtoa_r+0x900>
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	46b8      	mov	r8, r7
 800da4c:	dc20      	bgt.n	800da90 <_dtoa_r+0x960>
 800da4e:	469b      	mov	fp, r3
 800da50:	9b07      	ldr	r3, [sp, #28]
 800da52:	2b02      	cmp	r3, #2
 800da54:	dd1e      	ble.n	800da94 <_dtoa_r+0x964>
 800da56:	f1bb 0f00 	cmp.w	fp, #0
 800da5a:	f47f adb1 	bne.w	800d5c0 <_dtoa_r+0x490>
 800da5e:	4621      	mov	r1, r4
 800da60:	465b      	mov	r3, fp
 800da62:	2205      	movs	r2, #5
 800da64:	4648      	mov	r0, r9
 800da66:	f000 f9df 	bl	800de28 <__multadd>
 800da6a:	4601      	mov	r1, r0
 800da6c:	4604      	mov	r4, r0
 800da6e:	9802      	ldr	r0, [sp, #8]
 800da70:	f000 fbea 	bl	800e248 <__mcmp>
 800da74:	2800      	cmp	r0, #0
 800da76:	f77f ada3 	ble.w	800d5c0 <_dtoa_r+0x490>
 800da7a:	4656      	mov	r6, sl
 800da7c:	2331      	movs	r3, #49	@ 0x31
 800da7e:	f806 3b01 	strb.w	r3, [r6], #1
 800da82:	f108 0801 	add.w	r8, r8, #1
 800da86:	e59f      	b.n	800d5c8 <_dtoa_r+0x498>
 800da88:	9c03      	ldr	r4, [sp, #12]
 800da8a:	46b8      	mov	r8, r7
 800da8c:	4625      	mov	r5, r4
 800da8e:	e7f4      	b.n	800da7a <_dtoa_r+0x94a>
 800da90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800da94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da96:	2b00      	cmp	r3, #0
 800da98:	f000 8101 	beq.w	800dc9e <_dtoa_r+0xb6e>
 800da9c:	2e00      	cmp	r6, #0
 800da9e:	dd05      	ble.n	800daac <_dtoa_r+0x97c>
 800daa0:	4629      	mov	r1, r5
 800daa2:	4632      	mov	r2, r6
 800daa4:	4648      	mov	r0, r9
 800daa6:	f000 fb63 	bl	800e170 <__lshift>
 800daaa:	4605      	mov	r5, r0
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d05c      	beq.n	800db6c <_dtoa_r+0xa3c>
 800dab2:	6869      	ldr	r1, [r5, #4]
 800dab4:	4648      	mov	r0, r9
 800dab6:	f000 f955 	bl	800dd64 <_Balloc>
 800daba:	4606      	mov	r6, r0
 800dabc:	b928      	cbnz	r0, 800daca <_dtoa_r+0x99a>
 800dabe:	4b82      	ldr	r3, [pc, #520]	@ (800dcc8 <_dtoa_r+0xb98>)
 800dac0:	4602      	mov	r2, r0
 800dac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dac6:	f7ff bb4a 	b.w	800d15e <_dtoa_r+0x2e>
 800daca:	692a      	ldr	r2, [r5, #16]
 800dacc:	3202      	adds	r2, #2
 800dace:	0092      	lsls	r2, r2, #2
 800dad0:	f105 010c 	add.w	r1, r5, #12
 800dad4:	300c      	adds	r0, #12
 800dad6:	f7ff fa8e 	bl	800cff6 <memcpy>
 800dada:	2201      	movs	r2, #1
 800dadc:	4631      	mov	r1, r6
 800dade:	4648      	mov	r0, r9
 800dae0:	f000 fb46 	bl	800e170 <__lshift>
 800dae4:	f10a 0301 	add.w	r3, sl, #1
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	eb0a 030b 	add.w	r3, sl, fp
 800daee:	9308      	str	r3, [sp, #32]
 800daf0:	9b04      	ldr	r3, [sp, #16]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	462f      	mov	r7, r5
 800daf8:	9306      	str	r3, [sp, #24]
 800dafa:	4605      	mov	r5, r0
 800dafc:	9b00      	ldr	r3, [sp, #0]
 800dafe:	9802      	ldr	r0, [sp, #8]
 800db00:	4621      	mov	r1, r4
 800db02:	f103 3bff 	add.w	fp, r3, #4294967295
 800db06:	f7ff fa8b 	bl	800d020 <quorem>
 800db0a:	4603      	mov	r3, r0
 800db0c:	3330      	adds	r3, #48	@ 0x30
 800db0e:	9003      	str	r0, [sp, #12]
 800db10:	4639      	mov	r1, r7
 800db12:	9802      	ldr	r0, [sp, #8]
 800db14:	9309      	str	r3, [sp, #36]	@ 0x24
 800db16:	f000 fb97 	bl	800e248 <__mcmp>
 800db1a:	462a      	mov	r2, r5
 800db1c:	9004      	str	r0, [sp, #16]
 800db1e:	4621      	mov	r1, r4
 800db20:	4648      	mov	r0, r9
 800db22:	f000 fbad 	bl	800e280 <__mdiff>
 800db26:	68c2      	ldr	r2, [r0, #12]
 800db28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db2a:	4606      	mov	r6, r0
 800db2c:	bb02      	cbnz	r2, 800db70 <_dtoa_r+0xa40>
 800db2e:	4601      	mov	r1, r0
 800db30:	9802      	ldr	r0, [sp, #8]
 800db32:	f000 fb89 	bl	800e248 <__mcmp>
 800db36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db38:	4602      	mov	r2, r0
 800db3a:	4631      	mov	r1, r6
 800db3c:	4648      	mov	r0, r9
 800db3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db40:	9309      	str	r3, [sp, #36]	@ 0x24
 800db42:	f000 f94f 	bl	800dde4 <_Bfree>
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800db4a:	9e00      	ldr	r6, [sp, #0]
 800db4c:	ea42 0103 	orr.w	r1, r2, r3
 800db50:	9b06      	ldr	r3, [sp, #24]
 800db52:	4319      	orrs	r1, r3
 800db54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db56:	d10d      	bne.n	800db74 <_dtoa_r+0xa44>
 800db58:	2b39      	cmp	r3, #57	@ 0x39
 800db5a:	d027      	beq.n	800dbac <_dtoa_r+0xa7c>
 800db5c:	9a04      	ldr	r2, [sp, #16]
 800db5e:	2a00      	cmp	r2, #0
 800db60:	dd01      	ble.n	800db66 <_dtoa_r+0xa36>
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	3331      	adds	r3, #49	@ 0x31
 800db66:	f88b 3000 	strb.w	r3, [fp]
 800db6a:	e52e      	b.n	800d5ca <_dtoa_r+0x49a>
 800db6c:	4628      	mov	r0, r5
 800db6e:	e7b9      	b.n	800dae4 <_dtoa_r+0x9b4>
 800db70:	2201      	movs	r2, #1
 800db72:	e7e2      	b.n	800db3a <_dtoa_r+0xa0a>
 800db74:	9904      	ldr	r1, [sp, #16]
 800db76:	2900      	cmp	r1, #0
 800db78:	db04      	blt.n	800db84 <_dtoa_r+0xa54>
 800db7a:	9807      	ldr	r0, [sp, #28]
 800db7c:	4301      	orrs	r1, r0
 800db7e:	9806      	ldr	r0, [sp, #24]
 800db80:	4301      	orrs	r1, r0
 800db82:	d120      	bne.n	800dbc6 <_dtoa_r+0xa96>
 800db84:	2a00      	cmp	r2, #0
 800db86:	ddee      	ble.n	800db66 <_dtoa_r+0xa36>
 800db88:	9902      	ldr	r1, [sp, #8]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	2201      	movs	r2, #1
 800db8e:	4648      	mov	r0, r9
 800db90:	f000 faee 	bl	800e170 <__lshift>
 800db94:	4621      	mov	r1, r4
 800db96:	9002      	str	r0, [sp, #8]
 800db98:	f000 fb56 	bl	800e248 <__mcmp>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	9b00      	ldr	r3, [sp, #0]
 800dba0:	dc02      	bgt.n	800dba8 <_dtoa_r+0xa78>
 800dba2:	d1e0      	bne.n	800db66 <_dtoa_r+0xa36>
 800dba4:	07da      	lsls	r2, r3, #31
 800dba6:	d5de      	bpl.n	800db66 <_dtoa_r+0xa36>
 800dba8:	2b39      	cmp	r3, #57	@ 0x39
 800dbaa:	d1da      	bne.n	800db62 <_dtoa_r+0xa32>
 800dbac:	2339      	movs	r3, #57	@ 0x39
 800dbae:	f88b 3000 	strb.w	r3, [fp]
 800dbb2:	4633      	mov	r3, r6
 800dbb4:	461e      	mov	r6, r3
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dbbc:	2a39      	cmp	r2, #57	@ 0x39
 800dbbe:	d04e      	beq.n	800dc5e <_dtoa_r+0xb2e>
 800dbc0:	3201      	adds	r2, #1
 800dbc2:	701a      	strb	r2, [r3, #0]
 800dbc4:	e501      	b.n	800d5ca <_dtoa_r+0x49a>
 800dbc6:	2a00      	cmp	r2, #0
 800dbc8:	dd03      	ble.n	800dbd2 <_dtoa_r+0xaa2>
 800dbca:	2b39      	cmp	r3, #57	@ 0x39
 800dbcc:	d0ee      	beq.n	800dbac <_dtoa_r+0xa7c>
 800dbce:	3301      	adds	r3, #1
 800dbd0:	e7c9      	b.n	800db66 <_dtoa_r+0xa36>
 800dbd2:	9a00      	ldr	r2, [sp, #0]
 800dbd4:	9908      	ldr	r1, [sp, #32]
 800dbd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dbda:	428a      	cmp	r2, r1
 800dbdc:	d028      	beq.n	800dc30 <_dtoa_r+0xb00>
 800dbde:	9902      	ldr	r1, [sp, #8]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	220a      	movs	r2, #10
 800dbe4:	4648      	mov	r0, r9
 800dbe6:	f000 f91f 	bl	800de28 <__multadd>
 800dbea:	42af      	cmp	r7, r5
 800dbec:	9002      	str	r0, [sp, #8]
 800dbee:	f04f 0300 	mov.w	r3, #0
 800dbf2:	f04f 020a 	mov.w	r2, #10
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	4648      	mov	r0, r9
 800dbfa:	d107      	bne.n	800dc0c <_dtoa_r+0xadc>
 800dbfc:	f000 f914 	bl	800de28 <__multadd>
 800dc00:	4607      	mov	r7, r0
 800dc02:	4605      	mov	r5, r0
 800dc04:	9b00      	ldr	r3, [sp, #0]
 800dc06:	3301      	adds	r3, #1
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	e777      	b.n	800dafc <_dtoa_r+0x9cc>
 800dc0c:	f000 f90c 	bl	800de28 <__multadd>
 800dc10:	4629      	mov	r1, r5
 800dc12:	4607      	mov	r7, r0
 800dc14:	2300      	movs	r3, #0
 800dc16:	220a      	movs	r2, #10
 800dc18:	4648      	mov	r0, r9
 800dc1a:	f000 f905 	bl	800de28 <__multadd>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	e7f0      	b.n	800dc04 <_dtoa_r+0xad4>
 800dc22:	f1bb 0f00 	cmp.w	fp, #0
 800dc26:	bfcc      	ite	gt
 800dc28:	465e      	movgt	r6, fp
 800dc2a:	2601      	movle	r6, #1
 800dc2c:	4456      	add	r6, sl
 800dc2e:	2700      	movs	r7, #0
 800dc30:	9902      	ldr	r1, [sp, #8]
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	2201      	movs	r2, #1
 800dc36:	4648      	mov	r0, r9
 800dc38:	f000 fa9a 	bl	800e170 <__lshift>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	9002      	str	r0, [sp, #8]
 800dc40:	f000 fb02 	bl	800e248 <__mcmp>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	dcb4      	bgt.n	800dbb2 <_dtoa_r+0xa82>
 800dc48:	d102      	bne.n	800dc50 <_dtoa_r+0xb20>
 800dc4a:	9b00      	ldr	r3, [sp, #0]
 800dc4c:	07db      	lsls	r3, r3, #31
 800dc4e:	d4b0      	bmi.n	800dbb2 <_dtoa_r+0xa82>
 800dc50:	4633      	mov	r3, r6
 800dc52:	461e      	mov	r6, r3
 800dc54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc58:	2a30      	cmp	r2, #48	@ 0x30
 800dc5a:	d0fa      	beq.n	800dc52 <_dtoa_r+0xb22>
 800dc5c:	e4b5      	b.n	800d5ca <_dtoa_r+0x49a>
 800dc5e:	459a      	cmp	sl, r3
 800dc60:	d1a8      	bne.n	800dbb4 <_dtoa_r+0xa84>
 800dc62:	2331      	movs	r3, #49	@ 0x31
 800dc64:	f108 0801 	add.w	r8, r8, #1
 800dc68:	f88a 3000 	strb.w	r3, [sl]
 800dc6c:	e4ad      	b.n	800d5ca <_dtoa_r+0x49a>
 800dc6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dccc <_dtoa_r+0xb9c>
 800dc74:	b11b      	cbz	r3, 800dc7e <_dtoa_r+0xb4e>
 800dc76:	f10a 0308 	add.w	r3, sl, #8
 800dc7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	4650      	mov	r0, sl
 800dc80:	b017      	add	sp, #92	@ 0x5c
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	9b07      	ldr	r3, [sp, #28]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	f77f ae2e 	ble.w	800d8ea <_dtoa_r+0x7ba>
 800dc8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc90:	9308      	str	r3, [sp, #32]
 800dc92:	2001      	movs	r0, #1
 800dc94:	e64d      	b.n	800d932 <_dtoa_r+0x802>
 800dc96:	f1bb 0f00 	cmp.w	fp, #0
 800dc9a:	f77f aed9 	ble.w	800da50 <_dtoa_r+0x920>
 800dc9e:	4656      	mov	r6, sl
 800dca0:	9802      	ldr	r0, [sp, #8]
 800dca2:	4621      	mov	r1, r4
 800dca4:	f7ff f9bc 	bl	800d020 <quorem>
 800dca8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dcac:	f806 3b01 	strb.w	r3, [r6], #1
 800dcb0:	eba6 020a 	sub.w	r2, r6, sl
 800dcb4:	4593      	cmp	fp, r2
 800dcb6:	ddb4      	ble.n	800dc22 <_dtoa_r+0xaf2>
 800dcb8:	9902      	ldr	r1, [sp, #8]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	220a      	movs	r2, #10
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f000 f8b2 	bl	800de28 <__multadd>
 800dcc4:	9002      	str	r0, [sp, #8]
 800dcc6:	e7eb      	b.n	800dca0 <_dtoa_r+0xb70>
 800dcc8:	0800ed18 	.word	0x0800ed18
 800dccc:	0800ec9c 	.word	0x0800ec9c

0800dcd0 <_free_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	d041      	beq.n	800dd5c <_free_r+0x8c>
 800dcd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcdc:	1f0c      	subs	r4, r1, #4
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bfb8      	it	lt
 800dce2:	18e4      	addlt	r4, r4, r3
 800dce4:	f7fe fb7e 	bl	800c3e4 <__malloc_lock>
 800dce8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd60 <_free_r+0x90>)
 800dcea:	6813      	ldr	r3, [r2, #0]
 800dcec:	b933      	cbnz	r3, 800dcfc <_free_r+0x2c>
 800dcee:	6063      	str	r3, [r4, #4]
 800dcf0:	6014      	str	r4, [r2, #0]
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf8:	f7fe bb7a 	b.w	800c3f0 <__malloc_unlock>
 800dcfc:	42a3      	cmp	r3, r4
 800dcfe:	d908      	bls.n	800dd12 <_free_r+0x42>
 800dd00:	6820      	ldr	r0, [r4, #0]
 800dd02:	1821      	adds	r1, r4, r0
 800dd04:	428b      	cmp	r3, r1
 800dd06:	bf01      	itttt	eq
 800dd08:	6819      	ldreq	r1, [r3, #0]
 800dd0a:	685b      	ldreq	r3, [r3, #4]
 800dd0c:	1809      	addeq	r1, r1, r0
 800dd0e:	6021      	streq	r1, [r4, #0]
 800dd10:	e7ed      	b.n	800dcee <_free_r+0x1e>
 800dd12:	461a      	mov	r2, r3
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	b10b      	cbz	r3, 800dd1c <_free_r+0x4c>
 800dd18:	42a3      	cmp	r3, r4
 800dd1a:	d9fa      	bls.n	800dd12 <_free_r+0x42>
 800dd1c:	6811      	ldr	r1, [r2, #0]
 800dd1e:	1850      	adds	r0, r2, r1
 800dd20:	42a0      	cmp	r0, r4
 800dd22:	d10b      	bne.n	800dd3c <_free_r+0x6c>
 800dd24:	6820      	ldr	r0, [r4, #0]
 800dd26:	4401      	add	r1, r0
 800dd28:	1850      	adds	r0, r2, r1
 800dd2a:	4283      	cmp	r3, r0
 800dd2c:	6011      	str	r1, [r2, #0]
 800dd2e:	d1e0      	bne.n	800dcf2 <_free_r+0x22>
 800dd30:	6818      	ldr	r0, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	6053      	str	r3, [r2, #4]
 800dd36:	4408      	add	r0, r1
 800dd38:	6010      	str	r0, [r2, #0]
 800dd3a:	e7da      	b.n	800dcf2 <_free_r+0x22>
 800dd3c:	d902      	bls.n	800dd44 <_free_r+0x74>
 800dd3e:	230c      	movs	r3, #12
 800dd40:	602b      	str	r3, [r5, #0]
 800dd42:	e7d6      	b.n	800dcf2 <_free_r+0x22>
 800dd44:	6820      	ldr	r0, [r4, #0]
 800dd46:	1821      	adds	r1, r4, r0
 800dd48:	428b      	cmp	r3, r1
 800dd4a:	bf04      	itt	eq
 800dd4c:	6819      	ldreq	r1, [r3, #0]
 800dd4e:	685b      	ldreq	r3, [r3, #4]
 800dd50:	6063      	str	r3, [r4, #4]
 800dd52:	bf04      	itt	eq
 800dd54:	1809      	addeq	r1, r1, r0
 800dd56:	6021      	streq	r1, [r4, #0]
 800dd58:	6054      	str	r4, [r2, #4]
 800dd5a:	e7ca      	b.n	800dcf2 <_free_r+0x22>
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	bf00      	nop
 800dd60:	200020c8 	.word	0x200020c8

0800dd64 <_Balloc>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	69c6      	ldr	r6, [r0, #28]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	b976      	cbnz	r6, 800dd8c <_Balloc+0x28>
 800dd6e:	2010      	movs	r0, #16
 800dd70:	f7fe fa86 	bl	800c280 <malloc>
 800dd74:	4602      	mov	r2, r0
 800dd76:	61e0      	str	r0, [r4, #28]
 800dd78:	b920      	cbnz	r0, 800dd84 <_Balloc+0x20>
 800dd7a:	4b18      	ldr	r3, [pc, #96]	@ (800dddc <_Balloc+0x78>)
 800dd7c:	4818      	ldr	r0, [pc, #96]	@ (800dde0 <_Balloc+0x7c>)
 800dd7e:	216b      	movs	r1, #107	@ 0x6b
 800dd80:	f7fe fa60 	bl	800c244 <__assert_func>
 800dd84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd88:	6006      	str	r6, [r0, #0]
 800dd8a:	60c6      	str	r6, [r0, #12]
 800dd8c:	69e6      	ldr	r6, [r4, #28]
 800dd8e:	68f3      	ldr	r3, [r6, #12]
 800dd90:	b183      	cbz	r3, 800ddb4 <_Balloc+0x50>
 800dd92:	69e3      	ldr	r3, [r4, #28]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd9a:	b9b8      	cbnz	r0, 800ddcc <_Balloc+0x68>
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	fa01 f605 	lsl.w	r6, r1, r5
 800dda2:	1d72      	adds	r2, r6, #5
 800dda4:	0092      	lsls	r2, r2, #2
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 fe1c 	bl	800e9e4 <_calloc_r>
 800ddac:	b160      	cbz	r0, 800ddc8 <_Balloc+0x64>
 800ddae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddb2:	e00e      	b.n	800ddd2 <_Balloc+0x6e>
 800ddb4:	2221      	movs	r2, #33	@ 0x21
 800ddb6:	2104      	movs	r1, #4
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fe13 	bl	800e9e4 <_calloc_r>
 800ddbe:	69e3      	ldr	r3, [r4, #28]
 800ddc0:	60f0      	str	r0, [r6, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e4      	bne.n	800dd92 <_Balloc+0x2e>
 800ddc8:	2000      	movs	r0, #0
 800ddca:	bd70      	pop	{r4, r5, r6, pc}
 800ddcc:	6802      	ldr	r2, [r0, #0]
 800ddce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddd8:	e7f7      	b.n	800ddca <_Balloc+0x66>
 800ddda:	bf00      	nop
 800dddc:	0800eca9 	.word	0x0800eca9
 800dde0:	0800ed29 	.word	0x0800ed29

0800dde4 <_Bfree>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	69c6      	ldr	r6, [r0, #28]
 800dde8:	4605      	mov	r5, r0
 800ddea:	460c      	mov	r4, r1
 800ddec:	b976      	cbnz	r6, 800de0c <_Bfree+0x28>
 800ddee:	2010      	movs	r0, #16
 800ddf0:	f7fe fa46 	bl	800c280 <malloc>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	61e8      	str	r0, [r5, #28]
 800ddf8:	b920      	cbnz	r0, 800de04 <_Bfree+0x20>
 800ddfa:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <_Bfree+0x3c>)
 800ddfc:	4809      	ldr	r0, [pc, #36]	@ (800de24 <_Bfree+0x40>)
 800ddfe:	218f      	movs	r1, #143	@ 0x8f
 800de00:	f7fe fa20 	bl	800c244 <__assert_func>
 800de04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de08:	6006      	str	r6, [r0, #0]
 800de0a:	60c6      	str	r6, [r0, #12]
 800de0c:	b13c      	cbz	r4, 800de1e <_Bfree+0x3a>
 800de0e:	69eb      	ldr	r3, [r5, #28]
 800de10:	6862      	ldr	r2, [r4, #4]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de18:	6021      	str	r1, [r4, #0]
 800de1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	0800eca9 	.word	0x0800eca9
 800de24:	0800ed29 	.word	0x0800ed29

0800de28 <__multadd>:
 800de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de2c:	690d      	ldr	r5, [r1, #16]
 800de2e:	4607      	mov	r7, r0
 800de30:	460c      	mov	r4, r1
 800de32:	461e      	mov	r6, r3
 800de34:	f101 0c14 	add.w	ip, r1, #20
 800de38:	2000      	movs	r0, #0
 800de3a:	f8dc 3000 	ldr.w	r3, [ip]
 800de3e:	b299      	uxth	r1, r3
 800de40:	fb02 6101 	mla	r1, r2, r1, r6
 800de44:	0c1e      	lsrs	r6, r3, #16
 800de46:	0c0b      	lsrs	r3, r1, #16
 800de48:	fb02 3306 	mla	r3, r2, r6, r3
 800de4c:	b289      	uxth	r1, r1
 800de4e:	3001      	adds	r0, #1
 800de50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de54:	4285      	cmp	r5, r0
 800de56:	f84c 1b04 	str.w	r1, [ip], #4
 800de5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de5e:	dcec      	bgt.n	800de3a <__multadd+0x12>
 800de60:	b30e      	cbz	r6, 800dea6 <__multadd+0x7e>
 800de62:	68a3      	ldr	r3, [r4, #8]
 800de64:	42ab      	cmp	r3, r5
 800de66:	dc19      	bgt.n	800de9c <__multadd+0x74>
 800de68:	6861      	ldr	r1, [r4, #4]
 800de6a:	4638      	mov	r0, r7
 800de6c:	3101      	adds	r1, #1
 800de6e:	f7ff ff79 	bl	800dd64 <_Balloc>
 800de72:	4680      	mov	r8, r0
 800de74:	b928      	cbnz	r0, 800de82 <__multadd+0x5a>
 800de76:	4602      	mov	r2, r0
 800de78:	4b0c      	ldr	r3, [pc, #48]	@ (800deac <__multadd+0x84>)
 800de7a:	480d      	ldr	r0, [pc, #52]	@ (800deb0 <__multadd+0x88>)
 800de7c:	21ba      	movs	r1, #186	@ 0xba
 800de7e:	f7fe f9e1 	bl	800c244 <__assert_func>
 800de82:	6922      	ldr	r2, [r4, #16]
 800de84:	3202      	adds	r2, #2
 800de86:	f104 010c 	add.w	r1, r4, #12
 800de8a:	0092      	lsls	r2, r2, #2
 800de8c:	300c      	adds	r0, #12
 800de8e:	f7ff f8b2 	bl	800cff6 <memcpy>
 800de92:	4621      	mov	r1, r4
 800de94:	4638      	mov	r0, r7
 800de96:	f7ff ffa5 	bl	800dde4 <_Bfree>
 800de9a:	4644      	mov	r4, r8
 800de9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dea0:	3501      	adds	r5, #1
 800dea2:	615e      	str	r6, [r3, #20]
 800dea4:	6125      	str	r5, [r4, #16]
 800dea6:	4620      	mov	r0, r4
 800dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deac:	0800ed18 	.word	0x0800ed18
 800deb0:	0800ed29 	.word	0x0800ed29

0800deb4 <__hi0bits>:
 800deb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800deb8:	4603      	mov	r3, r0
 800deba:	bf36      	itet	cc
 800debc:	0403      	lslcc	r3, r0, #16
 800debe:	2000      	movcs	r0, #0
 800dec0:	2010      	movcc	r0, #16
 800dec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dec6:	bf3c      	itt	cc
 800dec8:	021b      	lslcc	r3, r3, #8
 800deca:	3008      	addcc	r0, #8
 800decc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ded0:	bf3c      	itt	cc
 800ded2:	011b      	lslcc	r3, r3, #4
 800ded4:	3004      	addcc	r0, #4
 800ded6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deda:	bf3c      	itt	cc
 800dedc:	009b      	lslcc	r3, r3, #2
 800dede:	3002      	addcc	r0, #2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	db05      	blt.n	800def0 <__hi0bits+0x3c>
 800dee4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dee8:	f100 0001 	add.w	r0, r0, #1
 800deec:	bf08      	it	eq
 800deee:	2020      	moveq	r0, #32
 800def0:	4770      	bx	lr

0800def2 <__lo0bits>:
 800def2:	6803      	ldr	r3, [r0, #0]
 800def4:	4602      	mov	r2, r0
 800def6:	f013 0007 	ands.w	r0, r3, #7
 800defa:	d00b      	beq.n	800df14 <__lo0bits+0x22>
 800defc:	07d9      	lsls	r1, r3, #31
 800defe:	d421      	bmi.n	800df44 <__lo0bits+0x52>
 800df00:	0798      	lsls	r0, r3, #30
 800df02:	bf49      	itett	mi
 800df04:	085b      	lsrmi	r3, r3, #1
 800df06:	089b      	lsrpl	r3, r3, #2
 800df08:	2001      	movmi	r0, #1
 800df0a:	6013      	strmi	r3, [r2, #0]
 800df0c:	bf5c      	itt	pl
 800df0e:	6013      	strpl	r3, [r2, #0]
 800df10:	2002      	movpl	r0, #2
 800df12:	4770      	bx	lr
 800df14:	b299      	uxth	r1, r3
 800df16:	b909      	cbnz	r1, 800df1c <__lo0bits+0x2a>
 800df18:	0c1b      	lsrs	r3, r3, #16
 800df1a:	2010      	movs	r0, #16
 800df1c:	b2d9      	uxtb	r1, r3
 800df1e:	b909      	cbnz	r1, 800df24 <__lo0bits+0x32>
 800df20:	3008      	adds	r0, #8
 800df22:	0a1b      	lsrs	r3, r3, #8
 800df24:	0719      	lsls	r1, r3, #28
 800df26:	bf04      	itt	eq
 800df28:	091b      	lsreq	r3, r3, #4
 800df2a:	3004      	addeq	r0, #4
 800df2c:	0799      	lsls	r1, r3, #30
 800df2e:	bf04      	itt	eq
 800df30:	089b      	lsreq	r3, r3, #2
 800df32:	3002      	addeq	r0, #2
 800df34:	07d9      	lsls	r1, r3, #31
 800df36:	d403      	bmi.n	800df40 <__lo0bits+0x4e>
 800df38:	085b      	lsrs	r3, r3, #1
 800df3a:	f100 0001 	add.w	r0, r0, #1
 800df3e:	d003      	beq.n	800df48 <__lo0bits+0x56>
 800df40:	6013      	str	r3, [r2, #0]
 800df42:	4770      	bx	lr
 800df44:	2000      	movs	r0, #0
 800df46:	4770      	bx	lr
 800df48:	2020      	movs	r0, #32
 800df4a:	4770      	bx	lr

0800df4c <__i2b>:
 800df4c:	b510      	push	{r4, lr}
 800df4e:	460c      	mov	r4, r1
 800df50:	2101      	movs	r1, #1
 800df52:	f7ff ff07 	bl	800dd64 <_Balloc>
 800df56:	4602      	mov	r2, r0
 800df58:	b928      	cbnz	r0, 800df66 <__i2b+0x1a>
 800df5a:	4b05      	ldr	r3, [pc, #20]	@ (800df70 <__i2b+0x24>)
 800df5c:	4805      	ldr	r0, [pc, #20]	@ (800df74 <__i2b+0x28>)
 800df5e:	f240 1145 	movw	r1, #325	@ 0x145
 800df62:	f7fe f96f 	bl	800c244 <__assert_func>
 800df66:	2301      	movs	r3, #1
 800df68:	6144      	str	r4, [r0, #20]
 800df6a:	6103      	str	r3, [r0, #16]
 800df6c:	bd10      	pop	{r4, pc}
 800df6e:	bf00      	nop
 800df70:	0800ed18 	.word	0x0800ed18
 800df74:	0800ed29 	.word	0x0800ed29

0800df78 <__multiply>:
 800df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	4617      	mov	r7, r2
 800df7e:	690a      	ldr	r2, [r1, #16]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	429a      	cmp	r2, r3
 800df84:	bfa8      	it	ge
 800df86:	463b      	movge	r3, r7
 800df88:	4689      	mov	r9, r1
 800df8a:	bfa4      	itt	ge
 800df8c:	460f      	movge	r7, r1
 800df8e:	4699      	movge	r9, r3
 800df90:	693d      	ldr	r5, [r7, #16]
 800df92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	eb05 060a 	add.w	r6, r5, sl
 800df9e:	42b3      	cmp	r3, r6
 800dfa0:	b085      	sub	sp, #20
 800dfa2:	bfb8      	it	lt
 800dfa4:	3101      	addlt	r1, #1
 800dfa6:	f7ff fedd 	bl	800dd64 <_Balloc>
 800dfaa:	b930      	cbnz	r0, 800dfba <__multiply+0x42>
 800dfac:	4602      	mov	r2, r0
 800dfae:	4b41      	ldr	r3, [pc, #260]	@ (800e0b4 <__multiply+0x13c>)
 800dfb0:	4841      	ldr	r0, [pc, #260]	@ (800e0b8 <__multiply+0x140>)
 800dfb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dfb6:	f7fe f945 	bl	800c244 <__assert_func>
 800dfba:	f100 0414 	add.w	r4, r0, #20
 800dfbe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dfc2:	4623      	mov	r3, r4
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4573      	cmp	r3, lr
 800dfc8:	d320      	bcc.n	800e00c <__multiply+0x94>
 800dfca:	f107 0814 	add.w	r8, r7, #20
 800dfce:	f109 0114 	add.w	r1, r9, #20
 800dfd2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dfd6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	1beb      	subs	r3, r5, r7
 800dfde:	3b15      	subs	r3, #21
 800dfe0:	f023 0303 	bic.w	r3, r3, #3
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	3715      	adds	r7, #21
 800dfe8:	42bd      	cmp	r5, r7
 800dfea:	bf38      	it	cc
 800dfec:	2304      	movcc	r3, #4
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	9b02      	ldr	r3, [sp, #8]
 800dff2:	9103      	str	r1, [sp, #12]
 800dff4:	428b      	cmp	r3, r1
 800dff6:	d80c      	bhi.n	800e012 <__multiply+0x9a>
 800dff8:	2e00      	cmp	r6, #0
 800dffa:	dd03      	ble.n	800e004 <__multiply+0x8c>
 800dffc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e000:	2b00      	cmp	r3, #0
 800e002:	d055      	beq.n	800e0b0 <__multiply+0x138>
 800e004:	6106      	str	r6, [r0, #16]
 800e006:	b005      	add	sp, #20
 800e008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00c:	f843 2b04 	str.w	r2, [r3], #4
 800e010:	e7d9      	b.n	800dfc6 <__multiply+0x4e>
 800e012:	f8b1 a000 	ldrh.w	sl, [r1]
 800e016:	f1ba 0f00 	cmp.w	sl, #0
 800e01a:	d01f      	beq.n	800e05c <__multiply+0xe4>
 800e01c:	46c4      	mov	ip, r8
 800e01e:	46a1      	mov	r9, r4
 800e020:	2700      	movs	r7, #0
 800e022:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e026:	f8d9 3000 	ldr.w	r3, [r9]
 800e02a:	fa1f fb82 	uxth.w	fp, r2
 800e02e:	b29b      	uxth	r3, r3
 800e030:	fb0a 330b 	mla	r3, sl, fp, r3
 800e034:	443b      	add	r3, r7
 800e036:	f8d9 7000 	ldr.w	r7, [r9]
 800e03a:	0c12      	lsrs	r2, r2, #16
 800e03c:	0c3f      	lsrs	r7, r7, #16
 800e03e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e042:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e046:	b29b      	uxth	r3, r3
 800e048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e04c:	4565      	cmp	r5, ip
 800e04e:	f849 3b04 	str.w	r3, [r9], #4
 800e052:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e056:	d8e4      	bhi.n	800e022 <__multiply+0xaa>
 800e058:	9b01      	ldr	r3, [sp, #4]
 800e05a:	50e7      	str	r7, [r4, r3]
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e062:	3104      	adds	r1, #4
 800e064:	f1b9 0f00 	cmp.w	r9, #0
 800e068:	d020      	beq.n	800e0ac <__multiply+0x134>
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	4647      	mov	r7, r8
 800e06e:	46a4      	mov	ip, r4
 800e070:	f04f 0a00 	mov.w	sl, #0
 800e074:	f8b7 b000 	ldrh.w	fp, [r7]
 800e078:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e07c:	fb09 220b 	mla	r2, r9, fp, r2
 800e080:	4452      	add	r2, sl
 800e082:	b29b      	uxth	r3, r3
 800e084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e088:	f84c 3b04 	str.w	r3, [ip], #4
 800e08c:	f857 3b04 	ldr.w	r3, [r7], #4
 800e090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e094:	f8bc 3000 	ldrh.w	r3, [ip]
 800e098:	fb09 330a 	mla	r3, r9, sl, r3
 800e09c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e0a0:	42bd      	cmp	r5, r7
 800e0a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0a6:	d8e5      	bhi.n	800e074 <__multiply+0xfc>
 800e0a8:	9a01      	ldr	r2, [sp, #4]
 800e0aa:	50a3      	str	r3, [r4, r2]
 800e0ac:	3404      	adds	r4, #4
 800e0ae:	e79f      	b.n	800dff0 <__multiply+0x78>
 800e0b0:	3e01      	subs	r6, #1
 800e0b2:	e7a1      	b.n	800dff8 <__multiply+0x80>
 800e0b4:	0800ed18 	.word	0x0800ed18
 800e0b8:	0800ed29 	.word	0x0800ed29

0800e0bc <__pow5mult>:
 800e0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c0:	4615      	mov	r5, r2
 800e0c2:	f012 0203 	ands.w	r2, r2, #3
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	460e      	mov	r6, r1
 800e0ca:	d007      	beq.n	800e0dc <__pow5mult+0x20>
 800e0cc:	4c25      	ldr	r4, [pc, #148]	@ (800e164 <__pow5mult+0xa8>)
 800e0ce:	3a01      	subs	r2, #1
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0d6:	f7ff fea7 	bl	800de28 <__multadd>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	10ad      	asrs	r5, r5, #2
 800e0de:	d03d      	beq.n	800e15c <__pow5mult+0xa0>
 800e0e0:	69fc      	ldr	r4, [r7, #28]
 800e0e2:	b97c      	cbnz	r4, 800e104 <__pow5mult+0x48>
 800e0e4:	2010      	movs	r0, #16
 800e0e6:	f7fe f8cb 	bl	800c280 <malloc>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	61f8      	str	r0, [r7, #28]
 800e0ee:	b928      	cbnz	r0, 800e0fc <__pow5mult+0x40>
 800e0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e168 <__pow5mult+0xac>)
 800e0f2:	481e      	ldr	r0, [pc, #120]	@ (800e16c <__pow5mult+0xb0>)
 800e0f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0f8:	f7fe f8a4 	bl	800c244 <__assert_func>
 800e0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e100:	6004      	str	r4, [r0, #0]
 800e102:	60c4      	str	r4, [r0, #12]
 800e104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e10c:	b94c      	cbnz	r4, 800e122 <__pow5mult+0x66>
 800e10e:	f240 2171 	movw	r1, #625	@ 0x271
 800e112:	4638      	mov	r0, r7
 800e114:	f7ff ff1a 	bl	800df4c <__i2b>
 800e118:	2300      	movs	r3, #0
 800e11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e11e:	4604      	mov	r4, r0
 800e120:	6003      	str	r3, [r0, #0]
 800e122:	f04f 0900 	mov.w	r9, #0
 800e126:	07eb      	lsls	r3, r5, #31
 800e128:	d50a      	bpl.n	800e140 <__pow5mult+0x84>
 800e12a:	4631      	mov	r1, r6
 800e12c:	4622      	mov	r2, r4
 800e12e:	4638      	mov	r0, r7
 800e130:	f7ff ff22 	bl	800df78 <__multiply>
 800e134:	4631      	mov	r1, r6
 800e136:	4680      	mov	r8, r0
 800e138:	4638      	mov	r0, r7
 800e13a:	f7ff fe53 	bl	800dde4 <_Bfree>
 800e13e:	4646      	mov	r6, r8
 800e140:	106d      	asrs	r5, r5, #1
 800e142:	d00b      	beq.n	800e15c <__pow5mult+0xa0>
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	b938      	cbnz	r0, 800e158 <__pow5mult+0x9c>
 800e148:	4622      	mov	r2, r4
 800e14a:	4621      	mov	r1, r4
 800e14c:	4638      	mov	r0, r7
 800e14e:	f7ff ff13 	bl	800df78 <__multiply>
 800e152:	6020      	str	r0, [r4, #0]
 800e154:	f8c0 9000 	str.w	r9, [r0]
 800e158:	4604      	mov	r4, r0
 800e15a:	e7e4      	b.n	800e126 <__pow5mult+0x6a>
 800e15c:	4630      	mov	r0, r6
 800e15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e162:	bf00      	nop
 800e164:	0800eda0 	.word	0x0800eda0
 800e168:	0800eca9 	.word	0x0800eca9
 800e16c:	0800ed29 	.word	0x0800ed29

0800e170 <__lshift>:
 800e170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e174:	460c      	mov	r4, r1
 800e176:	6849      	ldr	r1, [r1, #4]
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	4607      	mov	r7, r0
 800e182:	4691      	mov	r9, r2
 800e184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e188:	f108 0601 	add.w	r6, r8, #1
 800e18c:	42b3      	cmp	r3, r6
 800e18e:	db0b      	blt.n	800e1a8 <__lshift+0x38>
 800e190:	4638      	mov	r0, r7
 800e192:	f7ff fde7 	bl	800dd64 <_Balloc>
 800e196:	4605      	mov	r5, r0
 800e198:	b948      	cbnz	r0, 800e1ae <__lshift+0x3e>
 800e19a:	4602      	mov	r2, r0
 800e19c:	4b28      	ldr	r3, [pc, #160]	@ (800e240 <__lshift+0xd0>)
 800e19e:	4829      	ldr	r0, [pc, #164]	@ (800e244 <__lshift+0xd4>)
 800e1a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e1a4:	f7fe f84e 	bl	800c244 <__assert_func>
 800e1a8:	3101      	adds	r1, #1
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	e7ee      	b.n	800e18c <__lshift+0x1c>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f100 0114 	add.w	r1, r0, #20
 800e1b4:	f100 0210 	add.w	r2, r0, #16
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	4553      	cmp	r3, sl
 800e1bc:	db33      	blt.n	800e226 <__lshift+0xb6>
 800e1be:	6920      	ldr	r0, [r4, #16]
 800e1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1c4:	f104 0314 	add.w	r3, r4, #20
 800e1c8:	f019 091f 	ands.w	r9, r9, #31
 800e1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1d4:	d02b      	beq.n	800e22e <__lshift+0xbe>
 800e1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800e1da:	468a      	mov	sl, r1
 800e1dc:	2200      	movs	r2, #0
 800e1de:	6818      	ldr	r0, [r3, #0]
 800e1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800e1e4:	4310      	orrs	r0, r2
 800e1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ee:	459c      	cmp	ip, r3
 800e1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1f4:	d8f3      	bhi.n	800e1de <__lshift+0x6e>
 800e1f6:	ebac 0304 	sub.w	r3, ip, r4
 800e1fa:	3b15      	subs	r3, #21
 800e1fc:	f023 0303 	bic.w	r3, r3, #3
 800e200:	3304      	adds	r3, #4
 800e202:	f104 0015 	add.w	r0, r4, #21
 800e206:	4560      	cmp	r0, ip
 800e208:	bf88      	it	hi
 800e20a:	2304      	movhi	r3, #4
 800e20c:	50ca      	str	r2, [r1, r3]
 800e20e:	b10a      	cbz	r2, 800e214 <__lshift+0xa4>
 800e210:	f108 0602 	add.w	r6, r8, #2
 800e214:	3e01      	subs	r6, #1
 800e216:	4638      	mov	r0, r7
 800e218:	612e      	str	r6, [r5, #16]
 800e21a:	4621      	mov	r1, r4
 800e21c:	f7ff fde2 	bl	800dde4 <_Bfree>
 800e220:	4628      	mov	r0, r5
 800e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e226:	f842 0f04 	str.w	r0, [r2, #4]!
 800e22a:	3301      	adds	r3, #1
 800e22c:	e7c5      	b.n	800e1ba <__lshift+0x4a>
 800e22e:	3904      	subs	r1, #4
 800e230:	f853 2b04 	ldr.w	r2, [r3], #4
 800e234:	f841 2f04 	str.w	r2, [r1, #4]!
 800e238:	459c      	cmp	ip, r3
 800e23a:	d8f9      	bhi.n	800e230 <__lshift+0xc0>
 800e23c:	e7ea      	b.n	800e214 <__lshift+0xa4>
 800e23e:	bf00      	nop
 800e240:	0800ed18 	.word	0x0800ed18
 800e244:	0800ed29 	.word	0x0800ed29

0800e248 <__mcmp>:
 800e248:	690a      	ldr	r2, [r1, #16]
 800e24a:	4603      	mov	r3, r0
 800e24c:	6900      	ldr	r0, [r0, #16]
 800e24e:	1a80      	subs	r0, r0, r2
 800e250:	b530      	push	{r4, r5, lr}
 800e252:	d10e      	bne.n	800e272 <__mcmp+0x2a>
 800e254:	3314      	adds	r3, #20
 800e256:	3114      	adds	r1, #20
 800e258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e25c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e268:	4295      	cmp	r5, r2
 800e26a:	d003      	beq.n	800e274 <__mcmp+0x2c>
 800e26c:	d205      	bcs.n	800e27a <__mcmp+0x32>
 800e26e:	f04f 30ff 	mov.w	r0, #4294967295
 800e272:	bd30      	pop	{r4, r5, pc}
 800e274:	42a3      	cmp	r3, r4
 800e276:	d3f3      	bcc.n	800e260 <__mcmp+0x18>
 800e278:	e7fb      	b.n	800e272 <__mcmp+0x2a>
 800e27a:	2001      	movs	r0, #1
 800e27c:	e7f9      	b.n	800e272 <__mcmp+0x2a>
	...

0800e280 <__mdiff>:
 800e280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e284:	4689      	mov	r9, r1
 800e286:	4606      	mov	r6, r0
 800e288:	4611      	mov	r1, r2
 800e28a:	4648      	mov	r0, r9
 800e28c:	4614      	mov	r4, r2
 800e28e:	f7ff ffdb 	bl	800e248 <__mcmp>
 800e292:	1e05      	subs	r5, r0, #0
 800e294:	d112      	bne.n	800e2bc <__mdiff+0x3c>
 800e296:	4629      	mov	r1, r5
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff fd63 	bl	800dd64 <_Balloc>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	b928      	cbnz	r0, 800e2ae <__mdiff+0x2e>
 800e2a2:	4b3f      	ldr	r3, [pc, #252]	@ (800e3a0 <__mdiff+0x120>)
 800e2a4:	f240 2137 	movw	r1, #567	@ 0x237
 800e2a8:	483e      	ldr	r0, [pc, #248]	@ (800e3a4 <__mdiff+0x124>)
 800e2aa:	f7fd ffcb 	bl	800c244 <__assert_func>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	b003      	add	sp, #12
 800e2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2bc:	bfbc      	itt	lt
 800e2be:	464b      	movlt	r3, r9
 800e2c0:	46a1      	movlt	r9, r4
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e2c8:	bfba      	itte	lt
 800e2ca:	461c      	movlt	r4, r3
 800e2cc:	2501      	movlt	r5, #1
 800e2ce:	2500      	movge	r5, #0
 800e2d0:	f7ff fd48 	bl	800dd64 <_Balloc>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	b918      	cbnz	r0, 800e2e0 <__mdiff+0x60>
 800e2d8:	4b31      	ldr	r3, [pc, #196]	@ (800e3a0 <__mdiff+0x120>)
 800e2da:	f240 2145 	movw	r1, #581	@ 0x245
 800e2de:	e7e3      	b.n	800e2a8 <__mdiff+0x28>
 800e2e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e2e4:	6926      	ldr	r6, [r4, #16]
 800e2e6:	60c5      	str	r5, [r0, #12]
 800e2e8:	f109 0310 	add.w	r3, r9, #16
 800e2ec:	f109 0514 	add.w	r5, r9, #20
 800e2f0:	f104 0e14 	add.w	lr, r4, #20
 800e2f4:	f100 0b14 	add.w	fp, r0, #20
 800e2f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	46d9      	mov	r9, fp
 800e304:	f04f 0c00 	mov.w	ip, #0
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e30e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	fa1f f38a 	uxth.w	r3, sl
 800e318:	4619      	mov	r1, r3
 800e31a:	b283      	uxth	r3, r0
 800e31c:	1acb      	subs	r3, r1, r3
 800e31e:	0c00      	lsrs	r0, r0, #16
 800e320:	4463      	add	r3, ip
 800e322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e330:	4576      	cmp	r6, lr
 800e332:	f849 3b04 	str.w	r3, [r9], #4
 800e336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e33a:	d8e5      	bhi.n	800e308 <__mdiff+0x88>
 800e33c:	1b33      	subs	r3, r6, r4
 800e33e:	3b15      	subs	r3, #21
 800e340:	f023 0303 	bic.w	r3, r3, #3
 800e344:	3415      	adds	r4, #21
 800e346:	3304      	adds	r3, #4
 800e348:	42a6      	cmp	r6, r4
 800e34a:	bf38      	it	cc
 800e34c:	2304      	movcc	r3, #4
 800e34e:	441d      	add	r5, r3
 800e350:	445b      	add	r3, fp
 800e352:	461e      	mov	r6, r3
 800e354:	462c      	mov	r4, r5
 800e356:	4544      	cmp	r4, r8
 800e358:	d30e      	bcc.n	800e378 <__mdiff+0xf8>
 800e35a:	f108 0103 	add.w	r1, r8, #3
 800e35e:	1b49      	subs	r1, r1, r5
 800e360:	f021 0103 	bic.w	r1, r1, #3
 800e364:	3d03      	subs	r5, #3
 800e366:	45a8      	cmp	r8, r5
 800e368:	bf38      	it	cc
 800e36a:	2100      	movcc	r1, #0
 800e36c:	440b      	add	r3, r1
 800e36e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e372:	b191      	cbz	r1, 800e39a <__mdiff+0x11a>
 800e374:	6117      	str	r7, [r2, #16]
 800e376:	e79d      	b.n	800e2b4 <__mdiff+0x34>
 800e378:	f854 1b04 	ldr.w	r1, [r4], #4
 800e37c:	46e6      	mov	lr, ip
 800e37e:	0c08      	lsrs	r0, r1, #16
 800e380:	fa1c fc81 	uxtah	ip, ip, r1
 800e384:	4471      	add	r1, lr
 800e386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e38a:	b289      	uxth	r1, r1
 800e38c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e390:	f846 1b04 	str.w	r1, [r6], #4
 800e394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e398:	e7dd      	b.n	800e356 <__mdiff+0xd6>
 800e39a:	3f01      	subs	r7, #1
 800e39c:	e7e7      	b.n	800e36e <__mdiff+0xee>
 800e39e:	bf00      	nop
 800e3a0:	0800ed18 	.word	0x0800ed18
 800e3a4:	0800ed29 	.word	0x0800ed29

0800e3a8 <__d2b>:
 800e3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	ec59 8b10 	vmov	r8, r9, d0
 800e3b4:	4616      	mov	r6, r2
 800e3b6:	f7ff fcd5 	bl	800dd64 <_Balloc>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	b930      	cbnz	r0, 800e3cc <__d2b+0x24>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	4b23      	ldr	r3, [pc, #140]	@ (800e450 <__d2b+0xa8>)
 800e3c2:	4824      	ldr	r0, [pc, #144]	@ (800e454 <__d2b+0xac>)
 800e3c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e3c8:	f7fd ff3c 	bl	800c244 <__assert_func>
 800e3cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3d4:	b10d      	cbz	r5, 800e3da <__d2b+0x32>
 800e3d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	f1b8 0300 	subs.w	r3, r8, #0
 800e3e0:	d023      	beq.n	800e42a <__d2b+0x82>
 800e3e2:	4668      	mov	r0, sp
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	f7ff fd84 	bl	800def2 <__lo0bits>
 800e3ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e3ee:	b1d0      	cbz	r0, 800e426 <__d2b+0x7e>
 800e3f0:	f1c0 0320 	rsb	r3, r0, #32
 800e3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	40c2      	lsrs	r2, r0
 800e3fc:	6163      	str	r3, [r4, #20]
 800e3fe:	9201      	str	r2, [sp, #4]
 800e400:	9b01      	ldr	r3, [sp, #4]
 800e402:	61a3      	str	r3, [r4, #24]
 800e404:	2b00      	cmp	r3, #0
 800e406:	bf0c      	ite	eq
 800e408:	2201      	moveq	r2, #1
 800e40a:	2202      	movne	r2, #2
 800e40c:	6122      	str	r2, [r4, #16]
 800e40e:	b1a5      	cbz	r5, 800e43a <__d2b+0x92>
 800e410:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e414:	4405      	add	r5, r0
 800e416:	603d      	str	r5, [r7, #0]
 800e418:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e41c:	6030      	str	r0, [r6, #0]
 800e41e:	4620      	mov	r0, r4
 800e420:	b003      	add	sp, #12
 800e422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e426:	6161      	str	r1, [r4, #20]
 800e428:	e7ea      	b.n	800e400 <__d2b+0x58>
 800e42a:	a801      	add	r0, sp, #4
 800e42c:	f7ff fd61 	bl	800def2 <__lo0bits>
 800e430:	9b01      	ldr	r3, [sp, #4]
 800e432:	6163      	str	r3, [r4, #20]
 800e434:	3020      	adds	r0, #32
 800e436:	2201      	movs	r2, #1
 800e438:	e7e8      	b.n	800e40c <__d2b+0x64>
 800e43a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e43e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e442:	6038      	str	r0, [r7, #0]
 800e444:	6918      	ldr	r0, [r3, #16]
 800e446:	f7ff fd35 	bl	800deb4 <__hi0bits>
 800e44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e44e:	e7e5      	b.n	800e41c <__d2b+0x74>
 800e450:	0800ed18 	.word	0x0800ed18
 800e454:	0800ed29 	.word	0x0800ed29

0800e458 <__sfputc_r>:
 800e458:	6893      	ldr	r3, [r2, #8]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	b410      	push	{r4}
 800e460:	6093      	str	r3, [r2, #8]
 800e462:	da08      	bge.n	800e476 <__sfputc_r+0x1e>
 800e464:	6994      	ldr	r4, [r2, #24]
 800e466:	42a3      	cmp	r3, r4
 800e468:	db01      	blt.n	800e46e <__sfputc_r+0x16>
 800e46a:	290a      	cmp	r1, #10
 800e46c:	d103      	bne.n	800e476 <__sfputc_r+0x1e>
 800e46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e472:	f000 b9df 	b.w	800e834 <__swbuf_r>
 800e476:	6813      	ldr	r3, [r2, #0]
 800e478:	1c58      	adds	r0, r3, #1
 800e47a:	6010      	str	r0, [r2, #0]
 800e47c:	7019      	strb	r1, [r3, #0]
 800e47e:	4608      	mov	r0, r1
 800e480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <__sfputs_r>:
 800e486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e488:	4606      	mov	r6, r0
 800e48a:	460f      	mov	r7, r1
 800e48c:	4614      	mov	r4, r2
 800e48e:	18d5      	adds	r5, r2, r3
 800e490:	42ac      	cmp	r4, r5
 800e492:	d101      	bne.n	800e498 <__sfputs_r+0x12>
 800e494:	2000      	movs	r0, #0
 800e496:	e007      	b.n	800e4a8 <__sfputs_r+0x22>
 800e498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e49c:	463a      	mov	r2, r7
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f7ff ffda 	bl	800e458 <__sfputc_r>
 800e4a4:	1c43      	adds	r3, r0, #1
 800e4a6:	d1f3      	bne.n	800e490 <__sfputs_r+0xa>
 800e4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4ac <_vfiprintf_r>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	460d      	mov	r5, r1
 800e4b2:	b09d      	sub	sp, #116	@ 0x74
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	4698      	mov	r8, r3
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	b118      	cbz	r0, 800e4c4 <_vfiprintf_r+0x18>
 800e4bc:	6a03      	ldr	r3, [r0, #32]
 800e4be:	b90b      	cbnz	r3, 800e4c4 <_vfiprintf_r+0x18>
 800e4c0:	f7fe fc7e 	bl	800cdc0 <__sinit>
 800e4c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4c6:	07d9      	lsls	r1, r3, #31
 800e4c8:	d405      	bmi.n	800e4d6 <_vfiprintf_r+0x2a>
 800e4ca:	89ab      	ldrh	r3, [r5, #12]
 800e4cc:	059a      	lsls	r2, r3, #22
 800e4ce:	d402      	bmi.n	800e4d6 <_vfiprintf_r+0x2a>
 800e4d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4d2:	f7fe fd8e 	bl	800cff2 <__retarget_lock_acquire_recursive>
 800e4d6:	89ab      	ldrh	r3, [r5, #12]
 800e4d8:	071b      	lsls	r3, r3, #28
 800e4da:	d501      	bpl.n	800e4e0 <_vfiprintf_r+0x34>
 800e4dc:	692b      	ldr	r3, [r5, #16]
 800e4de:	b99b      	cbnz	r3, 800e508 <_vfiprintf_r+0x5c>
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f000 f9e4 	bl	800e8b0 <__swsetup_r>
 800e4e8:	b170      	cbz	r0, 800e508 <_vfiprintf_r+0x5c>
 800e4ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4ec:	07dc      	lsls	r4, r3, #31
 800e4ee:	d504      	bpl.n	800e4fa <_vfiprintf_r+0x4e>
 800e4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f4:	b01d      	add	sp, #116	@ 0x74
 800e4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fa:	89ab      	ldrh	r3, [r5, #12]
 800e4fc:	0598      	lsls	r0, r3, #22
 800e4fe:	d4f7      	bmi.n	800e4f0 <_vfiprintf_r+0x44>
 800e500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e502:	f7fe fd77 	bl	800cff4 <__retarget_lock_release_recursive>
 800e506:	e7f3      	b.n	800e4f0 <_vfiprintf_r+0x44>
 800e508:	2300      	movs	r3, #0
 800e50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e50c:	2320      	movs	r3, #32
 800e50e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e512:	f8cd 800c 	str.w	r8, [sp, #12]
 800e516:	2330      	movs	r3, #48	@ 0x30
 800e518:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e6c8 <_vfiprintf_r+0x21c>
 800e51c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e520:	f04f 0901 	mov.w	r9, #1
 800e524:	4623      	mov	r3, r4
 800e526:	469a      	mov	sl, r3
 800e528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e52c:	b10a      	cbz	r2, 800e532 <_vfiprintf_r+0x86>
 800e52e:	2a25      	cmp	r2, #37	@ 0x25
 800e530:	d1f9      	bne.n	800e526 <_vfiprintf_r+0x7a>
 800e532:	ebba 0b04 	subs.w	fp, sl, r4
 800e536:	d00b      	beq.n	800e550 <_vfiprintf_r+0xa4>
 800e538:	465b      	mov	r3, fp
 800e53a:	4622      	mov	r2, r4
 800e53c:	4629      	mov	r1, r5
 800e53e:	4630      	mov	r0, r6
 800e540:	f7ff ffa1 	bl	800e486 <__sfputs_r>
 800e544:	3001      	adds	r0, #1
 800e546:	f000 80a7 	beq.w	800e698 <_vfiprintf_r+0x1ec>
 800e54a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e54c:	445a      	add	r2, fp
 800e54e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e550:	f89a 3000 	ldrb.w	r3, [sl]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 809f 	beq.w	800e698 <_vfiprintf_r+0x1ec>
 800e55a:	2300      	movs	r3, #0
 800e55c:	f04f 32ff 	mov.w	r2, #4294967295
 800e560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e564:	f10a 0a01 	add.w	sl, sl, #1
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	9307      	str	r3, [sp, #28]
 800e56c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e570:	931a      	str	r3, [sp, #104]	@ 0x68
 800e572:	4654      	mov	r4, sl
 800e574:	2205      	movs	r2, #5
 800e576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e57a:	4853      	ldr	r0, [pc, #332]	@ (800e6c8 <_vfiprintf_r+0x21c>)
 800e57c:	f7f1 fe28 	bl	80001d0 <memchr>
 800e580:	9a04      	ldr	r2, [sp, #16]
 800e582:	b9d8      	cbnz	r0, 800e5bc <_vfiprintf_r+0x110>
 800e584:	06d1      	lsls	r1, r2, #27
 800e586:	bf44      	itt	mi
 800e588:	2320      	movmi	r3, #32
 800e58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e58e:	0713      	lsls	r3, r2, #28
 800e590:	bf44      	itt	mi
 800e592:	232b      	movmi	r3, #43	@ 0x2b
 800e594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e598:	f89a 3000 	ldrb.w	r3, [sl]
 800e59c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e59e:	d015      	beq.n	800e5cc <_vfiprintf_r+0x120>
 800e5a0:	9a07      	ldr	r2, [sp, #28]
 800e5a2:	4654      	mov	r4, sl
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f04f 0c0a 	mov.w	ip, #10
 800e5aa:	4621      	mov	r1, r4
 800e5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5b0:	3b30      	subs	r3, #48	@ 0x30
 800e5b2:	2b09      	cmp	r3, #9
 800e5b4:	d94b      	bls.n	800e64e <_vfiprintf_r+0x1a2>
 800e5b6:	b1b0      	cbz	r0, 800e5e6 <_vfiprintf_r+0x13a>
 800e5b8:	9207      	str	r2, [sp, #28]
 800e5ba:	e014      	b.n	800e5e6 <_vfiprintf_r+0x13a>
 800e5bc:	eba0 0308 	sub.w	r3, r0, r8
 800e5c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	9304      	str	r3, [sp, #16]
 800e5c8:	46a2      	mov	sl, r4
 800e5ca:	e7d2      	b.n	800e572 <_vfiprintf_r+0xc6>
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	1d19      	adds	r1, r3, #4
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	9103      	str	r1, [sp, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	bfbb      	ittet	lt
 800e5d8:	425b      	neglt	r3, r3
 800e5da:	f042 0202 	orrlt.w	r2, r2, #2
 800e5de:	9307      	strge	r3, [sp, #28]
 800e5e0:	9307      	strlt	r3, [sp, #28]
 800e5e2:	bfb8      	it	lt
 800e5e4:	9204      	strlt	r2, [sp, #16]
 800e5e6:	7823      	ldrb	r3, [r4, #0]
 800e5e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5ea:	d10a      	bne.n	800e602 <_vfiprintf_r+0x156>
 800e5ec:	7863      	ldrb	r3, [r4, #1]
 800e5ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5f0:	d132      	bne.n	800e658 <_vfiprintf_r+0x1ac>
 800e5f2:	9b03      	ldr	r3, [sp, #12]
 800e5f4:	1d1a      	adds	r2, r3, #4
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	9203      	str	r2, [sp, #12]
 800e5fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5fe:	3402      	adds	r4, #2
 800e600:	9305      	str	r3, [sp, #20]
 800e602:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6d8 <_vfiprintf_r+0x22c>
 800e606:	7821      	ldrb	r1, [r4, #0]
 800e608:	2203      	movs	r2, #3
 800e60a:	4650      	mov	r0, sl
 800e60c:	f7f1 fde0 	bl	80001d0 <memchr>
 800e610:	b138      	cbz	r0, 800e622 <_vfiprintf_r+0x176>
 800e612:	9b04      	ldr	r3, [sp, #16]
 800e614:	eba0 000a 	sub.w	r0, r0, sl
 800e618:	2240      	movs	r2, #64	@ 0x40
 800e61a:	4082      	lsls	r2, r0
 800e61c:	4313      	orrs	r3, r2
 800e61e:	3401      	adds	r4, #1
 800e620:	9304      	str	r3, [sp, #16]
 800e622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e626:	4829      	ldr	r0, [pc, #164]	@ (800e6cc <_vfiprintf_r+0x220>)
 800e628:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e62c:	2206      	movs	r2, #6
 800e62e:	f7f1 fdcf 	bl	80001d0 <memchr>
 800e632:	2800      	cmp	r0, #0
 800e634:	d03f      	beq.n	800e6b6 <_vfiprintf_r+0x20a>
 800e636:	4b26      	ldr	r3, [pc, #152]	@ (800e6d0 <_vfiprintf_r+0x224>)
 800e638:	bb1b      	cbnz	r3, 800e682 <_vfiprintf_r+0x1d6>
 800e63a:	9b03      	ldr	r3, [sp, #12]
 800e63c:	3307      	adds	r3, #7
 800e63e:	f023 0307 	bic.w	r3, r3, #7
 800e642:	3308      	adds	r3, #8
 800e644:	9303      	str	r3, [sp, #12]
 800e646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e648:	443b      	add	r3, r7
 800e64a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e64c:	e76a      	b.n	800e524 <_vfiprintf_r+0x78>
 800e64e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e652:	460c      	mov	r4, r1
 800e654:	2001      	movs	r0, #1
 800e656:	e7a8      	b.n	800e5aa <_vfiprintf_r+0xfe>
 800e658:	2300      	movs	r3, #0
 800e65a:	3401      	adds	r4, #1
 800e65c:	9305      	str	r3, [sp, #20]
 800e65e:	4619      	mov	r1, r3
 800e660:	f04f 0c0a 	mov.w	ip, #10
 800e664:	4620      	mov	r0, r4
 800e666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e66a:	3a30      	subs	r2, #48	@ 0x30
 800e66c:	2a09      	cmp	r2, #9
 800e66e:	d903      	bls.n	800e678 <_vfiprintf_r+0x1cc>
 800e670:	2b00      	cmp	r3, #0
 800e672:	d0c6      	beq.n	800e602 <_vfiprintf_r+0x156>
 800e674:	9105      	str	r1, [sp, #20]
 800e676:	e7c4      	b.n	800e602 <_vfiprintf_r+0x156>
 800e678:	fb0c 2101 	mla	r1, ip, r1, r2
 800e67c:	4604      	mov	r4, r0
 800e67e:	2301      	movs	r3, #1
 800e680:	e7f0      	b.n	800e664 <_vfiprintf_r+0x1b8>
 800e682:	ab03      	add	r3, sp, #12
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	462a      	mov	r2, r5
 800e688:	4b12      	ldr	r3, [pc, #72]	@ (800e6d4 <_vfiprintf_r+0x228>)
 800e68a:	a904      	add	r1, sp, #16
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7fd ff55 	bl	800c53c <_printf_float>
 800e692:	4607      	mov	r7, r0
 800e694:	1c78      	adds	r0, r7, #1
 800e696:	d1d6      	bne.n	800e646 <_vfiprintf_r+0x19a>
 800e698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e69a:	07d9      	lsls	r1, r3, #31
 800e69c:	d405      	bmi.n	800e6aa <_vfiprintf_r+0x1fe>
 800e69e:	89ab      	ldrh	r3, [r5, #12]
 800e6a0:	059a      	lsls	r2, r3, #22
 800e6a2:	d402      	bmi.n	800e6aa <_vfiprintf_r+0x1fe>
 800e6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6a6:	f7fe fca5 	bl	800cff4 <__retarget_lock_release_recursive>
 800e6aa:	89ab      	ldrh	r3, [r5, #12]
 800e6ac:	065b      	lsls	r3, r3, #25
 800e6ae:	f53f af1f 	bmi.w	800e4f0 <_vfiprintf_r+0x44>
 800e6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6b4:	e71e      	b.n	800e4f4 <_vfiprintf_r+0x48>
 800e6b6:	ab03      	add	r3, sp, #12
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	4b05      	ldr	r3, [pc, #20]	@ (800e6d4 <_vfiprintf_r+0x228>)
 800e6be:	a904      	add	r1, sp, #16
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7fe f9d3 	bl	800ca6c <_printf_i>
 800e6c6:	e7e4      	b.n	800e692 <_vfiprintf_r+0x1e6>
 800e6c8:	0800ed82 	.word	0x0800ed82
 800e6cc:	0800ed8c 	.word	0x0800ed8c
 800e6d0:	0800c53d 	.word	0x0800c53d
 800e6d4:	0800e487 	.word	0x0800e487
 800e6d8:	0800ed88 	.word	0x0800ed88

0800e6dc <__sflush_r>:
 800e6dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	0716      	lsls	r6, r2, #28
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	460c      	mov	r4, r1
 800e6ea:	d454      	bmi.n	800e796 <__sflush_r+0xba>
 800e6ec:	684b      	ldr	r3, [r1, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dc02      	bgt.n	800e6f8 <__sflush_r+0x1c>
 800e6f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	dd48      	ble.n	800e78a <__sflush_r+0xae>
 800e6f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6fa:	2e00      	cmp	r6, #0
 800e6fc:	d045      	beq.n	800e78a <__sflush_r+0xae>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e704:	682f      	ldr	r7, [r5, #0]
 800e706:	6a21      	ldr	r1, [r4, #32]
 800e708:	602b      	str	r3, [r5, #0]
 800e70a:	d030      	beq.n	800e76e <__sflush_r+0x92>
 800e70c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	0759      	lsls	r1, r3, #29
 800e712:	d505      	bpl.n	800e720 <__sflush_r+0x44>
 800e714:	6863      	ldr	r3, [r4, #4]
 800e716:	1ad2      	subs	r2, r2, r3
 800e718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e71a:	b10b      	cbz	r3, 800e720 <__sflush_r+0x44>
 800e71c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e71e:	1ad2      	subs	r2, r2, r3
 800e720:	2300      	movs	r3, #0
 800e722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e724:	6a21      	ldr	r1, [r4, #32]
 800e726:	4628      	mov	r0, r5
 800e728:	47b0      	blx	r6
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	d106      	bne.n	800e73e <__sflush_r+0x62>
 800e730:	6829      	ldr	r1, [r5, #0]
 800e732:	291d      	cmp	r1, #29
 800e734:	d82b      	bhi.n	800e78e <__sflush_r+0xb2>
 800e736:	4a2a      	ldr	r2, [pc, #168]	@ (800e7e0 <__sflush_r+0x104>)
 800e738:	40ca      	lsrs	r2, r1
 800e73a:	07d6      	lsls	r6, r2, #31
 800e73c:	d527      	bpl.n	800e78e <__sflush_r+0xb2>
 800e73e:	2200      	movs	r2, #0
 800e740:	6062      	str	r2, [r4, #4]
 800e742:	04d9      	lsls	r1, r3, #19
 800e744:	6922      	ldr	r2, [r4, #16]
 800e746:	6022      	str	r2, [r4, #0]
 800e748:	d504      	bpl.n	800e754 <__sflush_r+0x78>
 800e74a:	1c42      	adds	r2, r0, #1
 800e74c:	d101      	bne.n	800e752 <__sflush_r+0x76>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	b903      	cbnz	r3, 800e754 <__sflush_r+0x78>
 800e752:	6560      	str	r0, [r4, #84]	@ 0x54
 800e754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e756:	602f      	str	r7, [r5, #0]
 800e758:	b1b9      	cbz	r1, 800e78a <__sflush_r+0xae>
 800e75a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e75e:	4299      	cmp	r1, r3
 800e760:	d002      	beq.n	800e768 <__sflush_r+0x8c>
 800e762:	4628      	mov	r0, r5
 800e764:	f7ff fab4 	bl	800dcd0 <_free_r>
 800e768:	2300      	movs	r3, #0
 800e76a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e76c:	e00d      	b.n	800e78a <__sflush_r+0xae>
 800e76e:	2301      	movs	r3, #1
 800e770:	4628      	mov	r0, r5
 800e772:	47b0      	blx	r6
 800e774:	4602      	mov	r2, r0
 800e776:	1c50      	adds	r0, r2, #1
 800e778:	d1c9      	bne.n	800e70e <__sflush_r+0x32>
 800e77a:	682b      	ldr	r3, [r5, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d0c6      	beq.n	800e70e <__sflush_r+0x32>
 800e780:	2b1d      	cmp	r3, #29
 800e782:	d001      	beq.n	800e788 <__sflush_r+0xac>
 800e784:	2b16      	cmp	r3, #22
 800e786:	d11e      	bne.n	800e7c6 <__sflush_r+0xea>
 800e788:	602f      	str	r7, [r5, #0]
 800e78a:	2000      	movs	r0, #0
 800e78c:	e022      	b.n	800e7d4 <__sflush_r+0xf8>
 800e78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e792:	b21b      	sxth	r3, r3
 800e794:	e01b      	b.n	800e7ce <__sflush_r+0xf2>
 800e796:	690f      	ldr	r7, [r1, #16]
 800e798:	2f00      	cmp	r7, #0
 800e79a:	d0f6      	beq.n	800e78a <__sflush_r+0xae>
 800e79c:	0793      	lsls	r3, r2, #30
 800e79e:	680e      	ldr	r6, [r1, #0]
 800e7a0:	bf08      	it	eq
 800e7a2:	694b      	ldreq	r3, [r1, #20]
 800e7a4:	600f      	str	r7, [r1, #0]
 800e7a6:	bf18      	it	ne
 800e7a8:	2300      	movne	r3, #0
 800e7aa:	eba6 0807 	sub.w	r8, r6, r7
 800e7ae:	608b      	str	r3, [r1, #8]
 800e7b0:	f1b8 0f00 	cmp.w	r8, #0
 800e7b4:	dde9      	ble.n	800e78a <__sflush_r+0xae>
 800e7b6:	6a21      	ldr	r1, [r4, #32]
 800e7b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7ba:	4643      	mov	r3, r8
 800e7bc:	463a      	mov	r2, r7
 800e7be:	4628      	mov	r0, r5
 800e7c0:	47b0      	blx	r6
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	dc08      	bgt.n	800e7d8 <__sflush_r+0xfc>
 800e7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d8:	4407      	add	r7, r0
 800e7da:	eba8 0800 	sub.w	r8, r8, r0
 800e7de:	e7e7      	b.n	800e7b0 <__sflush_r+0xd4>
 800e7e0:	20400001 	.word	0x20400001

0800e7e4 <_fflush_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	690b      	ldr	r3, [r1, #16]
 800e7e8:	4605      	mov	r5, r0
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	b913      	cbnz	r3, 800e7f4 <_fflush_r+0x10>
 800e7ee:	2500      	movs	r5, #0
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	bd38      	pop	{r3, r4, r5, pc}
 800e7f4:	b118      	cbz	r0, 800e7fe <_fflush_r+0x1a>
 800e7f6:	6a03      	ldr	r3, [r0, #32]
 800e7f8:	b90b      	cbnz	r3, 800e7fe <_fflush_r+0x1a>
 800e7fa:	f7fe fae1 	bl	800cdc0 <__sinit>
 800e7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d0f3      	beq.n	800e7ee <_fflush_r+0xa>
 800e806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e808:	07d0      	lsls	r0, r2, #31
 800e80a:	d404      	bmi.n	800e816 <_fflush_r+0x32>
 800e80c:	0599      	lsls	r1, r3, #22
 800e80e:	d402      	bmi.n	800e816 <_fflush_r+0x32>
 800e810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e812:	f7fe fbee 	bl	800cff2 <__retarget_lock_acquire_recursive>
 800e816:	4628      	mov	r0, r5
 800e818:	4621      	mov	r1, r4
 800e81a:	f7ff ff5f 	bl	800e6dc <__sflush_r>
 800e81e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e820:	07da      	lsls	r2, r3, #31
 800e822:	4605      	mov	r5, r0
 800e824:	d4e4      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	059b      	lsls	r3, r3, #22
 800e82a:	d4e1      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e82e:	f7fe fbe1 	bl	800cff4 <__retarget_lock_release_recursive>
 800e832:	e7dd      	b.n	800e7f0 <_fflush_r+0xc>

0800e834 <__swbuf_r>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	460e      	mov	r6, r1
 800e838:	4614      	mov	r4, r2
 800e83a:	4605      	mov	r5, r0
 800e83c:	b118      	cbz	r0, 800e846 <__swbuf_r+0x12>
 800e83e:	6a03      	ldr	r3, [r0, #32]
 800e840:	b90b      	cbnz	r3, 800e846 <__swbuf_r+0x12>
 800e842:	f7fe fabd 	bl	800cdc0 <__sinit>
 800e846:	69a3      	ldr	r3, [r4, #24]
 800e848:	60a3      	str	r3, [r4, #8]
 800e84a:	89a3      	ldrh	r3, [r4, #12]
 800e84c:	071a      	lsls	r2, r3, #28
 800e84e:	d501      	bpl.n	800e854 <__swbuf_r+0x20>
 800e850:	6923      	ldr	r3, [r4, #16]
 800e852:	b943      	cbnz	r3, 800e866 <__swbuf_r+0x32>
 800e854:	4621      	mov	r1, r4
 800e856:	4628      	mov	r0, r5
 800e858:	f000 f82a 	bl	800e8b0 <__swsetup_r>
 800e85c:	b118      	cbz	r0, 800e866 <__swbuf_r+0x32>
 800e85e:	f04f 37ff 	mov.w	r7, #4294967295
 800e862:	4638      	mov	r0, r7
 800e864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	6922      	ldr	r2, [r4, #16]
 800e86a:	1a98      	subs	r0, r3, r2
 800e86c:	6963      	ldr	r3, [r4, #20]
 800e86e:	b2f6      	uxtb	r6, r6
 800e870:	4283      	cmp	r3, r0
 800e872:	4637      	mov	r7, r6
 800e874:	dc05      	bgt.n	800e882 <__swbuf_r+0x4e>
 800e876:	4621      	mov	r1, r4
 800e878:	4628      	mov	r0, r5
 800e87a:	f7ff ffb3 	bl	800e7e4 <_fflush_r>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d1ed      	bne.n	800e85e <__swbuf_r+0x2a>
 800e882:	68a3      	ldr	r3, [r4, #8]
 800e884:	3b01      	subs	r3, #1
 800e886:	60a3      	str	r3, [r4, #8]
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	6022      	str	r2, [r4, #0]
 800e88e:	701e      	strb	r6, [r3, #0]
 800e890:	6962      	ldr	r2, [r4, #20]
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	429a      	cmp	r2, r3
 800e896:	d004      	beq.n	800e8a2 <__swbuf_r+0x6e>
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	07db      	lsls	r3, r3, #31
 800e89c:	d5e1      	bpl.n	800e862 <__swbuf_r+0x2e>
 800e89e:	2e0a      	cmp	r6, #10
 800e8a0:	d1df      	bne.n	800e862 <__swbuf_r+0x2e>
 800e8a2:	4621      	mov	r1, r4
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	f7ff ff9d 	bl	800e7e4 <_fflush_r>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d0d9      	beq.n	800e862 <__swbuf_r+0x2e>
 800e8ae:	e7d6      	b.n	800e85e <__swbuf_r+0x2a>

0800e8b0 <__swsetup_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4b29      	ldr	r3, [pc, #164]	@ (800e958 <__swsetup_r+0xa8>)
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	6818      	ldr	r0, [r3, #0]
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	b118      	cbz	r0, 800e8c4 <__swsetup_r+0x14>
 800e8bc:	6a03      	ldr	r3, [r0, #32]
 800e8be:	b90b      	cbnz	r3, 800e8c4 <__swsetup_r+0x14>
 800e8c0:	f7fe fa7e 	bl	800cdc0 <__sinit>
 800e8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8c8:	0719      	lsls	r1, r3, #28
 800e8ca:	d422      	bmi.n	800e912 <__swsetup_r+0x62>
 800e8cc:	06da      	lsls	r2, r3, #27
 800e8ce:	d407      	bmi.n	800e8e0 <__swsetup_r+0x30>
 800e8d0:	2209      	movs	r2, #9
 800e8d2:	602a      	str	r2, [r5, #0]
 800e8d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8d8:	81a3      	strh	r3, [r4, #12]
 800e8da:	f04f 30ff 	mov.w	r0, #4294967295
 800e8de:	e033      	b.n	800e948 <__swsetup_r+0x98>
 800e8e0:	0758      	lsls	r0, r3, #29
 800e8e2:	d512      	bpl.n	800e90a <__swsetup_r+0x5a>
 800e8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8e6:	b141      	cbz	r1, 800e8fa <__swsetup_r+0x4a>
 800e8e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8ec:	4299      	cmp	r1, r3
 800e8ee:	d002      	beq.n	800e8f6 <__swsetup_r+0x46>
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	f7ff f9ed 	bl	800dcd0 <_free_r>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8fa:	89a3      	ldrh	r3, [r4, #12]
 800e8fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e900:	81a3      	strh	r3, [r4, #12]
 800e902:	2300      	movs	r3, #0
 800e904:	6063      	str	r3, [r4, #4]
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	89a3      	ldrh	r3, [r4, #12]
 800e90c:	f043 0308 	orr.w	r3, r3, #8
 800e910:	81a3      	strh	r3, [r4, #12]
 800e912:	6923      	ldr	r3, [r4, #16]
 800e914:	b94b      	cbnz	r3, 800e92a <__swsetup_r+0x7a>
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e91c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e920:	d003      	beq.n	800e92a <__swsetup_r+0x7a>
 800e922:	4621      	mov	r1, r4
 800e924:	4628      	mov	r0, r5
 800e926:	f000 f8b6 	bl	800ea96 <__smakebuf_r>
 800e92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e92e:	f013 0201 	ands.w	r2, r3, #1
 800e932:	d00a      	beq.n	800e94a <__swsetup_r+0x9a>
 800e934:	2200      	movs	r2, #0
 800e936:	60a2      	str	r2, [r4, #8]
 800e938:	6962      	ldr	r2, [r4, #20]
 800e93a:	4252      	negs	r2, r2
 800e93c:	61a2      	str	r2, [r4, #24]
 800e93e:	6922      	ldr	r2, [r4, #16]
 800e940:	b942      	cbnz	r2, 800e954 <__swsetup_r+0xa4>
 800e942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e946:	d1c5      	bne.n	800e8d4 <__swsetup_r+0x24>
 800e948:	bd38      	pop	{r3, r4, r5, pc}
 800e94a:	0799      	lsls	r1, r3, #30
 800e94c:	bf58      	it	pl
 800e94e:	6962      	ldrpl	r2, [r4, #20]
 800e950:	60a2      	str	r2, [r4, #8]
 800e952:	e7f4      	b.n	800e93e <__swsetup_r+0x8e>
 800e954:	2000      	movs	r0, #0
 800e956:	e7f7      	b.n	800e948 <__swsetup_r+0x98>
 800e958:	20000108 	.word	0x20000108

0800e95c <_raise_r>:
 800e95c:	291f      	cmp	r1, #31
 800e95e:	b538      	push	{r3, r4, r5, lr}
 800e960:	4605      	mov	r5, r0
 800e962:	460c      	mov	r4, r1
 800e964:	d904      	bls.n	800e970 <_raise_r+0x14>
 800e966:	2316      	movs	r3, #22
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	f04f 30ff 	mov.w	r0, #4294967295
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e972:	b112      	cbz	r2, 800e97a <_raise_r+0x1e>
 800e974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e978:	b94b      	cbnz	r3, 800e98e <_raise_r+0x32>
 800e97a:	4628      	mov	r0, r5
 800e97c:	f000 f830 	bl	800e9e0 <_getpid_r>
 800e980:	4622      	mov	r2, r4
 800e982:	4601      	mov	r1, r0
 800e984:	4628      	mov	r0, r5
 800e986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e98a:	f000 b817 	b.w	800e9bc <_kill_r>
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d00a      	beq.n	800e9a8 <_raise_r+0x4c>
 800e992:	1c59      	adds	r1, r3, #1
 800e994:	d103      	bne.n	800e99e <_raise_r+0x42>
 800e996:	2316      	movs	r3, #22
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	2001      	movs	r0, #1
 800e99c:	e7e7      	b.n	800e96e <_raise_r+0x12>
 800e99e:	2100      	movs	r1, #0
 800e9a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4798      	blx	r3
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	e7e0      	b.n	800e96e <_raise_r+0x12>

0800e9ac <raise>:
 800e9ac:	4b02      	ldr	r3, [pc, #8]	@ (800e9b8 <raise+0xc>)
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	f7ff bfd3 	b.w	800e95c <_raise_r>
 800e9b6:	bf00      	nop
 800e9b8:	20000108 	.word	0x20000108

0800e9bc <_kill_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d07      	ldr	r5, [pc, #28]	@ (800e9dc <_kill_r+0x20>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	602b      	str	r3, [r5, #0]
 800e9ca:	f7f5 fd9d 	bl	8004508 <_kill>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	d102      	bne.n	800e9d8 <_kill_r+0x1c>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	b103      	cbz	r3, 800e9d8 <_kill_r+0x1c>
 800e9d6:	6023      	str	r3, [r4, #0]
 800e9d8:	bd38      	pop	{r3, r4, r5, pc}
 800e9da:	bf00      	nop
 800e9dc:	20002208 	.word	0x20002208

0800e9e0 <_getpid_r>:
 800e9e0:	f7f5 bd8a 	b.w	80044f8 <_getpid>

0800e9e4 <_calloc_r>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	fba1 5402 	umull	r5, r4, r1, r2
 800e9ea:	b934      	cbnz	r4, 800e9fa <_calloc_r+0x16>
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	f7fd fc79 	bl	800c2e4 <_malloc_r>
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	b928      	cbnz	r0, 800ea02 <_calloc_r+0x1e>
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	bd70      	pop	{r4, r5, r6, pc}
 800e9fa:	220c      	movs	r2, #12
 800e9fc:	6002      	str	r2, [r0, #0]
 800e9fe:	2600      	movs	r6, #0
 800ea00:	e7f9      	b.n	800e9f6 <_calloc_r+0x12>
 800ea02:	462a      	mov	r2, r5
 800ea04:	4621      	mov	r1, r4
 800ea06:	f7fe fa66 	bl	800ced6 <memset>
 800ea0a:	e7f4      	b.n	800e9f6 <_calloc_r+0x12>

0800ea0c <__ascii_mbtowc>:
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	b901      	cbnz	r1, 800ea12 <__ascii_mbtowc+0x6>
 800ea10:	a901      	add	r1, sp, #4
 800ea12:	b142      	cbz	r2, 800ea26 <__ascii_mbtowc+0x1a>
 800ea14:	b14b      	cbz	r3, 800ea2a <__ascii_mbtowc+0x1e>
 800ea16:	7813      	ldrb	r3, [r2, #0]
 800ea18:	600b      	str	r3, [r1, #0]
 800ea1a:	7812      	ldrb	r2, [r2, #0]
 800ea1c:	1e10      	subs	r0, r2, #0
 800ea1e:	bf18      	it	ne
 800ea20:	2001      	movne	r0, #1
 800ea22:	b002      	add	sp, #8
 800ea24:	4770      	bx	lr
 800ea26:	4610      	mov	r0, r2
 800ea28:	e7fb      	b.n	800ea22 <__ascii_mbtowc+0x16>
 800ea2a:	f06f 0001 	mvn.w	r0, #1
 800ea2e:	e7f8      	b.n	800ea22 <__ascii_mbtowc+0x16>

0800ea30 <__ascii_wctomb>:
 800ea30:	4603      	mov	r3, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	b141      	cbz	r1, 800ea48 <__ascii_wctomb+0x18>
 800ea36:	2aff      	cmp	r2, #255	@ 0xff
 800ea38:	d904      	bls.n	800ea44 <__ascii_wctomb+0x14>
 800ea3a:	228a      	movs	r2, #138	@ 0x8a
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea42:	4770      	bx	lr
 800ea44:	700a      	strb	r2, [r1, #0]
 800ea46:	2001      	movs	r0, #1
 800ea48:	4770      	bx	lr

0800ea4a <__swhatbuf_r>:
 800ea4a:	b570      	push	{r4, r5, r6, lr}
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea52:	2900      	cmp	r1, #0
 800ea54:	b096      	sub	sp, #88	@ 0x58
 800ea56:	4615      	mov	r5, r2
 800ea58:	461e      	mov	r6, r3
 800ea5a:	da0d      	bge.n	800ea78 <__swhatbuf_r+0x2e>
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea62:	f04f 0100 	mov.w	r1, #0
 800ea66:	bf14      	ite	ne
 800ea68:	2340      	movne	r3, #64	@ 0x40
 800ea6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea6e:	2000      	movs	r0, #0
 800ea70:	6031      	str	r1, [r6, #0]
 800ea72:	602b      	str	r3, [r5, #0]
 800ea74:	b016      	add	sp, #88	@ 0x58
 800ea76:	bd70      	pop	{r4, r5, r6, pc}
 800ea78:	466a      	mov	r2, sp
 800ea7a:	f000 f849 	bl	800eb10 <_fstat_r>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	dbec      	blt.n	800ea5c <__swhatbuf_r+0x12>
 800ea82:	9901      	ldr	r1, [sp, #4]
 800ea84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea8c:	4259      	negs	r1, r3
 800ea8e:	4159      	adcs	r1, r3
 800ea90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea94:	e7eb      	b.n	800ea6e <__swhatbuf_r+0x24>

0800ea96 <__smakebuf_r>:
 800ea96:	898b      	ldrh	r3, [r1, #12]
 800ea98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea9a:	079d      	lsls	r5, r3, #30
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	d507      	bpl.n	800eab2 <__smakebuf_r+0x1c>
 800eaa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eaa6:	6023      	str	r3, [r4, #0]
 800eaa8:	6123      	str	r3, [r4, #16]
 800eaaa:	2301      	movs	r3, #1
 800eaac:	6163      	str	r3, [r4, #20]
 800eaae:	b003      	add	sp, #12
 800eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eab2:	ab01      	add	r3, sp, #4
 800eab4:	466a      	mov	r2, sp
 800eab6:	f7ff ffc8 	bl	800ea4a <__swhatbuf_r>
 800eaba:	9f00      	ldr	r7, [sp, #0]
 800eabc:	4605      	mov	r5, r0
 800eabe:	4639      	mov	r1, r7
 800eac0:	4630      	mov	r0, r6
 800eac2:	f7fd fc0f 	bl	800c2e4 <_malloc_r>
 800eac6:	b948      	cbnz	r0, 800eadc <__smakebuf_r+0x46>
 800eac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eacc:	059a      	lsls	r2, r3, #22
 800eace:	d4ee      	bmi.n	800eaae <__smakebuf_r+0x18>
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	f043 0302 	orr.w	r3, r3, #2
 800ead8:	81a3      	strh	r3, [r4, #12]
 800eada:	e7e2      	b.n	800eaa2 <__smakebuf_r+0xc>
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	6020      	str	r0, [r4, #0]
 800eae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	9b01      	ldr	r3, [sp, #4]
 800eae8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eaec:	b15b      	cbz	r3, 800eb06 <__smakebuf_r+0x70>
 800eaee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f000 f81e 	bl	800eb34 <_isatty_r>
 800eaf8:	b128      	cbz	r0, 800eb06 <__smakebuf_r+0x70>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	f023 0303 	bic.w	r3, r3, #3
 800eb00:	f043 0301 	orr.w	r3, r3, #1
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	89a3      	ldrh	r3, [r4, #12]
 800eb08:	431d      	orrs	r5, r3
 800eb0a:	81a5      	strh	r5, [r4, #12]
 800eb0c:	e7cf      	b.n	800eaae <__smakebuf_r+0x18>
	...

0800eb10 <_fstat_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4d07      	ldr	r5, [pc, #28]	@ (800eb30 <_fstat_r+0x20>)
 800eb14:	2300      	movs	r3, #0
 800eb16:	4604      	mov	r4, r0
 800eb18:	4608      	mov	r0, r1
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	602b      	str	r3, [r5, #0]
 800eb1e:	f7f5 fd37 	bl	8004590 <_fstat>
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	d102      	bne.n	800eb2c <_fstat_r+0x1c>
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	b103      	cbz	r3, 800eb2c <_fstat_r+0x1c>
 800eb2a:	6023      	str	r3, [r4, #0]
 800eb2c:	bd38      	pop	{r3, r4, r5, pc}
 800eb2e:	bf00      	nop
 800eb30:	20002208 	.word	0x20002208

0800eb34 <_isatty_r>:
 800eb34:	b538      	push	{r3, r4, r5, lr}
 800eb36:	4d06      	ldr	r5, [pc, #24]	@ (800eb50 <_isatty_r+0x1c>)
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	4608      	mov	r0, r1
 800eb3e:	602b      	str	r3, [r5, #0]
 800eb40:	f7f5 fd36 	bl	80045b0 <_isatty>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d102      	bne.n	800eb4e <_isatty_r+0x1a>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	b103      	cbz	r3, 800eb4e <_isatty_r+0x1a>
 800eb4c:	6023      	str	r3, [r4, #0]
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	20002208 	.word	0x20002208

0800eb54 <_init>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	bf00      	nop
 800eb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb5a:	bc08      	pop	{r3}
 800eb5c:	469e      	mov	lr, r3
 800eb5e:	4770      	bx	lr

0800eb60 <_fini>:
 800eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb62:	bf00      	nop
 800eb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb66:	bc08      	pop	{r3}
 800eb68:	469e      	mov	lr, r3
 800eb6a:	4770      	bx	lr
